val version : string
val bindir : string
val standard_library : string
val ccomp_type : string
val c_compiler : string
val c_output_obj : string
val c_has_debug_prefix_map : bool
val as_has_debug_prefix_map : bool
val ocamlc_cflags : string
val ocamlc_cppflags : string
val ocamlopt_cflags : string
val ocamlopt_cppflags : string
val bytecomp_c_libraries : string
val native_c_libraries : string
val native_pack_linker : string
val mkdll : string
val mkexe : string
val mkmaindll : string
val default_rpath : string
val mksharedlibrpath : string
val ar : string
val interface_suffix : string ref
val exec_magic_number : string
val cmi_magic_number : string
val cmo_magic_number : string
val cma_magic_number : string
val cmx_magic_number : string
val cmxa_magic_number : string
val ast_intf_magic_number : string
val ast_impl_magic_number : string
val cmxs_magic_number : string
val cmt_magic_number : string
val linear_magic_number : string
val max_tag : int
val lazy_tag : int
val max_young_wosize : int
val stack_threshold : int
val stack_safety_margin : int
val native_compiler : bool
val architecture : string
val model : string
val system : string
val asm : string
val asm_cfi_supported : bool
val with_frame_pointers : bool
val ext_obj : string
val ext_asm : string
val ext_lib : string
val ext_dll : string
val ext_exe : string
val default_executable_name : string
val systhread_supported : bool
val flexdll_dirs : string list
val host : string
val target : string
val flambda : bool
val with_flambda_invariants : bool
val with_cmm_invariants : bool
val reserved_header_bits : int
val flat_float_array : bool
val function_sections : bool
val windows_unicode : bool
val naked_pointers : bool
val supports_shared_libraries : bool
val native_dynlink : bool
val afl_instrument : bool
val ar_supports_response_files : bool
val print_config : out_channel -> unit
val config_var : string -> string option("DEBUG:rule", [(("version", 339), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -78), 0, (("utils/config_boot.mli", 23, 1196, 1196), ("utils/config_boot.mli", 23, 1196, 1215), 0), 0, Tag1 ("Config_boot", 0)), 0); (("bindir", 340), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -77), 0, (("utils/config_boot.mli", 26, 1265, 1265), ("utils/config_boot.mli", 26, 1265, 1283), 0), 0, Tag1 ("Config_boot", 1)), 0); (("standard_library", 341), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -76), 0, (("utils/config_boot.mli", 29, 1337, 1337), ("utils/config_boot.mli", 29, 1337, 1365), 0), 0, Tag1 ("Config_boot", 2)), 0); (("ccomp_type", 342), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -75), 0, (("utils/config_boot.mli", 32, 1422, 1422), ("utils/config_boot.mli", 32, 1422, 1444), 0), 0, Tag1 ("Config_boot", 3)), 0); (("c_compiler", 343), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -74), 0, (("utils/config_boot.mli", 37, 1602, 1602), ("utils/config_boot.mli", 37, 1602, 1624), 0), 0, Tag1 ("Config_boot", 4)), 0); (("c_output_obj", 344), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -73), 0, (("utils/config_boot.mli", 40, 1675, 1675), ("utils/config_boot.mli", 40, 1675, 1699), 0), 0, Tag1 ("Config_boot", 5)), 0); (("c_has_debug_prefix_map", 345), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -72), 0, (("utils/config_boot.mli", 44, 1780, 1780), ("utils/config_boot.mli", 44, 1780, 1813), 0), 0, Tag1 ("Config_boot", 6)), 0); (("as_has_debug_prefix_map", 346), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -71), 0, (("utils/config_boot.mli", 47, 1873, 1873), ("utils/config_boot.mli", 47, 1873, 1907), 0), 0, Tag1 ("Config_boot", 7)), 0); (("ocamlc_cflags", 347), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -70), 0, (("utils/config_boot.mli", 50, 1966, 1966), ("utils/config_boot.mli", 50, 1966, 1992), 0), 0, Tag1 ("Config_boot", 8)), 0); (("ocamlc_cppflags", 348), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -69), 0, (("utils/config_boot.mli", 53, 2048, 2048), ("utils/config_boot.mli", 53, 2048, 2076), 0), 0, Tag1 ("Config_boot", 9)), 0); (("ocamlopt_cflags", 349), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -68), 0, (("utils/config_boot.mli", 56, 2136, 2136), ("utils/config_boot.mli", 57, 2165, 2216), 0), [(("ocaml.deprecated", (("utils/config_boot.mli", 57, 2165, 2170), ("utils/config_boot.mli", 57, 2165, 2186), 0)), ([([(Tag1 (Tag2 ("Use ocamlc_cflags instead.", (("utils/config_boot.mli", 57, 2165, 2188), ("utils/config_boot.mli", 57, 2165, 2214), 0), 0)), (("utils/config_boot.mli", 57, 2165, 2187), ("utils/config_boot.mli", 57, 2165, 2215), 0), 0, 0)], (("utils/config_boot.mli", 57, 2165, 2187), ("utils/config_boot.mli", 57, 2165, 2215), 0))]), (("utils/config_boot.mli", 57, 2165, 2167), ("utils/config_boot.mli", 57, 2165, 2216), 0))], Tag1 ("Config_boot", 10)), 0); (("ocamlopt_cppflags", 350), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -67), 0, (("utils/config_boot.mli", 61, 2331, 2331), ("utils/config_boot.mli", 62, 2362, 2415), 0), [(("ocaml.deprecated", (("utils/config_boot.mli", 62, 2362, 2367), ("utils/config_boot.mli", 62, 2362, 2383), 0)), ([([(Tag1 (Tag2 ("Use ocamlc_cppflags instead.", (("utils/config_boot.mli", 62, 2362, 2385), ("utils/config_boot.mli", 62, 2362, 2413), 0), 0)), (("utils/config_boot.mli", 62, 2362, 2384), ("utils/config_boot.mli", 62, 2362, 2414), 0), 0, 0)], (("utils/config_boot.mli", 62, 2362, 2384), ("utils/config_boot.mli", 62, 2362, 2414), 0))]), (("utils/config_boot.mli", 62, 2362, 2364), ("utils/config_boot.mli", 62, 2362, 2415), 0))], Tag1 ("Config_boot", 11)), 0); (("bytecomp_c_libraries", 351), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -66), 0, (("utils/config_boot.mli", 66, 2536, 2536), ("utils/config_boot.mli", 66, 2536, 2568), 0), 0, Tag1 ("Config_boot", 12)), 0); (("native_c_libraries", 352), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -65), 0, (("utils/config_boot.mli", 69, 2622, 2622), ("utils/config_boot.mli", 69, 2622, 2652), 0), 0, Tag1 ("Config_boot", 13)), 0); (("native_pack_linker", 353), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -64), 0, (("utils/config_boot.mli", 72, 2711, 2711), ("utils/config_boot.mli", 72, 2711, 2741), 0), 0, Tag1 ("Config_boot", 14)), 0); (("mkdll", 354), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -63), 0, (("utils/config_boot.mli", 76, 2849, 2849), ("utils/config_boot.mli", 76, 2849, 2866), 0), 0, Tag1 ("Config_boot", 15)), 0); (("mkexe", 355), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -62), 0, (("utils/config_boot.mli", 79, 2927, 2927), ("utils/config_boot.mli", 79, 2927, 2944), 0), 0, Tag1 ("Config_boot", 16)), 0); (("mkmaindll", 356), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -61), 0, (("utils/config_boot.mli", 82, 2999, 2999), ("utils/config_boot.mli", 82, 2999, 3020), 0), 0, Tag1 ("Config_boot", 17)), 0); (("default_rpath", 357), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -60), 0, (("utils/config_boot.mli", 85, 3085, 3085), ("utils/config_boot.mli", 85, 3085, 3110), 0), 0, Tag1 ("Config_boot", 18)), 0); (("mksharedlibrpath", 358), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -59), 0, (("utils/config_boot.mli", 89, 3210, 3210), ("utils/config_boot.mli", 89, 3210, 3238), 0), 0, Tag1 ("Config_boot", 19)), 0); (("ar", 359), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -58), 0, (("utils/config_boot.mli", 93, 3345, 3345), ("utils/config_boot.mli", 93, 3345, 3359), 0), 0, Tag1 ("Config_boot", 20)), 0); (("interface_suffix", 360), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -57)], (0)), 100000000, 0, -56), 0, (("utils/config_boot.mli", 96, 3420, 3420), ("utils/config_boot.mli", 96, 3420, 3452), 0), 0, Tag1 ("Config_boot", 21)), 0); (("exec_magic_number", 361), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -55), 0, (("utils/config_boot.mli", 99, 3493, 3493), ("utils/config_boot.mli", 99, 3493, 3522), 0), 0, Tag1 ("Config_boot", 22)), 0); (("cmi_magic_number", 362), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -54), 0, (("utils/config_boot.mli", 102, 3574, 3574), ("utils/config_boot.mli", 102, 3574, 3602), 0), 0, Tag1 ("Config_boot", 23)), 0); (("cmo_magic_number", 363), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -53), 0, (("utils/config_boot.mli", 105, 3653, 3653), ("utils/config_boot.mli", 105, 3653, 3681), 0), 0, Tag1 ("Config_boot", 24)), 0); (("cma_magic_number", 364), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -52), 0, (("utils/config_boot.mli", 108, 3729, 3729), ("utils/config_boot.mli", 108, 3729, 3757), 0), 0, Tag1 ("Config_boot", 25)), 0); (("cmx_magic_number", 365), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -51), 0, (("utils/config_boot.mli", 111, 3797, 3797), ("utils/config_boot.mli", 111, 3797, 3825), 0), 0, Tag1 ("Config_boot", 26)), 0); (("cmxa_magic_number", 366), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -50), 0, (("utils/config_boot.mli", 114, 3881, 3881), ("utils/config_boot.mli", 114, 3881, 3910), 0), 0, Tag1 ("Config_boot", 27)), 0); (("ast_intf_magic_number", 367), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -49), 0, (("utils/config_boot.mli", 117, 3979, 3979), ("utils/config_boot.mli", 117, 3979, 4012), 0), 0, Tag1 ("Config_boot", 28)), 0); (("ast_impl_magic_number", 368), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -48), 0, (("utils/config_boot.mli", 120, 4076, 4076), ("utils/config_boot.mli", 120, 4076, 4109), 0), 0, Tag1 ("Config_boot", 29)), 0); (("cmxs_magic_number", 369), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -47), 0, (("utils/config_boot.mli", 123, 4178, 4178), ("utils/config_boot.mli", 123, 4178, 4207), 0), 0, Tag1 ("Config_boot", 30)), 0); (("cmt_magic_number", 370), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -46), 0, (("utils/config_boot.mli", 126, 4262, 4262), ("utils/config_boot.mli", 126, 4262, 4290), 0), 0, Tag1 ("Config_boot", 31)), 0); (("linear_magic_number", 371), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -45), 0, (("utils/config_boot.mli", 129, 4341, 4341), ("utils/config_boot.mli", 129, 4341, 4372), 0), 0, Tag1 ("Config_boot", 32)), 0); (("max_tag", 372), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -44), 0, (("utils/config_boot.mli", 132, 4435, 4435), ("utils/config_boot.mli", 132, 4435, 4451), 0), 0, Tag1 ("Config_boot", 33)), 0); (("lazy_tag", 373), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -43), 0, (("utils/config_boot.mli", 135, 4525, 4525), ("utils/config_boot.mli", 135, 4525, 4543), 0), 0, Tag1 ("Config_boot", 34)), 0); (("max_young_wosize", 374), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -42), 0, (("utils/config_boot.mli", 139, 4660, 4660), ("utils/config_boot.mli", 139, 4660, 4685), 0), 0, Tag1 ("Config_boot", 35)), 0); (("stack_threshold", 375), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -41), 0, (("utils/config_boot.mli", 143, 4767, 4767), ("utils/config_boot.mli", 143, 4767, 4791), 0), 0, Tag1 ("Config_boot", 36)), 0); (("stack_safety_margin", 376), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -40), 0, (("utils/config_boot.mli", 147, 4880, 4880), ("utils/config_boot.mli", 147, 4880, 4908), 0), 0, Tag1 ("Config_boot", 37)), 0); (("native_compiler", 377), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -39), 0, (("utils/config_boot.mli", 153, 5116, 5116), ("utils/config_boot.mli", 153, 5116, 5141), 0), 0, Tag1 ("Config_boot", 38)), 0); (("architecture", 378), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -38), 0, (("utils/config_boot.mli", 158, 5214, 5214), ("utils/config_boot.mli", 158, 5214, 5238), 0), 0, Tag1 ("Config_boot", 39)), 0); (("model", 379), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -37), 0, (("utils/config_boot.mli", 161, 5299, 5299), ("utils/config_boot.mli", 161, 5299, 5316), 0), 0, Tag1 ("Config_boot", 40)), 0); (("system", 380), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -36), 0, (("utils/config_boot.mli", 164, 5381, 5381), ("utils/config_boot.mli", 164, 5381, 5399), 0), 0, Tag1 ("Config_boot", 41)), 0); (("asm", 381), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -35), 0, (("utils/config_boot.mli", 167, 5462, 5462), ("utils/config_boot.mli", 167, 5462, 5477), 0), 0, Tag1 ("Config_boot", 42)), 0); (("asm_cfi_supported", 382), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -34), 0, (("utils/config_boot.mli", 171, 5563, 5563), ("utils/config_boot.mli", 171, 5563, 5590), 0), 0, Tag1 ("Config_boot", 43)), 0); (("with_frame_pointers", 383), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -33), 0, (("utils/config_boot.mli", 174, 5644, 5644), ("utils/config_boot.mli", 174, 5644, 5674), 0), 0, Tag1 ("Config_boot", 44)), 0); (("ext_obj", 384), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -32), 0, (("utils/config_boot.mli", 177, 5732, 5732), ("utils/config_boot.mli", 177, 5732, 5751), 0), 0, Tag1 ("Config_boot", 45)), 0); (("ext_asm", 385), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -31), 0, (("utils/config_boot.mli", 180, 5810, 5810), ("utils/config_boot.mli", 180, 5810, 5829), 0), 0, Tag1 ("Config_boot", 46)), 0); (("ext_lib", 386), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -30), 0, (("utils/config_boot.mli", 183, 5891, 5891), ("utils/config_boot.mli", 183, 5891, 5910), 0), 0, Tag1 ("Config_boot", 47)), 0); (("ext_dll", 387), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -29), 0, (("utils/config_boot.mli", 186, 5970, 5970), ("utils/config_boot.mli", 186, 5970, 5989), 0), 0, Tag1 ("Config_boot", 48)), 0); (("ext_exe", 388), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -28), 0, (("utils/config_boot.mli", 189, 6064, 6064), ("utils/config_boot.mli", 189, 6064, 6083), 0), 0, Tag1 ("Config_boot", 49)), 0); (("default_executable_name", 389), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -27), 0, (("utils/config_boot.mli", 194, 6171, 6171), ("utils/config_boot.mli", 194, 6171, 6206), 0), 0, Tag1 ("Config_boot", 50)), 0); (("systhread_supported", 390), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -26), 0, (("utils/config_boot.mli", 198, 6309, 6309), ("utils/config_boot.mli", 198, 6309, 6339), 0), 0, Tag1 ("Config_boot", 51)), 0); (("flexdll_dirs", 391), ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -25)], (0)), 100000000, 0, -24), 0, (("utils/config_boot.mli", 201, 6397, 6397), ("utils/config_boot.mli", 201, 6397, 6427), 0), 0, Tag1 ("Config_boot", 52)), 0); (("host", 392), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -23), 0, (("utils/config_boot.mli", 204, 6479, 6479), ("utils/config_boot.mli", 204, 6479, 6496), 0), 0, Tag1 ("Config_boot", 53)), 0); (("target", 393), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -22), 0, (("utils/config_boot.mli", 207, 6546, 6546), ("utils/config_boot.mli", 207, 6546, 6565), 0), 0, Tag1 ("Config_boot", 54)), 0); (("flambda", 394), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -21), 0, (("utils/config_boot.mli", 210, 6615, 6615), ("utils/config_boot.mli", 210, 6615, 6633), 0), 0, Tag1 ("Config_boot", 55)), 0); (("with_flambda_invariants", 395), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -20), 0, (("utils/config_boot.mli", 213, 6690, 6690), ("utils/config_boot.mli", 213, 6690, 6724), 0), 0, Tag1 ("Config_boot", 56)), 0); (("with_cmm_invariants", 396), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -19), 0, (("utils/config_boot.mli", 216, 6787, 6787), ("utils/config_boot.mli", 216, 6787, 6817), 0), 0, Tag1 ("Config_boot", 57)), 0); (("reserved_header_bits", 397), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -18), 0, (("utils/config_boot.mli", 219, 6876, 6876), ("utils/config_boot.mli", 219, 6876, 6906), 0), 0, Tag1 ("Config_boot", 58)), 0); (("flat_float_array", 398), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -17), 0, (("utils/config_boot.mli", 222, 6962, 6962), ("utils/config_boot.mli", 222, 6962, 6989), 0), 0, Tag1 ("Config_boot", 59)), 0); (("function_sections", 399), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -16), 0, (("utils/config_boot.mli", 226, 7070, 7070), ("utils/config_boot.mli", 226, 7070, 7098), 0), 0, Tag1 ("Config_boot", 60)), 0); (("windows_unicode", 400), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -15), 0, (("utils/config_boot.mli", 230, 7195, 7195), ("utils/config_boot.mli", 230, 7195, 7220), 0), 0, Tag1 ("Config_boot", 61)), 0); (("naked_pointers", 401), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -14), 0, (("utils/config_boot.mli", 233, 7272, 7272), ("utils/config_boot.mli", 233, 7272, 7297), 0), 0, Tag1 ("Config_boot", 62)), 0); (("supports_shared_libraries", 402), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -13), 0, (("utils/config_boot.mli", 238, 7367, 7367), ("utils/config_boot.mli", 238, 7367, 7402), 0), 0, Tag1 ("Config_boot", 63)), 0); (("native_dynlink", 403), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -12), 0, (("utils/config_boot.mli", 243, 7467, 7467), ("utils/config_boot.mli", 243, 7467, 7491), 0), 0, Tag1 ("Config_boot", 64)), 0); (("afl_instrument", 404), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -11), 0, (("utils/config_boot.mli", 248, 7562, 7562), ("utils/config_boot.mli", 248, 7562, 7587), 0), 0, Tag1 ("Config_boot", 65)), 0); (("ar_supports_response_files", 405), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -10), 0, (("utils/config_boot.mli", 251, 7653, 7653), ("utils/config_boot.mli", 251, 7653, 7689), 0), 0, Tag1 ("Config_boot", 66)), 0); (("print_config", 406), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -9), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("utils/config_boot.mli", 255, 7773, 7773), ("utils/config_boot.mli", 255, 7773, 7811), 0), 0, Tag1 ("Config_boot", 67)), 0); (("config_var", 407), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5)], (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0, (("utils/config_boot.mli", 257, 7813, 7813), ("utils/config_boot.mli", 257, 7813, 7853), 0), 0, Tag1 ("Config_boot", 68)), 0); (("merlin", 408), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2), 0, (("utils/config_boot.mli", 262, 7923, 7923), ("utils/config_boot.mli", 262, 7923, 7940), 0), 0, Tag1 ("Config_boot", 69)), 0)], "Config_boot", [("Config_boot", ("\247\017B\n1\020\137\179\240\006fw|\210tA")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

val merlin : bool

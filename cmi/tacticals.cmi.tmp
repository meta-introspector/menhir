exception FailError of int * Pp.t Lazy.t
val catch_failerror : Exninfo.iexn -> unit Proofview.tactic
val tclIDTAC : unit Proofview.tactic
val tclTHEN :
  unit Proofview.tactic -> unit Proofview.tactic -> unit Proofview.tactic
val tclFAILn : ?info:Exninfo.info -> int -> Pp.t -> 'a Proofview.tactic
val tclFAIL : ?info:Exninfo.info -> Pp.t -> 'a Proofview.tactic
val tclZEROMSG :
  ?info:Exninfo.info -> ?loc:Loc.t -> Pp.t -> 'a Proofview.tactic
val tclOR :
  unit Proofview.tactic -> unit Proofview.tactic -> unit Proofview.tactic
val tclORD :
  unit Proofview.tactic ->
  (unit -> unit Proofview.tactic) -> unit Proofview.tactic
val tclONCE : unit Proofview.tactic -> unit Proofview.tactic
val tclEXACTLY_ONCE : unit Proofview.tactic -> unit Proofview.tactic
val tclIFCATCH :
  unit Proofview.tactic ->
  (unit -> unit Proofview.tactic) ->
  (unit -> unit Proofview.tactic) -> unit Proofview.tactic
val tclORELSE0 :
  unit Proofview.tactic -> unit Proofview.tactic -> unit Proofview.tactic
val tclORELSE :
  unit Proofview.tactic -> unit Proofview.tactic -> unit Proofview.tactic
val tclTHENS3PARTS :
  unit Proofview.tactic ->
  unit Proofview.tactic array ->
  unit Proofview.tactic ->
  unit Proofview.tactic array -> unit Proofview.tactic
val tclTHENSLASTn :
  unit Proofview.tactic ->
  unit Proofview.tactic ->
  unit Proofview.tactic array -> unit Proofview.tactic
val tclTHENSFIRSTn :
  unit Proofview.tactic ->
  unit Proofview.tactic array ->
  unit Proofview.tactic -> unit Proofview.tactic
val tclTHENFIRSTn :
  unit Proofview.tactic ->
  unit Proofview.tactic array -> unit Proofview.tactic
val tclTHENFIRST :
  unit Proofview.tactic -> unit Proofview.tactic -> unit Proofview.tactic
val tclBINDFIRST :
  'a Proofview.tactic -> ('a -> 'b Proofview.tactic) -> 'b Proofview.tactic
val tclTHENLASTn :
  unit Proofview.tactic ->
  unit Proofview.tactic array -> unit Proofview.tactic
val tclTHENLAST :
  unit Proofview.tactic -> unit Proofview.tactic -> unit Proofview.tactic
val tclBINDLAST :
  'a Proofview.tactic -> ('a -> 'b Proofview.tactic) -> 'b Proofview.tactic
val tclTHENS :
  unit Proofview.tactic ->
  unit Proofview.tactic list -> unit Proofview.tactic
val tclTHENLIST : unit Proofview.tactic list -> unit Proofview.tactic
val tclMAP :
  ('a -> unit Proofview.tactic) -> 'a list -> unit Proofview.tactic
val tclTRY : unit Proofview.tactic -> unit Proofview.tactic
val tclTRYb : unit Proofview.tactic -> bool list Proofview.tactic
val tclFIRST : unit Proofview.tactic list -> unit Proofview.tactic
val tclIFTHENELSE :
  unit Proofview.tactic ->
  unit Proofview.tactic -> unit Proofview.tactic -> unit Proofview.tactic
val tclIFTHENSVELSE :
  unit Proofview.tactic ->
  unit Proofview.tactic array ->
  unit Proofview.tactic -> unit Proofview.tactic
val tclIFTHENTRYELSEMUST :
  unit Proofview.tactic -> unit Proofview.tactic -> unit Proofview.tactic
val tclIFTHENFIRSTTRYELSEMUST :
  unit Proofview.tactic -> unit Proofview.tactic -> unit Proofview.tactic
val tclDO : int -> unit Proofview.tactic -> unit Proofview.tactic
val tclREPEAT : unit Proofview.tactic -> unit Proofview.tactic
val tclREPEAT_MAIN : unit Proofview.tactic -> unit Proofview.tactic
val tclCOMPLETE : 'a Proofview.tactic -> 'a Proofview.tactic
val tclSOLVE : unit Proofview.tactic list -> unit Proofview.tactic
val tclPROGRESS : unit Proofview.tactic -> unit Proofview.tactic
val tclWITHHOLES :
  bool -> 'a Proofview.tactic -> Evd.evar_map -> 'a Proofview.tactic
val tclDELAYEDWITHHOLES :
  bool ->
  'a Tactypes.delayed_open ->
  ('a -> unit Proofview.tactic) -> unit Proofview.tactic
val tclMAPDELAYEDWITHHOLES :
  bool ->
  'a Tactypes.delayed_open list ->
  ('a -> unit Proofview.tactic) -> unit Proofview.tactic
val tclTIMEOUT : int -> unit Proofview.tactic -> unit Proofview.tactic
val tclTIME : string option -> 'a Proofview.tactic -> 'a Proofview.tactic
val nLastDecls : Proofview.Goal.t -> int -> EConstr.named_context
val ifOnHyp :
  (Environ.env -> Evd.evar_map -> Names.Id.t * EConstr.types -> bool) ->
  (Names.Id.t -> unit Proofview.tactic) ->
  (Names.Id.t -> unit Proofview.tactic) ->
  Names.Id.t -> unit Proofview.tactic
val onNthHypId :
  int -> (Names.Id.t -> unit Proofview.tactic) -> unit Proofview.tactic
val onLastHypId :
  (Names.Id.t -> unit Proofview.tactic) -> unit Proofview.tactic
val onLastHyp :
  (EConstr.constr -> unit Proofview.tactic) -> unit Proofview.tactic
val onLastDecl :
  (EConstr.named_declaration -> unit Proofview.tactic) ->
  unit Proofview.tactic
val onNLastHypsId :
  int -> (Names.Id.t list -> unit Proofview.tactic) -> unit Proofview.tactic
val onNLastHyps :
  int ->
  (EConstr.constr list -> unit Proofview.tactic) -> unit Proofview.tactic
val onNLastDecls :
  int ->
  (EConstr.named_context -> unit Proofview.tactic) -> unit Proofview.tactic
val onHyps :
  (Proofview.Goal.t -> EConstr.named_context) ->
  (EConstr.named_context -> unit Proofview.tactic) -> unit Proofview.tactic
val afterHyp :
  Names.Id.t ->
  (EConstr.named_context -> unit Proofview.tactic) -> unit Proofview.tactic
val tryAllHyps :
  (Names.Id.t -> unit Proofview.tactic) -> unit Proofview.tactic
val tryAllHypsAndConcl :
  (Names.Id.t option -> unit Proofview.tactic) -> unit Proofview.tactic
val onClause :
  (Names.Id.t option -> unit Proofview.tactic) ->
  Locus.clause -> unit Proofview.tactic
val onAllHyps :
  (Names.Id.t -> unit Proofview.tactic) -> unit Proofview.tactic
val onAllHypsAndConcl :
  (Names.Id.t option -> unit Proofview.tactic) -> unit Proofview.tactic
val elimination_sort_of_goal : Proofview.Goal.t -> Sorts.family
val elimination_sort_of_hyp : Names.Id.t -> Proofview.Goal.t -> Sorts.family
val elimination_sort_of_clause :
  Names.Id.t option -> Proofview.Goal.t -> Sorts.family
val pf_constr_of_global : Names.GlobRef.t -> EConstr.constr Proofview.tactic
val tclTYPEOFTHEN :
  ?refresh:bool ->
  EConstr.constr ->
  (Evd.evar_map -> EConstr.types -> unit Proofview.tactic) ->
  unit Proofview.tactic
val tclSELECT :
  ?nosuchgoal:'a Proofview.tactic ->
  Goal_select.t -> 'a Proofview.tactic -> 'a Proofview.tactic
val get_and_check_or_and_pattern :
  ?loc:Loc.t ->
  Tactypes.delayed_open_constr Tactypes.or_and_intro_pattern_expr ->
  bool list array -> Tactypes.intro_patterns array
val fix_empty_or_and_pattern :
  int ->
  Tactypes.delayed_open_constr Tactypes.or_and_intro_pattern_expr ->
  Tactypes.delayed_open_constr Tactypes.or_and_intro_pattern_expr
val compute_constructor_signatures :
  Environ.env -> rec_flag:bool -> Names.inductive * 'a -> bool list array
val compute_induction_names :
  bool ->
  bool list array ->
  ("DEBUG:rule", [Tag2 (("FailError", 1266), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -578); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lazy"), "t"), [(Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -580)], (0)), 100000000, 0, -579)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Tacticals", 0)), 2, 0); (("catch_failerror", 1267), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Exninfo")), "iexn"), 0, (0)), 100000000, 0, -577), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -576)], (0)), 100000000, 0, -575), 0), 100000000, 0, -574), 0, (("tactics/tacticals.mli", 38, 1741, 1741), ("tactics/tacticals.mli", 38, 1741, 1790), 0), 0, Tag1 ("Tacticals", 1)), 0); (("tclIDTAC", 1268), ((Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -573)], (0)), 100000000, 0, -572), 0, (("tactics/tacticals.mli", 40, 1792, 1792), ("tactics/tacticals.mli", 40, 1792, 1818), 0), 0, Tag1 ("Tacticals", 2)), 0); (("tclTHEN", 1269), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -571)], (0)), 100000000, 0, -570), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -569)], (0)), 100000000, 0, -568), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -567)], (0)), 100000000, 0, -566), 0), 100000000, 0, -565), 0), 100000000, 0, -564), 0, (("tactics/tacticals.mli", 41, 1819, 1819), ("tactics/tacticals.mli", 41, 1819, 1874), 0), 0, Tag1 ("Tacticals", 3)), 0); (("tclFAILn", 1270), ((Tag1 (Tag1 ("info"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Exninfo")), "info"), 0, (0)), 100000000, 0, -563)], (0)), 100000000, 0, -562), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -561), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -560), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [((("a")), 100000000, 0, -559)], (0)), 100000000, 0, -558), 0), 100000000, 0, -557), 0), 100000000, 0, -556), 0), 100000000, 0, -555), 0, (("tactics/tacticals.mli", 45, 2035, 2035), ("tactics/tacticals.mli", 45, 2035, 2096), 0), 0, Tag1 ("Tacticals", 4)), 0); (("tclFAIL", 1271), ((Tag1 (Tag1 ("info"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Exninfo")), "info"), 0, (0)), 100000000, 0, -554)], (0)), 100000000, 0, -553), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -552), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [((("a")), 100000000, 0, -551)], (0)), 100000000, 0, -550), 0), 100000000, 0, -549), 0), 100000000, 0, -548), 0, (("tactics/tacticals.mli", 47, 2098, 2098), ("tactics/tacticals.mli", 47, 2098, 2151), 0), 0, Tag1 ("Tacticals", 5)), 0); (("tclZEROMSG", 1272), ((Tag1 (Tag1 ("info"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Exninfo")), "info"), 0, (0)), 100000000, 0, -547)], (0)), 100000000, 0, -546), (Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -545)], (0)), 100000000, 0, -544), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -543), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [((("a")), 100000000, 0, -542)], (0)), 100000000, 0, -541), 0), 100000000, 0, -540), 0), 100000000, 0, -539), 0), 100000000, 0, -538), 0, (("tactics/tacticals.mli", 50, 2195, 2195), ("tactics/tacticals.mli", 50, 2195, 2265), 0), 0, Tag1 ("Tacticals", 7)), 0); (("tclOR", 1273), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -537)], (0)), 100000000, 0, -536), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -535)], (0)), 100000000, 0, -534), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -533)], (0)), 100000000, 0, -532), 0), 100000000, 0, -531), 0), 100000000, 0, -530), 0, (("tactics/tacticals.mli", 53, 2329, 2329), ("tactics/tacticals.mli", 53, 2329, 2382), 0), 0, Tag1 ("Tacticals", 8)), 0); (("tclORD", 1274), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -529)], (0)), 100000000, 0, -528), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -527), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -526)], (0)), 100000000, 0, -525), 0), 100000000, 0, -524), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -523)], (0)), 100000000, 0, -522), 0), 100000000, 0, -521), 0), 100000000, 0, -520), 0, (("tactics/tacticals.mli", 54, 2383, 2383), ("tactics/tacticals.mli", 54, 2383, 2447), 0), 0, Tag1 ("Tacticals", 9)), 0); (("tclONCE", 1275), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -519)], (0)), 100000000, 0, -518), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -517)], (0)), 100000000, 0, -516), 0), 100000000, 0, -515), 0, (("tactics/tacticals.mli", 59, 2602, 2602), ("tactics/tacticals.mli", 59, 2602, 2642), 0), 0, Tag1 ("Tacticals", 10)), 0); (("tclEXACTLY_ONCE", 1276), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -514)], (0)), 100000000, 0, -513), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -512)], (0)), 100000000, 0, -511), 0), 100000000, 0, -510), 0, (("tactics/tacticals.mli", 60, 2643, 2643), ("tactics/tacticals.mli", 60, 2643, 2691), 0), 0, Tag1 ("Tacticals", 11)), 0); (("tclIFCATCH", 1277), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -509)], (0)), 100000000, 0, -508), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -507), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -506)], (0)), 100000000, 0, -505), 0), 100000000, 0, -504), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -503), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -502)], (0)), 100000000, 0, -501), 0), 100000000, 0, -500), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -499)], (0)), 100000000, 0, -498), 0), 100000000, 0, -497), 0), 100000000, 0, -496), 0), 100000000, 0, -495), 0, (("tactics/tacticals.mli", 62, 2693, 2693), ("tactics/tacticals.mli", 65, 2765, 2803), 0), 0, Tag1 ("Tacticals", 12)), 0); (("tclORELSE0", 1278), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -494)], (0)), 100000000, 0, -493), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -492)], (0)), 100000000, 0, -491), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -490)], (0)), 100000000, 0, -489), 0), 100000000, 0, -488), 0), 100000000, 0, -487), 0, (("tactics/tacticals.mli", 67, 2805, 2805), ("tactics/tacticals.mli", 67, 2805, 2863), 0), 0, Tag1 ("Tacticals", 13)), 0); (("tclORELSE", 1279), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -486)], (0)), 100000000, 0, -485), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -484)], (0)), 100000000, 0, -483), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -482)], (0)), 100000000, 0, -481), 0), 100000000, 0, -480), 0), 100000000, 0, -479), 0, (("tactics/tacticals.mli", 68, 2864, 2864), ("tactics/tacticals.mli", 68, 2864, 2922), 0), 0, Tag1 ("Tacticals", 14)), 0); (("tclTHENS3PARTS", 1280), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -478)], (0)), 100000000, 0, -477), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -476)], (0)), 100000000, 0, -475)], (0)), 100000000, 0, -474), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -473)], (0)), 100000000, 0, -472), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -471)], (0)), 100000000, 0, -470)], (0)), 100000000, 0, -469), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -468)], (0)), 100000000, 0, -467), 0), 100000000, 0, -466), 0), 100000000, 0, -465), 0), 100000000, 0, -464), 0), 100000000, 0, -463), 0, (("tactics/tacticals.mli", 76, 3299, 3299), ("tactics/tacticals.mli", 76, 3299, 3407), 0), 0, Tag1 ("Tacticals", 15)), 0); (("tclTHENSLASTn", 1281), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -462)], (0)), 100000000, 0, -461), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -460)], (0)), 100000000, 0, -459), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -458)], (0)), 100000000, 0, -457)], (0)), 100000000, 0, -456), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -455)], (0)), 100000000, 0, -454), 0), 100000000, 0, -453), 0), 100000000, 0, -452), 0), 100000000, 0, -451), 0, (("tactics/tacticals.mli", 77, 3408, 3408), ("tactics/tacticals.mli", 77, 3408, 3493), 0), 0, Tag1 ("Tacticals", 16)), 0); (("tclTHENSFIRSTn", 1282), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -450)], (0)), 100000000, 0, -449), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -448)], (0)), 100000000, 0, -447)], (0)), 100000000, 0, -446), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -445)], (0)), 100000000, 0, -444), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -443)], (0)), 100000000, 0, -442), 0), 100000000, 0, -441), 0), 100000000, 0, -440), 0), 100000000, 0, -439), 0, (("tactics/tacticals.mli", 78, 3494, 3494), ("tactics/tacticals.mli", 78, 3494, 3577), 0), 0, Tag1 ("Tacticals", 17)), 0); (("tclTHENFIRSTn", 1283), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -438)], (0)), 100000000, 0, -437), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -436)], (0)), 100000000, 0, -435)], (0)), 100000000, 0, -434), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -433)], (0)), 100000000, 0, -432), 0), 100000000, 0, -431), 0), 100000000, 0, -430), 0, (("tactics/tacticals.mli", 79, 3578, 3578), ("tactics/tacticals.mli", 79, 3578, 3645), 0), 0, Tag1 ("Tacticals", 18)), 0); (("tclTHENFIRST", 1284), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -429)], (0)), 100000000, 0, -428), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -427)], (0)), 100000000, 0, -426), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -425)], (0)), 100000000, 0, -424), 0), 100000000, 0, -423), 0), 100000000, 0, -422), 0, (("tactics/tacticals.mli", 83, 3764, 3764), ("tactics/tacticals.mli", 83, 3764, 3824), 0), 0, Tag1 ("Tacticals", 19)), 0); (("tclBINDFIRST", 1285), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [((("a")), 100000000, 0, -420)], (0)), 100000000, 0, -421), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -420), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [((("b")), 100000000, 0, -417)], (0)), 100000000, 0, -419), 0), 100000000, 0, -418), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [((("b")), 100000000, 0, -417)], (0)), 100000000, 0, -416), 0), 100000000, 0, -415), 0), 100000000, 0, -414), 0, (("tactics/tacticals.mli", 84, 3825, 3825), ("tactics/tacticals.mli", 84, 3825, 3887), 0), 0, Tag1 ("Tacticals", 20)), 0); (("tclTHENLASTn", 1286), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -413)], (0)), 100000000, 0, -412), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -411)], (0)), 100000000, 0, -410)], (0)), 100000000, 0, -409), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -408)], (0)), 100000000, 0, -407), 0), 100000000, 0, -406), 0), 100000000, 0, -405), 0, (("tactics/tacticals.mli", 85, 3888, 3888), ("tactics/tacticals.mli", 85, 3888, 3954), 0), 0, Tag1 ("Tacticals", 21)), 0); (("tclTHENLAST", 1287), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -404)], (0)), 100000000, 0, -403), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -402)], (0)), 100000000, 0, -401), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -400)], (0)), 100000000, 0, -399), 0), 100000000, 0, -398), 0), 100000000, 0, -397), 0, (("tactics/tacticals.mli", 86, 3955, 3955), ("tactics/tacticals.mli", 86, 3955, 4015), 0), 0, Tag1 ("Tacticals", 22)), 0); (("tclBINDLAST", 1288), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [((("a")), 100000000, 0, -395)], (0)), 100000000, 0, -396), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -395), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [((("b")), 100000000, 0, -392)], (0)), 100000000, 0, -394), 0), 100000000, 0, -393), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [((("b")), 100000000, 0, -392)], (0)), 100000000, 0, -391), 0), 100000000, 0, -390), 0), 100000000, 0, -389), 0, (("tactics/tacticals.mli", 87, 4016, 4016), ("tactics/tacticals.mli", 87, 4016, 4078), 0), 0, Tag1 ("Tacticals", 23)), 0); (("tclTHENS", 1289), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -388)], (0)), 100000000, 0, -387), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -386)], (0)), 100000000, 0, -385)], (0)), 100000000, 0, -384), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -383)], (0)), 100000000, 0, -382), 0), 100000000, 0, -381), 0), 100000000, 0, -380), 0, (("tactics/tacticals.mli", 89, 4122, 4122), ("tactics/tacticals.mli", 89, 4122, 4183), 0), 0, Tag1 ("Tacticals", 24)), 0); (("tclTHENLIST", 1290), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -379)], (0)), 100000000, 0, -378)], (0)), 100000000, 0, -377), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -376)], (0)), 100000000, 0, -375), 0), 100000000, 0, -374), 0, (("tactics/tacticals.mli", 91, 4235, 4235), ("tactics/tacticals.mli", 91, 4235, 4284), 0), 0, Tag1 ("Tacticals", 25)), 0); (("tclMAP", 1291), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -370), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -373)], (0)), 100000000, 0, -372), 0), 100000000, 0, -371), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -370)], (0)), 100000000, 0, -369), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -368)], (0)), 100000000, 0, -367), 0), 100000000, 0, -366), 0), 100000000, 0, -365), 0, (("tactics/tacticals.mli", 94, 4346, 4346), ("tactics/tacticals.mli", 94, 4346, 4404), 0), 0, Tag1 ("Tacticals", 26)), 0); (("tclTRY", 1292), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -364)], (0)), 100000000, 0, -363), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -362)], (0)), 100000000, 0, -361), 0), 100000000, 0, -360), 0, (("tactics/tacticals.mli", 96, 4406, 4406), ("tactics/tacticals.mli", 96, 4406, 4445), 0), 0, Tag1 ("Tacticals", 27)), 0); (("tclTRYb", 1293), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -359)], (0)), 100000000, 0, -358), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -357)], (0)), 100000000, 0, -356)], (0)), 100000000, 0, -355), 0), 100000000, 0, -354), 0, (("tactics/tacticals.mli", 97, 4446, 4446), ("tactics/tacticals.mli", 97, 4446, 4491), 0), 0, Tag1 ("Tacticals", 28)), 0); (("tclFIRST", 1294), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -353)], (0)), 100000000, 0, -352)], (0)), 100000000, 0, -351), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -350)], (0)), 100000000, 0, -349), 0), 100000000, 0, -348), 0, (("tactics/tacticals.mli", 98, 4492, 4492), ("tactics/tacticals.mli", 98, 4492, 4538), 0), 0, Tag1 ("Tacticals", 29)), 0); (("tclIFTHENELSE", 1295), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -347)], (0)), 100000000, 0, -346), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -345)], (0)), 100000000, 0, -344), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -343)], (0)), 100000000, 0, -342), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -341)], (0)), 100000000, 0, -340), 0), 100000000, 0, -339), 0), 100000000, 0, -338), 0), 100000000, 0, -337), 0, (("tactics/tacticals.mli", 99, 4539, 4539), ("tactics/tacticals.mli", 99, 4539, 4615), 0), 0, Tag1 ("Tacticals", 30)), 0); (("tclIFTHENSVELSE", 1296), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -336)], (0)), 100000000, 0, -335), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -334)], (0)), 100000000, 0, -333)], (0)), 100000000, 0, -332), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -331)], (0)), 100000000, 0, -330), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -329)], (0)), 100000000, 0, -328), 0), 100000000, 0, -327), 0), 100000000, 0, -326), 0), 100000000, 0, -325), 0, (("tactics/tacticals.mli", 100, 4616, 4616), ("tactics/tacticals.mli", 100, 4616, 4700), 0), 0, Tag1 ("Tacticals", 31)), 0); (("tclIFTHENTRYELSEMUST", 1297), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -324)], (0)), 100000000, 0, -323), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -322)], (0)), 100000000, 0, -321), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -320)], (0)), 100000000, 0, -319), 0), 100000000, 0, -318), 0), 100000000, 0, -317), 0, (("tactics/tacticals.mli", 101, 4701, 4701), ("tactics/tacticals.mli", 101, 4701, 4769), 0), 0, Tag1 ("Tacticals", 32)), 0); (("tclIFTHENFIRSTTRYELSEMUST", 1298), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -316)], (0)), 100000000, 0, -315), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -314)], (0)), 100000000, 0, -313), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -312)], (0)), 100000000, 0, -311), 0), 100000000, 0, -310), 0), 100000000, 0, -309), 0, (("tactics/tacticals.mli", 102, 4770, 4770), ("tactics/tacticals.mli", 102, 4770, 4843), 0), 0, Tag1 ("Tacticals", 33)), 0); (("tclDO", 1299), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -308), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -307)], (0)), 100000000, 0, -306), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -305)], (0)), 100000000, 0, -304), 0), 100000000, 0, -303), 0), 100000000, 0, -302), 0, (("tactics/tacticals.mli", 104, 4845, 4845), ("tactics/tacticals.mli", 104, 4845, 4890), 0), 0, Tag1 ("Tacticals", 34)), 0); (("tclREPEAT", 1300), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -301)], (0)), 100000000, 0, -300), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -299)], (0)), 100000000, 0, -298), 0), 100000000, 0, -297), 0, (("tactics/tacticals.mli", 105, 4891, 4891), ("tactics/tacticals.mli", 105, 4891, 4933), 0), 0, Tag1 ("Tacticals", 35)), 0); (("tclREPEAT_MAIN", 1301), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -296)], (0)), 100000000, 0, -295), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -294)], (0)), 100000000, 0, -293), 0), 100000000, 0, -292), 0, (("tactics/tacticals.mli", 107, 5000, 5000), ("tactics/tacticals.mli", 107, 5000, 5047), 0), 0, Tag1 ("Tacticals", 36)), 0); (("tclCOMPLETE", 1302), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [((("a")), 100000000, 0, -290)], (0)), 100000000, 0, -291), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [((("a")), 100000000, 0, -290)], (0)), 100000000, 0, -289), 0), 100000000, 0, -288), 0, (("tactics/tacticals.mli", 108, 5048, 5048), ("tactics/tacticals.mli", 108, 5048, 5088), 0), 0, Tag1 ("Tacticals", 37)), 0); (("tclSOLVE", 1303), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -287)], (0)), 100000000, 0, -286)], (0)), 100000000, 0, -285), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -284)], (0)), 100000000, 0, -283), 0), 100000000, 0, -282), 0, (("tactics/tacticals.mli", 109, 5089, 5089), ("tactics/tacticals.mli", 109, 5089, 5135), 0), 0, Tag1 ("Tacticals", 38)), 0); (("tclPROGRESS", 1304), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -281)], (0)), 100000000, 0, -280), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -279)], (0)), 100000000, 0, -278), 0), 100000000, 0, -277), 0, (("tactics/tacticals.mli", 110, 5136, 5136), ("tactics/tacticals.mli", 110, 5136, 5180), 0), 0, Tag1 ("Tacticals", 39)), 0); (("tclWITHHOLES", 1305), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -276), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [((("a")), 100000000, 0, -273)], (0)), 100000000, 0, -275), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -274), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [((("a")), 100000000, 0, -273)], (0)), 100000000, 0, -272), 0), 100000000, 0, -271), 0), 100000000, 0, -270), 0), 100000000, 0, -269), 0, (("tactics/tacticals.mli", 111, 5181, 5181), ("tactics/tacticals.mli", 111, 5181, 5246), 0), 0, Tag1 ("Tacticals", 40)), 0); (("tclDELAYEDWITHHOLES", 1306), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -268), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactypes")), "delayed_open"), [((("a")), 100000000, 0, -266)], (0)), 100000000, 0, -267), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -266), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -265)], (0)), 100000000, 0, -264), 0), 100000000, 0, -263), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -262)], (0)), 100000000, 0, -261), 0), 100000000, 0, -260), 0), 100000000, 0, -259), 0), 100000000, 0, -258), 0, (("tactics/tacticals.mli", 112, 5247, 5247), ("tactics/tacticals.mli", 112, 5247, 5334), 0), 0, Tag1 ("Tacticals", 41)), 0); (("tclMAPDELAYEDWITHHOLES", 1307), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -257), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "delayed_open"), [((("a")), 100000000, 0, -254)], (0)), 100000000, 0, -256)], (0)), 100000000, 0, -255), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -254), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -253)], (0)), 100000000, 0, -252), 0), 100000000, 0, -251), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -250)], (0)), 100000000, 0, -249), 0), 100000000, 0, -248), 0), 100000000, 0, -247), 0), 100000000, 0, -246), 0, (("tactics/tacticals.mli", 113, 5335, 5335), ("tactics/tacticals.mli", 113, 5335, 5430), 0), 0, Tag1 ("Tacticals", 42)), 0); (("tclTIMEOUT", 1308), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -245), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -244)], (0)), 100000000, 0, -243), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -242)], (0)), 100000000, 0, -241), 0), 100000000, 0, -240), 0), 100000000, 0, -239), 0, (("tactics/tacticals.mli", 118, 5616, 5616), ("tactics/tacticals.mli", 118, 5616, 5666), 0), 0, Tag1 ("Tacticals", 43)), 0); (("tclTIME", 1309), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -238)], (0)), 100000000, 0, -237), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [((("a")), 100000000, 0, -235)], (0)), 100000000, 0, -236), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [((("a")), 100000000, 0, -235)], (0)), 100000000, 0, -234), 0), 100000000, 0, -233), 0), 100000000, 0, -232), 0, (("tactics/tacticals.mli", 119, 5667, 5667), ("tactics/tacticals.mli", 119, 5667, 5720), 0), 0, Tag1 ("Tacticals", 44)), 0); (("nLastDecls", 1310), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Proofview")), "Goal"), "t"), 0, (0)), 100000000, 0, -231), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -230), (Tag3 (Tag1 ((Tag2 ("EConstr")), "named_context"), 0, (0)), 100000000, 0, -229), 0), 100000000, 0, -228), 0), 100000000, 0, -227), 0, (("tactics/tacticals.mli", 121, 5722, 5722), ("tactics/tacticals.mli", 121, 5722, 5780), 0), 0, Tag1 ("Tacticals", 45)), 0); (("ifOnHyp", 1311), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -226), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -225), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -223); (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -224)]), 100000000, 0, -222), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -221), 0), 100000000, 0, -220), 0), 100000000, 0, -219), 0), 100000000, 0, -218), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -217), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -216)], (0)), 100000000, 0, -215), 0), 100000000, 0, -214), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -213), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -212)], (0)), 100000000, 0, -211), 0), 100000000, 0, -210), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -209), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -208)], (0)), 100000000, 0, -207), 0), 100000000, 0, -206), 0), 100000000, 0, -205), 0), 100000000, 0, -204), 0), 100000000, 0, -203), 0, (("tactics/tacticals.mli", 123, 5782, 5782), ("tactics/tacticals.mli", 125, 5921, 5952), 0), 0, Tag1 ("Tacticals", 46)), 0); (("onNthHypId", 1312), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -202), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -201), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -200)], (0)), 100000000, 0, -199), 0), 100000000, 0, -198), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -197)], (0)), 100000000, 0, -196), 0), 100000000, 0, -195), 0), 100000000, 0, -194), 0, (("tactics/tacticals.mli", 127, 5954, 5954), ("tactics/tacticals.mli", 127, 5954, 6014), 0), 0, Tag1 ("Tacticals", 47)), 0); (("onLastHypId", 1313), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -193), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -192)], (0)), 100000000, 0, -191), 0), 100000000, 0, -190), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -189)], (0)), 100000000, 0, -188), 0), 100000000, 0, -187), 0, (("tactics/tacticals.mli", 128, 6015, 6015), ("tactics/tacticals.mli", 128, 6015, 6074), 0), 0, Tag1 ("Tacticals", 48)), 0); (("onLastHyp", 1314), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -186), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -185)], (0)), 100000000, 0, -184), 0), 100000000, 0, -183), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -182)], (0)), 100000000, 0, -181), 0), 100000000, 0, -180), 0, (("tactics/tacticals.mli", 129, 6075, 6075), ("tactics/tacticals.mli", 129, 6075, 6136), 0), 0, Tag1 ("Tacticals", 49)), 0); (("onLastDecl", 1315), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "named_declaration"), 0, (0)), 100000000, 0, -179), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -178)], (0)), 100000000, 0, -177), 0), 100000000, 0, -176), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -175)], (0)), 100000000, 0, -174), 0), 100000000, 0, -173), 0, (("tactics/tacticals.mli", 130, 6137, 6137), ("tactics/tacticals.mli", 130, 6137, 6209), 0), 0, Tag1 ("Tacticals", 50)), 0); (("onNLastHypsId", 1316), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -172), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -171)], (0)), 100000000, 0, -170), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -169)], (0)), 100000000, 0, -168), 0), 100000000, 0, -167), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -166)], (0)), 100000000, 0, -165), 0), 100000000, 0, -164), 0), 100000000, 0, -163), 0, (("tactics/tacticals.mli", 132, 6211, 6211), ("tactics/tacticals.mli", 132, 6211, 6282), 0), 0, Tag1 ("Tacticals", 51)), 0); (("onNLastHyps", 1317), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -162), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -161)], (0)), 100000000, 0, -160), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -159)], (0)), 100000000, 0, -158), 0), 100000000, 0, -157), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -156)], (0)), 100000000, 0, -155), 0), 100000000, 0, -154), 0), 100000000, 0, -153), 0, (("tactics/tacticals.mli", 133, 6283, 6283), ("tactics/tacticals.mli", 133, 6283, 6356), 0), 0, Tag1 ("Tacticals", 52)), 0); (("onNLastDecls", 1318), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -152), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "named_context"), 0, (0)), 100000000, 0, -151), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -150)], (0)), 100000000, 0, -149), 0), 100000000, 0, -148), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -147)], (0)), 100000000, 0, -146), 0), 100000000, 0, -145), 0), 100000000, 0, -144), 0, (("tactics/tacticals.mli", 134, 6357, 6357), ("tactics/tacticals.mli", 134, 6357, 6432), 0), 0, Tag1 ("Tacticals", 53)), 0); (("onHyps", 1319), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Proofview")), "Goal"), "t"), 0, (0)), 100000000, 0, -143), (Tag3 (Tag1 ((Tag2 ("EConstr")), "named_context"), 0, (0)), 100000000, 0, -142), 0), 100000000, 0, -141), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "named_context"), 0, (0)), 100000000, 0, -140), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -139)], (0)), 100000000, 0, -138), 0), 100000000, 0, -137), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -136)], (0)), 100000000, 0, -135), 0), 100000000, 0, -134), 0), 100000000, 0, -133), 0, (("tactics/tacticals.mli", 136, 6434, 6434), ("tactics/tacticals.mli", 137, 6491, 6554), 0), 0, Tag1 ("Tacticals", 54)), 0); (("afterHyp", 1320), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -132), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "named_context"), 0, (0)), 100000000, 0, -131), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -130)], (0)), 100000000, 0, -129), 0), 100000000, 0, -128), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -127)], (0)), 100000000, 0, -126), 0), 100000000, 0, -125), 0), 100000000, 0, -124), 0, (("tactics/tacticals.mli", 138, 6555, 6555), ("tactics/tacticals.mli", 138, 6555, 6626), 0), 0, Tag1 ("Tacticals", 55)), 0); (("tryAllHyps", 1321), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -123), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -122)], (0)), 100000000, 0, -121), 0), 100000000, 0, -120), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -119)], (0)), 100000000, 0, -118), 0), 100000000, 0, -117), 0, (("tactics/tacticals.mli", 140, 6628, 6628), ("tactics/tacticals.mli", 140, 6628, 6690), 0), 0, Tag1 ("Tacticals", 56)), 0); (("tryAllHypsAndConcl", 1322), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -116)], (0)), 100000000, 0, -115), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -114)], (0)), 100000000, 0, -113), 0), 100000000, 0, -112), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -111)], (0)), 100000000, 0, -110), 0), 100000000, 0, -109), 0, (("tactics/tacticals.mli", 141, 6691, 6691), ("tactics/tacticals.mli", 141, 6691, 6760), 0), 0, Tag1 ("Tacticals", 57)), 0); (("onClause", 1323), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -108)], (0)), 100000000, 0, -107), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -106)], (0)), 100000000, 0, -105), 0), 100000000, 0, -104), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Locus")), "clause"), 0, (0)), 100000000, 0, -103), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -102)], (0)), 100000000, 0, -101), 0), 100000000, 0, -100), 0), 100000000, 0, -99), 0, (("tactics/tacticals.mli", 142, 6761, 6761), ("tactics/tacticals.mli", 142, 6761, 6831), 0), 0, Tag1 ("Tacticals", 58)), 0); (("onAllHyps", 1324), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -98), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -97)], (0)), 100000000, 0, -96), 0), 100000000, 0, -95), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -94)], (0)), 100000000, 0, -93), 0), 100000000, 0, -92), 0, (("tactics/tacticals.mli", 144, 6833, 6833), ("tactics/tacticals.mli", 144, 6833, 6895), 0), 0, Tag1 ("Tacticals", 59)), 0); (("onAllHypsAndConcl", 1325), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -91)], (0)), 100000000, 0, -90), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -89)], (0)), 100000000, 0, -88), 0), 100000000, 0, -87), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -86)], (0)), 100000000, 0, -85), 0), 100000000, 0, -84), 0, (("tactics/tacticals.mli", 145, 6896, 6896), ("tactics/tacticals.mli", 145, 6896, 6965), 0), 0, Tag1 ("Tacticals", 60)), 0); (("elimination_sort_of_goal", 1326), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Proofview")), "Goal"), "t"), 0, (0)), 100000000, 0, -83), (Tag3 (Tag1 ((Tag2 ("Sorts")), "family"), 0, (0)), 100000000, 0, -82), 0), 100000000, 0, -81), 0, (("tactics/tacticals.mli", 147, 6967, 6967), ("tactics/tacticals.mli", 147, 6967, 7030), 0), 0, Tag1 ("Tacticals", 61)), 0); (("elimination_sort_of_hyp", 1327), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -80), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Proofview")), "Goal"), "t"), 0, (0)), 100000000, 0, -79), (Tag3 (Tag1 ((Tag2 ("Sorts")), "family"), 0, (0)), 100000000, 0, -78), 0), 100000000, 0, -77), 0), 100000000, 0, -76), 0, (("tactics/tacticals.mli", 148, 7031, 7031), ("tactics/tacticals.mli", 148, 7031, 7102), 0), 0, Tag1 ("Tacticals", 62)), 0); (("elimination_sort_of_clause", 1328), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -75)], (0)), 100000000, 0, -74), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Proofview")), "Goal"), "t"), 0, (0)), 100000000, 0, -73), (Tag3 (Tag1 ((Tag2 ("Sorts")), "family"), 0, (0)), 100000000, 0, -72), 0), 100000000, 0, -71), 0), 100000000, 0, -70), 0, (("tactics/tacticals.mli", 149, 7103, 7103), ("tactics/tacticals.mli", 149, 7103, 7183), 0), 0, Tag1 ("Tacticals", 63)), 0); (("pf_constr_of_global", 1329), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -69), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -68)], (0)), 100000000, 0, -67), 0), 100000000, 0, -66), 0, (("tactics/tacticals.mli", 151, 7185, 7185), ("tactics/tacticals.mli", 151, 7185, 7247), 0), 0, Tag1 ("Tacticals", 64)), 0); (("tclTYPEOFTHEN", 1330), ((Tag1 (Tag1 ("refresh"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -65)], (0)), 100000000, 0, -64), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -63), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -62), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -61), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -60)], (0)), 100000000, 0, -59), 0), 100000000, 0, -58), 0), 100000000, 0, -57), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -56)], (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52), 0, (("tactics/tacticals.mli", 153, 7249, 7249), ("tactics/tacticals.mli", 153, 7249, 7365), 0), 0, Tag1 ("Tacticals", 65)), 0); (("tclSELECT", 1331), ((Tag1 (Tag1 ("nosuchgoal"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [((("a")), 100000000, 0, -47)], (0)), 100000000, 0, -51)], (0)), 100000000, 0, -50), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Goal_select")), "t"), 0, (0)), 100000000, 0, -49), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [((("a")), 100000000, 0, -47)], (0)), 100000000, 0, -48), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [((("a")), 100000000, 0, -47)], (0)), 100000000, 0, -46), 0), 100000000, 0, -45), 0), 100000000, 0, -44), 0), 100000000, 0, -43), 0, (("tactics/tacticals.mli", 155, 7367, 7367), ("tactics/tacticals.mli", 156, 7448, 7498), 0), [(("ocaml.deprecated", (("tactics/tacticals.mli", 156, 7448, 7451), ("tactics/tacticals.mli", 156, 7448, 7467), 0)), ([([(Tag1 (Tag2 ("Use [Goal_select.tclSELECT]", (("tactics/tacticals.mli", 156, 7448, 7469), ("tactics/tacticals.mli", 156, 7448, 7496), 0), 0)), (("tactics/tacticals.mli", 156, 7448, 7468), ("tactics/tacticals.mli", 156, 7448, 7497), 0), 0, 0)], (("tactics/tacticals.mli", 156, 7448, 7468), ("tactics/tacticals.mli", 156, 7448, 7497), 0))]), (("tactics/tacticals.mli", 156, 7448, 7448), ("tactics/tacticals.mli", 156, 7448, 7498), 0))], Tag1 ("Tacticals", 66)), 0); (("get_and_check_or_and_pattern", 1332), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -42)], (0)), 100000000, 0, -41), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactypes")), "or_and_intro_pattern_expr"), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "delayed_open_constr"), 0, (0)), 100000000, 0, -40)], (0)), 100000000, 0, -39), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -38)], (0)), 100000000, 0, -37)], (0)), 100000000, 0, -36), (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "intro_patterns"), 0, (0)), 100000000, 0, -35)], (0)), 100000000, 0, -34), 0), 100000000, 0, -33), 0), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("tactics/tacticals.mli", 163, 7749, 7749), ("tactics/tacticals.mli", 165, 7849, 7890), 0), 0, Tag1 ("Tacticals", 67)), 0); (("fix_empty_or_and_pattern", 1333), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -30), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactypes")), "or_and_intro_pattern_expr"), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "delayed_open_constr"), 0, (0)), 100000000, 0, -29)], (0)), 100000000, 0, -28), (Tag3 (Tag1 ((Tag2 ("Tactypes")), "or_and_intro_pattern_expr"), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "delayed_open_constr"), 0, (0)), 100000000, 0, -27)], (0)), 100000000, 0, -26), 0), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("tactics/tacticals.mli", 168, 7957, 7957), ("tactics/tacticals.mli", 170, 8046, 8093), 0), 0, Tag1 ("Tacticals", 68)), 0); (("compute_constructor_signatures", 1334), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -23), (Tag1 (("rec_flag"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -22), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -20); ((("a")), 100000000, 0, -21)]), 100000000, 0, -19), (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -18)], (0)), 100000000, 0, -17)], (0)), 100000000, 0, -16), 0), 100000000, 0, -15), 0), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("tactics/tacticals.mli", 172, 8095, 8095), ("tactics/tacticals.mli", 172, 8095, 8197), 0), 0, Tag1 ("Tacticals", 69)), 0); (("compute_induction_names", 1335), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -12), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -11)], (0)), 100000000, 0, -10)], (0)), 100000000, 0, -9), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "or_and_intro_pattern"), 0, (0)), 100000000, 0, -8)], (0)), 100000000, 0, -7), (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "intro_patterns"), 0, (0)), 100000000, 0, -6)], (0)), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("tactics/tacticals.mli", 175, 8245, 8245), ("tactics/tacticals.mli", 176, 8275, 8355), 0), 0, Tag1 ("Tacticals", 70)), 0)], "Tacticals", [("Tacticals", ("!\167\174\169p\233\173\r\175(>\026\194c@/")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Unix", (":B72R\011\005Sj\189)\011\239PH\254")); ("UnivSubst", ("\190qu\031mc\130\181\003G]\132\"\219m)")); ("UnivProblem", ("6'\161\018\181\001.\253\000\141a6\171\1727\155")); ("UnivNames", ("%\151_\209%+JM$n\001\232\194n\178N")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UState", ("SD\203\215|\136\n\251\239\208\148\215C\n\167\005")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Tactypes", ("\143E\135*\195\151\144H\151M\011($\017\159\203")); ("Summary", ("\148G\135\226\024L3\246\021\028U\146\164`\253\250")); ("Store", ("/dT\252\145\179pq\216{\181\206\190K+U")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Section", ("\245\207\b\021\142v=\155#w\246}\"4b\006")); ("Safe_typing", (")\250?\164\145\132\241\127\186\152h+\145\"\237l")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Proofview_monad", ("\218\196\189S\147\216\129\221\231\224v\228O\024*\239")); ("Proofview", ("\245\140U\027\236\199\199&\242\156\199YG\250tA")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("Nativevalues", ("8:\007\025e\226c,\001\171\146#l\210\171\152")); ("Nativelib", ("V\239\205Y1\147E:,\176\196Hy\1483|")); ("Nativecode", ("\190\185\255\006m\012\210\163\138Rz\247\15283\183")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Namegen", ("\187\222\224T\255\020\1808-\212*\164\131\177\157x")); ("Monad", ("\244\171T\157\194p\187\160\149\195{\132\222\020\253\148")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Logic_monad", ("\130\157\160Q\163vQ\137\184\2242\209\128\024\220i")); ("Locus", ("_\002\003W\246\181\225\242Uf\139\226\176\174\192I")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hook", ("\183\194\223\003\155\169',\187\240a;E\b\1396")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Goal_select", ("\235$\175\023t\178\194.Ivlz\005\211\173\n")); ("Genlambda", ("\170}\024\241\141\222\136S\169\219\2212i\134KI")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evd", ("\211\205p\193\216\129r\006\239oN\142ar\196\175")); ("Evar_kinds", ("\023L\186\132\218}\254\221\185\198\220\200h\003{\021")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Entries", ("\172\201\198\221Ap\027_{\174\141C\021\";p")); ("EConstr", ("\201aW\156\157;N\004\201V\208\006L\166\211)")); ("Dyn", ("\131z`\205v\2306\007x\027&K.?;\169")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conversion", ("\158\150&\195M\tv\127|\029\158RRK\211A")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CUnix", ("\140Zl\153\167\011J\015\005|th\247OTu")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CDebug", ("^4\210p7\239!3\138\138\213?\239`\250\157")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])
Tactypes.or_and_intro_pattern option -> Tactypes.intro_patterns array

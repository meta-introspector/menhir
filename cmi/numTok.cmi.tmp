type sign = SPlus | SMinus
type num_class = CDec | CHex
type 'a exp = EDec of 'a | EBin of 'a
module UnsignedNat :
  sig
    type t
    val of_string : string -> t
    val to_string : t -> string
    val sprint : t -> string
    val print : t -> Pp.t
    val classify : t -> num_class
    val compare : t -> t -> int
  end
module SignedNat :
  sig
    type t = sign * UnsignedNat.t
    val of_string : string -> t
    val to_string : t -> string
    val classify : t -> num_class
    val of_bigint : num_class -> Z.t -> t
    val to_bigint : t -> Z.t
  end
module Unsigned :
  sig
    type t
    val equal : t -> t -> bool
    val is_nat : t -> bool
    val to_nat : t -> string option
    val sprint : t -> string
    val print : t -> Pp.t
    val parse : (unit, char) Gramlib.Stream.t -> t
    val parse_string : string -> t option
    val classify : t -> num_class
  end
module Signed :
  sig
    type t = sign * Unsigned.t
    val equal : t -> t -> bool
    val is_zero : t -> bool
    val of_nat : UnsignedNat.t -> t
    val of_int : SignedNat.t -> t
    val to_int : t -> SignedNat.t option
    val is_int : t -> bool
    val sprint : t -> string
    val print : t -> Pp.t
    val parse_string : string -> t option
    val of_int_string : string -> t
    val of_string : string -> t
    val to_string : t -> string
    val of_bigint : num_class -> Z.t -> t
    val to_bigint : t -> Z.t option
    val of_int_frac_and_exponent :
      SignedNat.t -> UnsignedNat.t option -> SignedNat.t option -> t
    val to_int_frac_and_exponent :
      t -> SignedNat.t * UnsignedNat.t option * SignedNat.t option
    val of_bigint_and_exponent : Z.t -> Z.t exp -> t
    val to_bigint_and_exponent : t -> Z.t * Z.t exp
    val classify : t -> num_class
    val is_bigger_int_than : t -> UnsignedNat.t -> bool("DEBUG:rule", [Tag1 (("sign", 561), (0, 0, Tag1 ([(("SPlus", 270), (0), 0, (("interp/numTok.mli", 26, 1397, 1409), ("interp/numTok.mli", 26, 1397, 1414), 0), 0, Tag1 ("NumTok", 1)); (("SMinus", 271), (0), 0, (("interp/numTok.mli", 26, 1397, 1415), ("interp/numTok.mli", 26, 1397, 1423), 0), 0, Tag1 ("NumTok", 2))], 0), 1, 0, 0, 0, 0, 0, (("interp/numTok.mli", 26, 1397, 1397), ("interp/numTok.mli", 26, 1397, 1423), 0), 0, 1, 0, Tag1 ("NumTok", 0)), 1, 0); Tag1 (("num_class", 562), (0, 0, Tag1 ([(("CDec", 273), (0), 0, (("interp/numTok.mli", 28, 1425, 1442), ("interp/numTok.mli", 28, 1425, 1446), 0), 0, Tag1 ("NumTok", 4)); (("CHex", 274), (0), 0, (("interp/numTok.mli", 28, 1425, 1447), ("interp/numTok.mli", 28, 1425, 1453), 0), 0, Tag1 ("NumTok", 5))], 0), 1, 0, 0, 0, 0, 0, (("interp/numTok.mli", 28, 1425, 1425), ("interp/numTok.mli", 28, 1425, 1453), 0), 0, 1, 0, Tag1 ("NumTok", 3)), 1, 0); Tag1 (("exp", 563), ([((("a")), 100000000, 0, -2)], 1, Tag1 ([(("EDec", 276), ([((("a")), 100000000, 0, -2)]), 0, (("interp/numTok.mli", 30, 1455, 1469), ("interp/numTok.mli", 30, 1455, 1479), 0), 0, Tag1 ("NumTok", 7)); (("EBin", 277), ([((("a")), 100000000, 0, -2)]), 0, (("interp/numTok.mli", 30, 1455, 1480), ("interp/numTok.mli", 30, 1455, 1492), 0), 0, Tag1 ("NumTok", 8))], 0), 1, 0, [25], [0], 0, 0, (("interp/numTok.mli", 30, 1455, 1455), ("interp/numTok.mli", 30, 1455, 1492), 0), 0, 0, 0, Tag1 ("NumTok", 6)), 1, 0); Tag3 (("UnsignedNat", 564), 0, (Tag1 ([Tag1 (("t", 568), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("interp/numTok.mli", 36, 1574, 1576), ("interp/numTok.mli", 36, 1574, 1582), 0), 0, 0, 0, Tag1 ("NumTok", 9)), 1, 0); (("of_string", 569), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -22), (Tag3 ((("t", 568)), 0, (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("interp/numTok.mli", 37, 1583, 1585), ("interp/numTok.mli", 37, 1583, 1612), 0), 0, Tag1 ("NumTok", 10)), 0); (("to_string", 570), ((Tag1 (0, (Tag3 ((("t", 568)), 0, (0)), 100000000, 0, -19), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("interp/numTok.mli", 41, 1748, 1750), ("interp/numTok.mli", 41, 1748, 1777), 0), 0, Tag1 ("NumTok", 11)), 0); (("sprint", 571), ((Tag1 (0, (Tag3 ((("t", 568)), 0, (0)), 100000000, 0, -16), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -15), 0), 100000000, 0, -14), 0, (("interp/numTok.mli", 45, 1930, 1932), ("interp/numTok.mli", 45, 1930, 1956), 0), 0, Tag1 ("NumTok", 12)), 0); (("print", 572), ((Tag1 (0, (Tag3 ((("t", 568)), 0, (0)), 100000000, 0, -13), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("interp/numTok.mli", 46, 1957, 1959), ("interp/numTok.mli", 46, 1957, 1980), 0), 0, Tag1 ("NumTok", 13)), 0); (("classify", 573), ((Tag1 (0, (Tag3 ((("t", 568)), 0, (0)), 100000000, 0, -10), (Tag3 ((("num_class", 562)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("interp/numTok.mli", 49, 2064, 2066), ("interp/numTok.mli", 49, 2064, 2095), 0), 0, Tag1 ("NumTok", 14)), 0); (("compare", 574), ((Tag1 (0, (Tag3 ((("t", 568)), 0, (0)), 100000000, 0, -7), (Tag1 (0, (Tag3 ((("t", 568)), 0, (0)), 100000000, 0, -6), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0, (("interp/numTok.mli", 51, 2097, 2099), ("interp/numTok.mli", 51, 2097, 2126), 0), 0, Tag1 ("NumTok", 15)), 0)]), 0, (("interp/numTok.mli", 34, 1549, 1549), ("interp/numTok.mli", 52, 2127, 2130), 0), Tag1 ("NumTok", 16)), 0, 0); Tag3 (("SignedNat", 565), 0, (Tag1 ([Tag1 (("t", 575), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((("sign", 561)), 0, (0)), 100000000, 0, -41); (Tag3 (Tag1 ((("UnsignedNat", 564)), "t"), 0, (0)), 100000000, 0, -42)]), 100000000, 0, -40)), 0, 0, 0, 0, (("interp/numTok.mli", 58, 2217, 2219), ("interp/numTok.mli", 58, 2217, 2248), 0), 0, 0, 0, Tag1 ("NumTok", 17)), 1, 0); (("of_string", 576), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -39), (Tag3 ((("t", 575)), 0, (0)), 100000000, 0, -38), 0), 100000000, 0, -37), 0, (("interp/numTok.mli", 59, 2249, 2251), ("interp/numTok.mli", 59, 2249, 2278), 0), 0, Tag1 ("NumTok", 18)), 0); (("to_string", 577), ((Tag1 (0, (Tag3 ((("t", 575)), 0, (0)), 100000000, 0, -36), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -35), 0), 100000000, 0, -34), 0, (("interp/numTok.mli", 62, 2362, 2364), ("interp/numTok.mli", 62, 2362, 2391), 0), 0, Tag1 ("NumTok", 19)), 0); (("classify", 578), ((Tag1 (0, (Tag3 ((("t", 575)), 0, (0)), 100000000, 0, -33), (Tag3 ((("num_class", 562)), 0, (0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("interp/numTok.mli", 66, 2548, 2550), ("interp/numTok.mli", 66, 2548, 2579), 0), 0, Tag1 ("NumTok", 20)), 0); (("of_bigint", 579), ((Tag1 (0, (Tag3 ((("num_class", 562)), 0, (0)), 100000000, 0, -30), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Z")), "t"), 0, (0)), 100000000, 0, -29), (Tag3 ((("t", 575)), 0, (0)), 100000000, 0, -28), 0), 100000000, 0, -27), 0), 100000000, 0, -26), 0, (("interp/numTok.mli", 68, 2581, 2583), ("interp/numTok.mli", 68, 2581, 2620), 0), 0, Tag1 ("NumTok", 21)), 0); (("to_bigint", 580), ((Tag1 (0, (Tag3 ((("t", 575)), 0, (0)), 100000000, 0, -25), (Tag3 (Tag1 ((Tag2 ("Z")), "t"), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0, (("interp/numTok.mli", 69, 2621, 2623), ("interp/numTok.mli", 69, 2621, 2647), 0), 0, Tag1 ("NumTok", 22)), 0)]), 0, (("interp/numTok.mli", 56, 2194, 2194), ("interp/numTok.mli", 70, 2648, 2651), 0), Tag1 ("NumTok", 23)), 0, 0); Tag3 (("Unsigned", 566), 0, (Tag1 ([Tag1 (("t", 581), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("interp/numTok.mli", 76, 2713, 2715), ("interp/numTok.mli", 76, 2713, 2721), 0), 0, 0, 0, Tag1 ("NumTok", 24)), 1, 0); (("equal", 582), ((Tag1 (0, (Tag3 ((("t", 581)), 0, (0)), 100000000, 0, -72), (Tag1 (0, (Tag3 ((("t", 581)), 0, (0)), 100000000, 0, -71), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -70), 0), 100000000, 0, -69), 0), 100000000, 0, -68), 0, (("interp/numTok.mli", 77, 2722, 2724), ("interp/numTok.mli", 77, 2722, 2750), 0), 0, Tag1 ("NumTok", 25)), 0); (("is_nat", 583), ((Tag1 (0, (Tag3 ((("t", 581)), 0, (0)), 100000000, 0, -67), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -66), 0), 100000000, 0, -65), 0, (("interp/numTok.mli", 78, 2751, 2753), ("interp/numTok.mli", 78, 2751, 2775), 0), 0, Tag1 ("NumTok", 26)), 0); (("to_nat", 584), ((Tag1 (0, (Tag3 ((("t", 581)), 0, (0)), 100000000, 0, -64), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -63)], (0)), 100000000, 0, -62), 0), 100000000, 0, -61), 0, (("interp/numTok.mli", 79, 2776, 2778), ("interp/numTok.mli", 79, 2776, 2809), 0), 0, Tag1 ("NumTok", 27)), 0); (("sprint", 585), ((Tag1 (0, (Tag3 ((("t", 581)), 0, (0)), 100000000, 0, -60), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -59), 0), 100000000, 0, -58), 0, (("interp/numTok.mli", 81, 2811, 2813), ("interp/numTok.mli", 81, 2811, 2837), 0), 0, Tag1 ("NumTok", 28)), 0); (("print", 586), ((Tag1 (0, (Tag3 ((("t", 581)), 0, (0)), 100000000, 0, -57), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -56), 0), 100000000, 0, -55), 0, (("interp/numTok.mli", 82, 2838, 2840), ("interp/numTok.mli", 82, 2838, 2861), 0), 0, Tag1 ("NumTok", 29)), 0); (("parse", 587), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Gramlib")), "Stream"), "t"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -53); (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -54)], (0)), 100000000, 0, -52), (Tag3 ((("t", 581)), 0, (0)), 100000000, 0, -51), 0), 100000000, 0, -50), 0, (("interp/numTok.mli", 85, 2945, 2947), ("interp/numTok.mli", 85, 2945, 2992), 0), 0, Tag1 ("NumTok", 30)), 0); (("parse_string", 588), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -49), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 581)), 0, (0)), 100000000, 0, -48)], (0)), 100000000, 0, -47), 0), 100000000, 0, -46), 0, (("interp/numTok.mli", 99, 3576, 3578), ("interp/numTok.mli", 99, 3576, 3615), 0), 0, Tag1 ("NumTok", 31)), 0); (("classify", 589), ((Tag1 (0, (Tag3 ((("t", 581)), 0, (0)), 100000000, 0, -45), (Tag3 ((("num_class", 562)), 0, (0)), 100000000, 0, -44), 0), 100000000, 0, -43), 0, (("interp/numTok.mli", 102, 3687, 3689), ("interp/numTok.mli", 102, 3687, 3718), 0), 0, Tag1 ("NumTok", 32)), 0)]), 0, (("interp/numTok.mli", 74, 2691, 2691), ("interp/numTok.mli", 104, 3720, 3723), 0), Tag1 ("NumTok", 33)), 0, 0); Tag3 (("Signed", 567), 0, (Tag1 ([Tag1 (("t", 590), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((("sign", 561)), 0, (0)), 100000000, 0, -160); (Tag3 (Tag1 ((("Unsigned", 566)), "t"), 0, (0)), 100000000, 0, -161)]), 100000000, 0, -159)), 0, 0, 0, 0, (("interp/numTok.mli", 110, 3781, 3783), ("interp/numTok.mli", 110, 3781, 3809), 0), 0, 0, 0, Tag1 ("NumTok", 34)), 1, 0); (("equal", 591), ((Tag1 (0, (Tag3 ((("t", 590)), 0, (0)), 100000000, 0, -158), (Tag1 (0, (Tag3 ((("t", 590)), 0, (0)), 100000000, 0, -157), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -156), 0), 100000000, 0, -155), 0), 100000000, 0, -154), 0, (("interp/numTok.mli", 111, 3810, 3812), ("interp/numTok.mli", 111, 3810, 3838), 0), 0, Tag1 ("NumTok", 35)), 0); (("is_zero", 592), ((Tag1 (0, (Tag3 ((("t", 590)), 0, (0)), 100000000, 0, -153), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -152), 0), 100000000, 0, -151), 0, (("interp/numTok.mli", 112, 3839, 3841), ("interp/numTok.mli", 112, 3839, 3864), 0), 0, Tag1 ("NumTok", 36)), 0); (("of_nat", 593), ((Tag1 (0, (Tag3 (Tag1 ((("UnsignedNat", 564)), "t"), 0, (0)), 100000000, 0, -150), (Tag3 ((("t", 590)), 0, (0)), 100000000, 0, -149), 0), 100000000, 0, -148), 0, (("interp/numTok.mli", 113, 3865, 3867), ("interp/numTok.mli", 113, 3865, 3898), 0), 0, Tag1 ("NumTok", 37)), 0); (("of_int", 594), ((Tag1 (0, (Tag3 (Tag1 ((("SignedNat", 565)), "t"), 0, (0)), 100000000, 0, -147), (Tag3 ((("t", 590)), 0, (0)), 100000000, 0, -146), 0), 100000000, 0, -145), 0, (("interp/numTok.mli", 114, 3899, 3901), ("interp/numTok.mli", 114, 3899, 3930), 0), 0, Tag1 ("NumTok", 38)), 0); (("to_int", 595), ((Tag1 (0, (Tag3 ((("t", 590)), 0, (0)), 100000000, 0, -144), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("SignedNat", 565)), "t"), 0, (0)), 100000000, 0, -143)], (0)), 100000000, 0, -142), 0), 100000000, 0, -141), 0, (("interp/numTok.mli", 115, 3931, 3933), ("interp/numTok.mli", 115, 3931, 3969), 0), 0, Tag1 ("NumTok", 39)), 0); (("is_int", 596), ((Tag1 (0, (Tag3 ((("t", 590)), 0, (0)), 100000000, 0, -140), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -139), 0), 100000000, 0, -138), 0, (("interp/numTok.mli", 116, 3970, 3972), ("interp/numTok.mli", 116, 3970, 3994), 0), 0, Tag1 ("NumTok", 40)), 0); (("sprint", 597), ((Tag1 (0, (Tag3 ((("t", 590)), 0, (0)), 100000000, 0, -137), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -136), 0), 100000000, 0, -135), 0, (("interp/numTok.mli", 118, 3996, 3998), ("interp/numTok.mli", 118, 3996, 4022), 0), 0, Tag1 ("NumTok", 41)), 0); (("print", 598), ((Tag1 (0, (Tag3 ((("t", 590)), 0, (0)), 100000000, 0, -134), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -133), 0), 100000000, 0, -132), 0, (("interp/numTok.mli", 119, 4023, 4025), ("interp/numTok.mli", 119, 4023, 4046), 0), 0, Tag1 ("NumTok", 42)), 0); (("parse_string", 599), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -131), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 590)), 0, (0)), 100000000, 0, -130)], (0)), 100000000, 0, -129), 0), 100000000, 0, -128), 0, (("interp/numTok.mli", 122, 4130, 4132), ("interp/numTok.mli", 122, 4130, 4169), 0), 0, Tag1 ("NumTok", 43)), 0); (("of_int_string", 600), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -127), (Tag3 ((("t", 590)), 0, (0)), 100000000, 0, -126), 0), 100000000, 0, -125), 0, (("interp/numTok.mli", 125, 4235, 4237), ("interp/numTok.mli", 125, 4235, 4268), 0), 0, Tag1 ("NumTok", 44)), 0); (("of_string", 601), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -124), (Tag3 ((("t", 590)), 0, (0)), 100000000, 0, -123), 0), 100000000, 0, -122), 0, (("interp/numTok.mli", 128, 4338, 4340), ("interp/numTok.mli", 128, 4338, 4367), 0), 0, Tag1 ("NumTok", 45)), 0); (("to_string", 602), ((Tag1 (0, (Tag3 ((("t", 590)), 0, (0)), 100000000, 0, -121), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -120), 0), 100000000, 0, -119), 0, (("interp/numTok.mli", 131, 4443, 4445), ("interp/numTok.mli", 131, 4443, 4472), 0), 0, Tag1 ("NumTok", 46)), 0); (("of_bigint", 603), ((Tag1 (0, (Tag3 ((("num_class", 562)), 0, (0)), 100000000, 0, -118), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Z")), "t"), 0, (0)), 100000000, 0, -117), (Tag3 ((("t", 590)), 0, (0)), 100000000, 0, -116), 0), 100000000, 0, -115), 0), 100000000, 0, -114), 0, (("interp/numTok.mli", 134, 4543, 4545), ("interp/numTok.mli", 134, 4543, 4582), 0), 0, Tag1 ("NumTok", 47)), 0); (("to_bigint", 604), ((Tag1 (0, (Tag3 ((("t", 590)), 0, (0)), 100000000, 0, -113), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Z")), "t"), 0, (0)), 100000000, 0, -112)], (0)), 100000000, 0, -111), 0), 100000000, 0, -110), 0, (("interp/numTok.mli", 135, 4583, 4585), ("interp/numTok.mli", 135, 4583, 4616), 0), 0, Tag1 ("NumTok", 48)), 0); (("of_int_frac_and_exponent", 605), ((Tag1 (0, (Tag3 (Tag1 ((("SignedNat", 565)), "t"), 0, (0)), 100000000, 0, -109), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("UnsignedNat", 564)), "t"), 0, (0)), 100000000, 0, -108)], (0)), 100000000, 0, -107), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("SignedNat", 565)), "t"), 0, (0)), 100000000, 0, -106)], (0)), 100000000, 0, -105), (Tag3 ((("t", 590)), 0, (0)), 100000000, 0, -104), 0), 100000000, 0, -103), 0), 100000000, 0, -102), 0), 100000000, 0, -101), 0, (("interp/numTok.mli", 138, 4688, 4690), ("interp/numTok.mli", 138, 4688, 4783), 0), 0, Tag1 ("NumTok", 49)), 0); (("to_int_frac_and_exponent", 606), ((Tag1 (0, (Tag3 ((("t", 590)), 0, (0)), 100000000, 0, -100), (Tag2 ([(Tag3 (Tag1 ((("SignedNat", 565)), "t"), 0, (0)), 100000000, 0, -95); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("UnsignedNat", 564)), "t"), 0, (0)), 100000000, 0, -97)], (0)), 100000000, 0, -96); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("SignedNat", 565)), "t"), 0, (0)), 100000000, 0, -99)], (0)), 100000000, 0, -98)]), 100000000, 0, -94), 0), 100000000, 0, -93), 0, (("interp/numTok.mli", 139, 4784, 4786), ("interp/numTok.mli", 139, 4784, 4877), 0), 0, Tag1 ("NumTok", 50)), 0); (("of_bigint_and_exponent", 607), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Z")), "t"), 0, (0)), 100000000, 0, -92), (Tag1 (0, (Tag3 ((("exp", 563)), [(Tag3 (Tag1 ((Tag2 ("Z")), "t"), 0, (0)), 100000000, 0, -91)], (0)), 100000000, 0, -90), (Tag3 ((("t", 590)), 0, (0)), 100000000, 0, -89), 0), 100000000, 0, -88), 0), 100000000, 0, -87), 0, (("interp/numTok.mli", 143, 5015, 5017), ("interp/numTok.mli", 143, 5015, 5065), 0), 0, Tag1 ("NumTok", 51)), 0); (("to_bigint_and_exponent", 608), ((Tag1 (0, (Tag3 ((("t", 590)), 0, (0)), 100000000, 0, -86), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Z")), "t"), 0, (0)), 100000000, 0, -83); (Tag3 ((("exp", 563)), [(Tag3 (Tag1 ((Tag2 ("Z")), "t"), 0, (0)), 100000000, 0, -85)], (0)), 100000000, 0, -84)]), 100000000, 0, -82), 0), 100000000, 0, -81), 0, (("interp/numTok.mli", 144, 5066, 5068), ("interp/numTok.mli", 144, 5066, 5115), 0), 0, Tag1 ("NumTok", 52)), 0); (("classify", 609), ((Tag1 (0, (Tag3 ((("t", 590)), 0, (0)), 100000000, 0, -80), (Tag3 ((("num_class", 562)), 0, (0)), 100000000, 0, -79), 0), 100000000, 0, -78), 0, (("interp/numTok.mli", 147, 5176, 5178), ("interp/numTok.mli", 147, 5176, 5207), 0), 0, Tag1 ("NumTok", 53)), 0); (("is_bigger_int_than", 610), ((Tag1 (0, (Tag3 ((("t", 590)), 0, (0)), 100000000, 0, -77), (Tag1 (0, (Tag3 (Tag1 ((("UnsignedNat", 564)), "t"), 0, (0)), 100000000, 0, -76), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -75), 0), 100000000, 0, -74), 0), 100000000, 0, -73), 0, (("interp/numTok.mli", 149, 5209, 5211), ("interp/numTok.mli", 149, 5209, 5262), 0), 0, Tag1 ("NumTok", 54)), 0)]), 0, (("interp/numTok.mli", 108, 3761, 3761), ("interp/numTok.mli", 152, 5326, 5329), 0), Tag1 ("NumTok", 55)), 0, 0)], "NumTok", [("NumTok", ("vd\023^\251\244B\166\145'\156\196-0\027\169")); ("Z", ("\253\196\2168\027\199O\134\220\218\031'\1484\233o")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Random", ("\020\005Xq\171\026\218\152X\135\254\023\133zK\200")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Gramlib__Stream", ("\248\\H\205_76\253\136\146\200\031\165\021=t")); ("Gramlib", ("\154\143\210e\021i\246\176\224\194\220\217\007\145\139A")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

  end

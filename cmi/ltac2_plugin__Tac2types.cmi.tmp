type evars_flag = bool
type advanced_flag = bool
type 'a thunk = (unit, 'a) Ltac2_plugin.Tac2ffi.fun1
type quantified_hypothesis =
  Tactypes.quantified_hypothesis =
    AnonHyp of int
  | NamedHyp of Names.lident
type explicit_bindings = (quantified_hypothesis * EConstr.t) list
type bindings =
    ImplicitBindings of EConstr.t list
  | ExplicitBindings of explicit_bindings
  | NoBindings
type constr_with_bindings = EConstr.constr * bindings
type core_destruction_arg =
    ElimOnConstr of constr_with_bindings Proofview.tactic
  | ElimOnIdent of Names.Id.t
  | ElimOnAnonHyp of int
type destruction_arg = core_destruction_arg
type intro_pattern =
    IntroForthcoming of bool
  | IntroNaming of intro_pattern_naming
  | IntroAction of intro_pattern_action
and intro_pattern_naming =
    IntroIdentifier of Names.Id.t
  | IntroFresh of Names.Id.t
  | IntroAnonymous
and intro_pattern_action =
    IntroWildcard
  | IntroOrAndPattern of or_and_intro_pattern
  | IntroInjection of intro_pattern list
  | IntroApplyOn of EConstr.t thunk * intro_pattern
  | IntroRewrite of bool
and or_and_intro_pattern =
    IntroOrPattern of intro_pattern list list
  | IntroAndPattern of intro_pattern list
type occurrences =
    AllOccurrences
  | AllOccurrencesBut of int list
  | NoOccurrences
  | OnlyOccurrences of int list
type hyp_location_flag =
  Locus.hyp_location_flag =
    InHyp
  | InHypTypeOnly
  | InHypValueOnly
type hyp_location = Names.Id.t * occurrences * hyp_location_flag
type clause = {
  onhyps : hyp_location list option;
  concl_occs : occurrences;
}
type induction_clause =
    destruction_arg * intro_pattern_naming option *
    or_and_intro_pattern option * clause option
type multi =
  Equality.multi =
    Precisely of int
  | UpTo of int
  | RepeatStar
  | RepeatPlus
type rewriting = bool option * multi * constr_with_bindings Proofview.tactic
type assertion =
    AssertType of intro_pattern option * EConstr.constr * unit thunk option
  | ("DEBUG:rule", [Tag1 (("evars_flag", 1263), (0, 0, 0, 1, ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -79)), 0, 0, 0, 0, (("plugins/ltac2/tac2types.mli", 17, 792, 792), ("plugins/ltac2/tac2types.mli", 17, 792, 814), 0), 0, 1, 0, Tag1 ("Ltac2_plugin__Tac2types", 0)), 1, 0); Tag1 (("advanced_flag", 1264), (0, 0, 0, 1, ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -78)), 0, 0, 0, 0, (("plugins/ltac2/tac2types.mli", 18, 815, 815), ("plugins/ltac2/tac2types.mli", 18, 815, 840), 0), 0, 1, 0, Tag1 ("Ltac2_plugin__Tac2types", 1)), 1, 0); Tag1 (("thunk", 1265), ([((("a")), 100000000, 0, -77)], 1, 0, 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac2_plugin")), "Tac2ffi"), "fun1"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -76); ((("a")), 100000000, 0, -77)], (0)), 100000000, 0, -75)), [7], [2], 0, 0, (("plugins/ltac2/tac2types.mli", 20, 842, 842), ("plugins/ltac2/tac2types.mli", 20, 842, 881), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2types", 2)), 1, 0); Tag1 (("quantified_hypothesis", 1266), (0, 0, Tag1 ([(("AnonHyp", 908), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -73)]), 0, (("plugins/ltac2/tac2types.mli", 23, 945, 945), ("plugins/ltac2/tac2types.mli", 23, 945, 961), 0), 0, Tag1 ("Ltac2_plugin__Tac2types", 4)); (("NamedHyp", 909), ([(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -74)]), 0, (("plugins/ltac2/tac2types.mli", 24, 962, 962), ("plugins/ltac2/tac2types.mli", 24, 962, 982), 0), 0, Tag1 ("Ltac2_plugin__Tac2types", 5))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Tactypes")), "quantified_hypothesis"), 0, (0)), 100000000, 0, -72)), 0, 0, 0, 0, (("plugins/ltac2/tac2types.mli", 22, 883, 883), ("plugins/ltac2/tac2types.mli", 24, 962, 982), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2types", 3)), 1, 0); Tag1 (("explicit_bindings", 1267), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("quantified_hypothesis", 1266)), 0, (0)), 100000000, 0, -70); (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -71)]), 100000000, 0, -69)], (0)), 100000000, 0, -68)), 0, 0, 0, 0, (("plugins/ltac2/tac2types.mli", 26, 984, 984), ("plugins/ltac2/tac2types.mli", 26, 984, 1049), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2types", 6)), 1, 0); Tag1 (("bindings", 1268), (0, 0, Tag1 ([(("ImplicitBindings", 1158), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -66)], (0)), 100000000, 0, -65)]), 0, (("plugins/ltac2/tac2types.mli", 29, 1067, 1067), ("plugins/ltac2/tac2types.mli", 29, 1067, 1103), 0), 0, Tag1 ("Ltac2_plugin__Tac2types", 8)); (("ExplicitBindings", 1159), ([(Tag3 ((("explicit_bindings", 1267)), 0, (0)), 100000000, 0, -67)]), 0, (("plugins/ltac2/tac2types.mli", 30, 1104, 1104), ("plugins/ltac2/tac2types.mli", 30, 1104, 1143), 0), 0, Tag1 ("Ltac2_plugin__Tac2types", 9)); (("NoBindings", 1160), (0), 0, (("plugins/ltac2/tac2types.mli", 31, 1144, 1144), ("plugins/ltac2/tac2types.mli", 31, 1144, 1156), 0), 0, Tag1 ("Ltac2_plugin__Tac2types", 10))], 0), 1, 0, 0, 0, 0, 0, (("plugins/ltac2/tac2types.mli", 28, 1051, 1051), ("plugins/ltac2/tac2types.mli", 31, 1144, 1156), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2types", 7)), 1, 0); Tag1 (("constr_with_bindings", 1269), (0, 0, 0, 1, ((Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -63); (Tag3 ((("bindings", 1268)), 0, (0)), 100000000, 0, -64)]), 100000000, 0, -62)), 0, 0, 0, 0, (("plugins/ltac2/tac2types.mli", 33, 1158, 1158), ("plugins/ltac2/tac2types.mli", 33, 1158, 1211), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2types", 11)), 1, 0); Tag1 (("core_destruction_arg", 1270), (0, 0, Tag1 ([(("ElimOnConstr", 1163), ([(Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((("constr_with_bindings", 1269)), 0, (0)), 100000000, 0, -59)], (0)), 100000000, 0, -58)]), 0, (("plugins/ltac2/tac2types.mli", 36, 1241, 1241), ("plugins/ltac2/tac2types.mli", 36, 1241, 1286), 0), 0, Tag1 ("Ltac2_plugin__Tac2types", 13)); (("ElimOnIdent", 1164), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -60)]), 0, (("plugins/ltac2/tac2types.mli", 37, 1287, 1287), ("plugins/ltac2/tac2types.mli", 37, 1287, 1308), 0), 0, Tag1 ("Ltac2_plugin__Tac2types", 14)); (("ElimOnAnonHyp", 1165), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -61)]), 0, (("plugins/ltac2/tac2types.mli", 38, 1309, 1309), ("plugins/ltac2/tac2types.mli", 38, 1309, 1331), 0), 0, Tag1 ("Ltac2_plugin__Tac2types", 15))], 0), 1, 0, 0, 0, 0, 0, (("plugins/ltac2/tac2types.mli", 35, 1213, 1213), ("plugins/ltac2/tac2types.mli", 38, 1309, 1331), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2types", 12)), 1, 0); Tag1 (("destruction_arg", 1271), (0, 0, 0, 1, ((Tag3 ((("core_destruction_arg", 1270)), 0, (0)), 100000000, 0, -57)), 0, 0, 0, 0, (("plugins/ltac2/tac2types.mli", 40, 1333, 1333), ("plugins/ltac2/tac2types.mli", 40, 1333, 1376), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2types", 16)), 1, 0); Tag1 (("intro_pattern", 1272), (0, 0, Tag1 ([(("IntroForthcoming", 1171), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -54)]), 0, (("plugins/ltac2/tac2types.mli", 43, 1399, 1399), ("plugins/ltac2/tac2types.mli", 43, 1399, 1425), 0), 0, Tag1 ("Ltac2_plugin__Tac2types", 21)); (("IntroNaming", 1172), ([(Tag3 ((("intro_pattern_naming", 1273)), 0, (0)), 100000000, 0, -55)]), 0, (("plugins/ltac2/tac2types.mli", 44, 1426, 1426), ("plugins/ltac2/tac2types.mli", 44, 1426, 1463), 0), 0, Tag1 ("Ltac2_plugin__Tac2types", 22)); (("IntroAction", 1173), ([(Tag3 ((("intro_pattern_action", 1274)), 0, (0)), 100000000, 0, -56)]), 0, (("plugins/ltac2/tac2types.mli", 45, 1464, 1464), ("plugins/ltac2/tac2types.mli", 45, 1464, 1501), 0), 0, Tag1 ("Ltac2_plugin__Tac2types", 23))], 0), 1, 0, 0, 0, 0, 0, (("plugins/ltac2/tac2types.mli", 42, 1378, 1378), ("plugins/ltac2/tac2types.mli", 45, 1464, 1501), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2types", 17)), 1, 0); Tag1 (("intro_pattern_naming", 1273), (0, 0, Tag1 ([(("IntroIdentifier", 1174), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -52)]), 0, (("plugins/ltac2/tac2types.mli", 47, 1529, 1529), ("plugins/ltac2/tac2types.mli", 47, 1529, 1554), 0), 0, Tag1 ("Ltac2_plugin__Tac2types", 24)); (("IntroFresh", 1175), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -53)]), 0, (("plugins/ltac2/tac2types.mli", 48, 1555, 1555), ("plugins/ltac2/tac2types.mli", 48, 1555, 1575), 0), 0, Tag1 ("Ltac2_plugin__Tac2types", 25)); (("IntroAnonymous", 1176), (0), 0, (("plugins/ltac2/tac2types.mli", 49, 1576, 1576), ("plugins/ltac2/tac2types.mli", 49, 1576, 1592), 0), 0, Tag1 ("Ltac2_plugin__Tac2types", 26))], 0), 1, 0, 0, 0, 0, 0, (("plugins/ltac2/tac2types.mli", 46, 1502, 1502), ("plugins/ltac2/tac2types.mli", 49, 1576, 1592), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2types", 18)), 2, 0); Tag1 (("intro_pattern_action", 1274), (0, 0, Tag1 ([(("IntroWildcard", 1177), (0), 0, (("plugins/ltac2/tac2types.mli", 51, 1620, 1620), ("plugins/ltac2/tac2types.mli", 51, 1620, 1635), 0), 0, Tag1 ("Ltac2_plugin__Tac2types", 27)); (("IntroOrAndPattern", 1178), ([(Tag3 ((("or_and_intro_pattern", 1275)), 0, (0)), 100000000, 0, -45)]), 0, (("plugins/ltac2/tac2types.mli", 52, 1636, 1636), ("plugins/ltac2/tac2types.mli", 52, 1636, 1679), 0), 0, Tag1 ("Ltac2_plugin__Tac2types", 28)); (("IntroInjection", 1179), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("intro_pattern", 1272)), 0, (0)), 100000000, 0, -47)], (0)), 100000000, 0, -46)]), 0, (("plugins/ltac2/tac2types.mli", 53, 1680, 1680), ("plugins/ltac2/tac2types.mli", 53, 1680, 1718), 0), 0, Tag1 ("Ltac2_plugin__Tac2types", 29)); (("IntroApplyOn", 1180), ([(Tag3 ((("thunk", 1265)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -49)], (0)), 100000000, 0, -48); (Tag3 ((("intro_pattern", 1272)), 0, (0)), 100000000, 0, -50)]), 0, (("plugins/ltac2/tac2types.mli", 54, 1719, 1719), ("plugins/ltac2/tac2types.mli", 54, 1719, 1768), 0), 0, Tag1 ("Ltac2_plugin__Tac2types", 30)); (("IntroRewrite", 1181), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -51)]), 0, (("plugins/ltac2/tac2types.mli", 55, 1769, 1769), ("plugins/ltac2/tac2types.mli", 55, 1769, 1791), 0), 0, Tag1 ("Ltac2_plugin__Tac2types", 31))], 0), 1, 0, 0, 0, 0, 0, (("plugins/ltac2/tac2types.mli", 50, 1593, 1593), ("plugins/ltac2/tac2types.mli", 55, 1769, 1791), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2types", 19)), 2, 0); Tag1 (("or_and_intro_pattern", 1275), (0, 0, Tag1 ([(("IntroOrPattern", 1182), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("intro_pattern", 1272)), 0, (0)), 100000000, 0, -42)], (0)), 100000000, 0, -41)], (0)), 100000000, 0, -40)]), 0, (("plugins/ltac2/tac2types.mli", 57, 1819, 1819), ("plugins/ltac2/tac2types.mli", 57, 1819, 1862), 0), 0, Tag1 ("Ltac2_plugin__Tac2types", 32)); (("IntroAndPattern", 1183), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("intro_pattern", 1272)), 0, (0)), 100000000, 0, -44)], (0)), 100000000, 0, -43)]), 0, (("plugins/ltac2/tac2types.mli", 58, 1863, 1863), ("plugins/ltac2/tac2types.mli", 58, 1863, 1902), 0), 0, Tag1 ("Ltac2_plugin__Tac2types", 33))], 0), 1, 0, 0, 0, 0, 0, (("plugins/ltac2/tac2types.mli", 56, 1792, 1792), ("plugins/ltac2/tac2types.mli", 58, 1863, 1902), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2types", 20)), 2, 0); Tag1 (("occurrences", 1276), (0, 0, Tag1 ([(("AllOccurrences", 1185), (0), 0, (("plugins/ltac2/tac2types.mli", 61, 1923, 1923), ("plugins/ltac2/tac2types.mli", 61, 1923, 1939), 0), 0, Tag1 ("Ltac2_plugin__Tac2types", 35)); (("AllOccurrencesBut", 1186), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -37)], (0)), 100000000, 0, -36)]), 0, (("plugins/ltac2/tac2types.mli", 62, 1940, 1940), ("plugins/ltac2/tac2types.mli", 62, 1940, 1971), 0), 0, Tag1 ("Ltac2_plugin__Tac2types", 36)); (("NoOccurrences", 1187), (0), 0, (("plugins/ltac2/tac2types.mli", 63, 1972, 1972), ("plugins/ltac2/tac2types.mli", 63, 1972, 1987), 0), 0, Tag1 ("Ltac2_plugin__Tac2types", 37)); (("OnlyOccurrences", 1188), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -39)], (0)), 100000000, 0, -38)]), 0, (("plugins/ltac2/tac2types.mli", 64, 1988, 1988), ("plugins/ltac2/tac2types.mli", 64, 1988, 2017), 0), 0, Tag1 ("Ltac2_plugin__Tac2types", 38))], 0), 1, 0, 0, 0, 0, 0, (("plugins/ltac2/tac2types.mli", 60, 1904, 1904), ("plugins/ltac2/tac2types.mli", 64, 1988, 2017), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2types", 34)), 1, 0); Tag1 (("hyp_location_flag", 1277), (0, 0, Tag1 ([(("InHyp", 1190), (0), 0, (("plugins/ltac2/tac2types.mli", 67, 2070, 2070), ("plugins/ltac2/tac2types.mli", 67, 2070, 2077), 0), 0, Tag1 ("Ltac2_plugin__Tac2types", 40)); (("InHypTypeOnly", 1191), (0), 0, (("plugins/ltac2/tac2types.mli", 67, 2070, 2078), ("plugins/ltac2/tac2types.mli", 67, 2070, 2093), 0), 0, Tag1 ("Ltac2_plugin__Tac2types", 41)); (("InHypValueOnly", 1192), (0), 0, (("plugins/ltac2/tac2types.mli", 67, 2070, 2094), ("plugins/ltac2/tac2types.mli", 67, 2070, 2110), 0), 0, Tag1 ("Ltac2_plugin__Tac2types", 42))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Locus")), "hyp_location_flag"), 0, (0)), 100000000, 0, -35)), 0, 0, 0, 0, (("plugins/ltac2/tac2types.mli", 66, 2019, 2019), ("plugins/ltac2/tac2types.mli", 67, 2070, 2110), 0), 0, 1, 0, Tag1 ("Ltac2_plugin__Tac2types", 39)), 1, 0); Tag1 (("hyp_location", 1278), (0, 0, 0, 1, ((Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -32); (Tag3 ((("occurrences", 1276)), 0, (0)), 100000000, 0, -33); (Tag3 ((("hyp_location_flag", 1277)), 0, (0)), 100000000, 0, -34)]), 100000000, 0, -31)), 0, 0, 0, 0, (("plugins/ltac2/tac2types.mli", 69, 2112, 2112), ("plugins/ltac2/tac2types.mli", 69, 2112, 2170), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2types", 43)), 1, 0); Tag1 (("clause", 1279), (0, 0, [[(("onhyps", 1210), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("hyp_location", 1278)), 0, (0)), 100000000, 0, -29)], (0)), 100000000, 0, -28)], (0)), 100000000, 0, -27), (("plugins/ltac2/tac2types.mli", 72, 2186, 2190), ("plugins/ltac2/tac2types.mli", 72, 2186, 2224), 0), 0, Tag1 ("Ltac2_plugin__Tac2types", 45)); (("concl_occs", 1211), 0, (Tag3 ((("occurrences", 1276)), 0, (0)), 100000000, 0, -30), (("plugins/ltac2/tac2types.mli", 73, 2225, 2229), ("plugins/ltac2/tac2types.mli", 73, 2225, 2253), 0), 0, Tag1 ("Ltac2_plugin__Tac2types", 46))]], 1, 0, 0, 0, 0, 0, (("plugins/ltac2/tac2types.mli", 71, 2172, 2172), ("plugins/ltac2/tac2types.mli", 73, 2225, 2255), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2types", 44)), 1, 0); Tag1 (("induction_clause", 1280), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((("destruction_arg", 1271)), 0, (0)), 100000000, 0, -20); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("intro_pattern_naming", 1273)), 0, (0)), 100000000, 0, -22)], (0)), 100000000, 0, -21); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("or_and_intro_pattern", 1275)), 0, (0)), 100000000, 0, -24)], (0)), 100000000, 0, -23); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("clause", 1279)), 0, (0)), 100000000, 0, -26)], (0)), 100000000, 0, -25)]), 100000000, 0, -19)), 0, 0, 0, 0, (("plugins/ltac2/tac2types.mli", 75, 2257, 2257), ("plugins/ltac2/tac2types.mli", 79, 2365, 2380), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2types", 47)), 1, 0); Tag1 (("multi", 1281), (0, 0, Tag1 ([(("Precisely", 1214), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -17)]), 0, (("plugins/ltac2/tac2types.mli", 82, 2412, 2412), ("plugins/ltac2/tac2types.mli", 82, 2412, 2430), 0), 0, Tag1 ("Ltac2_plugin__Tac2types", 49)); (("UpTo", 1215), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -18)]), 0, (("plugins/ltac2/tac2types.mli", 83, 2431, 2431), ("plugins/ltac2/tac2types.mli", 83, 2431, 2444), 0), 0, Tag1 ("Ltac2_plugin__Tac2types", 50)); (("RepeatStar", 1216), (0), 0, (("plugins/ltac2/tac2types.mli", 84, 2445, 2445), ("plugins/ltac2/tac2types.mli", 84, 2445, 2457), 0), 0, Tag1 ("Ltac2_plugin__Tac2types", 51)); (("RepeatPlus", 1217), (0), 0, (("plugins/ltac2/tac2types.mli", 85, 2458, 2458), ("plugins/ltac2/tac2types.mli", 85, 2458, 2470), 0), 0, Tag1 ("Ltac2_plugin__Tac2types", 52))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Equality")), "multi"), 0, (0)), 100000000, 0, -16)), 0, 0, 0, 0, (("plugins/ltac2/tac2types.mli", 81, 2382, 2382), ("plugins/ltac2/tac2types.mli", 85, 2458, 2470), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2types", 48)), 1, 0); Tag1 (("rewriting", 1282), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -12)], (0)), 100000000, 0, -11); (Tag3 ((("multi", 1281)), 0, (0)), 100000000, 0, -13); (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((("constr_with_bindings", 1269)), 0, (0)), 100000000, 0, -15)], (0)), 100000000, 0, -14)]), 100000000, 0, -10)), 0, 0, 0, 0, (("plugins/ltac2/tac2types.mli", 87, 2472, 2472), ("plugins/ltac2/tac2types.mli", 90, 2515, 2544), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2types", 53)), 1, 0); Tag1 (("assertion", 1283), (0, 0, Tag1 ([(("AssertType", 1261), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("intro_pattern", 1272)), 0, (0)), 100000000, 0, -3)], (0)), 100000000, 0, -2); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -4); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("thunk", 1265)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7)], (0)), 100000000, 0, -6)], (0)), 100000000, 0, -5)]), 0, (("plugins/ltac2/tac2types.mli", 93, 2563, 2563), ("plugins/ltac2/tac2types.mli", 93, 2563, 2628), 0), 0, Tag1 ("Ltac2_plugin__Tac2types", 55)); (("AssertValue", 1262), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -8); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -9)]), 0, (("plugins/ltac2/tac2types.mli", 94, 2629, 2629), ("plugins/ltac2/tac2types.mli", 94, 2629, 2659), 0), 0, Tag1 ("Ltac2_plugin__Tac2types", 56))], 0), 1, 0, 0, 0, 0, 0, (("plugins/ltac2/tac2types.mli", 92, 2546, 2546), ("plugins/ltac2/tac2types.mli", 94, 2629, 2659), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2types", 54)), 1, 0)], "Ltac2_plugin__Tac2types", [("Ltac2_plugin__Tac2types", ("\132B3\005k8\219\153\175\249\026Q\006'\173y")); ("Z", ("\253\196\2168\027\199O\134\220\218\031'\1484\233o")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Unix", (":B72R\011\005Sj\189)\011\239PH\254")); ("UnivSubst", ("\190qu\031mc\130\181\003G]\132\"\219m)")); ("UnivProblem", ("6'\161\018\181\001.\253\000\141a6\171\1727\155")); ("UnivNames", ("%\151_\209%+JM$n\001\232\194n\178N")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Unification", ("\017\027\157=\255\1914L\020\213h\154.\219\005\170")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UState", ("SD\203\215|\136\n\251\239\208\148\215C\n\167\005")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("Type_errors", ("7\157\162-\214M\206\196\228\191\005v\134\177\144\134")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Tactypes", ("\143E\135*\195\151\144H\151M\011($\017\159\203")); ("Tactics", ("7\154?u\169\241\190R\245\187\153\020GE\029\215")); ("Tacred", ("\133d\143\1310z\030\237\232\002\001\025\147\140\215:")); ("Summary", ("\148G\135\226\024L3\246\021\028U\146\164`\253\250")); ("Store", ("/dT\252\145\179pq\216{\181\206\190K+U")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Random", ("\020\005Xq\171\026\218\152X\135\254\023\133zK\200")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Bytes", ("C\134\194)\175\222\137p\205\246\244\r\241\164P\209")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Section", ("\245\207\b\021\142v=\155#w\246}\"4b\006")); ("Safe_typing", (")\250?\164\145\132\241\127\186\152h+\145\"\237l")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Reductionops", ("\179\023P\218\146Uh\014IS\196C\031q~#")); ("Redexpr", ("\181\250o\134\007\001\242+$\149)\204\226\"\0240")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Proofview_monad", ("\218\196\189S\147\216\129\221\231\224v\228O\024*\239")); ("Proofview", ("\245\140U\027\236\199\199&\242\156\199YG\250tA")); ("Primred", ("\158G\192\182\224\196\144*\174y_E\165\012\137C")); ("Pretyping", ("\151\160\191\149\149Ff\195\171g\189\156\r\166n\189")); ("Pretype_errors", ("\155\229\201\176\163\234\203C\127\227\141\174j\199\200H")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Pattern", ("\195C\140Wb=\022\222\208\227^K\003\020\215X")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("NumTok", ("vd\023^\251\244B\166\145'\156\196-0\027\169")); ("Notation_term", ("5\002\017\217b\193nc>\239\239\237\244\031\173?")); ("Nativevalues", ("8:\007\025e\226c,\001\171\146#l\210\171\152")); ("Nativelib", ("V\239\205Y1\147E:,\176\196Hy\1483|")); ("Nativecode", ("\190\185\255\006m\012\210\163\138Rz\247\15283\183")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Namegen", ("\187\222\224T\255\020\1808-\212*\164\131\177\157x")); ("Monad", ("\244\171T\157\194p\187\160\149\195{\132\222\020\253\148")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Ltac_pretype", ("\224\"\167\018i:U\172>\188\128$\r\252\020T")); ("Ltac2_plugin__Tac2ffi", ("\169\b=\\W\215`\141b}Ub\245\190f]")); ("Ltac2_plugin__Tac2expr", ("T\154\246\018\232\196\182\229\012\167v}\1367|\157")); ("Ltac2_plugin__Tac2dyn", ("\003M~\173\240\228^\184[\135\224\206\1576\163 ")); ("Ltac2_plugin", ("\165R\230\016\178\131\154\196w\014@m\191\218\194\020")); ("Logic_monad", ("\130\157\160Q\163vQ\137\184\2242\209\128\024\220i")); ("Logic", ("\214\234\234\223\014\197\147\165\158f.$\163\164\245Z")); ("Locus", ("_\002\003W\246\181\225\242Uf\139\226\176\174\192I")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Ind_tables", ("\1586xu\131C\135\176\222\242\178r\031D,\196")); ("IStream", ("#\199\192\148>\207Y\174\203(:\b5\177]\170")); ("Hook", ("\183\194\223\003\155\169',\187\240a;E\b\1396")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Gramlib__Stream", ("\248\\H\205_76\253\136\146\200\031\165\021=t")); ("Gramlib", ("\154\143\210e\021i\246\176\224\194\220\217\007\145\139A")); ("Glob_term", ("\165=a\227\160\153.\021_$\232\209T\236\153O")); ("GlobEnv", ("(\152\019ok\006R\183\193\145\137\133<\171\005\231")); ("Genredexpr", ("rz\204\143\007`VgI\195P\168sO\198\012")); ("Genlambda", ("\170}\024\241\141\222\136S\169\219\2212i\134KI")); ("Geninterp", ("2S\151\191\189\159\004\188;\224d\199|U\004\028")); ("Genintern", ("\152Ac\019=n\235\197\141\224T\162\192\148eg")); ("Genarg", ("\1434\015\001\152\196\005s\156\136\195\185\247\b3\t")); ("Ftactic", ("K\172\205\128\241\162\160\201\202\1561o\180L\206:")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evd", ("\211\205p\193\216\129r\006\239oN\142ar\196\175")); ("Evarutil", ("\005\175\132e\164O\223svi \252\232\138\022\137")); ("Evarsolve", ("\000&\228\016}j\199\t\229\173\127\024\219\199\184\178")); ("Evardefine", ("\178\167R\199\158\242\001Y\215<\151\020\206\153\227\019")); ("Evar_kinds", ("\023L\186\132\218}\254\221\185\198\220\200h\003{\021")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Equality", ("M\157\199R]=\020;\029s@\210\1789y\163")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Entries", ("\172\201\198\221Ap\027_{\174\141C\021\";p")); ("EConstr", ("\201aW\156\157;N\004\201V\208\006L\166\211)")); ("Dyn", ("\131z`\205v\2306\007x\027&K.?;\169")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("DAst", ("\224/\200)\007\184ni\134\b\139\204\241\005w\212")); ("Coqlib", ("'\226\164\143\129\221\158\224\247\247\160\190~\171\191\198")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conversion", ("\158\150&\195M\tv\127|\029\158RRK\211A")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constrexpr", ("p'r\245\184chL\183\249\"\213]\1741\237")); ("Constr_matching", ("\135\145\197fVk`\131U\213\181\222\1666\133\248")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CUnix", ("\140Zl\153\167\011J\015\005|th\247OTu")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CDebug", ("^4\210p7\239!3\138\138\213?\239`\250\157")); ("CClosure", ("\167\b\022\241V-\r\253\b\002\000j]\223%\142")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [1; (0)])
AssertValue of Names.Id.t * EConstr.constr

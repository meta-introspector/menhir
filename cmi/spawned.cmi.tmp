type chandescr = AnonPipe | Socket of string * int * int
val main_channel : chandescr option ref
val control_channel : chandescr option ref
val init_channels : unit -> unit
val get_channels : unit -> CThread.thread_ic * out_channel
("DEBUG:rule", [Tag1 (("chandescr", 285), (0, 0, Tag1 ([(("AnonPipe", 270), (0), 0, (("stm/spawned.mli", 13, 721, 738), ("stm/spawned.mli", 13, 721, 746), 0), 0, Tag1 ("Spawned", 1)); (("Socket", 271), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -19); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -20); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -21)]), 0, (("stm/spawned.mli", 13, 721, 747), ("stm/spawned.mli", 13, 721, 777), 0), 0, Tag1 ("Spawned", 2))], 0), 1, 0, 0, 0, 0, 0, (("stm/spawned.mli", 13, 721, 721), ("stm/spawned.mli", 13, 721, 777), 0), 0, 0, 0, Tag1 ("Spawned", 0)), 1, 0); (("main_channel", 286), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("chandescr", 285)), 0, (0)), 100000000, 0, -18)], (0)), 100000000, 0, -17)], (0)), 100000000, 0, -16), 0, (("stm/spawned.mli", 16, 819, 819), ("stm/spawned.mli", 16, 819, 858), 0), 0, Tag1 ("Spawned", 3)), 0); (("control_channel", 287), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("chandescr", 285)), 0, (0)), 100000000, 0, -15)], (0)), 100000000, 0, -14)], (0)), 100000000, 0, -13), 0, (("stm/spawned.mli", 17, 859, 859), ("stm/spawned.mli", 17, 859, 901), 0), 0, Tag1 ("Spawned", 4)), 0); (("init_channels", 288), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("stm/spawned.mli", 20, 965, 965), ("stm/spawned.mli", 20, 965, 997), 0), 0, Tag1 ("Spawned", 5)), 0); (("get_channels", 289), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -9), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("CThread")), "thread_ic"), 0, (0)), 100000000, 0, -7); (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -8)]), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("stm/spawned.mli", 23, 1070, 1070), ("stm/spawned.mli", 23, 1070, 1128), 0), 0, Tag1 ("Spawned", 6)), 0); (("process_id", 290), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("stm/spawned.mli", 26, 1166, 1166), ("stm/spawned.mli", 26, 1166, 1197), 0), 0, Tag1 ("Spawned", 7)), 0)], "Spawned", [("Spawned", ("\225.\181\135t\223H\004g\148\r)\tz\150o")); ("Unix", (":B72R\011\005Sj\189)\011\239PH\254")); ("Thread", ("q\0258z^I\139\141\195\247qk\255\176\212\018")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Mutex", ("\168\133?\146'\239J\190R\226\n}Z\213\b\191")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Bytes", ("C\134\194)\175\222\137p\205\246\244\r\241\164P\209")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CThread", ("\216\178\194\195l\164\022S_\250\024=\167\215\208%"))], [(0)])
val process_id : unit -> string

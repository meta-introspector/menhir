type call_kind = Indirect | Direct of Closure_id.t
type const = Int of int | Char of char
type apply = {
  func : Variable.t;
  args : Variable.t list;
  kind : call_kind;
  dbg : Debuginfo.t;
  inline : Lambda.inline_attribute;
  specialise : Lambda.specialise_attribute;
}
type assign = {
  being_assigned : Mutable_variable.t;
  new_value : Variable.t;
}
type send = {
  kind : Lambda.meth_kind;
  meth : Variable.t;
  obj : Variable.t;
  args : Variable.t list;
  dbg : Debuginfo.t;
}
type project_closure = Projection.project_closure
type move_within_set_of_closures = Projection.move_within_set_of_closures
type project_var = Projection.project_var
type specialised_to = { var : Variable.t; projection : Projection.t option; }
type t =
    Var of Variable.t
  | Let of let_expr
  | Let_mutable of let_mutable
  | Let_rec of (Variable.t * named) list * t
  | Apply of apply
  | Send of send
  | Assign of assign
  | If_then_else of Variable.t * t * t
  | Switch of Variable.t * switch
  | String_switch of Variable.t * (string * t) list * t option
  | Static_raise of Static_exception.t * Variable.t list
  | Static_catch of Static_exception.t * Variable.t list * t * t
  | Try_with of t * Variable.t * t
  | While of t * t
  | For of for_loop
  | Proved_unreachable
and named =
    Symbol of Symbol.t
  | Const of const
  | Allocated_const of Allocated_const.t
  | Read_mutable of Mutable_variable.t
  | Read_symbol_field of Symbol.t * int
  | Set_of_closures of set_of_closures
  | Project_closure of project_closure
  | Move_within_set_of_closures of move_within_set_of_closures
  | Project_var of project_var
  | Prim of Clambda_primitives.primitive * Variable.t list * Debuginfo.t
  | Expr of t
and let_expr = private {
  var : Variable.t;
  defining_expr : named;
  body : t;
  free_vars_of_defining_expr : Variable.Set.t;
  free_vars_of_body : Variable.Set.t;
}
and let_mutable = {
  var : Mutable_variable.t;
  initial_value : Variable.t;
  contents_kind : Lambda.value_kind;
  body : t;
}
and set_of_closures = private {
  function_decls : function_declarations;
  free_vars : specialised_to Variable.Map.t;
  specialised_args : specialised_to Variable.Map.t;
  direct_call_surrogates : Variable.t Variable.Map.t;
}
and function_declarations = private {
  is_classic_mode : bool;
  set_of_closures_id : Set_of_closures_id.t;
  set_of_closures_origin : Set_of_closures_origin.t;
  funs : function_declaration Variable.Map.t;
}
and function_declaration = private {
  closure_origin : Closure_origin.t;
  params : Parameter.t list;
  body : t;
  free_variables : Variable.Set.t;
  free_symbols : Symbol.Set.t;
  stub : bool;
  dbg : Debuginfo.t;
  inline : Lambda.inline_attribute;
  specialise : Lambda.specialise_attribute;
  is_a_functor : bool;
  poll : Lambda.poll_attribute;
}
and switch = {
  numconsts : Numbers.Int.Set.t;
  consts : (int * t) list;
  numblocks : Numbers.Int.Set.t;
  blocks : (int * t) list;
  failaction : t option;
}
and for_loop = {
  bound_var : Variable.t;
  from_value : Variable.t;
  to_value : Variable.t;
  direction : Asttypes.direction_flag;
  body : t;
}
and constant_defining_value =
    Allocated_const of Allocated_const.t
  | Block of Tag.t * constant_defining_value_block_field list
  | Set_of_closures of set_of_closures
  | Project_closure of Symbol.t * Closure_id.t
and constant_defining_value_block_field = Symbol of Symbol.t | Const of const
module Constant_defining_value :
  sig
    type t = constant_defining_value
    module T :
      sig
        type t = t/2
        val equal : t -> t -> bool
        val hash : t -> int
        val compare : t -> t -> int
        val output : out_channel -> t -> unit
        val print : Format.formatter -> t -> unit
      end
    val equal : T.t -> T.t -> bool
    val hash : T.t -> int
    val compare : T.t -> T.t -> int
    val output : out_channel -> T.t -> unit
    val print : Format.formatter -> T.t -> unit
    module Set :
      sig
        type elt = T.t
        type t = Set.Make(T).t
        val empty : t
        val add : elt -> t -> t
        val singleton : elt -> t
        val remove : elt -> t -> t
        val union : t -> t -> t
        val inter : t -> t -> t
        val disjoint : t -> t -> bool
        val diff : t -> t -> t
        val cardinal : t -> int
        val elements : t -> elt list
        val min_elt : t -> elt
        val min_elt_opt : t -> elt option
        val max_elt : t -> elt
        val max_elt_opt : t -> elt option
        val choose : t -> elt
        val choose_opt : t -> elt option
        val find : elt -> t -> elt
        val find_opt : elt -> t -> elt option
        val find_first : (elt -> bool) -> t -> elt
        val find_first_opt : (elt -> bool) -> t -> elt option
        val find_last : (elt -> bool) -> t -> elt
        val find_last_opt : (elt -> bool) -> t -> elt option
        val iter : (elt -> unit) -> t -> unit
        val fold : (elt -> 'acc -> 'acc) -> t -> 'acc -> 'acc
        val filter : (elt -> bool) -> t -> t
        val filter_map : (elt -> elt option) -> t -> t
        val partition : (elt -> bool) -> t -> t * t
        val split : elt -> t -> t * bool * t
        val is_empty : t -> bool
        val mem : elt -> t -> bool
        val equal : t -> t -> bool
        val compare : t -> t -> int
        val subset : t -> t -> bool
        val for_all : (elt -> bool) -> t -> bool
        val exists : (elt -> bool) -> t -> bool
        val to_list : t -> elt list
        val to_seq_from : elt -> t -> elt Seq.t
        val to_seq : t -> elt Seq.t
        val to_rev_seq : t -> elt Seq.t
        val add_seq : elt Seq.t -> t -> t
        val of_seq : elt Seq.t -> t
        val output : out_channel -> t -> unit
        val print : Format.formatter -> t -> unit
        val to_string : t -> string
        val of_list : elt list -> t
        val map : (elt -> elt) -> t -> t
      end
    module Map :
      sig
        type key = T.t
        type 'a t = 'a Map.Make(T).t
        val empty : 'a t
        val add : key -> 'a -> 'a t -> 'a t
        val add_to_list : key -> 'a -> 'a list t -> 'a list t
        val update : key -> ('a option -> 'a option) -> 'a t -> 'a t
        val singleton : key -> 'a -> 'a t
        val remove : key -> 'a t -> 'a t
        val merge :
          (key -> 'a option -> 'b option -> 'c option) ->
          'a t -> 'b t -> 'c t
        val union : (key -> 'a -> 'a -> 'a option) -> 'a t -> 'a t -> 'a t
        val cardinal : 'a t -> int
        val bindings : 'a t -> (key * 'a) list
        val min_binding : 'a t -> key * 'a
        val min_binding_opt : 'a t -> (key * 'a) option
        val max_binding : 'a t -> key * 'a
        val max_binding_opt : 'a t -> (key * 'a) option
        val choose : 'a t -> key * 'a
        val choose_opt : 'a t -> (key * 'a) option
        val find : key -> 'a t -> 'a
        val find_opt : key -> 'a t -> 'a option
        val find_first : (key -> bool) -> 'a t -> key * 'a
        val find_first_opt : (key -> bool) -> 'a t -> (key * 'a) option
        val find_last : (key -> bool) -> 'a t -> key * 'a
        val find_last_opt : (key -> bool) -> 'a t -> (key * 'a) option
        val iter : (key -> 'a -> unit) -> 'a t -> unit
        val fold : (key -> 'a -> 'acc -> 'acc) -> 'a t -> 'acc -> 'acc
        val map : ('a -> 'b) -> 'a t -> 'b t
        val mapi : (key -> 'a -> 'b) -> 'a t -> 'b t
        val filter : (key -> 'a -> bool) -> 'a t -> 'a t
        val filter_map : (key -> 'a -> 'b option) -> 'a t -> 'b t
        val partition : (key -> 'a -> bool) -> 'a t -> 'a t * 'a t
        val split : key -> 'a t -> 'a t * 'a option * 'a t
        val is_empty : 'a t -> bool
        val mem : key -> 'a t -> bool
        val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
        val compare : ('a -> 'a -> int) -> 'a t -> 'a t -> int
        val for_all : (key -> 'a -> bool) -> 'a t -> bool
        val exists : (key -> 'a -> bool) -> 'a t -> bool
        val to_list : 'a t -> (key * 'a) list
        val to_seq : 'a t -> (key * 'a) Seq.t
        val to_rev_seq : 'a t -> (key * 'a) Seq.t
        val to_seq_from : key -> 'a t -> (key * 'a) Seq.t
        val add_seq : (key * 'a) Seq.t -> 'a t -> 'a t
        val of_seq : (key * 'a) Seq.t -> 'a t
        val of_list : (key * 'a) list -> 'a t
        val disjoint_union :
          ?eq:('a -> 'a -> bool) ->
          ?print:(Format.formatter -> 'a -> unit) -> 'a t -> 'a t -> 'a t
        val union_right : 'a t -> 'a t -> 'a t
        val union_left : 'a t -> 'a t -> 'a t
        val union_merge : ('a -> 'a -> 'a) -> 'a t -> 'a t -> 'a t
        val rename : key t -> key -> key
        val map_keys : (key -> key) -> 'a t -> 'a t
        val keys : 'a t -> Stdlib.Set.Make(T).t
        val data : 'a t -> 'a list
        val of_set : (key -> 'a) -> Stdlib.Set.Make(T).t -> 'a t
        val transpose_keys_and_data : key t -> key t
        val transpose_keys_and_data_set : key t -> Stdlib.Set.Make(T).t t
        val print :
          (Format.formatter -> 'a -> unit) ->
          Format.formatter -> 'a t -> unit
      end
    module Tbl :
      sig
        type key = T.t
        type 'a t = 'a Hashtbl.Make(T).t
        val create : int -> 'a t
        val clear : 'a t -> unit
        val reset : 'a t -> unit
        val copy : 'a t -> 'a t
        val add : 'a t -> key -> 'a -> unit
        val remove : 'a t -> key -> unit
        val find : 'a t -> key -> 'a
        val find_opt : 'a t -> key -> 'a option
        val find_all : 'a t -> key -> 'a list
        val replace : 'a t -> key -> 'a -> unit
        val mem : 'a t -> key -> bool
        val iter : (key -> 'a -> unit) -> 'a t -> unit
        val filter_map_inplace : (key -> 'a -> 'a option) -> 'a t -> unit
        val fold : (key -> 'a -> 'acc -> 'acc) -> 'a t -> 'acc -> 'acc
        val length : 'a t -> int
        val stats : 'a t -> Stdlib__Hashtbl.statistics
        val to_seq : 'a t -> (key * 'a) Seq.t
        val to_seq_keys : 'a t -> key Seq.t
        val to_seq_values : 'a t -> 'a Seq.t
        val add_seq : 'a t -> (key * 'a) Seq.t -> unit
        val replace_seq : 'a t -> (key * 'a) Seq.t -> unit
        val of_seq : (key * 'a) Seq.t -> 'a t
        val to_list : 'a t -> (T.t * 'a) list
        val of_list : (T.t * 'a) list -> 'a t
        val to_map : 'a t -> 'a Stdlib.Map.Make(T).t
        val of_map : 'a Stdlib.Map.Make(T).t -> 'a t
        val memoize : 'a t -> (key -> 'a) -> key -> 'a
        val map : 'a t -> ('a -> 'b) -> 'b t
      end
  end
type expr = t
type program_body =
    Let_symbol of Symbol.t * constant_defining_value * program_body
  | Let_rec_symbol of (Symbol.t * constant_defining_value) list *
      program_body
  | Initialize_symbol of Symbol.t * Tag.t * t list * program_body
  | Effect of t * program_body
  | End of Symbol.t
type program = {
  imported_symbols : Symbol.Set.t;
  program_body : program_body;
}
val free_variables :
  ?ignore_uses_as_callee:unit ->
  ?ignore_uses_as_argument:unit ->
  ?ignore_uses_in_project_var:unit -> t -> Variable.Set.t
val free_variables_named :
  ?ignore_uses_in_project_var:unit -> named -> Variable.Set.t
val used_variables :
  ?ignore_uses_as_callee:unit ->
  ?ignore_uses_as_argument:unit ->
  ?ignore_uses_in_project_var:unit -> t -> Variable.Set.t
val used_variables_named :
  ?ignore_uses_in_project_var:unit -> named -> Variable.Set.t
val free_symbols : expr -> Symbol.Set.t
val free_symbols_named : named -> Symbol.Set.t
val free_symbols_program : program -> Symbol.Set.t
val fold_lets_option :
  t ->
  init:'a ->
  for_defining_expr:('a -> Variable.t -> named -> 'a * Variable.t * named) ->
  for_last_body:('a -> t -> t * 'b) ->
  filter_defining_expr:('b ->
                        Variable.t ->
                        named ->
                        Variable.Set.t -> 'b * Variable.t * named option) ->
  t * 'b
val map_lets :
  t ->
  for_defining_expr:(Variable.t -> named -> named) ->
  for_last_body:(t -> t) -> after_rebuild:(t -> t) -> t
val iter_lets :
  t ->
  for_defining_expr:(Variable.t -> named -> unit) ->
  for_last_body:(t -> unit) -> for_each_let:(t -> unit) -> unit
val create_let : Variable.t -> named -> t -> t
val map_defining_expr_of_let : let_expr -> f:(named -> named) -> t
module With_free_variables :
  sig
    type 'a t
    val of_defining_expr_of_let : let_expr -> named t
    val of_body_of_let : let_expr -> expr t
    val of_expr : expr -> expr t
    val of_named : named -> named t
    val create_let_reusing_defining_expr :
      Variable.t -> named t -> expr -> expr
    val create_let_reusing_body : Variable.t -> named -> expr t -> expr
    val create_let_reusing_both : Variable.t -> named t -> expr t -> expr
    val expr : expr t -> named t
    val contents : 'a t -> 'a
    val free_variables : 'a t -> Variable.Set.t
  end
val create_function_declaration :
  params:Parameter.t list ->
  body:t ->
  stub:bool ->
  dbg:Debuginfo.t ->
  inline:Lambda.inline_attribute ->
  specialise:Lambda.specialise_attribute ->
  is_a_functor:bool ->
  closure_origin:Closure_origin.t ->
  poll:Lambda.poll_attribute -> function_declaration
val update_function_declaration :
  function_declaration ->
  params:Parameter.t list -> body:t -> function_declaration
val create_function_declarations :
  is_classic_mode:bool ->
  funs:function_declaration Variable.Map.t -> function_declarations
val create_function_declarations_with_origin :
  is_classic_mode:bool ->
  funs:function_declaration Variable.Map.t ->
  set_of_closures_origin:Set_of_closures_origin.t -> function_declarations
val update_body_of_function_declaration :
  function_declaration -> body:expr -> function_declaration
val update_function_decl's_params_and_body :
  function_declaration ->
  params:Parameter.t list -> body:expr -> function_declaration
val update_function_declarations :
  function_declarations ->
  funs:function_declaration Variable.Map.t -> function_declarations
val create_function_declarations_with_closures_origin :
  is_classic_mode:bool ->
  funs:function_declaration Variable.Map.t ->
  set_of_closures_origin:Set_of_closures_origin.t -> function_declarations
val import_function_declarations_for_pack :
  function_declarations ->
  (Set_of_closures_id.t -> Set_of_closures_id.t) ->
  (Set_of_closures_origin.t -> Set_of_closures_origin.t) ->
  function_declarations
val create_set_of_closures :
  function_decls:function_declarations ->
  free_vars:specialised_to Variable.Map.t ->
  specialised_args:specialised_to Variable.Map.t ->
  direct_call_surrogates:Variable.t Variable.Map.t -> set_of_closures
val used_params : function_declaration -> Variable.Set.t
type maybe_named = Is_expr of t | Is_named of named
val iter_general :
  toplevel:bool -> (t -> unit) -> (named -> unit) -> maybe_named -> unit
val print : Format.formatter -> t -> unit
val print_named : Format.formatter -> named -> unit
val print_program : Format.formatter -> program -> unit
val print_const : Format.formatter -> const -> unit
val print_constant_defining_value :
  Format.formatter -> constant_defining_value -> unit
val print_function_declaration :
  Format.formatter -> Variable.t * function_declaration -> unit
val print_function_declarations :
  Format.formatter -> function_declarations -> unit
val print_project_closure : Format.formatter -> project_closure -> unit
val print_move_within_set_of_closures :
  Format.formatter -> move_within_set_of_closures -> unit
val print_project_var : Format.formatter -> project_var -> unit
val print_set_of_closures : Format.formatter -> set_of_closures -> unit
val print_specialised_to : Format.formatter -> specialised_to -> unit
val equal_call_kind : call_kind -> call_kind -> bool
val equal_specialised_to : specialised_to -> specialised_to -> bool
val compare_const : const -> const -> int
val compare_project_var : project_var -> project_var -> int
val compare_move_within_set_of_closures :
  move_within_set_of_closures -> move_within_set_of_closures -> int
("DEBUG:rule", [Tag1 (("call_kind", 3102), (0, 0, Tag1 ([(("Indirect", 270), (0), 0, (("middle_end/flambda/flambda.mli", 23, 1369, 1371), ("middle_end/flambda/flambda.mli", 23, 1369, 1381), 0), 0, Tag1 ("Flambda", 1)); (("Direct", 271), ([(Tag3 (Tag1 ((Tag2 ("Closure_id")), "t"), 0, (0)), 100000000, 0, -484)]), 0, (("middle_end/flambda/flambda.mli", 24, 1382, 1384), ("middle_end/flambda/flambda.mli", 24, 1382, 1408), 0), 0, Tag1 ("Flambda", 2))], 0), 1, 0, 0, 0, 0, 0, (("middle_end/flambda/flambda.mli", 22, 1352, 1352), ("middle_end/flambda/flambda.mli", 24, 1382, 1408), 0), 0, 0, 0, Tag1 ("Flambda", 0)), 1, 0); Tag1 (("const", 3103), (0, 0, Tag1 ([(("Int", 291), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -482)]), 0, (("middle_end/flambda/flambda.mli", 29, 1571, 1573), ("middle_end/flambda/flambda.mli", 29, 1571, 1585), 0), 0, Tag1 ("Flambda", 4)); (("Char", 292), ([(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -483)]), 0, (("middle_end/flambda/flambda.mli", 30, 1586, 1588), ("middle_end/flambda/flambda.mli", 30, 1586, 1602), 0), 0, Tag1 ("Flambda", 5))], 0), 1, 0, 0, 0, 0, 0, (("middle_end/flambda/flambda.mli", 28, 1558, 1558), ("middle_end/flambda/flambda.mli", 30, 1586, 1602), 0), 0, 0, 0, Tag1 ("Flambda", 3)), 1, 0); Tag1 (("apply", 3104), (0, 0, [[(("func", 318), 0, (Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -475), (("middle_end/flambda/flambda.mli", 37, 1832, 1834), ("middle_end/flambda/flambda.mli", 37, 1832, 1852), 0), 0, Tag1 ("Flambda", 10)); (("args", 319), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -477)], (0)), 100000000, 0, -476), (("middle_end/flambda/flambda.mli", 38, 1853, 1855), ("middle_end/flambda/flambda.mli", 38, 1853, 1878), 0), 0, Tag1 ("Flambda", 11)); (("kind", 320), 0, (Tag3 ((("call_kind", 3102)), 0, (0)), 100000000, 0, -478), (("middle_end/flambda/flambda.mli", 39, 1879, 1881), ("middle_end/flambda/flambda.mli", 39, 1879, 1898), 0), 0, Tag1 ("Flambda", 12)); (("dbg", 335), 0, (Tag3 (Tag1 ((Tag2 ("Debuginfo")), "t"), 0, (0)), 100000000, 0, -479), (("middle_end/flambda/flambda.mli", 40, 1899, 1901), ("middle_end/flambda/flambda.mli", 40, 1899, 1919), 0), 0, Tag1 ("Flambda", 13)); (("inline", 414), 0, (Tag3 (Tag1 ((Tag2 ("Lambda")), "inline_attribute"), 0, (0)), 100000000, 0, -480), (("middle_end/flambda/flambda.mli", 41, 1920, 1922), ("middle_end/flambda/flambda.mli", 41, 1920, 1955), 0), 0, Tag1 ("Flambda", 14)); (("specialise", 415), 0, (Tag3 (Tag1 ((Tag2 ("Lambda")), "specialise_attribute"), 0, (0)), 100000000, 0, -481), (("middle_end/flambda/flambda.mli", 44, 2049, 2051), ("middle_end/flambda/flambda.mli", 44, 2049, 2092), 0), 0, Tag1 ("Flambda", 15))]], 1, 0, 0, 0, 0, 0, (("middle_end/flambda/flambda.mli", 34, 1729, 1729), ("middle_end/flambda/flambda.mli", 47, 2190, 2191), 0), 0, 0, 0, Tag1 ("Flambda", 6)), 1, 0); Tag1 (("assign", 3105), (0, 0, [[(("being_assigned", 437), 0, (Tag3 (Tag1 ((Tag2 ("Mutable_variable")), "t"), 0, (0)), 100000000, 0, -473), (("middle_end/flambda/flambda.mli", 52, 2323, 2325), ("middle_end/flambda/flambda.mli", 52, 2323, 2361), 0), 0, Tag1 ("Flambda", 17)); (("new_value", 438), 0, (Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -474), (("middle_end/flambda/flambda.mli", 53, 2362, 2364), ("middle_end/flambda/flambda.mli", 53, 2362, 2387), 0), 0, Tag1 ("Flambda", 18))]], 1, 0, 0, 0, 0, 0, (("middle_end/flambda/flambda.mli", 51, 2307, 2307), ("middle_end/flambda/flambda.mli", 54, 2388, 2389), 0), 0, 0, 0, Tag1 ("Flambda", 16)), 1, 0); Tag1 (("send", 3106), (0, 0, [[(("kind", 440), 0, (Tag3 (Tag1 ((Tag2 ("Lambda")), "meth_kind"), 0, (0)), 100000000, 0, -467), (("middle_end/flambda/flambda.mli", 58, 2440, 2442), ("middle_end/flambda/flambda.mli", 58, 2440, 2466), 0), 0, Tag1 ("Flambda", 20)); (("meth", 441), 0, (Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -468), (("middle_end/flambda/flambda.mli", 59, 2467, 2469), ("middle_end/flambda/flambda.mli", 59, 2467, 2487), 0), 0, Tag1 ("Flambda", 21)); (("obj", 442), 0, (Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -469), (("middle_end/flambda/flambda.mli", 60, 2488, 2490), ("middle_end/flambda/flambda.mli", 60, 2488, 2507), 0), 0, Tag1 ("Flambda", 22)); (("args", 443), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -471)], (0)), 100000000, 0, -470), (("middle_end/flambda/flambda.mli", 61, 2508, 2510), ("middle_end/flambda/flambda.mli", 61, 2508, 2533), 0), 0, Tag1 ("Flambda", 23)); (("dbg", 444), 0, (Tag3 (Tag1 ((Tag2 ("Debuginfo")), "t"), 0, (0)), 100000000, 0, -472), (("middle_end/flambda/flambda.mli", 62, 2534, 2536), ("middle_end/flambda/flambda.mli", 62, 2534, 2554), 0), 0, Tag1 ("Flambda", 24))]], 1, 0, 0, 0, 0, 0, (("middle_end/flambda/flambda.mli", 57, 2426, 2426), ("middle_end/flambda/flambda.mli", 63, 2555, 2556), 0), 0, 0, 0, Tag1 ("Flambda", 19)), 1, 0); Tag1 (("project_closure", 3107), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Projection")), "project_closure"), 0, (0)), 100000000, 0, -466)), 0, 0, 0, 0, (("middle_end/flambda/flambda.mli", 66, 2613, 2613), ("middle_end/flambda/flambda.mli", 66, 2613, 2662), 0), 0, 0, 0, Tag1 ("Flambda", 25)), 1, 0); Tag1 (("move_within_set_of_closures", 3108), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Projection")), "move_within_set_of_closures"), 0, (0)), 100000000, 0, -465)), 0, 0, 0, 0, (("middle_end/flambda/flambda.mli", 67, 2663, 2663), ("middle_end/flambda/flambda.mli", 67, 2663, 2736), 0), 0, 0, 0, Tag1 ("Flambda", 26)), 1, 0); Tag1 (("project_var", 3109), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Projection")), "project_var"), 0, (0)), 100000000, 0, -464)), 0, 0, 0, 0, (("middle_end/flambda/flambda.mli", 68, 2737, 2737), ("middle_end/flambda/flambda.mli", 68, 2737, 2778), 0), 0, 0, 0, Tag1 ("Flambda", 27)), 1, 0); Tag1 (("specialised_to", 3110), (0, 0, [[(("var", 470), 0, (Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -461), (("middle_end/flambda/flambda.mli", 75, 3032, 3034), ("middle_end/flambda/flambda.mli", 75, 3032, 3051), 0), 0, Tag1 ("Flambda", 29)); (("projection", 471), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Projection")), "t"), 0, (0)), 100000000, 0, -463)], (0)), 100000000, 0, -462), (("middle_end/flambda/flambda.mli", 77, 3083, 3085), ("middle_end/flambda/flambda.mli", 77, 3083, 3118), 0), 0, Tag1 ("Flambda", 30))]], 1, 0, 0, 0, 0, 0, (("middle_end/flambda/flambda.mli", 74, 3008, 3008), ("middle_end/flambda/flambda.mli", 84, 3526, 3527), 0), 0, 0, 0, Tag1 ("Flambda", 28)), 1, 0); Tag1 (("t", 3111), (0, 0, Tag1 ([(("Var", 483), ([(Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -424)]), 0, (("middle_end/flambda/flambda.mli", 93, 3905, 3907), ("middle_end/flambda/flambda.mli", 93, 3905, 3926), 0), 0, Tag1 ("Flambda", 42)); (("Let", 484), ([(Tag3 ((("let_expr", 3113)), 0, (0)), 100000000, 0, -425)]), 0, (("middle_end/flambda/flambda.mli", 94, 3927, 3929), ("middle_end/flambda/flambda.mli", 94, 3927, 3946), 0), 0, Tag1 ("Flambda", 43)); (("Let_mutable", 485), ([(Tag3 ((("let_mutable", 3114)), 0, (0)), 100000000, 0, -426)]), 0, (("middle_end/flambda/flambda.mli", 95, 3947, 3949), ("middle_end/flambda/flambda.mli", 95, 3947, 3977), 0), 0, Tag1 ("Flambda", 44)); (("Let_rec", 486), ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -429); (Tag3 ((("named", 3112)), 0, (0)), 100000000, 0, -430)]), 100000000, 0, -428)], (0)), 100000000, 0, -427); (Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -431)]), 0, (("middle_end/flambda/flambda.mli", 96, 3978, 3980), ("middle_end/flambda/flambda.mli", 96, 3978, 4022), 0), 0, Tag1 ("Flambda", 45)); (("Apply", 487), ([(Tag3 ((("apply", 3104)), 0, (0)), 100000000, 0, -432)]), 0, (("middle_end/flambda/flambda.mli", 98, 4088, 4090), ("middle_end/flambda/flambda.mli", 98, 4088, 4106), 0), 0, Tag1 ("Flambda", 46)); (("Send", 488), ([(Tag3 ((("send", 3106)), 0, (0)), 100000000, 0, -433)]), 0, (("middle_end/flambda/flambda.mli", 99, 4107, 4109), ("middle_end/flambda/flambda.mli", 99, 4107, 4123), 0), 0, Tag1 ("Flambda", 47)); (("Assign", 489), ([(Tag3 ((("assign", 3105)), 0, (0)), 100000000, 0, -434)]), 0, (("middle_end/flambda/flambda.mli", 100, 4124, 4126), ("middle_end/flambda/flambda.mli", 100, 4124, 4144), 0), 0, Tag1 ("Flambda", 48)); (("If_then_else", 490), ([(Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -435); (Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -436); (Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -437)]), 0, (("middle_end/flambda/flambda.mli", 101, 4145, 4147), ("middle_end/flambda/flambda.mli", 101, 4145, 4183), 0), 0, Tag1 ("Flambda", 49)); (("Switch", 491), ([(Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -438); (Tag3 ((("switch", 3118)), 0, (0)), 100000000, 0, -439)]), 0, (("middle_end/flambda/flambda.mli", 102, 4184, 4186), ("middle_end/flambda/flambda.mli", 102, 4184, 4217), 0), 0, Tag1 ("Flambda", 50)); (("String_switch", 492), ([(Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -440); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -443); (Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -444)]), 100000000, 0, -442)], (0)), 100000000, 0, -441); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -446)], (0)), 100000000, 0, -445)]), 0, (("middle_end/flambda/flambda.mli", 103, 4218, 4220), ("middle_end/flambda/flambda.mli", 103, 4218, 4280), 0), 0, Tag1 ("Flambda", 51)); (("Static_raise", 493), ([(Tag3 (Tag1 ((Tag2 ("Static_exception")), "t"), 0, (0)), 100000000, 0, -447); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -449)], (0)), 100000000, 0, -448)]), 0, (("middle_end/flambda/flambda.mli", 105, 4360, 4362), ("middle_end/flambda/flambda.mli", 105, 4360, 4416), 0), 0, Tag1 ("Flambda", 52)); (("Static_catch", 506), ([(Tag3 (Tag1 ((Tag2 ("Static_exception")), "t"), 0, (0)), 100000000, 0, -450); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -452)], (0)), 100000000, 0, -451); (Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -453); (Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -454)]), 0, (("middle_end/flambda/flambda.mli", 106, 4417, 4419), ("middle_end/flambda/flambda.mli", 106, 4417, 4481), 0), 0, Tag1 ("Flambda", 53)); (("Try_with", 507), ([(Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -455); (Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -456); (Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -457)]), 0, (("middle_end/flambda/flambda.mli", 107, 4482, 4484), ("middle_end/flambda/flambda.mli", 107, 4482, 4516), 0), 0, Tag1 ("Flambda", 54)); (("While", 508), ([(Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -458); (Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -459)]), 0, (("middle_end/flambda/flambda.mli", 108, 4517, 4519), ("middle_end/flambda/flambda.mli", 108, 4517, 4535), 0), 0, Tag1 ("Flambda", 55)); (("For", 509), ([(Tag3 ((("for_loop", 3119)), 0, (0)), 100000000, 0, -460)]), 0, (("middle_end/flambda/flambda.mli", 109, 4536, 4538), ("middle_end/flambda/flambda.mli", 109, 4536, 4555), 0), 0, Tag1 ("Flambda", 56)); (("Proved_unreachable", 510), (0), 0, (("middle_end/flambda/flambda.mli", 110, 4556, 4558), ("middle_end/flambda/flambda.mli", 110, 4556, 4578), 0), 0, Tag1 ("Flambda", 57))], 0), 1, 0, 0, 0, 0, 0, (("middle_end/flambda/flambda.mli", 92, 3896, 3896), ("middle_end/flambda/flambda.mli", 110, 4556, 4578), 0), 0, 0, 0, Tag1 ("Flambda", 31)), 1, 0); Tag1 (("named", 3112), (0, 0, Tag1 ([(("Symbol", 511), ([(Tag3 (Tag1 ((Tag2 ("Symbol")), "t"), 0, (0)), 100000000, 0, -409)]), 0, (("middle_end/flambda/flambda.mli", 114, 4668, 4670), ("middle_end/flambda/flambda.mli", 114, 4668, 4690), 0), 0, Tag1 ("Flambda", 58)); (("Const", 529), ([(Tag3 ((("const", 3103)), 0, (0)), 100000000, 0, -410)]), 0, (("middle_end/flambda/flambda.mli", 115, 4691, 4693), ("middle_end/flambda/flambda.mli", 115, 4691, 4709), 0), 0, Tag1 ("Flambda", 59)); (("Allocated_const", 530), ([(Tag3 (Tag1 ((Tag2 ("Allocated_const")), "t"), 0, (0)), 100000000, 0, -411)]), 0, (("middle_end/flambda/flambda.mli", 116, 4710, 4712), ("middle_end/flambda/flambda.mli", 116, 4710, 4750), 0), 0, Tag1 ("Flambda", 60)); (("Read_mutable", 535), ([(Tag3 (Tag1 ((Tag2 ("Mutable_variable")), "t"), 0, (0)), 100000000, 0, -412)]), 0, (("middle_end/flambda/flambda.mli", 117, 4751, 4753), ("middle_end/flambda/flambda.mli", 117, 4751, 4789), 0), 0, Tag1 ("Flambda", 61)); (("Read_symbol_field", 536), ([(Tag3 (Tag1 ((Tag2 ("Symbol")), "t"), 0, (0)), 100000000, 0, -413); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -414)]), 0, (("middle_end/flambda/flambda.mli", 118, 4790, 4792), ("middle_end/flambda/flambda.mli", 118, 4790, 4829), 0), 0, Tag1 ("Flambda", 62)); (("Set_of_closures", 537), ([(Tag3 ((("set_of_closures", 3115)), 0, (0)), 100000000, 0, -415)]), 0, (("middle_end/flambda/flambda.mli", 146, 6806, 6808), ("middle_end/flambda/flambda.mli", 146, 6806, 6844), 0), 0, Tag1 ("Flambda", 63)); (("Project_closure", 538), ([(Tag3 ((("project_closure", 3107)), 0, (0)), 100000000, 0, -416)]), 0, (("middle_end/flambda/flambda.mli", 147, 6845, 6847), ("middle_end/flambda/flambda.mli", 147, 6845, 6883), 0), 0, Tag1 ("Flambda", 64)); (("Move_within_set_of_closures", 539), ([(Tag3 ((("move_within_set_of_closures", 3108)), 0, (0)), 100000000, 0, -417)]), 0, (("middle_end/flambda/flambda.mli", 148, 6884, 6886), ("middle_end/flambda/flambda.mli", 148, 6884, 6946), 0), 0, Tag1 ("Flambda", 65)); (("Project_var", 540), ([(Tag3 ((("project_var", 3109)), 0, (0)), 100000000, 0, -418)]), 0, (("middle_end/flambda/flambda.mli", 149, 6947, 6949), ("middle_end/flambda/flambda.mli", 149, 6947, 6977), 0), 0, Tag1 ("Flambda", 66)); (("Prim", 541), ([(Tag3 (Tag1 ((Tag2 ("Clambda_primitives")), "primitive"), 0, (0)), 100000000, 0, -419); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -421)], (0)), 100000000, 0, -420); (Tag3 (Tag1 ((Tag2 ("Debuginfo")), "t"), 0, (0)), 100000000, 0, -422)]), 0, (("middle_end/flambda/flambda.mli", 150, 6978, 6980), ("middle_end/flambda/flambda.mli", 150, 6978, 7050), 0), 0, Tag1 ("Flambda", 70)); (("Expr", 559), ([(Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -423)]), 0, (("middle_end/flambda/flambda.mli", 151, 7051, 7053), ("middle_end/flambda/flambda.mli", 151, 7051, 7064), 0), 0, Tag1 ("Flambda", 71))], 0), 1, 0, 0, 0, 0, 0, (("middle_end/flambda/flambda.mli", 113, 4656, 4656), ("middle_end/flambda/flambda.mli", 151, 7051, 7064), 0), 0, 0, 0, Tag1 ("Flambda", 32)), 2, 0); Tag1 (("let_expr", 3113), (0, 0, [[(("var", 560), 0, (Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -404), (("middle_end/flambda/flambda.mli", 166, 7795, 7797), ("middle_end/flambda/flambda.mli", 166, 7795, 7814), 0), 0, Tag1 ("Flambda", 72)); (("defining_expr", 561), 0, (Tag3 ((("named", 3112)), 0, (0)), 100000000, 0, -405), (("middle_end/flambda/flambda.mli", 167, 7815, 7817), ("middle_end/flambda/flambda.mli", 167, 7815, 7839), 0), 0, Tag1 ("Flambda", 73)); (("body", 562), 0, (Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -406), (("middle_end/flambda/flambda.mli", 168, 7840, 7842), ("middle_end/flambda/flambda.mli", 168, 7840, 7851), 0), 0, Tag1 ("Flambda", 74)); (("free_vars_of_defining_expr", 611), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Set"), "t"), 0, (0)), 100000000, 0, -407), (("middle_end/flambda/flambda.mli", 171, 7982, 7984), ("middle_end/flambda/flambda.mli", 171, 7982, 8028), 0), 0, Tag1 ("Flambda", 75)); (("free_vars_of_body", 612), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Set"), "t"), 0, (0)), 100000000, 0, -408), (("middle_end/flambda/flambda.mli", 173, 8109, 8111), ("middle_end/flambda/flambda.mli", 173, 8109, 8146), 0), 0, Tag1 ("Flambda", 76))]], 0, 0, 0, 0, 0, 0, (("middle_end/flambda/flambda.mli", 165, 7770, 7770), ("middle_end/flambda/flambda.mli", 176, 8254, 8255), 0), 0, 0, 0, Tag1 ("Flambda", 33)), 2, 0); Tag1 (("let_mutable", 3114), (0, 0, [[(("var", 613), 0, (Tag3 (Tag1 ((Tag2 ("Mutable_variable")), "t"), 0, (0)), 100000000, 0, -400), (("middle_end/flambda/flambda.mli", 179, 8277, 8279), ("middle_end/flambda/flambda.mli", 179, 8277, 8304), 0), 0, Tag1 ("Flambda", 77)); (("initial_value", 614), 0, (Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -401), (("middle_end/flambda/flambda.mli", 180, 8305, 8307), ("middle_end/flambda/flambda.mli", 180, 8305, 8334), 0), 0, Tag1 ("Flambda", 78)); (("contents_kind", 615), 0, (Tag3 (Tag1 ((Tag2 ("Lambda")), "value_kind"), 0, (0)), 100000000, 0, -402), (("middle_end/flambda/flambda.mli", 181, 8335, 8337), ("middle_end/flambda/flambda.mli", 181, 8335, 8371), 0), 0, Tag1 ("Flambda", 79)); (("body", 616), 0, (Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -403), (("middle_end/flambda/flambda.mli", 182, 8372, 8374), ("middle_end/flambda/flambda.mli", 182, 8372, 8383), 0), 0, Tag1 ("Flambda", 80))]], 1, 0, 0, 0, 0, 0, (("middle_end/flambda/flambda.mli", 178, 8257, 8257), ("middle_end/flambda/flambda.mli", 183, 8384, 8385), 0), 0, 0, 0, Tag1 ("Flambda", 34)), 2, 0); Tag1 (("set_of_closures", 3115), (0, 0, [[(("function_decls", 617), 0, (Tag3 ((("function_declarations", 3116)), 0, (0)), 100000000, 0, -393), (("middle_end/flambda/flambda.mli", 203, 9449, 9451), ("middle_end/flambda/flambda.mli", 203, 9449, 9490), 0), 0, Tag1 ("Flambda", 81)); (("free_vars", 675), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Map"), "t"), [(Tag3 ((("specialised_to", 3110)), 0, (0)), 100000000, 0, -395)], (0)), 100000000, 0, -394), (("middle_end/flambda/flambda.mli", 215, 10081, 10083), ("middle_end/flambda/flambda.mli", 215, 10081, 10125), 0), 0, Tag1 ("Flambda", 82)); (("specialised_args", 676), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Map"), "t"), [(Tag3 ((("specialised_to", 3110)), 0, (0)), 100000000, 0, -397)], (0)), 100000000, 0, -396), (("middle_end/flambda/flambda.mli", 220, 10376, 10378), ("middle_end/flambda/flambda.mli", 220, 10376, 10427), 0), 0, Tag1 ("Flambda", 83)); (("direct_call_surrogates", 677), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Map"), "t"), [(Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -399)], (0)), 100000000, 0, -398), (("middle_end/flambda/flambda.mli", 274, 13093, 13095), ("middle_end/flambda/flambda.mli", 274, 13093, 13146), 0), 0, Tag1 ("Flambda", 84))]], 0, 0, 0, 0, 0, 0, (("middle_end/flambda/flambda.mli", 202, 9417, 9417), ("middle_end/flambda/flambda.mli", 281, 13543, 13544), 0), 0, 0, 0, Tag1 ("Flambda", 35)), 2, 0); Tag1 (("function_declarations", 3116), (0, 0, [[(("is_classic_mode", 678), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -388), (("middle_end/flambda/flambda.mli", 284, 13584, 13586), ("middle_end/flambda/flambda.mli", 284, 13584, 13608), 0), 0, Tag1 ("Flambda", 85)); (("set_of_closures_id", 692), 0, (Tag3 (Tag1 ((Tag2 ("Set_of_closures_id")), "t"), 0, (0)), 100000000, 0, -389), (("middle_end/flambda/flambda.mli", 287, 13700, 13702), ("middle_end/flambda/flambda.mli", 287, 13700, 13744), 0), 0, Tag1 ("Flambda", 86)); (("set_of_closures_origin", 706), 0, (Tag3 (Tag1 ((Tag2 ("Set_of_closures_origin")), "t"), 0, (0)), 100000000, 0, -390), (("middle_end/flambda/flambda.mli", 291, 13908, 13910), ("middle_end/flambda/flambda.mli", 291, 13908, 13960), 0), 0, Tag1 ("Flambda", 87)); (("funs", 707), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Map"), "t"), [(Tag3 ((("function_declaration", 3117)), 0, (0)), 100000000, 0, -392)], (0)), 100000000, 0, -391), (("middle_end/flambda/flambda.mli", 296, 14202, 14204), ("middle_end/flambda/flambda.mli", 296, 14202, 14247), 0), 0, Tag1 ("Flambda", 88))]], 0, 0, 0, 0, 0, 0, (("middle_end/flambda/flambda.mli", 283, 13546, 13546), ("middle_end/flambda/flambda.mli", 299, 14395, 14396), 0), 0, 0, 0, Tag1 ("Flambda", 36)), 2, 0); Tag1 (("function_declaration", 3117), (0, 0, [[(("closure_origin", 720), 0, (Tag3 (Tag1 ((Tag2 ("Closure_origin")), "t"), 0, (0)), 100000000, 0, -376), (("middle_end/flambda/flambda.mli", 302, 14435, 14437), ("middle_end/flambda/flambda.mli", 302, 14435, 14470), 0), 0, Tag1 ("Flambda", 89)); (("params", 737), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Parameter")), "t"), 0, (0)), 100000000, 0, -378)], (0)), 100000000, 0, -377), (("middle_end/flambda/flambda.mli", 303, 14471, 14473), ("middle_end/flambda/flambda.mli", 303, 14471, 14499), 0), 0, Tag1 ("Flambda", 90)); (("body", 738), 0, (Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -379), (("middle_end/flambda/flambda.mli", 304, 14500, 14502), ("middle_end/flambda/flambda.mli", 304, 14500, 14511), 0), 0, Tag1 ("Flambda", 91)); (("free_variables", 739), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Set"), "t"), 0, (0)), 100000000, 0, -380), (("middle_end/flambda/flambda.mli", 307, 14604, 14606), ("middle_end/flambda/flambda.mli", 307, 14604, 14638), 0), 0, Tag1 ("Flambda", 92)); (("free_symbols", 788), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Symbol")), "Set"), "t"), 0, (0)), 100000000, 0, -381), (("middle_end/flambda/flambda.mli", 311, 14864, 14866), ("middle_end/flambda/flambda.mli", 311, 14864, 14894), 0), 0, Tag1 ("Flambda", 93)); (("stub", 789), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -382), (("middle_end/flambda/flambda.mli", 315, 15087, 15089), ("middle_end/flambda/flambda.mli", 315, 15087, 15101), 0), 0, Tag1 ("Flambda", 94)); (("dbg", 790), 0, (Tag3 (Tag1 ((Tag2 ("Debuginfo")), "t"), 0, (0)), 100000000, 0, -383), (("middle_end/flambda/flambda.mli", 320, 15400, 15402), ("middle_end/flambda/flambda.mli", 320, 15400, 15420), 0), 0, Tag1 ("Flambda", 95)); (("inline", 791), 0, (Tag3 (Tag1 ((Tag2 ("Lambda")), "inline_attribute"), 0, (0)), 100000000, 0, -384), (("middle_end/flambda/flambda.mli", 322, 15471, 15473), ("middle_end/flambda/flambda.mli", 322, 15471, 15506), 0), 0, Tag1 ("Flambda", 96)); (("specialise", 792), 0, (Tag3 (Tag1 ((Tag2 ("Lambda")), "specialise_attribute"), 0, (0)), 100000000, 0, -385), (("middle_end/flambda/flambda.mli", 324, 15560, 15562), ("middle_end/flambda/flambda.mli", 324, 15560, 15603), 0), 0, Tag1 ("Flambda", 97)); (("is_a_functor", 793), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -386), (("middle_end/flambda/flambda.mli", 326, 15661, 15663), ("middle_end/flambda/flambda.mli", 326, 15661, 15683), 0), 0, Tag1 ("Flambda", 98)); (("poll", 794), 0, (Tag3 (Tag1 ((Tag2 ("Lambda")), "poll_attribute"), 0, (0)), 100000000, 0, -387), (("middle_end/flambda/flambda.mli", 328, 15753, 15755), ("middle_end/flambda/flambda.mli", 328, 15753, 15783), 0), 0, Tag1 ("Flambda", 99))]], 0, 0, 0, 0, 0, 0, (("middle_end/flambda/flambda.mli", 301, 14398, 14398), ("middle_end/flambda/flambda.mli", 330, 15813, 15814), 0), 0, 0, 0, Tag1 ("Flambda", 37)), 2, 0); Tag1 (("switch", 3118), (0, 0, [[(("numconsts", 859), 0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Numbers")), "Int"), "Set"), "t"), 0, (0)), 100000000, 0, -364), (("middle_end/flambda/flambda.mli", 334, 15882, 15884), ("middle_end/flambda/flambda.mli", 334, 15882, 15914), 0), 0, Tag1 ("Flambda", 100)); (("consts", 860), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -367); (Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -368)]), 100000000, 0, -366)], (0)), 100000000, 0, -365), (("middle_end/flambda/flambda.mli", 335, 15936, 15938), ("middle_end/flambda/flambda.mli", 335, 15936, 15962), 0), 0, Tag1 ("Flambda", 101)); (("numblocks", 861), 0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Numbers")), "Int"), "Set"), "t"), 0, (0)), 100000000, 0, -369), (("middle_end/flambda/flambda.mli", 336, 15984, 15986), ("middle_end/flambda/flambda.mli", 336, 15984, 16016), 0), 0, Tag1 ("Flambda", 102)); (("blocks", 862), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -372); (Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -373)]), 100000000, 0, -371)], (0)), 100000000, 0, -370), (("middle_end/flambda/flambda.mli", 337, 16050, 16052), ("middle_end/flambda/flambda.mli", 337, 16050, 16076), 0), 0, Tag1 ("Flambda", 103)); (("failaction", 863), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -375)], (0)), 100000000, 0, -374), (("middle_end/flambda/flambda.mli", 338, 16100, 16102), ("middle_end/flambda/flambda.mli", 338, 16100, 16124), 0), 0, Tag1 ("Flambda", 104))]], 1, 0, 0, 0, 0, 0, (("middle_end/flambda/flambda.mli", 333, 15867, 15867), ("middle_end/flambda/flambda.mli", 339, 16163, 16164), 0), 0, 0, 0, Tag1 ("Flambda", 38)), 2, 0); Tag1 (("for_loop", 3119), (0, 0, [[(("bound_var", 1098), 0, (Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -359), (("middle_end/flambda/flambda.mli", 343, 16234, 16236), ("middle_end/flambda/flambda.mli", 343, 16234, 16259), 0), 0, Tag1 ("Flambda", 105)); (("from_value", 1099), 0, (Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -360), (("middle_end/flambda/flambda.mli", 344, 16260, 16262), ("middle_end/flambda/flambda.mli", 344, 16260, 16286), 0), 0, Tag1 ("Flambda", 106)); (("to_value", 1100), 0, (Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -361), (("middle_end/flambda/flambda.mli", 345, 16287, 16289), ("middle_end/flambda/flambda.mli", 345, 16287, 16311), 0), 0, Tag1 ("Flambda", 107)); (("direction", 1114), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "direction_flag"), 0, (0)), 100000000, 0, -362), (("middle_end/flambda/flambda.mli", 346, 16312, 16314), ("middle_end/flambda/flambda.mli", 346, 16312, 16350), 0), 0, Tag1 ("Flambda", 108)); (("body", 1115), 0, (Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -363), (("middle_end/flambda/flambda.mli", 347, 16351, 16353), ("middle_end/flambda/flambda.mli", 347, 16351, 16361), 0), 0, Tag1 ("Flambda", 109))]], 1, 0, 0, 0, 0, 0, (("middle_end/flambda/flambda.mli", 342, 16217, 16217), ("middle_end/flambda/flambda.mli", 348, 16362, 16363), 0), 0, 0, 0, Tag1 ("Flambda", 39)), 2, 0); Tag1 (("constant_defining_value", 3120), (0, 0, Tag1 ([(("Allocated_const", 1116), ([(Tag3 (Tag1 ((Tag2 ("Allocated_const")), "t"), 0, (0)), 100000000, 0, -352)]), 0, (("middle_end/flambda/flambda.mli", 355, 16698, 16700), ("middle_end/flambda/flambda.mli", 355, 16698, 16738), 0), 0, Tag1 ("Flambda", 110)); (("Block", 1117), ([(Tag3 (Tag1 ((Tag2 ("Tag")), "t"), 0, (0)), 100000000, 0, -353); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("constant_defining_value_block_field", 3121)), 0, (0)), 100000000, 0, -355)], (0)), 100000000, 0, -354)]), 0, (("middle_end/flambda/flambda.mli", 358, 16872, 16874), ("middle_end/flambda/flambda.mli", 358, 16872, 16933), 0), 0, Tag1 ("Flambda", 111)); (("Set_of_closures", 1132), ([(Tag3 ((("set_of_closures", 3115)), 0, (0)), 100000000, 0, -356)]), 0, (("middle_end/flambda/flambda.mli", 361, 17064, 17066), ("middle_end/flambda/flambda.mli", 361, 17064, 17102), 0), 0, Tag1 ("Flambda", 112)); (("Project_closure", 1133), ([(Tag3 (Tag1 ((Tag2 ("Symbol")), "t"), 0, (0)), 100000000, 0, -357); (Tag3 (Tag1 ((Tag2 ("Closure_id")), "t"), 0, (0)), 100000000, 0, -358)]), 0, (("middle_end/flambda/flambda.mli", 364, 17214, 17216), ("middle_end/flambda/flambda.mli", 364, 17214, 17260), 0), 0, Tag1 ("Flambda", 113))], 0), 1, 0, 0, 0, 0, 0, (("middle_end/flambda/flambda.mli", 354, 16668, 16668), ("middle_end/flambda/flambda.mli", 364, 17214, 17260), 0), 0, 0, 0, Tag1 ("Flambda", 40)), 2, 0); Tag1 (("constant_defining_value_block_field", 3121), (0, 0, Tag1 ([(("Symbol", 1134), ([(Tag3 (Tag1 ((Tag2 ("Symbol")), "t"), 0, (0)), 100000000, 0, -350)]), 0, (("middle_end/flambda/flambda.mli", 369, 17435, 17437), ("middle_end/flambda/flambda.mli", 369, 17435, 17457), 0), 0, Tag1 ("Flambda", 114)); (("Const", 1135), ([(Tag3 ((("const", 3103)), 0, (0)), 100000000, 0, -351)]), 0, (("middle_end/flambda/flambda.mli", 370, 17458, 17460), ("middle_end/flambda/flambda.mli", 370, 17458, 17476), 0), 0, Tag1 ("Flambda", 115))], 0), 1, 0, 0, 0, 0, 0, (("middle_end/flambda/flambda.mli", 368, 17393, 17393), ("middle_end/flambda/flambda.mli", 370, 17458, 17476), 0), 0, 0, 0, Tag1 ("Flambda", 41)), 2, 0); Tag3 (("Constant_defining_value", 3122), 0, (Tag1 ([Tag1 (("t", 3170), (0, 0, 0, 1, ((Tag3 ((("constant_defining_value", 3120)), 0, (0)), 100000000, 0, -508)), 0, 0, 0, 0, (("middle_end/flambda/flambda.mli", 373, 17511, 17533), ("middle_end/flambda/flambda.mli", 373, 17511, 17565), 0), 0, 0, 0, Tag1 ("Flambda", 116)), 1, 0); Tag3 (("T", 3171), 0, (Tag1 ([Tag1 (("t", 3180), (0, 0, 0, 1, ((Tag3 ((("t", 3170)), 0, (0)), 100000000, 0, -532)), 0, 0, 0, 0, (("utils/identifiable.mli", 105, 3648, 3672), ("utils/identifiable.mli", 105, 3648, 3682), 0), 0, 0, 0, Tag1 ("Identifiable", 50)), 1, 0); (("equal", 3181), ((Tag1 (0, (Tag3 ((("t", 3180)), 0, (0)), 100000000, 0, -531), (Tag1 (0, (Tag3 ((("t", 3180)), 0, (0)), 100000000, 0, -530), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -529), 0), 100000000, 0, -528), 0), 100000000, 0, -527), 0, (("utils/identifiable.mli", 27, 1352, 1362), ("utils/identifiable.mli", 27, 1352, 1397), 0), 0, Tag1 ("Stdlib__Hashtbl", 32)), 0); (("hash", 3182), ((Tag1 (0, (Tag3 ((("t", 3180)), 0, (0)), 100000000, 0, -526), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -525), 0), 100000000, 0, -524), 0, (("utils/identifiable.mli", 27, 1352, 1362), ("utils/identifiable.mli", 27, 1352, 1397), 0), 0, Tag1 ("Stdlib__Hashtbl", 33)), 0); (("compare", 3183), ((Tag1 (0, (Tag3 ((("t", 3180)), 0, (0)), 100000000, 0, -523), (Tag1 (0, (Tag3 ((("t", 3180)), 0, (0)), 100000000, 0, -522), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -521), 0), 100000000, 0, -520), 0), 100000000, 0, -519), 0, (("utils/identifiable.mli", 28, 1398, 1408), ("utils/identifiable.mli", 28, 1398, 1440), 0), 0, Tag1 ("Stdlib__Map", 1)), 0); (("output", 3184), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -518), (Tag1 (0, (Tag3 ((("t", 3180)), 0, (0)), 100000000, 0, -517), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -516), 0), 100000000, 0, -515), 0), 100000000, 0, -514), 0, (("utils/identifiable.mli", 30, 1442, 1444), ("utils/identifiable.mli", 30, 1442, 1481), 0), 0, Tag1 ("Identifiable", 3)), 0); (("print", 3185), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -513), (Tag1 (0, (Tag3 ((("t", 3180)), 0, (0)), 100000000, 0, -512), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -511), 0), 100000000, 0, -510), 0), 100000000, 0, -509), 0, (("utils/identifiable.mli", 31, 1482, 1484), ("utils/identifiable.mli", 31, 1482, 1525), 0), 0, Tag1 ("Identifiable", 4)), 0)]), 0, (("utils/identifiable.mli", 105, 3648, 3650), ("utils/identifiable.mli", 105, 3648, 3682), 0), Tag1 ("Identifiable", 51)), 0, 0); (("equal", 3172), ((Tag1 (0, (Tag3 (Tag1 ((("T", 3171)), "t"), 0, (0)), 100000000, 0, -507), (Tag1 (0, (Tag3 (Tag1 ((("T", 3171)), "t"), 0, (0)), 100000000, 0, -506), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -505), 0), 100000000, 0, -504), 0), 100000000, 0, -503), 0, (("utils/identifiable.mli", 106, 3683, 3693), ("utils/identifiable.mli", 106, 3683, 3717), 0), 0, Tag1 ("Stdlib__Hashtbl", 32)), 0); (("hash", 3173), ((Tag1 (0, (Tag3 (Tag1 ((("T", 3171)), "t"), 0, (0)), 100000000, 0, -502), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -501), 0), 100000000, 0, -500), 0, (("utils/identifiable.mli", 106, 3683, 3693), ("utils/identifiable.mli", 106, 3683, 3717), 0), 0, Tag1 ("Stdlib__Hashtbl", 33)), 0); (("compare", 3174), ((Tag1 (0, (Tag3 (Tag1 ((("T", 3171)), "t"), 0, (0)), 100000000, 0, -499), (Tag1 (0, (Tag3 (Tag1 ((("T", 3171)), "t"), 0, (0)), 100000000, 0, -498), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -497), 0), 100000000, 0, -496), 0), 100000000, 0, -495), 0, (("utils/identifiable.mli", 106, 3683, 3693), ("utils/identifiable.mli", 106, 3683, 3717), 0), 0, Tag1 ("Stdlib__Map", 1)), 0); (("output", 3175), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -494), (Tag1 (0, (Tag3 (Tag1 ((("T", 3171)), "t"), 0, (0)), 100000000, 0, -493), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -492), 0), 100000000, 0, -491), 0), 100000000, 0, -490), 0, (("utils/identifiable.mli", 106, 3683, 3693), ("utils/identifiable.mli", 106, 3683, 3717), 0), 0, Tag1 ("Identifiable", 3)), 0); (("print", 3176), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -489), (Tag1 (0, (Tag3 (Tag1 ((("T", 3171)), "t"), 0, (0)), 100000000, 0, -488), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -487), 0), 100000000, 0, -486), 0), 100000000, 0, -485), 0, (("utils/identifiable.mli", 106, 3683, 3693), ("utils/identifiable.mli", 106, 3683, 3717), 0), 0, Tag1 ("Identifiable", 4)), 0); Tag3 (("Set", 3177), 0, (Tag1 ([Tag1 (("elt", 3186), (0, 0, 0, 1, ((Tag3 (Tag1 ((("T", 3171)), "t"), 0, (0)), 100000000, 0, -773)), 0, 0, 0, 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, 0, 0, Tag1 ("Identifiable", 11)), 1, 0); Tag1 (("t", 3187), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag2 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Set"), "Make"), (("T", 3171))), "t"), 0, (0)), 100000000, 0, -772)), 0, 0, 0, 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, 0, 0, Tag1 ("Identifiable", 12)), 1, 0); (("empty", 3188), ((Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -771), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Stdlib__Set", 5)), 0); (("add", 3189), ((Tag1 (0, (Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -770), (Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -769), (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -768), 0), 100000000, 0, -767), 0), 100000000, 0, -766), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Stdlib__Set", 6)), 0); (("singleton", 3190), ((Tag1 (0, (Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -765), (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -764), 0), 100000000, 0, -763), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Stdlib__Set", 7)), 0); (("remove", 3191), ((Tag1 (0, (Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -762), (Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -761), (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -760), 0), 100000000, 0, -759), 0), 100000000, 0, -758), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Stdlib__Set", 8)), 0); (("union", 3192), ((Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -757), (Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -756), (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -755), 0), 100000000, 0, -754), 0), 100000000, 0, -753), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Stdlib__Set", 9)), 0); (("inter", 3193), ((Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -752), (Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -751), (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -750), 0), 100000000, 0, -749), 0), 100000000, 0, -748), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Stdlib__Set", 10)), 0); (("disjoint", 3194), ((Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -747), (Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -746), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -745), 0), 100000000, 0, -744), 0), 100000000, 0, -743), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Stdlib__Set", 11)), 0); (("diff", 3195), ((Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -742), (Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -741), (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -740), 0), 100000000, 0, -739), 0), 100000000, 0, -738), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Stdlib__Set", 12)), 0); (("cardinal", 3196), ((Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -737), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -736), 0), 100000000, 0, -735), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Stdlib__Set", 13)), 0); (("elements", 3197), ((Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -734), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -733)], (0)), 100000000, 0, -732), 0), 100000000, 0, -731), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Stdlib__Set", 14)), 0); (("min_elt", 3198), ((Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -730), (Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -729), 0), 100000000, 0, -728), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Stdlib__Set", 15)), 0); (("min_elt_opt", 3199), ((Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -727), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -726)], (0)), 100000000, 0, -725), 0), 100000000, 0, -724), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Stdlib__Set", 16)), 0); (("max_elt", 3200), ((Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -723), (Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -722), 0), 100000000, 0, -721), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Stdlib__Set", 17)), 0); (("max_elt_opt", 3201), ((Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -720), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -719)], (0)), 100000000, 0, -718), 0), 100000000, 0, -717), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Stdlib__Set", 18)), 0); (("choose", 3202), ((Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -716), (Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -715), 0), 100000000, 0, -714), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Stdlib__Set", 19)), 0); (("choose_opt", 3203), ((Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -713), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -712)], (0)), 100000000, 0, -711), 0), 100000000, 0, -710), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Stdlib__Set", 20)), 0); (("find", 3204), ((Tag1 (0, (Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -709), (Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -708), (Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -707), 0), 100000000, 0, -706), 0), 100000000, 0, -705), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Stdlib__Set", 21)), 0); (("find_opt", 3205), ((Tag1 (0, (Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -704), (Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -703), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -702)], (0)), 100000000, 0, -701), 0), 100000000, 0, -700), 0), 100000000, 0, -699), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Stdlib__Set", 22)), 0); (("find_first", 3206), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -698), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -697), 0), 100000000, 0, -696), (Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -695), (Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -694), 0), 100000000, 0, -693), 0), 100000000, 0, -692), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Stdlib__Set", 23)), 0); (("find_first_opt", 3207), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -691), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -690), 0), 100000000, 0, -689), (Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -688), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -687)], (0)), 100000000, 0, -686), 0), 100000000, 0, -685), 0), 100000000, 0, -684), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Stdlib__Set", 24)), 0); (("find_last", 3208), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -683), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -682), 0), 100000000, 0, -681), (Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -680), (Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -679), 0), 100000000, 0, -678), 0), 100000000, 0, -677), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Stdlib__Set", 25)), 0); (("find_last_opt", 3209), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -676), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -675), 0), 100000000, 0, -674), (Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -673), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -672)], (0)), 100000000, 0, -671), 0), 100000000, 0, -670), 0), 100000000, 0, -669), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Stdlib__Set", 26)), 0); (("iter", 3210), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -668), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -667), 0), 100000000, 0, -666), (Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -665), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -664), 0), 100000000, 0, -663), 0), 100000000, 0, -662), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Stdlib__Set", 27)), 0); (("fold", 3211), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -661), (Tag1 (0, ((("acc")), 100000000, 0, -657), ((("acc")), 100000000, 0, -657), 0), 100000000, 0, -660), 0), 100000000, 0, -659), (Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -658), (Tag1 (0, ((("acc")), 100000000, 0, -657), ((("acc")), 100000000, 0, -657), 0), 100000000, 0, -656), 0), 100000000, 0, -655), 0), 100000000, 0, -654), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Stdlib__Set", 28)), 0); (("filter", 3212), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -653), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -652), 0), 100000000, 0, -651), (Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -650), (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -649), 0), 100000000, 0, -648), 0), 100000000, 0, -647), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Stdlib__Set", 30)), 0); (("filter_map", 3213), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -646), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -645)], (0)), 100000000, 0, -644), 0), 100000000, 0, -643), (Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -642), (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -641), 0), 100000000, 0, -640), 0), 100000000, 0, -639), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Stdlib__Set", 31)), 0); (("partition", 3214), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -638), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -637), 0), 100000000, 0, -636), (Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -635), (Tag2 ([(Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -633); (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -634)]), 100000000, 0, -632), 0), 100000000, 0, -631), 0), 100000000, 0, -630), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Stdlib__Set", 32)), 0); (("split", 3215), ((Tag1 (0, (Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -629), (Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -628), (Tag2 ([(Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -625); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -626); (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -627)]), 100000000, 0, -624), 0), 100000000, 0, -623), 0), 100000000, 0, -622), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Stdlib__Set", 33)), 0); (("is_empty", 3216), ((Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -621), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -620), 0), 100000000, 0, -619), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Stdlib__Set", 34)), 0); (("mem", 3217), ((Tag1 (0, (Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -618), (Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -617), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -616), 0), 100000000, 0, -615), 0), 100000000, 0, -614), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Stdlib__Set", 35)), 0); (("equal", 3218), ((Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -613), (Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -612), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -611), 0), 100000000, 0, -610), 0), 100000000, 0, -609), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Stdlib__Set", 36)), 0); (("compare", 3219), ((Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -608), (Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -607), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -606), 0), 100000000, 0, -605), 0), 100000000, 0, -604), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Stdlib__Set", 37)), 0); (("subset", 3220), ((Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -603), (Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -602), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -601), 0), 100000000, 0, -600), 0), 100000000, 0, -599), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Stdlib__Set", 38)), 0); (("for_all", 3221), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -598), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -597), 0), 100000000, 0, -596), (Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -595), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -594), 0), 100000000, 0, -593), 0), 100000000, 0, -592), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Stdlib__Set", 39)), 0); (("exists", 3222), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -591), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -590), 0), 100000000, 0, -589), (Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -588), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -587), 0), 100000000, 0, -586), 0), 100000000, 0, -585), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Stdlib__Set", 40)), 0); (("to_list", 3223), ((Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -584), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -583)], (0)), 100000000, 0, -582), 0), 100000000, 0, -581), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Stdlib__Set", 41)), 0); (("to_seq_from", 3224), ((Tag1 (0, (Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -580), (Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -579), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -578)], (0)), 100000000, 0, -577), 0), 100000000, 0, -576), 0), 100000000, 0, -575), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Stdlib__Set", 43)), 0); (("to_seq", 3225), ((Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -574), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -573)], (0)), 100000000, 0, -572), 0), 100000000, 0, -571), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Stdlib__Set", 44)), 0); (("to_rev_seq", 3226), ((Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -570), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -569)], (0)), 100000000, 0, -568), 0), 100000000, 0, -567), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Stdlib__Set", 45)), 0); (("add_seq", 3227), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -566)], (0)), 100000000, 0, -565), (Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -564), (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -563), 0), 100000000, 0, -562), 0), 100000000, 0, -561), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Stdlib__Set", 46)), 0); (("of_seq", 3228), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -560)], (0)), 100000000, 0, -559), (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -558), 0), 100000000, 0, -557), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Stdlib__Set", 47)), 0); (("output", 3229), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -556), (Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -555), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -554), 0), 100000000, 0, -553), 0), 100000000, 0, -552), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Identifiable", 13)), 0); (("print", 3230), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -551), (Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -550), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -549), 0), 100000000, 0, -548), 0), 100000000, 0, -547), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Identifiable", 14)), 0); (("to_string", 3231), ((Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -546), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -545), 0), 100000000, 0, -544), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Identifiable", 15)), 0); (("of_list", 3232), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -543)], (0)), 100000000, 0, -542), (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -541), 0), 100000000, 0, -540), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Identifiable", 16)), 0); (("map", 3233), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -539), (Tag3 ((("elt", 3186)), 0, (0)), 100000000, 0, -538), 0), 100000000, 0, -537), (Tag1 (0, (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -536), (Tag3 ((("t", 3187)), 0, (0)), 100000000, 0, -535), 0), 100000000, 0, -534), 0), 100000000, 0, -533), 0, (("utils/identifiable.mli", 108, 3719, 3734), ("utils/identifiable.mli", 108, 3719, 3756), 0), 0, Tag1 ("Identifiable", 17)), 0)]), 0, (("utils/identifiable.mli", 108, 3719, 3721), ("utils/identifiable.mli", 108, 3719, 3756), 0), Tag1 ("Identifiable", 53)), 0, 0); Tag3 (("Map", 3178), 0, (Tag1 ([Tag1 (("key", 3234), (0, 0, 0, 1, ((Tag3 (Tag1 ((("T", 3171)), "t"), 0, (0)), 100000000, 0, -1191)), 0, 0, 0, 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, 0, 0, Tag1 ("Identifiable", 20)), 1, 0); Tag1 (("t", 3235), ([((("a")), 100000000, 0, -1190)], 1, 0, 1, ((Tag3 (Tag1 (Tag2 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Map"), "Make"), (("T", 3171))), "t"), [((("a")), 100000000, 0, -1190)], (0)), 100000000, 0, -1189)), [9], [2], 0, 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, 0, 0, Tag1 ("Identifiable", 21)), 1, 0); (("empty", 3236), ((Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -1188)], (0)), 100000000, 0, -1187), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 5)), 0); (("add", 3237), ((Tag1 (0, (Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -1186), (Tag1 (0, ((("a")), 100000000, 0, -1184), (Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -1184)], (0)), 100000000, 0, -1185), (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -1184)], (0)), 100000000, 0, -1183), 0), 100000000, 0, -1182), 0), 100000000, 0, -1181), 0), 100000000, 0, -1180), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 6)), 0); (("add_to_list", 3238), ((Tag1 (0, (Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -1179), (Tag1 (0, ((("a")), 100000000, 0, -1176), (Tag1 (0, (Tag3 ((("t", 3235)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -1176)], (0)), 100000000, 0, -1178)], (0)), 100000000, 0, -1177), (Tag3 ((("t", 3235)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -1176)], (0)), 100000000, 0, -1175)], (0)), 100000000, 0, -1174), 0), 100000000, 0, -1173), 0), 100000000, 0, -1172), 0), 100000000, 0, -1171), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 7)), 0); (("update", 3239), ((Tag1 (0, (Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -1170), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1165)], (0)), 100000000, 0, -1169), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1165)], (0)), 100000000, 0, -1168), 0), 100000000, 0, -1167), (Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -1165)], (0)), 100000000, 0, -1166), (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -1165)], (0)), 100000000, 0, -1164), 0), 100000000, 0, -1163), 0), 100000000, 0, -1162), 0), 100000000, 0, -1161), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 8)), 0); (("singleton", 3240), ((Tag1 (0, (Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -1160), (Tag1 (0, ((("a")), 100000000, 0, -1159), (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -1159)], (0)), 100000000, 0, -1158), 0), 100000000, 0, -1157), 0), 100000000, 0, -1156), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 9)), 0); (("remove", 3241), ((Tag1 (0, (Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -1155), (Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -1153)], (0)), 100000000, 0, -1154), (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -1153)], (0)), 100000000, 0, -1152), 0), 100000000, 0, -1151), 0), 100000000, 0, -1150), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 10)), 0); (("merge", 3242), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -1149), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1142)], (0)), 100000000, 0, -1148), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -1140)], (0)), 100000000, 0, -1147), (Tag3 ((Tag3 ("option", 10)), [((("c")), 100000000, 0, -1138)], (0)), 100000000, 0, -1146), 0), 100000000, 0, -1145), 0), 100000000, 0, -1144), 0), 100000000, 0, -1143), (Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -1142)], (0)), 100000000, 0, -1141), (Tag1 (0, (Tag3 ((("t", 3235)), [((("b")), 100000000, 0, -1140)], (0)), 100000000, 0, -1139), (Tag3 ((("t", 3235)), [((("c")), 100000000, 0, -1138)], (0)), 100000000, 0, -1137), 0), 100000000, 0, -1136), 0), 100000000, 0, -1135), 0), 100000000, 0, -1134), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 11)), 0); (("union", 3243), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -1133), (Tag1 (0, ((("a")), 100000000, 0, -1126), (Tag1 (0, ((("a")), 100000000, 0, -1126), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1126)], (0)), 100000000, 0, -1132), 0), 100000000, 0, -1131), 0), 100000000, 0, -1130), 0), 100000000, 0, -1129), (Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -1126)], (0)), 100000000, 0, -1128), (Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -1126)], (0)), 100000000, 0, -1127), (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -1126)], (0)), 100000000, 0, -1125), 0), 100000000, 0, -1124), 0), 100000000, 0, -1123), 0), 100000000, 0, -1122), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 12)), 0); (("cardinal", 3244), ((Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -1121)], (0)), 100000000, 0, -1120), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1119), 0), 100000000, 0, -1118), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 13)), 0); (("bindings", 3245), ((Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -1116)], (0)), 100000000, 0, -1117), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -1115); ((("a")), 100000000, 0, -1116)]), 100000000, 0, -1114)], (0)), 100000000, 0, -1113), 0), 100000000, 0, -1112), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 14)), 0); (("min_binding", 3246), ((Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -1110)], (0)), 100000000, 0, -1111), (Tag2 ([(Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -1109); ((("a")), 100000000, 0, -1110)]), 100000000, 0, -1108), 0), 100000000, 0, -1107), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 15)), 0); (("min_binding_opt", 3247), ((Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -1105)], (0)), 100000000, 0, -1106), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -1104); ((("a")), 100000000, 0, -1105)]), 100000000, 0, -1103)], (0)), 100000000, 0, -1102), 0), 100000000, 0, -1101), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 16)), 0); (("max_binding", 3248), ((Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -1099)], (0)), 100000000, 0, -1100), (Tag2 ([(Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -1098); ((("a")), 100000000, 0, -1099)]), 100000000, 0, -1097), 0), 100000000, 0, -1096), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 17)), 0); (("max_binding_opt", 3249), ((Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -1094)], (0)), 100000000, 0, -1095), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -1093); ((("a")), 100000000, 0, -1094)]), 100000000, 0, -1092)], (0)), 100000000, 0, -1091), 0), 100000000, 0, -1090), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 18)), 0); (("choose", 3250), ((Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -1088)], (0)), 100000000, 0, -1089), (Tag2 ([(Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -1087); ((("a")), 100000000, 0, -1088)]), 100000000, 0, -1086), 0), 100000000, 0, -1085), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 19)), 0); (("choose_opt", 3251), ((Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -1083)], (0)), 100000000, 0, -1084), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -1082); ((("a")), 100000000, 0, -1083)]), 100000000, 0, -1081)], (0)), 100000000, 0, -1080), 0), 100000000, 0, -1079), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 20)), 0); (("find", 3252), ((Tag1 (0, (Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -1078), (Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -1076)], (0)), 100000000, 0, -1077), ((("a")), 100000000, 0, -1076), 0), 100000000, 0, -1075), 0), 100000000, 0, -1074), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 21)), 0); (("find_opt", 3253), ((Tag1 (0, (Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -1073), (Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -1071)], (0)), 100000000, 0, -1072), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1071)], (0)), 100000000, 0, -1070), 0), 100000000, 0, -1069), 0), 100000000, 0, -1068), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 22)), 0); (("find_first", 3254), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -1067), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1066), 0), 100000000, 0, -1065), (Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -1063)], (0)), 100000000, 0, -1064), (Tag2 ([(Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -1062); ((("a")), 100000000, 0, -1063)]), 100000000, 0, -1061), 0), 100000000, 0, -1060), 0), 100000000, 0, -1059), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 23)), 0); (("find_first_opt", 3255), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -1058), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1057), 0), 100000000, 0, -1056), (Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -1054)], (0)), 100000000, 0, -1055), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -1053); ((("a")), 100000000, 0, -1054)]), 100000000, 0, -1052)], (0)), 100000000, 0, -1051), 0), 100000000, 0, -1050), 0), 100000000, 0, -1049), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 24)), 0); (("find_last", 3256), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -1048), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1047), 0), 100000000, 0, -1046), (Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -1044)], (0)), 100000000, 0, -1045), (Tag2 ([(Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -1043); ((("a")), 100000000, 0, -1044)]), 100000000, 0, -1042), 0), 100000000, 0, -1041), 0), 100000000, 0, -1040), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 25)), 0); (("find_last_opt", 3257), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -1039), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1038), 0), 100000000, 0, -1037), (Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -1035)], (0)), 100000000, 0, -1036), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -1034); ((("a")), 100000000, 0, -1035)]), 100000000, 0, -1033)], (0)), 100000000, 0, -1032), 0), 100000000, 0, -1031), 0), 100000000, 0, -1030), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 26)), 0); (("iter", 3258), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -1029), (Tag1 (0, ((("a")), 100000000, 0, -1025), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1028), 0), 100000000, 0, -1027), 0), 100000000, 0, -1026), (Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -1025)], (0)), 100000000, 0, -1024), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1023), 0), 100000000, 0, -1022), 0), 100000000, 0, -1021), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 27)), 0); (("fold", 3259), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -1020), (Tag1 (0, ((("a")), 100000000, 0, -1016), (Tag1 (0, ((("acc")), 100000000, 0, -1014), ((("acc")), 100000000, 0, -1014), 0), 100000000, 0, -1019), 0), 100000000, 0, -1018), 0), 100000000, 0, -1017), (Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -1016)], (0)), 100000000, 0, -1015), (Tag1 (0, ((("acc")), 100000000, 0, -1014), ((("acc")), 100000000, 0, -1014), 0), 100000000, 0, -1013), 0), 100000000, 0, -1012), 0), 100000000, 0, -1011), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 28)), 0); (("map", 3260), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -1009), ((("b")), 100000000, 0, -1007), 0), 100000000, 0, -1010), (Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -1009)], (0)), 100000000, 0, -1008), (Tag3 ((("t", 3235)), [((("b")), 100000000, 0, -1007)], (0)), 100000000, 0, -1006), 0), 100000000, 0, -1005), 0), 100000000, 0, -1004), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 29)), 0); (("mapi", 3261), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -1003), (Tag1 (0, ((("a")), 100000000, 0, -1000), ((("b")), 100000000, 0, -998), 0), 100000000, 0, -1002), 0), 100000000, 0, -1001), (Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -1000)], (0)), 100000000, 0, -999), (Tag3 ((("t", 3235)), [((("b")), 100000000, 0, -998)], (0)), 100000000, 0, -997), 0), 100000000, 0, -996), 0), 100000000, 0, -995), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 30)), 0); (("filter", 3262), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -994), (Tag1 (0, ((("a")), 100000000, 0, -989), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -993), 0), 100000000, 0, -992), 0), 100000000, 0, -991), (Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -989)], (0)), 100000000, 0, -990), (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -989)], (0)), 100000000, 0, -988), 0), 100000000, 0, -987), 0), 100000000, 0, -986), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 31)), 0); (("filter_map", 3263), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -985), (Tag1 (0, ((("a")), 100000000, 0, -981), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -979)], (0)), 100000000, 0, -984), 0), 100000000, 0, -983), 0), 100000000, 0, -982), (Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -981)], (0)), 100000000, 0, -980), (Tag3 ((("t", 3235)), [((("b")), 100000000, 0, -979)], (0)), 100000000, 0, -978), 0), 100000000, 0, -977), 0), 100000000, 0, -976), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 32)), 0); (("partition", 3264), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -975), (Tag1 (0, ((("a")), 100000000, 0, -969), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -974), 0), 100000000, 0, -973), 0), 100000000, 0, -972), (Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -969)], (0)), 100000000, 0, -971), (Tag2 ([(Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -969)], (0)), 100000000, 0, -968); (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -969)], (0)), 100000000, 0, -970)]), 100000000, 0, -967), 0), 100000000, 0, -966), 0), 100000000, 0, -965), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 33)), 0); (("split", 3265), ((Tag1 (0, (Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -964), (Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -960)], (0)), 100000000, 0, -963), (Tag2 ([(Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -960)], (0)), 100000000, 0, -959); (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -960)], (0)), 100000000, 0, -961); (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -960)], (0)), 100000000, 0, -962)]), 100000000, 0, -958), 0), 100000000, 0, -957), 0), 100000000, 0, -956), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 34)), 0); (("is_empty", 3266), ((Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -955)], (0)), 100000000, 0, -954), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -953), 0), 100000000, 0, -952), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 35)), 0); (("mem", 3267), ((Tag1 (0, (Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -951), (Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -950)], (0)), 100000000, 0, -949), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -948), 0), 100000000, 0, -947), 0), 100000000, 0, -946), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 36)), 0); (("equal", 3268), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -941), (Tag1 (0, ((("a")), 100000000, 0, -941), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -945), 0), 100000000, 0, -944), 0), 100000000, 0, -943), (Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -941)], (0)), 100000000, 0, -942), (Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -941)], (0)), 100000000, 0, -940), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -939), 0), 100000000, 0, -938), 0), 100000000, 0, -937), 0), 100000000, 0, -936), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 37)), 0); (("compare", 3269), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -931), (Tag1 (0, ((("a")), 100000000, 0, -931), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -935), 0), 100000000, 0, -934), 0), 100000000, 0, -933), (Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -931)], (0)), 100000000, 0, -932), (Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -931)], (0)), 100000000, 0, -930), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -929), 0), 100000000, 0, -928), 0), 100000000, 0, -927), 0), 100000000, 0, -926), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 38)), 0); (("for_all", 3270), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -925), (Tag1 (0, ((("a")), 100000000, 0, -921), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -924), 0), 100000000, 0, -923), 0), 100000000, 0, -922), (Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -921)], (0)), 100000000, 0, -920), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -919), 0), 100000000, 0, -918), 0), 100000000, 0, -917), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 39)), 0); (("exists", 3271), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -916), (Tag1 (0, ((("a")), 100000000, 0, -912), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -915), 0), 100000000, 0, -914), 0), 100000000, 0, -913), (Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -912)], (0)), 100000000, 0, -911), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -910), 0), 100000000, 0, -909), 0), 100000000, 0, -908), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 40)), 0); (("to_list", 3272), ((Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -906)], (0)), 100000000, 0, -907), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -905); ((("a")), 100000000, 0, -906)]), 100000000, 0, -904)], (0)), 100000000, 0, -903), 0), 100000000, 0, -902), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 41)), 0); (("to_seq", 3273), ((Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -900)], (0)), 100000000, 0, -901), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -899); ((("a")), 100000000, 0, -900)]), 100000000, 0, -898)], (0)), 100000000, 0, -897), 0), 100000000, 0, -896), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 43)), 0); (("to_rev_seq", 3274), ((Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -894)], (0)), 100000000, 0, -895), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -893); ((("a")), 100000000, 0, -894)]), 100000000, 0, -892)], (0)), 100000000, 0, -891), 0), 100000000, 0, -890), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 44)), 0); (("to_seq_from", 3275), ((Tag1 (0, (Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -889), (Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -887)], (0)), 100000000, 0, -888), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -886); ((("a")), 100000000, 0, -887)]), 100000000, 0, -885)], (0)), 100000000, 0, -884), 0), 100000000, 0, -883), 0), 100000000, 0, -882), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 45)), 0); (("add_seq", 3276), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -881); ((("a")), 100000000, 0, -877)]), 100000000, 0, -880)], (0)), 100000000, 0, -879), (Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -877)], (0)), 100000000, 0, -878), (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -877)], (0)), 100000000, 0, -876), 0), 100000000, 0, -875), 0), 100000000, 0, -874), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 46)), 0); (("of_seq", 3277), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -873); ((("a")), 100000000, 0, -870)]), 100000000, 0, -872)], (0)), 100000000, 0, -871), (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -870)], (0)), 100000000, 0, -869), 0), 100000000, 0, -868), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Stdlib__Map", 47)), 0); (("of_list", 3278), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -867); ((("a")), 100000000, 0, -864)]), 100000000, 0, -866)], (0)), 100000000, 0, -865), (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -864)], (0)), 100000000, 0, -863), 0), 100000000, 0, -862), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Identifiable", 22)), 0); (("disjoint_union", 3279), ((Tag1 (Tag1 ("eq"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, ((("a")), 100000000, 0, -850), (Tag1 (0, ((("a")), 100000000, 0, -850), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -861), 0), 100000000, 0, -860), 0), 100000000, 0, -859)], (0)), 100000000, 0, -858), (Tag1 (Tag1 ("print"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -857), (Tag1 (0, ((("a")), 100000000, 0, -850), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -856), 0), 100000000, 0, -855), 0), 100000000, 0, -854)], (0)), 100000000, 0, -853), (Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -850)], (0)), 100000000, 0, -852), (Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -850)], (0)), 100000000, 0, -851), (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -850)], (0)), 100000000, 0, -849), 0), 100000000, 0, -848), 0), 100000000, 0, -847), 0), 100000000, 0, -846), 0), 100000000, 0, -845), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Identifiable", 23)), 0); (("union_right", 3280), ((Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -842)], (0)), 100000000, 0, -844), (Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -842)], (0)), 100000000, 0, -843), (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -842)], (0)), 100000000, 0, -841), 0), 100000000, 0, -840), 0), 100000000, 0, -839), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Identifiable", 24)), 0); (("union_left", 3281), ((Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -836)], (0)), 100000000, 0, -838), (Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -836)], (0)), 100000000, 0, -837), (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -836)], (0)), 100000000, 0, -835), 0), 100000000, 0, -834), 0), 100000000, 0, -833), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Identifiable", 25)), 0); (("union_merge", 3282), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -828), (Tag1 (0, ((("a")), 100000000, 0, -828), ((("a")), 100000000, 0, -828), 0), 100000000, 0, -832), 0), 100000000, 0, -831), (Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -828)], (0)), 100000000, 0, -830), (Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -828)], (0)), 100000000, 0, -829), (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -828)], (0)), 100000000, 0, -827), 0), 100000000, 0, -826), 0), 100000000, 0, -825), 0), 100000000, 0, -824), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Identifiable", 26)), 0); (("rename", 3283), ((Tag1 (0, (Tag3 ((("t", 3235)), [(Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -823)], (0)), 100000000, 0, -822), (Tag1 (0, (Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -821), (Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -820), 0), 100000000, 0, -819), 0), 100000000, 0, -818), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Identifiable", 27)), 0); (("map_keys", 3284), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -817), (Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -816), 0), 100000000, 0, -815), (Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -813)], (0)), 100000000, 0, -814), (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -813)], (0)), 100000000, 0, -812), 0), 100000000, 0, -811), 0), 100000000, 0, -810), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Identifiable", 28)), 0); (("keys", 3285), ((Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -809)], (0)), 100000000, 0, -808), (Tag3 (Tag1 (Tag2 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Set"), "Make"), (("T", 3171))), "t"), 0, (0)), 100000000, 0, -807), 0), 100000000, 0, -806), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Identifiable", 29)), 0); (("data", 3286), ((Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -804)], (0)), 100000000, 0, -805), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -804)], (0)), 100000000, 0, -803), 0), 100000000, 0, -802), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Identifiable", 30)), 0); (("of_set", 3287), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -801), ((("a")), 100000000, 0, -798), 0), 100000000, 0, -800), (Tag1 (0, (Tag3 (Tag1 (Tag2 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Set"), "Make"), (("T", 3171))), "t"), 0, (0)), 100000000, 0, -799), (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -798)], (0)), 100000000, 0, -797), 0), 100000000, 0, -796), 0), 100000000, 0, -795), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Identifiable", 31)), 0); (("transpose_keys_and_data", 3288), ((Tag1 (0, (Tag3 ((("t", 3235)), [(Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -794)], (0)), 100000000, 0, -793), (Tag3 ((("t", 3235)), [(Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -792)], (0)), 100000000, 0, -791), 0), 100000000, 0, -790), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Identifiable", 32)), 0); (("transpose_keys_and_data_set", 3289), ((Tag1 (0, (Tag3 ((("t", 3235)), [(Tag3 ((("key", 3234)), 0, (0)), 100000000, 0, -789)], (0)), 100000000, 0, -788), (Tag3 ((("t", 3235)), [(Tag3 (Tag1 (Tag2 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Set"), "Make"), (("T", 3171))), "t"), 0, (0)), 100000000, 0, -787)], (0)), 100000000, 0, -786), 0), 100000000, 0, -785), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Identifiable", 33)), 0); (("print", 3290), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -784), (Tag1 (0, ((("a")), 100000000, 0, -779), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -783), 0), 100000000, 0, -782), 0), 100000000, 0, -781), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -780), (Tag1 (0, (Tag3 ((("t", 3235)), [((("a")), 100000000, 0, -779)], (0)), 100000000, 0, -778), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -777), 0), 100000000, 0, -776), 0), 100000000, 0, -775), 0), 100000000, 0, -774), 0, (("utils/identifiable.mli", 109, 3757, 3772), ("utils/identifiable.mli", 109, 3757, 3794), 0), 0, Tag1 ("Identifiable", 34)), 0)]), 0, (("utils/identifiable.mli", 109, 3757, 3759), ("utils/identifiable.mli", 109, 3757, 3794), 0), Tag1 ("Identifiable", 54)), 0, 0); Tag3 (("Tbl", 3179), 0, (Tag1 ([Tag1 (("key", 3291), (0, 0, 0, 1, ((Tag3 (Tag1 ((("T", 3171)), "t"), 0, (0)), 100000000, 0, -1361)), 0, 0, 0, 0, (("utils/identifiable.mli", 110, 3795, 3810), ("utils/identifiable.mli", 110, 3795, 3832), 0), 0, 0, 0, Tag1 ("Identifiable", 40)), 1, 0); Tag1 (("t", 3292), ([((("a")), 100000000, 0, -1360)], 1, 0, 1, ((Tag3 (Tag1 (Tag2 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Hashtbl"), "Make"), (("T", 3171))), "t"), [((("a")), 100000000, 0, -1360)], (0)), 100000000, 0, -1359)), [15], [2], 0, 0, (("utils/identifiable.mli", 110, 3795, 3810), ("utils/identifiable.mli", 110, 3795, 3832), 0), 0, 0, 0, Tag1 ("Identifiable", 41)), 1, 0); (("create", 3293), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1358), (Tag3 ((("t", 3292)), [((("a")), 100000000, 0, -1357)], (0)), 100000000, 0, -1356), 0), 100000000, 0, -1355), 0, (("utils/identifiable.mli", 110, 3795, 3810), ("utils/identifiable.mli", 110, 3795, 3832), 0), 0, Tag1 ("Stdlib__Hashtbl", 37)), 0); (("clear", 3294), ((Tag1 (0, (Tag3 ((("t", 3292)), [((("a")), 100000000, 0, -1354)], (0)), 100000000, 0, -1353), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1352), 0), 100000000, 0, -1351), 0, (("utils/identifiable.mli", 110, 3795, 3810), ("utils/identifiable.mli", 110, 3795, 3832), 0), 0, Tag1 ("Stdlib__Hashtbl", 38)), 0); (("reset", 3295), ((Tag1 (0, (Tag3 ((("t", 3292)), [((("a")), 100000000, 0, -1350)], (0)), 100000000, 0, -1349), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1348), 0), 100000000, 0, -1347), 0, (("utils/identifiable.mli", 110, 3795, 3810), ("utils/identifiable.mli", 110, 3795, 3832), 0), 0, Tag1 ("Stdlib__Hashtbl", 39)), 0); (("copy", 3296), ((Tag1 (0, (Tag3 ((("t", 3292)), [((("a")), 100000000, 0, -1345)], (0)), 100000000, 0, -1346), (Tag3 ((("t", 3292)), [((("a")), 100000000, 0, -1345)], (0)), 100000000, 0, -1344), 0), 100000000, 0, -1343), 0, (("utils/identifiable.mli", 110, 3795, 3810), ("utils/identifiable.mli", 110, 3795, 3832), 0), 0, Tag1 ("Stdlib__Hashtbl", 40)), 0); (("add", 3297), ((Tag1 (0, (Tag3 ((("t", 3292)), [((("a")), 100000000, 0, -1340)], (0)), 100000000, 0, -1342), (Tag1 (0, (Tag3 ((("key", 3291)), 0, (0)), 100000000, 0, -1341), (Tag1 (0, ((("a")), 100000000, 0, -1340), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1339), 0), 100000000, 0, -1338), 0), 100000000, 0, -1337), 0), 100000000, 0, -1336), 0, (("utils/identifiable.mli", 110, 3795, 3810), ("utils/identifiable.mli", 110, 3795, 3832), 0), 0, Tag1 ("Stdlib__Hashtbl", 41)), 0); (("remove", 3298), ((Tag1 (0, (Tag3 ((("t", 3292)), [((("a")), 100000000, 0, -1335)], (0)), 100000000, 0, -1334), (Tag1 (0, (Tag3 ((("key", 3291)), 0, (0)), 100000000, 0, -1333), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1332), 0), 100000000, 0, -1331), 0), 100000000, 0, -1330), 0, (("utils/identifiable.mli", 110, 3795, 3810), ("utils/identifiable.mli", 110, 3795, 3832), 0), 0, Tag1 ("Stdlib__Hashtbl", 42)), 0); (("find", 3299), ((Tag1 (0, (Tag3 ((("t", 3292)), [((("a")), 100000000, 0, -1327)], (0)), 100000000, 0, -1329), (Tag1 (0, (Tag3 ((("key", 3291)), 0, (0)), 100000000, 0, -1328), ((("a")), 100000000, 0, -1327), 0), 100000000, 0, -1326), 0), 100000000, 0, -1325), 0, (("utils/identifiable.mli", 110, 3795, 3810), ("utils/identifiable.mli", 110, 3795, 3832), 0), 0, Tag1 ("Stdlib__Hashtbl", 43)), 0); (("find_opt", 3300), ((Tag1 (0, (Tag3 ((("t", 3292)), [((("a")), 100000000, 0, -1322)], (0)), 100000000, 0, -1324), (Tag1 (0, (Tag3 ((("key", 3291)), 0, (0)), 100000000, 0, -1323), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1322)], (0)), 100000000, 0, -1321), 0), 100000000, 0, -1320), 0), 100000000, 0, -1319), 0, (("utils/identifiable.mli", 110, 3795, 3810), ("utils/identifiable.mli", 110, 3795, 3832), 0), 0, Tag1 ("Stdlib__Hashtbl", 44)), 0); (("find_all", 3301), ((Tag1 (0, (Tag3 ((("t", 3292)), [((("a")), 100000000, 0, -1316)], (0)), 100000000, 0, -1318), (Tag1 (0, (Tag3 ((("key", 3291)), 0, (0)), 100000000, 0, -1317), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -1316)], (0)), 100000000, 0, -1315), 0), 100000000, 0, -1314), 0), 100000000, 0, -1313), 0, (("utils/identifiable.mli", 110, 3795, 3810), ("utils/identifiable.mli", 110, 3795, 3832), 0), 0, Tag1 ("Stdlib__Hashtbl", 45)), 0); (("replace", 3302), ((Tag1 (0, (Tag3 ((("t", 3292)), [((("a")), 100000000, 0, -1310)], (0)), 100000000, 0, -1312), (Tag1 (0, (Tag3 ((("key", 3291)), 0, (0)), 100000000, 0, -1311), (Tag1 (0, ((("a")), 100000000, 0, -1310), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1309), 0), 100000000, 0, -1308), 0), 100000000, 0, -1307), 0), 100000000, 0, -1306), 0, (("utils/identifiable.mli", 110, 3795, 3810), ("utils/identifiable.mli", 110, 3795, 3832), 0), 0, Tag1 ("Stdlib__Hashtbl", 46)), 0); (("mem", 3303), ((Tag1 (0, (Tag3 ((("t", 3292)), [((("a")), 100000000, 0, -1305)], (0)), 100000000, 0, -1304), (Tag1 (0, (Tag3 ((("key", 3291)), 0, (0)), 100000000, 0, -1303), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1302), 0), 100000000, 0, -1301), 0), 100000000, 0, -1300), 0, (("utils/identifiable.mli", 110, 3795, 3810), ("utils/identifiable.mli", 110, 3795, 3832), 0), 0, Tag1 ("Stdlib__Hashtbl", 47)), 0); (("iter", 3304), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 3291)), 0, (0)), 100000000, 0, -1299), (Tag1 (0, ((("a")), 100000000, 0, -1295), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1298), 0), 100000000, 0, -1297), 0), 100000000, 0, -1296), (Tag1 (0, (Tag3 ((("t", 3292)), [((("a")), 100000000, 0, -1295)], (0)), 100000000, 0, -1294), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1293), 0), 100000000, 0, -1292), 0), 100000000, 0, -1291), 0, (("utils/identifiable.mli", 110, 3795, 3810), ("utils/identifiable.mli", 110, 3795, 3832), 0), 0, Tag1 ("Stdlib__Hashtbl", 48)), 0); (("filter_map_inplace", 3305), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 3291)), 0, (0)), 100000000, 0, -1290), (Tag1 (0, ((("a")), 100000000, 0, -1286), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1286)], (0)), 100000000, 0, -1289), 0), 100000000, 0, -1288), 0), 100000000, 0, -1287), (Tag1 (0, (Tag3 ((("t", 3292)), [((("a")), 100000000, 0, -1286)], (0)), 100000000, 0, -1285), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1284), 0), 100000000, 0, -1283), 0), 100000000, 0, -1282), 0, (("utils/identifiable.mli", 110, 3795, 3810), ("utils/identifiable.mli", 110, 3795, 3832), 0), 0, Tag1 ("Stdlib__Hashtbl", 49)), 0); (("fold", 3306), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 3291)), 0, (0)), 100000000, 0, -1281), (Tag1 (0, ((("a")), 100000000, 0, -1277), (Tag1 (0, ((("acc")), 100000000, 0, -1275), ((("acc")), 100000000, 0, -1275), 0), 100000000, 0, -1280), 0), 100000000, 0, -1279), 0), 100000000, 0, -1278), (Tag1 (0, (Tag3 ((("t", 3292)), [((("a")), 100000000, 0, -1277)], (0)), 100000000, 0, -1276), (Tag1 (0, ((("acc")), 100000000, 0, -1275), ((("acc")), 100000000, 0, -1275), 0), 100000000, 0, -1274), 0), 100000000, 0, -1273), 0), 100000000, 0, -1272), 0, (("utils/identifiable.mli", 110, 3795, 3810), ("utils/identifiable.mli", 110, 3795, 3832), 0), 0, Tag1 ("Stdlib__Hashtbl", 50)), 0); (("length", 3307), ((Tag1 (0, (Tag3 ((("t", 3292)), [((("a")), 100000000, 0, -1271)], (0)), 100000000, 0, -1270), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1269), 0), 100000000, 0, -1268), 0, (("utils/identifiable.mli", 110, 3795, 3810), ("utils/identifiable.mli", 110, 3795, 3832), 0), 0, Tag1 ("Stdlib__Hashtbl", 51)), 0); (("stats", 3308), ((Tag1 (0, (Tag3 ((("t", 3292)), [((("a")), 100000000, 0, -1267)], (0)), 100000000, 0, -1266), (Tag3 (Tag1 ((Tag2 ("Stdlib__Hashtbl")), "statistics"), 0, (0)), 100000000, 0, -1265), 0), 100000000, 0, -1264), 0, (("utils/identifiable.mli", 110, 3795, 3810), ("utils/identifiable.mli", 110, 3795, 3832), 0), 0, Tag1 ("Stdlib__Hashtbl", 52)), 0); (("to_seq", 3309), ((Tag1 (0, (Tag3 ((("t", 3292)), [((("a")), 100000000, 0, -1262)], (0)), 100000000, 0, -1263), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 3291)), 0, (0)), 100000000, 0, -1261); ((("a")), 100000000, 0, -1262)]), 100000000, 0, -1260)], (0)), 100000000, 0, -1259), 0), 100000000, 0, -1258), 0, (("utils/identifiable.mli", 110, 3795, 3810), ("utils/identifiable.mli", 110, 3795, 3832), 0), 0, Tag1 ("Stdlib__Hashtbl", 53)), 0); (("to_seq_keys", 3310), ((Tag1 (0, (Tag3 ((("t", 3292)), [((0), 100000000, 0, -1257)], (0)), 100000000, 0, -1256), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("key", 3291)), 0, (0)), 100000000, 0, -1255)], (0)), 100000000, 0, -1254), 0), 100000000, 0, -1253), 0, (("utils/identifiable.mli", 110, 3795, 3810), ("utils/identifiable.mli", 110, 3795, 3832), 0), 0, Tag1 ("Stdlib__Hashtbl", 54)), 0); (("to_seq_values", 3311), ((Tag1 (0, (Tag3 ((("t", 3292)), [((("a")), 100000000, 0, -1251)], (0)), 100000000, 0, -1252), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [((("a")), 100000000, 0, -1251)], (0)), 100000000, 0, -1250), 0), 100000000, 0, -1249), 0, (("utils/identifiable.mli", 110, 3795, 3810), ("utils/identifiable.mli", 110, 3795, 3832), 0), 0, Tag1 ("Stdlib__Hashtbl", 55)), 0); (("add_seq", 3312), ((Tag1 (0, (Tag3 ((("t", 3292)), [((("a")), 100000000, 0, -1247)], (0)), 100000000, 0, -1248), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 3291)), 0, (0)), 100000000, 0, -1246); ((("a")), 100000000, 0, -1247)]), 100000000, 0, -1245)], (0)), 100000000, 0, -1244), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1243), 0), 100000000, 0, -1242), 0), 100000000, 0, -1241), 0, (("utils/identifiable.mli", 110, 3795, 3810), ("utils/identifiable.mli", 110, 3795, 3832), 0), 0, Tag1 ("Stdlib__Hashtbl", 56)), 0); (("replace_seq", 3313), ((Tag1 (0, (Tag3 ((("t", 3292)), [((("a")), 100000000, 0, -1239)], (0)), 100000000, 0, -1240), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 3291)), 0, (0)), 100000000, 0, -1238); ((("a")), 100000000, 0, -1239)]), 100000000, 0, -1237)], (0)), 100000000, 0, -1236), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1235), 0), 100000000, 0, -1234), 0), 100000000, 0, -1233), 0, (("utils/identifiable.mli", 110, 3795, 3810), ("utils/identifiable.mli", 110, 3795, 3832), 0), 0, Tag1 ("Stdlib__Hashtbl", 57)), 0); (("of_seq", 3314), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 3291)), 0, (0)), 100000000, 0, -1232); ((("a")), 100000000, 0, -1229)]), 100000000, 0, -1231)], (0)), 100000000, 0, -1230), (Tag3 ((("t", 3292)), [((("a")), 100000000, 0, -1229)], (0)), 100000000, 0, -1228), 0), 100000000, 0, -1227), 0, (("utils/identifiable.mli", 110, 3795, 3810), ("utils/identifiable.mli", 110, 3795, 3832), 0), 0, Tag1 ("Stdlib__Hashtbl", 58)), 0); (("to_list", 3315), ((Tag1 (0, (Tag3 ((("t", 3292)), [((("a")), 100000000, 0, -1225)], (0)), 100000000, 0, -1226), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((("T", 3171)), "t"), 0, (0)), 100000000, 0, -1224); ((("a")), 100000000, 0, -1225)]), 100000000, 0, -1223)], (0)), 100000000, 0, -1222), 0), 100000000, 0, -1221), 0, (("utils/identifiable.mli", 110, 3795, 3810), ("utils/identifiable.mli", 110, 3795, 3832), 0), 0, Tag1 ("Identifiable", 42)), 0); (("of_list", 3316), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((("T", 3171)), "t"), 0, (0)), 100000000, 0, -1220); ((("a")), 100000000, 0, -1217)]), 100000000, 0, -1219)], (0)), 100000000, 0, -1218), (Tag3 ((("t", 3292)), [((("a")), 100000000, 0, -1217)], (0)), 100000000, 0, -1216), 0), 100000000, 0, -1215), 0, (("utils/identifiable.mli", 110, 3795, 3810), ("utils/identifiable.mli", 110, 3795, 3832), 0), 0, Tag1 ("Identifiable", 43)), 0); (("to_map", 3317), ((Tag1 (0, (Tag3 ((("t", 3292)), [((("a")), 100000000, 0, -1213)], (0)), 100000000, 0, -1214), (Tag3 (Tag1 (Tag2 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Map"), "Make"), (("T", 3171))), "t"), [((("a")), 100000000, 0, -1213)], (0)), 100000000, 0, -1212), 0), 100000000, 0, -1211), 0, (("utils/identifiable.mli", 110, 3795, 3810), ("utils/identifiable.mli", 110, 3795, 3832), 0), 0, Tag1 ("Identifiable", 44)), 0); (("of_map", 3318), ((Tag1 (0, (Tag3 (Tag1 (Tag2 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Map"), "Make"), (("T", 3171))), "t"), [((("a")), 100000000, 0, -1209)], (0)), 100000000, 0, -1210), (Tag3 ((("t", 3292)), [((("a")), 100000000, 0, -1209)], (0)), 100000000, 0, -1208), 0), 100000000, 0, -1207), 0, (("utils/identifiable.mli", 110, 3795, 3810), ("utils/identifiable.mli", 110, 3795, 3832), 0), 0, Tag1 ("Identifiable", 45)), 0); (("memoize", 3319), ((Tag1 (0, (Tag3 ((("t", 3292)), [((("a")), 100000000, 0, -1202)], (0)), 100000000, 0, -1206), (Tag1 (0, (Tag1 (0, (Tag3 ((("key", 3291)), 0, (0)), 100000000, 0, -1205), ((("a")), 100000000, 0, -1202), 0), 100000000, 0, -1204), (Tag1 (0, (Tag3 ((("key", 3291)), 0, (0)), 100000000, 0, -1203), ((("a")), 100000000, 0, -1202), 0), 100000000, 0, -1201), 0), 100000000, 0, -1200), 0), 100000000, 0, -1199), 0, (("utils/identifiable.mli", 110, 3795, 3810), ("utils/identifiable.mli", 110, 3795, 3832), 0), 0, Tag1 ("Identifiable", 46)), 0); (("map", 3320), ((Tag1 (0, (Tag3 ((("t", 3292)), [((("a")), 100000000, 0, -1197)], (0)), 100000000, 0, -1198), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -1197), ((("b")), 100000000, 0, -1195), 0), 100000000, 0, -1196), (Tag3 ((("t", 3292)), [((("b")), 100000000, 0, -1195)], (0)), 100000000, 0, -1194), 0), 100000000, 0, -1193), 0), 100000000, 0, -1192), 0, (("utils/identifiable.mli", 110, 3795, 3810), ("utils/identifiable.mli", 110, 3795, 3832), 0), 0, Tag1 ("Identifiable", 47)), 0)]), 0, (("utils/identifiable.mli", 110, 3795, 3797), ("utils/identifiable.mli", 110, 3795, 3832), 0), Tag1 ("Identifiable", 55)), 0, 0)]), 0, (("middle_end/flambda/flambda.mli", 372, 17478, 17478), ("middle_end/flambda/flambda.mli", 373, 17511, 17565), 0), Tag1 ("Flambda", 117)), 0, 0); Tag1 (("expr", 3123), (0, 0, 0, 1, ((Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -349)), 0, 0, 0, 0, (("middle_end/flambda/flambda.mli", 375, 17567, 17567), ("middle_end/flambda/flambda.mli", 375, 17567, 17580), 0), 0, 0, 0, Tag1 ("Flambda", 118)), 1, 0); Tag1 (("program_body", 3124), (0, 0, Tag1 ([(("Let_symbol", 2010), ([(Tag3 (Tag1 ((Tag2 ("Symbol")), "t"), 0, (0)), 100000000, 0, -333); (Tag3 ((("constant_defining_value", 3120)), 0, (0)), 100000000, 0, -334); (Tag3 ((("program_body", 3124)), 0, (0)), 100000000, 0, -335)]), 0, (("middle_end/flambda/flambda.mli", 382, 17871, 17873), ("middle_end/flambda/flambda.mli", 382, 17871, 17938), 0), 0, Tag1 ("Flambda", 120)); (("Let_rec_symbol", 2011), ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Symbol")), "t"), 0, (0)), 100000000, 0, -338); (Tag3 ((("constant_defining_value", 3120)), 0, (0)), 100000000, 0, -339)]), 100000000, 0, -337)], (0)), 100000000, 0, -336); (Tag3 ((("program_body", 3124)), 0, (0)), 100000000, 0, -340)]), 0, (("middle_end/flambda/flambda.mli", 384, 18006, 18008), ("middle_end/flambda/flambda.mli", 384, 18006, 18084), 0), 0, Tag1 ("Flambda", 121)); (("Initialize_symbol", 2012), ([(Tag3 (Tag1 ((Tag2 ("Symbol")), "t"), 0, (0)), 100000000, 0, -341); (Tag3 (Tag1 ((Tag2 ("Tag")), "t"), 0, (0)), 100000000, 0, -342); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -344)], (0)), 100000000, 0, -343); (Tag3 ((("program_body", 3124)), 0, (0)), 100000000, 0, -345)]), 0, (("middle_end/flambda/flambda.mli", 403, 18915, 18917), ("middle_end/flambda/flambda.mli", 403, 18915, 18980), 0), 0, Tag1 ("Flambda", 122)); (("Effect", 2013), ([(Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -346); (Tag3 ((("program_body", 3124)), 0, (0)), 100000000, 0, -347)]), 0, (("middle_end/flambda/flambda.mli", 408, 19220, 19222), ("middle_end/flambda/flambda.mli", 408, 19220, 19250), 0), 0, Tag1 ("Flambda", 123)); (("End", 2014), ([(Tag3 (Tag1 ((Tag2 ("Symbol")), "t"), 0, (0)), 100000000, 0, -348)]), 0, (("middle_end/flambda/flambda.mli", 412, 19427, 19429), ("middle_end/flambda/flambda.mli", 412, 19427, 19446), 0), 0, Tag1 ("Flambda", 124))], 0), 1, 0, 0, 0, 0, 0, (("middle_end/flambda/flambda.mli", 381, 17851, 17851), ("middle_end/flambda/flambda.mli", 412, 19427, 19446), 0), 0, 0, 0, Tag1 ("Flambda", 119)), 1, 0); Tag1 (("program", 3125), (0, 0, [[(("imported_symbols", 2016), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Symbol")), "Set"), "t"), 0, (0)), 100000000, 0, -331), (("middle_end/flambda/flambda.mli", 417, 19557, 19559), ("middle_end/flambda/flambda.mli", 417, 19557, 19591), 0), 0, Tag1 ("Flambda", 126)); (("program_body", 2017), 0, (Tag3 ((("program_body", 3124)), 0, (0)), 100000000, 0, -332), (("middle_end/flambda/flambda.mli", 418, 19592, 19594), ("middle_end/flambda/flambda.mli", 418, 19592, 19622), 0), 0, Tag1 ("Flambda", 127))]], 1, 0, 0, 0, 0, 0, (("middle_end/flambda/flambda.mli", 416, 19540, 19540), ("middle_end/flambda/flambda.mli", 419, 19623, 19624), 0), 0, 0, 0, Tag1 ("Flambda", 125)), 1, 0); (("free_variables", 3126), ((Tag1 (Tag1 ("ignore_uses_as_callee"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -330)], (0)), 100000000, 0, -329), (Tag1 (Tag1 ("ignore_uses_as_argument"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -328)], (0)), 100000000, 0, -327), (Tag1 (Tag1 ("ignore_uses_in_project_var"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -326)], (0)), 100000000, 0, -325), (Tag1 (0, (Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -324), (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Set"), "t"), 0, (0)), 100000000, 0, -323), 0), 100000000, 0, -322), 0), 100000000, 0, -321), 0), 100000000, 0, -320), 0), 100000000, 0, -319), 0, (("middle_end/flambda/flambda.mli", 426, 19868, 19868), ("middle_end/flambda/flambda.mli", 431, 20000, 20019), 0), 0, Tag1 ("Flambda", 128)), 0); (("free_variables_named", 3127), ((Tag1 (Tag1 ("ignore_uses_in_project_var"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -318)], (0)), 100000000, 0, -317), (Tag1 (0, (Tag3 ((("named", 3112)), 0, (0)), 100000000, 0, -316), (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Set"), "t"), 0, (0)), 100000000, 0, -315), 0), 100000000, 0, -314), 0), 100000000, 0, -313), 0, (("middle_end/flambda/flambda.mli", 434, 20078, 20078), ("middle_end/flambda/flambda.mli", 437, 20152, 20171), 0), 0, Tag1 ("Flambda", 129)), 0); (("used_variables", 3128), ((Tag1 (Tag1 ("ignore_uses_as_callee"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -312)], (0)), 100000000, 0, -311), (Tag1 (Tag1 ("ignore_uses_as_argument"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -310)], (0)), 100000000, 0, -309), (Tag1 (Tag1 ("ignore_uses_in_project_var"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -308)], (0)), 100000000, 0, -307), (Tag1 (0, (Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -306), (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Set"), "t"), 0, (0)), 100000000, 0, -305), 0), 100000000, 0, -304), 0), 100000000, 0, -303), 0), 100000000, 0, -302), 0), 100000000, 0, -301), 0, (("middle_end/flambda/flambda.mli", 440, 20236, 20236), ("middle_end/flambda/flambda.mli", 445, 20368, 20387), 0), 0, Tag1 ("Flambda", 130)), 0); (("used_variables_named", 3129), ((Tag1 (Tag1 ("ignore_uses_in_project_var"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -300)], (0)), 100000000, 0, -299), (Tag1 (0, (Tag3 ((("named", 3112)), 0, (0)), 100000000, 0, -298), (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Set"), "t"), 0, (0)), 100000000, 0, -297), 0), 100000000, 0, -296), 0), 100000000, 0, -295), 0, (("middle_end/flambda/flambda.mli", 448, 20457, 20457), ("middle_end/flambda/flambda.mli", 451, 20531, 20550), 0), 0, Tag1 ("Flambda", 131)), 0); (("free_symbols", 3130), ((Tag1 (0, (Tag3 ((("expr", 3123)), 0, (0)), 100000000, 0, -294), (Tag3 (Tag1 (Tag1 ((Tag2 ("Symbol")), "Set"), "t"), 0, (0)), 100000000, 0, -293), 0), 100000000, 0, -292), 0, (("middle_end/flambda/flambda.mli", 453, 20552, 20552), ("middle_end/flambda/flambda.mli", 453, 20552, 20591), 0), 0, Tag1 ("Flambda", 132)), 0); (("free_symbols_named", 3131), ((Tag1 (0, (Tag3 ((("named", 3112)), 0, (0)), 100000000, 0, -291), (Tag3 (Tag1 (Tag1 ((Tag2 ("Symbol")), "Set"), "t"), 0, (0)), 100000000, 0, -290), 0), 100000000, 0, -289), 0, (("middle_end/flambda/flambda.mli", 455, 20593, 20593), ("middle_end/flambda/flambda.mli", 455, 20593, 20639), 0), 0, Tag1 ("Flambda", 133)), 0); (("free_symbols_program", 3132), ((Tag1 (0, (Tag3 ((("program", 3125)), 0, (0)), 100000000, 0, -288), (Tag3 (Tag1 (Tag1 ((Tag2 ("Symbol")), "Set"), "t"), 0, (0)), 100000000, 0, -287), 0), 100000000, 0, -286), 0, (("middle_end/flambda/flambda.mli", 457, 20641, 20641), ("middle_end/flambda/flambda.mli", 457, 20641, 20691), 0), 0, Tag1 ("Flambda", 134)), 0); (("fold_lets_option", 3133), ((Tag1 (0, (Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -285), (Tag1 (("init"), ((("a")), 100000000, 0, -276), (Tag1 (("for_defining_expr"), (Tag1 (0, ((("a")), 100000000, 0, -276), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -284), (Tag1 (0, (Tag3 ((("named", 3112)), 0, (0)), 100000000, 0, -283), (Tag2 ([((("a")), 100000000, 0, -276); (Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -281); (Tag3 ((("named", 3112)), 0, (0)), 100000000, 0, -282)]), 100000000, 0, -280), 0), 100000000, 0, -279), 0), 100000000, 0, -278), 0), 100000000, 0, -277), (Tag1 (("for_last_body"), (Tag1 (0, ((("a")), 100000000, 0, -276), (Tag1 (0, (Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -275), (Tag2 ([(Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -274); ((("b")), 100000000, 0, -259)]), 100000000, 0, -273), 0), 100000000, 0, -272), 0), 100000000, 0, -271), (Tag1 (("filter_defining_expr"), (Tag1 (0, ((("b")), 100000000, 0, -259), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -270), (Tag1 (0, (Tag3 ((("named", 3112)), 0, (0)), 100000000, 0, -269), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Set"), "t"), 0, (0)), 100000000, 0, -268), (Tag2 ([((("b")), 100000000, 0, -259); (Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -265); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("named", 3112)), 0, (0)), 100000000, 0, -267)], (0)), 100000000, 0, -266)]), 100000000, 0, -264), 0), 100000000, 0, -263), 0), 100000000, 0, -262), 0), 100000000, 0, -261), 0), 100000000, 0, -260), (Tag2 ([(Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -258); ((("b")), 100000000, 0, -259)]), 100000000, 0, -257), 0), 100000000, 0, -256), 0), 100000000, 0, -255), 0), 100000000, 0, -254), 0), 100000000, 0, -253), 0), 100000000, 0, -252), 0, (("middle_end/flambda/flambda.mli", 463, 20980, 20980), ("middle_end/flambda/flambda.mli", 472, 21354, 21365), 0), 0, Tag1 ("Flambda", 135)), 0); (("map_lets", 3134), ((Tag1 (0, (Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -251), (Tag1 (("for_defining_expr"), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -250), (Tag1 (0, (Tag3 ((("named", 3112)), 0, (0)), 100000000, 0, -249), (Tag3 ((("named", 3112)), 0, (0)), 100000000, 0, -248), 0), 100000000, 0, -247), 0), 100000000, 0, -246), (Tag1 (("for_last_body"), (Tag1 (0, (Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -245), (Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -244), 0), 100000000, 0, -243), (Tag1 (("after_rebuild"), (Tag1 (0, (Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -242), (Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -241), 0), 100000000, 0, -240), (Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -239), 0), 100000000, 0, -238), 0), 100000000, 0, -237), 0), 100000000, 0, -236), 0), 100000000, 0, -235), 0, (("middle_end/flambda/flambda.mli", 475, 21415, 21415), ("middle_end/flambda/flambda.mli", 480, 21545, 21551), 0), 0, Tag1 ("Flambda", 136)), 0); (("iter_lets", 3135), ((Tag1 (0, (Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -234), (Tag1 (("for_defining_expr"), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -233), (Tag1 (0, (Tag3 ((("named", 3112)), 0, (0)), 100000000, 0, -232), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -231), 0), 100000000, 0, -230), 0), 100000000, 0, -229), (Tag1 (("for_last_body"), (Tag1 (0, (Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -228), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -227), 0), 100000000, 0, -226), (Tag1 (("for_each_let"), (Tag1 (0, (Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -225), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -224), 0), 100000000, 0, -223), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -222), 0), 100000000, 0, -221), 0), 100000000, 0, -220), 0), 100000000, 0, -219), 0), 100000000, 0, -218), 0, (("middle_end/flambda/flambda.mli", 483, 21599, 21599), ("middle_end/flambda/flambda.mli", 488, 21734, 21743), 0), 0, Tag1 ("Flambda", 137)), 0); (("create_let", 3136), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -217), (Tag1 (0, (Tag3 ((("named", 3112)), 0, (0)), 100000000, 0, -216), (Tag1 (0, (Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -215), (Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -214), 0), 100000000, 0, -213), 0), 100000000, 0, -212), 0), 100000000, 0, -211), 0, (("middle_end/flambda/flambda.mli", 492, 21861, 21861), ("middle_end/flambda/flambda.mli", 492, 21861, 21907), 0), 0, Tag1 ("Flambda", 138)), 0); (("map_defining_expr_of_let", 3137), ((Tag1 (0, (Tag3 ((("let_expr", 3113)), 0, (0)), 100000000, 0, -210), (Tag1 (("f"), (Tag1 (0, (Tag3 ((("named", 3112)), 0, (0)), 100000000, 0, -209), (Tag3 ((("named", 3112)), 0, (0)), 100000000, 0, -208), 0), 100000000, 0, -207), (Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -206), 0), 100000000, 0, -205), 0), 100000000, 0, -204), 0, (("middle_end/flambda/flambda.mli", 496, 22034, 22034), ("middle_end/flambda/flambda.mli", 496, 22034, 22100), 0), 0, Tag1 ("Flambda", 139)), 0); Tag3 (("With_free_variables", 3138), 0, (Tag1 ([Tag1 (("t", 3321), ([((("a")), 100000000, 0, -1415)], 1, 0, 1, 0, [7], [2], 0, 0, (("middle_end/flambda/flambda.mli", 501, 22259, 22261), ("middle_end/flambda/flambda.mli", 501, 22259, 22270), 0), 0, 0, 0, Tag1 ("Flambda", 140)), 1, 0); (("of_defining_expr_of_let", 3322), ((Tag1 (0, (Tag3 ((("let_expr", 3113)), 0, (0)), 100000000, 0, -1414), (Tag3 ((("t", 3321)), [(Tag3 ((("named", 3112)), 0, (0)), 100000000, 0, -1413)], (0)), 100000000, 0, -1412), 0), 100000000, 0, -1411), 0, (("middle_end/flambda/flambda.mli", 504, 22292, 22294), ("middle_end/flambda/flambda.mli", 504, 22292, 22343), 0), 0, Tag1 ("Flambda", 141)), 0); (("of_body_of_let", 3323), ((Tag1 (0, (Tag3 ((("let_expr", 3113)), 0, (0)), 100000000, 0, -1410), (Tag3 ((("t", 3321)), [(Tag3 ((("expr", 3123)), 0, (0)), 100000000, 0, -1409)], (0)), 100000000, 0, -1408), 0), 100000000, 0, -1407), 0, (("middle_end/flambda/flambda.mli", 507, 22365, 22367), ("middle_end/flambda/flambda.mli", 507, 22365, 22406), 0), 0, Tag1 ("Flambda", 142)), 0); (("of_expr", 3324), ((Tag1 (0, (Tag3 ((("expr", 3123)), 0, (0)), 100000000, 0, -1406), (Tag3 ((("t", 3321)), [(Tag3 ((("expr", 3123)), 0, (0)), 100000000, 0, -1405)], (0)), 100000000, 0, -1404), 0), 100000000, 0, -1403), 0, (("middle_end/flambda/flambda.mli", 512, 22590, 22592), ("middle_end/flambda/flambda.mli", 512, 22590, 22620), 0), 0, Tag1 ("Flambda", 143)), 0); (("of_named", 3325), ((Tag1 (0, (Tag3 ((("named", 3112)), 0, (0)), 100000000, 0, -1402), (Tag3 ((("t", 3321)), [(Tag3 ((("named", 3112)), 0, (0)), 100000000, 0, -1401)], (0)), 100000000, 0, -1400), 0), 100000000, 0, -1399), 0, (("middle_end/flambda/flambda.mli", 514, 22622, 22624), ("middle_end/flambda/flambda.mli", 514, 22622, 22655), 0), 0, Tag1 ("Flambda", 144)), 0); (("create_let_reusing_defining_expr", 3326), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -1398), (Tag1 (0, (Tag3 ((("t", 3321)), [(Tag3 ((("named", 3112)), 0, (0)), 100000000, 0, -1397)], (0)), 100000000, 0, -1396), (Tag1 (0, (Tag3 ((("expr", 3123)), 0, (0)), 100000000, 0, -1395), (Tag3 ((("expr", 3123)), 0, (0)), 100000000, 0, -1394), 0), 100000000, 0, -1393), 0), 100000000, 0, -1392), 0), 100000000, 0, -1391), 0, (("middle_end/flambda/flambda.mli", 518, 22749, 22751), ("middle_end/flambda/flambda.mli", 522, 22833, 22844), 0), 0, Tag1 ("Flambda", 145)), 0); (("create_let_reusing_body", 3327), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -1390), (Tag1 (0, (Tag3 ((("named", 3112)), 0, (0)), 100000000, 0, -1389), (Tag1 (0, (Tag3 ((("t", 3321)), [(Tag3 ((("expr", 3123)), 0, (0)), 100000000, 0, -1388)], (0)), 100000000, 0, -1387), (Tag3 ((("expr", 3123)), 0, (0)), 100000000, 0, -1386), 0), 100000000, 0, -1385), 0), 100000000, 0, -1384), 0), 100000000, 0, -1383), 0, (("middle_end/flambda/flambda.mli", 526, 22939, 22941), ("middle_end/flambda/flambda.mli", 530, 23014, 23025), 0), 0, Tag1 ("Flambda", 146)), 0); (("create_let_reusing_both", 3328), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -1382), (Tag1 (0, (Tag3 ((("t", 3321)), [(Tag3 ((("named", 3112)), 0, (0)), 100000000, 0, -1381)], (0)), 100000000, 0, -1380), (Tag1 (0, (Tag3 ((("t", 3321)), [(Tag3 ((("expr", 3123)), 0, (0)), 100000000, 0, -1379)], (0)), 100000000, 0, -1378), (Tag3 ((("expr", 3123)), 0, (0)), 100000000, 0, -1377), 0), 100000000, 0, -1376), 0), 100000000, 0, -1375), 0), 100000000, 0, -1374), 0, (("middle_end/flambda/flambda.mli", 533, 23047, 23049), ("middle_end/flambda/flambda.mli", 537, 23124, 23135), 0), 0, Tag1 ("Flambda", 147)), 0); (("expr", 3329), ((Tag1 (0, (Tag3 ((("t", 3321)), [(Tag3 ((("expr", 3123)), 0, (0)), 100000000, 0, -1373)], (0)), 100000000, 0, -1372), (Tag3 ((("t", 3321)), [(Tag3 ((("named", 3112)), 0, (0)), 100000000, 0, -1371)], (0)), 100000000, 0, -1370), 0), 100000000, 0, -1369), 0, (("middle_end/flambda/flambda.mli", 540, 23188, 23190), ("middle_end/flambda/flambda.mli", 540, 23188, 23218), 0), 0, Tag1 ("Flambda", 148)), 0); (("contents", 3330), ((Tag1 (0, (Tag3 ((("t", 3321)), [((("a")), 100000000, 0, -1367)], (0)), 100000000, 0, -1368), ((("a")), 100000000, 0, -1367), 0), 100000000, 0, -1366), 0, (("middle_end/flambda/flambda.mli", 542, 23220, 23222), ("middle_end/flambda/flambda.mli", 542, 23220, 23247), 0), 0, Tag1 ("Flambda", 149)), 0); (("free_variables", 3331), ((Tag1 (0, (Tag3 ((("t", 3321)), [((0), 100000000, 0, -1365)], (0)), 100000000, 0, -1364), (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Set"), "t"), 0, (0)), 100000000, 0, -1363), 0), 100000000, 0, -1362), 0, (("middle_end/flambda/flambda.mli", 545, 23269, 23271), ("middle_end/flambda/flambda.mli", 545, 23269, 23313), 0), 0, Tag1 ("Flambda", 150)), 0)]), 0, (("middle_end/flambda/flambda.mli", 500, 22226, 22226), ("middle_end/flambda/flambda.mli", 546, 23314, 23317), 0), Tag1 ("Flambda", 151)), 0, 0); (("create_function_declaration", 3139), ((Tag1 (("params"), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Parameter")), "t"), 0, (0)), 100000000, 0, -203)], (0)), 100000000, 0, -202), (Tag1 (("body"), (Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -201), (Tag1 (("stub"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -200), (Tag1 (("dbg"), (Tag3 (Tag1 ((Tag2 ("Debuginfo")), "t"), 0, (0)), 100000000, 0, -199), (Tag1 (("inline"), (Tag3 (Tag1 ((Tag2 ("Lambda")), "inline_attribute"), 0, (0)), 100000000, 0, -198), (Tag1 (("specialise"), (Tag3 (Tag1 ((Tag2 ("Lambda")), "specialise_attribute"), 0, (0)), 100000000, 0, -197), (Tag1 (("is_a_functor"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -196), (Tag1 (("closure_origin"), (Tag3 (Tag1 ((Tag2 ("Closure_origin")), "t"), 0, (0)), 100000000, 0, -195), (Tag1 (("poll"), (Tag3 (Tag1 ((Tag2 ("Lambda")), "poll_attribute"), 0, (0)), 100000000, 0, -194), (Tag3 ((("function_declaration", 3117)), 0, (0)), 100000000, 0, -193), 0), 100000000, 0, -192), 0), 100000000, 0, -191), 0), 100000000, 0, -190), 0), 100000000, 0, -189), 0), 100000000, 0, -188), 0), 100000000, 0, -187), 0), 100000000, 0, -186), 0), 100000000, 0, -185), 0), 100000000, 0, -184), 0, (("middle_end/flambda/flambda.mli", 550, 23444, 23444), ("middle_end/flambda/flambda.mli", 560, 23725, 23750), 0), 0, Tag1 ("Flambda", 152)), 0); (("update_function_declaration", 3140), ((Tag1 (0, (Tag3 ((("function_declaration", 3117)), 0, (0)), 100000000, 0, -183), (Tag1 (("params"), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Parameter")), "t"), 0, (0)), 100000000, 0, -182)], (0)), 100000000, 0, -181), (Tag1 (("body"), (Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -180), (Tag3 ((("function_declaration", 3117)), 0, (0)), 100000000, 0, -179), 0), 100000000, 0, -178), 0), 100000000, 0, -177), 0), 100000000, 0, -176), 0, (("middle_end/flambda/flambda.mli", 563, 23827, 23827), ("middle_end/flambda/flambda.mli", 567, 23925, 23950), 0), 0, Tag1 ("Flambda", 153)), 0); (("create_function_declarations", 3141), ((Tag1 (("is_classic_mode"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -175), (Tag1 (("funs"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Map"), "t"), [(Tag3 ((("function_declaration", 3117)), 0, (0)), 100000000, 0, -174)], (0)), 100000000, 0, -173), (Tag3 ((("function_declarations", 3116)), 0, (0)), 100000000, 0, -172), 0), 100000000, 0, -171), 0), 100000000, 0, -170), 0, (("middle_end/flambda/flambda.mli", 570, 24032, 24032), ("middle_end/flambda/flambda.mli", 573, 24137, 24163), 0), 0, Tag1 ("Flambda", 154)), 0); (("create_function_declarations_with_origin", 3142), ((Tag1 (("is_classic_mode"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -169), (Tag1 (("funs"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Map"), "t"), [(Tag3 ((("function_declaration", 3117)), 0, (0)), 100000000, 0, -168)], (0)), 100000000, 0, -167), (Tag1 (("set_of_closures_origin"), (Tag3 (Tag1 ((Tag2 ("Set_of_closures_origin")), "t"), 0, (0)), 100000000, 0, -166), (Tag3 ((("function_declarations", 3116)), 0, (0)), 100000000, 0, -165), 0), 100000000, 0, -164), 0), 100000000, 0, -163), 0), 100000000, 0, -162), 0, (("middle_end/flambda/flambda.mli", 577, 24251, 24251), ("middle_end/flambda/flambda.mli", 581, 24421, 24447), 0), 0, Tag1 ("Flambda", 155)), 0); (("update_body_of_function_declaration", 3143), ((Tag1 (0, (Tag3 ((("function_declaration", 3117)), 0, (0)), 100000000, 0, -161), (Tag1 (("body"), (Tag3 ((("expr", 3123)), 0, (0)), 100000000, 0, -160), (Tag3 ((("function_declaration", 3117)), 0, (0)), 100000000, 0, -159), 0), 100000000, 0, -158), 0), 100000000, 0, -157), 0, (("middle_end/flambda/flambda.mli", 584, 24504, 24504), ("middle_end/flambda/flambda.mli", 587, 24585, 24610), 0), 0, Tag1 ("Flambda", 156)), 0); (("update_function_decl's_params_and_body", 3144), ((Tag1 (0, (Tag3 ((("function_declaration", 3117)), 0, (0)), 100000000, 0, -156), (Tag1 (("params"), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Parameter")), "t"), 0, (0)), 100000000, 0, -155)], (0)), 100000000, 0, -154), (Tag1 (("body"), (Tag3 ((("expr", 3123)), 0, (0)), 100000000, 0, -153), (Tag3 ((("function_declaration", 3117)), 0, (0)), 100000000, 0, -152), 0), 100000000, 0, -151), 0), 100000000, 0, -150), 0), 100000000, 0, -149), 0, (("middle_end/flambda/flambda.mli", 591, 24754, 24754), ("middle_end/flambda/flambda.mli", 595, 24867, 24892), 0), 0, Tag1 ("Flambda", 157)), 0); (("update_function_declarations", 3145), ((Tag1 (0, (Tag3 ((("function_declarations", 3116)), 0, (0)), 100000000, 0, -148), (Tag1 (("funs"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Map"), "t"), [(Tag3 ((("function_declaration", 3117)), 0, (0)), 100000000, 0, -147)], (0)), 100000000, 0, -146), (Tag3 ((("function_declarations", 3116)), 0, (0)), 100000000, 0, -145), 0), 100000000, 0, -144), 0), 100000000, 0, -143), 0, (("middle_end/flambda/flambda.mli", 599, 24990, 24990), ("middle_end/flambda/flambda.mli", 602, 25096, 25122), 0), 0, Tag1 ("Flambda", 158)), 0); (("create_function_declarations_with_closures_origin", 3146), ((Tag1 (("is_classic_mode"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -142), (Tag1 (("funs"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Map"), "t"), [(Tag3 ((("function_declaration", 3117)), 0, (0)), 100000000, 0, -141)], (0)), 100000000, 0, -140), (Tag1 (("set_of_closures_origin"), (Tag3 (Tag1 ((Tag2 ("Set_of_closures_origin")), "t"), 0, (0)), 100000000, 0, -139), (Tag3 ((("function_declarations", 3116)), 0, (0)), 100000000, 0, -138), 0), 100000000, 0, -137), 0), 100000000, 0, -136), 0), 100000000, 0, -135), 0, (("middle_end/flambda/flambda.mli", 604, 25124, 25124), ("middle_end/flambda/flambda.mli", 608, 25304, 25330), 0), 0, Tag1 ("Flambda", 159)), 0); (("import_function_declarations_for_pack", 3147), ((Tag1 (0, (Tag3 ((("function_declarations", 3116)), 0, (0)), 100000000, 0, -134), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Set_of_closures_id")), "t"), 0, (0)), 100000000, 0, -133), (Tag3 (Tag1 ((Tag2 ("Set_of_closures_id")), "t"), 0, (0)), 100000000, 0, -132), 0), 100000000, 0, -131), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Set_of_closures_origin")), "t"), 0, (0)), 100000000, 0, -130), (Tag3 (Tag1 ((Tag2 ("Set_of_closures_origin")), "t"), 0, (0)), 100000000, 0, -129), 0), 100000000, 0, -128), (Tag3 ((("function_declarations", 3116)), 0, (0)), 100000000, 0, -127), 0), 100000000, 0, -126), 0), 100000000, 0, -125), 0), 100000000, 0, -124), 0, (("middle_end/flambda/flambda.mli", 610, 25332, 25332), ("middle_end/flambda/flambda.mli", 614, 25513, 25539), 0), 0, Tag1 ("Flambda", 160)), 0); (("create_set_of_closures", 3148), ((Tag1 (("function_decls"), (Tag3 ((("function_declarations", 3116)), 0, (0)), 100000000, 0, -123), (Tag1 (("free_vars"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Map"), "t"), [(Tag3 ((("specialised_to", 3110)), 0, (0)), 100000000, 0, -122)], (0)), 100000000, 0, -121), (Tag1 (("specialised_args"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Map"), "t"), [(Tag3 ((("specialised_to", 3110)), 0, (0)), 100000000, 0, -120)], (0)), 100000000, 0, -119), (Tag1 (("direct_call_surrogates"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Map"), "t"), [(Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -118)], (0)), 100000000, 0, -117), (Tag3 ((("set_of_closures", 3115)), 0, (0)), 100000000, 0, -116), 0), 100000000, 0, -115), 0), 100000000, 0, -114), 0), 100000000, 0, -113), 0), 100000000, 0, -112), 0, (("middle_end/flambda/flambda.mli", 618, 25661, 25661), ("middle_end/flambda/flambda.mli", 623, 25881, 25901), 0), 0, Tag1 ("Flambda", 161)), 0); (("used_params", 3149), ((Tag1 (0, (Tag3 ((("function_declaration", 3117)), 0, (0)), 100000000, 0, -111), (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Set"), "t"), 0, (0)), 100000000, 0, -110), 0), 100000000, 0, -109), 0, (("middle_end/flambda/flambda.mli", 627, 26004, 26004), ("middle_end/flambda/flambda.mli", 627, 26004, 26060), 0), 0, Tag1 ("Flambda", 162)), 0); Tag1 (("maybe_named", 3150), (0, 0, Tag1 ([(("Is_expr", 2054), ([(Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -107)]), 0, (("middle_end/flambda/flambda.mli", 630, 26081, 26083), ("middle_end/flambda/flambda.mli", 630, 26081, 26097), 0), 0, Tag1 ("Flambda", 164)); (("Is_named", 2055), ([(Tag3 ((("named", 3112)), 0, (0)), 100000000, 0, -108)]), 0, (("middle_end/flambda/flambda.mli", 631, 26098, 26100), ("middle_end/flambda/flambda.mli", 631, 26098, 26119), 0), 0, Tag1 ("Flambda", 165))], 0), 1, 0, 0, 0, 0, 0, (("middle_end/flambda/flambda.mli", 629, 26062, 26062), ("middle_end/flambda/flambda.mli", 631, 26098, 26119), 0), 0, 0, 0, Tag1 ("Flambda", 163)), 1, 0); (("iter_general", 3151), ((Tag1 (("toplevel"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -106), (Tag1 (0, (Tag1 (0, (Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -105), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -104), 0), 100000000, 0, -103), (Tag1 (0, (Tag1 (0, (Tag3 ((("named", 3112)), 0, (0)), 100000000, 0, -102), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -101), 0), 100000000, 0, -100), (Tag1 (0, (Tag3 ((("maybe_named", 3150)), 0, (0)), 100000000, 0, -99), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -98), 0), 100000000, 0, -97), 0), 100000000, 0, -96), 0), 100000000, 0, -95), 0), 100000000, 0, -94), 0, (("middle_end/flambda/flambda.mli", 635, 26264, 26264), ("middle_end/flambda/flambda.mli", 640, 26355, 26364), 0), 0, Tag1 ("Flambda", 166)), 0); (("print", 3152), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -93), (Tag1 (0, (Tag3 ((("t", 3111)), 0, (0)), 100000000, 0, -92), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -91), 0), 100000000, 0, -90), 0), 100000000, 0, -89), 0, (("middle_end/flambda/flambda.mli", 642, 26366, 26366), ("middle_end/flambda/flambda.mli", 642, 26366, 26407), 0), 0, Tag1 ("Flambda", 167)), 0); (("print_named", 3153), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -88), (Tag1 (0, (Tag3 ((("named", 3112)), 0, (0)), 100000000, 0, -87), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -86), 0), 100000000, 0, -85), 0), 100000000, 0, -84), 0, (("middle_end/flambda/flambda.mli", 644, 26409, 26409), ("middle_end/flambda/flambda.mli", 644, 26409, 26460), 0), 0, Tag1 ("Flambda", 168)), 0); (("print_program", 3154), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -83), (Tag1 (0, (Tag3 ((("program", 3125)), 0, (0)), 100000000, 0, -82), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -81), 0), 100000000, 0, -80), 0), 100000000, 0, -79), 0, (("middle_end/flambda/flambda.mli", 646, 26462, 26462), ("middle_end/flambda/flambda.mli", 646, 26462, 26517), 0), 0, Tag1 ("Flambda", 169)), 0); (("print_const", 3155), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -78), (Tag1 (0, (Tag3 ((("const", 3103)), 0, (0)), 100000000, 0, -77), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -76), 0), 100000000, 0, -75), 0), 100000000, 0, -74), 0, (("middle_end/flambda/flambda.mli", 648, 26519, 26519), ("middle_end/flambda/flambda.mli", 648, 26519, 26570), 0), 0, Tag1 ("Flambda", 170)), 0); (("print_constant_defining_value", 3156), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -73), (Tag1 (0, (Tag3 ((("constant_defining_value", 3120)), 0, (0)), 100000000, 0, -72), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -71), 0), 100000000, 0, -70), 0), 100000000, 0, -69), 0, (("middle_end/flambda/flambda.mli", 650, 26572, 26572), ("middle_end/flambda/flambda.mli", 653, 26657, 26666), 0), 0, Tag1 ("Flambda", 171)), 0); (("print_function_declaration", 3157), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -68), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -66); (Tag3 ((("function_declaration", 3117)), 0, (0)), 100000000, 0, -67)]), 100000000, 0, -65), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -64), 0), 100000000, 0, -63), 0), 100000000, 0, -62), 0, (("middle_end/flambda/flambda.mli", 655, 26668, 26668), ("middle_end/flambda/flambda.mli", 658, 26760, 26769), 0), 0, Tag1 ("Flambda", 172)), 0); (("print_function_declarations", 3158), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -61), (Tag1 (0, (Tag3 ((("function_declarations", 3116)), 0, (0)), 100000000, 0, -60), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -59), 0), 100000000, 0, -58), 0), 100000000, 0, -57), 0, (("middle_end/flambda/flambda.mli", 660, 26771, 26771), ("middle_end/flambda/flambda.mli", 663, 26852, 26861), 0), 0, Tag1 ("Flambda", 173)), 0); (("print_project_closure", 3159), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -56), (Tag1 (0, (Tag3 ((("project_closure", 3107)), 0, (0)), 100000000, 0, -55), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52), 0, (("middle_end/flambda/flambda.mli", 665, 26863, 26863), ("middle_end/flambda/flambda.mli", 668, 26932, 26941), 0), 0, Tag1 ("Flambda", 174)), 0); (("print_move_within_set_of_closures", 3160), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -51), (Tag1 (0, (Tag3 ((("move_within_set_of_closures", 3108)), 0, (0)), 100000000, 0, -50), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -49), 0), 100000000, 0, -48), 0), 100000000, 0, -47), 0, (("middle_end/flambda/flambda.mli", 670, 26943, 26943), ("middle_end/flambda/flambda.mli", 673, 27036, 27045), 0), 0, Tag1 ("Flambda", 175)), 0); (("print_project_var", 3161), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -46), (Tag1 (0, (Tag3 ((("project_var", 3109)), 0, (0)), 100000000, 0, -45), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -44), 0), 100000000, 0, -43), 0), 100000000, 0, -42), 0, (("middle_end/flambda/flambda.mli", 675, 27047, 27047), ("middle_end/flambda/flambda.mli", 678, 27108, 27117), 0), 0, Tag1 ("Flambda", 176)), 0); (("print_set_of_closures", 3162), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -41), (Tag1 (0, (Tag3 ((("set_of_closures", 3115)), 0, (0)), 100000000, 0, -40), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -39), 0), 100000000, 0, -38), 0), 100000000, 0, -37), 0, (("middle_end/flambda/flambda.mli", 680, 27119, 27119), ("middle_end/flambda/flambda.mli", 683, 27188, 27197), 0), 0, Tag1 ("Flambda", 177)), 0); (("print_specialised_to", 3163), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -36), (Tag1 (0, (Tag3 ((("specialised_to", 3110)), 0, (0)), 100000000, 0, -35), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -34), 0), 100000000, 0, -33), 0), 100000000, 0, -32), 0, (("middle_end/flambda/flambda.mli", 685, 27199, 27199), ("middle_end/flambda/flambda.mli", 688, 27266, 27275), 0), 0, Tag1 ("Flambda", 178)), 0); (("equal_call_kind", 3164), ((Tag1 (0, (Tag3 ((("call_kind", 3102)), 0, (0)), 100000000, 0, -31), (Tag1 (0, (Tag3 ((("call_kind", 3102)), 0, (0)), 100000000, 0, -30), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -29), 0), 100000000, 0, -28), 0), 100000000, 0, -27), 0, (("middle_end/flambda/flambda.mli", 690, 27277, 27277), ("middle_end/flambda/flambda.mli", 693, 27327, 27336), 0), 0, Tag1 ("Flambda", 179)), 0); (("equal_specialised_to", 3165), ((Tag1 (0, (Tag3 ((("specialised_to", 3110)), 0, (0)), 100000000, 0, -26), (Tag1 (0, (Tag3 ((("specialised_to", 3110)), 0, (0)), 100000000, 0, -25), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0), 100000000, 0, -22), 0, (("middle_end/flambda/flambda.mli", 695, 27338, 27338), ("middle_end/flambda/flambda.mli", 698, 27403, 27412), 0), 0, Tag1 ("Flambda", 180)), 0); (("compare_const", 3166), ((Tag1 (0, (Tag3 ((("const", 3103)), 0, (0)), 100000000, 0, -21), (Tag1 (0, (Tag3 ((("const", 3103)), 0, (0)), 100000000, 0, -20), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("middle_end/flambda/flambda.mli", 700, 27414, 27414), ("middle_end/flambda/flambda.mli", 703, 27454, 27462), 0), 0, Tag1 ("Flambda", 181)), 0); (("compare_project_var", 3167), ((Tag1 (0, (Tag3 ((("project_var", 3109)), 0, (0)), 100000000, 0, -16), (Tag1 (0, (Tag3 ((("project_var", 3109)), 0, (0)), 100000000, 0, -15), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("middle_end/flambda/flambda.mli", 705, 27464, 27464), ("middle_end/flambda/flambda.mli", 705, 27464, 27523), 0), 0, Tag1 ("Flambda", 182)), 0); (("compare_move_within_set_of_closures", 3168), ((Tag1 (0, (Tag3 ((("move_within_set_of_closures", 3108)), 0, (0)), 100000000, 0, -11), (Tag1 (0, (Tag3 ((("move_within_set_of_closures", 3108)), 0, (0)), 100000000, 0, -10), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("middle_end/flambda/flambda.mli", 707, 27525, 27525), ("middle_end/flambda/flambda.mli", 710, 27631, 27639), 0), 0, Tag1 ("Flambda", 183)), 0); (("compare_project_closure", 3169), ((Tag1 (0, (Tag3 ((("project_closure", 3107)), 0, (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 ((("project_closure", 3107)), 0, (0)), 100000000, 0, -5), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("middle_end/flambda/flambda.mli", 712, 27641, 27641), ("middle_end/flambda/flambda.mli", 712, 27641, 27712), 0), 0, Tag1 ("Flambda", 184)), 0)], "Flambda", [("Flambda", ("\195J|\022>U\206!\211\212\185N\180zh\241")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Variable", ("\228'\154\1834\146\207\147+\193Aq\209h\190\220")); ("Var_within_closure", ("vQ\173\251u\026\012+}j\020C}T\151\220")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Tag", ("\252\157\132\005\195\228\232\133\246\237\233\224\012\143\192\218")); ("Symbol", ("\179q\177\031_\169\139a\192\019\188\000V\236\232\t")); ("Subst", ("\021\031\148\223\127\186\189\135\027}\145r\216\143\177\156")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Static_exception", ("2{#\175\226\185\147\146\176\140\029O\023p\024\\")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Set_of_closures_origin", ("$n\234\014\162\130\210K\171\btrA\244\254\195")); ("Set_of_closures_id", ("\178\228\011\028\027~\211\166\244\180\220-W\145_\243")); ("Projection", ("\250\207\030\021*\193\225\168\189!\224\228\192\212\236\224")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Parameter", ("*\152\238G\163\217\2377/\t\206\131\226\216K0")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Numbers", ("\004\020\227\212|\031Q6\146\217\211\156\221\234\254\195")); ("Mutable_variable", ("B^*^9`\212\152j\145_\017i.\128?")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Load_path", ("\012@\228l\230\164S\172h\1726X\020\252o}")); ("Linkage_name", ("\023\000\172\166 s\214\ns\155s\156\005\252\154\207")); ("Lambda", ("\180\1419\236'\146K$\128\006\135q\135V\029\180")); ("Internal_variable_names", ("\024|\208(\224\206\012\006\179\203\020\000\179\228\154\218")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("Env", ("\021\n\181\142x\b\169j\227\"\017\248*\178\245\223")); ("Debuginfo", ("\131\251\175\217P\194M\163\022\151\002\005\006\185:\185")); ("Compilation_unit", ("\007\240\020\003jK\000\210\174\021\189.8^\028K")); ("Cmi_format", ("6\177\bU\139\"\023\152=\249\135\174\b\011Cg")); ("Closure_origin", ("G\222\200`\213\247\022M|O\1488\194\030\187\229")); ("Closure_id", ("k\221yCH\015\186G\246]\003\233\198\179\217A")); ("Closure_element", ("a\194\018\239D1\143{\156A\011\219H#\149A")); ("Clambda_primitives", ("\199\176\237Hv\205\152\14717\179\017\246\221x`")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216")); ("Allocated_const", ("\029\027.W\160\170!\199Q2\235\240\167\031,\004"))], [(0)])
val compare_project_closure : project_closure -> project_closure -> int

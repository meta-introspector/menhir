val scrape : Env.t -> Types.module_type -> Types.module_type
val scrape_for_functor_arg : Env.t -> Types.module_type -> Types.module_type
val scrape_for_type_of :
  remove_aliases:bool -> Env.t -> Types.module_type -> Types.module_type
val freshen : scope:int -> Types.module_type -> Types.module_type
val strengthen :
  aliasable:bool -> Env.t -> Types.module_type -> Path.t -> Types.module_type
val strengthen_decl :
  aliasable:bool ->
  Env.t -> Types.module_declaration -> Path.t -> Types.module_declaration
val nondep_supertype :
  Env.t -> Ident.t list -> Types.module_type -> Types.module_type
val nondep_sig_item :
  Env.t -> Ident.t list -> Types.signature_item -> Types.signature_item
val no_code_needed : Env.t -> Types.module_type -> bool
val no_code_needed_sig : Env.t -> Types.signature -> bool
val enrich_modtype :
  Env.t -> Path.t -> Types.module_type -> Types.module_type
val enrich_typedecl :
  Env.t ->
  Path.t -> Ident.t -> Types.type_declaration -> Types.type_declaration
val type_paths : Env.t -> Path.t -> Types.module_type -> Path.t list
val contains_type : Env.t -> Types.module_type -> bool
("DEBUG:rule", [(("scrape", 614), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -101), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -100), (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -99), 0), 100000000, 0, -98), 0), 100000000, 0, -97), 0, (("typing/mtype.mli", 20, 1125, 1125), ("typing/mtype.mli", 20, 1125, 1172), 0), 0, Tag1 ("Mtype", 1)), 0); (("scrape_for_functor_arg", 615), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -96), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -95), (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -94), 0), 100000000, 0, -93), 0), 100000000, 0, -92), 0, (("typing/mtype.mli", 24, 1337, 1337), ("typing/mtype.mli", 24, 1337, 1400), 0), 0, Tag1 ("Mtype", 2)), 0); (("scrape_for_type_of", 616), ((Tag1 (("remove_aliases"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -91), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -90), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -89), (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -88), 0), 100000000, 0, -87), 0), 100000000, 0, -86), 0), 100000000, 0, -85), 0, (("typing/mtype.mli", 26, 1457, 1457), ("typing/mtype.mli", 27, 1481, 1541), 0), 0, Tag1 ("Mtype", 3)), 0); (("freshen", 617), ((Tag1 (("scope"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -84), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -83), (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -82), 0), 100000000, 0, -81), 0), 100000000, 0, -80), 0, (("typing/mtype.mli", 29, 1588, 1588), ("typing/mtype.mli", 29, 1588, 1640), 0), 0, Tag1 ("Mtype", 4)), 0); (("strengthen", 618), ((Tag1 (("aliasable"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -79), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -78), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -77), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -76), (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -75), 0), 100000000, 0, -74), 0), 100000000, 0, -73), 0), 100000000, 0, -72), 0), 100000000, 0, -71), 0, (("typing/mtype.mli", 32, 1758, 1758), ("typing/mtype.mli", 32, 1758, 1837), 0), 0, Tag1 ("Mtype", 5)), 0); (("strengthen_decl", 619), ((Tag1 (("aliasable"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -70), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -69), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_declaration"), 0, (0)), 100000000, 0, -68), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -67), (Tag3 (Tag1 ((Tag2 ("Types")), "module_declaration"), 0, (0)), 100000000, 0, -66), 0), 100000000, 0, -65), 0), 100000000, 0, -64), 0), 100000000, 0, -63), 0), 100000000, 0, -62), 0, (("typing/mtype.mli", 35, 1927, 1927), ("typing/mtype.mli", 36, 1948, 2027), 0), 0, Tag1 ("Mtype", 6)), 0); (("nondep_supertype", 620), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -61), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -60)], (0)), 100000000, 0, -59), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -58), (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -57), 0), 100000000, 0, -56), 0), 100000000, 0, -55), 0), 100000000, 0, -54), 0, (("typing/mtype.mli", 37, 2028, 2028), ("typing/mtype.mli", 37, 2028, 2101), 0), 0, Tag1 ("Mtype", 7)), 0); (("nondep_sig_item", 621), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -53), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -52)], (0)), 100000000, 0, -51), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "signature_item"), 0, (0)), 100000000, 0, -50), (Tag3 (Tag1 ((Tag2 ("Types")), "signature_item"), 0, (0)), 100000000, 0, -49), 0), 100000000, 0, -48), 0), 100000000, 0, -47), 0), 100000000, 0, -46), 0, (("typing/mtype.mli", 41, 2288, 2288), ("typing/mtype.mli", 41, 2288, 2366), 0), 0, Tag1 ("Mtype", 8)), 0); (("no_code_needed", 622), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -45), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -44), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -43), 0), 100000000, 0, -42), 0), 100000000, 0, -41), 0, (("typing/mtype.mli", 46, 2614, 2614), ("typing/mtype.mli", 46, 2614, 2662), 0), 0, Tag1 ("Mtype", 9)), 0); (("no_code_needed_sig", 623), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -40), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "signature"), 0, (0)), 100000000, 0, -39), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -38), 0), 100000000, 0, -37), 0), 100000000, 0, -36), 0, (("typing/mtype.mli", 47, 2663, 2663), ("typing/mtype.mli", 47, 2663, 2713), 0), 0, Tag1 ("Mtype", 10)), 0); (("enrich_modtype", 624), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -35), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -34), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -33), (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), 0, (("typing/mtype.mli", 50, 2836, 2836), ("typing/mtype.mli", 50, 2836, 2901), 0), 0, Tag1 ("Mtype", 11)), 0); (("enrich_typedecl", 625), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -28), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -27), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -26), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -25), (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("typing/mtype.mli", 51, 2902, 2902), ("typing/mtype.mli", 52, 2973, 2991), 0), 0, Tag1 ("Mtype", 12)), 0); (("type_paths", 626), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -19), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -18), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -17), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -16)], (0)), 100000000, 0, -15), 0), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("typing/mtype.mli", 53, 2992, 2992), ("typing/mtype.mli", 53, 2992, 3053), 0), 0, Tag1 ("Mtype", 13)), 0); (("contains_type", 627), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -11), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -10), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("typing/mtype.mli", 54, 3054, 3054), ("typing/mtype.mli", 54, 3054, 3101), 0), 0, Tag1 ("Mtype", 14)), 0); (("lower_nongen", 628), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -5), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("typing/mtype.mli", 55, 3102, 3102), ("typing/mtype.mli", 55, 3102, 3146), 0), 0, Tag1 ("Mtype", 15)), 0)], "Mtype", [("Mtype", ("\149\149L\193\2250\2120'\180\193\128{\161\001\140")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Subst", ("\021\031\148\223\127\186\189\135\027}\145r\216\143\177\156")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Load_path", ("\012@\228l\230\164S\172h\1726X\020\252o}")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("Env", ("\021\n\181\142x\b\169j\227\"\017\248*\178\245\223")); ("Cmi_format", ("6\177\bU\139\"\023\152=\249\135\174\b\011Cg")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])
val lower_nongen : int -> Types.module_type -> unit

type 'a shared = Shared of 'a | Single of 'a
type ('a, 'ctx) t_store = {
  act_get : unit -> 'a array;
  act_get_shared : unit -> 'a shared array;
  act_store : 'ctx -> 'a -> int;
  act_store_shared : 'ctx -> 'a -> int;
}
module type Stored =
  sig
    type t
    type key
    val compare_key : key -> key -> int
    val make_key : t -> key option
  end
module type CtxStored =
  sig
    type t
    type key
    val compare_key : key -> key -> int
    type context
    val make_key : context -> t -> key option
  end
module CtxStore :
  functor (A : CtxStored) ->
    sig val mk_store : unit -> (A.t, A.context) t_store end
module Store :
  functor (A : Stored) -> sig val mk_store : unit -> (A.t, unit) t_store end
module type S =
  sig
    type primitive
    val eqint : primitive
    val neint : primitive
    val leint : primitive
    val ltint : primitive
    val geint : primitive
    val gtint : primitive
    type loc
    type arg
    type test
    type act
    val bind : arg -> (arg -> act) -> act
    val make_const : int -> arg
    val make_offset : arg -> int -> arg
    val make_prim : primitive -> arg list -> test
    val make_isout : arg -> arg -> test
    val make_isin : arg -> arg -> test
    val make_is_nonzero : arg -> test
    val arg_as_test : arg -> test
    val make_if : test -> act -> act -> act
    val make_switch : loc -> arg -> int array -> act array -> act
    val make_catch : act -> int * (act -> act)
    val make_exit : int -> act
  end
module Make :
  functor (Arg : S) ->
    sig
      val zyva :
        Arg.loc ->
        int * int ->
        Arg.arg ->
        (int * int * int) array -> (Arg.act, 'a) t_store -> Arg.act
      val test_sequence :
        Arg.arg ->
        (int * int * int) array -> (Arg.act, 'a) t_store -> Arg.act("DEBUG:rule", [Tag1 (("shared", 358), ([((("a")), 100000000, 0, -17)], 1, Tag1 ([(("Shared", 270), ([((("a")), 100000000, 0, -17)]), 0, (("lambda/switch.mli", 32, 1602, 1619), ("lambda/switch.mli", 32, 1602, 1631), 0), 0, Tag1 ("Switch", 1)); (("Single", 271), ([((("a")), 100000000, 0, -17)]), 0, (("lambda/switch.mli", 32, 1602, 1632), ("lambda/switch.mli", 32, 1602, 1646), 0), 0, Tag1 ("Switch", 2))], 0), 1, 0, [25], [0], 0, 0, (("lambda/switch.mli", 32, 1602, 1602), ("lambda/switch.mli", 32, 1602, 1646), 0), 0, 0, 0, Tag1 ("Switch", 0)), 1, 0); Tag1 (("t_store", 359), ([((("a")), 100000000, 0, -4); ((("ctx")), 100000000, 0, -13)], 2, [[(("act_get", 273), 0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5), (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -4)], (0)), 100000000, 0, -3), 0), 100000000, 0, -2), (("lambda/switch.mli", 35, 1674, 1679), ("lambda/switch.mli", 35, 1674, 1707), 0), 0, Tag1 ("Switch", 4)); (("act_get_shared", 274), 0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -9), (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("shared", 358)), [((("a")), 100000000, 0, -4)], (0)), 100000000, 0, -8)], (0)), 100000000, 0, -7), 0), 100000000, 0, -6), (("lambda/switch.mli", 36, 1708, 1713), ("lambda/switch.mli", 36, 1708, 1755), 0), 0, Tag1 ("Switch", 5)); (("act_store", 275), 0, (Tag1 (0, ((("ctx")), 100000000, 0, -13), (Tag1 (0, ((("a")), 100000000, 0, -4), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0), 100000000, 0, -10), (("lambda/switch.mli", 37, 1756, 1761), ("lambda/switch.mli", 37, 1756, 1792), 0), 0, Tag1 ("Switch", 6)); (("act_store_shared", 276), 0, (Tag1 (0, ((("ctx")), 100000000, 0, -13), (Tag1 (0, ((("a")), 100000000, 0, -4), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -16), 0), 100000000, 0, -15), 0), 100000000, 0, -14), (("lambda/switch.mli", 38, 1793, 1798), ("lambda/switch.mli", 38, 1793, 1836), 0), 0, Tag1 ("Switch", 7))]], 1, 0, [63; 46], [0; 0], 0, 0, (("lambda/switch.mli", 34, 1648, 1648), ("lambda/switch.mli", 38, 1793, 1838), 0), 0, 0, 0, Tag1 ("Switch", 3)), 1, 0); Tag4 (("Stored", 360), ((Tag1 ([Tag1 (("t", 369), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("lambda/switch.mli", 41, 1865, 1867), ("lambda/switch.mli", 41, 1865, 1873), 0), 0, 0, 0, Tag1 ("Switch", 8)), 1, 0); Tag1 (("key", 370), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("lambda/switch.mli", 42, 1874, 1876), ("lambda/switch.mli", 42, 1874, 1884), 0), 0, 0, 0, Tag1 ("Switch", 9)), 1, 0); (("compare_key", 371), ((Tag1 (0, (Tag3 ((("key", 370)), 0, (0)), 100000000, 0, -26), (Tag1 (0, (Tag3 ((("key", 370)), 0, (0)), 100000000, 0, -25), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0), 100000000, 0, -22), 0, (("lambda/switch.mli", 43, 1885, 1887), ("lambda/switch.mli", 43, 1885, 1922), 0), 0, Tag1 ("Switch", 10)), 0); (("make_key", 372), ((Tag1 (0, (Tag3 ((("t", 369)), 0, (0)), 100000000, 0, -21), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("key", 370)), 0, (0)), 100000000, 0, -20)], (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0, (("lambda/switch.mli", 44, 1923, 1925), ("lambda/switch.mli", 44, 1923, 1955), 0), 0, Tag1 ("Switch", 11)), 0)])), 0, (("lambda/switch.mli", 40, 1840, 1840), ("lambda/switch.mli", 45, 1956, 1959), 0), Tag1 ("Switch", 12)), 0); Tag4 (("CtxStored", 361), ((Tag1 ([Tag1 (("t", 373), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("lambda/switch.mli", 41, 1865, 1867), ("lambda/switch.mli", 41, 1865, 1873), 0), 0, 0, 0, Tag1 ("Switch", 8)), 1, 0); Tag1 (("key", 374), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("lambda/switch.mli", 42, 1874, 1876), ("lambda/switch.mli", 42, 1874, 1884), 0), 0, 0, 0, Tag1 ("Switch", 9)), 1, 0); (("compare_key", 375), ((Tag1 (0, (Tag3 ((("key", 374)), 0, (0)), 100000000, 0, -37), (Tag1 (0, (Tag3 ((("key", 374)), 0, (0)), 100000000, 0, -36), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -35), 0), 100000000, 0, -34), 0), 100000000, 0, -33), 0, (("lambda/switch.mli", 43, 1885, 1887), ("lambda/switch.mli", 43, 1885, 1922), 0), 0, Tag1 ("Switch", 10)), 0); Tag1 (("context", 376), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("lambda/switch.mli", 49, 2006, 2008), ("lambda/switch.mli", 49, 2006, 2020), 0), 0, 0, 0, Tag1 ("Switch", 13)), 1, 0); (("make_key", 377), ((Tag1 (0, (Tag3 ((("context", 376)), 0, (0)), 100000000, 0, -32), (Tag1 (0, (Tag3 ((("t", 373)), 0, (0)), 100000000, 0, -31), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("key", 374)), 0, (0)), 100000000, 0, -30)], (0)), 100000000, 0, -29), 0), 100000000, 0, -28), 0), 100000000, 0, -27), 0, (("lambda/switch.mli", 50, 2021, 2023), ("lambda/switch.mli", 50, 2021, 2064), 0), 0, Tag1 ("Switch", 14)), 0)])), 0, (("lambda/switch.mli", 47, 1961, 1961), ("lambda/switch.mli", 51, 2065, 2068), 0), Tag1 ("Switch", 15)), 0); Tag3 (("CtxStore", 362), 0, (Tag2 (((("A", 368)), ((("CtxStored", 361)))), Tag1 ([(("mk_store", 378), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -42), (Tag3 ((("t_store", 359)), [(Tag3 (Tag1 ((("A", 368)), "t"), 0, (0)), 100000000, 0, -40); (Tag3 (Tag1 ((("A", 368)), "context"), 0, (0)), 100000000, 0, -41)], (0)), 100000000, 0, -39), 0), 100000000, 0, -38), 0, (("lambda/switch.mli", 55, 2109, 2115), ("lambda/switch.mli", 55, 2109, 2162), 0), 0, Tag1 ("Switch", 17)), 0)])), 0, (("lambda/switch.mli", 53, 2070, 2070), ("lambda/switch.mli", 56, 2163, 2170), 0), Tag1 ("Switch", 18)), 0, 0); Tag3 (("Store", 363), 0, (Tag2 (((("A", 367)), ((("Stored", 360)))), Tag1 ([(("mk_store", 379), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -47), (Tag3 ((("t_store", 359)), [(Tag3 (Tag1 ((("A", 367)), "t"), 0, (0)), 100000000, 0, -45); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -46)], (0)), 100000000, 0, -44), 0), 100000000, 0, -43), 0, (("lambda/switch.mli", 60, 2205, 2211), ("lambda/switch.mli", 60, 2205, 2253), 0), 0, Tag1 ("Switch", 20)), 0)])), 0, (("lambda/switch.mli", 58, 2172, 2172), ("lambda/switch.mli", 61, 2254, 2261), 0), Tag1 ("Switch", 21)), 0, 0); Tag4 (("S", 364), ((Tag1 ([Tag1 (("primitive", 380), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("lambda/switch.mli", 67, 2351, 2355), ("lambda/switch.mli", 67, 2351, 2369), 0), 0, 0, 0, Tag1 ("Switch", 22)), 1, 0); (("eqint", 381), ((Tag3 ((("primitive", 380)), 0, (0)), 100000000, 0, -118), 0, (("lambda/switch.mli", 69, 2403, 2407), ("lambda/switch.mli", 69, 2403, 2428), 0), 0, Tag1 ("Switch", 23)), 0); (("neint", 382), ((Tag3 ((("primitive", 380)), 0, (0)), 100000000, 0, -117), 0, (("lambda/switch.mli", 70, 2429, 2433), ("lambda/switch.mli", 70, 2429, 2454), 0), 0, Tag1 ("Switch", 24)), 0); (("leint", 383), ((Tag3 ((("primitive", 380)), 0, (0)), 100000000, 0, -116), 0, (("lambda/switch.mli", 71, 2455, 2459), ("lambda/switch.mli", 71, 2455, 2480), 0), 0, Tag1 ("Switch", 25)), 0); (("ltint", 384), ((Tag3 ((("primitive", 380)), 0, (0)), 100000000, 0, -115), 0, (("lambda/switch.mli", 72, 2481, 2485), ("lambda/switch.mli", 72, 2481, 2506), 0), 0, Tag1 ("Switch", 26)), 0); (("geint", 385), ((Tag3 ((("primitive", 380)), 0, (0)), 100000000, 0, -114), 0, (("lambda/switch.mli", 73, 2507, 2511), ("lambda/switch.mli", 73, 2507, 2532), 0), 0, Tag1 ("Switch", 27)), 0); (("gtint", 386), ((Tag3 ((("primitive", 380)), 0, (0)), 100000000, 0, -113), 0, (("lambda/switch.mli", 74, 2533, 2537), ("lambda/switch.mli", 74, 2533, 2558), 0), 0, Tag1 ("Switch", 28)), 0); Tag1 (("loc", 387), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("lambda/switch.mli", 77, 2595, 2599), ("lambda/switch.mli", 77, 2595, 2607), 0), 0, 0, 0, Tag1 ("Switch", 29)), 1, 0); Tag1 (("arg", 388), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("lambda/switch.mli", 79, 2644, 2648), ("lambda/switch.mli", 79, 2644, 2656), 0), 0, 0, 0, Tag1 ("Switch", 30)), 1, 0); Tag1 (("test", 389), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("lambda/switch.mli", 81, 2695, 2699), ("lambda/switch.mli", 81, 2695, 2708), 0), 0, 0, 0, Tag1 ("Switch", 31)), 1, 0); Tag1 (("act", 390), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("lambda/switch.mli", 83, 2735, 2739), ("lambda/switch.mli", 83, 2735, 2747), 0), 0, 0, 0, Tag1 ("Switch", 32)), 1, 0); (("bind", 391), ((Tag1 (0, (Tag3 ((("arg", 388)), 0, (0)), 100000000, 0, -112), (Tag1 (0, (Tag1 (0, (Tag3 ((("arg", 388)), 0, (0)), 100000000, 0, -111), (Tag3 ((("act", 390)), 0, (0)), 100000000, 0, -110), 0), 100000000, 0, -109), (Tag3 ((("act", 390)), 0, (0)), 100000000, 0, -108), 0), 100000000, 0, -107), 0), 100000000, 0, -106), 0, (("lambda/switch.mli", 91, 3025, 3029), ("lambda/switch.mli", 91, 3025, 3066), 0), 0, Tag1 ("Switch", 33)), 0); (("make_const", 392), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -105), (Tag3 ((("arg", 388)), 0, (0)), 100000000, 0, -104), 0), 100000000, 0, -103), 0, (("lambda/switch.mli", 93, 3138, 3142), ("lambda/switch.mli", 93, 3138, 3169), 0), 0, Tag1 ("Switch", 34)), 0); (("make_offset", 393), ((Tag1 (0, (Tag3 ((("arg", 388)), 0, (0)), 100000000, 0, -102), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -101), (Tag3 ((("arg", 388)), 0, (0)), 100000000, 0, -100), 0), 100000000, 0, -99), 0), 100000000, 0, -98), 0, (("lambda/switch.mli", 96, 3278, 3282), ("lambda/switch.mli", 96, 3278, 3317), 0), 0, Tag1 ("Switch", 35)), 0); (("make_prim", 394), ((Tag1 (0, (Tag3 ((("primitive", 380)), 0, (0)), 100000000, 0, -97), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("arg", 388)), 0, (0)), 100000000, 0, -96)], (0)), 100000000, 0, -95), (Tag3 ((("test", 389)), 0, (0)), 100000000, 0, -94), 0), 100000000, 0, -93), 0), 100000000, 0, -92), 0, (("lambda/switch.mli", 99, 3433, 3437), ("lambda/switch.mli", 99, 3433, 3482), 0), 0, Tag1 ("Switch", 36)), 0); (("make_isout", 395), ((Tag1 (0, (Tag3 ((("arg", 388)), 0, (0)), 100000000, 0, -91), (Tag1 (0, (Tag3 ((("arg", 388)), 0, (0)), 100000000, 0, -90), (Tag3 ((("test", 389)), 0, (0)), 100000000, 0, -89), 0), 100000000, 0, -88), 0), 100000000, 0, -87), 0, (("lambda/switch.mli", 102, 3588, 3592), ("lambda/switch.mli", 102, 3588, 3627), 0), 0, Tag1 ("Switch", 37)), 0); (("make_isin", 396), ((Tag1 (0, (Tag3 ((("arg", 388)), 0, (0)), 100000000, 0, -86), (Tag1 (0, (Tag3 ((("arg", 388)), 0, (0)), 100000000, 0, -85), (Tag3 ((("test", 389)), 0, (0)), 100000000, 0, -84), 0), 100000000, 0, -83), 0), 100000000, 0, -82), 0, (("lambda/switch.mli", 105, 3728, 3732), ("lambda/switch.mli", 105, 3728, 3766), 0), 0, Tag1 ("Switch", 38)), 0); (("make_is_nonzero", 397), ((Tag1 (0, (Tag3 ((("arg", 388)), 0, (0)), 100000000, 0, -81), (Tag3 ((("test", 389)), 0, (0)), 100000000, 0, -80), 0), 100000000, 0, -79), 0, (("lambda/switch.mli", 108, 3867, 3871), ("lambda/switch.mli", 108, 3867, 3904), 0), 0, Tag1 ("Switch", 39)), 0); (("arg_as_test", 398), ((Tag1 (0, (Tag3 ((("arg", 388)), 0, (0)), 100000000, 0, -78), (Tag3 ((("test", 389)), 0, (0)), 100000000, 0, -77), 0), 100000000, 0, -76), 0, (("lambda/switch.mli", 111, 3998, 4002), ("lambda/switch.mli", 111, 3998, 4031), 0), 0, Tag1 ("Switch", 40)), 0); (("make_if", 399), ((Tag1 (0, (Tag3 ((("test", 389)), 0, (0)), 100000000, 0, -75), (Tag1 (0, (Tag3 ((("act", 390)), 0, (0)), 100000000, 0, -74), (Tag1 (0, (Tag3 ((("act", 390)), 0, (0)), 100000000, 0, -73), (Tag3 ((("act", 390)), 0, (0)), 100000000, 0, -72), 0), 100000000, 0, -71), 0), 100000000, 0, -70), 0), 100000000, 0, -69), 0, (("lambda/switch.mli", 113, 4099, 4103), ("lambda/switch.mli", 113, 4099, 4142), 0), 0, Tag1 ("Switch", 41)), 0); (("make_switch", 400), ((Tag1 (0, (Tag3 ((("loc", 387)), 0, (0)), 100000000, 0, -68), (Tag1 (0, (Tag3 ((("arg", 388)), 0, (0)), 100000000, 0, -67), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -66)], (0)), 100000000, 0, -65), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("act", 390)), 0, (0)), 100000000, 0, -64)], (0)), 100000000, 0, -63), (Tag3 ((("act", 390)), 0, (0)), 100000000, 0, -62), 0), 100000000, 0, -61), 0), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0, (("lambda/switch.mli", 117, 4252, 4256), ("lambda/switch.mli", 117, 4252, 4317), 0), 0, Tag1 ("Switch", 42)), 0); (("make_catch", 401), ((Tag1 (0, (Tag3 ((("act", 390)), 0, (0)), 100000000, 0, -57), (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -53); (Tag1 (0, (Tag3 ((("act", 390)), 0, (0)), 100000000, 0, -56), (Tag3 ((("act", 390)), 0, (0)), 100000000, 0, -55), 0), 100000000, 0, -54)]), 100000000, 0, -52), 0), 100000000, 0, -51), 0, (("lambda/switch.mli", 120, 4370, 4373), ("lambda/switch.mli", 120, 4370, 4415), 0), 0, Tag1 ("Switch", 43)), 0); (("make_exit", 402), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -50), (Tag3 ((("act", 390)), 0, (0)), 100000000, 0, -49), 0), 100000000, 0, -48), 0, (("lambda/switch.mli", 121, 4416, 4419), ("lambda/switch.mli", 121, 4416, 4445), 0), 0, Tag1 ("Switch", 44)), 0)])), 0, (("lambda/switch.mli", 64, 2299, 2299), ("lambda/switch.mli", 122, 4446, 4451), 0), Tag1 ("Switch", 45)), 0); Tag3 (("Make", 365), 0, (Tag2 (((("Arg", 366)), ((("S", 364)))), Tag1 ([(("zyva", 403), ((Tag1 (0, (Tag3 (Tag1 ((("Arg", 366)), "loc"), 0, (0)), 100000000, 0, -150), (Tag1 (0, (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -148); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -149)]), 100000000, 0, -147), (Tag1 (0, (Tag3 (Tag1 ((("Arg", 366)), "arg"), 0, (0)), 100000000, 0, -146), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -143); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -144); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -145)]), 100000000, 0, -142)], (0)), 100000000, 0, -141), (Tag1 (0, (Tag3 ((("t_store", 359)), [(Tag3 (Tag1 ((("Arg", 366)), "act"), 0, (0)), 100000000, 0, -139); ((0), 100000000, 0, -140)], (0)), 100000000, 0, -138), (Tag3 (Tag1 ((("Arg", 366)), "act"), 0, (0)), 100000000, 0, -137), 0), 100000000, 0, -136), 0), 100000000, 0, -135), 0), 100000000, 0, -134), 0), 100000000, 0, -133), 0), 100000000, 0, -132), 0, (("lambda/switch.mli", 139, 4879, 4885), ("lambda/switch.mli", 145, 5037, 5055), 0), 0, Tag1 ("Switch", 47)), 0); (("test_sequence", 404), ((Tag1 (0, (Tag3 (Tag1 ((("Arg", 366)), "arg"), 0, (0)), 100000000, 0, -131), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -128); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -129); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -130)]), 100000000, 0, -127)], (0)), 100000000, 0, -126), (Tag1 (0, (Tag3 ((("t_store", 359)), [(Tag3 (Tag1 ((("Arg", 366)), "act"), 0, (0)), 100000000, 0, -124); ((0), 100000000, 0, -125)], (0)), 100000000, 0, -123), (Tag3 (Tag1 ((("Arg", 366)), "act"), 0, (0)), 100000000, 0, -122), 0), 100000000, 0, -121), 0), 100000000, 0, -120), 0), 100000000, 0, -119), 0, (("lambda/switch.mli", 148, 5101, 5106), ("lambda/switch.mli", 152, 5221, 5239), 0), 0, Tag1 ("Switch", 48)), 0)])), 0, (("lambda/switch.mli", 135, 4787, 4787), ("lambda/switch.mli", 153, 5240, 5247), 0), Tag1 ("Switch", 49)), 0, 0)], "Switch", [("Switch", ("\171\016.\161\157\018`\163\194\222\202f\184\181\238r")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

    end

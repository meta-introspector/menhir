type 'a matching_function =
    Environ.env -> Evd.evar_map -> EConstr.constr -> 'a option
type testing_function = Environ.env -> Evd.evar_map -> EConstr.constr -> bool
val match_with_non_recursive_type :
  (EConstr.constr * EConstr.constr list) matching_function
val is_non_recursive_type : testing_function
val match_with_disjunction :
  ?strict:bool ->
  ?onlybinary:bool ->
  (EConstr.constr * EConstr.constr list) matching_function
val is_disjunction : ?strict:bool -> ?onlybinary:bool -> testing_function
val match_with_conjunction :
  ?strict:bool ->
  ?onlybinary:bool ->
  (EConstr.constr * EConstr.constr list) matching_function
val is_conjunction : ?strict:bool -> ?onlybinary:bool -> testing_function
val match_with_record :
  (EConstr.constr * EConstr.constr list) matching_function
val is_record : testing_function
val match_with_tuple :
  (EConstr.constr * EConstr.constr list * bool) matching_function
val is_tuple : testing_function
val match_with_empty_type : EConstr.constr matching_function
val is_empty_type : testing_function
val match_with_unit_or_eq_type : EConstr.constr matching_function
val is_unit_or_eq_type : testing_function
val is_unit_type : testing_function
val is_inductive_equality : Environ.env -> Names.inductive -> bool
val match_with_equality_type :
  (EConstr.constr * EConstr.constr list) matching_function
val is_equality_type : testing_function
val match_with_nottype : (EConstr.constr * EConstr.constr) matching_function
val is_nottype : testing_function
val match_with_forall_term :
  (Names.Name.t Context.binder_annot * EConstr.constr * EConstr.constr)
  matching_function
val is_forall_term : testing_function
val match_with_imp_term : (EConstr.constr * EConstr.constr) matching_function
val is_imp_term : testing_function
val has_nodep_prod_after : int -> testing_function
val has_nodep_prod : testing_function
val match_with_nodep_ind :
  (EConstr.constr * EConstr.constr list * int) matching_function
val is_nodep_ind : testing_function
val match_with_sigma_type :
  (EConstr.constr * EConstr.constr list) matching_function
val is_sigma_type : testing_function
type equation_kind =
    MonomorphicLeibnizEq of EConstr.constr * EConstr.constr
  | PolymorphicLeibnizEq of EConstr.constr * EConstr.constr * EConstr.constr
  | HeterogenousEq of EConstr.constr * EConstr.constr * EConstr.constr *
      EConstr.constr
exception NoEquationFound
val match_with_equation :
  Environ.env ->
  Evd.evar_map ->
  EConstr.constr ->
  Coqlib.coq_eq_data option * EConstr.constr * equation_kind
val find_eq_data_decompose :
  Environ.env ->
  Evd.evar_map ->
  EConstr.constr ->
  Coqlib.coq_eq_data * EConstr.EInstance.t *
  (EConstr.types * EConstr.constr * EConstr.constr)
val find_this_eq_data_decompose :
  Environ.env ->
  Evd.evar_map ->
  EConstr.constr ->
  Coqlib.coq_eq_data * EConstr.EInstance.t *
  (EConstr.types * EConstr.constr * EConstr.constr)
val find_eq_data :
  Environ.env ->
  Evd.evar_map ->
  EConstr.constr -> Coqlib.coq_eq_data * EConstr.EInstance.t * equation_kind
val find_sigma_data_decompose :
  Environ.env ->
  Evd.evar_map ->
  EConstr.constr ->
  Coqlib.coq_sigma_data *
  (EConstr.EInstance.t * EConstr.constr * EConstr.constr * EConstr.constr *
   EConstr.constr)
val match_sigma :
  Environ.env ->
  Evd.evar_map -> EConstr.constr -> EConstr.constr * EConstr.constr
val is_matching_sigma : Environ.env -> Evd.evar_map -> EConstr.constr -> bool
val match_eqdec :
  Environ.env ->
  Evd.evar_map ->
  EConstr.constr ->
  bool * Names.GlobRef.t * EConstr.constr * EConstr.constr * EConstr.constr
val is_matching_not : Environ.env -> Evd.evar_map -> EConstr.constr -> bool
val is_matching_imp_False :
  ("DEBUG:rule", [Tag1 (("matching_function", 1072), ([((("a")), 100000000, 0, -232)], 1, 0, 1, ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -235), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -234), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -233), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -232)], (0)), 100000000, 0, -231), 0), 100000000, 0, -230), 0), 100000000, 0, -229), 0), 100000000, 0, -228)), [25], [0], 0, 0, (("tactics/hipattern.mli", 46, 1951, 1951), ("tactics/hipattern.mli", 46, 1951, 2025), 0), 0, 0, 0, Tag1 ("Hipattern", 0)), 1, 0); Tag1 (("testing_function", 1073), (0, 0, 0, 1, ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -227), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -226), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -225), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -224), 0), 100000000, 0, -223), 0), 100000000, 0, -222), 0), 100000000, 0, -221)), 0, 0, 0, 0, (("tactics/hipattern.mli", 47, 2026, 2026), ("tactics/hipattern.mli", 47, 2026, 2091), 0), 0, 0, 0, Tag1 ("Hipattern", 1)), 1, 0); (("match_with_non_recursive_type", 1074), ((Tag3 ((("matching_function", 1072)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -218); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -220)], (0)), 100000000, 0, -219)]), 100000000, 0, -217)], (0)), 100000000, 0, -216), 0, (("tactics/hipattern.mli", 49, 2093, 2093), ("tactics/hipattern.mli", 49, 2093, 2169), 0), 0, Tag1 ("Hipattern", 2)), 0); (("is_non_recursive_type", 1075), ((Tag3 ((("testing_function", 1073)), 0, (0)), 100000000, 0, -215), 0, (("tactics/hipattern.mli", 50, 2170, 2170), ("tactics/hipattern.mli", 50, 2170, 2222), 0), 0, Tag1 ("Hipattern", 3)), 0); (("match_with_disjunction", 1076), ((Tag1 (Tag1 ("strict"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -214)], (0)), 100000000, 0, -213), (Tag1 (Tag1 ("onlybinary"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -212)], (0)), 100000000, 0, -211), (Tag3 ((("matching_function", 1072)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -208); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -210)], (0)), 100000000, 0, -209)]), 100000000, 0, -207)], (0)), 100000000, 0, -206), 0), 100000000, 0, -205), 0), 100000000, 0, -204), 0, (("tactics/hipattern.mli", 54, 2368, 2368), ("tactics/hipattern.mli", 54, 2368, 2473), 0), 0, Tag1 ("Hipattern", 4)), 0); (("is_disjunction", 1077), ((Tag1 (Tag1 ("strict"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -203)], (0)), 100000000, 0, -202), (Tag1 (Tag1 ("onlybinary"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -201)], (0)), 100000000, 0, -200), (Tag3 ((("testing_function", 1073)), 0, (0)), 100000000, 0, -199), 0), 100000000, 0, -198), 0), 100000000, 0, -197), 0, (("tactics/hipattern.mli", 55, 2474, 2474), ("tactics/hipattern.mli", 55, 2474, 2555), 0), 0, Tag1 ("Hipattern", 5)), 0); (("match_with_conjunction", 1078), ((Tag1 (Tag1 ("strict"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -196)], (0)), 100000000, 0, -195), (Tag1 (Tag1 ("onlybinary"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -194)], (0)), 100000000, 0, -193), (Tag3 ((("matching_function", 1072)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -190); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -192)], (0)), 100000000, 0, -191)]), 100000000, 0, -189)], (0)), 100000000, 0, -188), 0), 100000000, 0, -187), 0), 100000000, 0, -186), 0, (("tactics/hipattern.mli", 59, 2700, 2700), ("tactics/hipattern.mli", 59, 2700, 2805), 0), 0, Tag1 ("Hipattern", 6)), 0); (("is_conjunction", 1079), ((Tag1 (Tag1 ("strict"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -185)], (0)), 100000000, 0, -184), (Tag1 (Tag1 ("onlybinary"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -183)], (0)), 100000000, 0, -182), (Tag3 ((("testing_function", 1073)), 0, (0)), 100000000, 0, -181), 0), 100000000, 0, -180), 0), 100000000, 0, -179), 0, (("tactics/hipattern.mli", 60, 2806, 2806), ("tactics/hipattern.mli", 60, 2806, 2887), 0), 0, Tag1 ("Hipattern", 7)), 0); (("match_with_record", 1080), ((Tag3 ((("matching_function", 1072)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -176); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -178)], (0)), 100000000, 0, -177)]), 100000000, 0, -175)], (0)), 100000000, 0, -174), 0, (("tactics/hipattern.mli", 63, 2950, 2950), ("tactics/hipattern.mli", 63, 2950, 3019), 0), 0, Tag1 ("Hipattern", 8)), 0); (("is_record", 1081), ((Tag3 ((("testing_function", 1073)), 0, (0)), 100000000, 0, -173), 0, (("tactics/hipattern.mli", 64, 3020, 3020), ("tactics/hipattern.mli", 64, 3020, 3065), 0), 0, Tag1 ("Hipattern", 9)), 0); (("match_with_tuple", 1082), ((Tag3 ((("matching_function", 1072)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -169); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -171)], (0)), 100000000, 0, -170); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -172)]), 100000000, 0, -168)], (0)), 100000000, 0, -167), 0, (("tactics/hipattern.mli", 67, 3133, 3133), ("tactics/hipattern.mli", 67, 3133, 3209), 0), 0, Tag1 ("Hipattern", 10)), 0); (("is_tuple", 1083), ((Tag3 ((("testing_function", 1073)), 0, (0)), 100000000, 0, -166), 0, (("tactics/hipattern.mli", 68, 3210, 3210), ("tactics/hipattern.mli", 68, 3210, 3255), 0), 0, Tag1 ("Hipattern", 11)), 0); (("match_with_empty_type", 1084), ((Tag3 ((("matching_function", 1072)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -165)], (0)), 100000000, 0, -164), 0, (("tactics/hipattern.mli", 71, 3302, 3302), ("tactics/hipattern.mli", 71, 3302, 3355), 0), 0, Tag1 ("Hipattern", 12)), 0); (("is_empty_type", 1085), ((Tag3 ((("testing_function", 1073)), 0, (0)), 100000000, 0, -163), 0, (("tactics/hipattern.mli", 72, 3356, 3356), ("tactics/hipattern.mli", 72, 3356, 3401), 0), 0, Tag1 ("Hipattern", 13)), 0); (("match_with_unit_or_eq_type", 1086), ((Tag3 ((("matching_function", 1072)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -162)], (0)), 100000000, 0, -161), 0, (("tactics/hipattern.mli", 75, 3481, 3481), ("tactics/hipattern.mli", 75, 3481, 3538), 0), 0, Tag1 ("Hipattern", 14)), 0); (("is_unit_or_eq_type", 1087), ((Tag3 ((("testing_function", 1073)), 0, (0)), 100000000, 0, -160), 0, (("tactics/hipattern.mli", 76, 3539, 3539), ("tactics/hipattern.mli", 76, 3539, 3584), 0), 0, Tag1 ("Hipattern", 15)), 0); (("is_unit_type", 1088), ((Tag3 ((("testing_function", 1073)), 0, (0)), 100000000, 0, -159), 0, (("tactics/hipattern.mli", 79, 3653, 3653), ("tactics/hipattern.mli", 79, 3653, 3698), 0), 0, Tag1 ("Hipattern", 16)), 0); (("is_inductive_equality", 1089), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -158), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -157), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -156), 0), 100000000, 0, -155), 0), 100000000, 0, -154), 0, (("tactics/hipattern.mli", 82, 3780, 3780), ("tactics/hipattern.mli", 82, 3780, 3841), 0), 0, Tag1 ("Hipattern", 17)), 0); (("match_with_equality_type", 1090), ((Tag3 ((("matching_function", 1072)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -151); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -153)], (0)), 100000000, 0, -152)]), 100000000, 0, -150)], (0)), 100000000, 0, -149), 0, (("tactics/hipattern.mli", 83, 3842, 3842), ("tactics/hipattern.mli", 83, 3842, 3913), 0), 0, Tag1 ("Hipattern", 18)), 0); (("is_equality_type", 1091), ((Tag3 ((("testing_function", 1073)), 0, (0)), 100000000, 0, -148), 0, (("tactics/hipattern.mli", 84, 3914, 3914), ("tactics/hipattern.mli", 84, 3914, 3959), 0), 0, Tag1 ("Hipattern", 19)), 0); (("match_with_nottype", 1092), ((Tag3 ((("matching_function", 1072)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -146); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -147)]), 100000000, 0, -145)], (0)), 100000000, 0, -144), 0, (("tactics/hipattern.mli", 86, 3961, 3961), ("tactics/hipattern.mli", 86, 3961, 4025), 0), 0, Tag1 ("Hipattern", 20)), 0); (("is_nottype", 1093), ((Tag3 ((("testing_function", 1073)), 0, (0)), 100000000, 0, -143), 0, (("tactics/hipattern.mli", 87, 4026, 4026), ("tactics/hipattern.mli", 87, 4026, 4071), 0), 0, Tag1 ("Hipattern", 21)), 0); (("match_with_forall_term", 1094), ((Tag3 ((("matching_function", 1072)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -140)], (0)), 100000000, 0, -139); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -141); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -142)]), 100000000, 0, -138)], (0)), 100000000, 0, -137), 0, (("tactics/hipattern.mli", 89, 4073, 4073), ("tactics/hipattern.mli", 89, 4073, 4170), 0), 0, Tag1 ("Hipattern", 22)), 0); (("is_forall_term", 1095), ((Tag3 ((("testing_function", 1073)), 0, (0)), 100000000, 0, -136), 0, (("tactics/hipattern.mli", 90, 4171, 4171), ("tactics/hipattern.mli", 90, 4171, 4219), 0), 0, Tag1 ("Hipattern", 23)), 0); (("match_with_imp_term", 1096), ((Tag3 ((("matching_function", 1072)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -134); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -135)]), 100000000, 0, -133)], (0)), 100000000, 0, -132), 0, (("tactics/hipattern.mli", 92, 4221, 4221), ("tactics/hipattern.mli", 92, 4221, 4285), 0), 0, Tag1 ("Hipattern", 24)), 0); (("is_imp_term", 1097), ((Tag3 ((("testing_function", 1073)), 0, (0)), 100000000, 0, -131), 0, (("tactics/hipattern.mli", 93, 4286, 4286), ("tactics/hipattern.mli", 93, 4286, 4331), 0), 0, Tag1 ("Hipattern", 25)), 0); (("has_nodep_prod_after", 1098), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -130), (Tag3 ((("testing_function", 1073)), 0, (0)), 100000000, 0, -129), 0), 100000000, 0, -128), 0, (("tactics/hipattern.mli", 100, 4635, 4635), ("tactics/hipattern.mli", 100, 4635, 4687), 0), 0, Tag1 ("Hipattern", 26)), 0); (("has_nodep_prod", 1099), ((Tag3 ((("testing_function", 1073)), 0, (0)), 100000000, 0, -127), 0, (("tactics/hipattern.mli", 101, 4688, 4688), ("tactics/hipattern.mli", 101, 4688, 4733), 0), 0, Tag1 ("Hipattern", 27)), 0); (("match_with_nodep_ind", 1100), ((Tag3 ((("matching_function", 1072)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -123); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -125)], (0)), 100000000, 0, -124); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -126)]), 100000000, 0, -122)], (0)), 100000000, 0, -121), 0, (("tactics/hipattern.mli", 103, 4735, 4735), ("tactics/hipattern.mli", 103, 4735, 4810), 0), 0, Tag1 ("Hipattern", 28)), 0); (("is_nodep_ind", 1101), ((Tag3 ((("testing_function", 1073)), 0, (0)), 100000000, 0, -120), 0, (("tactics/hipattern.mli", 104, 4811, 4811), ("tactics/hipattern.mli", 104, 4811, 4856), 0), 0, Tag1 ("Hipattern", 29)), 0); (("match_with_sigma_type", 1102), ((Tag3 ((("matching_function", 1072)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -117); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -119)], (0)), 100000000, 0, -118)]), 100000000, 0, -116)], (0)), 100000000, 0, -115), 0, (("tactics/hipattern.mli", 106, 4858, 4858), ("tactics/hipattern.mli", 106, 4858, 4928), 0), 0, Tag1 ("Hipattern", 30)), 0); (("is_sigma_type", 1103), ((Tag3 ((("testing_function", 1073)), 0, (0)), 100000000, 0, -114), 0, (("tactics/hipattern.mli", 107, 4929, 4929), ("tactics/hipattern.mli", 107, 4929, 4975), 0), 0, Tag1 ("Hipattern", 31)), 0); Tag1 (("equation_kind", 1104), (0, 0, Tag1 ([(("MonomorphicLeibnizEq", 1042), ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -105); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -106)]), 0, (("tactics/hipattern.mli", 112, 5059, 5061), ("tactics/hipattern.mli", 112, 5059, 5102), 0), 0, Tag1 ("Hipattern", 33)); (("PolymorphicLeibnizEq", 1043), ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -107); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -108); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -109)]), 0, (("tactics/hipattern.mli", 113, 5103, 5105), ("tactics/hipattern.mli", 113, 5103, 5155), 0), 0, Tag1 ("Hipattern", 34)); (("HeterogenousEq", 1044), ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -110); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -111); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -112); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -113)]), 0, (("tactics/hipattern.mli", 114, 5156, 5158), ("tactics/hipattern.mli", 114, 5156, 5211), 0), 0, Tag1 ("Hipattern", 35))], 0), 1, 0, 0, 0, 0, 0, (("tactics/hipattern.mli", 111, 5038, 5038), ("tactics/hipattern.mli", 114, 5156, 5211), 0), 0, 0, 0, Tag1 ("Hipattern", 32)), 1, 0); Tag2 (("NoEquationFound", 1105), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Hipattern", 36)), 2, 0); (("match_with_equation", 1106), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -104), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -103), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -102), (Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Coqlib")), "coq_eq_data"), 0, (0)), 100000000, 0, -99)], (0)), 100000000, 0, -98); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -100); (Tag3 ((("equation_kind", 1104)), 0, (0)), 100000000, 0, -101)]), 100000000, 0, -97), 0), 100000000, 0, -96), 0), 100000000, 0, -95), 0), 100000000, 0, -94), 0, (("tactics/hipattern.mli", 118, 5240, 5240), ("tactics/hipattern.mli", 119, 5265, 5347), 0), 0, Tag1 ("Hipattern", 37)), 0); (("find_eq_data_decompose", 1107), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -93), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -92), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -91), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Coqlib")), "coq_eq_data"), 0, (0)), 100000000, 0, -85); (Tag3 (Tag1 (Tag1 ((Tag2 ("EConstr")), "EInstance"), "t"), 0, (0)), 100000000, 0, -86); (Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -88); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -89); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -90)]), 100000000, 0, -87)]), 100000000, 0, -84), 0), 100000000, 0, -83), 0), 100000000, 0, -82), 0), 100000000, 0, -81), 0, (("tactics/hipattern.mli", 125, 5541, 5541), ("tactics/hipattern.mli", 126, 5607, 5666), 0), 0, Tag1 ("Hipattern", 38)), 0); (("find_this_eq_data_decompose", 1108), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -80), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -79), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -78), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Coqlib")), "coq_eq_data"), 0, (0)), 100000000, 0, -72); (Tag3 (Tag1 (Tag1 ((Tag2 ("EConstr")), "EInstance"), "t"), 0, (0)), 100000000, 0, -73); (Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -75); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -76); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -77)]), 100000000, 0, -74)]), 100000000, 0, -71), 0), 100000000, 0, -70), 0), 100000000, 0, -69), 0), 100000000, 0, -68), 0, (("tactics/hipattern.mli", 129, 5746, 5746), ("tactics/hipattern.mli", 130, 5817, 5876), 0), 0, Tag1 ("Hipattern", 39)), 0); (("find_eq_data", 1109), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -67), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -66), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -65), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Coqlib")), "coq_eq_data"), 0, (0)), 100000000, 0, -62); (Tag3 (Tag1 (Tag1 ((Tag2 ("EConstr")), "EInstance"), "t"), 0, (0)), 100000000, 0, -63); (Tag3 ((("equation_kind", 1104)), 0, (0)), 100000000, 0, -64)]), 100000000, 0, -61), 0), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0, (("tactics/hipattern.mli", 133, 5957, 5957), ("tactics/hipattern.mli", 133, 5957, 6054), 0), 0, Tag1 ("Hipattern", 40)), 0); (("find_sigma_data_decompose", 1110), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -57), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -56), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -55), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Coqlib")), "coq_sigma_data"), 0, (0)), 100000000, 0, -48); (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("EConstr")), "EInstance"), "t"), 0, (0)), 100000000, 0, -50); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -51); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -52); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -53); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -54)]), 100000000, 0, -49)]), 100000000, 0, -47), 0), 100000000, 0, -46), 0), 100000000, 0, -45), 0), 100000000, 0, -44), 0, (("tactics/hipattern.mli", 137, 6150, 6150), ("tactics/hipattern.mli", 138, 6219, 6287), 0), 0, Tag1 ("Hipattern", 41)), 0); (("match_sigma", 1111), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -43), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -42), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -41), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -39); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -40)]), 100000000, 0, -38), 0), 100000000, 0, -37), 0), 100000000, 0, -36), 0), 100000000, 0, -35), 0, (("tactics/hipattern.mli", 141, 6352, 6352), ("tactics/hipattern.mli", 141, 6352, 6422), 0), 0, Tag1 ("Hipattern", 42)), 0); (("is_matching_sigma", 1112), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -34), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -33), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -32), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("tactics/hipattern.mli", 143, 6424, 6424), ("tactics/hipattern.mli", 143, 6424, 6489), 0), 0, Tag1 ("Hipattern", 43)), 0); (("match_eqdec", 1113), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -27), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -26), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -25), (Tag2 ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -20); (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -21); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -22); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -23); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -24)]), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("tactics/hipattern.mli", 147, 6633, 6633), ("tactics/hipattern.mli", 147, 6633, 6731), 0), 0, Tag1 ("Hipattern", 44)), 0); (("is_matching_not", 1114), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -15), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -14), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -13), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0), 100000000, 0, -10), 0), 100000000, 0, -9), 0, (("tactics/hipattern.mli", 150, 6757, 6757), ("tactics/hipattern.mli", 150, 6757, 6820), 0), 0, Tag1 ("Hipattern", 45)), 0); (("is_matching_imp_False", 1115), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -8), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -7), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -6), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("tactics/hipattern.mli", 151, 6821, 6821), ("tactics/hipattern.mli", 151, 6821, 6890), 0), 0, Tag1 ("Hipattern", 46)), 0)], "Hipattern", [("Hipattern", ("\023\248\147\161*t\174\180C\177\023\211\030\249\228^")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Unix", (":B72R\011\005Sj\189)\011\239PH\254")); ("UnivSubst", ("\190qu\031mc\130\181\003G]\132\"\219m)")); ("UnivProblem", ("6'\161\018\181\001.\253\000\141a6\171\1727\155")); ("UnivNames", ("%\151_\209%+JM$n\001\232\194n\178N")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UState", ("SD\203\215|\136\n\251\239\208\148\215C\n\167\005")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Summary", ("\148G\135\226\024L3\246\021\028U\146\164`\253\250")); ("Store", ("/dT\252\145\179pq\216{\181\206\190K+U")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Section", ("\245\207\b\021\142v=\155#w\246}\"4b\006")); ("Safe_typing", (")\250?\164\145\132\241\127\186\152h+\145\"\237l")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("Nativevalues", ("8:\007\025e\226c,\001\171\146#l\210\171\152")); ("Nativelib", ("V\239\205Y1\147E:,\176\196Hy\1483|")); ("Nativecode", ("\190\185\255\006m\012\210\163\138Rz\247\15283\183")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Monad", ("\244\171T\157\194p\187\160\149\195{\132\222\020\253\148")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hook", ("\183\194\223\003\155\169',\187\240a;E\b\1396")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Genlambda", ("\170}\024\241\141\222\136S\169\219\2212i\134KI")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evd", ("\211\205p\193\216\129r\006\239oN\142ar\196\175")); ("Evar_kinds", ("\023L\186\132\218}\254\221\185\198\220\200h\003{\021")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Entries", ("\172\201\198\221Ap\027_{\174\141C\021\";p")); ("EConstr", ("\201aW\156\157;N\004\201V\208\006L\166\211)")); ("Dyn", ("\131z`\205v\2306\007x\027&K.?;\169")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("Coqlib", ("'\226\164\143\129\221\158\224\247\247\160\190~\171\191\198")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conversion", ("\158\150&\195M\tv\127|\029\158RRK\211A")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CUnix", ("\140Zl\153\167\011J\015\005|th\247OTu")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CDebug", ("^4\210p7\239!3\138\138\213?\239`\250\157")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])
Environ.env -> Evd.evar_map -> EConstr.constr -> bool

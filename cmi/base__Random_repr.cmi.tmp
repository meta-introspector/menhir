module Repr :
  sig
    type t = (int64, Bigarray.int64_elt, Bigarray.c_layout) Bigarray.Array1.t
    val of_state : Random.State.t -> t
  end
val assign :
  Random.State.t Base__.Lazy.t -> Random.State.t Base__.Lazy.t -> unit
val make_default :
  Random.State.t Lazy.t -> Random.State.t Lazy.t Domain.DLS.key
("DEBUG:rule", [Tag3 (("Repr", 741), 0, (Tag1 ([Tag1 (("t", 745), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Bigarray"), "Array1"), "t"), [(Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -20); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Bigarray"), "int64_elt"), 0, (0)), 100000000, 0, -21); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Bigarray"), "c_layout"), 0, (0)), 100000000, 0, -22)], (0)), 100000000, 0, -19)), 0, 0, 0, 0, (("src/random_repr.ml", 5, 46, 48), ("src/random_repr.ml", 5, 46, 94), 0), 0, 0, 0, Tag1 ("Base__Random_repr", 0)), 1, 0); (("of_state", 746), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Random"), "State"), "t"), 0, (0)), 100000000, 0, -18), (Tag3 ((("t", 745)), 0, (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("src/random_repr.ml", 7, 96, 102), ("src/random_repr.ml", 7, 96, 110), 0), 0, Tag1 ("Base__Random_repr", 1)), 0)]), 0, (("src/random_repr.ml", 2, 1, 1), ("src/random_repr.ml", 8, 159, 162), 0), Tag1 ("Base__Random_repr", 2)), 0, 0); (("assign", 742), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Lazy"), "t"), [(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Random"), "State"), "t"), 0, (0)), 100000000, 0, -15)], (0)), 100000000, 0, -14), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Lazy"), "t"), [(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Random"), "State"), "t"), 0, (0)), 100000000, 0, -13)], (0)), 100000000, 0, -12), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11), 0), 100000000, 0, -10), 0), 100000000, 0, -9), 0, (("src/random_repr.ml", 10, 164, 168), ("src/random_repr.ml", 10, 164, 174), 0), 0, Tag1 ("Base__Random_repr", 3)), 0); (("make_default", 743), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lazy"), "t"), [(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Random"), "State"), "t"), 0, (0)), 100000000, 0, -8)], (0)), 100000000, 0, -7), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Domain"), "DLS"), "key"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lazy"), "t"), [(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Random"), "State"), "t"), 0, (0)), 100000000, 0, -8)], (0)), 100000000, 0, -7)], (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("src/random_repr.ml", 15, 316, 320), ("src/random_repr.ml", 15, 316, 332), 0), 0, Tag1 ("Base__Random_repr", 8)), 0); (("get_state", 744), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Domain"), "DLS"), "key"), [((0), 100000000, 0, -3)], (0)), 100000000, 0, -4), ((0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/random_repr.ml", 21, 496, 500), ("src/random_repr.ml", 21, 496, 509), 0), 0, Tag1 ("Base__Random_repr", 12)), 0)], "Base__Random_repr", [("Base__Random_repr", ("\176\240\170\245\184\163\2443\206e\205\193u?\2223")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Random", ("\020\005Xq\171\026\218\152X\135\254\023\133zK\200")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("Sexplib0__Sexpable", ("\251${\207(\249/z\242\255\250^\141\156\210e")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Base__Sexp", ("\154\187\171&\209=\153[\236\250!U\174`\190T")); ("Base__Ppx_hash_lib", ("\199\141\178\193\006\209L\007^\020(\131\224sn8")); ("Base__Ppx_compare_lib", ("\243\186~\233\228\199Ah\181.\223\004e\231\129S")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Monad_intf", ("\208\203\163\152\184O\130?\012:\168\247}\018\253\155")); ("Base__Monad", ("!\244\168\2352=\137Lm\219\129K\216\199\145\\")); ("Base__Lazy", ("@`\165\196 \235)\136ANe:p\169$\185")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Import", ("\014\187\247\141\187\181\142g\176:s_,\181\219\209")); ("Base__Hash_intf", ("h\004P\218\1531G\127\212\208A\024\140\164iq")); ("Base__Hash", ("\206Rc\194\234{s3\248\165\024\162\203{\206\206")); ("Base__Globalize", ("<\243w~.\180\196t\159\193\174[\227\139\215G")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158"))], [(0)])
val get_state : 'a Domain.DLS.key -> 'a

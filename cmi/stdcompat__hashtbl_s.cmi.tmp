module type S =
  sig
    type ('a, 'b) t = ('a, 'b) Hashtbl.t
    type statistics =
      Hashtbl.statistics = {
      num_bindings : int;
      num_buckets : int;
      max_bucket_length : int;
      bucket_histogram : int array;
    }
    module type HashedType =
      sig type t val equal : t -> t -> bool val hash : t -> int end
    module type S =
      sig
        type key
        type !'a t
        val create : int -> 'a t
        val clear : 'a t -> unit
        val reset : 'a t -> unit
        val copy : 'a t -> 'a t
        val add : 'a t -> key -> 'a -> unit
        val remove : 'a t -> key -> unit
        val find : 'a t -> key -> 'a
        val find_opt : 'a t -> key -> 'a option
        val find_all : 'a t -> key -> 'a list
        val replace : 'a t -> key -> 'a -> unit
        val mem : 'a t -> key -> bool
        val iter : (key -> 'a -> unit) -> 'a t -> unit
        val filter_map_inplace : (key -> 'a -> 'a option) -> 'a t -> unit
        val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
        val length : 'a t -> int
        val stats : 'a t -> statistics
        val to_seq : 'a t -> (key * 'a) Seq.t
        val to_seq_keys : 'a t -> key Seq.t
        val to_seq_values : 'a t -> 'a Seq.t
        val add_seq : 'a t -> (key * 'a) Seq.t -> unit
        val replace_seq : 'a t -> (key * 'a) Seq.t -> unit
        val of_seq : (key * 'a) Seq.t -> 'a t
      end
    module Make = Hashtbl.Make
    module type SeededHashedType =
      sig
        type t
        val equal : t -> t -> bool
        val seeded_hash : int -> t -> int
      end
    module type SeededS =
      sig
        type key
        type !'a t
        val create : ?random:bool -> int -> 'a t
        val clear : 'a t -> unit
        val reset : 'a t -> unit
        val copy : 'a t -> 'a t
        val add : 'a t -> key -> 'a -> unit
        val remove : 'a t -> key -> unit
        val find : 'a t -> key -> 'a
        val find_opt : 'a t -> key -> 'a option
        val find_all : 'a t -> key -> 'a list
        val replace : 'a t -> key -> 'a -> unit
        val mem : 'a t -> key -> bool
        val iter : (key -> 'a -> unit) -> 'a t -> unit
        val filter_map_inplace : (key -> 'a -> 'a option) -> 'a t -> unit
        val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
        val length : 'a t -> int
        val stats : 'a t -> statistics
        val to_seq : 'a t -> (key * 'a) Seq.t
        val to_seq_keys : 'a t -> key Seq.t
        val to_seq_values : 'a t -> 'a Seq.t
        val add_seq : 'a t -> (key * 'a) Seq.t -> unit
        val replace_seq : 'a t -> (key * 'a) Seq.t -> unit
        val of_seq : (key * 'a) Seq.t -> 'a t
      end
    module MakeSeeded = Hashtbl.MakeSeeded
    val rebuild : ?random:bool -> ('a, 'b) t -> ('a, 'b) t
    val to_seq : ('a, 'b) t -> ('a * 'b) Seq.t
    val to_seq_keys : ('a, 'b) t -> 'a Seq.t
    val to_seq_values : ('a, 'b) t -> 'b Seq.t
    val add_seq : ('a, 'b) t -> ('a * 'b) Seq.t -> unit
    val replace_seq : ('a, 'b) t -> ('a * 'b) Seq.t -> unit
    val of_seq : ('a * 'b) Seq.t -> ('a, 'b) t
    val find_opt : ('a, 'b) t -> 'a -> 'b option
    val filter_map_inplace : ('a -> 'b -> 'b option) -> ('a, 'b) t -> unit
    val is_randomized : unit -> bool
    val create : ?random:bool -> int -> ('a, 'b) t
    val reset : ('a, 'b) t -> unit
    val randomize : unit -> unit
    val stats : ('a, 'b) t -> statistics
    val seeded_hash : int -> 'a -> int
    val seeded_hash_param : int -> int -> int -> 'a -> int
    val length : ('a, 'b) t -> int
    val clear : ('a, 'b) t -> unit
    val copy : ('a, 'b) t -> ('a, 'b) t
    val add : ('a, 'b) t -> 'a -> 'b -> unit
    val find : ('a, 'b) t -> 'a -> 'b
    val find_all : ('a, 'b) t -> 'a -> 'b list
    val mem : ('a, 'b) t -> 'a -> bool
    val remove : ('a, 'b) t -> 'a -> unit
    val replace : ('a, 'b) t -> 'a -> 'b -> unit
    val iter : ('a -> 'b -> unit) -> ('a, 'b) t -> unit
    val fold : ('a -> 'b -> 'c -> 'c) -> ('a, 'b) t -> 'c -> 'c
    val hash : 'a -> int
    val hash_param : int -> int -> 'a -> int("DEBUG:rule", [Tag4 (("S", 766), ((Tag1 ([Tag1 (("t", 767), ([((("a")), 100000000, 0, -189); ((("b")), 100000000, 0, -190)], 2, 0, 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Hashtbl"), "t"), [((("a")), 100000000, 0, -189); ((("b")), 100000000, 0, -190)], (0)), 100000000, 0, -188)), [15; 15], [2; 2], 0, 0, (("stdcompat__hashtbl_s.mli", 3, 21, 21), ("stdcompat__hashtbl_s.mli", 3, 21, 59), 0), 0, 0, 0, Tag1 ("Stdcompat__hashtbl_s", 0)), 1, 0); Tag1 (("statistics", 768), (0, 0, [[(("num_bindings", 351), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -183), (("stdcompat__hashtbl_s.mli", 14, 180, 182), ("stdcompat__hashtbl_s.mli", 14, 180, 201), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 2)); (("num_buckets", 352), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -184), (("stdcompat__hashtbl_s.mli", 15, 202, 204), ("stdcompat__hashtbl_s.mli", 15, 202, 222), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 3)); (("max_bucket_length", 353), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -185), (("stdcompat__hashtbl_s.mli", 16, 223, 225), ("stdcompat__hashtbl_s.mli", 16, 223, 249), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 4)); (("bucket_histogram", 354), 0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -187)], (0)), 100000000, 0, -186), (("stdcompat__hashtbl_s.mli", 17, 250, 252), ("stdcompat__hashtbl_s.mli", 17, 250, 279), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 5))]], 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Hashtbl"), "statistics"), 0, (0)), 100000000, 0, -182)), 0, 0, 0, 0, (("stdcompat__hashtbl_s.mli", 12, 137, 137), ("stdcompat__hashtbl_s.mli", 17, 250, 281), 0), 0, 0, 0, Tag1 ("Stdcompat__hashtbl_s", 1)), 1, 0); Tag4 (("HashedType", 769), ((Tag1 ([Tag1 (("t", 804), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("stdcompat__hashtbl_s.mli", 37, 646, 650), ("stdcompat__hashtbl_s.mli", 37, 646, 656), 0), 0, 0, 0, Tag1 ("Stdcompat__hashtbl_s", 6)), 1, 0); (("equal", 805), ((Tag1 (0, (Tag3 ((("t", 804)), 0, (0)), 100000000, 0, -198), (Tag1 (0, (Tag3 ((("t", 804)), 0, (0)), 100000000, 0, -197), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -196), 0), 100000000, 0, -195), 0), 100000000, 0, -194), 0, (("stdcompat__hashtbl_s.mli", 37, 646, 657), ("stdcompat__hashtbl_s.mli", 37, 646, 683), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 7)), 0); (("hash", 806), ((Tag1 (0, (Tag3 ((("t", 804)), 0, (0)), 100000000, 0, -193), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -192), 0), 100000000, 0, -191), 0, (("stdcompat__hashtbl_s.mli", 37, 646, 684), ("stdcompat__hashtbl_s.mli", 37, 646, 703), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 8)), 0)])), 0, (("stdcompat__hashtbl_s.mli", 36, 621, 621), ("stdcompat__hashtbl_s.mli", 37, 646, 707), 0), Tag1 ("Stdcompat__hashtbl_s", 9)), 0); Tag4 (("S", 770), ((Tag1 ([Tag1 (("key", 807), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("stdcompat__hashtbl_s.mli", 42, 765, 769), ("stdcompat__hashtbl_s.mli", 42, 765, 777), 0), 0, 0, 0, Tag1 ("Stdcompat__hashtbl_s", 10)), 1, 0); Tag1 (("t", 808), ([((("a")), 100000000, 0, -331)], 1, 0, 1, 0, [15], [2], 0, 0, (("stdcompat__hashtbl_s.mli", 44, 779, 779), ("stdcompat__hashtbl_s.mli", 44, 779, 789), 0), 0, 0, 0, Tag1 ("Stdcompat__hashtbl_s", 11)), 1, 0); (("create", 809), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -330), (Tag3 ((("t", 808)), [((("a")), 100000000, 0, -329)], (0)), 100000000, 0, -328), 0), 100000000, 0, -327), 0, (("stdcompat__hashtbl_s.mli", 49, 805, 808), ("stdcompat__hashtbl_s.mli", 49, 805, 832), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 12)), 0); (("clear", 810), ((Tag1 (0, (Tag3 ((("t", 808)), [((("a")), 100000000, 0, -326)], (0)), 100000000, 0, -325), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -324), 0), 100000000, 0, -323), 0, (("stdcompat__hashtbl_s.mli", 50, 833, 833), ("stdcompat__hashtbl_s.mli", 50, 833, 857), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 13)), 0); (("reset", 811), ((Tag1 (0, (Tag3 ((("t", 808)), [((("a")), 100000000, 0, -322)], (0)), 100000000, 0, -321), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -320), 0), 100000000, 0, -319), 0, (("stdcompat__hashtbl_s.mli", 50, 833, 858), ("stdcompat__hashtbl_s.mli", 50, 833, 882), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 14)), 0); (("copy", 812), ((Tag1 (0, (Tag3 ((("t", 808)), [((("a")), 100000000, 0, -317)], (0)), 100000000, 0, -318), (Tag3 ((("t", 808)), [((("a")), 100000000, 0, -317)], (0)), 100000000, 0, -316), 0), 100000000, 0, -315), 0, (("stdcompat__hashtbl_s.mli", 50, 833, 883), ("stdcompat__hashtbl_s.mli", 50, 833, 906), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 15)), 0); (("add", 813), ((Tag1 (0, (Tag3 ((("t", 808)), [((("a")), 100000000, 0, -312)], (0)), 100000000, 0, -314), (Tag1 (0, (Tag3 ((("key", 807)), 0, (0)), 100000000, 0, -313), (Tag1 (0, ((("a")), 100000000, 0, -312), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -311), 0), 100000000, 0, -310), 0), 100000000, 0, -309), 0), 100000000, 0, -308), 0, (("stdcompat__hashtbl_s.mli", 51, 907, 907), ("stdcompat__hashtbl_s.mli", 51, 907, 942), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 16)), 0); (("remove", 814), ((Tag1 (0, (Tag3 ((("t", 808)), [((("a")), 100000000, 0, -307)], (0)), 100000000, 0, -306), (Tag1 (0, (Tag3 ((("key", 807)), 0, (0)), 100000000, 0, -305), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -304), 0), 100000000, 0, -303), 0), 100000000, 0, -302), 0, (("stdcompat__hashtbl_s.mli", 51, 907, 943), ("stdcompat__hashtbl_s.mli", 51, 907, 975), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 17)), 0); (("find", 815), ((Tag1 (0, (Tag3 ((("t", 808)), [((("a")), 100000000, 0, -299)], (0)), 100000000, 0, -301), (Tag1 (0, (Tag3 ((("key", 807)), 0, (0)), 100000000, 0, -300), ((("a")), 100000000, 0, -299), 0), 100000000, 0, -298), 0), 100000000, 0, -297), 0, (("stdcompat__hashtbl_s.mli", 52, 976, 976), ("stdcompat__hashtbl_s.mli", 52, 976, 1004), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 18)), 0); (("find_opt", 816), ((Tag1 (0, (Tag3 ((("t", 808)), [((("a")), 100000000, 0, -294)], (0)), 100000000, 0, -296), (Tag1 (0, (Tag3 ((("key", 807)), 0, (0)), 100000000, 0, -295), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -294)], (0)), 100000000, 0, -293), 0), 100000000, 0, -292), 0), 100000000, 0, -291), 0, (("stdcompat__hashtbl_s.mli", 52, 976, 1005), ("stdcompat__hashtbl_s.mli", 52, 976, 1044), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 19)), 0); (("find_all", 817), ((Tag1 (0, (Tag3 ((("t", 808)), [((("a")), 100000000, 0, -288)], (0)), 100000000, 0, -290), (Tag1 (0, (Tag3 ((("key", 807)), 0, (0)), 100000000, 0, -289), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -288)], (0)), 100000000, 0, -287), 0), 100000000, 0, -286), 0), 100000000, 0, -285), 0, (("stdcompat__hashtbl_s.mli", 53, 1045, 1045), ("stdcompat__hashtbl_s.mli", 53, 1045, 1082), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 20)), 0); (("replace", 818), ((Tag1 (0, (Tag3 ((("t", 808)), [((("a")), 100000000, 0, -282)], (0)), 100000000, 0, -284), (Tag1 (0, (Tag3 ((("key", 807)), 0, (0)), 100000000, 0, -283), (Tag1 (0, ((("a")), 100000000, 0, -282), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -281), 0), 100000000, 0, -280), 0), 100000000, 0, -279), 0), 100000000, 0, -278), 0, (("stdcompat__hashtbl_s.mli", 53, 1045, 1083), ("stdcompat__hashtbl_s.mli", 53, 1045, 1122), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 21)), 0); (("mem", 819), ((Tag1 (0, (Tag3 ((("t", 808)), [((("a")), 100000000, 0, -277)], (0)), 100000000, 0, -276), (Tag1 (0, (Tag3 ((("key", 807)), 0, (0)), 100000000, 0, -275), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -274), 0), 100000000, 0, -273), 0), 100000000, 0, -272), 0, (("stdcompat__hashtbl_s.mli", 54, 1123, 1123), ("stdcompat__hashtbl_s.mli", 54, 1123, 1152), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 22)), 0); (("iter", 820), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 807)), 0, (0)), 100000000, 0, -271), (Tag1 (0, ((("a")), 100000000, 0, -267), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -270), 0), 100000000, 0, -269), 0), 100000000, 0, -268), (Tag1 (0, (Tag3 ((("t", 808)), [((("a")), 100000000, 0, -267)], (0)), 100000000, 0, -266), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -265), 0), 100000000, 0, -264), 0), 100000000, 0, -263), 0, (("stdcompat__hashtbl_s.mli", 54, 1123, 1153), ("stdcompat__hashtbl_s.mli", 54, 1123, 1199), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 23)), 0); (("filter_map_inplace", 821), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 807)), 0, (0)), 100000000, 0, -262), (Tag1 (0, ((("a")), 100000000, 0, -258), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -258)], (0)), 100000000, 0, -261), 0), 100000000, 0, -260), 0), 100000000, 0, -259), (Tag1 (0, (Tag3 ((("t", 808)), [((("a")), 100000000, 0, -258)], (0)), 100000000, 0, -257), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -256), 0), 100000000, 0, -255), 0), 100000000, 0, -254), 0, (("stdcompat__hashtbl_s.mli", 55, 1200, 1200), ("stdcompat__hashtbl_s.mli", 55, 1200, 1265), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 24)), 0); (("fold", 822), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 807)), 0, (0)), 100000000, 0, -253), (Tag1 (0, ((("a")), 100000000, 0, -249), (Tag1 (0, ((("b")), 100000000, 0, -247), ((("b")), 100000000, 0, -247), 0), 100000000, 0, -252), 0), 100000000, 0, -251), 0), 100000000, 0, -250), (Tag1 (0, (Tag3 ((("t", 808)), [((("a")), 100000000, 0, -249)], (0)), 100000000, 0, -248), (Tag1 (0, ((("b")), 100000000, 0, -247), ((("b")), 100000000, 0, -247), 0), 100000000, 0, -246), 0), 100000000, 0, -245), 0), 100000000, 0, -244), 0, (("stdcompat__hashtbl_s.mli", 56, 1266, 1266), ("stdcompat__hashtbl_s.mli", 56, 1266, 1320), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 25)), 0); (("length", 823), ((Tag1 (0, (Tag3 ((("t", 808)), [((("a")), 100000000, 0, -243)], (0)), 100000000, 0, -242), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -241), 0), 100000000, 0, -240), 0, (("stdcompat__hashtbl_s.mli", 57, 1321, 1321), ("stdcompat__hashtbl_s.mli", 57, 1321, 1345), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 26)), 0); (("stats", 824), ((Tag1 (0, (Tag3 ((("t", 808)), [((("a")), 100000000, 0, -239)], (0)), 100000000, 0, -238), (Tag3 ((("statistics", 768)), 0, (0)), 100000000, 0, -237), 0), 100000000, 0, -236), 0, (("stdcompat__hashtbl_s.mli", 57, 1321, 1346), ("stdcompat__hashtbl_s.mli", 57, 1321, 1376), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 27)), 0); (("to_seq", 825), ((Tag1 (0, (Tag3 ((("t", 808)), [((("a")), 100000000, 0, -234)], (0)), 100000000, 0, -235), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 807)), 0, (0)), 100000000, 0, -233); ((("a")), 100000000, 0, -234)]), 100000000, 0, -232)], (0)), 100000000, 0, -231), 0), 100000000, 0, -230), 0, (("stdcompat__hashtbl_s.mli", 58, 1377, 1377), ("stdcompat__hashtbl_s.mli", 58, 1377, 1414), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 28)), 0); (("to_seq_keys", 826), ((Tag1 (0, (Tag3 ((("t", 808)), [((("a")), 100000000, 0, -229)], (0)), 100000000, 0, -228), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("key", 807)), 0, (0)), 100000000, 0, -227)], (0)), 100000000, 0, -226), 0), 100000000, 0, -225), 0, (("stdcompat__hashtbl_s.mli", 58, 1377, 1415), ("stdcompat__hashtbl_s.mli", 58, 1377, 1450), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 29)), 0); (("to_seq_values", 827), ((Tag1 (0, (Tag3 ((("t", 808)), [((("a")), 100000000, 0, -223)], (0)), 100000000, 0, -224), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [((("a")), 100000000, 0, -223)], (0)), 100000000, 0, -222), 0), 100000000, 0, -221), 0, (("stdcompat__hashtbl_s.mli", 59, 1451, 1451), ("stdcompat__hashtbl_s.mli", 59, 1451, 1487), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 30)), 0); (("add_seq", 828), ((Tag1 (0, (Tag3 ((("t", 808)), [((("a")), 100000000, 0, -219)], (0)), 100000000, 0, -220), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 807)), 0, (0)), 100000000, 0, -218); ((("a")), 100000000, 0, -219)]), 100000000, 0, -217)], (0)), 100000000, 0, -216), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -215), 0), 100000000, 0, -214), 0), 100000000, 0, -213), 0, (("stdcompat__hashtbl_s.mli", 60, 1488, 1488), ("stdcompat__hashtbl_s.mli", 60, 1488, 1534), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 31)), 0); (("replace_seq", 829), ((Tag1 (0, (Tag3 ((("t", 808)), [((("a")), 100000000, 0, -211)], (0)), 100000000, 0, -212), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 807)), 0, (0)), 100000000, 0, -210); ((("a")), 100000000, 0, -211)]), 100000000, 0, -209)], (0)), 100000000, 0, -208), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -207), 0), 100000000, 0, -206), 0), 100000000, 0, -205), 0, (("stdcompat__hashtbl_s.mli", 61, 1535, 1535), ("stdcompat__hashtbl_s.mli", 61, 1535, 1585), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 32)), 0); (("of_seq", 830), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 807)), 0, (0)), 100000000, 0, -204); ((("a")), 100000000, 0, -201)]), 100000000, 0, -203)], (0)), 100000000, 0, -202), (Tag3 ((("t", 808)), [((("a")), 100000000, 0, -201)], (0)), 100000000, 0, -200), 0), 100000000, 0, -199), 0, (("stdcompat__hashtbl_s.mli", 62, 1586, 1586), ("stdcompat__hashtbl_s.mli", 62, 1586, 1623), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 33)), 0)])), 0, (("stdcompat__hashtbl_s.mli", 41, 749, 749), ("stdcompat__hashtbl_s.mli", 62, 1586, 1627), 0), Tag1 ("Stdcompat__hashtbl_s", 34)), 0); Tag3 (("Make", 771), 1, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Hashtbl"), "Make")), 0, (("stdcompat__hashtbl_s.mli", 113, 3654, 3654), ("stdcompat__hashtbl_s.mli", 113, 3654, 3680), 0), Tag1 ("Stdcompat__hashtbl_s", 35)), 0, 0); Tag4 (("SeededHashedType", 772), ((Tag1 ([Tag1 (("t", 831), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("stdcompat__hashtbl_s.mli", 138, 4750, 4754), ("stdcompat__hashtbl_s.mli", 138, 4750, 4760), 0), 0, 0, 0, Tag1 ("Stdcompat__hashtbl_s", 36)), 1, 0); (("equal", 832), ((Tag1 (0, (Tag3 ((("t", 831)), 0, (0)), 100000000, 0, -341), (Tag1 (0, (Tag3 ((("t", 831)), 0, (0)), 100000000, 0, -340), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -339), 0), 100000000, 0, -338), 0), 100000000, 0, -337), 0, (("stdcompat__hashtbl_s.mli", 138, 4750, 4761), ("stdcompat__hashtbl_s.mli", 138, 4750, 4787), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 37)), 0); (("seeded_hash", 833), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -336), (Tag1 (0, (Tag3 ((("t", 831)), 0, (0)), 100000000, 0, -335), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -334), 0), 100000000, 0, -333), 0), 100000000, 0, -332), 0, (("stdcompat__hashtbl_s.mli", 138, 4750, 4788), ("stdcompat__hashtbl_s.mli", 138, 4750, 4821), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 38)), 0)])), 0, (("stdcompat__hashtbl_s.mli", 137, 4719, 4719), ("stdcompat__hashtbl_s.mli", 138, 4750, 4825), 0), Tag1 ("Stdcompat__hashtbl_s", 39)), 0); Tag4 (("SeededS", 773), ((Tag1 ([Tag1 (("key", 834), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("stdcompat__hashtbl_s.mli", 142, 4850, 4854), ("stdcompat__hashtbl_s.mli", 142, 4850, 4862), 0), 0, 0, 0, Tag1 ("Stdcompat__hashtbl_s", 40)), 1, 0); Tag1 (("t", 835), ([((("a")), 100000000, 0, -477)], 1, 0, 1, 0, [15], [2], 0, 0, (("stdcompat__hashtbl_s.mli", 144, 4864, 4864), ("stdcompat__hashtbl_s.mli", 144, 4864, 4874), 0), 0, 0, 0, Tag1 ("Stdcompat__hashtbl_s", 41)), 1, 0); (("create", 836), ((Tag1 (Tag1 ("random"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -476)], (0)), 100000000, 0, -475), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -474), (Tag3 ((("t", 835)), [((("a")), 100000000, 0, -473)], (0)), 100000000, 0, -472), 0), 100000000, 0, -471), 0), 100000000, 0, -470), 0, (("stdcompat__hashtbl_s.mli", 149, 4890, 4893), ("stdcompat__hashtbl_s.mli", 149, 4890, 4933), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 42)), 0); (("clear", 837), ((Tag1 (0, (Tag3 ((("t", 835)), [((("a")), 100000000, 0, -469)], (0)), 100000000, 0, -468), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -467), 0), 100000000, 0, -466), 0, (("stdcompat__hashtbl_s.mli", 150, 4934, 4934), ("stdcompat__hashtbl_s.mli", 150, 4934, 4958), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 43)), 0); (("reset", 838), ((Tag1 (0, (Tag3 ((("t", 835)), [((("a")), 100000000, 0, -465)], (0)), 100000000, 0, -464), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -463), 0), 100000000, 0, -462), 0, (("stdcompat__hashtbl_s.mli", 150, 4934, 4959), ("stdcompat__hashtbl_s.mli", 150, 4934, 4983), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 44)), 0); (("copy", 839), ((Tag1 (0, (Tag3 ((("t", 835)), [((("a")), 100000000, 0, -460)], (0)), 100000000, 0, -461), (Tag3 ((("t", 835)), [((("a")), 100000000, 0, -460)], (0)), 100000000, 0, -459), 0), 100000000, 0, -458), 0, (("stdcompat__hashtbl_s.mli", 150, 4934, 4984), ("stdcompat__hashtbl_s.mli", 150, 4934, 5007), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 45)), 0); (("add", 840), ((Tag1 (0, (Tag3 ((("t", 835)), [((("a")), 100000000, 0, -455)], (0)), 100000000, 0, -457), (Tag1 (0, (Tag3 ((("key", 834)), 0, (0)), 100000000, 0, -456), (Tag1 (0, ((("a")), 100000000, 0, -455), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -454), 0), 100000000, 0, -453), 0), 100000000, 0, -452), 0), 100000000, 0, -451), 0, (("stdcompat__hashtbl_s.mli", 151, 5008, 5008), ("stdcompat__hashtbl_s.mli", 151, 5008, 5043), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 46)), 0); (("remove", 841), ((Tag1 (0, (Tag3 ((("t", 835)), [((("a")), 100000000, 0, -450)], (0)), 100000000, 0, -449), (Tag1 (0, (Tag3 ((("key", 834)), 0, (0)), 100000000, 0, -448), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -447), 0), 100000000, 0, -446), 0), 100000000, 0, -445), 0, (("stdcompat__hashtbl_s.mli", 151, 5008, 5044), ("stdcompat__hashtbl_s.mli", 151, 5008, 5076), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 47)), 0); (("find", 842), ((Tag1 (0, (Tag3 ((("t", 835)), [((("a")), 100000000, 0, -442)], (0)), 100000000, 0, -444), (Tag1 (0, (Tag3 ((("key", 834)), 0, (0)), 100000000, 0, -443), ((("a")), 100000000, 0, -442), 0), 100000000, 0, -441), 0), 100000000, 0, -440), 0, (("stdcompat__hashtbl_s.mli", 152, 5077, 5077), ("stdcompat__hashtbl_s.mli", 152, 5077, 5105), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 48)), 0); (("find_opt", 843), ((Tag1 (0, (Tag3 ((("t", 835)), [((("a")), 100000000, 0, -437)], (0)), 100000000, 0, -439), (Tag1 (0, (Tag3 ((("key", 834)), 0, (0)), 100000000, 0, -438), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -437)], (0)), 100000000, 0, -436), 0), 100000000, 0, -435), 0), 100000000, 0, -434), 0, (("stdcompat__hashtbl_s.mli", 152, 5077, 5106), ("stdcompat__hashtbl_s.mli", 152, 5077, 5145), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 49)), 0); (("find_all", 844), ((Tag1 (0, (Tag3 ((("t", 835)), [((("a")), 100000000, 0, -431)], (0)), 100000000, 0, -433), (Tag1 (0, (Tag3 ((("key", 834)), 0, (0)), 100000000, 0, -432), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -431)], (0)), 100000000, 0, -430), 0), 100000000, 0, -429), 0), 100000000, 0, -428), 0, (("stdcompat__hashtbl_s.mli", 153, 5146, 5146), ("stdcompat__hashtbl_s.mli", 153, 5146, 5183), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 50)), 0); (("replace", 845), ((Tag1 (0, (Tag3 ((("t", 835)), [((("a")), 100000000, 0, -425)], (0)), 100000000, 0, -427), (Tag1 (0, (Tag3 ((("key", 834)), 0, (0)), 100000000, 0, -426), (Tag1 (0, ((("a")), 100000000, 0, -425), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -424), 0), 100000000, 0, -423), 0), 100000000, 0, -422), 0), 100000000, 0, -421), 0, (("stdcompat__hashtbl_s.mli", 153, 5146, 5184), ("stdcompat__hashtbl_s.mli", 153, 5146, 5223), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 51)), 0); (("mem", 846), ((Tag1 (0, (Tag3 ((("t", 835)), [((("a")), 100000000, 0, -420)], (0)), 100000000, 0, -419), (Tag1 (0, (Tag3 ((("key", 834)), 0, (0)), 100000000, 0, -418), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -417), 0), 100000000, 0, -416), 0), 100000000, 0, -415), 0, (("stdcompat__hashtbl_s.mli", 154, 5224, 5224), ("stdcompat__hashtbl_s.mli", 154, 5224, 5253), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 52)), 0); (("iter", 847), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 834)), 0, (0)), 100000000, 0, -414), (Tag1 (0, ((("a")), 100000000, 0, -410), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -413), 0), 100000000, 0, -412), 0), 100000000, 0, -411), (Tag1 (0, (Tag3 ((("t", 835)), [((("a")), 100000000, 0, -410)], (0)), 100000000, 0, -409), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -408), 0), 100000000, 0, -407), 0), 100000000, 0, -406), 0, (("stdcompat__hashtbl_s.mli", 154, 5224, 5254), ("stdcompat__hashtbl_s.mli", 154, 5224, 5300), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 53)), 0); (("filter_map_inplace", 848), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 834)), 0, (0)), 100000000, 0, -405), (Tag1 (0, ((("a")), 100000000, 0, -401), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -401)], (0)), 100000000, 0, -404), 0), 100000000, 0, -403), 0), 100000000, 0, -402), (Tag1 (0, (Tag3 ((("t", 835)), [((("a")), 100000000, 0, -401)], (0)), 100000000, 0, -400), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -399), 0), 100000000, 0, -398), 0), 100000000, 0, -397), 0, (("stdcompat__hashtbl_s.mli", 155, 5301, 5301), ("stdcompat__hashtbl_s.mli", 155, 5301, 5366), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 54)), 0); (("fold", 849), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 834)), 0, (0)), 100000000, 0, -396), (Tag1 (0, ((("a")), 100000000, 0, -392), (Tag1 (0, ((("b")), 100000000, 0, -390), ((("b")), 100000000, 0, -390), 0), 100000000, 0, -395), 0), 100000000, 0, -394), 0), 100000000, 0, -393), (Tag1 (0, (Tag3 ((("t", 835)), [((("a")), 100000000, 0, -392)], (0)), 100000000, 0, -391), (Tag1 (0, ((("b")), 100000000, 0, -390), ((("b")), 100000000, 0, -390), 0), 100000000, 0, -389), 0), 100000000, 0, -388), 0), 100000000, 0, -387), 0, (("stdcompat__hashtbl_s.mli", 156, 5367, 5367), ("stdcompat__hashtbl_s.mli", 156, 5367, 5421), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 55)), 0); (("length", 850), ((Tag1 (0, (Tag3 ((("t", 835)), [((("a")), 100000000, 0, -386)], (0)), 100000000, 0, -385), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -384), 0), 100000000, 0, -383), 0, (("stdcompat__hashtbl_s.mli", 157, 5422, 5422), ("stdcompat__hashtbl_s.mli", 157, 5422, 5446), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 56)), 0); (("stats", 851), ((Tag1 (0, (Tag3 ((("t", 835)), [((("a")), 100000000, 0, -382)], (0)), 100000000, 0, -381), (Tag3 ((("statistics", 768)), 0, (0)), 100000000, 0, -380), 0), 100000000, 0, -379), 0, (("stdcompat__hashtbl_s.mli", 157, 5422, 5447), ("stdcompat__hashtbl_s.mli", 157, 5422, 5477), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 57)), 0); (("to_seq", 852), ((Tag1 (0, (Tag3 ((("t", 835)), [((("a")), 100000000, 0, -377)], (0)), 100000000, 0, -378), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 834)), 0, (0)), 100000000, 0, -376); ((("a")), 100000000, 0, -377)]), 100000000, 0, -375)], (0)), 100000000, 0, -374), 0), 100000000, 0, -373), 0, (("stdcompat__hashtbl_s.mli", 158, 5478, 5478), ("stdcompat__hashtbl_s.mli", 158, 5478, 5515), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 58)), 0); (("to_seq_keys", 853), ((Tag1 (0, (Tag3 ((("t", 835)), [((("a")), 100000000, 0, -372)], (0)), 100000000, 0, -371), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("key", 834)), 0, (0)), 100000000, 0, -370)], (0)), 100000000, 0, -369), 0), 100000000, 0, -368), 0, (("stdcompat__hashtbl_s.mli", 158, 5478, 5516), ("stdcompat__hashtbl_s.mli", 158, 5478, 5551), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 59)), 0); (("to_seq_values", 854), ((Tag1 (0, (Tag3 ((("t", 835)), [((("a")), 100000000, 0, -366)], (0)), 100000000, 0, -367), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [((("a")), 100000000, 0, -366)], (0)), 100000000, 0, -365), 0), 100000000, 0, -364), 0, (("stdcompat__hashtbl_s.mli", 159, 5552, 5552), ("stdcompat__hashtbl_s.mli", 159, 5552, 5588), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 60)), 0); (("add_seq", 855), ((Tag1 (0, (Tag3 ((("t", 835)), [((("a")), 100000000, 0, -362)], (0)), 100000000, 0, -363), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 834)), 0, (0)), 100000000, 0, -361); ((("a")), 100000000, 0, -362)]), 100000000, 0, -360)], (0)), 100000000, 0, -359), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -358), 0), 100000000, 0, -357), 0), 100000000, 0, -356), 0, (("stdcompat__hashtbl_s.mli", 160, 5589, 5589), ("stdcompat__hashtbl_s.mli", 160, 5589, 5635), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 61)), 0); (("replace_seq", 856), ((Tag1 (0, (Tag3 ((("t", 835)), [((("a")), 100000000, 0, -354)], (0)), 100000000, 0, -355), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 834)), 0, (0)), 100000000, 0, -353); ((("a")), 100000000, 0, -354)]), 100000000, 0, -352)], (0)), 100000000, 0, -351), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -350), 0), 100000000, 0, -349), 0), 100000000, 0, -348), 0, (("stdcompat__hashtbl_s.mli", 161, 5636, 5636), ("stdcompat__hashtbl_s.mli", 161, 5636, 5686), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 62)), 0); (("of_seq", 857), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 834)), 0, (0)), 100000000, 0, -347); ((("a")), 100000000, 0, -344)]), 100000000, 0, -346)], (0)), 100000000, 0, -345), (Tag3 ((("t", 835)), [((("a")), 100000000, 0, -344)], (0)), 100000000, 0, -343), 0), 100000000, 0, -342), 0, (("stdcompat__hashtbl_s.mli", 162, 5687, 5687), ("stdcompat__hashtbl_s.mli", 162, 5687, 5724), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 63)), 0)])), 0, (("stdcompat__hashtbl_s.mli", 141, 4828, 4828), ("stdcompat__hashtbl_s.mli", 162, 5687, 5728), 0), Tag1 ("Stdcompat__hashtbl_s", 64)), 0); Tag3 (("MakeSeeded", 774), 1, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Hashtbl"), "MakeSeeded")), 0, (("stdcompat__hashtbl_s.mli", 213, 7799, 7799), ("stdcompat__hashtbl_s.mli", 213, 7799, 7837), 0), Tag1 ("Stdcompat__hashtbl_s", 65)), 0, 0); (("rebuild", 775), ((Tag1 (Tag1 ("random"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -181)], (0)), 100000000, 0, -180), (Tag1 (0, (Tag3 ((("t", 767)), [((("a")), 100000000, 0, -177); ((("b")), 100000000, 0, -178)], (0)), 100000000, 0, -179), (Tag3 ((("t", 767)), [((("a")), 100000000, 0, -177); ((("b")), 100000000, 0, -178)], (0)), 100000000, 0, -176), 0), 100000000, 0, -175), 0), 100000000, 0, -174), 0, (("stdcompat__hashtbl_s.mli", 236, 8876, 8876), ("stdcompat__hashtbl_s.mli", 236, 8876, 8930), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 66)), 0); (("to_seq", 776), ((Tag1 (0, (Tag3 ((("t", 767)), [((("a")), 100000000, 0, -171); ((("b")), 100000000, 0, -172)], (0)), 100000000, 0, -173), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([((("a")), 100000000, 0, -171); ((("b")), 100000000, 0, -172)]), 100000000, 0, -170)], (0)), 100000000, 0, -169), 0), 100000000, 0, -168), 0, (("stdcompat__hashtbl_s.mli", 240, 9010, 9010), ("stdcompat__hashtbl_s.mli", 240, 9010, 9052), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 67)), 0); (("to_seq_keys", 777), ((Tag1 (0, (Tag3 ((("t", 767)), [((("a")), 100000000, 0, -165); ((("b")), 100000000, 0, -167)], (0)), 100000000, 0, -166), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [((("a")), 100000000, 0, -165)], (0)), 100000000, 0, -164), 0), 100000000, 0, -163), 0, (("stdcompat__hashtbl_s.mli", 249, 9182, 9182), ("stdcompat__hashtbl_s.mli", 249, 9182, 9222), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 68)), 0); (("to_seq_values", 778), ((Tag1 (0, (Tag3 ((("t", 767)), [((("a")), 100000000, 0, -162); ((("b")), 100000000, 0, -160)], (0)), 100000000, 0, -161), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [((("b")), 100000000, 0, -160)], (0)), 100000000, 0, -159), 0), 100000000, 0, -158), 0, (("stdcompat__hashtbl_s.mli", 258, 9348, 9348), ("stdcompat__hashtbl_s.mli", 258, 9348, 9390), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 69)), 0); (("add_seq", 779), ((Tag1 (0, (Tag3 ((("t", 767)), [((("a")), 100000000, 0, -155); ((("b")), 100000000, 0, -156)], (0)), 100000000, 0, -157), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([((("a")), 100000000, 0, -155); ((("b")), 100000000, 0, -156)]), 100000000, 0, -154)], (0)), 100000000, 0, -153), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -152), 0), 100000000, 0, -151), 0), 100000000, 0, -150), 0, (("stdcompat__hashtbl_s.mli", 267, 9520, 9520), ("stdcompat__hashtbl_s.mli", 267, 9520, 9571), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 70)), 0); (("replace_seq", 780), ((Tag1 (0, (Tag3 ((("t", 767)), [((("a")), 100000000, 0, -147); ((("b")), 100000000, 0, -148)], (0)), 100000000, 0, -149), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([((("a")), 100000000, 0, -147); ((("b")), 100000000, 0, -148)]), 100000000, 0, -146)], (0)), 100000000, 0, -145), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -144), 0), 100000000, 0, -143), 0), 100000000, 0, -142), 0, (("stdcompat__hashtbl_s.mli", 276, 9719, 9719), ("stdcompat__hashtbl_s.mli", 276, 9719, 9774), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 71)), 0); (("of_seq", 781), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([((("a")), 100000000, 0, -138); ((("b")), 100000000, 0, -139)]), 100000000, 0, -141)], (0)), 100000000, 0, -140), (Tag3 ((("t", 767)), [((("a")), 100000000, 0, -138); ((("b")), 100000000, 0, -139)], (0)), 100000000, 0, -137), 0), 100000000, 0, -136), 0, (("stdcompat__hashtbl_s.mli", 285, 9930, 9930), ("stdcompat__hashtbl_s.mli", 285, 9930, 9972), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 72)), 0); (("find_opt", 782), ((Tag1 (0, (Tag3 ((("t", 767)), [((("a")), 100000000, 0, -134); ((("b")), 100000000, 0, -133)], (0)), 100000000, 0, -135), (Tag1 (0, ((("a")), 100000000, 0, -134), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -133)], (0)), 100000000, 0, -132), 0), 100000000, 0, -131), 0), 100000000, 0, -130), 0, (("stdcompat__hashtbl_s.mli", 293, 10101, 10101), ("stdcompat__hashtbl_s.mli", 293, 10101, 10145), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 73)), 0); (("filter_map_inplace", 783), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -125), (Tag1 (0, ((("b")), 100000000, 0, -126), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -126)], (0)), 100000000, 0, -129), 0), 100000000, 0, -128), 0), 100000000, 0, -127), (Tag1 (0, (Tag3 ((("t", 767)), [((("a")), 100000000, 0, -125); ((("b")), 100000000, 0, -126)], (0)), 100000000, 0, -124), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -123), 0), 100000000, 0, -122), 0), 100000000, 0, -121), 0, (("stdcompat__hashtbl_s.mli", 296, 10214, 10214), ("stdcompat__hashtbl_s.mli", 296, 10214, 10284), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 74)), 0); (("is_randomized", 784), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -120), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -119), 0), 100000000, 0, -118), 0, (("stdcompat__hashtbl_s.mli", 300, 10383, 10383), ("stdcompat__hashtbl_s.mli", 300, 10383, 10415), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 75)), 0); (("create", 785), ((Tag1 (Tag1 ("random"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -117)], (0)), 100000000, 0, -116), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -115), (Tag3 ((("t", 767)), [((("a")), 100000000, 0, -113); ((("b")), 100000000, 0, -114)], (0)), 100000000, 0, -112), 0), 100000000, 0, -111), 0), 100000000, 0, -110), 0, (("stdcompat__hashtbl_s.mli", 303, 10472, 10472), ("stdcompat__hashtbl_s.mli", 303, 10472, 10518), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 76)), 0); (("reset", 786), ((Tag1 (0, (Tag3 ((("t", 767)), [((("a")), 100000000, 0, -108); ((("b")), 100000000, 0, -109)], (0)), 100000000, 0, -107), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -106), 0), 100000000, 0, -105), 0, (("stdcompat__hashtbl_s.mli", 306, 10589, 10589), ("stdcompat__hashtbl_s.mli", 306, 10589, 10619), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 77)), 0); (("randomize", 787), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -104), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -103), 0), 100000000, 0, -102), 0, (("stdcompat__hashtbl_s.mli", 309, 10674, 10674), ("stdcompat__hashtbl_s.mli", 309, 10674, 10702), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 78)), 0); (("stats", 788), ((Tag1 (0, (Tag3 ((("t", 767)), [((("a")), 100000000, 0, -100); ((("b")), 100000000, 0, -101)], (0)), 100000000, 0, -99), (Tag3 ((("statistics", 768)), 0, (0)), 100000000, 0, -98), 0), 100000000, 0, -97), 0, (("stdcompat__hashtbl_s.mli", 312, 10755, 10755), ("stdcompat__hashtbl_s.mli", 312, 10755, 10791), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 79)), 0); (("seeded_hash", 789), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -96), (Tag1 (0, ((("a")), 100000000, 0, -95), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -94), 0), 100000000, 0, -93), 0), 100000000, 0, -92), 0, (("stdcompat__hashtbl_s.mli", 315, 10852, 10852), ("stdcompat__hashtbl_s.mli", 315, 10852, 10886), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 80)), 0); (("seeded_hash_param", 790), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -91), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -90), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -89), (Tag1 (0, ((("a")), 100000000, 0, -88), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -87), 0), 100000000, 0, -86), 0), 100000000, 0, -85), 0), 100000000, 0, -84), 0), 100000000, 0, -83), 0, (("stdcompat__hashtbl_s.mli", 318, 10945, 10945), ("stdcompat__hashtbl_s.mli", 318, 10945, 10999), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 81)), 0); (("length", 791), ((Tag1 (0, (Tag3 ((("t", 767)), [((("a")), 100000000, 0, -81); ((("b")), 100000000, 0, -82)], (0)), 100000000, 0, -80), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -79), 0), 100000000, 0, -78), 0, (("stdcompat__hashtbl_s.mli", 321, 11078, 11078), ("stdcompat__hashtbl_s.mli", 321, 11078, 11108), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 82)), 0); (("clear", 792), ((Tag1 (0, (Tag3 ((("t", 767)), [((("a")), 100000000, 0, -76); ((("b")), 100000000, 0, -77)], (0)), 100000000, 0, -75), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -74), 0), 100000000, 0, -73), 0, (("stdcompat__hashtbl_s.mli", 324, 11163, 11163), ("stdcompat__hashtbl_s.mli", 324, 11163, 11193), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 83)), 0); (("copy", 793), ((Tag1 (0, (Tag3 ((("t", 767)), [((("a")), 100000000, 0, -70); ((("b")), 100000000, 0, -71)], (0)), 100000000, 0, -72), (Tag3 ((("t", 767)), [((("a")), 100000000, 0, -70); ((("b")), 100000000, 0, -71)], (0)), 100000000, 0, -69), 0), 100000000, 0, -68), 0, (("stdcompat__hashtbl_s.mli", 327, 11229, 11229), ("stdcompat__hashtbl_s.mli", 327, 11229, 11264), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 84)), 0); (("add", 794), ((Tag1 (0, (Tag3 ((("t", 767)), [((("a")), 100000000, 0, -66); ((("b")), 100000000, 0, -65)], (0)), 100000000, 0, -67), (Tag1 (0, ((("a")), 100000000, 0, -66), (Tag1 (0, ((("b")), 100000000, 0, -65), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -64), 0), 100000000, 0, -63), 0), 100000000, 0, -62), 0), 100000000, 0, -61), 0, (("stdcompat__hashtbl_s.mli", 330, 11299, 11299), ("stdcompat__hashtbl_s.mli", 330, 11299, 11339), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 85)), 0); (("find", 795), ((Tag1 (0, (Tag3 ((("t", 767)), [((("a")), 100000000, 0, -59); ((("b")), 100000000, 0, -58)], (0)), 100000000, 0, -60), (Tag1 (0, ((("a")), 100000000, 0, -59), ((("b")), 100000000, 0, -58), 0), 100000000, 0, -57), 0), 100000000, 0, -56), 0, (("stdcompat__hashtbl_s.mli", 333, 11373, 11373), ("stdcompat__hashtbl_s.mli", 333, 11373, 11406), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 86)), 0); (("find_all", 796), ((Tag1 (0, (Tag3 ((("t", 767)), [((("a")), 100000000, 0, -54); ((("b")), 100000000, 0, -53)], (0)), 100000000, 0, -55), (Tag1 (0, ((("a")), 100000000, 0, -54), (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -53)], (0)), 100000000, 0, -52), 0), 100000000, 0, -51), 0), 100000000, 0, -50), 0, (("stdcompat__hashtbl_s.mli", 336, 11441, 11441), ("stdcompat__hashtbl_s.mli", 336, 11441, 11483), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 87)), 0); (("mem", 797), ((Tag1 (0, (Tag3 ((("t", 767)), [((("a")), 100000000, 0, -47); ((("b")), 100000000, 0, -49)], (0)), 100000000, 0, -48), (Tag1 (0, ((("a")), 100000000, 0, -47), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -46), 0), 100000000, 0, -45), 0), 100000000, 0, -44), 0, (("stdcompat__hashtbl_s.mli", 339, 11522, 11522), ("stdcompat__hashtbl_s.mli", 339, 11522, 11556), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 88)), 0); (("remove", 798), ((Tag1 (0, (Tag3 ((("t", 767)), [((("a")), 100000000, 0, -41); ((("b")), 100000000, 0, -43)], (0)), 100000000, 0, -42), (Tag1 (0, ((("a")), 100000000, 0, -41), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -40), 0), 100000000, 0, -39), 0), 100000000, 0, -38), 0, (("stdcompat__hashtbl_s.mli", 342, 11590, 11590), ("stdcompat__hashtbl_s.mli", 342, 11590, 11627), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 89)), 0); (("replace", 799), ((Tag1 (0, (Tag3 ((("t", 767)), [((("a")), 100000000, 0, -36); ((("b")), 100000000, 0, -35)], (0)), 100000000, 0, -37), (Tag1 (0, ((("a")), 100000000, 0, -36), (Tag1 (0, ((("b")), 100000000, 0, -35), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -34), 0), 100000000, 0, -33), 0), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("stdcompat__hashtbl_s.mli", 345, 11664, 11664), ("stdcompat__hashtbl_s.mli", 345, 11664, 11708), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 90)), 0); (("iter", 800), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -26), (Tag1 (0, ((("b")), 100000000, 0, -27), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), (Tag1 (0, (Tag3 ((("t", 767)), [((("a")), 100000000, 0, -26); ((("b")), 100000000, 0, -27)], (0)), 100000000, 0, -25), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0), 100000000, 0, -22), 0, (("stdcompat__hashtbl_s.mli", 348, 11746, 11746), ("stdcompat__hashtbl_s.mli", 348, 11746, 11797), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 91)), 0); (("fold", 801), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -17), (Tag1 (0, ((("b")), 100000000, 0, -18), (Tag1 (0, ((("c")), 100000000, 0, -15), ((("c")), 100000000, 0, -15), 0), 100000000, 0, -21), 0), 100000000, 0, -20), 0), 100000000, 0, -19), (Tag1 (0, (Tag3 ((("t", 767)), [((("a")), 100000000, 0, -17); ((("b")), 100000000, 0, -18)], (0)), 100000000, 0, -16), (Tag1 (0, ((("c")), 100000000, 0, -15), ((("c")), 100000000, 0, -15), 0), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("stdcompat__hashtbl_s.mli", 351, 11832, 11832), ("stdcompat__hashtbl_s.mli", 351, 11832, 11891), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 92)), 0); (("hash", 802), ((Tag1 (0, ((("a")), 100000000, 0, -11), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -10), 0), 100000000, 0, -9), 0, (("stdcompat__hashtbl_s.mli", 354, 11926, 11926), ("stdcompat__hashtbl_s.mli", 354, 11926, 11946), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 93)), 0); (("hash_param", 803), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -8), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -7), (Tag1 (0, ((("a")), 100000000, 0, -6), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("stdcompat__hashtbl_s.mli", 358, 11982, 11982), ("stdcompat__hashtbl_s.mli", 358, 11982, 12022), 0), 0, Tag1 ("Stdcompat__hashtbl_s", 94)), 0)])), 0, (("stdcompat__hashtbl_s.mli", 1, 0, 0), ("stdcompat__hashtbl_s.mli", 378, 12452, 12455), 0), Tag1 ("Stdcompat__hashtbl_s", 95)), 0)], "Stdcompat__hashtbl_s", [("Stdcompat__hashtbl_s", ("\139\169\250\235i1g\234X\185\164 \205@\145Y")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

  end

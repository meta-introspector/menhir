type grammar =
    Any of string
  | Bool
  | Char
  | Integer
  | Float
  | String
  | Option of grammar
  | List of list_grammar
  | Variant of variant
  | Union of grammar list
  | Tagged of grammar with_tag
  | Tyvar of string
  | Tycon of string * grammar list * defn list
  | Recursive of string * grammar list
  | Lazy of grammar lazy_t
and list_grammar =
    Empty
  | Cons of grammar * list_grammar
  | Many of grammar
  | Fields of record
and case_sensitivity =
    Case_insensitive
  | Case_sensitive
  | Case_sensitive_except_first_character
and variant = {
  case_sensitivity : case_sensitivity;
  clauses : clause with_tag_list list;
}
and clause = { name : string; clause_kind : clause_kind; }
and clause_kind = Atom_clause | List_clause of { args : list_grammar; }
and record = {
  allow_extra_fields : bool;
  fields : field with_tag_list list;
}
and field = { name : string; required : bool; args : list_grammar; }
and 'a with_tag = { key : string; value : Sexplib0__.Sexp.t; grammar : 'a; }
and 'a with_tag_list = Tag of 'a with_tag_list with_tag | No_tag of 'a
and defn = { tycon : string; tyvars : string list; grammar : grammar; }
type _ t = { untyped : grammar; } [@@unboxed]
val coerce : 'a t -> 'b t
val tag : 'a t -> key:string -> value:Sexplib0__.Sexp.t -> 'a t
val doc_comment_tag : string
val type_name_tag : string
val assoc_tag : string
val assoc_key_tag : string
val assoc_value_tag : string("DEBUG:rule", [Tag1 (("grammar", 385), (0, 0, Tag1 ([(("Any", 287), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -51)]), 0, (("src/sexp_grammar.ml", 21, 889, 891), ("src/sexp_grammar.ml", 21, 889, 906), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 11)); (("Bool", 288), (0), 0, (("src/sexp_grammar.ml", 22, 976, 978), ("src/sexp_grammar.ml", 22, 976, 984), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 12)); (("Char", 289), (0), 0, (("src/sexp_grammar.ml", 23, 1051, 1053), ("src/sexp_grammar.ml", 23, 1051, 1059), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 13)); (("Integer", 290), (0), 0, (("src/sexp_grammar.ml", 24, 1101, 1103), ("src/sexp_grammar.ml", 24, 1101, 1112), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 14)); (("Float", 291), (0), 0, (("src/sexp_grammar.ml", 25, 1192, 1194), ("src/sexp_grammar.ml", 25, 1192, 1201), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 15)); (("String", 292), (0), 0, (("src/sexp_grammar.ml", 26, 1254, 1256), ("src/sexp_grammar.ml", 26, 1254, 1264), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 16)); (("Option", 293), ([(Tag3 ((("grammar", 385)), 0, (0)), 100000000, 0, -52)]), 0, (("src/sexp_grammar.ml", 27, 1289, 1291), ("src/sexp_grammar.ml", 27, 1289, 1310), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 17)); (("List", 294), ([(Tag3 ((("list_grammar", 386)), 0, (0)), 100000000, 0, -53)]), 0, (("src/sexp_grammar.ml", 28, 1380, 1382), ("src/sexp_grammar.ml", 28, 1380, 1404), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 18)); (("Variant", 295), ([(Tag3 ((("variant", 388)), 0, (0)), 100000000, 0, -54)]), 0, (("src/sexp_grammar.ml", 29, 1427, 1429), ("src/sexp_grammar.ml", 29, 1427, 1449), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 19)); (("Union", 296), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("grammar", 385)), 0, (0)), 100000000, 0, -56)], (0)), 100000000, 0, -55)]), 0, (("src/sexp_grammar.ml", 30, 1505, 1507), ("src/sexp_grammar.ml", 30, 1505, 1530), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 20)); (("Tagged", 297), ([(Tag3 ((("with_tag", 393)), [(Tag3 ((("grammar", 385)), 0, (0)), 100000000, 0, -58)], (0)), 100000000, 0, -57)]), 0, (("src/sexp_grammar.ml", 31, 1594, 1596), ("src/sexp_grammar.ml", 31, 1594, 1624), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 21)); (("Tyvar", 298), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -59)]), 0, (("src/sexp_grammar.ml", 33, 1692, 1694), ("src/sexp_grammar.ml", 33, 1692, 1711), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 22)); (("Tycon", 299), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -60); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("grammar", 385)), 0, (0)), 100000000, 0, -62)], (0)), 100000000, 0, -61); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("defn", 395)), 0, (0)), 100000000, 0, -64)], (0)), 100000000, 0, -63)]), 0, (("src/sexp_grammar.ml", 36, 1882, 1884), ("src/sexp_grammar.ml", 36, 1882, 1928), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 23)); (("Recursive", 300), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -65); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("grammar", 385)), 0, (0)), 100000000, 0, -67)], (0)), 100000000, 0, -66)]), 0, (("src/sexp_grammar.ml", 94, 3895, 3897), ("src/sexp_grammar.ml", 94, 3895, 3933), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 24)); (("Lazy", 301), ([(Tag3 ((Tag3 ("lazy_t", 14)), [(Tag3 ((("grammar", 385)), 0, (0)), 100000000, 0, -69)], (0)), 100000000, 0, -68)]), 0, (("src/sexp_grammar.ml", 98, 4172, 4174), ("src/sexp_grammar.ml", 98, 4172, 4198), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 25))], 0), 1, 0, 0, 0, 0, 0, (("src/sexp_grammar.ml", 20, 874, 874), ("src/sexp_grammar.ml", 98, 4172, 4198), 0), 0, 0, 0, Tag1 ("Sexplib0__Sexp_grammar", 0)), 1, 0); Tag1 (("list_grammar", 386), (0, 0, Tag1 ([(("Empty", 302), (0), 0, (("src/sexp_grammar.ml", 104, 4393, 4395), ("src/sexp_grammar.ml", 104, 4393, 4402), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 26)); (("Cons", 303), ([(Tag3 ((("grammar", 385)), 0, (0)), 100000000, 0, -47); (Tag3 ((("list_grammar", 386)), 0, (0)), 100000000, 0, -48)]), 0, (("src/sexp_grammar.ml", 105, 4441, 4443), ("src/sexp_grammar.ml", 105, 4441, 4475), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 27)); (("Many", 304), ([(Tag3 ((("grammar", 385)), 0, (0)), 100000000, 0, -49)]), 0, (("src/sexp_grammar.ml", 107, 4557, 4559), ("src/sexp_grammar.ml", 107, 4557, 4576), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 28)); (("Fields", 305), ([(Tag3 ((("record", 391)), 0, (0)), 100000000, 0, -50)]), 0, (("src/sexp_grammar.ml", 108, 4644, 4646), ("src/sexp_grammar.ml", 108, 4644, 4664), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 29))], 0), 1, 0, 0, 0, 0, 0, (("src/sexp_grammar.ml", 103, 4374, 4374), ("src/sexp_grammar.ml", 108, 4644, 4664), 0), 0, 0, 0, Tag1 ("Sexplib0__Sexp_grammar", 1)), 2, 0); Tag1 (("case_sensitivity", 387), (0, 0, Tag1 ([(("Case_insensitive", 306), (0), 0, (("src/sexp_grammar.ml", 112, 4809, 4811), ("src/sexp_grammar.ml", 112, 4809, 4829), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 30)); (("Case_sensitive", 307), (0), 0, (("src/sexp_grammar.ml", 113, 4894, 4896), ("src/sexp_grammar.ml", 113, 4894, 4912), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 31)); (("Case_sensitive_except_first_character", 308), (0), 0, (("src/sexp_grammar.ml", 114, 4981, 4983), ("src/sexp_grammar.ml", 114, 4981, 5022), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 32))], 0), 1, 0, 0, 0, 0, 0, (("src/sexp_grammar.ml", 111, 4786, 4786), ("src/sexp_grammar.ml", 114, 4981, 5022), 0), 0, 1, 0, Tag1 ("Sexplib0__Sexp_grammar", 2)), 2, 0); Tag1 (("variant", 388), (0, 0, [[(("case_sensitivity", 309), 0, (Tag3 ((("case_sensitivity", 387)), 0, (0)), 100000000, 0, -43), (("src/sexp_grammar.ml", 120, 5239, 5243), ("src/sexp_grammar.ml", 121, 5279, 5282), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 33)); (("clauses", 310), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("with_tag_list", 394)), [(Tag3 ((("clause", 389)), 0, (0)), 100000000, 0, -46)], (0)), 100000000, 0, -45)], (0)), 100000000, 0, -44), (("src/sexp_grammar.ml", 121, 5279, 5283), ("src/sexp_grammar.ml", 121, 5279, 5318), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 34))]], 1, 0, 0, 0, 0, 0, (("src/sexp_grammar.ml", 119, 5225, 5225), ("src/sexp_grammar.ml", 122, 5319, 5322), 0), 0, 0, 0, Tag1 ("Sexplib0__Sexp_grammar", 3)), 2, 0); Tag1 (("clause", 389), (0, 0, [[(("name", 311), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -41), (("src/sexp_grammar.ml", 126, 5422, 5426), ("src/sexp_grammar.ml", 127, 5440, 5443), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 35)); (("clause_kind", 312), 0, (Tag3 ((("clause_kind", 390)), 0, (0)), 100000000, 0, -42), (("src/sexp_grammar.ml", 127, 5440, 5444), ("src/sexp_grammar.ml", 127, 5440, 5469), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 36))]], 1, 0, 0, 0, 0, 0, (("src/sexp_grammar.ml", 125, 5409, 5409), ("src/sexp_grammar.ml", 128, 5470, 5473), 0), 0, 0, 0, Tag1 ("Sexplib0__Sexp_grammar", 4)), 2, 0); Tag1 (("clause_kind", 390), (0, 0, Tag1 ([(("Atom_clause", 313), (0), 0, (("src/sexp_grammar.ml", 135, 5789, 5791), ("src/sexp_grammar.ml", 135, 5789, 5804), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 37)); (("List_clause", 314), Tag1 ([(("args", 315), 0, (Tag3 ((("list_grammar", 386)), 0, (0)), 100000000, 0, -40), (("src/sexp_grammar.ml", 136, 5805, 5826), ("src/sexp_grammar.ml", 136, 5805, 5845), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 38))]), 0, (("src/sexp_grammar.ml", 136, 5805, 5807), ("src/sexp_grammar.ml", 136, 5805, 5847), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 39))], 0), 1, 0, 0, 0, 0, 0, (("src/sexp_grammar.ml", 134, 5771, 5771), ("src/sexp_grammar.ml", 136, 5805, 5847), 0), 0, 0, 0, Tag1 ("Sexplib0__Sexp_grammar", 5)), 2, 0); Tag1 (("record", 391), (0, 0, [[(("allow_extra_fields", 316), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -36), (("src/sexp_grammar.ml", 142, 6062, 6066), ("src/sexp_grammar.ml", 143, 6092, 6095), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 40)); (("fields", 317), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("with_tag_list", 394)), [(Tag3 ((("field", 392)), 0, (0)), 100000000, 0, -39)], (0)), 100000000, 0, -38)], (0)), 100000000, 0, -37), (("src/sexp_grammar.ml", 143, 6092, 6096), ("src/sexp_grammar.ml", 143, 6092, 6129), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 41))]], 1, 0, 0, 0, 0, 0, (("src/sexp_grammar.ml", 141, 6049, 6049), ("src/sexp_grammar.ml", 144, 6130, 6133), 0), 0, 0, 0, Tag1 ("Sexplib0__Sexp_grammar", 6)), 2, 0); Tag1 (("field", 392), (0, 0, [[(("name", 318), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -33), (("src/sexp_grammar.ml", 150, 6356, 6360), ("src/sexp_grammar.ml", 151, 6374, 6377), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 42)); (("required", 319), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -34), (("src/sexp_grammar.ml", 151, 6374, 6378), ("src/sexp_grammar.ml", 152, 6394, 6397), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 43)); (("args", 320), 0, (Tag3 ((("list_grammar", 386)), 0, (0)), 100000000, 0, -35), (("src/sexp_grammar.ml", 152, 6394, 6398), ("src/sexp_grammar.ml", 152, 6394, 6417), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 44))]], 1, 0, 0, 0, 0, 0, (("src/sexp_grammar.ml", 149, 6344, 6344), ("src/sexp_grammar.ml", 153, 6418, 6421), 0), 0, 0, 0, Tag1 ("Sexplib0__Sexp_grammar", 7)), 2, 0); Tag1 (("with_tag", 393), ([((("a")), 100000000, 0, -32)], 1, [[(("key", 321), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -30), (("src/sexp_grammar.ml", 157, 6500, 6504), ("src/sexp_grammar.ml", 158, 6517, 6520), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 45)); (("value", 341), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -31), (("src/sexp_grammar.ml", 158, 6517, 6521), ("src/sexp_grammar.ml", 159, 6536, 6539), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 46)); (("grammar", 342), 0, ((("a")), 100000000, 0, -32), (("src/sexp_grammar.ml", 159, 6536, 6540), ("src/sexp_grammar.ml", 159, 6536, 6552), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 47))]], 1, 0, [25], [0], 0, 0, (("src/sexp_grammar.ml", 156, 6482, 6482), ("src/sexp_grammar.ml", 160, 6553, 6556), 0), 0, 0, 0, Tag1 ("Sexplib0__Sexp_grammar", 8)), 2, 0); Tag1 (("with_tag_list", 394), ([((("a")), 100000000, 0, -29)], 1, Tag1 ([(("Tag", 343), ([(Tag3 ((("with_tag", 393)), [(Tag3 ((("with_tag_list", 394)), [((("a")), 100000000, 0, -29)], (0)), 100000000, 0, -28)], (0)), 100000000, 0, -27)]), 0, (("src/sexp_grammar.ml", 163, 6581, 6583), ("src/sexp_grammar.ml", 163, 6581, 6617), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 48)); (("No_tag", 344), ([((("a")), 100000000, 0, -29)]), 0, (("src/sexp_grammar.ml", 164, 6618, 6620), ("src/sexp_grammar.ml", 164, 6618, 6634), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 49))], 0), 1, 0, [25], [0], 0, 0, (("src/sexp_grammar.ml", 162, 6558, 6558), ("src/sexp_grammar.ml", 164, 6618, 6634), 0), 0, 0, 0, Tag1 ("Sexplib0__Sexp_grammar", 9)), 2, 0); Tag1 (("defn", 395), (0, 0, [[(("tycon", 345), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -23), (("src/sexp_grammar.ml", 171, 6939, 6943), ("src/sexp_grammar.ml", 172, 6958, 6961), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 50)); (("tyvars", 346), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -25)], (0)), 100000000, 0, -24), (("src/sexp_grammar.ml", 172, 6958, 6962), ("src/sexp_grammar.ml", 173, 6983, 6986), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 51)); (("grammar", 347), 0, (Tag3 ((("grammar", 385)), 0, (0)), 100000000, 0, -26), (("src/sexp_grammar.ml", 173, 6983, 6987), ("src/sexp_grammar.ml", 173, 6983, 7004), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 52))]], 1, 0, 0, 0, 0, 0, (("src/sexp_grammar.ml", 170, 6928, 6928), ("src/sexp_grammar.ml", 174, 7005, 7008), 0), 0, 0, 0, Tag1 ("Sexplib0__Sexp_grammar", 10)), 2, 0); Tag1 (("t", 396), ([((("_")), 100000000, 0, -22)], 1, ([(("untyped", 368), 0, (Tag3 ((("grammar", 385)), 0, (0)), 100000000, 0, -21), (("src/sexp_grammar.ml", 179, 7265, 7278), ("src/sexp_grammar.ml", 179, 7265, 7295), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 61))], (0)), 1, 0, [8], [0], 0, 0, (("src/sexp_grammar.ml", 179, 7265, 7265), ("src/sexp_grammar.ml", 179, 7265, 7309), 0), [(("unboxed", (("src/sexp_grammar.ml", 179, 7265, 7301), ("src/sexp_grammar.ml", 179, 7265, 7308), 0)), (0), (("src/sexp_grammar.ml", 179, 7265, 7298), ("src/sexp_grammar.ml", 179, 7265, 7309), 0))], 0, 0, Tag1 ("Sexplib0__Sexp_grammar", 60)), 1, 0); (("coerce", 397), ((Tag1 (0, (Tag3 ((("t", 396)), [((("a")), 100000000, 0, -20)], (0)), 100000000, 0, -19), (Tag3 ((("t", 396)), [((("b")), 100000000, 0, -18)], (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("src/sexp_grammar.ml", 181, 7311, 7315), ("src/sexp_grammar.ml", 181, 7311, 7321), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 62)), 0); (("tag", 398), ((Tag1 (0, (Tag3 ((("t", 396)), [((("a")), 100000000, 0, -12)], (0)), 100000000, 0, -15), (Tag1 (("key"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -14), (Tag1 (("value"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -13), (Tag3 ((("t", 396)), [((("a")), 100000000, 0, -12)], (0)), 100000000, 0, -11), 0), 100000000, 0, -10), 0), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("src/sexp_grammar.ml", 183, 7373, 7377), ("src/sexp_grammar.ml", 183, 7373, 7380), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 66)), 0); (("doc_comment_tag", 399), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -7), 0, (("src/sexp_grammar.ml", 188, 7566, 7570), ("src/sexp_grammar.ml", 188, 7566, 7585), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 71)), 0); (("type_name_tag", 400), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6), 0, (("src/sexp_grammar.ml", 191, 7694, 7698), ("src/sexp_grammar.ml", 191, 7694, 7711), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 72)), 0); (("assoc_tag", 401), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5), 0, (("src/sexp_grammar.ml", 195, 7855, 7859), ("src/sexp_grammar.ml", 195, 7855, 7868), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 73)), 0); (("assoc_key_tag", 402), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4), 0, (("src/sexp_grammar.ml", 199, 8009, 8013), ("src/sexp_grammar.ml", 199, 8009, 8026), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 74)), 0); (("assoc_value_tag", 403), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3), 0, (("src/sexp_grammar.ml", 203, 8173, 8177), ("src/sexp_grammar.ml", 203, 8173, 8192), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 75)), 0); (("completion_suggested", 404), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2), 0, (("src/sexp_grammar.ml", 207, 8376, 8380), ("src/sexp_grammar.ml", 207, 8376, 8400), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 76)), 0)], "Sexplib0__Sexp_grammar", [("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

val completion_suggested : string

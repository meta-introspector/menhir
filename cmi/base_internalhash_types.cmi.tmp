type state = private int
type seed = int
type hash_value = int
external create_seeded : seed -> state = "%identity" [@@noalloc]
external fold_int64 : state -> int64 -> state
  = "Base_internalhash_fold_int64" [@@noalloc]
external fold_int : state -> int -> state = "Base_internalhash_fold_int"
  [@@noalloc]
external fold_float : state -> float -> state
  = "Base_internalhash_fold_float" [@@noalloc]
external fold_string : state -> string -> state
  = "Base_internalhash_fold_string" [@@noalloc]
external get_hash_value : state -> hash_value
  = "Base_internalhash_get_hash_value"("DEBUG:rule", [Tag1 (("state", 278), (0, 0, 0, 0, ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -30)), 0, 0, 0, 0, (("hash_types/src/base_internalhash_types.ml", 3, 180, 180), ("hash_types/src/base_internalhash_types.ml", 3, 180, 204), 0), 0, 1, 0, Tag1 ("Base_internalhash_types", 0)), 1, 0); Tag1 (("seed", 279), (0, 0, 0, 1, ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -29)), 0, 0, 0, 0, (("hash_types/src/base_internalhash_types.ml", 4, 205, 205), ("hash_types/src/base_internalhash_types.ml", 4, 205, 220), 0), 0, 1, 0, Tag1 ("Base_internalhash_types", 1)), 1, 0); Tag1 (("hash_value", 280), (0, 0, 0, 1, ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -28)), 0, 0, 0, 0, (("hash_types/src/base_internalhash_types.ml", 5, 221, 221), ("hash_types/src/base_internalhash_types.ml", 5, 221, 242), 0), 0, 1, 0, Tag1 ("Base_internalhash_types", 2)), 1, 0); (("create_seeded", 281), ((Tag1 (0, (Tag3 ((("seed", 279)), 0, (0)), 100000000, 0, -27), (Tag3 ((("state", 278)), 0, (0)), 100000000, 0, -26), 0), 100000000, 0, -25), (("%identity", 1, 0, "", [0], 0)), (("hash_types/src/base_internalhash_types.ml", 7, 244, 244), ("hash_types/src/base_internalhash_types.ml", 7, 244, 338), 0), [(("noalloc", (("hash_types/src/base_internalhash_types.ml", 7, 244, 330), ("hash_types/src/base_internalhash_types.ml", 7, 244, 337), 0)), (0), (("hash_types/src/base_internalhash_types.ml", 7, 244, 327), ("hash_types/src/base_internalhash_types.ml", 7, 244, 338), 0))], Tag1 ("Base_internalhash_types", 3)), 0); (("fold_int64", 282), ((Tag1 (0, (Tag3 ((("state", 278)), 0, (0)), 100000000, 0, -24), (Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -23), (Tag3 ((("state", 278)), 0, (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), (("Base_internalhash_fold_int64", 2, 0, "", [0; 0], 0)), (("hash_types/src/base_internalhash_types.ml", 8, 339, 339), ("hash_types/src/base_internalhash_types.ml", 8, 339, 438), 0), [(("noalloc", (("hash_types/src/base_internalhash_types.ml", 8, 339, 430), ("hash_types/src/base_internalhash_types.ml", 8, 339, 437), 0)), (0), (("hash_types/src/base_internalhash_types.ml", 8, 339, 427), ("hash_types/src/base_internalhash_types.ml", 8, 339, 438), 0))], Tag1 ("Base_internalhash_types", 4)), 0); (("fold_int", 283), ((Tag1 (0, (Tag3 ((("state", 278)), 0, (0)), 100000000, 0, -19), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -18), (Tag3 ((("state", 278)), 0, (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0), 100000000, 0, -15), (("Base_internalhash_fold_int", 2, 0, "", [0; 0], 0)), (("hash_types/src/base_internalhash_types.ml", 9, 439, 439), ("hash_types/src/base_internalhash_types.ml", 9, 439, 538), 0), [(("noalloc", (("hash_types/src/base_internalhash_types.ml", 9, 439, 530), ("hash_types/src/base_internalhash_types.ml", 9, 439, 537), 0)), (0), (("hash_types/src/base_internalhash_types.ml", 9, 439, 527), ("hash_types/src/base_internalhash_types.ml", 9, 439, 538), 0))], Tag1 ("Base_internalhash_types", 5)), 0); (("fold_float", 284), ((Tag1 (0, (Tag3 ((("state", 278)), 0, (0)), 100000000, 0, -14), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -13), (Tag3 ((("state", 278)), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0), 100000000, 0, -10), (("Base_internalhash_fold_float", 2, 0, "", [0; 0], 0)), (("hash_types/src/base_internalhash_types.ml", 10, 539, 539), ("hash_types/src/base_internalhash_types.ml", 10, 539, 638), 0), [(("noalloc", (("hash_types/src/base_internalhash_types.ml", 10, 539, 630), ("hash_types/src/base_internalhash_types.ml", 10, 539, 637), 0)), (0), (("hash_types/src/base_internalhash_types.ml", 10, 539, 627), ("hash_types/src/base_internalhash_types.ml", 10, 539, 638), 0))], Tag1 ("Base_internalhash_types", 6)), 0); (("fold_string", 285), ((Tag1 (0, (Tag3 ((("state", 278)), 0, (0)), 100000000, 0, -9), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -8), (Tag3 ((("state", 278)), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), (("Base_internalhash_fold_string", 2, 0, "", [0; 0], 0)), (("hash_types/src/base_internalhash_types.ml", 11, 639, 639), ("hash_types/src/base_internalhash_types.ml", 11, 639, 738), 0), [(("noalloc", (("hash_types/src/base_internalhash_types.ml", 11, 639, 730), ("hash_types/src/base_internalhash_types.ml", 11, 639, 737), 0)), (0), (("hash_types/src/base_internalhash_types.ml", 11, 639, 727), ("hash_types/src/base_internalhash_types.ml", 11, 639, 738), 0))], Tag1 ("Base_internalhash_types", 7)), 0); (("get_hash_value", 286), ((Tag1 (0, (Tag3 ((("state", 278)), 0, (0)), 100000000, 0, -4), (Tag3 ((("hash_value", 280)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), (("Base_internalhash_get_hash_value", 1, 0, "", [0], 0)), (("hash_types/src/base_internalhash_types.ml", 12, 739, 739), ("hash_types/src/base_internalhash_types.ml", 12, 739, 838), 0), [(("noalloc", (("hash_types/src/base_internalhash_types.ml", 12, 739, 830), ("hash_types/src/base_internalhash_types.ml", 12, 739, 837), 0)), (0), (("hash_types/src/base_internalhash_types.ml", 12, 739, 827), ("hash_types/src/base_internalhash_types.ml", 12, 739, 838), 0))], Tag1 ("Base_internalhash_types", 8)), 0)], "Base_internalhash_types", [("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
 [@@noalloc]

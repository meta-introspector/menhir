type path = string
type path_prefix = string
type error_message = string
val encode_prefix : path_prefix -> string
val decode_prefix : string -> (path_prefix, error_message) result
type pair = { target : path_prefix; source : path_prefix; }
val encode_pair : pair -> string
val decode_pair : string -> (pair, error_message) result
type map = pair option list
val encode_map : map -> string
val decode_map : string -> (map, error_message) result
val rewrite_first : map -> path -> path option
val rewrite_all : map -> path -> path list("DEBUG:rule", [Tag1 (("path", 285), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -50)), 0, 0, 0, 0, (("utils/build_path_prefix_map.mli", 27, 1323, 1323), ("utils/build_path_prefix_map.mli", 27, 1323, 1341), 0), 0, 0, 0, Tag1 ("Build_path_prefix_map", 0)), 1, 0); Tag1 (("path_prefix", 286), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -49)), 0, 0, 0, 0, (("utils/build_path_prefix_map.mli", 28, 1342, 1342), ("utils/build_path_prefix_map.mli", 28, 1342, 1367), 0), 0, 0, 0, Tag1 ("Build_path_prefix_map", 1)), 1, 0); Tag1 (("error_message", 287), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -48)), 0, 0, 0, 0, (("utils/build_path_prefix_map.mli", 29, 1368, 1368), ("utils/build_path_prefix_map.mli", 29, 1368, 1395), 0), 0, 0, 0, Tag1 ("Build_path_prefix_map", 2)), 1, 0); (("encode_prefix", 288), ((Tag1 (0, (Tag3 ((("path_prefix", 286)), 0, (0)), 100000000, 0, -47), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("utils/build_path_prefix_map.mli", 31, 1397, 1397), ("utils/build_path_prefix_map.mli", 31, 1397, 1438), 0), 0, Tag1 ("Build_path_prefix_map", 3)), 0); (("decode_prefix", 289), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -44), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((("path_prefix", 286)), 0, (0)), 100000000, 0, -42); (Tag3 ((("error_message", 287)), 0, (0)), 100000000, 0, -43)], (0)), 100000000, 0, -41), 0), 100000000, 0, -40), 0, (("utils/build_path_prefix_map.mli", 32, 1439, 1439), ("utils/build_path_prefix_map.mli", 32, 1439, 1504), 0), 0, Tag1 ("Build_path_prefix_map", 4)), 0); Tag1 (("pair", 290), (0, 0, [[(("target", 275), 0, (Tag3 ((("path_prefix", 286)), 0, (0)), 100000000, 0, -38), (("utils/build_path_prefix_map.mli", 34, 1506, 1520), ("utils/build_path_prefix_map.mli", 34, 1506, 1540), 0), 0, Tag1 ("Build_path_prefix_map", 6)); (("source", 276), 0, (Tag3 ((("path_prefix", 286)), 0, (0)), 100000000, 0, -39), (("utils/build_path_prefix_map.mli", 34, 1506, 1541), ("utils/build_path_prefix_map.mli", 34, 1506, 1561), 0), 0, Tag1 ("Build_path_prefix_map", 7))]], 1, 0, 0, 0, 0, 0, (("utils/build_path_prefix_map.mli", 34, 1506, 1506), ("utils/build_path_prefix_map.mli", 34, 1506, 1563), 0), 0, 0, 0, Tag1 ("Build_path_prefix_map", 5)), 1, 0); (("encode_pair", 291), ((Tag1 (0, (Tag3 ((("pair", 290)), 0, (0)), 100000000, 0, -37), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -36), 0), 100000000, 0, -35), 0, (("utils/build_path_prefix_map.mli", 36, 1565, 1565), ("utils/build_path_prefix_map.mli", 36, 1565, 1597), 0), 0, Tag1 ("Build_path_prefix_map", 8)), 0); (("decode_pair", 292), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -34), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((("pair", 290)), 0, (0)), 100000000, 0, -32); (Tag3 ((("error_message", 287)), 0, (0)), 100000000, 0, -33)], (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0, (("utils/build_path_prefix_map.mli", 37, 1598, 1598), ("utils/build_path_prefix_map.mli", 37, 1598, 1654), 0), 0, Tag1 ("Build_path_prefix_map", 9)), 0); Tag1 (("map", 293), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("pair", 290)), 0, (0)), 100000000, 0, -29)], (0)), 100000000, 0, -28)], (0)), 100000000, 0, -27)), 0, 0, 0, 0, (("utils/build_path_prefix_map.mli", 39, 1656, 1656), ("utils/build_path_prefix_map.mli", 39, 1656, 1683), 0), 0, 0, 0, Tag1 ("Build_path_prefix_map", 10)), 1, 0); (("encode_map", 294), ((Tag1 (0, (Tag3 ((("map", 293)), 0, (0)), 100000000, 0, -26), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("utils/build_path_prefix_map.mli", 41, 1685, 1685), ("utils/build_path_prefix_map.mli", 41, 1685, 1715), 0), 0, Tag1 ("Build_path_prefix_map", 11)), 0); (("decode_map", 295), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -23), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((("map", 293)), 0, (0)), 100000000, 0, -21); (Tag3 ((("error_message", 287)), 0, (0)), 100000000, 0, -22)], (0)), 100000000, 0, -20), 0), 100000000, 0, -19), 0, (("utils/build_path_prefix_map.mli", 42, 1716, 1716), ("utils/build_path_prefix_map.mli", 42, 1716, 1770), 0), 0, Tag1 ("Build_path_prefix_map", 12)), 0); (("rewrite_first", 296), ((Tag1 (0, (Tag3 ((("map", 293)), 0, (0)), 100000000, 0, -18), (Tag1 (0, (Tag3 ((("path", 285)), 0, (0)), 100000000, 0, -17), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("path", 285)), 0, (0)), 100000000, 0, -16)], (0)), 100000000, 0, -15), 0), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("utils/build_path_prefix_map.mli", 44, 1772, 1772), ("utils/build_path_prefix_map.mli", 44, 1772, 1818), 0), 0, Tag1 ("Build_path_prefix_map", 13)), 0); (("rewrite_all", 297), ((Tag1 (0, (Tag3 ((("map", 293)), 0, (0)), 100000000, 0, -12), (Tag1 (0, (Tag3 ((("path", 285)), 0, (0)), 100000000, 0, -11), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("path", 285)), 0, (0)), 100000000, 0, -10)], (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("utils/build_path_prefix_map.mli", 50, 2042, 2042), ("utils/build_path_prefix_map.mli", 50, 2042, 2084), 0), 0, Tag1 ("Build_path_prefix_map", 14)), 0); (("rewrite", 298), ((Tag1 (0, (Tag3 ((("map", 293)), 0, (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 ((("path", 285)), 0, (0)), 100000000, 0, -5), (Tag3 ((("path", 285)), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("utils/build_path_prefix_map.mli", 58, 2390, 2390), ("utils/build_path_prefix_map.mli", 58, 2390, 2423), 0), 0, Tag1 ("Build_path_prefix_map", 15)), 0)], "Build_path_prefix_map", [("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

val rewrite : map -> path -> path

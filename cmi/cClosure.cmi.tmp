module RedFlags :
  sig
    type reds
    type red_kind
    val fBETA : red_kind
    val fDELTA : red_kind
    val fMATCH : red_kind
    val fFIX : red_kind
    val fCOFIX : red_kind
    val fZETA : red_kind
    val fCONST : Names.Constant.t -> red_kind
    val fVAR : Names.Id.t -> red_kind
    val no_red : reds
    val red_add : reds -> red_kind -> reds
    val red_sub : reds -> red_kind -> reds
    val red_add_transparent : reds -> TransparentState.t -> reds
    val red_transparent : reds -> TransparentState.t
    val mkflags : red_kind list -> reds
    val red_set : reds -> red_kind -> bool
    val red_projection : reds -> Names.Projection.t -> bool
  end
val all : RedFlags.reds
val allnolet : RedFlags.reds
val beta : RedFlags.reds
val betadeltazeta : RedFlags.reds
val betaiota : RedFlags.reds
val betaiotazeta : RedFlags.reds
val betazeta : RedFlags.reds
val delta : RedFlags.reds
val zeta : RedFlags.reds
val nored : RedFlags.reds
type table_key = Names.Constant.t Univ.puniverses Names.tableKey
module KeyTable :
  sig
    type key = table_key
    type !'a t
    val create : int -> 'a t
    val clear : 'a t -> unit
    val reset : 'a t -> unit
    val copy : 'a t -> 'a t
    val add : 'a t -> key -> 'a -> unit
    val remove : 'a t -> key -> unit
    val find : 'a t -> key -> 'a
    val find_opt : 'a t -> key -> 'a option
    val find_all : 'a t -> key -> 'a list
    val replace : 'a t -> key -> 'a -> unit
    val mem : 'a t -> key -> bool
    val iter : (key -> 'a -> unit) -> 'a t -> unit
    val filter_map_inplace : (key -> 'a -> 'a option) -> 'a t -> unit
    val fold : (key -> 'a -> 'acc -> 'acc) -> 'a t -> 'acc -> 'acc
    val length : 'a t -> int
    val stats : 'a t -> Stdlib__Hashtbl.statistics
    val to_seq : 'a t -> (key * 'a) Seq.t
    val to_seq_keys : 'a t -> key Seq.t
    val to_seq_values : 'a t -> 'a Seq.t
    val add_seq : 'a t -> (key * 'a) Seq.t -> unit
    val replace_seq : 'a t -> (key * 'a) Seq.t -> unit
    val of_seq : (key * 'a) Seq.t -> 'a t
  end
type fconstr
type finvert
type 'a usubs = 'a Esubst.subs Univ.puniverses
type evar_repack
type fterm =
    FRel of int
  | FAtom of Constr.constr
  | FFlex of table_key
  | FInd of Constr.pinductive
  | FConstruct of Constr.pconstructor
  | FApp of fconstr * fconstr array
  | FProj of Names.Projection.t * fconstr
  | FFix of Constr.fixpoint * fconstr usubs
  | FCoFix of Constr.cofixpoint * fconstr usubs
  | FCaseT of Constr.case_info * Univ.Instance.t * Constr.constr array *
      Constr.case_return * fconstr * Constr.case_branch array * fconstr usubs
  | FCaseInvert of Constr.case_info * Univ.Instance.t * Constr.constr array *
      Constr.case_return * finvert * fconstr * Constr.case_branch array *
      fconstr usubs
  | FLambda of int *
      (Names.Name.t Context.binder_annot * Constr.constr) list *
      Constr.constr * fconstr usubs
  | FProd of Names.Name.t Context.binder_annot * fconstr * Constr.constr *
      fconstr usubs
  | FLetIn of Names.Name.t Context.binder_annot * fconstr * fconstr *
      Constr.constr * fconstr usubs
  | FEvar of Evar.t * Constr.constr list * fconstr usubs * evar_repack
  | FInt of Uint63.t
  | FFloat of Float64.t
  | FArray of Univ.Instance.t * fconstr Parray.t * fconstr
  | FLIFT of int * fconstr
  | FCLOS of Constr.constr * fconstr usubs
  | FIrrelevant
  | FLOCKED
type 'a next_native_args = (CPrimitives.arg_kind * 'a) list
type stack_member =
    Zapp of fconstr array
  | ZcaseT of Constr.case_info * Univ.Instance.t * Constr.constr array *
      Constr.case_return * Constr.case_branch array * fconstr usubs
  | Zproj of Names.Projection.Repr.t
  | Zfix of fconstr * stack
  | Zprimitive of CPrimitives.t * Constr.pconstant * fconstr list *
      fconstr next_native_args
  | Zshift of int
  | Zupdate of fconstr
and stack = stack_member list
val empty_stack : stack
val append_stack : fconstr array -> stack -> stack
val check_native_args : CPrimitives.t -> stack -> bool
val get_native_args1 :
  CPrimitives.t ->
  Constr.pconstant ->
  stack -> fconstr list * fconstr * fconstr next_native_args * stack
val stack_args_size : stack -> int
val inductive_subst :
  Declarations.mutual_inductive_body ->
  Univ.Instance.t -> fconstr array -> fconstr usubs
val usubs_lift : 'a usubs -> 'a usubs
val usubs_liftn : int -> 'a usubs -> 'a usubs
val usubs_cons : 'a -> 'a usubs -> 'a usubs
val usubst_instance :
  'a Univ.puniverses -> Univ.Instance.t -> Univ.Instance.t
val inject : Constr.constr -> fconstr
val mk_atom : Constr.constr -> fconstr
val mk_red : fterm -> fconstr
val fterm_of : fconstr -> fterm
val term_of_fconstr : fconstr -> Constr.constr
val destFLambda :
  (fconstr usubs -> Constr.constr -> fconstr) ->
  fconstr -> Names.Name.t Context.binder_annot * fconstr * fconstr
type clos_infos
type clos_tab
val create_conv_infos :
  ?univs:UGraph.t ->
  ?evars:Constr.constr Constr.evar_handler ->
  RedFlags.reds -> Environ.env -> clos_infos
val create_clos_infos :
  ?univs:UGraph.t ->
  ?evars:Constr.constr Constr.evar_handler ->
  RedFlags.reds -> Environ.env -> clos_infos
val oracle_of_infos : clos_infos -> Conv_oracle.oracle
val create_tab : unit -> clos_tab
val info_env : clos_infos -> Environ.env
val info_flags : clos_infos -> RedFlags.reds
val info_univs : clos_infos -> UGraph.t
val unfold_projection :
  clos_infos -> Names.Projection.t -> stack_member option
val push_relevance : clos_infos -> 'b Context.binder_annot -> clos_infos
val push_relevances :
  clos_infos -> 'b Context.binder_annot array -> clos_infos
val set_info_relevances : clos_infos -> Sorts.relevance Range.t -> clos_infos
val info_relevances : clos_infos -> Sorts.relevance Range.t
val infos_with_reds : clos_infos -> RedFlags.reds -> clos_infos
val norm_val : clos_infos -> clos_tab -> fconstr -> Constr.constr
val norm_term :
  clos_infos -> clos_tab -> fconstr usubs -> Constr.constr -> Constr.constr
val whd_val : clos_infos -> clos_tab -> fconstr -> Constr.constr
val whd_stack : clos_infos -> clos_tab -> fconstr -> stack -> fconstr * stack
val skip_irrelevant_stack : clos_infos -> stack -> stack
val eta_expand_stack :
  clos_infos -> Names.Name.t Context.binder_annot -> stack -> stack
val eta_expand_ind_stack :
  Environ.env ->
  Names.inductive -> fconstr -> stack -> fconstr * stack -> stack * stack
val unfold_ref_with_args :
  clos_infos -> clos_tab -> table_key -> stack -> (fconstr * stack) option
val set_conv : (clos_infos -> clos_tab -> fconstr -> fconstr -> bool) -> unit
val lift_fconstr : int -> fconstr -> fconstr
val lift_fconstr_vect : int -> fconstr array -> fconstr array
val mk_clos : fconstr usubs -> Constr.constr -> fconstr
val mk_clos_vect : fconstr usubs -> Constr.constr array -> fconstr array
val kni : clos_infos -> clos_tab -> fconstr -> stack -> fconstr * stack
val knr : clos_infos -> clos_tab -> fconstr -> stack -> fconstr * stack
val kl : clos_infos -> clos_tab -> fconstr -> Constr.constr
val zip : fconstr -> stack -> fconstr
val term_of_process : fconstr -> stack -> Constr.constr
("DEBUG:rule", [Tag3 (("RedFlags", 1505), 0, (Tag1 ([Tag1 (("reds", 1576), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("kernel/cClosure.mli", 24, 1035, 1037), ("kernel/cClosure.mli", 24, 1035, 1046), 0), 0, 0, 0, Tag1 ("CClosure", 1)), 1, 0); Tag1 (("red_kind", 1577), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("kernel/cClosure.mli", 25, 1047, 1049), ("kernel/cClosure.mli", 25, 1047, 1062), 0), 0, 0, 0, Tag1 ("CClosure", 2)), 1, 0); (("fBETA", 1578), ((Tag3 ((("red_kind", 1577)), 0, (0)), 100000000, 0, -483), 0, (("kernel/cClosure.mli", 29, 1112, 1114), ("kernel/cClosure.mli", 29, 1112, 1134), 0), 0, Tag1 ("CClosure", 3)), 0); (("fDELTA", 1579), ((Tag3 ((("red_kind", 1577)), 0, (0)), 100000000, 0, -482), 0, (("kernel/cClosure.mli", 30, 1135, 1137), ("kernel/cClosure.mli", 30, 1135, 1158), 0), 0, Tag1 ("CClosure", 4)), 0); (("fMATCH", 1580), ((Tag3 ((("red_kind", 1577)), 0, (0)), 100000000, 0, -481), 0, (("kernel/cClosure.mli", 31, 1159, 1161), ("kernel/cClosure.mli", 31, 1159, 1182), 0), 0, Tag1 ("CClosure", 5)), 0); (("fFIX", 1581), ((Tag3 ((("red_kind", 1577)), 0, (0)), 100000000, 0, -480), 0, (("kernel/cClosure.mli", 32, 1183, 1185), ("kernel/cClosure.mli", 32, 1183, 1204), 0), 0, Tag1 ("CClosure", 6)), 0); (("fCOFIX", 1582), ((Tag3 ((("red_kind", 1577)), 0, (0)), 100000000, 0, -479), 0, (("kernel/cClosure.mli", 33, 1205, 1207), ("kernel/cClosure.mli", 33, 1205, 1228), 0), 0, Tag1 ("CClosure", 7)), 0); (("fZETA", 1583), ((Tag3 ((("red_kind", 1577)), 0, (0)), 100000000, 0, -478), 0, (("kernel/cClosure.mli", 34, 1229, 1231), ("kernel/cClosure.mli", 34, 1229, 1251), 0), 0, Tag1 ("CClosure", 8)), 0); (("fCONST", 1584), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -477), (Tag3 ((("red_kind", 1577)), 0, (0)), 100000000, 0, -476), 0), 100000000, 0, -475), 0, (("kernel/cClosure.mli", 35, 1252, 1254), ("kernel/cClosure.mli", 35, 1252, 1289), 0), 0, Tag1 ("CClosure", 9)), 0); (("fVAR", 1585), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -474), (Tag3 ((("red_kind", 1577)), 0, (0)), 100000000, 0, -473), 0), 100000000, 0, -472), 0, (("kernel/cClosure.mli", 36, 1290, 1292), ("kernel/cClosure.mli", 36, 1290, 1319), 0), 0, Tag1 ("CClosure", 10)), 0); (("no_red", 1586), ((Tag3 ((("reds", 1576)), 0, (0)), 100000000, 0, -471), 0, (("kernel/cClosure.mli", 39, 1350, 1352), ("kernel/cClosure.mli", 39, 1350, 1369), 0), 0, Tag1 ("CClosure", 11)), 0); (("red_add", 1587), ((Tag1 (0, (Tag3 ((("reds", 1576)), 0, (0)), 100000000, 0, -470), (Tag1 (0, (Tag3 ((("red_kind", 1577)), 0, (0)), 100000000, 0, -469), (Tag3 ((("reds", 1576)), 0, (0)), 100000000, 0, -468), 0), 100000000, 0, -467), 0), 100000000, 0, -466), 0, (("kernel/cClosure.mli", 42, 1411, 1413), ("kernel/cClosure.mli", 42, 1411, 1451), 0), 0, Tag1 ("CClosure", 12)), 0); (("red_sub", 1588), ((Tag1 (0, (Tag3 ((("reds", 1576)), 0, (0)), 100000000, 0, -465), (Tag1 (0, (Tag3 ((("red_kind", 1577)), 0, (0)), 100000000, 0, -464), (Tag3 ((("reds", 1576)), 0, (0)), 100000000, 0, -463), 0), 100000000, 0, -462), 0), 100000000, 0, -461), 0, (("kernel/cClosure.mli", 45, 1496, 1498), ("kernel/cClosure.mli", 45, 1496, 1536), 0), 0, Tag1 ("CClosure", 13)), 0); (("red_add_transparent", 1589), ((Tag1 (0, (Tag3 ((("reds", 1576)), 0, (0)), 100000000, 0, -460), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("TransparentState")), "t"), 0, (0)), 100000000, 0, -459), (Tag3 ((("reds", 1576)), 0, (0)), 100000000, 0, -458), 0), 100000000, 0, -457), 0), 100000000, 0, -456), 0, (("kernel/cClosure.mli", 48, 1578, 1580), ("kernel/cClosure.mli", 48, 1578, 1640), 0), 0, Tag1 ("CClosure", 14)), 0); (("red_transparent", 1590), ((Tag1 (0, (Tag3 ((("reds", 1576)), 0, (0)), 100000000, 0, -455), (Tag3 (Tag1 ((Tag2 ("TransparentState")), "t"), 0, (0)), 100000000, 0, -454), 0), 100000000, 0, -453), 0, (("kernel/cClosure.mli", 51, 1705, 1707), ("kernel/cClosure.mli", 51, 1705, 1755), 0), 0, Tag1 ("CClosure", 15)), 0); (("mkflags", 1591), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("red_kind", 1577)), 0, (0)), 100000000, 0, -452)], (0)), 100000000, 0, -451), (Tag3 ((("reds", 1576)), 0, (0)), 100000000, 0, -450), 0), 100000000, 0, -449), 0, (("kernel/cClosure.mli", 54, 1830, 1832), ("kernel/cClosure.mli", 54, 1830, 1867), 0), 0, Tag1 ("CClosure", 16)), 0); (("red_set", 1592), ((Tag1 (0, (Tag3 ((("reds", 1576)), 0, (0)), 100000000, 0, -448), (Tag1 (0, (Tag3 ((("red_kind", 1577)), 0, (0)), 100000000, 0, -447), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -446), 0), 100000000, 0, -445), 0), 100000000, 0, -444), 0, (("kernel/cClosure.mli", 57, 1911, 1913), ("kernel/cClosure.mli", 57, 1911, 1951), 0), 0, Tag1 ("CClosure", 17)), 0); (("red_projection", 1593), ((Tag1 (0, (Tag3 ((("reds", 1576)), 0, (0)), 100000000, 0, -443), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Projection"), "t"), 0, (0)), 100000000, 0, -442), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -441), 0), 100000000, 0, -440), 0), 100000000, 0, -439), 0, (("kernel/cClosure.mli", 61, 2056, 2058), ("kernel/cClosure.mli", 61, 2056, 2107), 0), 0, Tag1 ("CClosure", 18)), 0)]), 0, (("kernel/cClosure.mli", 23, 1013, 1013), ("kernel/cClosure.mli", 62, 2108, 2111), 0), Tag1 ("CClosure", 19)), 0, 0); (("all", 1506), ((Tag3 (Tag1 ((("RedFlags", 1505)), "reds"), 0, (0)), 100000000, 0, -438), 0, (("kernel/cClosure.mli", 67, 2165, 2165), ("kernel/cClosure.mli", 67, 2165, 2193), 0), 0, Tag1 ("CClosure", 20)), 0); (("allnolet", 1507), ((Tag3 (Tag1 ((("RedFlags", 1505)), "reds"), 0, (0)), 100000000, 0, -437), 0, (("kernel/cClosure.mli", 68, 2194, 2194), ("kernel/cClosure.mli", 68, 2194, 2222), 0), 0, Tag1 ("CClosure", 21)), 0); (("beta", 1508), ((Tag3 (Tag1 ((("RedFlags", 1505)), "reds"), 0, (0)), 100000000, 0, -436), 0, (("kernel/cClosure.mli", 69, 2223, 2223), ("kernel/cClosure.mli", 69, 2223, 2251), 0), 0, Tag1 ("CClosure", 22)), 0); (("betadeltazeta", 1509), ((Tag3 (Tag1 ((("RedFlags", 1505)), "reds"), 0, (0)), 100000000, 0, -435), 0, (("kernel/cClosure.mli", 70, 2252, 2252), ("kernel/cClosure.mli", 70, 2252, 2280), 0), 0, Tag1 ("CClosure", 23)), 0); (("betaiota", 1510), ((Tag3 (Tag1 ((("RedFlags", 1505)), "reds"), 0, (0)), 100000000, 0, -434), 0, (("kernel/cClosure.mli", 71, 2281, 2281), ("kernel/cClosure.mli", 71, 2281, 2309), 0), 0, Tag1 ("CClosure", 24)), 0); (("betaiotazeta", 1511), ((Tag3 (Tag1 ((("RedFlags", 1505)), "reds"), 0, (0)), 100000000, 0, -433), 0, (("kernel/cClosure.mli", 72, 2310, 2310), ("kernel/cClosure.mli", 72, 2310, 2338), 0), 0, Tag1 ("CClosure", 25)), 0); (("betazeta", 1512), ((Tag3 (Tag1 ((("RedFlags", 1505)), "reds"), 0, (0)), 100000000, 0, -432), 0, (("kernel/cClosure.mli", 73, 2339, 2339), ("kernel/cClosure.mli", 73, 2339, 2367), 0), 0, Tag1 ("CClosure", 26)), 0); (("delta", 1513), ((Tag3 (Tag1 ((("RedFlags", 1505)), "reds"), 0, (0)), 100000000, 0, -431), 0, (("kernel/cClosure.mli", 74, 2368, 2368), ("kernel/cClosure.mli", 74, 2368, 2396), 0), 0, Tag1 ("CClosure", 27)), 0); (("zeta", 1514), ((Tag3 (Tag1 ((("RedFlags", 1505)), "reds"), 0, (0)), 100000000, 0, -430), 0, (("kernel/cClosure.mli", 75, 2397, 2397), ("kernel/cClosure.mli", 75, 2397, 2425), 0), 0, Tag1 ("CClosure", 28)), 0); (("nored", 1515), ((Tag3 (Tag1 ((("RedFlags", 1505)), "reds"), 0, (0)), 100000000, 0, -429), 0, (("kernel/cClosure.mli", 76, 2426, 2426), ("kernel/cClosure.mli", 76, 2426, 2454), 0), 0, Tag1 ("CClosure", 29)), 0); Tag1 (("table_key", 1516), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Names")), "tableKey"), [(Tag3 (Tag1 ((Tag2 ("Univ")), "puniverses"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -428)], (0)), 100000000, 0, -427)], (0)), 100000000, 0, -426)), 0, 0, 0, 0, (("kernel/cClosure.mli", 79, 2530, 2530), ("kernel/cClosure.mli", 79, 2530, 2582), 0), 0, 0, 0, Tag1 ("CClosure", 30)), 1, 0); Tag3 (("KeyTable", 1517), 0, (Tag1 ([Tag1 (("key", 1594), (0, 0, 0, 1, ((Tag3 ((("table_key", 1516)), 0, (0)), 100000000, 0, -617)), 0, 0, 0, 0, (("kernel/cClosure.mli", 81, 2584, 2617), ("kernel/cClosure.mli", 81, 2584, 2637), 0), 0, 0, 0, Tag1 ("CClosure", 31)), 1, 0); Tag1 (("t", 1595), ([((("a")), 100000000, 0, -616)], 1, 0, 1, 0, [15], [2], 0, 0, (("hashtbl.mli", 372, 15205, 15209), ("hashtbl.mli", 372, 15205, 15219), 0), 0, 0, 0, Tag1 ("Stdlib__Hashtbl", 36)), 1, 0); (("create", 1596), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -615), (Tag3 ((("t", 1595)), [((("a")), 100000000, 0, -614)], (0)), 100000000, 0, -613), 0), 100000000, 0, -612), 0, (("hashtbl.mli", 373, 15220, 15224), ("hashtbl.mli", 373, 15220, 15248), 0), 0, Tag1 ("Stdlib__Hashtbl", 37)), 0); (("clear", 1597), ((Tag1 (0, (Tag3 ((("t", 1595)), [((("a")), 100000000, 0, -611)], (0)), 100000000, 0, -610), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -609), 0), 100000000, 0, -608), 0, (("hashtbl.mli", 374, 15249, 15253), ("hashtbl.mli", 374, 15249, 15277), 0), 0, Tag1 ("Stdlib__Hashtbl", 38)), 0); (("reset", 1598), ((Tag1 (0, (Tag3 ((("t", 1595)), [((("a")), 100000000, 0, -607)], (0)), 100000000, 0, -606), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -605), 0), 100000000, 0, -604), 0, (("hashtbl.mli", 375, 15278, 15282), ("hashtbl.mli", 375, 15278, 15306), 0), 0, Tag1 ("Stdlib__Hashtbl", 39)), 0); (("copy", 1599), ((Tag1 (0, (Tag3 ((("t", 1595)), [((("a")), 100000000, 0, -602)], (0)), 100000000, 0, -603), (Tag3 ((("t", 1595)), [((("a")), 100000000, 0, -602)], (0)), 100000000, 0, -601), 0), 100000000, 0, -600), 0, (("hashtbl.mli", 377, 15327, 15331), ("hashtbl.mli", 377, 15327, 15354), 0), 0, Tag1 ("Stdlib__Hashtbl", 40)), 0); (("add", 1600), ((Tag1 (0, (Tag3 ((("t", 1595)), [((("a")), 100000000, 0, -597)], (0)), 100000000, 0, -599), (Tag1 (0, (Tag3 ((("key", 1594)), 0, (0)), 100000000, 0, -598), (Tag1 (0, ((("a")), 100000000, 0, -597), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -596), 0), 100000000, 0, -595), 0), 100000000, 0, -594), 0), 100000000, 0, -593), 0, (("hashtbl.mli", 378, 15355, 15359), ("hashtbl.mli", 378, 15355, 15394), 0), 0, Tag1 ("Stdlib__Hashtbl", 41)), 0); (("remove", 1601), ((Tag1 (0, (Tag3 ((("t", 1595)), [((("a")), 100000000, 0, -592)], (0)), 100000000, 0, -591), (Tag1 (0, (Tag3 ((("key", 1594)), 0, (0)), 100000000, 0, -590), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -589), 0), 100000000, 0, -588), 0), 100000000, 0, -587), 0, (("hashtbl.mli", 379, 15395, 15399), ("hashtbl.mli", 379, 15395, 15431), 0), 0, Tag1 ("Stdlib__Hashtbl", 42)), 0); (("find", 1602), ((Tag1 (0, (Tag3 ((("t", 1595)), [((("a")), 100000000, 0, -584)], (0)), 100000000, 0, -586), (Tag1 (0, (Tag3 ((("key", 1594)), 0, (0)), 100000000, 0, -585), ((("a")), 100000000, 0, -584), 0), 100000000, 0, -583), 0), 100000000, 0, -582), 0, (("hashtbl.mli", 380, 15432, 15436), ("hashtbl.mli", 380, 15432, 15464), 0), 0, Tag1 ("Stdlib__Hashtbl", 43)), 0); (("find_opt", 1603), ((Tag1 (0, (Tag3 ((("t", 1595)), [((("a")), 100000000, 0, -579)], (0)), 100000000, 0, -581), (Tag1 (0, (Tag3 ((("key", 1594)), 0, (0)), 100000000, 0, -580), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -579)], (0)), 100000000, 0, -578), 0), 100000000, 0, -577), 0), 100000000, 0, -576), 0, (("hashtbl.mli", 381, 15465, 15469), ("hashtbl.mli", 381, 15465, 15508), 0), 0, Tag1 ("Stdlib__Hashtbl", 44)), 0); (("find_all", 1604), ((Tag1 (0, (Tag3 ((("t", 1595)), [((("a")), 100000000, 0, -573)], (0)), 100000000, 0, -575), (Tag1 (0, (Tag3 ((("key", 1594)), 0, (0)), 100000000, 0, -574), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -573)], (0)), 100000000, 0, -572), 0), 100000000, 0, -571), 0), 100000000, 0, -570), 0, (("hashtbl.mli", 384, 15533, 15537), ("hashtbl.mli", 384, 15533, 15574), 0), 0, Tag1 ("Stdlib__Hashtbl", 45)), 0); (("replace", 1605), ((Tag1 (0, (Tag3 ((("t", 1595)), [((("a")), 100000000, 0, -567)], (0)), 100000000, 0, -569), (Tag1 (0, (Tag3 ((("key", 1594)), 0, (0)), 100000000, 0, -568), (Tag1 (0, ((("a")), 100000000, 0, -567), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -566), 0), 100000000, 0, -565), 0), 100000000, 0, -564), 0), 100000000, 0, -563), 0, (("hashtbl.mli", 385, 15575, 15579), ("hashtbl.mli", 385, 15575, 15618), 0), 0, Tag1 ("Stdlib__Hashtbl", 46)), 0); (("mem", 1606), ((Tag1 (0, (Tag3 ((("t", 1595)), [((("a")), 100000000, 0, -562)], (0)), 100000000, 0, -561), (Tag1 (0, (Tag3 ((("key", 1594)), 0, (0)), 100000000, 0, -560), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -559), 0), 100000000, 0, -558), 0), 100000000, 0, -557), 0, (("hashtbl.mli", 386, 15619, 15623), ("hashtbl.mli", 386, 15619, 15652), 0), 0, Tag1 ("Stdlib__Hashtbl", 47)), 0); (("iter", 1607), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1594)), 0, (0)), 100000000, 0, -556), (Tag1 (0, ((("a")), 100000000, 0, -552), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -555), 0), 100000000, 0, -554), 0), 100000000, 0, -553), (Tag1 (0, (Tag3 ((("t", 1595)), [((("a")), 100000000, 0, -552)], (0)), 100000000, 0, -551), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -550), 0), 100000000, 0, -549), 0), 100000000, 0, -548), 0, (("hashtbl.mli", 387, 15653, 15657), ("hashtbl.mli", 387, 15653, 15703), 0), 0, Tag1 ("Stdlib__Hashtbl", 48)), 0); (("filter_map_inplace", 1608), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1594)), 0, (0)), 100000000, 0, -547), (Tag1 (0, ((("a")), 100000000, 0, -543), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -543)], (0)), 100000000, 0, -546), 0), 100000000, 0, -545), 0), 100000000, 0, -544), (Tag1 (0, (Tag3 ((("t", 1595)), [((("a")), 100000000, 0, -543)], (0)), 100000000, 0, -542), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -541), 0), 100000000, 0, -540), 0), 100000000, 0, -539), 0, (("hashtbl.mli", 388, 15704, 15708), ("hashtbl.mli", 389, 15768, 15778), 0), 0, Tag1 ("Stdlib__Hashtbl", 49)), 0); (("fold", 1609), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1594)), 0, (0)), 100000000, 0, -538), (Tag1 (0, ((("a")), 100000000, 0, -534), (Tag1 (0, ((("acc")), 100000000, 0, -532), ((("acc")), 100000000, 0, -532), 0), 100000000, 0, -537), 0), 100000000, 0, -536), 0), 100000000, 0, -535), (Tag1 (0, (Tag3 ((("t", 1595)), [((("a")), 100000000, 0, -534)], (0)), 100000000, 0, -533), (Tag1 (0, ((("acc")), 100000000, 0, -532), ((("acc")), 100000000, 0, -532), 0), 100000000, 0, -531), 0), 100000000, 0, -530), 0), 100000000, 0, -529), 0, (("hashtbl.mli", 392, 15803, 15807), ("hashtbl.mli", 393, 15818, 15875), 0), 0, Tag1 ("Stdlib__Hashtbl", 50)), 0); (("length", 1610), ((Tag1 (0, (Tag3 ((("t", 1595)), [((("a")), 100000000, 0, -528)], (0)), 100000000, 0, -527), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -526), 0), 100000000, 0, -525), 0, (("hashtbl.mli", 394, 15876, 15880), ("hashtbl.mli", 394, 15876, 15904), 0), 0, Tag1 ("Stdlib__Hashtbl", 51)), 0); (("stats", 1611), ((Tag1 (0, (Tag3 ((("t", 1595)), [((("a")), 100000000, 0, -524)], (0)), 100000000, 0, -523), (Tag3 (Tag1 ((Tag2 ("Stdlib__Hashtbl")), "statistics"), 0, (0)), 100000000, 0, -522), 0), 100000000, 0, -521), 0, (("hashtbl.mli", 395, 15905, 15909), ("hashtbl.mli", 395, 15905, 15938), 0), 0, Tag1 ("Stdlib__Hashtbl", 52)), 0); (("to_seq", 1612), ((Tag1 (0, (Tag3 ((("t", 1595)), [((("a")), 100000000, 0, -519)], (0)), 100000000, 0, -520), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 1594)), 0, (0)), 100000000, 0, -518); ((("a")), 100000000, 0, -519)]), 100000000, 0, -517)], (0)), 100000000, 0, -516), 0), 100000000, 0, -515), 0, (("hashtbl.mli", 397, 15959, 15963), ("hashtbl.mli", 397, 15959, 16000), 0), 0, Tag1 ("Stdlib__Hashtbl", 53)), 0); (("to_seq_keys", 1613), ((Tag1 (0, (Tag3 ((("t", 1595)), [((0), 100000000, 0, -514)], (0)), 100000000, 0, -513), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("key", 1594)), 0, (0)), 100000000, 0, -512)], (0)), 100000000, 0, -511), 0), 100000000, 0, -510), 0, (("hashtbl.mli", 400, 16025, 16029), ("hashtbl.mli", 400, 16025, 16063), 0), 0, Tag1 ("Stdlib__Hashtbl", 54)), 0); (("to_seq_values", 1614), ((Tag1 (0, (Tag3 ((("t", 1595)), [((("a")), 100000000, 0, -508)], (0)), 100000000, 0, -509), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [((("a")), 100000000, 0, -508)], (0)), 100000000, 0, -507), 0), 100000000, 0, -506), 0, (("hashtbl.mli", 403, 16088, 16092), ("hashtbl.mli", 403, 16088, 16128), 0), 0, Tag1 ("Stdlib__Hashtbl", 55)), 0); (("add_seq", 1615), ((Tag1 (0, (Tag3 ((("t", 1595)), [((("a")), 100000000, 0, -504)], (0)), 100000000, 0, -505), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 1594)), 0, (0)), 100000000, 0, -503); ((("a")), 100000000, 0, -504)]), 100000000, 0, -502)], (0)), 100000000, 0, -501), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -500), 0), 100000000, 0, -499), 0), 100000000, 0, -498), 0, (("hashtbl.mli", 406, 16153, 16157), ("hashtbl.mli", 406, 16153, 16203), 0), 0, Tag1 ("Stdlib__Hashtbl", 56)), 0); (("replace_seq", 1616), ((Tag1 (0, (Tag3 ((("t", 1595)), [((("a")), 100000000, 0, -496)], (0)), 100000000, 0, -497), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 1594)), 0, (0)), 100000000, 0, -495); ((("a")), 100000000, 0, -496)]), 100000000, 0, -494)], (0)), 100000000, 0, -493), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -492), 0), 100000000, 0, -491), 0), 100000000, 0, -490), 0, (("hashtbl.mli", 409, 16228, 16232), ("hashtbl.mli", 409, 16228, 16282), 0), 0, Tag1 ("Stdlib__Hashtbl", 57)), 0); (("of_seq", 1617), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 1594)), 0, (0)), 100000000, 0, -489); ((("a")), 100000000, 0, -486)]), 100000000, 0, -488)], (0)), 100000000, 0, -487), (Tag3 ((("t", 1595)), [((("a")), 100000000, 0, -486)], (0)), 100000000, 0, -485), 0), 100000000, 0, -484), 0, (("hashtbl.mli", 412, 16307, 16311), ("hashtbl.mli", 412, 16307, 16348), 0), 0, Tag1 ("Stdlib__Hashtbl", 58)), 0)]), 0, (("kernel/cClosure.mli", 81, 2584, 2584), ("kernel/cClosure.mli", 81, 2584, 2637), 0), Tag1 ("CClosure", 32)), 0, 0); Tag1 (("fconstr", 1518), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("kernel/cClosure.mli", 88, 2783, 2783), ("kernel/cClosure.mli", 88, 2783, 2795), 0), 0, 0, 0, Tag1 ("CClosure", 33)), 1, 0); Tag1 (("finvert", 1519), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("kernel/cClosure.mli", 92, 2898, 2898), ("kernel/cClosure.mli", 92, 2898, 2910), 0), 0, 0, 0, Tag1 ("CClosure", 34)), 1, 0); Tag1 (("usubs", 1520), ([((("a")), 100000000, 0, -425)], 1, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Univ")), "puniverses"), [(Tag3 (Tag1 ((Tag2 ("Esubst")), "subs"), [((("a")), 100000000, 0, -425)], (0)), 100000000, 0, -424)], (0)), 100000000, 0, -423)), [7], [0], 0, 0, (("kernel/cClosure.mli", 94, 2912, 2912), ("kernel/cClosure.mli", 94, 2912, 2951), 0), 0, 0, 0, Tag1 ("CClosure", 35)), 1, 0); Tag1 (("evar_repack", 1521), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("kernel/cClosure.mli", 96, 2953, 2953), ("kernel/cClosure.mli", 96, 2953, 2969), 0), 0, 0, 0, Tag1 ("CClosure", 36)), 1, 0); Tag1 (("fterm", 1522), (0, 0, Tag1 ([(("FRel", 973), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -347)]), 0, (("kernel/cClosure.mli", 99, 2984, 2986), ("kernel/cClosure.mli", 99, 2984, 2999), 0), 0, Tag1 ("CClosure", 38)); (("FAtom", 974), ([(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -348)]), 0, (("kernel/cClosure.mli", 100, 3000, 3002), ("kernel/cClosure.mli", 100, 3000, 3019), 0), 0, Tag1 ("CClosure", 39)); (("FFlex", 975), ([(Tag3 ((("table_key", 1516)), 0, (0)), 100000000, 0, -349)]), 0, (("kernel/cClosure.mli", 101, 3043, 3045), ("kernel/cClosure.mli", 101, 3043, 3065), 0), 0, Tag1 ("CClosure", 40)); (("FInd", 976), ([(Tag3 (Tag1 ((Tag2 ("Constr")), "pinductive"), 0, (0)), 100000000, 0, -350)]), 0, (("kernel/cClosure.mli", 102, 3066, 3068), ("kernel/cClosure.mli", 102, 3066, 3088), 0), 0, Tag1 ("CClosure", 41)); (("FConstruct", 977), ([(Tag3 (Tag1 ((Tag2 ("Constr")), "pconstructor"), 0, (0)), 100000000, 0, -351)]), 0, (("kernel/cClosure.mli", 103, 3089, 3091), ("kernel/cClosure.mli", 103, 3089, 3119), 0), 0, Tag1 ("CClosure", 42)); (("FApp", 978), ([(Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -352); (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -354)], (0)), 100000000, 0, -353)]), 0, (("kernel/cClosure.mli", 104, 3120, 3122), ("kernel/cClosure.mli", 104, 3120, 3155), 0), 0, Tag1 ("CClosure", 43)); (("FProj", 979), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Projection"), "t"), 0, (0)), 100000000, 0, -355); (Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -356)]), 0, (("kernel/cClosure.mli", 105, 3156, 3158), ("kernel/cClosure.mli", 105, 3156, 3191), 0), 0, Tag1 ("CClosure", 44)); (("FFix", 980), ([(Tag3 (Tag1 ((Tag2 ("Constr")), "fixpoint"), 0, (0)), 100000000, 0, -357); (Tag3 ((("usubs", 1520)), [(Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -359)], (0)), 100000000, 0, -358)]), 0, (("kernel/cClosure.mli", 106, 3192, 3194), ("kernel/cClosure.mli", 106, 3192, 3228), 0), 0, Tag1 ("CClosure", 45)); (("FCoFix", 981), ([(Tag3 (Tag1 ((Tag2 ("Constr")), "cofixpoint"), 0, (0)), 100000000, 0, -360); (Tag3 ((("usubs", 1520)), [(Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -362)], (0)), 100000000, 0, -361)]), 0, (("kernel/cClosure.mli", 107, 3229, 3231), ("kernel/cClosure.mli", 107, 3229, 3269), 0), 0, Tag1 ("CClosure", 46)); (("FCaseT", 982), ([(Tag3 (Tag1 ((Tag2 ("Constr")), "case_info"), 0, (0)), 100000000, 0, -363); (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Instance"), "t"), 0, (0)), 100000000, 0, -364); (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -366)], (0)), 100000000, 0, -365); (Tag3 (Tag1 ((Tag2 ("Constr")), "case_return"), 0, (0)), 100000000, 0, -367); (Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -368); (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "case_branch"), 0, (0)), 100000000, 0, -370)], (0)), 100000000, 0, -369); (Tag3 ((("usubs", 1520)), [(Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -372)], (0)), 100000000, 0, -371)]), 0, (("kernel/cClosure.mli", 108, 3270, 3272), ("kernel/cClosure.mli", 108, 3270, 3386), 0), 0, Tag1 ("CClosure", 47)); (("FCaseInvert", 983), ([(Tag3 (Tag1 ((Tag2 ("Constr")), "case_info"), 0, (0)), 100000000, 0, -373); (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Instance"), "t"), 0, (0)), 100000000, 0, -374); (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -376)], (0)), 100000000, 0, -375); (Tag3 (Tag1 ((Tag2 ("Constr")), "case_return"), 0, (0)), 100000000, 0, -377); (Tag3 ((("finvert", 1519)), 0, (0)), 100000000, 0, -378); (Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -379); (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "case_branch"), 0, (0)), 100000000, 0, -381)], (0)), 100000000, 0, -380); (Tag3 ((("usubs", 1520)), [(Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -383)], (0)), 100000000, 0, -382)]), 0, (("kernel/cClosure.mli", 109, 3429, 3431), ("kernel/cClosure.mli", 109, 3429, 3560), 0), 0, Tag1 ("CClosure", 48)); (("FLambda", 984), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -384); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -388)], (0)), 100000000, 0, -387); (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -389)]), 100000000, 0, -386)], (0)), 100000000, 0, -385); (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -390); (Tag3 ((("usubs", 1520)), [(Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -392)], (0)), 100000000, 0, -391)]), 0, (("kernel/cClosure.mli", 110, 3561, 3563), ("kernel/cClosure.mli", 110, 3561, 3650), 0), 0, Tag1 ("CClosure", 49)); (("FProd", 1007), ([(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -394)], (0)), 100000000, 0, -393); (Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -395); (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -396); (Tag3 ((("usubs", 1520)), [(Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -398)], (0)), 100000000, 0, -397)]), 0, (("kernel/cClosure.mli", 111, 3651, 3653), ("kernel/cClosure.mli", 111, 3651, 3726), 0), 0, Tag1 ("CClosure", 50)); (("FLetIn", 1008), ([(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -400)], (0)), 100000000, 0, -399); (Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -401); (Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -402); (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -403); (Tag3 ((("usubs", 1520)), [(Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -405)], (0)), 100000000, 0, -404)]), 0, (("kernel/cClosure.mli", 112, 3727, 3729), ("kernel/cClosure.mli", 112, 3727, 3813), 0), 0, Tag1 ("CClosure", 51)); (("FEvar", 1009), ([(Tag3 (Tag1 ((Tag2 ("Evar")), "t"), 0, (0)), 100000000, 0, -406); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -408)], (0)), 100000000, 0, -407); (Tag3 ((("usubs", 1520)), [(Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -410)], (0)), 100000000, 0, -409); (Tag3 ((("evar_repack", 1521)), 0, (0)), 100000000, 0, -411)]), 0, (("kernel/cClosure.mli", 113, 3814, 3816), ("kernel/cClosure.mli", 113, 3814, 3877), 0), 0, Tag1 ("CClosure", 52)); (("FInt", 1019), ([(Tag3 (Tag1 ((Tag2 ("Uint63")), "t"), 0, (0)), 100000000, 0, -412)]), 0, (("kernel/cClosure.mli", 114, 3878, 3880), ("kernel/cClosure.mli", 114, 3878, 3898), 0), 0, Tag1 ("CClosure", 53)); (("FFloat", 1067), ([(Tag3 (Tag1 ((Tag2 ("Float64")), "t"), 0, (0)), 100000000, 0, -413)]), 0, (("kernel/cClosure.mli", 115, 3899, 3901), ("kernel/cClosure.mli", 115, 3899, 3922), 0), 0, Tag1 ("CClosure", 54)); (("FArray", 1104), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Instance"), "t"), 0, (0)), 100000000, 0, -414); (Tag3 (Tag1 ((Tag2 ("Parray")), "t"), [(Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -416)], (0)), 100000000, 0, -415); (Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -417)]), 0, (("kernel/cClosure.mli", 116, 3923, 3925), ("kernel/cClosure.mli", 116, 3923, 3981), 0), 0, Tag1 ("CClosure", 55)); (("FLIFT", 1121), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -418); (Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -419)]), 0, (("kernel/cClosure.mli", 117, 3982, 3984), ("kernel/cClosure.mli", 117, 3982, 4008), 0), 0, Tag1 ("CClosure", 56)); (("FCLOS", 1122), ([(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -420); (Tag3 ((("usubs", 1520)), [(Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -422)], (0)), 100000000, 0, -421)]), 0, (("kernel/cClosure.mli", 118, 4009, 4011), ("kernel/cClosure.mli", 118, 4009, 4044), 0), 0, Tag1 ("CClosure", 57)); (("FIrrelevant", 1123), (0), 0, (("kernel/cClosure.mli", 119, 4045, 4047), ("kernel/cClosure.mli", 119, 4045, 4060), 0), 0, Tag1 ("CClosure", 58)); (("FLOCKED", 1124), (0), 0, (("kernel/cClosure.mli", 120, 4061, 4063), ("kernel/cClosure.mli", 120, 4061, 4072), 0), 0, Tag1 ("CClosure", 59))], 0), 1, 0, 0, 0, 0, 0, (("kernel/cClosure.mli", 98, 2971, 2971), ("kernel/cClosure.mli", 120, 4061, 4072), 0), 0, 0, 0, Tag1 ("CClosure", 37)), 1, 0); Tag1 (("next_native_args", 1523), ([((("a")), 100000000, 0, -346)], 1, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("CPrimitives")), "arg_kind"), 0, (0)), 100000000, 0, -345); ((("a")), 100000000, 0, -346)]), 100000000, 0, -344)], (0)), 100000000, 0, -343)), [25], [0], 0, 0, (("kernel/cClosure.mli", 125, 4253, 4253), ("kernel/cClosure.mli", 125, 4253, 4312), 0), 0, 0, 0, Tag1 ("CClosure", 60)), 1, 0); Tag1 (("stack_member", 1524), (0, 0, Tag1 ([(("Zapp", 1183), ([(Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -322)], (0)), 100000000, 0, -321)]), 0, (("kernel/cClosure.mli", 128, 4334, 4336), ("kernel/cClosure.mli", 128, 4334, 4359), 0), 0, Tag1 ("CClosure", 63)); (("ZcaseT", 1184), ([(Tag3 (Tag1 ((Tag2 ("Constr")), "case_info"), 0, (0)), 100000000, 0, -323); (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Instance"), "t"), 0, (0)), 100000000, 0, -324); (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -326)], (0)), 100000000, 0, -325); (Tag3 (Tag1 ((Tag2 ("Constr")), "case_return"), 0, (0)), 100000000, 0, -327); (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "case_branch"), 0, (0)), 100000000, 0, -329)], (0)), 100000000, 0, -328); (Tag3 ((("usubs", 1520)), [(Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -331)], (0)), 100000000, 0, -330)]), 0, (("kernel/cClosure.mli", 129, 4360, 4362), ("kernel/cClosure.mli", 129, 4360, 4466), 0), 0, Tag1 ("CClosure", 64)); (("Zproj", 1185), ([(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Projection"), "Repr"), "t"), 0, (0)), 100000000, 0, -332)]), 0, (("kernel/cClosure.mli", 130, 4467, 4469), ("kernel/cClosure.mli", 130, 4467, 4497), 0), 0, Tag1 ("CClosure", 65)); (("Zfix", 1205), ([(Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -333); (Tag3 ((("stack", 1525)), 0, (0)), 100000000, 0, -334)]), 0, (("kernel/cClosure.mli", 131, 4498, 4500), ("kernel/cClosure.mli", 131, 4498, 4525), 0), 0, Tag1 ("CClosure", 66)); (("Zprimitive", 1206), ([(Tag3 (Tag1 ((Tag2 ("CPrimitives")), "t"), 0, (0)), 100000000, 0, -335); (Tag3 (Tag1 ((Tag2 ("Constr")), "pconstant"), 0, (0)), 100000000, 0, -336); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -338)], (0)), 100000000, 0, -337); (Tag3 ((("next_native_args", 1523)), [(Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -340)], (0)), 100000000, 0, -339)]), 0, (("kernel/cClosure.mli", 132, 4526, 4528), ("kernel/cClosure.mli", 132, 4526, 4611), 0), 0, Tag1 ("CClosure", 67)); (("Zshift", 1207), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -341)]), 0, (("kernel/cClosure.mli", 134, 4701, 4703), ("kernel/cClosure.mli", 134, 4701, 4718), 0), 0, Tag1 ("CClosure", 68)); (("Zupdate", 1208), ([(Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -342)]), 0, (("kernel/cClosure.mli", 135, 4719, 4721), ("kernel/cClosure.mli", 135, 4719, 4741), 0), 0, Tag1 ("CClosure", 69))], 0), 1, 0, 0, 0, 0, 0, (("kernel/cClosure.mli", 127, 4314, 4314), ("kernel/cClosure.mli", 135, 4719, 4741), 0), 0, 0, 0, Tag1 ("CClosure", 61)), 1, 0); Tag1 (("stack", 1525), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("stack_member", 1524)), 0, (0)), 100000000, 0, -320)], (0)), 100000000, 0, -319)), 0, 0, 0, 0, (("kernel/cClosure.mli", 137, 4743, 4743), ("kernel/cClosure.mli", 137, 4743, 4772), 0), 0, 0, 0, Tag1 ("CClosure", 62)), 2, 0); (("empty_stack", 1526), ((Tag3 ((("stack", 1525)), 0, (0)), 100000000, 0, -318), 0, (("kernel/cClosure.mli", 139, 4774, 4774), ("kernel/cClosure.mli", 139, 4774, 4797), 0), 0, Tag1 ("CClosure", 70)), 0); (("append_stack", 1527), ((Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -317)], (0)), 100000000, 0, -316), (Tag1 (0, (Tag3 ((("stack", 1525)), 0, (0)), 100000000, 0, -315), (Tag3 ((("stack", 1525)), 0, (0)), 100000000, 0, -314), 0), 100000000, 0, -313), 0), 100000000, 0, -312), 0, (("kernel/cClosure.mli", 140, 4798, 4798), ("kernel/cClosure.mli", 140, 4798, 4848), 0), 0, Tag1 ("CClosure", 71)), 0); (("check_native_args", 1528), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("CPrimitives")), "t"), 0, (0)), 100000000, 0, -311), (Tag1 (0, (Tag3 ((("stack", 1525)), 0, (0)), 100000000, 0, -310), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -309), 0), 100000000, 0, -308), 0), 100000000, 0, -307), 0, (("kernel/cClosure.mli", 142, 4850, 4850), ("kernel/cClosure.mli", 142, 4850, 4904), 0), 0, Tag1 ("CClosure", 72)), 0); (("get_native_args1", 1529), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("CPrimitives")), "t"), 0, (0)), 100000000, 0, -306), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "pconstant"), 0, (0)), 100000000, 0, -305), (Tag1 (0, (Tag3 ((("stack", 1525)), 0, (0)), 100000000, 0, -304), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -299)], (0)), 100000000, 0, -298); (Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -300); (Tag3 ((("next_native_args", 1523)), [(Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -302)], (0)), 100000000, 0, -301); (Tag3 ((("stack", 1525)), 0, (0)), 100000000, 0, -303)]), 100000000, 0, -297), 0), 100000000, 0, -296), 0), 100000000, 0, -295), 0), 100000000, 0, -294), 0, (("kernel/cClosure.mli", 143, 4905, 4905), ("kernel/cClosure.mli", 144, 4967, 5026), 0), 0, Tag1 ("CClosure", 73)), 0); (("stack_args_size", 1530), ((Tag1 (0, (Tag3 ((("stack", 1525)), 0, (0)), 100000000, 0, -293), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -292), 0), 100000000, 0, -291), 0, (("kernel/cClosure.mli", 146, 5028, 5028), ("kernel/cClosure.mli", 146, 5028, 5062), 0), 0, Tag1 ("CClosure", 74)), 0); (("inductive_subst", 1531), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "mutual_inductive_body"), 0, (0)), 100000000, 0, -290), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Instance"), "t"), 0, (0)), 100000000, 0, -289), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -288)], (0)), 100000000, 0, -287), (Tag3 ((("usubs", 1520)), [(Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -286)], (0)), 100000000, 0, -285), 0), 100000000, 0, -284), 0), 100000000, 0, -283), 0), 100000000, 0, -282), 0, (("kernel/cClosure.mli", 148, 5064, 5064), ("kernel/cClosure.mli", 151, 5161, 5179), 0), 0, Tag1 ("CClosure", 75)), 0); (("usubs_lift", 1532), ((Tag1 (0, (Tag3 ((("usubs", 1520)), [((("a")), 100000000, 0, -280)], (0)), 100000000, 0, -281), (Tag3 ((("usubs", 1520)), [((("a")), 100000000, 0, -280)], (0)), 100000000, 0, -279), 0), 100000000, 0, -278), 0, (("kernel/cClosure.mli", 153, 5181, 5181), ("kernel/cClosure.mli", 153, 5181, 5218), 0), 0, Tag1 ("CClosure", 76)), 0); (("usubs_liftn", 1533), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -277), (Tag1 (0, (Tag3 ((("usubs", 1520)), [((("a")), 100000000, 0, -275)], (0)), 100000000, 0, -276), (Tag3 ((("usubs", 1520)), [((("a")), 100000000, 0, -275)], (0)), 100000000, 0, -274), 0), 100000000, 0, -273), 0), 100000000, 0, -272), 0, (("kernel/cClosure.mli", 154, 5219, 5219), ("kernel/cClosure.mli", 154, 5219, 5264), 0), 0, Tag1 ("CClosure", 77)), 0); (("usubs_cons", 1534), ((Tag1 (0, ((("a")), 100000000, 0, -270), (Tag1 (0, (Tag3 ((("usubs", 1520)), [((("a")), 100000000, 0, -270)], (0)), 100000000, 0, -271), (Tag3 ((("usubs", 1520)), [((("a")), 100000000, 0, -270)], (0)), 100000000, 0, -269), 0), 100000000, 0, -268), 0), 100000000, 0, -267), 0, (("kernel/cClosure.mli", 155, 5265, 5265), ("kernel/cClosure.mli", 155, 5265, 5308), 0), 0, Tag1 ("CClosure", 78)), 0); (("usubst_instance", 1535), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Univ")), "puniverses"), [((("a")), 100000000, 0, -266)], (0)), 100000000, 0, -265), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Instance"), "t"), 0, (0)), 100000000, 0, -264), (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Instance"), "t"), 0, (0)), 100000000, 0, -263), 0), 100000000, 0, -262), 0), 100000000, 0, -261), 0, (("kernel/cClosure.mli", 158, 5357, 5357), ("kernel/cClosure.mli", 158, 5357, 5435), 0), 0, Tag1 ("CClosure", 79)), 0); (("inject", 1536), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -260), (Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -259), 0), 100000000, 0, -258), 0, (("kernel/cClosure.mli", 164, 5595, 5595), ("kernel/cClosure.mli", 164, 5595, 5625), 0), 0, Tag1 ("CClosure", 80)), 0); (("mk_atom", 1537), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -257), (Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -256), 0), 100000000, 0, -255), 0, (("kernel/cClosure.mli", 167, 5680, 5680), ("kernel/cClosure.mli", 167, 5680, 5711), 0), 0, Tag1 ("CClosure", 81)), 0); (("mk_red", 1538), ((Tag1 (0, (Tag3 ((("fterm", 1522)), 0, (0)), 100000000, 0, -254), (Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -253), 0), 100000000, 0, -252), 0, (("kernel/cClosure.mli", 170, 5766, 5766), ("kernel/cClosure.mli", 170, 5766, 5795), 0), 0, Tag1 ("CClosure", 82)), 0); (("fterm_of", 1539), ((Tag1 (0, (Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -251), (Tag3 ((("fterm", 1522)), 0, (0)), 100000000, 0, -250), 0), 100000000, 0, -249), 0, (("kernel/cClosure.mli", 172, 5797, 5797), ("kernel/cClosure.mli", 172, 5797, 5828), 0), 0, Tag1 ("CClosure", 83)), 0); (("term_of_fconstr", 1540), ((Tag1 (0, (Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -248), (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -247), 0), 100000000, 0, -246), 0, (("kernel/cClosure.mli", 173, 5829, 5829), ("kernel/cClosure.mli", 173, 5829, 5868), 0), 0, Tag1 ("CClosure", 84)), 0); (("destFLambda", 1541), ((Tag1 (0, (Tag1 (0, (Tag3 ((("usubs", 1520)), [(Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -245)], (0)), 100000000, 0, -244), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -243), (Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -242), 0), 100000000, 0, -241), 0), 100000000, 0, -240), (Tag1 (0, (Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -239), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -236)], (0)), 100000000, 0, -235); (Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -237); (Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -238)]), 100000000, 0, -234), 0), 100000000, 0, -233), 0), 100000000, 0, -232), 0, (("kernel/cClosure.mli", 174, 5869, 5869), ("kernel/cClosure.mli", 175, 5887, 5987), 0), 0, Tag1 ("CClosure", 85)), 0); Tag1 (("clos_infos", 1542), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("kernel/cClosure.mli", 178, 6028, 6028), ("kernel/cClosure.mli", 178, 6028, 6043), 0), 0, 0, 0, Tag1 ("CClosure", 86)), 1, 0); Tag1 (("clos_tab", 1543), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("kernel/cClosure.mli", 179, 6044, 6044), ("kernel/cClosure.mli", 179, 6044, 6057), 0), 0, 0, 0, Tag1 ("CClosure", 87)), 1, 0); (("create_conv_infos", 1544), ((Tag1 (Tag1 ("univs"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("UGraph")), "t"), 0, (0)), 100000000, 0, -231)], (0)), 100000000, 0, -230), (Tag1 (Tag1 ("evars"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "evar_handler"), [(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -229)], (0)), 100000000, 0, -228)], (0)), 100000000, 0, -227), (Tag1 (0, (Tag3 (Tag1 ((("RedFlags", 1505)), "reds"), 0, (0)), 100000000, 0, -226), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -225), (Tag3 ((("clos_infos", 1542)), 0, (0)), 100000000, 0, -224), 0), 100000000, 0, -223), 0), 100000000, 0, -222), 0), 100000000, 0, -221), 0), 100000000, 0, -220), 0, (("kernel/cClosure.mli", 180, 6058, 6058), ("kernel/cClosure.mli", 181, 6082, 6158), 0), 0, Tag1 ("CClosure", 88)), 0); (("create_clos_infos", 1545), ((Tag1 (Tag1 ("univs"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("UGraph")), "t"), 0, (0)), 100000000, 0, -219)], (0)), 100000000, 0, -218), (Tag1 (Tag1 ("evars"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "evar_handler"), [(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -217)], (0)), 100000000, 0, -216)], (0)), 100000000, 0, -215), (Tag1 (0, (Tag3 (Tag1 ((("RedFlags", 1505)), "reds"), 0, (0)), 100000000, 0, -214), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -213), (Tag3 ((("clos_infos", 1542)), 0, (0)), 100000000, 0, -212), 0), 100000000, 0, -211), 0), 100000000, 0, -210), 0), 100000000, 0, -209), 0), 100000000, 0, -208), 0, (("kernel/cClosure.mli", 182, 6159, 6159), ("kernel/cClosure.mli", 183, 6183, 6259), 0), 0, Tag1 ("CClosure", 89)), 0); (("oracle_of_infos", 1546), ((Tag1 (0, (Tag3 ((("clos_infos", 1542)), 0, (0)), 100000000, 0, -207), (Tag3 (Tag1 ((Tag2 ("Conv_oracle")), "oracle"), 0, (0)), 100000000, 0, -206), 0), 100000000, 0, -205), 0, (("kernel/cClosure.mli", 184, 6260, 6260), ("kernel/cClosure.mli", 184, 6260, 6314), 0), 0, Tag1 ("CClosure", 90)), 0); (("create_tab", 1547), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -204), (Tag3 ((("clos_tab", 1543)), 0, (0)), 100000000, 0, -203), 0), 100000000, 0, -202), 0, (("kernel/cClosure.mli", 186, 6316, 6316), ("kernel/cClosure.mli", 186, 6316, 6349), 0), 0, Tag1 ("CClosure", 91)), 0); (("info_env", 1548), ((Tag1 (0, (Tag3 ((("clos_infos", 1542)), 0, (0)), 100000000, 0, -201), (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -200), 0), 100000000, 0, -199), 0, (("kernel/cClosure.mli", 188, 6351, 6351), ("kernel/cClosure.mli", 188, 6351, 6383), 0), 0, Tag1 ("CClosure", 92)), 0); (("info_flags", 1549), ((Tag1 (0, (Tag3 ((("clos_infos", 1542)), 0, (0)), 100000000, 0, -198), (Tag3 (Tag1 ((("RedFlags", 1505)), "reds"), 0, (0)), 100000000, 0, -197), 0), 100000000, 0, -196), 0, (("kernel/cClosure.mli", 189, 6384, 6384), ("kernel/cClosure.mli", 189, 6384, 6418), 0), 0, Tag1 ("CClosure", 93)), 0); (("info_univs", 1550), ((Tag1 (0, (Tag3 ((("clos_infos", 1542)), 0, (0)), 100000000, 0, -195), (Tag3 (Tag1 ((Tag2 ("UGraph")), "t"), 0, (0)), 100000000, 0, -194), 0), 100000000, 0, -193), 0, (("kernel/cClosure.mli", 190, 6419, 6419), ("kernel/cClosure.mli", 190, 6419, 6458), 0), 0, Tag1 ("CClosure", 94)), 0); (("unfold_projection", 1551), ((Tag1 (0, (Tag3 ((("clos_infos", 1542)), 0, (0)), 100000000, 0, -192), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Projection"), "t"), 0, (0)), 100000000, 0, -191), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("stack_member", 1524)), 0, (0)), 100000000, 0, -190)], (0)), 100000000, 0, -189), 0), 100000000, 0, -188), 0), 100000000, 0, -187), 0, (("kernel/cClosure.mli", 191, 6459, 6459), ("kernel/cClosure.mli", 191, 6459, 6532), 0), 0, Tag1 ("CClosure", 95)), 0); (("push_relevance", 1552), ((Tag1 (0, (Tag3 ((("clos_infos", 1542)), 0, (0)), 100000000, 0, -186), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [((("b")), 100000000, 0, -185)], (0)), 100000000, 0, -184), (Tag3 ((("clos_infos", 1542)), 0, (0)), 100000000, 0, -183), 0), 100000000, 0, -182), 0), 100000000, 0, -181), 0, (("kernel/cClosure.mli", 193, 6534, 6534), ("kernel/cClosure.mli", 193, 6534, 6606), 0), 0, Tag1 ("CClosure", 96)), 0); (("push_relevances", 1553), ((Tag1 (0, (Tag3 ((("clos_infos", 1542)), 0, (0)), 100000000, 0, -180), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [((("b")), 100000000, 0, -179)], (0)), 100000000, 0, -178)], (0)), 100000000, 0, -177), (Tag3 ((("clos_infos", 1542)), 0, (0)), 100000000, 0, -176), 0), 100000000, 0, -175), 0), 100000000, 0, -174), 0, (("kernel/cClosure.mli", 194, 6607, 6607), ("kernel/cClosure.mli", 194, 6607, 6686), 0), 0, Tag1 ("CClosure", 97)), 0); (("set_info_relevances", 1554), ((Tag1 (0, (Tag3 ((("clos_infos", 1542)), 0, (0)), 100000000, 0, -173), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Range")), "t"), [(Tag3 (Tag1 ((Tag2 ("Sorts")), "relevance"), 0, (0)), 100000000, 0, -172)], (0)), 100000000, 0, -171), (Tag3 ((("clos_infos", 1542)), 0, (0)), 100000000, 0, -170), 0), 100000000, 0, -169), 0), 100000000, 0, -168), 0, (("kernel/cClosure.mli", 195, 6687, 6687), ("kernel/cClosure.mli", 195, 6687, 6764), 0), 0, Tag1 ("CClosure", 98)), 0); (("info_relevances", 1555), ((Tag1 (0, (Tag3 ((("clos_infos", 1542)), 0, (0)), 100000000, 0, -167), (Tag3 (Tag1 ((Tag2 ("Range")), "t"), [(Tag3 (Tag1 ((Tag2 ("Sorts")), "relevance"), 0, (0)), 100000000, 0, -166)], (0)), 100000000, 0, -165), 0), 100000000, 0, -164), 0, (("kernel/cClosure.mli", 197, 6766, 6766), ("kernel/cClosure.mli", 197, 6766, 6825), 0), 0, Tag1 ("CClosure", 99)), 0); (("infos_with_reds", 1556), ((Tag1 (0, (Tag3 ((("clos_infos", 1542)), 0, (0)), 100000000, 0, -163), (Tag1 (0, (Tag3 (Tag1 ((("RedFlags", 1505)), "reds"), 0, (0)), 100000000, 0, -162), (Tag3 ((("clos_infos", 1542)), 0, (0)), 100000000, 0, -161), 0), 100000000, 0, -160), 0), 100000000, 0, -159), 0, (("kernel/cClosure.mli", 199, 6827, 6827), ("kernel/cClosure.mli", 199, 6827, 6881), 0), 0, Tag1 ("CClosure", 100)), 0); (("norm_val", 1557), ((Tag1 (0, (Tag3 ((("clos_infos", 1542)), 0, (0)), 100000000, 0, -158), (Tag1 (0, (Tag3 ((("clos_tab", 1543)), 0, (0)), 100000000, 0, -157), (Tag1 (0, (Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -156), (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -155), 0), 100000000, 0, -154), 0), 100000000, 0, -153), 0), 100000000, 0, -152), 0, (("kernel/cClosure.mli", 204, 6956, 6956), ("kernel/cClosure.mli", 204, 6956, 7014), 0), 0, Tag1 ("CClosure", 101)), 0); (("norm_term", 1558), ((Tag1 (0, (Tag3 ((("clos_infos", 1542)), 0, (0)), 100000000, 0, -151), (Tag1 (0, (Tag3 ((("clos_tab", 1543)), 0, (0)), 100000000, 0, -150), (Tag1 (0, (Tag3 ((("usubs", 1520)), [(Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -149)], (0)), 100000000, 0, -148), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -147), (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -146), 0), 100000000, 0, -145), 0), 100000000, 0, -144), 0), 100000000, 0, -143), 0), 100000000, 0, -142), 0, (("kernel/cClosure.mli", 207, 7056, 7056), ("kernel/cClosure.mli", 207, 7056, 7145), 0), 0, Tag1 ("CClosure", 102)), 0); (("whd_val", 1559), ((Tag1 (0, (Tag3 ((("clos_infos", 1542)), 0, (0)), 100000000, 0, -141), (Tag1 (0, (Tag3 ((("clos_tab", 1543)), 0, (0)), 100000000, 0, -140), (Tag1 (0, (Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -139), (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -138), 0), 100000000, 0, -137), 0), 100000000, 0, -136), 0), 100000000, 0, -135), 0, (("kernel/cClosure.mli", 210, 7195, 7195), ("kernel/cClosure.mli", 210, 7195, 7252), 0), 0, Tag1 ("CClosure", 103)), 0); (("whd_stack", 1560), ((Tag1 (0, (Tag3 ((("clos_infos", 1542)), 0, (0)), 100000000, 0, -134), (Tag1 (0, (Tag3 ((("clos_tab", 1543)), 0, (0)), 100000000, 0, -133), (Tag1 (0, (Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -132), (Tag1 (0, (Tag3 ((("stack", 1525)), 0, (0)), 100000000, 0, -131), (Tag2 ([(Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -129); (Tag3 ((("stack", 1525)), 0, (0)), 100000000, 0, -130)]), 100000000, 0, -128), 0), 100000000, 0, -127), 0), 100000000, 0, -126), 0), 100000000, 0, -125), 0), 100000000, 0, -124), 0, (("kernel/cClosure.mli", 214, 7369, 7369), ("kernel/cClosure.mli", 215, 7385, 7448), 0), 0, Tag1 ("CClosure", 104)), 0); (("skip_irrelevant_stack", 1561), ((Tag1 (0, (Tag3 ((("clos_infos", 1542)), 0, (0)), 100000000, 0, -123), (Tag1 (0, (Tag3 ((("stack", 1525)), 0, (0)), 100000000, 0, -122), (Tag3 ((("stack", 1525)), 0, (0)), 100000000, 0, -121), 0), 100000000, 0, -120), 0), 100000000, 0, -119), 0, (("kernel/cClosure.mli", 217, 7450, 7450), ("kernel/cClosure.mli", 217, 7450, 7506), 0), 0, Tag1 ("CClosure", 105)), 0); (("eta_expand_stack", 1562), ((Tag1 (0, (Tag3 ((("clos_infos", 1542)), 0, (0)), 100000000, 0, -118), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -117)], (0)), 100000000, 0, -116), (Tag1 (0, (Tag3 ((("stack", 1525)), 0, (0)), 100000000, 0, -115), (Tag3 ((("stack", 1525)), 0, (0)), 100000000, 0, -114), 0), 100000000, 0, -113), 0), 100000000, 0, -112), 0), 100000000, 0, -111), 0, (("kernel/cClosure.mli", 219, 7508, 7508), ("kernel/cClosure.mli", 219, 7508, 7590), 0), 0, Tag1 ("CClosure", 106)), 0); (("eta_expand_ind_stack", 1563), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -110), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -109), (Tag1 (0, (Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -108), (Tag1 (0, (Tag3 ((("stack", 1525)), 0, (0)), 100000000, 0, -107), (Tag1 (0, (Tag2 ([(Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -105); (Tag3 ((("stack", 1525)), 0, (0)), 100000000, 0, -106)]), 100000000, 0, -104), (Tag2 ([(Tag3 ((("stack", 1525)), 0, (0)), 100000000, 0, -102); (Tag3 ((("stack", 1525)), 0, (0)), 100000000, 0, -103)]), 100000000, 0, -101), 0), 100000000, 0, -100), 0), 100000000, 0, -99), 0), 100000000, 0, -98), 0), 100000000, 0, -97), 0), 100000000, 0, -96), 0, (("kernel/cClosure.mli", 230, 8053, 8053), ("kernel/cClosure.mli", 231, 8120, 8157), 0), 0, Tag1 ("CClosure", 107)), 0); (("unfold_ref_with_args", 1564), ((Tag1 (0, (Tag3 ((("clos_infos", 1542)), 0, (0)), 100000000, 0, -95), (Tag1 (0, (Tag3 ((("clos_tab", 1543)), 0, (0)), 100000000, 0, -94), (Tag1 (0, (Tag3 ((("table_key", 1516)), 0, (0)), 100000000, 0, -93), (Tag1 (0, (Tag3 ((("stack", 1525)), 0, (0)), 100000000, 0, -92), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -90); (Tag3 ((("stack", 1525)), 0, (0)), 100000000, 0, -91)]), 100000000, 0, -89)], (0)), 100000000, 0, -88), 0), 100000000, 0, -87), 0), 100000000, 0, -86), 0), 100000000, 0, -85), 0), 100000000, 0, -84), 0, (("kernel/cClosure.mli", 240, 8525, 8525), ("kernel/cClosure.mli", 245, 8605, 8634), 0), 0, Tag1 ("CClosure", 108)), 0); (("set_conv", 1565), ((Tag1 (0, (Tag1 (0, (Tag3 ((("clos_infos", 1542)), 0, (0)), 100000000, 0, -83), (Tag1 (0, (Tag3 ((("clos_tab", 1543)), 0, (0)), 100000000, 0, -82), (Tag1 (0, (Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -81), (Tag1 (0, (Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -80), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -79), 0), 100000000, 0, -78), 0), 100000000, 0, -77), 0), 100000000, 0, -76), 0), 100000000, 0, -75), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -74), 0), 100000000, 0, -73), 0, (("kernel/cClosure.mli", 248, 8662, 8662), ("kernel/cClosure.mli", 248, 8662, 8739), 0), 0, Tag1 ("CClosure", 109)), 0); (("lift_fconstr", 1566), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -72), (Tag1 (0, (Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -71), (Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -70), 0), 100000000, 0, -69), 0), 100000000, 0, -68), 0, (("kernel/cClosure.mli", 253, 8845, 8845), ("kernel/cClosure.mli", 253, 8845, 8894), 0), 0, Tag1 ("CClosure", 110)), 0); (("lift_fconstr_vect", 1567), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -67), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -66)], (0)), 100000000, 0, -65), (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -64)], (0)), 100000000, 0, -63), 0), 100000000, 0, -62), 0), 100000000, 0, -61), 0, (("kernel/cClosure.mli", 254, 8895, 8895), ("kernel/cClosure.mli", 254, 8895, 8956), 0), 0, Tag1 ("CClosure", 111)), 0); (("mk_clos", 1568), ((Tag1 (0, (Tag3 ((("usubs", 1520)), [(Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -60)], (0)), 100000000, 0, -59), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -58), (Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -57), 0), 100000000, 0, -56), 0), 100000000, 0, -55), 0, (("kernel/cClosure.mli", 256, 8958, 8958), ("kernel/cClosure.mli", 256, 8958, 9011), 0), 0, Tag1 ("CClosure", 112)), 0); (("mk_clos_vect", 1569), ((Tag1 (0, (Tag3 ((("usubs", 1520)), [(Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -54)], (0)), 100000000, 0, -53), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -52)], (0)), 100000000, 0, -51), (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -50)], (0)), 100000000, 0, -49), 0), 100000000, 0, -48), 0), 100000000, 0, -47), 0, (("kernel/cClosure.mli", 257, 9012, 9012), ("kernel/cClosure.mli", 257, 9012, 9077), 0), 0, Tag1 ("CClosure", 113)), 0); (("kni", 1570), ((Tag1 (0, (Tag3 ((("clos_infos", 1542)), 0, (0)), 100000000, 0, -46), (Tag1 (0, (Tag3 ((("clos_tab", 1543)), 0, (0)), 100000000, 0, -45), (Tag1 (0, (Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -44), (Tag1 (0, (Tag3 ((("stack", 1525)), 0, (0)), 100000000, 0, -43), (Tag2 ([(Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -41); (Tag3 ((("stack", 1525)), 0, (0)), 100000000, 0, -42)]), 100000000, 0, -40), 0), 100000000, 0, -39), 0), 100000000, 0, -38), 0), 100000000, 0, -37), 0), 100000000, 0, -36), 0, (("kernel/cClosure.mli", 259, 9079, 9079), ("kernel/cClosure.mli", 259, 9079, 9149), 0), 0, Tag1 ("CClosure", 114)), 0); (("knr", 1571), ((Tag1 (0, (Tag3 ((("clos_infos", 1542)), 0, (0)), 100000000, 0, -35), (Tag1 (0, (Tag3 ((("clos_tab", 1543)), 0, (0)), 100000000, 0, -34), (Tag1 (0, (Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -33), (Tag1 (0, (Tag3 ((("stack", 1525)), 0, (0)), 100000000, 0, -32), (Tag2 ([(Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -30); (Tag3 ((("stack", 1525)), 0, (0)), 100000000, 0, -31)]), 100000000, 0, -29), 0), 100000000, 0, -28), 0), 100000000, 0, -27), 0), 100000000, 0, -26), 0), 100000000, 0, -25), 0, (("kernel/cClosure.mli", 260, 9150, 9150), ("kernel/cClosure.mli", 260, 9150, 9220), 0), 0, Tag1 ("CClosure", 115)), 0); (("kl", 1572), ((Tag1 (0, (Tag3 ((("clos_infos", 1542)), 0, (0)), 100000000, 0, -24), (Tag1 (0, (Tag3 ((("clos_tab", 1543)), 0, (0)), 100000000, 0, -23), (Tag1 (0, (Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -22), (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0), 100000000, 0, -19), 0), 100000000, 0, -18), 0, (("kernel/cClosure.mli", 261, 9221, 9221), ("kernel/cClosure.mli", 261, 9221, 9273), 0), 0, Tag1 ("CClosure", 116)), 0); (("zip", 1573), ((Tag1 (0, (Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -17), (Tag1 (0, (Tag3 ((("stack", 1525)), 0, (0)), 100000000, 0, -16), (Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -15), 0), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("kernel/cClosure.mli", 263, 9275, 9275), ("kernel/cClosure.mli", 263, 9275, 9312), 0), 0, Tag1 ("CClosure", 117)), 0); (("term_of_process", 1574), ((Tag1 (0, (Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -12), (Tag1 (0, (Tag3 ((("stack", 1525)), 0, (0)), 100000000, 0, -11), (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -10), 0), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("kernel/cClosure.mli", 265, 9314, 9314), ("kernel/cClosure.mli", 265, 9314, 9362), 0), 0, Tag1 ("CClosure", 118)), 0); (("to_constr", 1575), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Univ")), "puniverses"), [(Tag3 (Tag1 ((Tag2 ("Esubst")), "lift"), 0, (0)), 100000000, 0, -7)], (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 ((("fconstr", 1518)), 0, (0)), 100000000, 0, -5), (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("kernel/cClosure.mli", 267, 9364, 9364), ("kernel/cClosure.mli", 267, 9364, 9421), 0), 0, Tag1 ("CClosure", 119)), 0)], "CClosure", [("CClosure", ("\167\b\022\241V-\r\253\b\002\000j]\223%\142")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])
val to_constr : Esubst.lift Univ.puniverses -> fconstr -> Constr.constr

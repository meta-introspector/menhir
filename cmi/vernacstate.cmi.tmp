module Parser :
  sig
    type t
    val init : unit -> t
    val cur_state : unit -> t
    val parse : t -> 'a Pcoq.Entry.t -> Pcoq.Parsable.t -> 'a
  end
module System :
  sig
    module Synterp : sig type t end
    module Interp : sig type t end
    val protect : ('a -> 'b) -> 'a -> 'b
  end
module Synterp :
  sig
    type t = { parsing : Parser.t; system : System.Synterp.t; }
    val init : unit -> t
    val freeze : unit -> t
    val unfreeze : t -> unit
  end
module LemmaStack :
  sig
    type t
    val pop : t -> Declare.Proof.t * t option
    val push : t option -> Declare.Proof.t -> t
    val map : f:(Declare.Proof.t -> Declare.Proof.t) -> t -> t
    val map_top : f:(Declare.Proof.t -> Declare.Proof.t) -> t -> t
    val with_top : t -> f:(Declare.Proof.t -> 'a) -> 'a
    val get_top : t -> Declare.Proof.t
    val get_all_proof_names : t -> Names.Id.t list
  end
module Interp :
  sig
    type t = {
      system : System.Interp.t;
      lemmas : LemmaStack.t option;
      program : Declare.OblState.t NeList.t;
      opaques : Opaques.Summary.t;
    }
    val freeze_interp_state : unit -> t
    val unfreeze_interp_state : t -> unit
    val invalidate_cache : unit -> unit
  end
type t = { synterp : Synterp.t; interp : Interp.t; }
val freeze_full_state : unit -> t
val unfreeze_full_state : t -> unit
module Stm :
  sig
    type pstate
    val pstate : t -> pstate
    val set_pstate : t -> pstate -> t
    type non_pstate =
        Summary.Synterp.frozen * Lib.Synterp.frozen * Summary.Interp.frozen *
        Lib.Interp.frozen
    val non_pstate : t -> non_pstate
    val same_env : t -> t -> bool
    val make_shallow : t -> t
  end
module Declare :
  sig
    exception NoCurrentProof
    val there_are_pending_proofs : unit -> bool
    val get_open_goals : unit -> int
    val give_me_the_proof : unit -> Proof.t
    val give_me_the_proof_opt : unit -> Proof.t option
    val get_current_proof_name : unit -> Names.Id.t
    val map_proof : (Proof.t -> Proof.t) -> unit
    val with_current_proof :
      (unit Proofview.tactic -> Proof.t -> Proof.t * 'a) -> 'a
    val return_proof : unit -> Declare.Proof.closed_proof_output
    val return_partial_proof : unit -> Declare.Proof.closed_proof_output
    val close_future_proof :
      feedback_id:Stateid.t ->
      Declare.Proof.closed_proof_output Future.computation ->
      Declare.Proof.proof_object
    val close_proof :
      opaque:Vernacexpr.opacity_flag ->
      keep_body_ucst_separate:bool -> Declare.Proof.proof_object
    val discard_all : unit -> unit
    val update_sigma_univs : UGraph.t -> unit
    val get_current_context : unit -> Evd.evar_map * Environ.env
    val get_all_proof_names : unit -> Names.Id.t list
    val copy_terminators :
      src:LemmaStack.t option ->
      tgt:LemmaStack.t option -> LemmaStack.t option
    val get_program : unit -> Declare.OblState.t NeList.t
    val set : LemmaStack.t option * Declare.OblState.t NeList.t -> unit
    val get_pstate : unit -> Declare.Proof.t option
    val unfreeze : LemmaStack.t -> unit("DEBUG:rule", [Tag3 (("Parser", 1326), 0, (Tag1 ([Tag1 (("t", 1336), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("vernac/vernacstate.mli", 12, 696, 698), ("vernac/vernacstate.mli", 12, 696, 704), 0), 0, 0, 0, Tag1 ("Vernacstate", 0)), 1, 0); (("init", 1337), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -22), (Tag3 ((("t", 1336)), 0, (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("vernac/vernacstate.mli", 14, 706, 708), ("vernac/vernacstate.mli", 14, 706, 728), 0), 0, Tag1 ("Vernacstate", 1)), 0); (("cur_state", 1338), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -19), (Tag3 ((("t", 1336)), 0, (0)), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("vernac/vernacstate.mli", 15, 729, 731), ("vernac/vernacstate.mli", 15, 729, 756), 0), 0, Tag1 ("Vernacstate", 2)), 0); (("parse", 1339), ((Tag1 (0, (Tag3 ((("t", 1336)), 0, (0)), 100000000, 0, -16), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Pcoq")), "Entry"), "t"), [((("a")), 100000000, 0, -13)], (0)), 100000000, 0, -15), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Pcoq")), "Parsable"), "t"), 0, (0)), 100000000, 0, -14), ((("a")), 100000000, 0, -13), 0), 100000000, 0, -12), 0), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("vernac/vernacstate.mli", 17, 758, 760), ("vernac/vernacstate.mli", 17, 758, 817), 0), 0, Tag1 ("Vernacstate", 3)), 0)]), 0, (("vernac/vernacstate.mli", 11, 676, 676), ("vernac/vernacstate.mli", 19, 819, 822), 0), Tag1 ("Vernacstate", 4)), 0, 0); Tag3 (("System", 1327), 0, (Tag1 ([Tag3 (("Synterp", 1340), 0, (Tag1 ([Tag1 (("t", 1343), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("vernac/vernacstate.mli", 26, 889, 893), ("vernac/vernacstate.mli", 26, 889, 899), 0), 0, 0, 0, Tag1 ("Vernacstate", 5)), 1, 0)]), 0, (("vernac/vernacstate.mli", 24, 865, 867), ("vernac/vernacstate.mli", 28, 901, 906), 0), Tag1 ("Vernacstate", 6)), 0, 0); Tag3 (("Interp", 1341), 0, (Tag1 ([Tag1 (("t", 1344), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("vernac/vernacstate.mli", 33, 999, 1003), ("vernac/vernacstate.mli", 33, 999, 1009), 0), 0, 0, 0, Tag1 ("Vernacstate", 7)), 1, 0)]), 0, (("vernac/vernacstate.mli", 30, 908, 910), ("vernac/vernacstate.mli", 35, 1011, 1016), 0), Tag1 ("Vernacstate", 8)), 0, 0); (("protect", 1342), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -26), ((("b")), 100000000, 0, -25), 0), 100000000, 0, -27), (Tag1 (0, ((("a")), 100000000, 0, -26), ((("b")), 100000000, 0, -25), 0), 100000000, 0, -24), 0), 100000000, 0, -23), 0, (("vernac/vernacstate.mli", 38, 1094, 1096), ("vernac/vernacstate.mli", 38, 1094, 1132), 0), 0, Tag1 ("Vernacstate", 9)), 0)]), 0, (("vernac/vernacstate.mli", 22, 844, 844), ("vernac/vernacstate.mli", 40, 1134, 1137), 0), Tag1 ("Vernacstate", 10)), 0, 0); Tag3 (("Synterp", 1328), 0, (Tag1 ([Tag1 (("t", 1345), (0, 0, [[(("parsing", 341), 0, (Tag3 (Tag1 ((("Parser", 1326)), "t"), 0, (0)), 100000000, 0, -37), (("vernac/vernacstate.mli", 45, 1172, 1178), ("vernac/vernacstate.mli", 47, 1283, 1288), 0), 0, Tag1 ("Vernacstate", 12)); (("system", 342), 0, (Tag3 (Tag1 (Tag1 ((("System", 1327)), "Synterp"), "t"), 0, (0)), 100000000, 0, -38), (("vernac/vernacstate.mli", 47, 1283, 1289), ("vernac/vernacstate.mli", 47, 1283, 1314), 0), 0, Tag1 ("Vernacstate", 13))]], 1, 0, 0, 0, 0, 0, (("vernac/vernacstate.mli", 44, 1161, 1163), ("vernac/vernacstate.mli", 49, 1368, 1373), 0), 0, 0, 0, Tag1 ("Vernacstate", 11)), 1, 0); (("init", 1346), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -36), (Tag3 ((("t", 1345)), 0, (0)), 100000000, 0, -35), 0), 100000000, 0, -34), 0, (("vernac/vernacstate.mli", 51, 1375, 1377), ("vernac/vernacstate.mli", 51, 1375, 1397), 0), 0, Tag1 ("Vernacstate", 14)), 0); (("freeze", 1347), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -33), (Tag3 ((("t", 1345)), 0, (0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("vernac/vernacstate.mli", 52, 1398, 1400), ("vernac/vernacstate.mli", 52, 1398, 1422), 0), 0, Tag1 ("Vernacstate", 15)), 0); (("unfreeze", 1348), ((Tag1 (0, (Tag3 ((("t", 1345)), 0, (0)), 100000000, 0, -30), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("vernac/vernacstate.mli", 53, 1423, 1425), ("vernac/vernacstate.mli", 53, 1423, 1449), 0), 0, Tag1 ("Vernacstate", 16)), 0)]), 0, (("vernac/vernacstate.mli", 42, 1139, 1139), ("vernac/vernacstate.mli", 55, 1451, 1454), 0), Tag1 ("Vernacstate", 17)), 0, 0); Tag3 (("LemmaStack", 1329), 0, (Tag1 ([Tag1 (("t", 1349), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("vernac/vernacstate.mli", 60, 1482, 1484), ("vernac/vernacstate.mli", 60, 1482, 1490), 0), 0, 0, 0, Tag1 ("Vernacstate", 18)), 1, 0); (("pop", 1350), ((Tag1 (0, (Tag3 ((("t", 1349)), 0, (0)), 100000000, 0, -77), (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "Proof"), "t"), 0, (0)), 100000000, 0, -74); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 1349)), 0, (0)), 100000000, 0, -76)], (0)), 100000000, 0, -75)]), 100000000, 0, -73), 0), 100000000, 0, -72), 0, (("vernac/vernacstate.mli", 62, 1492, 1494), ("vernac/vernacstate.mli", 62, 1492, 1535), 0), 0, Tag1 ("Vernacstate", 19)), 0); (("push", 1351), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 1349)), 0, (0)), 100000000, 0, -71)], (0)), 100000000, 0, -70), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "Proof"), "t"), 0, (0)), 100000000, 0, -69), (Tag3 ((("t", 1349)), 0, (0)), 100000000, 0, -68), 0), 100000000, 0, -67), 0), 100000000, 0, -66), 0, (("vernac/vernacstate.mli", 63, 1536, 1538), ("vernac/vernacstate.mli", 63, 1536, 1581), 0), 0, Tag1 ("Vernacstate", 20)), 0); (("map", 1352), ((Tag1 (("f"), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "Proof"), "t"), 0, (0)), 100000000, 0, -65), (Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "Proof"), "t"), 0, (0)), 100000000, 0, -64), 0), 100000000, 0, -63), (Tag1 (0, (Tag3 ((("t", 1349)), 0, (0)), 100000000, 0, -62), (Tag3 ((("t", 1349)), 0, (0)), 100000000, 0, -61), 0), 100000000, 0, -60), 0), 100000000, 0, -59), 0, (("vernac/vernacstate.mli", 65, 1583, 1585), ("vernac/vernacstate.mli", 65, 1583, 1643), 0), 0, Tag1 ("Vernacstate", 21)), 0); (("map_top", 1353), ((Tag1 (("f"), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "Proof"), "t"), 0, (0)), 100000000, 0, -58), (Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "Proof"), "t"), 0, (0)), 100000000, 0, -57), 0), 100000000, 0, -56), (Tag1 (0, (Tag3 ((("t", 1349)), 0, (0)), 100000000, 0, -55), (Tag3 ((("t", 1349)), 0, (0)), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52), 0, (("vernac/vernacstate.mli", 66, 1644, 1646), ("vernac/vernacstate.mli", 66, 1644, 1708), 0), 0, Tag1 ("Vernacstate", 22)), 0); (("with_top", 1354), ((Tag1 (0, (Tag3 ((("t", 1349)), 0, (0)), 100000000, 0, -51), (Tag1 (("f"), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "Proof"), "t"), 0, (0)), 100000000, 0, -50), ((("a")), 100000000, 0, -48), 0), 100000000, 0, -49), ((("a")), 100000000, 0, -48), 0), 100000000, 0, -47), 0), 100000000, 0, -46), 0, (("vernac/vernacstate.mli", 67, 1709, 1711), ("vernac/vernacstate.mli", 67, 1709, 1763), 0), 0, Tag1 ("Vernacstate", 23)), 0); (("get_top", 1355), ((Tag1 (0, (Tag3 ((("t", 1349)), 0, (0)), 100000000, 0, -45), (Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "Proof"), "t"), 0, (0)), 100000000, 0, -44), 0), 100000000, 0, -43), 0, (("vernac/vernacstate.mli", 68, 1764, 1766), ("vernac/vernacstate.mli", 68, 1764, 1800), 0), 0, Tag1 ("Vernacstate", 24)), 0); (("get_all_proof_names", 1356), ((Tag1 (0, (Tag3 ((("t", 1349)), 0, (0)), 100000000, 0, -42), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -41)], (0)), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("vernac/vernacstate.mli", 69, 1801, 1803), ("vernac/vernacstate.mli", 69, 1801, 1849), 0), 0, Tag1 ("Vernacstate", 25)), 0)]), 0, (("vernac/vernacstate.mli", 58, 1457, 1457), ("vernac/vernacstate.mli", 71, 1851, 1854), 0), Tag1 ("Vernacstate", 26)), 0, 0); Tag3 (("Interp", 1330), 0, (Tag1 ([Tag1 (("t", 1357), (0, 0, [[(("system", 520), 0, (Tag3 (Tag1 (Tag1 ((("System", 1327)), "Interp"), "t"), 0, (0)), 100000000, 0, -87), (("vernac/vernacstate.mli", 76, 1886, 1890), ("vernac/vernacstate.mli", 78, 1944, 1947), 0), 0, Tag1 ("Vernacstate", 28)); (("lemmas", 521), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("LemmaStack", 1329)), "t"), 0, (0)), 100000000, 0, -89)], (0)), 100000000, 0, -88), (("vernac/vernacstate.mli", 78, 1944, 1948), ("vernac/vernacstate.mli", 80, 2021, 2024), 0), 0, Tag1 ("Vernacstate", 29)); (("program", 539), 0, (Tag3 (Tag1 ((Tag2 ("NeList")), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "OblState"), "t"), 0, (0)), 100000000, 0, -91)], (0)), 100000000, 0, -90), (("vernac/vernacstate.mli", 80, 2021, 2025), ("vernac/vernacstate.mli", 82, 2151, 2154), 0), 0, Tag1 ("Vernacstate", 30)); (("opaques", 555), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Opaques")), "Summary"), "t"), 0, (0)), 100000000, 0, -92), (("vernac/vernacstate.mli", 82, 2151, 2155), ("vernac/vernacstate.mli", 82, 2151, 2182), 0), 0, Tag1 ("Vernacstate", 31))]], 1, 0, 0, 0, 0, 0, (("vernac/vernacstate.mli", 75, 1877, 1877), ("vernac/vernacstate.mli", 84, 2214, 2217), 0), 0, 0, 0, Tag1 ("Vernacstate", 27)), 1, 0); (("freeze_interp_state", 1358), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -86), (Tag3 ((("t", 1357)), 0, (0)), 100000000, 0, -85), 0), 100000000, 0, -84), 0, (("vernac/vernacstate.mli", 86, 2219, 2219), ("vernac/vernacstate.mli", 86, 2219, 2254), 0), 0, Tag1 ("Vernacstate", 32)), 0); (("unfreeze_interp_state", 1359), ((Tag1 (0, (Tag3 ((("t", 1357)), 0, (0)), 100000000, 0, -83), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -82), 0), 100000000, 0, -81), 0, (("vernac/vernacstate.mli", 87, 2255, 2255), ("vernac/vernacstate.mli", 87, 2255, 2292), 0), 0, Tag1 ("Vernacstate", 33)), 0); (("invalidate_cache", 1360), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -80), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -79), 0), 100000000, 0, -78), 0, (("vernac/vernacstate.mli", 90, 2356, 2356), ("vernac/vernacstate.mli", 90, 2356, 2391), 0), 0, Tag1 ("Vernacstate", 34)), 0)]), 0, (("vernac/vernacstate.mli", 73, 1856, 1856), ("vernac/vernacstate.mli", 92, 2393, 2396), 0), Tag1 ("Vernacstate", 35)), 0, 0); Tag1 (("t", 1331), (0, 0, [[(("synterp", 561), 0, (Tag3 (Tag1 ((("Synterp", 1328)), "t"), 0, (0)), 100000000, 0, -8), (("vernac/vernacstate.mli", 95, 2407, 2411), ("vernac/vernacstate.mli", 96, 2430, 2433), 0), 0, Tag1 ("Vernacstate", 37)); (("interp", 562), 0, (Tag3 (Tag1 ((("Interp", 1330)), "t"), 0, (0)), 100000000, 0, -9), (("vernac/vernacstate.mli", 96, 2430, 2434), ("vernac/vernacstate.mli", 96, 2430, 2450), 0), 0, Tag1 ("Vernacstate", 38))]], 1, 0, 0, 0, 0, 0, (("vernac/vernacstate.mli", 94, 2398, 2398), ("vernac/vernacstate.mli", 97, 2451, 2454), 0), 0, 0, 0, Tag1 ("Vernacstate", 36)), 1, 0); (("freeze_full_state", 1332), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7), (Tag3 ((("t", 1331)), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("vernac/vernacstate.mli", 99, 2456, 2456), ("vernac/vernacstate.mli", 99, 2456, 2489), 0), 0, Tag1 ("Vernacstate", 39)), 0); (("unfreeze_full_state", 1333), ((Tag1 (0, (Tag3 ((("t", 1331)), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("vernac/vernacstate.mli", 100, 2490, 2490), ("vernac/vernacstate.mli", 100, 2490, 2525), 0), 0, Tag1 ("Vernacstate", 40)), 0); Tag3 (("Stm", 1334), 0, (Tag1 ([Tag1 (("pstate", 1361), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("vernac/vernacstate.mli", 106, 2622, 2624), ("vernac/vernacstate.mli", 106, 2622, 2635), 0), 0, 0, 0, Tag1 ("Vernacstate", 41)), 1, 0); (("pstate", 1362), ((Tag1 (0, (Tag3 ((("t", 1331)), 0, (0)), 100000000, 0, -116), (Tag3 ((("pstate", 1361)), 0, (0)), 100000000, 0, -115), 0), 100000000, 0, -114), 0, (("vernac/vernacstate.mli", 108, 2637, 2639), ("vernac/vernacstate.mli", 108, 2637, 2663), 0), 0, Tag1 ("Vernacstate", 42)), 0); (("set_pstate", 1363), ((Tag1 (0, (Tag3 ((("t", 1331)), 0, (0)), 100000000, 0, -113), (Tag1 (0, (Tag3 ((("pstate", 1361)), 0, (0)), 100000000, 0, -112), (Tag3 ((("t", 1331)), 0, (0)), 100000000, 0, -111), 0), 100000000, 0, -110), 0), 100000000, 0, -109), 0, (("vernac/vernacstate.mli", 109, 2664, 2666), ("vernac/vernacstate.mli", 109, 2664, 2699), 0), 0, Tag1 ("Vernacstate", 43)), 0); Tag1 (("non_pstate", 1364), (0, 0, 0, 1, ((Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Summary")), "Synterp"), "frozen"), 0, (0)), 100000000, 0, -105); (Tag3 (Tag1 (Tag1 ((Tag2 ("Lib")), "Synterp"), "frozen"), 0, (0)), 100000000, 0, -106); (Tag3 (Tag1 (Tag1 ((Tag2 ("Summary")), "Interp"), "frozen"), 0, (0)), 100000000, 0, -107); (Tag3 (Tag1 (Tag1 ((Tag2 ("Lib")), "Interp"), "frozen"), 0, (0)), 100000000, 0, -108)]), 100000000, 0, -104)), 0, 0, 0, 0, (("vernac/vernacstate.mli", 112, 2793, 2795), ("vernac/vernacstate.mli", 112, 2793, 2900), 0), 0, 0, 0, Tag1 ("Vernacstate", 44)), 1, 0); (("non_pstate", 1365), ((Tag1 (0, (Tag3 ((("t", 1331)), 0, (0)), 100000000, 0, -103), (Tag3 ((("non_pstate", 1364)), 0, (0)), 100000000, 0, -102), 0), 100000000, 0, -101), 0, (("vernac/vernacstate.mli", 113, 2901, 2903), ("vernac/vernacstate.mli", 113, 2901, 2935), 0), 0, Tag1 ("Vernacstate", 45)), 0); (("same_env", 1366), ((Tag1 (0, (Tag3 ((("t", 1331)), 0, (0)), 100000000, 0, -100), (Tag1 (0, (Tag3 ((("t", 1331)), 0, (0)), 100000000, 0, -99), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -98), 0), 100000000, 0, -97), 0), 100000000, 0, -96), 0, (("vernac/vernacstate.mli", 116, 3007, 3009), ("vernac/vernacstate.mli", 116, 3007, 3038), 0), 0, Tag1 ("Vernacstate", 46)), 0); (("make_shallow", 1367), ((Tag1 (0, (Tag3 ((("t", 1331)), 0, (0)), 100000000, 0, -95), (Tag3 ((("t", 1331)), 0, (0)), 100000000, 0, -94), 0), 100000000, 0, -93), 0, (("vernac/vernacstate.mli", 119, 3086, 3088), ("vernac/vernacstate.mli", 119, 3086, 3113), 0), 0, Tag1 ("Vernacstate", 47)), 0)]), 0, (("vernac/vernacstate.mli", 103, 2562, 2562), ("vernac/vernacstate.mli", 120, 3114, 3117), 0), Tag1 ("Vernacstate", 48)), 0, 0); Tag3 (("Declare", 1335), 0, (Tag1 ([Tag2 (("NoCurrentProof", 1368), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Vernacstate", 49)), 2, 0); (("there_are_pending_proofs", 1369), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -204), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -203), 0), 100000000, 0, -202), 0, (("vernac/vernacstate.mli", 127, 3208, 3210), ("vernac/vernacstate.mli", 127, 3208, 3253), 0), 0, Tag1 ("Vernacstate", 50)), 0); (("get_open_goals", 1370), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -201), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -200), 0), 100000000, 0, -199), 0, (("vernac/vernacstate.mli", 128, 3254, 3256), ("vernac/vernacstate.mli", 128, 3254, 3288), 0), 0, Tag1 ("Vernacstate", 51)), 0); (("give_me_the_proof", 1371), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -198), (Tag3 (Tag1 ((Tag2 ("Proof")), "t"), 0, (0)), 100000000, 0, -197), 0), 100000000, 0, -196), 0, (("vernac/vernacstate.mli", 130, 3290, 3292), ("vernac/vernacstate.mli", 130, 3290, 3331), 0), 0, Tag1 ("Vernacstate", 52)), 0); (("give_me_the_proof_opt", 1372), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -195), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Proof")), "t"), 0, (0)), 100000000, 0, -194)], (0)), 100000000, 0, -193), 0), 100000000, 0, -192), 0, (("vernac/vernacstate.mli", 131, 3332, 3334), ("vernac/vernacstate.mli", 131, 3332, 3384), 0), 0, Tag1 ("Vernacstate", 53)), 0); (("get_current_proof_name", 1373), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -191), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -190), 0), 100000000, 0, -189), 0, (("vernac/vernacstate.mli", 132, 3385, 3387), ("vernac/vernacstate.mli", 132, 3385, 3434), 0), 0, Tag1 ("Vernacstate", 54)), 0); (("map_proof", 1374), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proof")), "t"), 0, (0)), 100000000, 0, -188), (Tag3 (Tag1 ((Tag2 ("Proof")), "t"), 0, (0)), 100000000, 0, -187), 0), 100000000, 0, -186), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -185), 0), 100000000, 0, -184), 0, (("vernac/vernacstate.mli", 134, 3436, 3438), ("vernac/vernacstate.mli", 134, 3436, 3482), 0), 0, Tag1 ("Vernacstate", 55)), 0); (("with_current_proof", 1375), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -183)], (0)), 100000000, 0, -182), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proof")), "t"), 0, (0)), 100000000, 0, -181), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Proof")), "t"), 0, (0)), 100000000, 0, -180); ((("a")), 100000000, 0, -176)]), 100000000, 0, -179), 0), 100000000, 0, -178), 0), 100000000, 0, -177), ((("a")), 100000000, 0, -176), 0), 100000000, 0, -175), 0, (("vernac/vernacstate.mli", 135, 3483, 3485), ("vernac/vernacstate.mli", 136, 3510, 3572), 0), 0, Tag1 ("Vernacstate", 56)), 0); (("return_proof", 1376), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -174), (Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "Proof"), "closed_proof_output"), 0, (0)), 100000000, 0, -173), 0), 100000000, 0, -172), 0, (("vernac/vernacstate.mli", 138, 3574, 3576), ("vernac/vernacstate.mli", 138, 3574, 3636), 0), 0, Tag1 ("Vernacstate", 57)), 0); (("return_partial_proof", 1377), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -171), (Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "Proof"), "closed_proof_output"), 0, (0)), 100000000, 0, -170), 0), 100000000, 0, -169), 0, (("vernac/vernacstate.mli", 139, 3637, 3639), ("vernac/vernacstate.mli", 139, 3637, 3707), 0), 0, Tag1 ("Vernacstate", 58)), 0); (("close_future_proof", 1378), ((Tag1 (("feedback_id"), (Tag3 (Tag1 ((Tag2 ("Stateid")), "t"), 0, (0)), 100000000, 0, -168), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Future")), "computation"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "Proof"), "closed_proof_output"), 0, (0)), 100000000, 0, -167)], (0)), 100000000, 0, -166), (Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "Proof"), "proof_object"), 0, (0)), 100000000, 0, -165), 0), 100000000, 0, -164), 0), 100000000, 0, -163), 0, (("vernac/vernacstate.mli", 141, 3709, 3711), ("vernac/vernacstate.mli", 144, 3822, 3855), 0), 0, Tag1 ("Vernacstate", 59)), 0); (("close_proof", 1379), ((Tag1 (("opaque"), (Tag3 (Tag1 ((Tag2 ("Vernacexpr")), "opacity_flag"), 0, (0)), 100000000, 0, -162), (Tag1 (("keep_body_ucst_separate"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -161), (Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "Proof"), "proof_object"), 0, (0)), 100000000, 0, -160), 0), 100000000, 0, -159), 0), 100000000, 0, -158), 0, (("vernac/vernacstate.mli", 146, 3857, 3859), ("vernac/vernacstate.mli", 149, 3948, 3981), 0), 0, Tag1 ("Vernacstate", 60)), 0); (("discard_all", 1380), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -157), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -156), 0), 100000000, 0, -155), 0, (("vernac/vernacstate.mli", 151, 3983, 3985), ("vernac/vernacstate.mli", 151, 3983, 4015), 0), 0, Tag1 ("Vernacstate", 61)), 0); (("update_sigma_univs", 1381), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("UGraph")), "t"), 0, (0)), 100000000, 0, -154), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -153), 0), 100000000, 0, -152), 0, (("vernac/vernacstate.mli", 152, 4016, 4018), ("vernac/vernacstate.mli", 152, 4016, 4059), 0), 0, Tag1 ("Vernacstate", 62)), 0); (("get_current_context", 1382), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -151), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -149); (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -150)]), 100000000, 0, -148), 0), 100000000, 0, -147), 0, (("vernac/vernacstate.mli", 154, 4061, 4063), ("vernac/vernacstate.mli", 154, 4061, 4123), 0), 0, Tag1 ("Vernacstate", 63)), 0); (("get_all_proof_names", 1383), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -146), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -145)], (0)), 100000000, 0, -144), 0), 100000000, 0, -143), 0, (("vernac/vernacstate.mli", 156, 4125, 4127), ("vernac/vernacstate.mli", 156, 4125, 4176), 0), 0, Tag1 ("Vernacstate", 64)), 0); (("copy_terminators", 1384), ((Tag1 (("src"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("LemmaStack", 1329)), "t"), 0, (0)), 100000000, 0, -142)], (0)), 100000000, 0, -141), (Tag1 (("tgt"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("LemmaStack", 1329)), "t"), 0, (0)), 100000000, 0, -140)], (0)), 100000000, 0, -139), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("LemmaStack", 1329)), "t"), 0, (0)), 100000000, 0, -138)], (0)), 100000000, 0, -137), 0), 100000000, 0, -136), 0), 100000000, 0, -135), 0, (("vernac/vernacstate.mli", 158, 4178, 4180), ("vernac/vernacstate.mli", 158, 4178, 4276), 0), 0, Tag1 ("Vernacstate", 65)), 0); (("get_program", 1385), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -134), (Tag3 (Tag1 ((Tag2 ("NeList")), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "OblState"), "t"), 0, (0)), 100000000, 0, -133)], (0)), 100000000, 0, -132), 0), 100000000, 0, -131), 0, (("vernac/vernacstate.mli", 161, 4302, 4304), ("vernac/vernacstate.mli", 161, 4302, 4357), 0), 0, Tag1 ("Vernacstate", 66)), 0); (("set", 1386), ((Tag1 (0, (Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("LemmaStack", 1329)), "t"), 0, (0)), 100000000, 0, -128)], (0)), 100000000, 0, -127); (Tag3 (Tag1 ((Tag2 ("NeList")), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "OblState"), "t"), 0, (0)), 100000000, 0, -130)], (0)), 100000000, 0, -129)]), 100000000, 0, -126), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -125), 0), 100000000, 0, -124), 0, (("vernac/vernacstate.mli", 162, 4358, 4360), ("vernac/vernacstate.mli", 162, 4358, 4427), 0), 0, Tag1 ("Vernacstate", 67)), 0); (("get_pstate", 1387), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -123), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "Proof"), "t"), 0, (0)), 100000000, 0, -122)], (0)), 100000000, 0, -121), 0), 100000000, 0, -120), 0, (("vernac/vernacstate.mli", 164, 4429, 4431), ("vernac/vernacstate.mli", 164, 4429, 4478), 0), 0, Tag1 ("Vernacstate", 68)), 0); (("unfreeze", 1388), ((Tag1 (0, (Tag3 (Tag1 ((("LemmaStack", 1329)), "t"), 0, (0)), 100000000, 0, -119), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -118), 0), 100000000, 0, -117), 0, (("vernac/vernacstate.mli", 166, 4480, 4482), ("vernac/vernacstate.mli", 166, 4480, 4517), 0), 0, Tag1 ("Vernacstate", 69)), 0)]), [(("ocaml.deprecated", (("vernac/vernacstate.mli", 169, 4523, 4526), ("vernac/vernacstate.mli", 169, 4523, 4542), 0)), ([([(Tag1 (Tag2 ("This module is internal and should not be used, instead, thread the proof state", (("vernac/vernacstate.mli", 169, 4523, 4544), ("vernac/vernacstate.mli", 169, 4523, 4623), 0), 0)), (("vernac/vernacstate.mli", 169, 4523, 4543), ("vernac/vernacstate.mli", 169, 4523, 4624), 0), 0, 0)], (("vernac/vernacstate.mli", 169, 4523, 4543), ("vernac/vernacstate.mli", 169, 4523, 4624), 0))]), (("vernac/vernacstate.mli", 169, 4523, 4523), ("vernac/vernacstate.mli", 169, 4523, 4625), 0))], (("vernac/vernacstate.mli", 123, 3158, 3158), ("vernac/vernacstate.mli", 169, 4523, 4625), 0), Tag1 ("Vernacstate", 70)), 0, 0)], "Vernacstate", [("Vernacstate", ("P!\165X.5\141gX\168%\138\215%f\026")); ("Z", ("\253\196\2168\027\199O\134\220\218\031'\1484\233o")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Vernacexpr", ("Lu|g\028\024j\193\000\234\175\209&\211]\137")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Unix", (":B72R\011\005Sj\189)\011\239PH\254")); ("UnivSubst", ("\190qu\031mc\130\181\003G]\132\"\219m)")); ("UnivProblem", ("6'\161\018\181\001.\253\000\141a6\171\1727\155")); ("UnivNames", ("%\151_\209%+JM$n\001\232\194n\178N")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Unification", ("\017\027\157=\255\1914L\020\213h\154.\219\005\170")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UState", ("SD\203\215|\136\n\251\239\208\148\215C\n\167\005")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("Typeclasses", ("KO\1297x\192\210\231\001\1824l\135\192\160|")); ("Type_errors", ("7\157\162-\214M\206\196\228\191\005v\134\177\144\134")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Tok", ("\162\196\180\135\219\014\184\165;\207\025\215\176g\188\225")); ("Tactypes", ("\143E\135*\195\151\144H\151M\011($\017\159\203")); ("Tacred", ("\133d\143\1310z\030\237\232\002\001\025\147\140\215:")); ("Summary", ("\148G\135\226\024L3\246\021\028U\146\164`\253\250")); ("Store", ("/dT\252\145\179pq\216{\181\206\190K+U")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Random", ("\020\005Xq\171\026\218\152X\135\254\023\133zK\200")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Stateid", ("\183\165\247\166~\005\017.\179f.\178n\255(\137")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Section", ("\245\207\b\021\142v=\155#w\246}\"4b\006")); ("Safe_typing", (")\250?\164\145\132\241\127\186\152h+\145\"\237l")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("RetrieveObl", ("\181(\0225\214z\024#d\246.M\015.i\210")); ("Reductionops", ("\179\023P\218\146Uh\014IS\196C\031q~#")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Proofview_monad", ("\218\196\189S\147\216\129\221\231\224v\228O\024*\239")); ("Proofview", ("\245\140U\027\236\199\199&\242\156\199YG\250tA")); ("Proof_using", ("\015\162\022\031Y\152\208\231;\015\140;\163\177\251\196")); ("Proof_bullet", ("\249\179=\253g\211\149\212\t\217_0\179\197k\179")); ("Proof", ("\249\030\200g\248\164o&\tS\132\rTl\1736")); ("Primred", ("\158G\192\182\224\196\144*\174y_E\165\012\137C")); ("Pretyping", ("\151\160\191\149\149Ff\195\171g\189\156\r\166n\189")); ("Pretype_errors", ("\155\229\201\176\163\234\203C\127\227\141\174j\199\200H")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Pcoq", ("\231\158\223M\188\002_J\154\240\176\002\022p\243\154")); ("Pattern", ("\195C\140Wb=\022\222\208\227^K\003\020\215X")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaques", ("\205<\224j\004\217\188\215Ljj\246\229\186\1559")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("NumTok", ("vd\023^\251\244B\166\145'\156\196-0\027\169")); ("Notationextern", ("\000\022b5`t\134]\192f4\131\187\192\152\160")); ("Notation_term", ("5\002\017\217b\193nc>\239\239\237\244\031\173?")); ("Notation", ("\243\219),\220\160v\230\t$\246\188\252\172\152\147")); ("NeList", ("$\131M\175\196\245\161\207\129\012?\158\175\138\160\247")); ("Nativevalues", ("8:\007\025e\226c,\001\171\146#l\210\171\152")); ("Nativelib", ("V\239\205Y1\147E:,\176\196Hy\1483|")); ("Nativecode", ("\190\185\255\006m\012\210\163\138Rz\247\15283\183")); ("Nametab", ("1\018\163\254\225\2178\025DI\0271Q\198\134\140")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Namegen", ("\187\222\224T\255\020\1808-\212*\164\131\177\157x")); ("Monad", ("\244\171T\157\194p\187\160\149\195{\132\222\020\253\148")); ("Modintern", ("F\222V\246R\143{\n\240\004;;;\011\026\223")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Metasyntax", ("\177D\147\n?i\139\193\238 \018\030)\\\244\\")); ("Ltac_pretype", ("\224\"\167\018i:U\172>\188\128$\r\252\020T")); ("Logic_monad", ("\130\157\160Q\163vQ\137\184\2242\209\128\024\220i")); ("Locus", ("_\002\003W\246\181\225\242Uf\139\226\176\174\192I")); ("Locality", ("\204\134r\227\235'\016\197\215r\210\133\242\226U%")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Libobject", ("\132}t\226hl\213L\210\172\167pc\012~\129")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Lib", ("8\018\021\210\020\136$\149\164=\007\002\218\026RX")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Impargs", ("\021\197\1992>\rm\185\141\"iHY\133\138/")); ("Hook", ("\183\194\223\003\155\169',\187\240a;E\b\1396")); ("Hints", ("\007\130]H\\t(\131\000}\205\137H\148\250\166")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Gramlib__Stream", ("\248\\H\205_76\253\136\146\200\031\165\021=t")); ("Gramlib__Plexing", ("\028\200j\003G\198\183\184f\243\148a\020\011\160\171")); ("Gramlib__LStream", ("B\143\148\148@\016M\192w\155\223\189\218\224\002\004")); ("Gramlib__Grammar", ("zuU\178r\159\234NC\015_hKT\240\151")); ("Gramlib__Gramext", ("B\171oA\172\212\187>\175\233Q\145\"\176TM")); ("Gramlib", ("\154\143\210e\021i\246\176\224\194\220\217\007\145\139A")); ("Goptions", ("i>Rt=\183g\153\190\144\235u\248\247*e")); ("Goal_select", ("\235$\175\023t\178\194.Ivlz\005\211\173\n")); ("Globnames", ("W\004\172T\214\181H\220\232\160LSW\006\130\226")); ("Glob_term", ("\165=a\227\160\153.\021_$\232\209T\236\153O")); ("GlobEnv", ("(\152\019ok\006R\183\193\145\137\133<\171\005\231")); ("Genredexpr", ("rz\204\143\007`VgI\195P\168sO\198\012")); ("Genlambda", ("\170}\024\241\141\222\136S\169\219\2212i\134KI")); ("Geninterp", ("2S\151\191\189\159\004\188;\224d\199|U\004\028")); ("Genintern", ("\152Ac\019=n\235\197\141\224T\162\192\148eg")); ("Genarg", ("\1434\015\001\152\196\005s\156\136\195\185\247\b3\t")); ("Future", ("\158b\028\190\203\016U\128\195O\140\249\240\129\252s")); ("Ftactic", ("K\172\205\128\241\162\160\201\202\1561o\180L\206:")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Extend", ("\179&!W\163V\006\245\018\168\021\001\224s\168\234")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evd", ("\211\205p\193\216\129r\006\239oN\142ar\196\175")); ("Evarutil", ("\005\175\132e\164O\223svi \252\232\138\022\137")); ("Evarsolve", ("\000&\228\016}j\199\t\229\173\127\024\219\199\184\178")); ("Evardefine", ("\178\167R\199\158\242\001Y\215<\151\020\206\153\227\019")); ("Evar_kinds", ("\023L\186\132\218}\254\221\185\198\220\200h\003{\021")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Entries", ("\172\201\198\221Ap\027_{\174\141C\021\";p")); ("EConstr", ("\201aW\156\157;N\004\201V\208\006L\166\211)")); ("Dyn", ("\131z`\205v\2306\007x\027&K.?;\169")); ("Deprecation", ("\226:\146\245\190;\1929\254@\247a\218\244\134\189")); ("Decls", ("\140C{$\142?\215\153\180\186h;\153\139\187\129")); ("Declaremods", ("\019d|\168<\144\239o\017\222\248K^\157\198\179")); ("Declare", ("\ndh\139\180\185\245\190\133\240\127A\190b\197\023")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("DAst", ("\224/\200)\007\184ni\134\b\139\204\241\005w\212")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conversion", ("\158\150&\195M\tv\127|\029\158RRK\211A")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constrintern", ("\221\031i\248\218\212\161/UQA\147\1348GM")); ("Constrexpr", ("p'r\245\184chL\183\249\"\213]\1741\237")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("Coercionops", ("\238\240\220\191\201\bMazv\159\227\236?\147>")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CWarnings", ("\132\220\150\227\215\239t\217\132\220'JX\188\246c")); ("CUnix", ("\140Zl\153\167\011J\015\005|th\247OTu")); ("CString", ("\243~4C\023~\169\148x\206\165\207\195\177Q\184")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CLexer", ("\158\155\242\159%gC\237\011\196\158\255\163\217\239G")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CDebug", ("^4\210p7\239!3\138\138\213?\239`\250\157")); ("CClosure", ("\167\b\022\241V-\r\253\b\002\000j]\223%\142")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("Attributes", ("\2145\146P\224\163B1\135\232\204SD\129^\141")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])

  end

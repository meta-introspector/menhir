type integer_comparison =
    Isigned of Cmm.integer_comparison
  | Iunsigned of Cmm.integer_comparison
type integer_operation =
    Iadd
  | Isub
  | Imul
  | Imulh
  | Idiv
  | Imod
  | Iand
  | Ior
  | Ixor
  | Ilsl
  | Ilsr
  | Iasr
  | Icomp of integer_comparison
  | Icheckbound
type float_comparison = Cmm.float_comparison
type test =
    Itruetest
  | Ifalsetest
  | Iinttest of integer_comparison
  | Iinttest_imm of integer_comparison * int
  | Ifloattest of float_comparison
  | Ioddtest
  | Ieventest
type operation =
    Imove
  | Ispill
  | Ireload
  | Iconst_int of nativeint
  | Iconst_float of int64
  | Iconst_symbol of string
  | Icall_ind
  | Icall_imm of { func : string; }
  | Itailcall_ind
  | Itailcall_imm of { func : string; }
  | Iextcall of { func : string; ty_res : Cmm.machtype;
      ty_args : Cmm.exttype list; alloc : bool; stack_ofs : int;
    }
  | Istackoffset of int
  | Iload of { memory_chunk : Cmm.memory_chunk;
      addressing_mode : Arch.addressing_mode;
      mutability : Asttypes.mutable_flag; is_atomic : bool;
    }
  | Istore of Cmm.memory_chunk * Arch.addressing_mode * bool
  | Ialloc of { bytes : int; dbginfo : Debuginfo.alloc_dbginfo; }
  | Iintop of integer_operation
  | Iintop_imm of integer_operation * int
  | Icompf of float_comparison
  | Inegf
  | Iabsf
  | Iaddf
  | Isubf
  | Imulf
  | Idivf
  | Ifloatofint
  | Iintoffloat
  | Iopaque
  | Ispecific of Arch.specific_operation
  | Ipoll of { return_label : Cmm.label option; }
  | Idls_get
type instruction = {
  desc : instruction_desc;
  next : instruction;
  arg : Reg.t array;
  res : Reg.t array;
  dbg : Debuginfo.t;
  mutable live : Reg.Set.t;
}
and instruction_desc =
    Iend
  | Iop of operation
  | Ireturn
  | Iifthenelse of test * instruction * instruction
  | Iswitch of int array * instruction array
  | Icatch of Cmm.rec_flag * (int * instruction) list * instruction
  | Iexit of int
  | Itrywith of instruction * instruction
  | Iraise of Lambda.raise_kind
type fundecl = {
  fun_name : string;
  fun_args : Reg.t array;
  fun_body : instruction;
  fun_codegen_options : Cmm.codegen_option list;
  fun_dbg : Debuginfo.t;
  fun_poll : Lambda.poll_attribute;
  fun_num_stack_slots : int array;
  fun_contains_calls : bool;
}
val dummy_instr : instruction
val end_instr : unit -> instruction
val instr_cons :
  instruction_desc ->
  Reg.t array -> Reg.t array -> instruction -> instruction
val instr_cons_debug :
  instruction_desc ->
  Reg.t array -> Reg.t array -> Debuginfo.t -> instruction -> instruction
val instr_iter : (instruction -> unit) -> instruction -> unit
val operation_is_pure : operation -> bool
("DEBUG:rule", [Tag1 (("integer_comparison", 606), (0, 0, Tag1 ([(("Isigned", 270), ([(Tag3 (Tag1 ((Tag2 ("Cmm")), "integer_comparison"), 0, (0)), 100000000, 0, -114)]), 0, (("asmcomp/mach.mli", 19, 1178, 1182), ("asmcomp/mach.mli", 19, 1178, 1215), 0), 0, Tag1 ("Mach", 6)); (("Iunsigned", 307), ([(Tag3 (Tag1 ((Tag2 ("Cmm")), "integer_comparison"), 0, (0)), 100000000, 0, -115)]), 0, (("asmcomp/mach.mli", 20, 1216, 1218), ("asmcomp/mach.mli", 20, 1216, 1255), 0), 0, Tag1 ("Mach", 7))], 0), 1, 0, 0, 0, 0, 0, (("asmcomp/mach.mli", 18, 1152, 1152), ("asmcomp/mach.mli", 20, 1216, 1255), 0), 0, 0, 0, Tag1 ("Mach", 0)), 1, 0); Tag1 (("integer_operation", 607), (0, 0, Tag1 ([(("Iadd", 387), (0), 0, (("asmcomp/mach.mli", 23, 1282, 1286), ("asmcomp/mach.mli", 23, 1282, 1290), 0), 0, Tag1 ("Mach", 12)); (("Isub", 388), (0), 0, (("asmcomp/mach.mli", 23, 1282, 1291), ("asmcomp/mach.mli", 23, 1282, 1297), 0), 0, Tag1 ("Mach", 13)); (("Imul", 389), (0), 0, (("asmcomp/mach.mli", 23, 1282, 1298), ("asmcomp/mach.mli", 23, 1282, 1304), 0), 0, Tag1 ("Mach", 14)); (("Imulh", 390), (0), 0, (("asmcomp/mach.mli", 23, 1282, 1305), ("asmcomp/mach.mli", 23, 1282, 1312), 0), 0, Tag1 ("Mach", 15)); (("Idiv", 391), (0), 0, (("asmcomp/mach.mli", 23, 1282, 1313), ("asmcomp/mach.mli", 23, 1282, 1319), 0), 0, Tag1 ("Mach", 16)); (("Imod", 392), (0), 0, (("asmcomp/mach.mli", 23, 1282, 1320), ("asmcomp/mach.mli", 23, 1282, 1326), 0), 0, Tag1 ("Mach", 17)); (("Iand", 393), (0), 0, (("asmcomp/mach.mli", 24, 1327, 1329), ("asmcomp/mach.mli", 24, 1327, 1335), 0), 0, Tag1 ("Mach", 18)); (("Ior", 394), (0), 0, (("asmcomp/mach.mli", 24, 1327, 1336), ("asmcomp/mach.mli", 24, 1327, 1341), 0), 0, Tag1 ("Mach", 19)); (("Ixor", 395), (0), 0, (("asmcomp/mach.mli", 24, 1327, 1342), ("asmcomp/mach.mli", 24, 1327, 1348), 0), 0, Tag1 ("Mach", 20)); (("Ilsl", 396), (0), 0, (("asmcomp/mach.mli", 24, 1327, 1349), ("asmcomp/mach.mli", 24, 1327, 1355), 0), 0, Tag1 ("Mach", 21)); (("Ilsr", 397), (0), 0, (("asmcomp/mach.mli", 24, 1327, 1356), ("asmcomp/mach.mli", 24, 1327, 1362), 0), 0, Tag1 ("Mach", 22)); (("Iasr", 398), (0), 0, (("asmcomp/mach.mli", 24, 1327, 1363), ("asmcomp/mach.mli", 24, 1327, 1369), 0), 0, Tag1 ("Mach", 23)); (("Icomp", 399), ([(Tag3 ((("integer_comparison", 606)), 0, (0)), 100000000, 0, -113)]), 0, (("asmcomp/mach.mli", 25, 1370, 1372), ("asmcomp/mach.mli", 25, 1370, 1401), 0), 0, Tag1 ("Mach", 24)); (("Icheckbound", 400), (0), 0, (("asmcomp/mach.mli", 26, 1402, 1404), ("asmcomp/mach.mli", 26, 1402, 1417), 0), 0, Tag1 ("Mach", 25))], 0), 1, 0, 0, 0, 0, 0, (("asmcomp/mach.mli", 22, 1257, 1257), ("asmcomp/mach.mli", 26, 1402, 1417), 0), 0, 0, 0, Tag1 ("Mach", 11)), 1, 0); Tag1 (("float_comparison", 608), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Cmm")), "float_comparison"), 0, (0)), 100000000, 0, -112)), 0, 0, 0, 0, (("asmcomp/mach.mli", 28, 1419, 1419), ("asmcomp/mach.mli", 28, 1419, 1463), 0), 0, 1, 0, Tag1 ("Mach", 26)), 1, 0); Tag1 (("test", 609), (0, 0, Tag1 ([(("Itruetest", 403), (0), 0, (("asmcomp/mach.mli", 31, 1477, 1481), ("asmcomp/mach.mli", 31, 1477, 1490), 0), 0, Tag1 ("Mach", 28)); (("Ifalsetest", 404), (0), 0, (("asmcomp/mach.mli", 32, 1491, 1493), ("asmcomp/mach.mli", 32, 1491, 1505), 0), 0, Tag1 ("Mach", 29)); (("Iinttest", 405), ([(Tag3 ((("integer_comparison", 606)), 0, (0)), 100000000, 0, -108)]), 0, (("asmcomp/mach.mli", 33, 1506, 1508), ("asmcomp/mach.mli", 33, 1506, 1540), 0), 0, Tag1 ("Mach", 30)); (("Iinttest_imm", 406), ([(Tag3 ((("integer_comparison", 606)), 0, (0)), 100000000, 0, -109); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -110)]), 0, (("asmcomp/mach.mli", 34, 1541, 1543), ("asmcomp/mach.mli", 34, 1541, 1585), 0), 0, Tag1 ("Mach", 31)); (("Ifloattest", 407), ([(Tag3 ((("float_comparison", 608)), 0, (0)), 100000000, 0, -111)]), 0, (("asmcomp/mach.mli", 35, 1586, 1588), ("asmcomp/mach.mli", 35, 1586, 1620), 0), 0, Tag1 ("Mach", 32)); (("Ioddtest", 408), (0), 0, (("asmcomp/mach.mli", 36, 1621, 1623), ("asmcomp/mach.mli", 36, 1621, 1633), 0), 0, Tag1 ("Mach", 33)); (("Ieventest", 409), (0), 0, (("asmcomp/mach.mli", 37, 1634, 1636), ("asmcomp/mach.mli", 37, 1634, 1647), 0), 0, Tag1 ("Mach", 34))], 0), 1, 0, 0, 0, 0, 0, (("asmcomp/mach.mli", 30, 1465, 1465), ("asmcomp/mach.mli", 37, 1634, 1647), 0), 0, 0, 0, Tag1 ("Mach", 27)), 1, 0); Tag1 (("operation", 610), (0, 0, Tag1 ([(("Imove", 411), (0), 0, (("asmcomp/mach.mli", 40, 1666, 1670), ("asmcomp/mach.mli", 40, 1666, 1675), 0), 0, Tag1 ("Mach", 36)); (("Ispill", 412), (0), 0, (("asmcomp/mach.mli", 41, 1676, 1678), ("asmcomp/mach.mli", 41, 1676, 1686), 0), 0, Tag1 ("Mach", 37)); (("Ireload", 413), (0), 0, (("asmcomp/mach.mli", 42, 1687, 1689), ("asmcomp/mach.mli", 42, 1687, 1698), 0), 0, Tag1 ("Mach", 38)); (("Iconst_int", 414), ([(Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -80)]), 0, (("asmcomp/mach.mli", 43, 1699, 1701), ("asmcomp/mach.mli", 43, 1699, 1726), 0), 0, Tag1 ("Mach", 39)); (("Iconst_float", 415), ([(Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -81)]), 0, (("asmcomp/mach.mli", 44, 1727, 1729), ("asmcomp/mach.mli", 44, 1727, 1752), 0), 0, Tag1 ("Mach", 40)); (("Iconst_symbol", 416), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -82)]), 0, (("asmcomp/mach.mli", 45, 1753, 1755), ("asmcomp/mach.mli", 45, 1753, 1780), 0), 0, Tag1 ("Mach", 41)); (("Icall_ind", 417), (0), 0, (("asmcomp/mach.mli", 46, 1781, 1783), ("asmcomp/mach.mli", 46, 1781, 1794), 0), 0, Tag1 ("Mach", 42)); (("Icall_imm", 418), Tag1 ([(("func", 419), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -83), (("asmcomp/mach.mli", 47, 1795, 1814), ("asmcomp/mach.mli", 47, 1795, 1828), 0), 0, Tag1 ("Mach", 43))]), 0, (("asmcomp/mach.mli", 47, 1795, 1797), ("asmcomp/mach.mli", 47, 1795, 1830), 0), 0, Tag1 ("Mach", 44)); (("Itailcall_ind", 420), (0), 0, (("asmcomp/mach.mli", 48, 1831, 1833), ("asmcomp/mach.mli", 48, 1831, 1848), 0), 0, Tag1 ("Mach", 45)); (("Itailcall_imm", 421), Tag1 ([(("func", 422), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -84), (("asmcomp/mach.mli", 49, 1849, 1872), ("asmcomp/mach.mli", 49, 1849, 1886), 0), 0, Tag1 ("Mach", 46))]), 0, (("asmcomp/mach.mli", 49, 1849, 1851), ("asmcomp/mach.mli", 49, 1849, 1888), 0), 0, Tag1 ("Mach", 47)); (("Iextcall", 423), Tag1 ([(("func", 424), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -85), (("asmcomp/mach.mli", 50, 1889, 1907), ("asmcomp/mach.mli", 50, 1889, 1921), 0), 0, Tag1 ("Mach", 48)); (("ty_res", 425), 0, (Tag3 (Tag1 ((Tag2 ("Cmm")), "machtype"), 0, (0)), 100000000, 0, -86), (("asmcomp/mach.mli", 51, 1922, 1940), ("asmcomp/mach.mli", 51, 1922, 1962), 0), 0, Tag1 ("Mach", 49)); (("ty_args", 426), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Cmm")), "exttype"), 0, (0)), 100000000, 0, -88)], (0)), 100000000, 0, -87), (("asmcomp/mach.mli", 51, 1922, 1963), ("asmcomp/mach.mli", 51, 1922, 1990), 0), 0, Tag1 ("Mach", 50)); (("alloc", 427), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -89), (("asmcomp/mach.mli", 52, 1991, 2009), ("asmcomp/mach.mli", 52, 1991, 2022), 0), 0, Tag1 ("Mach", 51)); (("stack_ofs", 428), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -90), (("asmcomp/mach.mli", 53, 2023, 2041), ("asmcomp/mach.mli", 53, 2023, 2057), 0), 0, Tag1 ("Mach", 52))]), 0, (("asmcomp/mach.mli", 50, 1889, 1891), ("asmcomp/mach.mli", 53, 2023, 2059), 0), 0, Tag1 ("Mach", 53)); (("Istackoffset", 429), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -91)]), 0, (("asmcomp/mach.mli", 54, 2060, 2062), ("asmcomp/mach.mli", 54, 2060, 2083), 0), 0, Tag1 ("Mach", 54)); (("Iload", 430), Tag1 ([(("memory_chunk", 431), 0, (Tag3 (Tag1 ((Tag2 ("Cmm")), "memory_chunk"), 0, (0)), 100000000, 0, -92), (("asmcomp/mach.mli", 55, 2084, 2099), ("asmcomp/mach.mli", 55, 2084, 2131), 0), 0, Tag1 ("Mach", 55)); (("addressing_mode", 451), 0, (Tag3 (Tag1 ((Tag2 ("Arch")), "addressing_mode"), 0, (0)), 100000000, 0, -93), (("asmcomp/mach.mli", 56, 2132, 2147), ("asmcomp/mach.mli", 56, 2132, 2186), 0), 0, Tag1 ("Mach", 56)); (("mutability", 465), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "mutable_flag"), 0, (0)), 100000000, 0, -94), (("asmcomp/mach.mli", 57, 2187, 2202), ("asmcomp/mach.mli", 57, 2187, 2237), 0), 0, Tag1 ("Mach", 57)); (("is_atomic", 466), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -95), (("asmcomp/mach.mli", 58, 2238, 2253), ("asmcomp/mach.mli", 58, 2238, 2269), 0), 0, Tag1 ("Mach", 58))]), 0, (("asmcomp/mach.mli", 55, 2084, 2086), ("asmcomp/mach.mli", 58, 2238, 2271), 0), 0, Tag1 ("Mach", 59)); (("Istore", 467), ([(Tag3 (Tag1 ((Tag2 ("Cmm")), "memory_chunk"), 0, (0)), 100000000, 0, -96); (Tag3 (Tag1 ((Tag2 ("Arch")), "addressing_mode"), 0, (0)), 100000000, 0, -97); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -98)]), 0, (("asmcomp/mach.mli", 59, 2272, 2274), ("asmcomp/mach.mli", 59, 2272, 2332), 0), 0, Tag1 ("Mach", 60)); (("Ialloc", 468), Tag1 ([(("bytes", 469), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -99), (("asmcomp/mach.mli", 61, 2414, 2430), ("asmcomp/mach.mli", 61, 2414, 2442), 0), 0, Tag1 ("Mach", 61)); (("dbginfo", 484), 0, (Tag3 (Tag1 ((Tag2 ("Debuginfo")), "alloc_dbginfo"), 0, (0)), 100000000, 0, -100), (("asmcomp/mach.mli", 61, 2414, 2443), ("asmcomp/mach.mli", 61, 2414, 2477), 0), 0, Tag1 ("Mach", 62))]), 0, (("asmcomp/mach.mli", 61, 2414, 2416), ("asmcomp/mach.mli", 61, 2414, 2479), 0), 0, Tag1 ("Mach", 63)); (("Iintop", 485), ([(Tag3 ((("integer_operation", 607)), 0, (0)), 100000000, 0, -101)]), 0, (("asmcomp/mach.mli", 62, 2480, 2482), ("asmcomp/mach.mli", 62, 2480, 2511), 0), 0, Tag1 ("Mach", 64)); (("Iintop_imm", 486), ([(Tag3 ((("integer_operation", 607)), 0, (0)), 100000000, 0, -102); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -103)]), 0, (("asmcomp/mach.mli", 63, 2512, 2514), ("asmcomp/mach.mli", 63, 2512, 2553), 0), 0, Tag1 ("Mach", 65)); (("Icompf", 487), ([(Tag3 ((("float_comparison", 608)), 0, (0)), 100000000, 0, -104)]), 0, (("asmcomp/mach.mli", 64, 2554, 2556), ("asmcomp/mach.mli", 64, 2554, 2584), 0), 0, Tag1 ("Mach", 66)); (("Inegf", 488), (0), 0, (("asmcomp/mach.mli", 65, 2585, 2587), ("asmcomp/mach.mli", 65, 2585, 2594), 0), 0, Tag1 ("Mach", 67)); (("Iabsf", 489), (0), 0, (("asmcomp/mach.mli", 65, 2585, 2595), ("asmcomp/mach.mli", 65, 2585, 2602), 0), 0, Tag1 ("Mach", 68)); (("Iaddf", 490), (0), 0, (("asmcomp/mach.mli", 65, 2585, 2603), ("asmcomp/mach.mli", 65, 2585, 2610), 0), 0, Tag1 ("Mach", 69)); (("Isubf", 491), (0), 0, (("asmcomp/mach.mli", 65, 2585, 2611), ("asmcomp/mach.mli", 65, 2585, 2618), 0), 0, Tag1 ("Mach", 70)); (("Imulf", 492), (0), 0, (("asmcomp/mach.mli", 65, 2585, 2619), ("asmcomp/mach.mli", 65, 2585, 2626), 0), 0, Tag1 ("Mach", 71)); (("Idivf", 493), (0), 0, (("asmcomp/mach.mli", 65, 2585, 2627), ("asmcomp/mach.mli", 65, 2585, 2634), 0), 0, Tag1 ("Mach", 72)); (("Ifloatofint", 494), (0), 0, (("asmcomp/mach.mli", 66, 2635, 2637), ("asmcomp/mach.mli", 66, 2635, 2650), 0), 0, Tag1 ("Mach", 73)); (("Iintoffloat", 495), (0), 0, (("asmcomp/mach.mli", 66, 2635, 2651), ("asmcomp/mach.mli", 66, 2635, 2664), 0), 0, Tag1 ("Mach", 74)); (("Iopaque", 496), (0), 0, (("asmcomp/mach.mli", 67, 2665, 2667), ("asmcomp/mach.mli", 67, 2665, 2676), 0), 0, Tag1 ("Mach", 75)); (("Ispecific", 497), ([(Tag3 (Tag1 ((Tag2 ("Arch")), "specific_operation"), 0, (0)), 100000000, 0, -105)]), 0, (("asmcomp/mach.mli", 68, 2677, 2679), ("asmcomp/mach.mli", 68, 2677, 2717), 0), 0, Tag1 ("Mach", 76)); (("Ipoll", 498), Tag1 ([(("return_label", 499), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Cmm")), "label"), 0, (0)), 100000000, 0, -107)], (0)), 100000000, 0, -106), (("asmcomp/mach.mli", 69, 2718, 2733), ("asmcomp/mach.mli", 69, 2718, 2763), 0), 0, Tag1 ("Mach", 77))]), 0, (("asmcomp/mach.mli", 69, 2718, 2720), ("asmcomp/mach.mli", 69, 2718, 2765), 0), 0, Tag1 ("Mach", 78)); (("Idls_get", 500), (0), 0, (("asmcomp/mach.mli", 70, 2766, 2768), ("asmcomp/mach.mli", 70, 2766, 2778), 0), 0, Tag1 ("Mach", 79))], 0), 1, 0, 0, 0, 0, 0, (("asmcomp/mach.mli", 39, 1649, 1649), ("asmcomp/mach.mli", 70, 2766, 2778), 0), 0, 0, 0, Tag1 ("Mach", 35)), 1, 0); Tag1 (("instruction", 611), (0, 0, [[(("desc", 503), 0, (Tag3 ((("instruction_desc", 612)), 0, (0)), 100000000, 0, -72), (("asmcomp/mach.mli", 73, 2799, 2803), ("asmcomp/mach.mli", 73, 2799, 2826), 0), 0, Tag1 ("Mach", 112)); (("next", 504), 0, (Tag3 ((("instruction", 611)), 0, (0)), 100000000, 0, -73), (("asmcomp/mach.mli", 74, 2827, 2831), ("asmcomp/mach.mli", 74, 2827, 2849), 0), 0, Tag1 ("Mach", 113)); (("arg", 532), 0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Reg")), "t"), 0, (0)), 100000000, 0, -75)], (0)), 100000000, 0, -74), (("asmcomp/mach.mli", 75, 2850, 2854), ("asmcomp/mach.mli", 75, 2850, 2871), 0), 0, Tag1 ("Mach", 114)); (("res", 533), 0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Reg")), "t"), 0, (0)), 100000000, 0, -77)], (0)), 100000000, 0, -76), (("asmcomp/mach.mli", 76, 2872, 2876), ("asmcomp/mach.mli", 76, 2872, 2893), 0), 0, Tag1 ("Mach", 115)); (("dbg", 534), 0, (Tag3 (Tag1 ((Tag2 ("Debuginfo")), "t"), 0, (0)), 100000000, 0, -78), (("asmcomp/mach.mli", 77, 2894, 2898), ("asmcomp/mach.mli", 77, 2894, 2915), 0), 0, Tag1 ("Mach", 116)); (("live", 580), 1, (Tag3 (Tag1 (Tag1 ((Tag2 ("Reg")), "Set"), "t"), 0, (0)), 100000000, 0, -79), (("asmcomp/mach.mli", 78, 2916, 2920), ("asmcomp/mach.mli", 78, 2916, 2943), 0), 0, Tag1 ("Mach", 117))]], 1, 0, 0, 0, 0, 0, (("asmcomp/mach.mli", 72, 2780, 2780), ("asmcomp/mach.mli", 79, 2944, 2947), 0), 0, 0, 0, Tag1 ("Mach", 110)), 1, 0); Tag1 (("instruction_desc", 612), (0, 0, Tag1 ([(("Iend", 581), (0), 0, (("asmcomp/mach.mli", 82, 2972, 2976), ("asmcomp/mach.mli", 82, 2972, 2980), 0), 0, Tag1 ("Mach", 118)); (("Iop", 582), ([(Tag3 ((("operation", 610)), 0, (0)), 100000000, 0, -54)]), 0, (("asmcomp/mach.mli", 83, 2981, 2983), ("asmcomp/mach.mli", 83, 2981, 3001), 0), 0, Tag1 ("Mach", 119)); (("Ireturn", 583), (0), 0, (("asmcomp/mach.mli", 84, 3002, 3004), ("asmcomp/mach.mli", 84, 3002, 3013), 0), 0, Tag1 ("Mach", 120)); (("Iifthenelse", 584), ([(Tag3 ((("test", 609)), 0, (0)), 100000000, 0, -55); (Tag3 ((("instruction", 611)), 0, (0)), 100000000, 0, -56); (Tag3 ((("instruction", 611)), 0, (0)), 100000000, 0, -57)]), 0, (("asmcomp/mach.mli", 85, 3014, 3016), ("asmcomp/mach.mli", 85, 3014, 3065), 0), 0, Tag1 ("Mach", 121)); (("Iswitch", 585), ([(Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -59)], (0)), 100000000, 0, -58); (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("instruction", 611)), 0, (0)), 100000000, 0, -61)], (0)), 100000000, 0, -60)]), 0, (("asmcomp/mach.mli", 86, 3066, 3068), ("asmcomp/mach.mli", 86, 3066, 3110), 0), 0, Tag1 ("Mach", 122)); (("Icatch", 586), ([(Tag3 (Tag1 ((Tag2 ("Cmm")), "rec_flag"), 0, (0)), 100000000, 0, -62); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -65); (Tag3 ((("instruction", 611)), 0, (0)), 100000000, 0, -66)]), 100000000, 0, -64)], (0)), 100000000, 0, -63); (Tag3 ((("instruction", 611)), 0, (0)), 100000000, 0, -67)]), 0, (("asmcomp/mach.mli", 87, 3111, 3113), ("asmcomp/mach.mli", 87, 3111, 3178), 0), 0, Tag1 ("Mach", 123)); (("Iexit", 587), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -68)]), 0, (("asmcomp/mach.mli", 88, 3179, 3181), ("asmcomp/mach.mli", 88, 3179, 3195), 0), 0, Tag1 ("Mach", 124)); (("Itrywith", 588), ([(Tag3 ((("instruction", 611)), 0, (0)), 100000000, 0, -69); (Tag3 ((("instruction", 611)), 0, (0)), 100000000, 0, -70)]), 0, (("asmcomp/mach.mli", 89, 3196, 3198), ("asmcomp/mach.mli", 89, 3196, 3237), 0), 0, Tag1 ("Mach", 125)); (("Iraise", 589), ([(Tag3 (Tag1 ((Tag2 ("Lambda")), "raise_kind"), 0, (0)), 100000000, 0, -71)]), 0, (("asmcomp/mach.mli", 90, 3238, 3240), ("asmcomp/mach.mli", 90, 3238, 3269), 0), 0, Tag1 ("Mach", 126))], 0), 1, 0, 0, 0, 0, 0, (("asmcomp/mach.mli", 81, 2949, 2949), ("asmcomp/mach.mli", 90, 3238, 3269), 0), 0, 0, 0, Tag1 ("Mach", 111)), 2, 0); Tag1 (("fundecl", 613), (0, 0, [[(("fun_name", 591), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -43), (("asmcomp/mach.mli", 93, 3286, 3290), ("asmcomp/mach.mli", 93, 3286, 3307), 0), 0, Tag1 ("Mach", 128)); (("fun_args", 592), 0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Reg")), "t"), 0, (0)), 100000000, 0, -45)], (0)), 100000000, 0, -44), (("asmcomp/mach.mli", 94, 3308, 3312), ("asmcomp/mach.mli", 94, 3308, 3334), 0), 0, Tag1 ("Mach", 129)); (("fun_body", 593), 0, (Tag3 ((("instruction", 611)), 0, (0)), 100000000, 0, -46), (("asmcomp/mach.mli", 95, 3335, 3339), ("asmcomp/mach.mli", 95, 3335, 3361), 0), 0, Tag1 ("Mach", 130)); (("fun_codegen_options", 594), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Cmm")), "codegen_option"), 0, (0)), 100000000, 0, -48)], (0)), 100000000, 0, -47), (("asmcomp/mach.mli", 96, 3362, 3366), ("asmcomp/mach.mli", 96, 3362, 3412), 0), 0, Tag1 ("Mach", 131)); (("fun_dbg", 595), 0, (Tag3 (Tag1 ((Tag2 ("Debuginfo")), "t"), 0, (0)), 100000000, 0, -49), (("asmcomp/mach.mli", 97, 3413, 3417), ("asmcomp/mach.mli", 97, 3413, 3439), 0), 0, Tag1 ("Mach", 132)); (("fun_poll", 596), 0, (Tag3 (Tag1 ((Tag2 ("Lambda")), "poll_attribute"), 0, (0)), 100000000, 0, -50), (("asmcomp/mach.mli", 98, 3440, 3444), ("asmcomp/mach.mli", 98, 3440, 3476), 0), 0, Tag1 ("Mach", 133)); (("fun_num_stack_slots", 597), 0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -52)], (0)), 100000000, 0, -51), (("asmcomp/mach.mli", 99, 3477, 3481), ("asmcomp/mach.mli", 99, 3477, 3512), 0), 0, Tag1 ("Mach", 134)); (("fun_contains_calls", 598), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -53), (("asmcomp/mach.mli", 100, 3513, 3517), ("asmcomp/mach.mli", 100, 3513, 3542), 0), 0, Tag1 ("Mach", 135))]], 1, 0, 0, 0, 0, 0, (("asmcomp/mach.mli", 92, 3271, 3271), ("asmcomp/mach.mli", 101, 3543, 3546), 0), 0, 0, 0, Tag1 ("Mach", 127)), 1, 0); (("dummy_instr", 614), ((Tag3 ((("instruction", 611)), 0, (0)), 100000000, 0, -42), 0, (("asmcomp/mach.mli", 103, 3548, 3548), ("asmcomp/mach.mli", 103, 3548, 3576), 0), 0, Tag1 ("Mach", 136)), 0); (("end_instr", 615), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -41), (Tag3 ((("instruction", 611)), 0, (0)), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("asmcomp/mach.mli", 104, 3577, 3577), ("asmcomp/mach.mli", 104, 3577, 3611), 0), 0, Tag1 ("Mach", 137)), 0); (("instr_cons", 616), ((Tag1 (0, (Tag3 ((("instruction_desc", 612)), 0, (0)), 100000000, 0, -38), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Reg")), "t"), 0, (0)), 100000000, 0, -37)], (0)), 100000000, 0, -36), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Reg")), "t"), 0, (0)), 100000000, 0, -35)], (0)), 100000000, 0, -34), (Tag1 (0, (Tag3 ((("instruction", 611)), 0, (0)), 100000000, 0, -33), (Tag3 ((("instruction", 611)), 0, (0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("asmcomp/mach.mli", 105, 3612, 3612), ("asmcomp/mach.mli", 107, 3699, 3718), 0), 0, Tag1 ("Mach", 138)), 0); (("instr_cons_debug", 617), ((Tag1 (0, (Tag3 ((("instruction_desc", 612)), 0, (0)), 100000000, 0, -27), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Reg")), "t"), 0, (0)), 100000000, 0, -26)], (0)), 100000000, 0, -25), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Reg")), "t"), 0, (0)), 100000000, 0, -24)], (0)), 100000000, 0, -23), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Debuginfo")), "t"), 0, (0)), 100000000, 0, -22), (Tag1 (0, (Tag3 ((("instruction", 611)), 0, (0)), 100000000, 0, -21), (Tag3 ((("instruction", 611)), 0, (0)), 100000000, 0, -20), 0), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0), 100000000, 0, -15), 0, (("asmcomp/mach.mli", 108, 3719, 3719), ("asmcomp/mach.mli", 110, 3812, 3846), 0), 0, Tag1 ("Mach", 139)), 0); (("instr_iter", 618), ((Tag1 (0, (Tag1 (0, (Tag3 ((("instruction", 611)), 0, (0)), 100000000, 0, -14), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -13), 0), 100000000, 0, -12), (Tag1 (0, (Tag3 ((("instruction", 611)), 0, (0)), 100000000, 0, -11), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10), 0), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("asmcomp/mach.mli", 111, 3847, 3847), ("asmcomp/mach.mli", 111, 3847, 3907), 0), 0, Tag1 ("Mach", 140)), 0); (("operation_is_pure", 619), ((Tag1 (0, (Tag3 ((("operation", 610)), 0, (0)), 100000000, 0, -7), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("asmcomp/mach.mli", 113, 3909, 3909), ("asmcomp/mach.mli", 113, 3909, 3950), 0), 0, Tag1 ("Mach", 141)), 0); (("operation_can_raise", 620), ((Tag1 (0, (Tag3 ((("operation", 610)), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("asmcomp/mach.mli", 119, 4219, 4219), ("asmcomp/mach.mli", 119, 4219, 4262), 0), 0, Tag1 ("Mach", 142)), 0)], "Mach", [("Mach", ("&\170\178\177#\189\191s\128\250H\146\198\206\134\167")); ("X86_ast", ("_J}e\221\174\027(J\165T\180=\151\227n")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Targetint", ("\246d\193-\187\015a_\181+\n \019\246;\150")); ("Subst", ("\021\031\148\223\127\186\189\135\027}\145r\216\143\177\156")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Arg", ("\024%=\206\198p\149Y\007\004\216,&\254#\207")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Reg", ("*\173\202\2069\136\224\129\178\171\139w\215DX\154")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Load_path", ("\012@\228l\230\164S\172h\1726X\020\252o}")); ("Lambda", ("\180\1419\236'\146K$\128\006\135q\135V\029\180")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("Env", ("\021\n\181\142x\b\169j\227\"\017\248*\178\245\223")); ("Debuginfo", ("\131\251\175\217P\194M\163\022\151\002\005\006\185:\185")); ("Cmm", ("\245\177\229\137\140&\252'xF\207\167\160\025\167\223")); ("Cmi_format", ("6\177\bU\139\"\023\152=\249\135\174\b\011Cg")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Backend_var", ("\182\144C\215j:\241\151\214\131?\204\253\002\029\151")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216")); ("Arch", ("9\221>\185\204\181\224\2279\164\221\212\213\028qT"))], [(0)])
val operation_can_raise : operation -> bool

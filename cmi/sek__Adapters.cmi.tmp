val try_finally : (unit -> 'a) -> (unit -> unit) -> 'a
type ('a, 'c) iter = ('a -> unit) -> 'c -> unit
type ('a, 'c) iteri = (int -> 'a -> unit) -> 'c -> unit
type ('a, 'b, 'c) fold_left = ('b -> 'a -> 'b) -> 'b -> 'c -> 'b
type ('a, 'b, 'c) fold_right = ('a -> 'b -> 'b) -> 'c -> 'b -> 'b
val fold_left : ('a, 'c) iter -> ('a, 'b, 'c) fold_left
val fold_right : ('a, 'c) iter -> ('a, 'b, 'c) fold_right
val iteri_left : ('a, 'c) iter -> ('a, 'c) iteri
val iteri_right : ('c -> int) -> ('a, 'c) iter -> ('a, 'c) iteri
type ('a1, 'a2, 'c1, 'c2) iter2 = ('a1 -> 'a2 -> unit) -> 'c1 -> 'c2 -> unit
type ('a1, 'a2, 'b, 'c1, 'c2) fold_left2 =
    ('b -> 'a1 -> 'a2 -> 'b) -> 'b -> 'c1 -> 'c2 -> 'b
type ('a1, 'a2, 'b, 'c1, 'c2) fold_right2 =
    ('a1 -> 'a2 -> 'b -> 'b) -> 'c1 -> 'c2 -> 'b -> 'b
val fold_left2 :
  ('a1, 'a2, 'c1, 'c2) iter2 -> ('a1, 'a2, 'b, 'c1, 'c2) fold_left2
val fold_right2 :
  ('a1, 'a2, 'c1, 'c2) iter2 -> ('a1, 'a2, 'b, 'c1, 'c2) fold_right2
type ('a, 'c) to_list = 'c -> 'a list
val to_list : ('a, 'c) iter -> ('a, 'c) to_list
type 'a iterator = unit -> 'a
exception Exhausted
val iterator_of_seq : 'a Seq.t -> 'a iterator
("DEBUG:rule", [(("try_finally", 430), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -137), ((("a")), 100000000, 0, -132), 0), 100000000, 0, -136), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -135), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -134), 0), 100000000, 0, -133), ((("a")), 100000000, 0, -132), 0), 100000000, 0, -131), 0), 100000000, 0, -130), 0, (("src/Adapters.mli", 17, 1168, 1168), ("src/Adapters.mli", 17, 1168, 1221), 0), 0, Tag1 ("Sek__Adapters", 0)), 0); Tag1 (("iter", 431), ([((("a")), 100000000, 0, -129); ((("c")), 100000000, 0, -126)], 2, 0, 1, ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -129), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -128), 0), 100000000, 0, -127), (Tag1 (0, ((("c")), 100000000, 0, -126), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -125), 0), 100000000, 0, -124), 0), 100000000, 0, -123)), [29; 46], [0; 0], 0, 0, (("src/Adapters.mli", 21, 1373, 1373), ("src/Adapters.mli", 22, 1394, 1422), 0), 0, 0, 0, Tag1 ("Sek__Adapters", 1)), 1, 0); Tag1 (("iteri", 432), ([((("a")), 100000000, 0, -121); ((("c")), 100000000, 0, -117)], 2, 0, 1, ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -122), (Tag1 (0, ((("a")), 100000000, 0, -121), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -120), 0), 100000000, 0, -119), 0), 100000000, 0, -118), (Tag1 (0, ((("c")), 100000000, 0, -117), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -116), 0), 100000000, 0, -115), 0), 100000000, 0, -114)), [29; 46], [0; 0], 0, 0, (("src/Adapters.mli", 26, 1575, 1575), ("src/Adapters.mli", 27, 1597, 1632), 0), 0, 0, 0, Tag1 ("Sek__Adapters", 2)), 1, 0); Tag1 (("fold_left", 433), ([((("a")), 100000000, 0, -113); ((("b")), 100000000, 0, -109); ((("c")), 100000000, 0, -110)], 3, 0, 1, ((Tag1 (0, (Tag1 (0, ((("b")), 100000000, 0, -109), (Tag1 (0, ((("a")), 100000000, 0, -113), ((("b")), 100000000, 0, -109), 0), 100000000, 0, -112), 0), 100000000, 0, -111), (Tag1 (0, ((("b")), 100000000, 0, -109), (Tag1 (0, ((("c")), 100000000, 0, -110), ((("b")), 100000000, 0, -109), 0), 100000000, 0, -108), 0), 100000000, 0, -107), 0), 100000000, 0, -106)), [29; 63; 46], [0; 0; 0], 0, 0, (("src/Adapters.mli", 35, 2054, 2054), ("src/Adapters.mli", 36, 2084, 2120), 0), 0, 0, 0, Tag1 ("Sek__Adapters", 3)), 1, 0); Tag1 (("fold_right", 434), ([((("a")), 100000000, 0, -105); ((("b")), 100000000, 0, -101); ((("c")), 100000000, 0, -102)], 3, 0, 1, ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -105), (Tag1 (0, ((("b")), 100000000, 0, -101), ((("b")), 100000000, 0, -101), 0), 100000000, 0, -104), 0), 100000000, 0, -103), (Tag1 (0, ((("c")), 100000000, 0, -102), (Tag1 (0, ((("b")), 100000000, 0, -101), ((("b")), 100000000, 0, -101), 0), 100000000, 0, -100), 0), 100000000, 0, -99), 0), 100000000, 0, -98)), [29; 63; 46], [0; 0; 0], 0, 0, (("src/Adapters.mli", 44, 2545, 2545), ("src/Adapters.mli", 45, 2576, 2612), 0), 0, 0, 0, Tag1 ("Sek__Adapters", 4)), 1, 0); (("fold_left", 435), ((Tag1 (0, (Tag3 ((("iter", 431)), [((("a")), 100000000, 0, -94); ((("c")), 100000000, 0, -96)], (0)), 100000000, 0, -97), (Tag3 ((("fold_left", 433)), [((("a")), 100000000, 0, -94); ((("b")), 100000000, 0, -95); ((("c")), 100000000, 0, -96)], (0)), 100000000, 0, -93), 0), 100000000, 0, -92), 0, (("src/Adapters.mli", 49, 2743, 2743), ("src/Adapters.mli", 51, 2777, 2801), 0), 0, Tag1 ("Sek__Adapters", 5)), 0); (("fold_right", 436), ((Tag1 (0, (Tag3 ((("iter", 431)), [((("a")), 100000000, 0, -88); ((("c")), 100000000, 0, -90)], (0)), 100000000, 0, -91), (Tag3 ((("fold_right", 434)), [((("a")), 100000000, 0, -88); ((("b")), 100000000, 0, -89); ((("c")), 100000000, 0, -90)], (0)), 100000000, 0, -87), 0), 100000000, 0, -86), 0, (("src/Adapters.mli", 55, 2934, 2934), ("src/Adapters.mli", 57, 2969, 2994), 0), 0, Tag1 ("Sek__Adapters", 6)), 0); (("iteri_left", 437), ((Tag1 (0, (Tag3 ((("iter", 431)), [((("a")), 100000000, 0, -83); ((("c")), 100000000, 0, -84)], (0)), 100000000, 0, -85), (Tag3 ((("iteri", 432)), [((("a")), 100000000, 0, -83); ((("c")), 100000000, 0, -84)], (0)), 100000000, 0, -82), 0), 100000000, 0, -81), 0, (("src/Adapters.mli", 62, 3156, 3156), ("src/Adapters.mli", 64, 3191, 3207), 0), 0, Tag1 ("Sek__Adapters", 7)), 0); (("iteri_right", 438), ((Tag1 (0, (Tag1 (0, ((("c")), 100000000, 0, -77), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -80), 0), 100000000, 0, -79), (Tag1 (0, (Tag3 ((("iter", 431)), [((("a")), 100000000, 0, -76); ((("c")), 100000000, 0, -77)], (0)), 100000000, 0, -78), (Tag3 ((("iteri", 432)), [((("a")), 100000000, 0, -76); ((("c")), 100000000, 0, -77)], (0)), 100000000, 0, -75), 0), 100000000, 0, -74), 0), 100000000, 0, -73), 0, (("src/Adapters.mli", 69, 3419, 3419), ("src/Adapters.mli", 72, 3472, 3488), 0), 0, Tag1 ("Sek__Adapters", 8)), 0); Tag1 (("iter2", 439), ([((("a1")), 100000000, 0, -72); ((("a2")), 100000000, 0, -71); ((("c1")), 100000000, 0, -67); ((("c2")), 100000000, 0, -66)], 4, 0, 1, ((Tag1 (0, (Tag1 (0, ((("a1")), 100000000, 0, -72), (Tag1 (0, ((("a2")), 100000000, 0, -71), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -70), 0), 100000000, 0, -69), 0), 100000000, 0, -68), (Tag1 (0, ((("c1")), 100000000, 0, -67), (Tag1 (0, ((("c2")), 100000000, 0, -66), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -65), 0), 100000000, 0, -64), 0), 100000000, 0, -63), 0), 100000000, 0, -62)), [29; 29; 46; 46], [0; 0; 0; 0], 0, 0, (("src/Adapters.mli", 77, 3712, 3712), ("src/Adapters.mli", 78, 3746, 3790), 0), 0, 0, 0, Tag1 ("Sek__Adapters", 9)), 1, 0); Tag1 (("fold_left2", 440), ([((("a1")), 100000000, 0, -61); ((("a2")), 100000000, 0, -60); ((("b")), 100000000, 0, -54); ((("c1")), 100000000, 0, -56); ((("c2")), 100000000, 0, -55)], 5, 0, 1, ((Tag1 (0, (Tag1 (0, ((("b")), 100000000, 0, -54), (Tag1 (0, ((("a1")), 100000000, 0, -61), (Tag1 (0, ((("a2")), 100000000, 0, -60), ((("b")), 100000000, 0, -54), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0), 100000000, 0, -57), (Tag1 (0, ((("b")), 100000000, 0, -54), (Tag1 (0, ((("c1")), 100000000, 0, -56), (Tag1 (0, ((("c2")), 100000000, 0, -55), ((("b")), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52), 0), 100000000, 0, -51), 0), 100000000, 0, -50)), [29; 29; 63; 46; 46], [0; 0; 0; 0; 0], 0, 0, (("src/Adapters.mli", 86, 4191, 4191), ("src/Adapters.mli", 87, 4234, 4286), 0), 0, 0, 0, Tag1 ("Sek__Adapters", 10)), 1, 0); Tag1 (("fold_right2", 441), ([((("a1")), 100000000, 0, -49); ((("a2")), 100000000, 0, -48); ((("b")), 100000000, 0, -42); ((("c1")), 100000000, 0, -44); ((("c2")), 100000000, 0, -43)], 5, 0, 1, ((Tag1 (0, (Tag1 (0, ((("a1")), 100000000, 0, -49), (Tag1 (0, ((("a2")), 100000000, 0, -48), (Tag1 (0, ((("b")), 100000000, 0, -42), ((("b")), 100000000, 0, -42), 0), 100000000, 0, -47), 0), 100000000, 0, -46), 0), 100000000, 0, -45), (Tag1 (0, ((("c1")), 100000000, 0, -44), (Tag1 (0, ((("c2")), 100000000, 0, -43), (Tag1 (0, ((("b")), 100000000, 0, -42), ((("b")), 100000000, 0, -42), 0), 100000000, 0, -41), 0), 100000000, 0, -40), 0), 100000000, 0, -39), 0), 100000000, 0, -38)), [29; 29; 63; 46; 46], [0; 0; 0; 0; 0], 0, 0, (("src/Adapters.mli", 95, 4690, 4690), ("src/Adapters.mli", 96, 4734, 4786), 0), 0, 0, 0, Tag1 ("Sek__Adapters", 11)), 1, 0); (("fold_left2", 442), ((Tag1 (0, (Tag3 ((("iter2", 439)), [((("a1")), 100000000, 0, -32); ((("a2")), 100000000, 0, -33); ((("c1")), 100000000, 0, -35); ((("c2")), 100000000, 0, -36)], (0)), 100000000, 0, -37), (Tag3 ((("fold_left2", 440)), [((("a1")), 100000000, 0, -32); ((("a2")), 100000000, 0, -33); ((("b")), 100000000, 0, -34); ((("c1")), 100000000, 0, -35); ((("c2")), 100000000, 0, -36)], (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0, (("src/Adapters.mli", 100, 4920, 4920), ("src/Adapters.mli", 102, 4968, 5005), 0), 0, Tag1 ("Sek__Adapters", 12)), 0); (("fold_right2", 443), ((Tag1 (0, (Tag3 ((("iter2", 439)), [((("a1")), 100000000, 0, -24); ((("a2")), 100000000, 0, -25); ((("c1")), 100000000, 0, -27); ((("c2")), 100000000, 0, -28)], (0)), 100000000, 0, -29), (Tag3 ((("fold_right2", 441)), [((("a1")), 100000000, 0, -24); ((("a2")), 100000000, 0, -25); ((("b")), 100000000, 0, -26); ((("c1")), 100000000, 0, -27); ((("c2")), 100000000, 0, -28)], (0)), 100000000, 0, -23), 0), 100000000, 0, -22), 0, (("src/Adapters.mli", 106, 5141, 5141), ("src/Adapters.mli", 108, 5190, 5228), 0), 0, Tag1 ("Sek__Adapters", 13)), 0); Tag1 (("to_list", 444), ([((("a")), 100000000, 0, -20); ((("c")), 100000000, 0, -21)], 2, 0, 1, ((Tag1 (0, ((("c")), 100000000, 0, -21), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -20)], (0)), 100000000, 0, -19), 0), 100000000, 0, -18)), [25; 46], [0; 0], 0, 0, (("src/Adapters.mli", 113, 5396, 5396), ("src/Adapters.mli", 114, 5420, 5435), 0), 0, 0, 0, Tag1 ("Sek__Adapters", 14)), 1, 0); (("to_list", 445), ((Tag1 (0, (Tag3 ((("iter", 431)), [((("a")), 100000000, 0, -15); ((("c")), 100000000, 0, -16)], (0)), 100000000, 0, -17), (Tag3 ((("to_list", 444)), [((("a")), 100000000, 0, -15); ((("c")), 100000000, 0, -16)], (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("src/Adapters.mli", 118, 5568, 5568), ("src/Adapters.mli", 118, 5568, 5614), 0), 0, Tag1 ("Sek__Adapters", 15)), 0); Tag1 (("iterator", 446), ([((("a")), 100000000, 0, -11)], 1, 0, 1, ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12), ((("a")), 100000000, 0, -11), 0), 100000000, 0, -10)), [25], [0], 0, 0, (("src/Adapters.mli", 124, 5884, 5884), ("src/Adapters.mli", 125, 5903, 5915), 0), 0, 0, 0, Tag1 ("Sek__Adapters", 16)), 1, 0); Tag2 (("Exhausted", 447), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Sek__Adapters", 17)), 2, 0); (("iterator_of_seq", 448), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [((("a")), 100000000, 0, -8)], (0)), 100000000, 0, -9), (Tag3 ((("iterator", 446)), [((("a")), 100000000, 0, -8)], (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0, (("src/Adapters.mli", 131, 6049, 6049), ("src/Adapters.mli", 131, 6049, 6093), 0), 0, Tag1 ("Sek__Adapters", 18)), 0); (("iterator_of_list", 449), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -4)], (0)), 100000000, 0, -5), (Tag3 ((("iterator", 446)), [((("a")), 100000000, 0, -4)], (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/Adapters.mli", 134, 6164, 6164), ("src/Adapters.mli", 134, 6164, 6208), 0), 0, Tag1 ("Sek__Adapters", 19)), 0)], "Sek__Adapters", [("Sek__Adapters", ("\249\176$\137bro\172?\164\154\188\1422\018n")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sek__", ("b\188\017\179d|~L\019\214\028\188\145y\210\250")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
val iterator_of_list : 'a list -> 'a iterator

module type SeededHashedType =
  sig type t val equal : t -> t -> bool val seeded_hash : int -> t -> int end
module ToOCamlSeededHashedType :
  functor (M : SeededHashedType) ->
    sig
      type t = M.t
      val equal : t -> t -> bool
      val seeded_hash : int -> t -> int
    end
module MakeSeeded = Hashtbl.MakeSeeded
type statistics =
  Hashtbl.statistics = {
  num_bindings : int;
  num_buckets : int;
  max_bucket_length : int;
  bucket_histogram : int array;
}
type ('a, 'b) bucketlist = Empty | Cons of 'a * 'b * ('a, 'b) bucketlist
type ('a, 'b) internal = {
  mutable size : int;
  mutable data : ('a, 'b) bucketlist array;
  mutable seed : int;
  mutable initial_size : int;
}
val filter_map_inplace : ('a -> 'b -> 'b option) -> 'c -> unit
val to_seq : 'a -> ('b * 'c) Stdcompat__seq.t
val to_seq_keys : 'a -> 'b Stdcompat__seq.t
val to_seq_values : 'a -> 'b Stdcompat__seq.t
val stats : 'a -> statistics
val add_seq :
  ('table -> 'key -> 'value -> unit) ->
  'table -> ('key * 'value) Stdcompat__seq.t -> unit
val of_seq :
  create:(int -> 'table) ->
  replace:('table -> 'key -> 'value -> unit) ->
  ("DEBUG:rule", [Tag4 (("SeededHashedType", 580), ((Tag1 ([Tag1 (("t", 594), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("stdcompat__hashtbl_ext.mli", 2, 32, 38), ("stdcompat__hashtbl_ext.mli", 2, 32, 44), 0), 0, 0, 0, Tag1 ("Stdcompat__hashtbl_ext", 0)), 1, 0); (("equal", 595), ((Tag1 (0, (Tag3 ((("t", 594)), 0, (0)), 100000000, 0, -80), (Tag1 (0, (Tag3 ((("t", 594)), 0, (0)), 100000000, 0, -79), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -78), 0), 100000000, 0, -77), 0), 100000000, 0, -76), 0, (("stdcompat__hashtbl_ext.mli", 2, 32, 45), ("stdcompat__hashtbl_ext.mli", 2, 32, 71), 0), 0, Tag1 ("Stdcompat__hashtbl_ext", 1)), 0); (("seeded_hash", 596), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -75), (Tag1 (0, (Tag3 ((("t", 594)), 0, (0)), 100000000, 0, -74), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -73), 0), 100000000, 0, -72), 0), 100000000, 0, -71), 0, (("stdcompat__hashtbl_ext.mli", 2, 32, 72), ("stdcompat__hashtbl_ext.mli", 2, 32, 105), 0), 0, Tag1 ("Stdcompat__hashtbl_ext", 2)), 0)])), 0, (("stdcompat__hashtbl_ext.mli", 1, 0, 0), ("stdcompat__hashtbl_ext.mli", 2, 32, 109), 0), Tag1 ("Stdcompat__hashtbl_ext", 3)), 0); Tag3 (("ToOCamlSeededHashedType", 581), 0, (Tag2 (((("M", 593)), ((("SeededHashedType", 580)))), Tag1 ([Tag1 (("t", 597), (0, 0, 0, 1, ((Tag3 (Tag1 ((("M", 593)), "t"), 0, (0)), 100000000, 0, -91)), 0, 0, 0, 0, (("stdcompat__hashtbl_ext.mli", 6, 170, 204), ("stdcompat__hashtbl_ext.mli", 6, 170, 216), 0), 0, 0, 0, Tag1 ("Stdcompat__hashtbl_ext", 5)), 1, 0); (("equal", 598), ((Tag1 (0, (Tag3 ((("t", 597)), 0, (0)), 100000000, 0, -90), (Tag1 (0, (Tag3 ((("t", 597)), 0, (0)), 100000000, 0, -89), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -88), 0), 100000000, 0, -87), 0), 100000000, 0, -86), 0, (("hashtbl.mli", 434, 17168, 17172), ("hashtbl.mli", 434, 17168, 17197), 0), 0, Tag1 ("Stdlib__Hashtbl", 64)), 0); (("seeded_hash", 599), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -85), (Tag1 (0, (Tag3 ((("t", 597)), 0, (0)), 100000000, 0, -84), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -83), 0), 100000000, 0, -82), 0), 100000000, 0, -81), 0, (("hashtbl.mli", 437, 17255, 17259), ("hashtbl.mli", 437, 17255, 17291), 0), 0, Tag1 ("Stdlib__Hashtbl", 65)), 0)])), 0, (("stdcompat__hashtbl_ext.mli", 5, 112, 114), ("stdcompat__hashtbl_ext.mli", 6, 170, 216), 0), Tag1 ("Stdcompat__hashtbl_ext", 6)), 0, 0); Tag3 (("MakeSeeded", 582), 1, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Hashtbl"), "MakeSeeded")), 0, (("stdcompat__hashtbl_ext.mli", 8, 220, 224), ("stdcompat__hashtbl_ext.mli", 8, 220, 262), 0), Tag1 ("Stdcompat__hashtbl_ext", 7)), 0, 0); Tag1 (("statistics", 583), (0, 0, [[(("num_bindings", 364), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -66), (("stdcompat__hashtbl_ext.mli", 30, 743, 747), ("stdcompat__hashtbl_ext.mli", 30, 743, 766), 0), 0, Tag1 ("Stdcompat__hashtbl_ext", 9)); (("num_buckets", 365), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -67), (("stdcompat__hashtbl_ext.mli", 31, 767, 771), ("stdcompat__hashtbl_ext.mli", 31, 767, 789), 0), 0, Tag1 ("Stdcompat__hashtbl_ext", 10)); (("max_bucket_length", 366), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -68), (("stdcompat__hashtbl_ext.mli", 32, 790, 794), ("stdcompat__hashtbl_ext.mli", 32, 790, 818), 0), 0, Tag1 ("Stdcompat__hashtbl_ext", 11)); (("bucket_histogram", 367), 0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -70)], (0)), 100000000, 0, -69), (("stdcompat__hashtbl_ext.mli", 33, 819, 823), ("stdcompat__hashtbl_ext.mli", 33, 819, 852), 0), 0, Tag1 ("Stdcompat__hashtbl_ext", 12))]], 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Hashtbl"), "statistics"), 0, (0)), 100000000, 0, -65)), 0, 0, 0, 0, (("stdcompat__hashtbl_ext.mli", 25, 696, 696), ("stdcompat__hashtbl_ext.mli", 34, 853, 856), 0), 0, 0, 0, Tag1 ("Stdcompat__hashtbl_ext", 8)), 1, 0); Tag1 (("bucketlist", 584), ([((("a")), 100000000, 0, -62); ((("b")), 100000000, 0, -63)], 2, Tag1 ([(("Empty", 369), (0), 0, (("stdcompat__hashtbl_ext.mli", 38, 886, 888), ("stdcompat__hashtbl_ext.mli", 38, 886, 895), 0), 0, Tag1 ("Stdcompat__hashtbl_ext", 14)); (("Cons", 370), ([((("a")), 100000000, 0, -62); ((("b")), 100000000, 0, -63); (Tag3 ((("bucketlist", 584)), [((("a")), 100000000, 0, -62); ((("b")), 100000000, 0, -63)], (0)), 100000000, 0, -64)]), 0, (("stdcompat__hashtbl_ext.mli", 39, 896, 898), ("stdcompat__hashtbl_ext.mli", 39, 896, 937), 0), 0, Tag1 ("Stdcompat__hashtbl_ext", 15))], 0), 1, 0, [25; 25], [0; 0], 0, 0, (("stdcompat__hashtbl_ext.mli", 37, 859, 859), ("stdcompat__hashtbl_ext.mli", 39, 896, 937), 0), 0, 0, 0, Tag1 ("Stdcompat__hashtbl_ext", 13)), 1, 0); Tag1 (("internal", 585), ([((("a")), 100000000, 0, -58); ((("b")), 100000000, 0, -59)], 2, [[(("size", 372), 1, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -55), (("stdcompat__hashtbl_ext.mli", 43, 965, 971), ("stdcompat__hashtbl_ext.mli", 43, 965, 989), 0), 0, Tag1 ("Stdcompat__hashtbl_ext", 17)); (("data", 373), 1, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("bucketlist", 584)), [((("a")), 100000000, 0, -58); ((("b")), 100000000, 0, -59)], (0)), 100000000, 0, -57)], (0)), 100000000, 0, -56), (("stdcompat__hashtbl_ext.mli", 44, 990, 996), ("stdcompat__hashtbl_ext.mli", 44, 990, 1036), 0), 0, Tag1 ("Stdcompat__hashtbl_ext", 18)); (("seed", 374), 1, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -60), (("stdcompat__hashtbl_ext.mli", 45, 1037, 1043), ("stdcompat__hashtbl_ext.mli", 45, 1037, 1061), 0), 0, Tag1 ("Stdcompat__hashtbl_ext", 19)); (("initial_size", 375), 1, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -61), (("stdcompat__hashtbl_ext.mli", 46, 1062, 1068), ("stdcompat__hashtbl_ext.mli", 46, 1062, 1094), 0), 0, Tag1 ("Stdcompat__hashtbl_ext", 20))]], 1, 0, [63; 63], [0; 0], 0, 0, (("stdcompat__hashtbl_ext.mli", 42, 940, 940), ("stdcompat__hashtbl_ext.mli", 47, 1095, 1100), 0), 0, 0, 0, Tag1 ("Stdcompat__hashtbl_ext", 16)), 1, 0); (("filter_map_inplace", 586), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -54), (Tag1 (0, ((("b")), 100000000, 0, -53), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -53)], (0)), 100000000, 0, -52), 0), 100000000, 0, -51), 0), 100000000, 0, -50), (Tag1 (0, ((("c")), 100000000, 0, -49), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -48), 0), 100000000, 0, -47), 0), 100000000, 0, -46), 0, (("stdcompat__hashtbl_ext.mli", 66, 1373, 1373), ("stdcompat__hashtbl_ext.mli", 66, 1373, 1435), 0), 0, Tag1 ("Stdcompat__hashtbl_ext", 21)), 0); (("to_seq", 587), ((Tag1 (0, ((("a")), 100000000, 0, -45), (Tag3 (Tag1 ((Tag2 ("Stdcompat__seq")), "t"), [(Tag2 ([((("b")), 100000000, 0, -43); ((("c")), 100000000, 0, -44)]), 100000000, 0, -42)], (0)), 100000000, 0, -41), 0), 100000000, 0, -40), 0, (("stdcompat__hashtbl_ext.mli", 68, 1437, 1437), ("stdcompat__hashtbl_ext.mli", 68, 1437, 1482), 0), 0, Tag1 ("Stdcompat__hashtbl_ext", 22)), 0); (("to_seq_keys", 588), ((Tag1 (0, ((("a")), 100000000, 0, -39), (Tag3 (Tag1 ((Tag2 ("Stdcompat__seq")), "t"), [((("b")), 100000000, 0, -38)], (0)), 100000000, 0, -37), 0), 100000000, 0, -36), 0, (("stdcompat__hashtbl_ext.mli", 70, 1484, 1484), ("stdcompat__hashtbl_ext.mli", 70, 1484, 1527), 0), 0, Tag1 ("Stdcompat__hashtbl_ext", 23)), 0); (("to_seq_values", 589), ((Tag1 (0, ((("a")), 100000000, 0, -35), (Tag3 (Tag1 ((Tag2 ("Stdcompat__seq")), "t"), [((("b")), 100000000, 0, -34)], (0)), 100000000, 0, -33), 0), 100000000, 0, -32), 0, (("stdcompat__hashtbl_ext.mli", 72, 1529, 1529), ("stdcompat__hashtbl_ext.mli", 72, 1529, 1574), 0), 0, Tag1 ("Stdcompat__hashtbl_ext", 24)), 0); (("stats", 590), ((Tag1 (0, ((("a")), 100000000, 0, -31), (Tag3 ((("statistics", 583)), 0, (0)), 100000000, 0, -30), 0), 100000000, 0, -29), 0, (("stdcompat__hashtbl_ext.mli", 74, 1576, 1576), ("stdcompat__hashtbl_ext.mli", 74, 1576, 1604), 0), 0, Tag1 ("Stdcompat__hashtbl_ext", 25)), 0); (("add_seq", 591), ((Tag1 (0, (Tag1 (0, ((("table")), 100000000, 0, -24), (Tag1 (0, ((("key")), 100000000, 0, -22), (Tag1 (0, ((("value")), 100000000, 0, -23), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -28), 0), 100000000, 0, -27), 0), 100000000, 0, -26), 0), 100000000, 0, -25), (Tag1 (0, ((("table")), 100000000, 0, -24), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdcompat__seq")), "t"), [(Tag2 ([((("key")), 100000000, 0, -22); ((("value")), 100000000, 0, -23)]), 100000000, 0, -21)], (0)), 100000000, 0, -20), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("stdcompat__hashtbl_ext.mli", 106, 2647, 2647), ("stdcompat__hashtbl_ext.mli", 107, 2709, 2754), 0), 0, Tag1 ("Stdcompat__hashtbl_ext", 26)), 0); (("of_seq", 592), ((Tag1 (("create"), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -15), ((("table")), 100000000, 0, -5), 0), 100000000, 0, -14), (Tag1 (("replace"), (Tag1 (0, ((("table")), 100000000, 0, -5), (Tag1 (0, ((("key")), 100000000, 0, -8), (Tag1 (0, ((("value")), 100000000, 0, -9), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -13), 0), 100000000, 0, -12), 0), 100000000, 0, -11), 0), 100000000, 0, -10), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdcompat__seq")), "t"), [(Tag2 ([((("key")), 100000000, 0, -8); ((("value")), 100000000, 0, -9)]), 100000000, 0, -7)], (0)), 100000000, 0, -6), ((("table")), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("stdcompat__hashtbl_ext.mli", 109, 2756, 2756), ("stdcompat__hashtbl_ext.mli", 111, 2843, 2889), 0), 0, Tag1 ("Stdcompat__hashtbl_ext", 27)), 0)], "Stdcompat__hashtbl_ext", [("Stdcompat__hashtbl_ext", ("r\226J;\241\148\149\143\251\142\178\024O\003\132p")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Stdcompat__seq_s", ("@o]\163\253\203\166\003\01684\225\228\153\246\189")); ("Stdcompat__seq", ("LQg\166\229]bd\031z:\129\224\026B\218")); ("Stdcompat__init", ("r\254q\255\217]\232\239'\192d\165\222\016\157\133")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
('key * 'value) Stdcompat__seq.t -> 'table

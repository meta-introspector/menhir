type t
type data = {
  sigma : Evd.evar_map;
  goals : Evar.t list;
  entry : Proofview.entry;
  stack : (Evar.t list * Evar.t list) list;
  name : Names.Id.t;
  poly : bool;
}
val data : t -> data
val start :
  name:Names.Id.t ->
  poly:bool ->
  ?typing_flags:Declarations.typing_flags ->
  Evd.evar_map -> (Environ.env * EConstr.types) list -> t
val dependent_start :
  name:Names.Id.t ->
  poly:bool ->
  ?typing_flags:Declarations.typing_flags -> Proofview.telescope -> t
val is_done : t -> bool
val is_complete : t -> bool
val partial_proof : t -> EConstr.constr list
val compact : t -> t
val update_sigma_univs : UGraph.t -> t -> t
type open_error_reason = UnfinishedProof | HasGivenUpGoals
exception OpenProof of Names.Id.t option * open_error_reason
val return : ?pid:Names.Id.t -> t -> Evd.evar_map
type 'a focus_kind
val new_focus_kind : unit -> 'a focus_kind
type 'a focus_condition
val no_cond : ?loose_end:bool -> 'a focus_kind -> 'a focus_condition
val done_cond : ?loose_end:bool -> 'a focus_kind -> 'a focus_condition
val focus : 'a focus_condition -> 'a -> int -> t -> t
val focus_id : 'a focus_condition -> 'a -> Names.Id.t -> t -> t
exception FullyUnfocused
exception CannotUnfocusThisWay
exception NoSuchGoals of int * int
exception NoSuchGoal of Names.Id.t option
val unfocus : 'a focus_kind -> t -> unit -> t
val unfocused : t -> bool
exception NoSuchFocus
val get_at_focus : 'a focus_kind -> t -> 'a
val is_last_focus : 'a focus_kind -> t -> bool
val no_focused_goal : t -> bool
val run_tactic :
  Environ.env ->
  'a Proofview.tactic -> t -> t * (bool * Proofview_monad.Info.tree) * 'a
val maximal_unfocus : 'a focus_kind -> t -> t
val unshelve : t -> t
val goal_uid : Evar.t -> string
val pr_proof : t -> Pp.t
val background_subgoals : t -> Evar.t list
val all_goals : t -> Evar.Set.t
val solve :
  ?with_end_tac:unit Proofview.tactic ->
  Goal_select.t -> int option -> unit Proofview.tactic -> t -> t * bool
val use_unification_heuristics : unit -> bool
val refine_by_tactic :
  name:Names.Id.t ->
  poly:bool ->
  Environ.env ->
  Evd.evar_map ->
  EConstr.types -> unit Proofview.tactic -> Constr.constr * Evd.evar_map
exception SuggestNoSuchGoals of int * t
val get_goal_context_gen : t -> int -> Evd.evar_map * Environ.env
("DEBUG:rule", [Tag1 (("t", 1425), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("proofs/proof.mli", 35, 2110, 2110), ("proofs/proof.mli", 35, 2110, 2116), 0), 0, 0, 0, Tag1 ("Proof", 0)), 1, 0); Tag1 (("data", 1426), (0, 0, [[(("sigma", 478), 0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -208), (("proofs/proof.mli", 38, 2130, 2134), ("proofs/proof.mli", 40, 2253, 2256), 0), 0, Tag1 ("Proof", 2)); (("goals", 488), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Evar")), "t"), 0, (0)), 100000000, 0, -210)], (0)), 100000000, 0, -209), (("proofs/proof.mli", 40, 2253, 2257), ("proofs/proof.mli", 42, 2300, 2303), 0), 0, Tag1 ("Proof", 3)); (("entry", 568), 0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "entry"), 0, (0)), 100000000, 0, -211), (("proofs/proof.mli", 42, 2300, 2304), ("proofs/proof.mli", 44, 2361, 2364), 0), 0, Tag1 ("Proof", 4)); (("stack", 569), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Evar")), "t"), 0, (0)), 100000000, 0, -215)], (0)), 100000000, 0, -214); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Evar")), "t"), 0, (0)), 100000000, 0, -217)], (0)), 100000000, 0, -216)]), 100000000, 0, -213)], (0)), 100000000, 0, -212), (("proofs/proof.mli", 44, 2361, 2365), ("proofs/proof.mli", 46, 2451, 2454), 0), 0, Tag1 ("Proof", 5)); (("name", 671), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -218), (("proofs/proof.mli", 46, 2451, 2455), ("proofs/proof.mli", 48, 2539, 2542), 0), 0, Tag1 ("Proof", 6)); (("poly", 672), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -219), (("proofs/proof.mli", 48, 2539, 2543), ("proofs/proof.mli", 48, 2539, 2555), 0), 0, Tag1 ("Proof", 7))]], 1, 0, 0, 0, 0, 0, (("proofs/proof.mli", 37, 2118, 2118), ("proofs/proof.mli", 50, 2578, 2581), 0), 0, 0, 0, Tag1 ("Proof", 1)), 1, 0); (("data", 1427), ((Tag1 (0, (Tag3 ((("t", 1425)), 0, (0)), 100000000, 0, -207), (Tag3 ((("data", 1426)), 0, (0)), 100000000, 0, -206), 0), 100000000, 0, -205), 0, (("proofs/proof.mli", 52, 2583, 2583), ("proofs/proof.mli", 52, 2583, 2603), 0), 0, Tag1 ("Proof", 8)), 0); (("start", 1428), ((Tag1 (("name"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -204), (Tag1 (("poly"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -203), (Tag1 (Tag1 ("typing_flags"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Declarations")), "typing_flags"), 0, (0)), 100000000, 0, -202)], (0)), 100000000, 0, -201), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -200), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -198); (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -199)]), 100000000, 0, -197)], (0)), 100000000, 0, -196), (Tag3 ((("t", 1425)), 0, (0)), 100000000, 0, -195), 0), 100000000, 0, -194), 0), 100000000, 0, -193), 0), 100000000, 0, -192), 0), 100000000, 0, -191), 0), 100000000, 0, -190), 0, (("proofs/proof.mli", 55, 2639, 2639), ("proofs/proof.mli", 59, 2730, 2790), 0), 0, Tag1 ("Proof", 9)), 0); (("dependent_start", 1429), ((Tag1 (("name"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -189), (Tag1 (("poly"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -188), (Tag1 (Tag1 ("typing_flags"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Declarations")), "typing_flags"), 0, (0)), 100000000, 0, -187)], (0)), 100000000, 0, -186), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "telescope"), 0, (0)), 100000000, 0, -185), (Tag3 ((("t", 1425)), 0, (0)), 100000000, 0, -184), 0), 100000000, 0, -183), 0), 100000000, 0, -182), 0), 100000000, 0, -181), 0), 100000000, 0, -180), 0, (("proofs/proof.mli", 61, 2792, 2792), ("proofs/proof.mli", 65, 2893, 2922), 0), 0, Tag1 ("Proof", 10)), 0); (("is_done", 1430), ((Tag1 (0, (Tag3 ((("t", 1425)), 0, (0)), 100000000, 0, -179), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -178), 0), 100000000, 0, -177), 0, (("proofs/proof.mli", 69, 3087, 3087), ("proofs/proof.mli", 69, 3087, 3110), 0), 0, Tag1 ("Proof", 11)), 0); (("is_complete", 1431), ((Tag1 (0, (Tag3 ((("t", 1425)), 0, (0)), 100000000, 0, -176), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -175), 0), 100000000, 0, -174), 0, (("proofs/proof.mli", 72, 3193, 3193), ("proofs/proof.mli", 72, 3193, 3220), 0), 0, Tag1 ("Proof", 12)), 0); (("partial_proof", 1432), ((Tag1 (0, (Tag3 ((("t", 1425)), 0, (0)), 100000000, 0, -173), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -172)], (0)), 100000000, 0, -171), 0), 100000000, 0, -170), 0, (("proofs/proof.mli", 75, 3281, 3281), ("proofs/proof.mli", 75, 3281, 3325), 0), 0, Tag1 ("Proof", 13)), 0); (("compact", 1433), ((Tag1 (0, (Tag3 ((("t", 1425)), 0, (0)), 100000000, 0, -169), (Tag3 ((("t", 1425)), 0, (0)), 100000000, 0, -168), 0), 100000000, 0, -167), 0, (("proofs/proof.mli", 77, 3327, 3327), ("proofs/proof.mli", 77, 3327, 3347), 0), 0, Tag1 ("Proof", 14)), 0); (("update_sigma_univs", 1434), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("UGraph")), "t"), 0, (0)), 100000000, 0, -166), (Tag1 (0, (Tag3 ((("t", 1425)), 0, (0)), 100000000, 0, -165), (Tag3 ((("t", 1425)), 0, (0)), 100000000, 0, -164), 0), 100000000, 0, -163), 0), 100000000, 0, -162), 0, (("proofs/proof.mli", 80, 3424, 3424), ("proofs/proof.mli", 80, 3424, 3467), 0), 0, Tag1 ("Proof", 15)), 0); Tag1 (("open_error_reason", 1435), (0, 0, Tag1 ([(("UnfinishedProof", 1095), (0), 0, (("proofs/proof.mli", 87, 3756, 3758), ("proofs/proof.mli", 87, 3756, 3775), 0), 0, Tag1 ("Proof", 17)); (("HasGivenUpGoals", 1096), (0), 0, (("proofs/proof.mli", 88, 3776, 3778), ("proofs/proof.mli", 88, 3776, 3795), 0), 0, Tag1 ("Proof", 18))], 0), 1, 0, 0, 0, 0, 0, (("proofs/proof.mli", 86, 3731, 3731), ("proofs/proof.mli", 88, 3776, 3795), 0), 0, 1, 0, Tag1 ("Proof", 16)), 1, 0); Tag2 (("OpenProof", 1436), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -160)], (0)), 100000000, 0, -159); (Tag3 ((("open_error_reason", 1435)), 0, (0)), 100000000, 0, -161)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Proof", 19)), 2, 0); (("return", 1437), ((Tag1 (Tag1 ("pid"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -158)], (0)), 100000000, 0, -157), (Tag1 (0, (Tag3 ((("t", 1425)), 0, (0)), 100000000, 0, -156), (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -155), 0), 100000000, 0, -154), 0), 100000000, 0, -153), 0, (("proofs/proof.mli", 92, 3859, 3859), ("proofs/proof.mli", 92, 3859, 3908), 0), 0, Tag1 ("Proof", 20)), 0); Tag1 (("focus_kind", 1438), ([((("a")), 100000000, 0, -152)], 1, 0, 1, 0, [7], [2], 0, 0, (("proofs/proof.mli", 104, 4415, 4415), ("proofs/proof.mli", 104, 4415, 4433), 0), 0, 0, 0, Tag1 ("Proof", 21)), 1, 0); (("new_focus_kind", 1439), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -151), (Tag3 ((("focus_kind", 1438)), [((("a")), 100000000, 0, -150)], (0)), 100000000, 0, -149), 0), 100000000, 0, -148), 0, (("proofs/proof.mli", 105, 4434, 4434), ("proofs/proof.mli", 105, 4434, 4476), 0), 0, Tag1 ("Proof", 22)), 0); Tag1 (("focus_condition", 1440), ([((("a")), 100000000, 0, -147)], 1, 0, 1, 0, [7], [2], 0, 0, (("proofs/proof.mli", 111, 4671, 4671), ("proofs/proof.mli", 111, 4671, 4694), 0), 0, 0, 0, Tag1 ("Proof", 23)), 1, 0); (("no_cond", 1441), ((Tag1 (Tag1 ("loose_end"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -146)], (0)), 100000000, 0, -145), (Tag1 (0, (Tag3 ((("focus_kind", 1438)), [((("a")), 100000000, 0, -143)], (0)), 100000000, 0, -144), (Tag3 ((("focus_condition", 1440)), [((("a")), 100000000, 0, -143)], (0)), 100000000, 0, -142), 0), 100000000, 0, -141), 0), 100000000, 0, -140), 0, (("proofs/proof.mli", 119, 5074, 5074), ("proofs/proof.mli", 119, 5074, 5142), 0), 0, Tag1 ("Proof", 24)), 0); (("done_cond", 1442), ((Tag1 (Tag1 ("loose_end"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -139)], (0)), 100000000, 0, -138), (Tag1 (0, (Tag3 ((("focus_kind", 1438)), [((("a")), 100000000, 0, -136)], (0)), 100000000, 0, -137), (Tag3 ((("focus_condition", 1440)), [((("a")), 100000000, 0, -136)], (0)), 100000000, 0, -135), 0), 100000000, 0, -134), 0), 100000000, 0, -133), 0, (("proofs/proof.mli", 127, 5564, 5564), ("proofs/proof.mli", 127, 5564, 5634), 0), 0, Tag1 ("Proof", 25)), 0); (("focus", 1443), ((Tag1 (0, (Tag3 ((("focus_condition", 1440)), [((("a")), 100000000, 0, -131)], (0)), 100000000, 0, -132), (Tag1 (0, ((("a")), 100000000, 0, -131), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -130), (Tag1 (0, (Tag3 ((("t", 1425)), 0, (0)), 100000000, 0, -129), (Tag3 ((("t", 1425)), 0, (0)), 100000000, 0, -128), 0), 100000000, 0, -127), 0), 100000000, 0, -126), 0), 100000000, 0, -125), 0), 100000000, 0, -124), 0, (("proofs/proof.mli", 132, 5784, 5784), ("proofs/proof.mli", 132, 5784, 5837), 0), 0, Tag1 ("Proof", 26)), 0); (("focus_id", 1444), ((Tag1 (0, (Tag3 ((("focus_condition", 1440)), [((("a")), 100000000, 0, -122)], (0)), 100000000, 0, -123), (Tag1 (0, ((("a")), 100000000, 0, -122), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -121), (Tag1 (0, (Tag3 ((("t", 1425)), 0, (0)), 100000000, 0, -120), (Tag3 ((("t", 1425)), 0, (0)), 100000000, 0, -119), 0), 100000000, 0, -118), 0), 100000000, 0, -117), 0), 100000000, 0, -116), 0), 100000000, 0, -115), 0, (("proofs/proof.mli", 135, 5868, 5868), ("proofs/proof.mli", 135, 5868, 5931), 0), 0, Tag1 ("Proof", 27)), 0); Tag2 (("FullyUnfocused", 1445), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Proof", 28)), 2, 0); Tag2 (("CannotUnfocusThisWay", 1446), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Proof", 29)), 2, 0); Tag2 (("NoSuchGoals", 1447), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -113); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -114)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Proof", 30)), 2, 0); Tag2 (("NoSuchGoal", 1448), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -112)], (0)), 100000000, 0, -111)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Proof", 31)), 2, 0); (("unfocus", 1449), ((Tag1 (0, (Tag3 ((("focus_kind", 1438)), [((("a")), 100000000, 0, -110)], (0)), 100000000, 0, -109), (Tag1 (0, (Tag3 ((("t", 1425)), 0, (0)), 100000000, 0, -108), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -107), (Tag3 ((("t", 1425)), 0, (0)), 100000000, 0, -106), 0), 100000000, 0, -105), 0), 100000000, 0, -104), 0), 100000000, 0, -103), 0, (("proofs/proof.mli", 153, 6528, 6528), ("proofs/proof.mli", 153, 6528, 6573), 0), 0, Tag1 ("Proof", 32)), 0); (("unfocused", 1450), ((Tag1 (0, (Tag3 ((("t", 1425)), 0, (0)), 100000000, 0, -102), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -101), 0), 100000000, 0, -100), 0, (("proofs/proof.mli", 156, 6639, 6639), ("proofs/proof.mli", 156, 6639, 6664), 0), 0, Tag1 ("Proof", 33)), 0); Tag2 (("NoSuchFocus", 1451), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Proof", 34)), 2, 0); (("get_at_focus", 1452), ((Tag1 (0, (Tag3 ((("focus_kind", 1438)), [((("a")), 100000000, 0, -97)], (0)), 100000000, 0, -99), (Tag1 (0, (Tag3 ((("t", 1425)), 0, (0)), 100000000, 0, -98), ((("a")), 100000000, 0, -97), 0), 100000000, 0, -96), 0), 100000000, 0, -95), 0, (("proofs/proof.mli", 162, 6848, 6848), ("proofs/proof.mli", 162, 6848, 6891), 0), 0, Tag1 ("Proof", 35)), 0); (("is_last_focus", 1453), ((Tag1 (0, (Tag3 ((("focus_kind", 1438)), [((("a")), 100000000, 0, -94)], (0)), 100000000, 0, -93), (Tag1 (0, (Tag3 ((("t", 1425)), 0, (0)), 100000000, 0, -92), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -91), 0), 100000000, 0, -90), 0), 100000000, 0, -89), 0, (("proofs/proof.mli", 165, 6963, 6963), ("proofs/proof.mli", 165, 6963, 7009), 0), 0, Tag1 ("Proof", 36)), 0); (("no_focused_goal", 1454), ((Tag1 (0, (Tag3 ((("t", 1425)), 0, (0)), 100000000, 0, -88), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -87), 0), 100000000, 0, -86), 0, (("proofs/proof.mli", 168, 7065, 7065), ("proofs/proof.mli", 168, 7065, 7096), 0), 0, Tag1 ("Proof", 37)), 0); (("run_tactic", 1455), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -85), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [((("a")), 100000000, 0, -82)], (0)), 100000000, 0, -84), (Tag1 (0, (Tag3 ((("t", 1425)), 0, (0)), 100000000, 0, -83), (Tag2 ([(Tag3 ((("t", 1425)), 0, (0)), 100000000, 0, -78); (Tag2 ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -80); (Tag3 (Tag1 (Tag1 ((Tag2 ("Proofview_monad")), "Info"), "tree"), 0, (0)), 100000000, 0, -81)]), 100000000, 0, -79); ((("a")), 100000000, 0, -82)]), 100000000, 0, -77), 0), 100000000, 0, -76), 0), 100000000, 0, -75), 0), 100000000, 0, -74), 0, (("proofs/proof.mli", 174, 7223, 7223), ("proofs/proof.mli", 176, 7255, 7329), 0), 0, Tag1 ("Proof", 38)), 0); (("maximal_unfocus", 1456), ((Tag1 (0, (Tag3 ((("focus_kind", 1438)), [((("a")), 100000000, 0, -73)], (0)), 100000000, 0, -72), (Tag1 (0, (Tag3 ((("t", 1425)), 0, (0)), 100000000, 0, -71), (Tag3 ((("t", 1425)), 0, (0)), 100000000, 0, -70), 0), 100000000, 0, -69), 0), 100000000, 0, -68), 0, (("proofs/proof.mli", 178, 7331, 7331), ("proofs/proof.mli", 178, 7331, 7376), 0), 0, Tag1 ("Proof", 39)), 0); (("unshelve", 1457), ((Tag1 (0, (Tag3 ((("t", 1425)), 0, (0)), 100000000, 0, -67), (Tag3 ((("t", 1425)), 0, (0)), 100000000, 0, -66), 0), 100000000, 0, -65), 0, (("proofs/proof.mli", 184, 7490, 7490), ("proofs/proof.mli", 184, 7490, 7511), 0), 0, Tag1 ("Proof", 40)), 0); (("goal_uid", 1458), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evar")), "t"), 0, (0)), 100000000, 0, -64), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -63), 0), 100000000, 0, -62), 0, (("proofs/proof.mli", 188, 7612, 7612), ("proofs/proof.mli", 188, 7612, 7643), 0), 0, Tag1 ("Proof", 41)), 0); (("pr_proof", 1459), ((Tag1 (0, (Tag3 ((("t", 1425)), 0, (0)), 100000000, 0, -61), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -60), 0), 100000000, 0, -59), 0, (("proofs/proof.mli", 190, 7645, 7645), ("proofs/proof.mli", 190, 7645, 7669), 0), 0, Tag1 ("Proof", 42)), 0); (("background_subgoals", 1460), ((Tag1 (0, (Tag3 ((("t", 1425)), 0, (0)), 100000000, 0, -58), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Evar")), "t"), 0, (0)), 100000000, 0, -57)], (0)), 100000000, 0, -56), 0), 100000000, 0, -55), 0, (("proofs/proof.mli", 193, 7747, 7747), ("proofs/proof.mli", 193, 7747, 7789), 0), 0, Tag1 ("Proof", 43)), 0); (("all_goals", 1461), ((Tag1 (0, (Tag3 ((("t", 1425)), 0, (0)), 100000000, 0, -54), (Tag3 (Tag1 (Tag1 ((Tag2 ("Evar")), "Set"), "t"), 0, (0)), 100000000, 0, -53), 0), 100000000, 0, -52), 0, (("proofs/proof.mli", 196, 7839, 7839), ("proofs/proof.mli", 196, 7839, 7870), 0), 0, Tag1 ("Proof", 44)), 0); (("solve", 1462), ((Tag1 (Tag1 ("with_end_tac"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -51)], (0)), 100000000, 0, -50)], (0)), 100000000, 0, -49), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Goal_select")), "t"), 0, (0)), 100000000, 0, -48), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -47)], (0)), 100000000, 0, -46), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -45)], (0)), 100000000, 0, -44), (Tag1 (0, (Tag3 ((("t", 1425)), 0, (0)), 100000000, 0, -43), (Tag2 ([(Tag3 ((("t", 1425)), 0, (0)), 100000000, 0, -41); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -42)]), 100000000, 0, -40), 0), 100000000, 0, -39), 0), 100000000, 0, -38), 0), 100000000, 0, -37), 0), 100000000, 0, -36), 0), 100000000, 0, -35), 0, (("proofs/proof.mli", 202, 8039, 8039), ("proofs/proof.mli", 208, 8161, 8174), 0), 0, Tag1 ("Proof", 45)), 0); (("use_unification_heuristics", 1463), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -34), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -33), 0), 100000000, 0, -32), 0, (("proofs/proof.mli", 211, 8240, 8240), ("proofs/proof.mli", 211, 8240, 8285), 0), 0, Tag1 ("Proof", 46)), 0); (("refine_by_tactic", 1464), ((Tag1 (("name"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -31), (Tag1 (("poly"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -30), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -29), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -28), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -27), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -26)], (0)), 100000000, 0, -25), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -23); (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -24)]), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), 0), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("proofs/proof.mli", 213, 8287, 8287), ("proofs/proof.mli", 220, 8425, 8458), 0), 0, Tag1 ("Proof", 48)), 0); Tag2 (("SuggestNoSuchGoals", 1465), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -14); (Tag3 ((("t", 1425)), 0, (0)), 100000000, 0, -15)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Proof", 49)), 2, 0); (("get_goal_context_gen", 1466), ((Tag1 (0, (Tag3 ((("t", 1425)), 0, (0)), 100000000, 0, -13), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -10); (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -11)]), 100000000, 0, -9), 0), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("proofs/proof.mli", 230, 8889, 8889), ("proofs/proof.mli", 230, 8889, 8954), 0), 0, Tag1 ("Proof", 50)), 0); (("get_proof_context", 1467), ((Tag1 (0, (Tag3 ((("t", 1425)), 0, (0)), 100000000, 0, -6), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -4); (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -5)]), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("proofs/proof.mli", 234, 9047, 9047), ("proofs/proof.mli", 234, 9047, 9102), 0), 0, Tag1 ("Proof", 51)), 0)], "Proof", [("Proof", ("\249\030\200g\248\164o&\tS\132\rTl\1736")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Unix", (":B72R\011\005Sj\189)\011\239PH\254")); ("UnivSubst", ("\190qu\031mc\130\181\003G]\132\"\219m)")); ("UnivProblem", ("6'\161\018\181\001.\253\000\141a6\171\1727\155")); ("UnivNames", ("%\151_\209%+JM$n\001\232\194n\178N")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UState", ("SD\203\215|\136\n\251\239\208\148\215C\n\167\005")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Summary", ("\148G\135\226\024L3\246\021\028U\146\164`\253\250")); ("Store", ("/dT\252\145\179pq\216{\181\206\190K+U")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Section", ("\245\207\b\021\142v=\155#w\246}\"4b\006")); ("Safe_typing", (")\250?\164\145\132\241\127\186\152h+\145\"\237l")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Proofview_monad", ("\218\196\189S\147\216\129\221\231\224v\228O\024*\239")); ("Proofview", ("\245\140U\027\236\199\199&\242\156\199YG\250tA")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("Nativevalues", ("8:\007\025e\226c,\001\171\146#l\210\171\152")); ("Nativelib", ("V\239\205Y1\147E:,\176\196Hy\1483|")); ("Nativecode", ("\190\185\255\006m\012\210\163\138Rz\247\15283\183")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Monad", ("\244\171T\157\194p\187\160\149\195{\132\222\020\253\148")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Logic_monad", ("\130\157\160Q\163vQ\137\184\2242\209\128\024\220i")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hook", ("\183\194\223\003\155\169',\187\240a;E\b\1396")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Goal_select", ("\235$\175\023t\178\194.Ivlz\005\211\173\n")); ("Genlambda", ("\170}\024\241\141\222\136S\169\219\2212i\134KI")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evd", ("\211\205p\193\216\129r\006\239oN\142ar\196\175")); ("Evar_kinds", ("\023L\186\132\218}\254\221\185\198\220\200h\003{\021")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Entries", ("\172\201\198\221Ap\027_{\174\141C\021\";p")); ("EConstr", ("\201aW\156\157;N\004\201V\208\006L\166\211)")); ("Dyn", ("\131z`\205v\2306\007x\027&K.?;\169")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conversion", ("\158\150&\195M\tv\127|\029\158RRK\211A")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CUnix", ("\140Zl\153\167\011J\015\005|th\247OTu")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CDebug", ("^4\210p7\239!3\138\138\213?\239`\250\157")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])
val get_proof_context : t -> Evd.evar_map * Environ.env

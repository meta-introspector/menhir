type annotation =
    Ti_pat : 'k Typedtree.pattern_category *
      'k Typedtree.general_pattern -> annotation
  | Ti_expr of Typedtree.expression
  | Ti_class of Typedtree.class_expr
  | Ti_mod of Typedtree.module_expr
  | An_call of Location.t * Annot.call
  | An_ident of Location.t * string * Annot.ident
val record : annotation -> unit
val record_phrase : Location.t -> unit
val dump : string option -> unit
val get_location : annotation -> Location.t
("DEBUG:rule", [Tag1 (("annotation", 475), (0, 0, Tag1 ([(("Ti_pat", 369), ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern_category"), [((("k")), 100000000, 0, -21)], (0)), 100000000, 0, -20); (Tag3 (Tag1 ((Tag2 ("Typedtree")), "general_pattern"), [((("k")), 100000000, 0, -21)], (0)), 100000000, 0, -22)]), ((Tag3 ((("annotation", 475)), 0, (0)), 100000000, 0, -19)), (("typing/stypes.mli", 23, 1208, 1210), ("typing/stypes.mli", 23, 1208, 1275), 0), 0, Tag1 ("Stypes", 4)); (("Ti_expr", 370), ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "expression"), 0, (0)), 100000000, 0, -23)]), 0, (("typing/stypes.mli", 24, 1276, 1278), ("typing/stypes.mli", 24, 1276, 1302), 0), 0, Tag1 ("Stypes", 5)); (("Ti_class", 371), ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_expr"), 0, (0)), 100000000, 0, -24)]), 0, (("typing/stypes.mli", 25, 1303, 1305), ("typing/stypes.mli", 25, 1303, 1329), 0), 0, Tag1 ("Stypes", 6)); (("Ti_mod", 372), ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_expr"), 0, (0)), 100000000, 0, -25)]), 0, (("typing/stypes.mli", 26, 1330, 1332), ("typing/stypes.mli", 26, 1330, 1357), 0), 0, Tag1 ("Stypes", 7)); (("An_call", 373), ([(Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -26); (Tag3 (Tag1 ((Tag2 ("Annot")), "call"), 0, (0)), 100000000, 0, -27)]), 0, (("typing/stypes.mli", 27, 1358, 1360), ("typing/stypes.mli", 27, 1358, 1396), 0), 0, Tag1 ("Stypes", 8)); (("An_ident", 442), ([(Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -28); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -29); (Tag3 (Tag1 ((Tag2 ("Annot")), "ident"), 0, (0)), 100000000, 0, -30)]), 0, (("typing/stypes.mli", 28, 1397, 1399), ("typing/stypes.mli", 28, 1397, 1446), 0), 0, Tag1 ("Stypes", 9))], 0), 1, 0, 0, 0, 0, 0, (("typing/stypes.mli", 22, 1190, 1190), ("typing/stypes.mli", 28, 1397, 1446), 0), 0, 0, 0, Tag1 ("Stypes", 3)), 1, 0); (("record", 476), ((Tag1 (0, (Tag3 ((("annotation", 475)), 0, (0)), 100000000, 0, -18), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("typing/stypes.mli", 30, 1448, 1448), ("typing/stypes.mli", 30, 1448, 1479), 0), 0, Tag1 ("Stypes", 10)), 0); (("record_phrase", 477), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -15), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("typing/stypes.mli", 31, 1480, 1480), ("typing/stypes.mli", 31, 1480, 1518), 0), 0, Tag1 ("Stypes", 11)), 0); (("dump", 478), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12)], (0)), 100000000, 0, -11), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10), 0), 100000000, 0, -9), 0, (("typing/stypes.mli", 32, 1519, 1519), ("typing/stypes.mli", 32, 1519, 1551), 0), 0, Tag1 ("Stypes", 12)), 0); (("get_location", 479), ((Tag1 (0, (Tag3 ((("annotation", 475)), 0, (0)), 100000000, 0, -8), (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0, (("typing/stypes.mli", 34, 1553, 1553), ("typing/stypes.mli", 34, 1553, 1596), 0), 0, Tag1 ("Stypes", 13)), 0); (("get_info", 480), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("annotation", 475)), 0, (0)), 100000000, 0, -4)], (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("typing/stypes.mli", 35, 1597, 1597), ("typing/stypes.mli", 35, 1597, 1635), 0), 0, Tag1 ("Stypes", 14)), 0)], "Stypes", [("Stypes", ("\014\198\148=\222\005\207\207\207\011Q\tfc\ri")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Typedtree", ("c5z\186\175w\146\254\018V\184\031\0038\004\227")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Subst", ("\021\031\148\223\127\186\189\135\027}\145r\216\143\177\156")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Load_path", ("\012@\228l\230\164S\172h\1726X\020\252o}")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("Env", ("\021\n\181\142x\b\169j\227\"\017\248*\178\245\223")); ("Cmi_format", ("6\177\bU\139\"\023\152=\249\135\174\b\011Cg")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216")); ("Annot", ("0|\011\211\236m\250\2065\227u\134c\156\140\234"))], [(0)])
val get_info : unit -> annotation list

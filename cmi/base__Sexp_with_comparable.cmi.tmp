type t = Sexplib0.Sexp.t = Atom of string | List of t list
val hash_fold_t : t Base__Ppx_hash_lib.hash_fold
val hash : t -> Base__Ppx_hash_lib.Std.Hash.hash_value
val t_of_sexp : Sexplib0.Sexp.t -> Sexplib0.Sexp.t
val sexp_of_t : Sexplib0.Sexp.t -> Sexplib0.Sexp.t
exception Not_found_s of Sexplib0.Sexp.t
exception Of_sexp_error of exn * Sexplib0.Sexp.t
val message : string -> (string * Sexplib0.Sexp.t) list -> Sexplib0.Sexp.t
val default_indent : int ref
val pp_hum : Format.formatter -> Sexplib0.Sexp.t -> unit
val pp_hum_indent : int -> Format.formatter -> Sexplib0.Sexp.t -> unit
val pp_mach : Format.formatter -> Sexplib0.Sexp.t -> unit
val pp : Format.formatter -> Sexplib0.Sexp.t -> unit
val to_string_hum : ?indent:int -> Sexplib0.Sexp.t -> string
val to_string_mach : Sexplib0.Sexp.t -> string
val to_string : Sexplib0.Sexp.t -> string
val of_float_style : [ `No_underscores | `Underscores ] ref
val of_int_style : [ `No_underscores | `Underscores ] ref
module Private = Base__Sexp.Private
val t_sexp_grammar : t Sexplib0.Sexp_grammar.t
val invariant : t -> unit
val of_string : unit
val ( >= ) : t -> t -> bool
val ( <= ) : t -> t -> bool
val ( = ) : t -> t -> bool
val ( > ) : t -> t -> bool
val ( < ) : t -> t -> bool
val ( <> ) : t -> t -> bool
val equal : t -> t -> bool
val compare : t -> t -> int
val min : t -> t -> t
val max : t -> t -> t
val ascending : t -> t -> int
val descending : t -> t -> int
val between : t -> low:t -> high:t -> bool
val clamp_exn : t -> min:t -> max:t -> t
val clamp : t -> min:t -> max:t -> t Base__.Or_error.t
type comparator_witness
("DEBUG:rule", [Tag1 (("t", 1721), (0, 0, Tag1 ([(("Atom", 405), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -158)]), 0, (("src/sexp.mli", 3, 56, 58), ("src/sexp.mli", 3, 56, 74), 0), 0, Tag1 ("Base__Sexp", 1)); (("List", 406), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -160)], (0)), 100000000, 0, -159)]), 0, (("src/sexp.mli", 4, 75, 77), ("src/sexp.mli", 4, 75, 93), 0), 0, Tag1 ("Base__Sexp", 2))], 0), 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -157)), 0, 0, 0, 0, (("src/sexp.mli", 2, 29, 29), ("src/sexp.mli", 5, 94, 118), 0), [(("deriving_inline", (("src/sexp.mli", 5, 94, 97), ("src/sexp.mli", 5, 94, 112), 0)), ([([(((("hash"), (("src/sexp.mli", 5, 94, 113), ("src/sexp.mli", 5, 94, 117), 0))), (("src/sexp.mli", 5, 94, 113), ("src/sexp.mli", 5, 94, 117), 0), 0, 0)], (("src/sexp.mli", 5, 94, 113), ("src/sexp.mli", 5, 94, 117), 0))]), (("src/sexp.mli", 5, 94, 94), ("src/sexp.mli", 5, 94, 118), 0))], 0, 0, Tag1 ("Base__Sexp", 0)), 1, 0); (("hash_fold_t", 1722), ((Tag3 (Tag1 ((Tag2 ("Base__Ppx_hash_lib")), "hash_fold"), [(Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -156)], (0)), 100000000, 0, -155), 0, (("src/sexp.mli", 7, 120, 128), ("src/sexp.mli", 7, 120, 168), 0), 0, Tag1 ("Base__Ppx_hash_lib", 4)), 0); (("hash", 1723), ((Tag1 (0, (Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -154), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__Ppx_hash_lib")), "Std"), "Hash"), "hash_value"), 0, (0)), 100000000, 0, -153), 0), 100000000, 0, -152), 0, (("src/sexp.mli", 7, 120, 128), ("src/sexp.mli", 7, 120, 168), 0), 0, Tag1 ("Base__Ppx_hash_lib", 5)), 0); (("t_of_sexp", 1724), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -151), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -150), 0), 100000000, 0, -149), 0, (("src/sexp.mli", 11, 180, 188), ("src/sexp.mli", 11, 180, 247), 0), 0, Tag1 ("Sexplib0__Sexp", 3)), 0); (("sexp_of_t", 1725), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -148), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -147), 0), 100000000, 0, -146), 0, (("src/sexp.mli", 11, 180, 188), ("src/sexp.mli", 11, 180, 247), 0), 0, Tag1 ("Sexplib0__Sexp", 4)), 0); Tag2 (("Not_found_s", 1726), ((Tag3 ("exn", 7)), 0, ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -145)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Sexplib0__Sexp", 7)), 2, 0); Tag2 (("Of_sexp_error", 1727), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -143); (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -144)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Sexplib0__Sexp", 8)), 2, 0); (("message", 1728), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -142), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -140); (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -141)]), 100000000, 0, -139)], (0)), 100000000, 0, -138), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -137), 0), 100000000, 0, -136), 0), 100000000, 0, -135), 0, (("src/sexp.mli", 11, 180, 188), ("src/sexp.mli", 11, 180, 247), 0), 0, Tag1 ("Sexplib0__Sexp", 9)), 0); (("default_indent", 1729), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -134)], (0)), 100000000, 0, -133), 0, (("src/sexp.mli", 11, 180, 188), ("src/sexp.mli", 11, 180, 247), 0), 0, Tag1 ("Sexplib0__Sexp", 10)), 0); (("pp_hum", 1730), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -132), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -131), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -130), 0), 100000000, 0, -129), 0), 100000000, 0, -128), 0, (("src/sexp.mli", 11, 180, 188), ("src/sexp.mli", 11, 180, 247), 0), 0, Tag1 ("Sexplib0__Sexp", 11)), 0); (("pp_hum_indent", 1731), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -127), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -126), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -125), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -124), 0), 100000000, 0, -123), 0), 100000000, 0, -122), 0), 100000000, 0, -121), 0, (("src/sexp.mli", 11, 180, 188), ("src/sexp.mli", 11, 180, 247), 0), 0, Tag1 ("Sexplib0__Sexp", 12)), 0); (("pp_mach", 1732), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -120), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -119), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -118), 0), 100000000, 0, -117), 0), 100000000, 0, -116), 0, (("src/sexp.mli", 11, 180, 188), ("src/sexp.mli", 11, 180, 247), 0), 0, Tag1 ("Sexplib0__Sexp", 13)), 0); (("pp", 1733), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -115), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -114), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -113), 0), 100000000, 0, -112), 0), 100000000, 0, -111), 0, (("src/sexp.mli", 11, 180, 188), ("src/sexp.mli", 11, 180, 247), 0), 0, Tag1 ("Sexplib0__Sexp", 14)), 0); (("to_string_hum", 1734), ((Tag1 (Tag1 ("indent"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -110)], (0)), 100000000, 0, -109), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -108), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -107), 0), 100000000, 0, -106), 0), 100000000, 0, -105), 0, (("src/sexp.mli", 11, 180, 188), ("src/sexp.mli", 11, 180, 247), 0), 0, Tag1 ("Sexplib0__Sexp", 15)), 0); (("to_string_mach", 1735), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -104), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -103), 0), 100000000, 0, -102), 0, (("src/sexp.mli", 11, 180, 188), ("src/sexp.mli", 11, 180, 247), 0), 0, Tag1 ("Sexplib0__Sexp", 16)), 0); (("to_string", 1736), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -101), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -100), 0), 100000000, 0, -99), 0, (("src/sexp.mli", 11, 180, 188), ("src/sexp.mli", 11, 180, 247), 0), 0, Tag1 ("Sexplib0__Sexp", 17)), 0); (("of_float_style", 1737), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag8 (([("No_underscores", (0)); ("Underscores", (0))], (0, 100000000, 0, -98), 1, 0, 0)), 100000000, 0, -97)], (0)), 100000000, 0, -96), 0, (("src/sexp.mli", 11, 180, 188), ("src/sexp.mli", 11, 180, 247), 0), 0, Tag1 ("Sexplib0__Sexp", 18)), 0); (("of_int_style", 1738), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag8 (([("No_underscores", (0)); ("Underscores", (0))], (0, 100000000, 0, -95), 1, 0, 0)), 100000000, 0, -94)], (0)), 100000000, 0, -93), 0, (("src/sexp.mli", 11, 180, 188), ("src/sexp.mli", 11, 180, 247), 0), 0, Tag1 ("Sexplib0__Sexp", 19)), 0); Tag3 (("Private", 1739), 1, (Tag3 (Tag1 ((Tag2 ("Base__Sexp")), "Private")), 0, (("src/sexp.mli", 11, 180, 188), ("src/sexp.mli", 11, 180, 247), 0), Tag1 ("Sexplib0__Sexp", 29)), 0, 0); (("t_sexp_grammar", 1740), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -92)], (0)), 100000000, 0, -91), 0, (("src/sexp.mli", 13, 249, 249), ("src/sexp.mli", 13, 249, 295), 0), 0, Tag1 ("Base__Sexp", 6)), 0); (("invariant", 1741), ((Tag1 (0, (Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -90), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -89), 0), 100000000, 0, -88), 0, (("src/sexp.mli", 15, 297, 297), ("src/sexp.mli", 15, 297, 322), 0), 0, Tag1 ("Base__Sexp", 7)), 0); (("of_string", 1742), ((Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -87), 0, (("src/sexp.mli", 20, 584, 584), ("src/sexp.mli", 21, 605, 675), 0), [(("deprecated", (("src/sexp.mli", 21, 605, 608), ("src/sexp.mli", 21, 605, 618), 0)), ([([(Tag1 (Tag2 ("[since 2018-02] Use [Parsexp.Single.parse_string_exn]", (("src/sexp.mli", 21, 605, 620), ("src/sexp.mli", 21, 605, 673), 0), 0)), (("src/sexp.mli", 21, 605, 619), ("src/sexp.mli", 21, 605, 674), 0), 0, 0)], (("src/sexp.mli", 21, 605, 619), ("src/sexp.mli", 21, 605, 674), 0))]), (("src/sexp.mli", 21, 605, 605), ("src/sexp.mli", 21, 605, 675), 0))], Tag1 ("Base__Sexp", 8)), 0); ((">=", 1743), ((Tag1 (0, (Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -86), (Tag1 (0, (Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -85), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -84), 0), 100000000, 0, -83), 0), 100000000, 0, -82), 0, (("src/sexp_with_comparable.mli", 9, 174, 182), ("src/sexp_with_comparable.mli", 9, 174, 211), 0), 0, Tag1 ("Base__Comparisons", 1)), 0); (("<=", 1744), ((Tag1 (0, (Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -81), (Tag1 (0, (Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -80), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -79), 0), 100000000, 0, -78), 0), 100000000, 0, -77), 0, (("src/sexp_with_comparable.mli", 9, 174, 182), ("src/sexp_with_comparable.mli", 9, 174, 211), 0), 0, Tag1 ("Base__Comparisons", 2)), 0); (("=", 1745), ((Tag1 (0, (Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -76), (Tag1 (0, (Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -75), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -74), 0), 100000000, 0, -73), 0), 100000000, 0, -72), 0, (("src/sexp_with_comparable.mli", 9, 174, 182), ("src/sexp_with_comparable.mli", 9, 174, 211), 0), 0, Tag1 ("Base__Comparisons", 3)), 0); ((">", 1746), ((Tag1 (0, (Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -71), (Tag1 (0, (Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -70), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -69), 0), 100000000, 0, -68), 0), 100000000, 0, -67), 0, (("src/sexp_with_comparable.mli", 9, 174, 182), ("src/sexp_with_comparable.mli", 9, 174, 211), 0), 0, Tag1 ("Base__Comparisons", 4)), 0); (("<", 1747), ((Tag1 (0, (Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -66), (Tag1 (0, (Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -65), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -64), 0), 100000000, 0, -63), 0), 100000000, 0, -62), 0, (("src/sexp_with_comparable.mli", 9, 174, 182), ("src/sexp_with_comparable.mli", 9, 174, 211), 0), 0, Tag1 ("Base__Comparisons", 5)), 0); (("<>", 1748), ((Tag1 (0, (Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -61), (Tag1 (0, (Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -60), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -59), 0), 100000000, 0, -58), 0), 100000000, 0, -57), 0, (("src/sexp_with_comparable.mli", 9, 174, 182), ("src/sexp_with_comparable.mli", 9, 174, 211), 0), 0, Tag1 ("Base__Comparisons", 6)), 0); (("equal", 1749), ((Tag1 (0, (Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -56), (Tag1 (0, (Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -55), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52), 0, (("src/sexp_with_comparable.mli", 9, 174, 182), ("src/sexp_with_comparable.mli", 9, 174, 211), 0), 0, Tag1 ("Base__Comparisons", 8)), 0); (("compare", 1750), ((Tag1 (0, (Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -51), (Tag1 (0, (Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -50), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -49), 0), 100000000, 0, -48), 0), 100000000, 0, -47), 0, (("src/sexp_with_comparable.mli", 9, 174, 182), ("src/sexp_with_comparable.mli", 9, 174, 211), 0), 0, Tag1 ("Base__Comparisons", 9)), 0); (("min", 1751), ((Tag1 (0, (Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -46), (Tag1 (0, (Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -45), (Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -44), 0), 100000000, 0, -43), 0), 100000000, 0, -42), 0, (("src/sexp_with_comparable.mli", 9, 174, 182), ("src/sexp_with_comparable.mli", 9, 174, 211), 0), 0, Tag1 ("Base__Comparisons", 10)), 0); (("max", 1752), ((Tag1 (0, (Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -41), (Tag1 (0, (Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -40), (Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -39), 0), 100000000, 0, -38), 0), 100000000, 0, -37), 0, (("src/sexp_with_comparable.mli", 9, 174, 182), ("src/sexp_with_comparable.mli", 9, 174, 211), 0), 0, Tag1 ("Base__Comparisons", 11)), 0); (("ascending", 1753), ((Tag1 (0, (Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -36), (Tag1 (0, (Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -35), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -34), 0), 100000000, 0, -33), 0), 100000000, 0, -32), 0, (("src/sexp_with_comparable.mli", 9, 174, 182), ("src/sexp_with_comparable.mli", 9, 174, 211), 0), 0, Tag1 ("Base__Comparable_intf", 19)), 0); (("descending", 1754), ((Tag1 (0, (Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -31), (Tag1 (0, (Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -30), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -29), 0), 100000000, 0, -28), 0), 100000000, 0, -27), 0, (("src/sexp_with_comparable.mli", 9, 174, 182), ("src/sexp_with_comparable.mli", 9, 174, 211), 0), 0, Tag1 ("Base__Comparable_intf", 20)), 0); (("between", 1755), ((Tag1 (0, (Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -26), (Tag1 (("low"), (Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -25), (Tag1 (("high"), (Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -24), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -23), 0), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("src/sexp_with_comparable.mli", 9, 174, 182), ("src/sexp_with_comparable.mli", 9, 174, 211), 0), 0, Tag1 ("Base__Comparable_intf", 21)), 0); (("clamp_exn", 1756), ((Tag1 (0, (Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -19), (Tag1 (("min"), (Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -18), (Tag1 (("max"), (Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -17), (Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -16), 0), 100000000, 0, -15), 0), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("src/sexp_with_comparable.mli", 9, 174, 182), ("src/sexp_with_comparable.mli", 9, 174, 211), 0), 0, Tag1 ("Base__Comparable_intf", 22)), 0); (("clamp", 1757), ((Tag1 (0, (Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -12), (Tag1 (("min"), (Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -11), (Tag1 (("max"), (Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -10), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -9)], (0)), 100000000, 0, -8), 0), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("src/sexp_with_comparable.mli", 9, 174, 182), ("src/sexp_with_comparable.mli", 9, 174, 211), 0), 0, Tag1 ("Base__Comparable_intf", 23)), 0); Tag1 (("comparator_witness", 1758), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/sexp_with_comparable.mli", 9, 174, 182), ("src/sexp_with_comparable.mli", 9, 174, 211), 0), 0, 0, 0, Tag1 ("Base__Comparator", 5)), 1, 0); (("comparator", 1759), ((Tag3 (Tag1 ((Tag2 ("Base__Comparator")), "comparator"), [(Tag3 ((("t", 1721)), 0, (0)), 100000000, 0, -3); (Tag3 ((("comparator_witness", 1758)), 0, (0)), 100000000, 0, -4)], (0)), 100000000, 0, -2), 0, (("src/sexp_with_comparable.mli", 9, 174, 182), ("src/sexp_with_comparable.mli", 9, 174, 211), 0), 0, Tag1 ("Base__Comparator", 6)), 0)], "Base__Sexp_with_comparable", [("Base__Sexp_with_comparable", ("\171\173\137y\1855\006y\146\248\141@@\191[W")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__StringLabels", ("\134F\024\226\216Is#\223\230\234\169Z\206Gc")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__ListLabels", ("*\194\012\191\020%\170\249m\002\180\178hk\205\220")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("Sexplib0__Sexpable", ("\251${\207(\249/z\242\255\250^\141\156\210e")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv_error", ("kzv!\151~\198P\000\165\176d\007\251p\232")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Base__T", ("+t\159\169\027\152\205\235\003\237\133\177\024\n6'")); ("Base__Sys0", ("\206z\231\154s\\\136\2364\131\005\014\031\152m3")); ("Base__String0", ("\212\221L\220\245\255\162P\228\224\189\216\135H\149O")); ("Base__Source_code_position0", ("_\003P6\254\029\206\005\130\136\180\019\145\230\000M")); ("Base__Sign0", ("\152\138\204\175\244\128J\165\221\165\160\150y\1305i")); ("Base__Sexp", ("\154\187\171&\209=\153[\236\250!U\174`\190T")); ("Base__Result", ("\204|\215\173FMa\2511<&\215T\194$\228")); ("Base__Printf", ("\000\196c,\214\127\226\174\220\190\253z!\242\028\250")); ("Base__Ppx_hash_lib", ("\199\141\178\193\006\209L\007^\020(\131\224sn8")); ("Base__Ppx_compare_lib", ("\243\186~\233\228\199Ah\181.\223\004e\231\129S")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Or_error", ("\193\133)\bO\210\2517\168*\203\148\143\200\127\177")); ("Base__Monad_intf", ("\208\203\163\152\184O\130?\012:\168\247}\018\253\155")); ("Base__Monad", ("!\244\168\2352=\137Lm\219\129K\216\199\145\\")); ("Base__Lazy", ("@`\165\196 \235)\136ANe:p\169$\185")); ("Base__Invariant_intf", ("\213\204\238\235\236[\198\145\028\2392\015\243\177S\249")); ("Base__Invariant", ("\135\153\136\\\129SD\228\202l\255\152\139\253\015\201")); ("Base__Int0", ("N\1310\012\227\254\000\255_\222!\018\016\003\1779")); ("Base__Info_intf", ("\184\209'\173\251\219\167X|v\188]\190o5X")); ("Base__Info", ("-\011\149\203\248\030\2301\1907\1630\189\128\209\170")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Import", ("\014\187\247\141\187\181\142g\176:s_,\181\219\209")); ("Base__Hash_intf", ("h\004P\218\1531G\127\212\208A\024\140\164iq")); ("Base__Hash", ("\206Rc\194\234{s3\248\165\024\162\203{\206\206")); ("Base__Globalize", ("<\243w~.\180\196t\159\193\174[\227\139\215G")); ("Base__Formatter", ("\193\149\030\140\154\1505b\162a`%\243\185'%")); ("Base__Field", ("8In\234X\202\188G\186\208$\192\175\136\214v")); ("Base__Error", ("\199\218\231n\155/\159\156\146\247\148t\237\003\t\153")); ("Base__Either0", ("!9-\011n\2077eZ\212\031c\227\029\206\t")); ("Base__Comparisons", ("\196\196Y\"{\163~)\\G/\155:\004\141;")); ("Base__Comparator", ("\002\135z7b\025&\207\t\188\239&U3R\167")); ("Base__Comparable_intf", ("\252n\002\221\246\143r\235oJ\240\151\202\211\161\254")); ("Base__Comparable", (":\134'\156u#\215\225\129\191\162\229\200\185l\012")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__Applicative_intf", ("J\176\203\159\235N(\235\027\232\198+\224\205*A")); ("Base__Applicative", ("\157\024\176\241a\165\204\133\003s3\214\007\131\244\n")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158"))], [(0)])
val comparator : (t, comparator_witness) Base__Comparator.comparator

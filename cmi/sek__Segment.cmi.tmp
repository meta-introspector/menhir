val is_valid : 'a Sek__.PublicTypeAbbreviations.segment -> bool
val is_empty : 'a Sek__.PublicTypeAbbreviations.segment -> bool
val iter :
  Sek__.PrivateSignatures.pov ->
  'a Sek__.PublicTypeAbbreviations.segment -> ('a -> unit) -> unit
val iter2 :
  Sek__.PrivateSignatures.pov ->
  'a Sek__.PublicTypeAbbreviations.segment ->
  ("DEBUG:rule", [(("is_valid", 324), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "segment"), [((("a")), 100000000, 0, -31)], (0)), 100000000, 0, -30), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("src/Segment.mli", 19, 1178, 1178), ("src/Segment.mli", 19, 1178, 1211), 0), 0, Tag1 ("Sek__Segment", 0)), 0); (("is_empty", 325), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "segment"), [((("a")), 100000000, 0, -27)], (0)), 100000000, 0, -26), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("src/Segment.mli", 22, 1288, 1288), ("src/Segment.mli", 22, 1288, 1321), 0), 0, Tag1 ("Sek__Segment", 1)), 0); (("iter", 326), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PrivateSignatures"), "pov"), 0, (0)), 100000000, 0, -23), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "segment"), [((("a")), 100000000, 0, -21)], (0)), 100000000, 0, -22), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -21), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -20), 0), 100000000, 0, -19), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0), 100000000, 0, -15), 0, (("src/Segment.mli", 27, 1496, 1496), ("src/Segment.mli", 27, 1496, 1548), 0), 0, Tag1 ("Sek__Segment", 2)), 0); (("iter2", 327), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PrivateSignatures"), "pov"), 0, (0)), 100000000, 0, -14), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "segment"), [((("a")), 100000000, 0, -11)], (0)), 100000000, 0, -13), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "segment"), [((("b")), 100000000, 0, -10)], (0)), 100000000, 0, -12), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -11), (Tag1 (0, ((("b")), 100000000, 0, -10), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0), 100000000, 0, -7), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/Segment.mli", 33, 1824, 1824), ("src/Segment.mli", 33, 1824, 1897), 0), 0, Tag1 ("Sek__Segment", 3)), 0)], "Sek__Segment", [("Sek__Segment", ("\149\150\250\224\226\138l\247\204|\226.$7NB")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sek__PublicTypeAbbreviations", ("\201\251\244\167\199\157\227\233\251\227b\132\146]>\232")); ("Sek__PrivateSignatures", ("\187[j\006\197\232[2-\184F\232V~a\184")); ("Sek__Owner", ("\228~\155T\164\209\210ZNr\165\246\165\216\130-")); ("Sek__", ("b\188\017\179d|~L\019\214\028\188\145y\210\250")); ("PPrintEngine", ("V_\162\193\202\031c\185\nQ\232bL\0299\195")); ("PPrint", ("a\179\180\0030=\b^\136P\234\220\171\0210A")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
'b Sek__.PublicTypeAbbreviations.segment -> ('a -> 'b -> unit) -> unit

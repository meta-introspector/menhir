type t
type re
module Group :
  sig
    type t
    val get : t -> int -> string
    val get_opt : t -> int -> string option
    val offset : t -> int -> int * int
    val start : t -> int -> int
    val stop : t -> int -> int
    val all : t -> string array
    val all_offset : t -> (int * int) array
    val test : t -> int -> bool
    val nb_groups : t -> int
    val pp : Format.formatter -> t -> unit
  end
type groups = Group.t
val compile : t -> re
val group_count : re -> int
val group_names : re -> (string * int) list
val exec : ?pos:int -> ?len:int -> re -> string -> Group.t
val exec_opt : ?pos:int -> ?len:int -> re -> string -> Group.t option
val execp : ?pos:int -> ?len:int -> re -> string -> bool
val exec_partial :
  ?pos:int -> ?len:int -> re -> string -> [ `Full | `Mismatch | `Partial ]
val exec_partial_detailed :
  ?pos:int ->
  ?len:int ->
  re -> string -> [ `Full of Group.t | `Mismatch | `Partial of int ]
module Mark :
  sig
    type t
    val test : Group.t -> t -> bool
    module Set :
      sig
        type elt = t
        type t
        val empty : t
        val add : elt -> t -> t
        val singleton : elt -> t
        val remove : elt -> t -> t
        val union : t -> t -> t
        val inter : t -> t -> t
        val disjoint : t -> t -> bool
        val diff : t -> t -> t
        val cardinal : t -> int
        val elements : t -> elt list
        val min_elt : t -> elt
        val min_elt_opt : t -> elt option
        val max_elt : t -> elt
        val max_elt_opt : t -> elt option
        val choose : t -> elt
        val choose_opt : t -> elt option
        val find : elt -> t -> elt
        val find_opt : elt -> t -> elt option
        val find_first : (elt -> bool) -> t -> elt
        val find_first_opt : (elt -> bool) -> t -> elt option
        val find_last : (elt -> bool) -> t -> elt
        val find_last_opt : (elt -> bool) -> t -> elt option
        val iter : (elt -> unit) -> t -> unit
        val fold : (elt -> 'acc -> 'acc) -> t -> 'acc -> 'acc
        val map : (elt -> elt) -> t -> t
        val filter : (elt -> bool) -> t -> t
        val filter_map : (elt -> elt option) -> t -> t
        val partition : (elt -> bool) -> t -> t * t
        val split : elt -> t -> t * bool * t
        val is_empty : t -> bool
        val mem : elt -> t -> bool
        val equal : t -> t -> bool
        val compare : t -> t -> int
        val subset : t -> t -> bool
        val for_all : (elt -> bool) -> t -> bool
        val exists : (elt -> bool) -> t -> bool
        val to_list : t -> elt list
        val of_list : elt list -> t
        val to_seq_from : elt -> t -> elt Seq.t
        val to_seq : t -> elt Seq.t
        val to_rev_seq : t -> elt Seq.t
        val add_seq : elt Seq.t -> t -> t
        val of_seq : elt Seq.t -> t
      end
    val all : Group.t -> Set.t
    val equal : t -> t -> bool
    val compare : t -> t -> int
  end
type split_token = [ `Delim of Group.t | `Text of string ]
val all : ?pos:int -> ?len:int -> re -> string -> Group.t list
type 'a gen = unit -> 'a option
val all_gen : ?pos:int -> ?len:int -> re -> string -> Group.t gen
val all_seq : ?pos:int -> ?len:int -> re -> string -> Group.t Seq.t
val matches : ?pos:int -> ?len:int -> re -> string -> string list
val matches_gen : ?pos:int -> ?len:int -> re -> string -> string gen
val matches_seq : ?pos:int -> ?len:int -> re -> string -> string Seq.t
val split : ?pos:int -> ?len:int -> re -> string -> string list
val split_gen : ?pos:int -> ?len:int -> re -> string -> string gen
val split_seq : ?pos:int -> ?len:int -> re -> string -> string Seq.t
val split_full : ?pos:int -> ?len:int -> re -> string -> split_token list
val split_full_gen : ?pos:int -> ?len:int -> re -> string -> split_token gen
val split_full_seq :
  ?pos:int -> ?len:int -> re -> string -> split_token Seq.t
module Seq :
  sig
    val all : ?pos:int -> ?len:int -> re -> string -> Group.t Seq.t
    val matches : ?pos:int -> ?len:int -> re -> string -> string Seq.t
    val split : ?pos:int -> ?len:int -> re -> string -> string Seq.t
    val split_full :
      ?pos:int -> ?len:int -> re -> string -> split_token Seq.t
  end
val replace :
  ?pos:int ->
  ?len:int -> ?all:bool -> re -> f:(Group.t -> string) -> string -> string
val replace_string :
  ?pos:int -> ?len:int -> ?all:bool -> re -> by:string -> string -> string
val str : string -> t
val char : char -> t
val alt : t list -> t
val seq : t list -> t
val empty : t
val epsilon : t
val rep : t -> t
val rep1 : t -> t
val repn : t -> int -> int option -> t
val opt : t -> t
val bol : t
val eol : t
val bow : t
val eow : t
val bos : t
val eos : t
val leol : t
val start : t
val stop : t
val word : t -> t
val not_boundary : t
val whole_string : t -> t
val longest : t -> t
val shortest : t -> t
val first : t -> t
val greedy : t -> t
val non_greedy : t -> t
val group : ?name:string -> t -> t
val no_group : t -> t
val nest : t -> t
val mark : t -> Mark.t * t
val set : string -> t
val rg : char -> char -> t
val inter : t list -> t
val diff : t -> t -> t
val compl : t list -> t
val any : t
val notnl : t
val alnum : t
val wordc : t
val alpha : t
val ascii : t
val blank : t
val cntrl : t
val digit : t
val graph : t
val lower : t
val print : t
val punct : t
val space : t
val upper : t
val xdigit : t
val case : t -> t
val no_case : t -> t
val pp : Format.formatter -> t -> unit
val pp_re : Format.formatter -> re -> unit
val print_re : Format.formatter -> re -> unit
module View :
  sig
    type t =
        Set of Re__.Cset.t
      | Sequence of t/2 list
      | Alternative of t/2 list
      | Repeat of t/2 * int * int option
      | Beg_of_line
      | End_of_line
      | Beg_of_word
      | End_of_word
      | Not_bound
      | Beg_of_str
      | End_of_str
      | Last_end_of_line
      | Start
      | Stop
      | Sem of Re__.Automata.sem * t/2
      | Sem_greedy of Re__.Automata.rep_kind * t/2
      | Group of string option * t/2
      | No_group of t/2
      | Nest of t/2
      | Case of t/2
      | No_case of t/2
      | Intersection of t/2 list
      | Complement of t/2 list
      | Difference of t/2 * t/2
      | Pmark of Re__.Pmark.t * t/2
    val view : t/2 -> t
  end
val witness : t -> string
type substrings = Group.t
val get : Group.t -> int -> string
val get_ofs : Group.t -> int -> int * int
val get_all : Group.t -> string array
val get_all_ofs : Group.t -> (int * int) array
val test : Group.t -> int -> bool
type markid = Mark.t
val marked : Group.t -> Mark.t -> bool("DEBUG:rule", [Tag1 (("t", 953), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("lib/core.mli", 26, 1004, 1004), ("lib/core.mli", 26, 1004, 1010), 0), 0, 0, 0, Tag1 ("Re__Core", 0)), 1, 0); Tag1 (("re", 954), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("lib/core.mli", 29, 1038, 1038), ("lib/core.mli", 29, 1038, 1045), 0), 0, 0, 0, Tag1 ("Re__Core", 1)), 1, 0); Tag3 (("Group", 955), 0, (Tag1 ([Tag1 (("t", 1051), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("lib/core.mli", 34, 1136, 1138), ("lib/core.mli", 34, 1136, 1144), 0), 0, 0, 0, Tag1 ("Re__Core", 2)), 1, 0); (("get", 1052), ((Tag1 (0, (Tag3 ((("t", 1051)), 0, (0)), 100000000, 0, -490), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -489), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -488), 0), 100000000, 0, -487), 0), 100000000, 0, -486), 0, (("lib/core.mli", 39, 1331, 1333), ("lib/core.mli", 39, 1331, 1361), 0), 0, Tag1 ("Re__Core", 3)), 0); (("get_opt", 1053), ((Tag1 (0, (Tag3 ((("t", 1051)), 0, (0)), 100000000, 0, -485), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -484), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -483)], (0)), 100000000, 0, -482), 0), 100000000, 0, -481), 0), 100000000, 0, -480), 0, (("lib/core.mli", 42, 1417, 1419), ("lib/core.mli", 42, 1417, 1458), 0), 0, Tag1 ("Re__Core", 4)), 0); (("offset", 1054), ((Tag1 (0, (Tag3 ((("t", 1051)), 0, (0)), 100000000, 0, -479), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -478), (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -476); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -477)]), 100000000, 0, -475), 0), 100000000, 0, -474), 0), 100000000, 0, -473), 0, (("lib/core.mli", 45, 1541, 1543), ("lib/core.mli", 45, 1541, 1577), 0), 0, Tag1 ("Re__Core", 5)), 0); (("start", 1055), ((Tag1 (0, (Tag3 ((("t", 1051)), 0, (0)), 100000000, 0, -472), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -471), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -470), 0), 100000000, 0, -469), 0), 100000000, 0, -468), 0, (("lib/core.mli", 48, 1633, 1635), ("lib/core.mli", 48, 1633, 1662), 0), 0, Tag1 ("Re__Core", 6)), 0); (("stop", 1056), ((Tag1 (0, (Tag3 ((("t", 1051)), 0, (0)), 100000000, 0, -467), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -466), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -465), 0), 100000000, 0, -464), 0), 100000000, 0, -463), 0, (("lib/core.mli", 51, 1750, 1752), ("lib/core.mli", 51, 1750, 1778), 0), 0, Tag1 ("Re__Core", 7)), 0); (("all", 1057), ((Tag1 (0, (Tag3 ((("t", 1051)), 0, (0)), 100000000, 0, -462), (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -461)], (0)), 100000000, 0, -460), 0), 100000000, 0, -459), 0, (("lib/core.mli", 54, 1864, 1866), ("lib/core.mli", 54, 1864, 1893), 0), 0, Tag1 ("Re__Core", 8)), 0); (("all_offset", 1058), ((Tag1 (0, (Tag3 ((("t", 1051)), 0, (0)), 100000000, 0, -458), (Tag3 ((Tag3 ("array", 8)), [(Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -456); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -457)]), 100000000, 0, -455)], (0)), 100000000, 0, -454), 0), 100000000, 0, -453), 0, (("lib/core.mli", 57, 1963, 1965), ("lib/core.mli", 57, 1963, 2004), 0), 0, Tag1 ("Re__Core", 9)), 0); (("test", 1059), ((Tag1 (0, (Tag3 ((("t", 1051)), 0, (0)), 100000000, 0, -452), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -451), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -450), 0), 100000000, 0, -449), 0), 100000000, 0, -448), 0, (("lib/core.mli", 60, 2067, 2069), ("lib/core.mli", 60, 2067, 2096), 0), 0, Tag1 ("Re__Core", 10)), 0); (("nb_groups", 1060), ((Tag1 (0, (Tag3 ((("t", 1051)), 0, (0)), 100000000, 0, -447), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -446), 0), 100000000, 0, -445), 0, (("lib/core.mli", 63, 2136, 2138), ("lib/core.mli", 63, 2136, 2162), 0), 0, Tag1 ("Re__Core", 11)), 0); (("pp", 1061), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -444), (Tag1 (0, (Tag3 ((("t", 1051)), 0, (0)), 100000000, 0, -443), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -442), 0), 100000000, 0, -441), 0), 100000000, 0, -440), 0, (("lib/core.mli", 67, 2271, 2273), ("lib/core.mli", 67, 2271, 2311), 0), 0, Tag1 ("Re__Core", 12)), 0)]), 0, (("lib/core.mli", 33, 1117, 1117), ("lib/core.mli", 68, 2312, 2315), 0), Tag1 ("Re__Core", 13)), 0, 0); Tag1 (("groups", 956), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Group", 955)), "t"), 0, (0)), 100000000, 0, -439)), 0, 0, 0, 0, (("lib/core.mli", 69, 2316, 2316), ("lib/core.mli", 69, 2316, 2372), 0), [(("ocaml.deprecated", (("lib/core.mli", 69, 2316, 2341), ("lib/core.mli", 69, 2316, 2357), 0)), ([([(Tag1 (Tag2 ("Use Group.t", (("lib/core.mli", 69, 2316, 2359), ("lib/core.mli", 69, 2316, 2370), 0), 0)), (("lib/core.mli", 69, 2316, 2358), ("lib/core.mli", 69, 2316, 2371), 0), 0, 0)], (("lib/core.mli", 69, 2316, 2358), ("lib/core.mli", 69, 2316, 2371), 0))]), (("lib/core.mli", 69, 2316, 2338), ("lib/core.mli", 69, 2316, 2372), 0))], 0, 0, Tag1 ("Re__Core", 14)), 1, 0); (("compile", 957), ((Tag1 (0, (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -438), (Tag3 ((("re", 954)), 0, (0)), 100000000, 0, -437), 0), 100000000, 0, -436), 0, (("lib/core.mli", 73, 2436, 2436), ("lib/core.mli", 73, 2436, 2457), 0), 0, Tag1 ("Re__Core", 15)), 0); (("group_count", 958), ((Tag1 (0, (Tag3 ((("re", 954)), 0, (0)), 100000000, 0, -435), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -434), 0), 100000000, 0, -433), 0, (("lib/core.mli", 77, 2580, 2580), ("lib/core.mli", 77, 2580, 2607), 0), 0, Tag1 ("Re__Core", 16)), 0); (("group_names", 959), ((Tag1 (0, (Tag3 ((("re", 954)), 0, (0)), 100000000, 0, -432), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -430); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -431)]), 100000000, 0, -429)], (0)), 100000000, 0, -428), 0), 100000000, 0, -427), 0, (("lib/core.mli", 81, 2712, 2712), ("lib/core.mli", 81, 2712, 2755), 0), 0, Tag1 ("Re__Core", 17)), 0); (("exec", 960), ((Tag1 (Tag1 ("pos"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -426)], (0)), 100000000, 0, -425), (Tag1 (Tag1 ("len"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -424)], (0)), 100000000, 0, -423), (Tag1 (0, (Tag3 ((("re", 954)), 0, (0)), 100000000, 0, -422), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -421), (Tag3 (Tag1 ((("Group", 955)), "t"), 0, (0)), 100000000, 0, -420), 0), 100000000, 0, -419), 0), 100000000, 0, -418), 0), 100000000, 0, -417), 0), 100000000, 0, -416), 0, (("lib/core.mli", 84, 2810, 2810), ("lib/core.mli", 87, 2914, 2939), 0), 0, Tag1 ("Re__Core", 18)), 0); (("exec_opt", 961), ((Tag1 (Tag1 ("pos"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -415)], (0)), 100000000, 0, -414), (Tag1 (Tag1 ("len"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -413)], (0)), 100000000, 0, -412), (Tag1 (0, (Tag3 ((("re", 954)), 0, (0)), 100000000, 0, -411), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -410), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Group", 955)), "t"), 0, (0)), 100000000, 0, -409)], (0)), 100000000, 0, -408), 0), 100000000, 0, -407), 0), 100000000, 0, -406), 0), 100000000, 0, -405), 0), 100000000, 0, -404), 0, (("lib/core.mli", 118, 3923, 3923), ("lib/core.mli", 121, 4031, 4063), 0), 0, Tag1 ("Re__Core", 19)), 0); (("execp", 962), ((Tag1 (Tag1 ("pos"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -403)], (0)), 100000000, 0, -402), (Tag1 (Tag1 ("len"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -401)], (0)), 100000000, 0, -400), (Tag1 (0, (Tag3 ((("re", 954)), 0, (0)), 100000000, 0, -399), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -398), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -397), 0), 100000000, 0, -396), 0), 100000000, 0, -395), 0), 100000000, 0, -394), 0), 100000000, 0, -393), 0, (("lib/core.mli", 140, 4557, 4557), ("lib/core.mli", 143, 4662, 4684), 0), 0, Tag1 ("Re__Core", 20)), 0); (("exec_partial", 963), ((Tag1 (Tag1 ("pos"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -392)], (0)), 100000000, 0, -391), (Tag1 (Tag1 ("len"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -390)], (0)), 100000000, 0, -389), (Tag1 (0, (Tag3 ((("re", 954)), 0, (0)), 100000000, 0, -388), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -387), (Tag8 (([("Full", (0)); ("Mismatch", (0)); ("Partial", (0))], (0, 100000000, 0, -386), 1, 0, 0)), 100000000, 0, -385), 0), 100000000, 0, -384), 0), 100000000, 0, -383), 0), 100000000, 0, -382), 0), 100000000, 0, -381), 0, (("lib/core.mli", 161, 5175, 5175), ("lib/core.mli", 164, 5287, 5337), 0), 0, Tag1 ("Re__Core", 21)), 0); (("exec_partial_detailed", 964), ((Tag1 (Tag1 ("pos"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -380)], (0)), 100000000, 0, -379), (Tag1 (Tag1 ("len"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -378)], (0)), 100000000, 0, -377), (Tag1 (0, (Tag3 ((("re", 954)), 0, (0)), 100000000, 0, -376), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -375), (Tag8 (([("Full", (((Tag3 (Tag1 ((("Group", 955)), "t"), 0, (0)), 100000000, 0, -374)))); ("Mismatch", (0)); ("Partial", (((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -373))))], (0, 100000000, 0, -372), 1, 0, 0)), 100000000, 0, -371), 0), 100000000, 0, -370), 0), 100000000, 0, -369), 0), 100000000, 0, -368), 0), 100000000, 0, -367), 0, (("lib/core.mli", 188, 6121, 6121), ("lib/core.mli", 191, 6242, 6310), 0), 0, Tag1 ("Re__Core", 22)), 0); Tag3 (("Mark", 965), 0, (Tag1 ([Tag1 (("t", 1062), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("lib/core.mli", 203, 6820, 6822), ("lib/core.mli", 203, 6820, 6828), 0), 0, 0, 0, Tag1 ("Re__Core", 23)), 1, 0); (("test", 1063), ((Tag1 (0, (Tag3 (Tag1 ((("Group", 955)), "t"), 0, (0)), 100000000, 0, -508), (Tag1 (0, (Tag3 ((("t", 1062)), 0, (0)), 100000000, 0, -507), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -506), 0), 100000000, 0, -505), 0), 100000000, 0, -504), 0, (("lib/core.mli", 206, 6847, 6849), ("lib/core.mli", 206, 6847, 6880), 0), 0, Tag1 ("Re__Core", 24)), 0); Tag3 (("Set", 1064), 0, (Tag1 ([Tag1 (("elt", 1068), (0, 0, 0, 1, ((Tag3 ((("t", 1062)), 0, (0)), 100000000, 0, -735)), 0, 0, 0, 0, (("lib/core.mli", 209, 6919, 6945), ("lib/core.mli", 209, 6919, 6957), 0), 0, 0, 0, Tag1 ("Re__Core", 25)), 1, 0); Tag1 (("t", 1069), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("set.mli", 74, 2901, 2905), ("set.mli", 74, 2901, 2911), 0), 0, 0, 0, Tag1 ("Stdlib__Set", 4)), 1, 0); (("empty", 1070), ((Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -734), 0, (("set.mli", 77, 2942, 2946), ("set.mli", 77, 2942, 2958), 0), 0, Tag1 ("Stdlib__Set", 5)), 0); (("add", 1071), ((Tag1 (0, (Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -733), (Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -732), (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -731), 0), 100000000, 0, -730), 0), 100000000, 0, -729), 0, (("set.mli", 80, 2986, 2990), ("set.mli", 80, 2986, 3012), 0), 0, Tag1 ("Stdlib__Set", 6)), 0); (("singleton", 1072), ((Tag1 (0, (Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -728), (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -727), 0), 100000000, 0, -726), 0, (("set.mli", 86, 3278, 3282), ("set.mli", 86, 3278, 3305), 0), 0, Tag1 ("Stdlib__Set", 7)), 0); (("remove", 1073), ((Tag1 (0, (Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -725), (Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -724), (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -723), 0), 100000000, 0, -722), 0), 100000000, 0, -721), 0, (("set.mli", 89, 3381, 3385), ("set.mli", 89, 3381, 3410), 0), 0, Tag1 ("Stdlib__Set", 8)), 0); (("union", 1074), ((Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -720), (Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -719), (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -718), 0), 100000000, 0, -717), 0), 100000000, 0, -716), 0, (("set.mli", 95, 3677, 3681), ("set.mli", 95, 3677, 3703), 0), 0, Tag1 ("Stdlib__Set", 9)), 0); (("inter", 1075), ((Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -715), (Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -714), (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -713), 0), 100000000, 0, -712), 0), 100000000, 0, -711), 0, (("set.mli", 98, 3727, 3731), ("set.mli", 98, 3727, 3753), 0), 0, Tag1 ("Stdlib__Set", 10)), 0); (("disjoint", 1076), ((Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -710), (Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -709), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -708), 0), 100000000, 0, -707), 0), 100000000, 0, -706), 0, (("set.mli", 101, 3784, 3788), ("set.mli", 101, 3784, 3816), 0), 0, Tag1 ("Stdlib__Set", 11)), 0); (("diff", 1077), ((Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -705), (Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -704), (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -703), 0), 100000000, 0, -702), 0), 100000000, 0, -701), 0, (("set.mli", 105, 3880, 3884), ("set.mli", 105, 3880, 3905), 0), 0, Tag1 ("Stdlib__Set", 12)), 0); (("cardinal", 1078), ((Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -700), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -699), 0), 100000000, 0, -698), 0, (("set.mli", 109, 4007, 4011), ("set.mli", 109, 4007, 4033), 0), 0, Tag1 ("Stdlib__Set", 13)), 0); (("elements", 1079), ((Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -697), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -696)], (0)), 100000000, 0, -695), 0), 100000000, 0, -694), 0, (("set.mli", 114, 4120, 4124), ("set.mli", 114, 4120, 4151), 0), 0, Tag1 ("Stdlib__Set", 14)), 0); (("min_elt", 1080), ((Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -693), (Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -692), 0), 100000000, 0, -691), 0, (("set.mli", 120, 4380, 4384), ("set.mli", 120, 4380, 4405), 0), 0, Tag1 ("Stdlib__Set", 15)), 0); (("min_elt_opt", 1081), ((Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -690), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -689)], (0)), 100000000, 0, -688), 0), 100000000, 0, -687), 0, (("set.mli", 125, 4567, 4571), ("set.mli", 125, 4567, 4603), 0), 0, Tag1 ("Stdlib__Set", 16)), 0); (("max_elt", 1082), ((Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -686), (Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -685), 0), 100000000, 0, -684), 0, (("set.mli", 131, 4774, 4778), ("set.mli", 131, 4774, 4799), 0), 0, Tag1 ("Stdlib__Set", 17)), 0); (("max_elt_opt", 1083), ((Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -683), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -682)], (0)), 100000000, 0, -681), 0), 100000000, 0, -680), 0, (("set.mli", 135, 4890, 4894), ("set.mli", 135, 4890, 4926), 0), 0, Tag1 ("Stdlib__Set", 18)), 0); (("choose", 1084), ((Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -679), (Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -678), 0), 100000000, 0, -677), 0, (("set.mli", 140, 5041, 5045), ("set.mli", 140, 5041, 5065), 0), 0, Tag1 ("Stdlib__Set", 19)), 0); (("choose_opt", 1085), ((Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -676), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -675)], (0)), 100000000, 0, -674), 0), 100000000, 0, -673), 0, (("set.mli", 145, 5263, 5267), ("set.mli", 145, 5263, 5298), 0), 0, Tag1 ("Stdlib__Set", 20)), 0); (("find", 1086), ((Tag1 (0, (Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -672), (Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -671), (Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -670), 0), 100000000, 0, -669), 0), 100000000, 0, -668), 0, (("set.mli", 153, 5541, 5549), ("set.mli", 153, 5541, 5574), 0), 0, Tag1 ("Stdlib__Set", 21)), 0); (("find_opt", 1087), ((Tag1 (0, (Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -667), (Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -666), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -665)], (0)), 100000000, 0, -664), 0), 100000000, 0, -663), 0), 100000000, 0, -662), 0, (("set.mli", 159, 5752, 5756), ("set.mli", 159, 5752, 5792), 0), 0, Tag1 ("Stdlib__Set", 22)), 0); (("find_first", 1088), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -661), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -660), 0), 100000000, 0, -659), (Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -658), (Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -657), 0), 100000000, 0, -656), 0), 100000000, 0, -655), 0, (("set.mli", 165, 5963, 5967), ("set.mli", 165, 5963, 6008), 0), 0, Tag1 ("Stdlib__Set", 23)), 0); (("find_first_opt", 1089), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -654), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -653), 0), 100000000, 0, -652), (Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -651), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -650)], (0)), 100000000, 0, -649), 0), 100000000, 0, -648), 0), 100000000, 0, -647), 0, (("set.mli", 177, 6482, 6486), ("set.mli", 177, 6482, 6538), 0), 0, Tag1 ("Stdlib__Set", 24)), 0); (("find_last", 1090), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -646), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -645), 0), 100000000, 0, -644), (Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -643), (Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -642), 0), 100000000, 0, -641), 0), 100000000, 0, -640), 0, (("set.mli", 184, 6779, 6783), ("set.mli", 184, 6779, 6823), 0), 0, Tag1 ("Stdlib__Set", 25)), 0); (("find_last_opt", 1091), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -639), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -638), 0), 100000000, 0, -637), (Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -636), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -635)], (0)), 100000000, 0, -634), 0), 100000000, 0, -633), 0), 100000000, 0, -632), 0, (("set.mli", 190, 7044, 7048), ("set.mli", 190, 7044, 7099), 0), 0, Tag1 ("Stdlib__Set", 26)), 0); (("iter", 1092), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -631), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -630), 0), 100000000, 0, -629), (Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -628), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -627), 0), 100000000, 0, -626), 0), 100000000, 0, -625), 0, (("set.mli", 198, 7371, 7375), ("set.mli", 198, 7371, 7411), 0), 0, Tag1 ("Stdlib__Set", 27)), 0); (("fold", 1093), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -624), (Tag1 (0, ((("acc")), 100000000, 0, -620), ((("acc")), 100000000, 0, -620), 0), 100000000, 0, -623), 0), 100000000, 0, -622), (Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -621), (Tag1 (0, ((("acc")), 100000000, 0, -620), ((("acc")), 100000000, 0, -620), 0), 100000000, 0, -619), 0), 100000000, 0, -618), 0), 100000000, 0, -617), 0, (("set.mli", 203, 7616, 7620), ("set.mli", 203, 7616, 7672), 0), 0, Tag1 ("Stdlib__Set", 28)), 0); (("map", 1094), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -616), (Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -615), 0), 100000000, 0, -614), (Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -613), (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -612), 0), 100000000, 0, -611), 0), 100000000, 0, -610), 0, (("set.mli", 209, 7860, 7864), ("set.mli", 209, 7860, 7895), 0), 0, Tag1 ("Stdlib__Set", 29)), 0); (("filter", 1095), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -609), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -608), 0), 100000000, 0, -607), (Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -606), (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -605), 0), 100000000, 0, -604), 0), 100000000, 0, -603), 0, (("set.mli", 221, 8372, 8376), ("set.mli", 221, 8372, 8411), 0), 0, Tag1 ("Stdlib__Set", 30)), 0); (("filter_map", 1096), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -602), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -601)], (0)), 100000000, 0, -600), 0), 100000000, 0, -599), (Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -598), (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -597), 0), 100000000, 0, -596), 0), 100000000, 0, -595), 0, (("set.mli", 228, 8710, 8714), ("set.mli", 228, 8710, 8759), 0), 0, Tag1 ("Stdlib__Set", 31)), 0); (("partition", 1097), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -594), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -593), 0), 100000000, 0, -592), (Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -591), (Tag2 ([(Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -589); (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -590)]), 100000000, 0, -588), 0), 100000000, 0, -587), 0), 100000000, 0, -586), 0, (("set.mli", 243, 9275, 9279), ("set.mli", 243, 9275, 9321), 0), 0, Tag1 ("Stdlib__Set", 32)), 0); (("split", 1098), ((Tag1 (0, (Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -585), (Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -584), (Tag2 ([(Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -581); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -582); (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -583)]), 100000000, 0, -580), 0), 100000000, 0, -579), 0), 100000000, 0, -578), 0, (("set.mli", 249, 9562, 9566), ("set.mli", 249, 9562, 9601), 0), 0, Tag1 ("Stdlib__Set", 33)), 0); (("is_empty", 1099), ((Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -577), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -576), 0), 100000000, 0, -575), 0, (("set.mli", 260, 10020, 10024), ("set.mli", 260, 10020, 10047), 0), 0, Tag1 ("Stdlib__Set", 34)), 0); (("mem", 1100), ((Tag1 (0, (Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -574), (Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -573), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -572), 0), 100000000, 0, -571), 0), 100000000, 0, -570), 0, (("set.mli", 263, 10096, 10100), ("set.mli", 263, 10096, 10125), 0), 0, Tag1 ("Stdlib__Set", 35)), 0); (("equal", 1101), ((Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -569), (Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -568), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -567), 0), 100000000, 0, -566), 0), 100000000, 0, -565), 0, (("set.mli", 266, 10190, 10194), ("set.mli", 266, 10190, 10219), 0), 0, Tag1 ("Stdlib__Set", 36)), 0); (("compare", 1102), ((Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -564), (Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -563), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -562), 0), 100000000, 0, -561), 0), 100000000, 0, -560), 0, (("set.mli", 270, 10335, 10339), ("set.mli", 270, 10335, 10365), 0), 0, Tag1 ("Stdlib__Set", 37)), 0); (("subset", 1103), ((Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -559), (Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -558), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -557), 0), 100000000, 0, -556), 0), 100000000, 0, -555), 0, (("set.mli", 274, 10476, 10480), ("set.mli", 274, 10476, 10506), 0), 0, Tag1 ("Stdlib__Set", 38)), 0); (("for_all", 1104), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -554), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -553), 0), 100000000, 0, -552), (Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -551), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -550), 0), 100000000, 0, -549), 0), 100000000, 0, -548), 0, (("set.mli", 278, 10598, 10602), ("set.mli", 278, 10598, 10641), 0), 0, Tag1 ("Stdlib__Set", 39)), 0); (("exists", 1105), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -547), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -546), 0), 100000000, 0, -545), (Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -544), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -543), 0), 100000000, 0, -542), 0), 100000000, 0, -541), 0, (("set.mli", 282, 10737, 10741), ("set.mli", 282, 10737, 10779), 0), 0, Tag1 ("Stdlib__Set", 40)), 0); (("to_list", 1106), ((Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -540), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -539)], (0)), 100000000, 0, -538), 0), 100000000, 0, -537), 0, (("set.mli", 288, 10922, 10926), ("set.mli", 288, 10922, 10953), 0), 0, Tag1 ("Stdlib__Set", 41)), 0); (("of_list", 1107), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -536)], (0)), 100000000, 0, -535), (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -534), 0), 100000000, 0, -533), 0, (("set.mli", 292, 11017, 11021), ("set.mli", 292, 11017, 11047), 0), 0, Tag1 ("Stdlib__Set", 42)), 0); (("to_seq_from", 1108), ((Tag1 (0, (Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -532), (Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -531), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -530)], (0)), 100000000, 0, -529), 0), 100000000, 0, -528), 0), 100000000, 0, -527), 0, (("set.mli", 298, 11268, 11272), ("set.mli", 298, 11268, 11311), 0), 0, Tag1 ("Stdlib__Set", 43)), 0); (("to_seq", 1109), ((Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -526), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -525)], (0)), 100000000, 0, -524), 0), 100000000, 0, -523), 0, (("set.mli", 303, 11453, 11457), ("set.mli", 303, 11453, 11484), 0), 0, Tag1 ("Stdlib__Set", 44)), 0); (("to_rev_seq", 1110), ((Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -522), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -521)], (0)), 100000000, 0, -520), 0), 100000000, 0, -519), 0, (("set.mli", 307, 11562, 11566), ("set.mli", 307, 11562, 11597), 0), 0, Tag1 ("Stdlib__Set", 45)), 0); (("add_seq", 1111), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -518)], (0)), 100000000, 0, -517), (Tag1 (0, (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -516), (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -515), 0), 100000000, 0, -514), 0), 100000000, 0, -513), 0, (("set.mli", 311, 11676, 11680), ("set.mli", 311, 11676, 11713), 0), 0, Tag1 ("Stdlib__Set", 46)), 0); (("of_seq", 1112), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 1068)), 0, (0)), 100000000, 0, -512)], (0)), 100000000, 0, -511), (Tag3 ((("t", 1069)), 0, (0)), 100000000, 0, -510), 0), 100000000, 0, -509), 0, (("set.mli", 315, 11791, 11795), ("set.mli", 315, 11791, 11822), 0), 0, Tag1 ("Stdlib__Set", 47)), 0)]), 0, (("lib/core.mli", 209, 6919, 6921), ("lib/core.mli", 209, 6919, 6957), 0), Tag1 ("Re__Core", 26)), 0, 0); (("all", 1065), ((Tag1 (0, (Tag3 (Tag1 ((("Group", 955)), "t"), 0, (0)), 100000000, 0, -503), (Tag3 (Tag1 ((("Set", 1064)), "t"), 0, (0)), 100000000, 0, -502), 0), 100000000, 0, -501), 0, (("lib/core.mli", 211, 6959, 6961), ("lib/core.mli", 211, 6959, 6987), 0), 0, Tag1 ("Re__Core", 27)), 0); (("equal", 1066), ((Tag1 (0, (Tag3 ((("t", 1062)), 0, (0)), 100000000, 0, -500), (Tag1 (0, (Tag3 ((("t", 1062)), 0, (0)), 100000000, 0, -499), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -498), 0), 100000000, 0, -497), 0), 100000000, 0, -496), 0, (("lib/core.mli", 214, 7027, 7029), ("lib/core.mli", 214, 7027, 7055), 0), 0, Tag1 ("Re__Core", 28)), 0); (("compare", 1067), ((Tag1 (0, (Tag3 ((("t", 1062)), 0, (0)), 100000000, 0, -495), (Tag1 (0, (Tag3 ((("t", 1062)), 0, (0)), 100000000, 0, -494), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -493), 0), 100000000, 0, -492), 0), 100000000, 0, -491), 0, (("lib/core.mli", 215, 7056, 7058), ("lib/core.mli", 215, 7056, 7085), 0), 0, Tag1 ("Re__Core", 29)), 0)]), 0, (("lib/core.mli", 201, 6801, 6801), ("lib/core.mli", 217, 7087, 7090), 0), Tag1 ("Re__Core", 30)), 0, 0); Tag1 (("split_token", 966), (0, 0, 0, 1, ((Tag8 (([("Delim", (((Tag3 (Tag1 ((("Group", 955)), "t"), 0, (0)), 100000000, 0, -365)))); ("Text", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -366))))], (0, 100000000, 0, -364), 1, 0, 0)), 100000000, 0, -363)), 0, 0, 0, 0, (("lib/core.mli", 221, 7126, 7126), ("lib/core.mli", 224, 7236, 7239), 0), 0, 0, 0, Tag1 ("Re__Core", 31)), 1, 0); (("all", 967), ((Tag1 (Tag1 ("pos"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -362)], (0)), 100000000, 0, -361), (Tag1 (Tag1 ("len"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -360)], (0)), 100000000, 0, -359), (Tag1 (0, (Tag3 ((("re", 954)), 0, (0)), 100000000, 0, -358), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -357), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Group", 955)), "t"), 0, (0)), 100000000, 0, -356)], (0)), 100000000, 0, -355), 0), 100000000, 0, -354), 0), 100000000, 0, -353), 0), 100000000, 0, -352), 0), 100000000, 0, -351), 0, (("lib/core.mli", 226, 7241, 7241), ("lib/core.mli", 226, 7241, 7303), 0), 0, Tag1 ("Re__Core", 32)), 0); Tag1 (("gen", 968), ([((("a")), 100000000, 0, -349)], 1, 0, 1, ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -350), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -349)], (0)), 100000000, 0, -348), 0), 100000000, 0, -347)), [25], [0], 0, 0, (("lib/core.mli", 243, 7802, 7802), ("lib/core.mli", 243, 7802, 7833), 0), 0, 0, 0, Tag1 ("Re__Core", 33)), 1, 0); (("all_gen", 969), ((Tag1 (Tag1 ("pos"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -346)], (0)), 100000000, 0, -345), (Tag1 (Tag1 ("len"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -344)], (0)), 100000000, 0, -343), (Tag1 (0, (Tag3 ((("re", 954)), 0, (0)), 100000000, 0, -342), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -341), (Tag3 ((("gen", 968)), [(Tag3 (Tag1 ((("Group", 955)), "t"), 0, (0)), 100000000, 0, -340)], (0)), 100000000, 0, -339), 0), 100000000, 0, -338), 0), 100000000, 0, -337), 0), 100000000, 0, -336), 0), 100000000, 0, -335), 0, (("lib/core.mli", 245, 7835, 7835), ("lib/core.mli", 246, 7901, 7935), 0), [(("ocaml.deprecated", (("lib/core.mli", 246, 7901, 7904), ("lib/core.mli", 246, 7901, 7920), 0)), ([([(Tag1 (Tag2 ("Use Seq.all", (("lib/core.mli", 246, 7901, 7922), ("lib/core.mli", 246, 7901, 7933), 0), 0)), (("lib/core.mli", 246, 7901, 7921), ("lib/core.mli", 246, 7901, 7934), 0), 0, 0)], (("lib/core.mli", 246, 7901, 7921), ("lib/core.mli", 246, 7901, 7934), 0))]), (("lib/core.mli", 246, 7901, 7901), ("lib/core.mli", 246, 7901, 7935), 0))], Tag1 ("Re__Core", 34)), 0); (("all_seq", 970), ((Tag1 (Tag1 ("pos"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -334)], (0)), 100000000, 0, -333), (Tag1 (Tag1 ("len"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -332)], (0)), 100000000, 0, -331), (Tag1 (0, (Tag3 ((("re", 954)), 0, (0)), 100000000, 0, -330), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -329), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 (Tag1 ((("Group", 955)), "t"), 0, (0)), 100000000, 0, -328)], (0)), 100000000, 0, -327), 0), 100000000, 0, -326), 0), 100000000, 0, -325), 0), 100000000, 0, -324), 0), 100000000, 0, -323), 0, (("lib/core.mli", 249, 7987, 7987), ("lib/core.mli", 250, 8055, 8089), 0), [(("ocaml.deprecated", (("lib/core.mli", 250, 8055, 8058), ("lib/core.mli", 250, 8055, 8074), 0)), ([([(Tag1 (Tag2 ("Use Seq.all", (("lib/core.mli", 250, 8055, 8076), ("lib/core.mli", 250, 8055, 8087), 0), 0)), (("lib/core.mli", 250, 8055, 8075), ("lib/core.mli", 250, 8055, 8088), 0), 0, 0)], (("lib/core.mli", 250, 8055, 8075), ("lib/core.mli", 250, 8055, 8088), 0))]), (("lib/core.mli", 250, 8055, 8055), ("lib/core.mli", 250, 8055, 8089), 0))], Tag1 ("Re__Core", 35)), 0); (("matches", 971), ((Tag1 (Tag1 ("pos"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -322)], (0)), 100000000, 0, -321), (Tag1 (Tag1 ("len"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -320)], (0)), 100000000, 0, -319), (Tag1 (0, (Tag3 ((("re", 954)), 0, (0)), 100000000, 0, -318), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -317), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -316)], (0)), 100000000, 0, -315), 0), 100000000, 0, -314), 0), 100000000, 0, -313), 0), 100000000, 0, -312), 0), 100000000, 0, -311), 0, (("lib/core.mli", 253, 8141, 8141), ("lib/core.mli", 253, 8141, 8206), 0), 0, Tag1 ("Re__Core", 36)), 0); (("matches_gen", 972), ((Tag1 (Tag1 ("pos"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -310)], (0)), 100000000, 0, -309), (Tag1 (Tag1 ("len"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -308)], (0)), 100000000, 0, -307), (Tag1 (0, (Tag3 ((("re", 954)), 0, (0)), 100000000, 0, -306), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -305), (Tag3 ((("gen", 968)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -304)], (0)), 100000000, 0, -303), 0), 100000000, 0, -302), 0), 100000000, 0, -301), 0), 100000000, 0, -300), 0), 100000000, 0, -299), 0, (("lib/core.mli", 276, 8990, 8990), ("lib/core.mli", 277, 9059, 9097), 0), [(("ocaml.deprecated", (("lib/core.mli", 277, 9059, 9062), ("lib/core.mli", 277, 9059, 9078), 0)), ([([(Tag1 (Tag2 ("Use Seq.matches", (("lib/core.mli", 277, 9059, 9080), ("lib/core.mli", 277, 9059, 9095), 0), 0)), (("lib/core.mli", 277, 9059, 9079), ("lib/core.mli", 277, 9059, 9096), 0), 0, 0)], (("lib/core.mli", 277, 9059, 9079), ("lib/core.mli", 277, 9059, 9096), 0))]), (("lib/core.mli", 277, 9059, 9059), ("lib/core.mli", 277, 9059, 9097), 0))], Tag1 ("Re__Core", 37)), 0); (("matches_seq", 973), ((Tag1 (Tag1 ("pos"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -298)], (0)), 100000000, 0, -297), (Tag1 (Tag1 ("len"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -296)], (0)), 100000000, 0, -295), (Tag1 (0, (Tag3 ((("re", 954)), 0, (0)), 100000000, 0, -294), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -293), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -292)], (0)), 100000000, 0, -291), 0), 100000000, 0, -290), 0), 100000000, 0, -289), 0), 100000000, 0, -288), 0), 100000000, 0, -287), 0, (("lib/core.mli", 280, 9153, 9153), ("lib/core.mli", 281, 9224, 9262), 0), [(("ocaml.deprecated", (("lib/core.mli", 281, 9224, 9227), ("lib/core.mli", 281, 9224, 9243), 0)), ([([(Tag1 (Tag2 ("Use Seq.matches", (("lib/core.mli", 281, 9224, 9245), ("lib/core.mli", 281, 9224, 9260), 0), 0)), (("lib/core.mli", 281, 9224, 9244), ("lib/core.mli", 281, 9224, 9261), 0), 0, 0)], (("lib/core.mli", 281, 9224, 9244), ("lib/core.mli", 281, 9224, 9261), 0))]), (("lib/core.mli", 281, 9224, 9224), ("lib/core.mli", 281, 9224, 9262), 0))], Tag1 ("Re__Core", 38)), 0); (("split", 974), ((Tag1 (Tag1 ("pos"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -286)], (0)), 100000000, 0, -285), (Tag1 (Tag1 ("len"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -284)], (0)), 100000000, 0, -283), (Tag1 (0, (Tag3 ((("re", 954)), 0, (0)), 100000000, 0, -282), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -281), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -280)], (0)), 100000000, 0, -279), 0), 100000000, 0, -278), 0), 100000000, 0, -277), 0), 100000000, 0, -276), 0), 100000000, 0, -275), 0, (("lib/core.mli", 284, 9318, 9318), ("lib/core.mli", 284, 9318, 9381), 0), 0, Tag1 ("Re__Core", 39)), 0); (("split_gen", 975), ((Tag1 (Tag1 ("pos"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -274)], (0)), 100000000, 0, -273), (Tag1 (Tag1 ("len"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -272)], (0)), 100000000, 0, -271), (Tag1 (0, (Tag3 ((("re", 954)), 0, (0)), 100000000, 0, -270), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -269), (Tag3 ((("gen", 968)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -268)], (0)), 100000000, 0, -267), 0), 100000000, 0, -266), 0), 100000000, 0, -265), 0), 100000000, 0, -264), 0), 100000000, 0, -263), 0, (("lib/core.mli", 304, 9964, 9964), ("lib/core.mli", 305, 10031, 10067), 0), [(("ocaml.deprecated", (("lib/core.mli", 305, 10031, 10034), ("lib/core.mli", 305, 10031, 10050), 0)), ([([(Tag1 (Tag2 ("Use Seq.split", (("lib/core.mli", 305, 10031, 10052), ("lib/core.mli", 305, 10031, 10065), 0), 0)), (("lib/core.mli", 305, 10031, 10051), ("lib/core.mli", 305, 10031, 10066), 0), 0, 0)], (("lib/core.mli", 305, 10031, 10051), ("lib/core.mli", 305, 10031, 10066), 0))]), (("lib/core.mli", 305, 10031, 10031), ("lib/core.mli", 305, 10031, 10067), 0))], Tag1 ("Re__Core", 40)), 0); (("split_seq", 976), ((Tag1 (Tag1 ("pos"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -262)], (0)), 100000000, 0, -261), (Tag1 (Tag1 ("len"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -260)], (0)), 100000000, 0, -259), (Tag1 (0, (Tag3 ((("re", 954)), 0, (0)), 100000000, 0, -258), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -257), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -256)], (0)), 100000000, 0, -255), 0), 100000000, 0, -254), 0), 100000000, 0, -253), 0), 100000000, 0, -252), 0), 100000000, 0, -251), 0, (("lib/core.mli", 308, 10121, 10121), ("lib/core.mli", 309, 10190, 10226), 0), [(("ocaml.deprecated", (("lib/core.mli", 309, 10190, 10193), ("lib/core.mli", 309, 10190, 10209), 0)), ([([(Tag1 (Tag2 ("Use Seq.split", (("lib/core.mli", 309, 10190, 10211), ("lib/core.mli", 309, 10190, 10224), 0), 0)), (("lib/core.mli", 309, 10190, 10210), ("lib/core.mli", 309, 10190, 10225), 0), 0, 0)], (("lib/core.mli", 309, 10190, 10210), ("lib/core.mli", 309, 10190, 10225), 0))]), (("lib/core.mli", 309, 10190, 10190), ("lib/core.mli", 309, 10190, 10226), 0))], Tag1 ("Re__Core", 41)), 0); (("split_full", 977), ((Tag1 (Tag1 ("pos"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -250)], (0)), 100000000, 0, -249), (Tag1 (Tag1 ("len"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -248)], (0)), 100000000, 0, -247), (Tag1 (0, (Tag3 ((("re", 954)), 0, (0)), 100000000, 0, -246), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -245), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("split_token", 966)), 0, (0)), 100000000, 0, -244)], (0)), 100000000, 0, -243), 0), 100000000, 0, -242), 0), 100000000, 0, -241), 0), 100000000, 0, -240), 0), 100000000, 0, -239), 0, (("lib/core.mli", 312, 10280, 10280), ("lib/core.mli", 312, 10280, 10353), 0), 0, Tag1 ("Re__Core", 42)), 0); (("split_full_gen", 978), ((Tag1 (Tag1 ("pos"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -238)], (0)), 100000000, 0, -237), (Tag1 (Tag1 ("len"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -236)], (0)), 100000000, 0, -235), (Tag1 (0, (Tag3 ((("re", 954)), 0, (0)), 100000000, 0, -234), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -233), (Tag3 ((("gen", 968)), [(Tag3 ((("split_token", 966)), 0, (0)), 100000000, 0, -232)], (0)), 100000000, 0, -231), 0), 100000000, 0, -230), 0), 100000000, 0, -229), 0), 100000000, 0, -228), 0), 100000000, 0, -227), 0, (("lib/core.mli", 336, 11185, 11185), ("lib/core.mli", 337, 11262, 11303), 0), [(("ocaml.deprecated", (("lib/core.mli", 337, 11262, 11265), ("lib/core.mli", 337, 11262, 11281), 0)), ([([(Tag1 (Tag2 ("Use Seq.split_full", (("lib/core.mli", 337, 11262, 11283), ("lib/core.mli", 337, 11262, 11301), 0), 0)), (("lib/core.mli", 337, 11262, 11282), ("lib/core.mli", 337, 11262, 11302), 0), 0, 0)], (("lib/core.mli", 337, 11262, 11282), ("lib/core.mli", 337, 11262, 11302), 0))]), (("lib/core.mli", 337, 11262, 11262), ("lib/core.mli", 337, 11262, 11303), 0))], Tag1 ("Re__Core", 43)), 0); (("split_full_seq", 979), ((Tag1 (Tag1 ("pos"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -226)], (0)), 100000000, 0, -225), (Tag1 (Tag1 ("len"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -224)], (0)), 100000000, 0, -223), (Tag1 (0, (Tag3 ((("re", 954)), 0, (0)), 100000000, 0, -222), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -221), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("split_token", 966)), 0, (0)), 100000000, 0, -220)], (0)), 100000000, 0, -219), 0), 100000000, 0, -218), 0), 100000000, 0, -217), 0), 100000000, 0, -216), 0), 100000000, 0, -215), 0, (("lib/core.mli", 340, 11362, 11362), ("lib/core.mli", 341, 11441, 11482), 0), [(("ocaml.deprecated", (("lib/core.mli", 341, 11441, 11444), ("lib/core.mli", 341, 11441, 11460), 0)), ([([(Tag1 (Tag2 ("Use Seq.split_full", (("lib/core.mli", 341, 11441, 11462), ("lib/core.mli", 341, 11441, 11480), 0), 0)), (("lib/core.mli", 341, 11441, 11461), ("lib/core.mli", 341, 11441, 11481), 0), 0, 0)], (("lib/core.mli", 341, 11441, 11461), ("lib/core.mli", 341, 11441, 11481), 0))]), (("lib/core.mli", 341, 11441, 11441), ("lib/core.mli", 341, 11441, 11482), 0))], Tag1 ("Re__Core", 44)), 0); Tag3 (("Seq", 980), 0, (Tag1 ([(("all", 1113), ((Tag1 (Tag1 ("pos"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -783)], (0)), 100000000, 0, -782), (Tag1 (Tag1 ("len"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -781)], (0)), 100000000, 0, -780), (Tag1 (0, (Tag3 ((("re", 954)), 0, (0)), 100000000, 0, -779), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -778), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 (Tag1 ((("Group", 955)), "t"), 0, (0)), 100000000, 0, -777)], (0)), 100000000, 0, -776), 0), 100000000, 0, -775), 0), 100000000, 0, -774), 0), 100000000, 0, -773), 0), 100000000, 0, -772), 0, (("lib/core.mli", 345, 11558, 11560), ("lib/core.mli", 348, 11623, 11656), 0), 0, Tag1 ("Re__Core", 45)), 0); (("matches", 1114), ((Tag1 (Tag1 ("pos"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -771)], (0)), 100000000, 0, -770), (Tag1 (Tag1 ("len"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -769)], (0)), 100000000, 0, -768), (Tag1 (0, (Tag3 ((("re", 954)), 0, (0)), 100000000, 0, -767), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -766), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -765)], (0)), 100000000, 0, -764), 0), 100000000, 0, -763), 0), 100000000, 0, -762), 0), 100000000, 0, -761), 0), 100000000, 0, -760), 0, (("lib/core.mli", 361, 12007, 12009), ("lib/core.mli", 364, 12076, 12108), 0), 0, Tag1 ("Re__Core", 46)), 0); (("split", 1115), ((Tag1 (Tag1 ("pos"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -759)], (0)), 100000000, 0, -758), (Tag1 (Tag1 ("len"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -757)], (0)), 100000000, 0, -756), (Tag1 (0, (Tag3 ((("re", 954)), 0, (0)), 100000000, 0, -755), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -754), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -753)], (0)), 100000000, 0, -752), 0), 100000000, 0, -751), 0), 100000000, 0, -750), 0), 100000000, 0, -749), 0), 100000000, 0, -748), 0, (("lib/core.mli", 377, 12460, 12462), ("lib/core.mli", 380, 12527, 12559), 0), 0, Tag1 ("Re__Core", 47)), 0); (("split_full", 1116), ((Tag1 (Tag1 ("pos"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -747)], (0)), 100000000, 0, -746), (Tag1 (Tag1 ("len"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -745)], (0)), 100000000, 0, -744), (Tag1 (0, (Tag3 ((("re", 954)), 0, (0)), 100000000, 0, -743), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -742), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("split_token", 966)), 0, (0)), 100000000, 0, -741)], (0)), 100000000, 0, -740), 0), 100000000, 0, -739), 0), 100000000, 0, -738), 0), 100000000, 0, -737), 0), 100000000, 0, -736), 0, (("lib/core.mli", 393, 12856, 12858), ("lib/core.mli", 396, 12928, 12965), 0), 0, Tag1 ("Re__Core", 48)), 0)]), 0, (("lib/core.mli", 344, 11541, 11541), ("lib/core.mli", 408, 13285, 13288), 0), Tag1 ("Re__Core", 49)), 0, 0); (("replace", 981), ((Tag1 (Tag1 ("pos"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -214)], (0)), 100000000, 0, -213), (Tag1 (Tag1 ("len"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -212)], (0)), 100000000, 0, -211), (Tag1 (Tag1 ("all"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -210)], (0)), 100000000, 0, -209), (Tag1 (0, (Tag3 ((("re", 954)), 0, (0)), 100000000, 0, -208), (Tag1 (("f"), (Tag1 (0, (Tag3 (Tag1 ((("Group", 955)), "t"), 0, (0)), 100000000, 0, -207), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -206), 0), 100000000, 0, -205), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -204), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -203), 0), 100000000, 0, -202), 0), 100000000, 0, -201), 0), 100000000, 0, -200), 0), 100000000, 0, -199), 0), 100000000, 0, -198), 0), 100000000, 0, -197), 0, (("lib/core.mli", 410, 13290, 13290), ("lib/core.mli", 417, 13565, 13573), 0), 0, Tag1 ("Re__Core", 50)), 0); (("replace_string", 982), ((Tag1 (Tag1 ("pos"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -196)], (0)), 100000000, 0, -195), (Tag1 (Tag1 ("len"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -194)], (0)), 100000000, 0, -193), (Tag1 (Tag1 ("all"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -192)], (0)), 100000000, 0, -191), (Tag1 (0, (Tag3 ((("re", 954)), 0, (0)), 100000000, 0, -190), (Tag1 (("by"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -189), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -188), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -187), 0), 100000000, 0, -186), 0), 100000000, 0, -185), 0), 100000000, 0, -184), 0), 100000000, 0, -183), 0), 100000000, 0, -182), 0), 100000000, 0, -181), 0, (("lib/core.mli", 422, 13797, 13797), ("lib/core.mli", 429, 14073, 14081), 0), 0, Tag1 ("Re__Core", 51)), 0); (("str", 983), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -180), (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -179), 0), 100000000, 0, -178), 0, (("lib/core.mli", 449, 14647, 14647), ("lib/core.mli", 449, 14647, 14668), 0), 0, Tag1 ("Re__Core", 52)), 0); (("char", 984), ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -177), (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -176), 0), 100000000, 0, -175), 0, (("lib/core.mli", 450, 14669, 14669), ("lib/core.mli", 450, 14669, 14689), 0), 0, Tag1 ("Re__Core", 53)), 0); (("alt", 985), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -174)], (0)), 100000000, 0, -173), (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -172), 0), 100000000, 0, -171), 0, (("lib/core.mli", 454, 14743, 14743), ("lib/core.mli", 454, 14743, 14764), 0), 0, Tag1 ("Re__Core", 54)), 0); (("seq", 986), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -170)], (0)), 100000000, 0, -169), (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -168), 0), 100000000, 0, -167), 0, (("lib/core.mli", 462, 14905, 14905), ("lib/core.mli", 462, 14905, 14926), 0), 0, Tag1 ("Re__Core", 55)), 0); (("empty", 987), ((Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -166), 0, (("lib/core.mli", 465, 14944, 14944), ("lib/core.mli", 465, 14944, 14957), 0), 0, Tag1 ("Re__Core", 56)), 0); (("epsilon", 988), ((Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -165), 0, (("lib/core.mli", 468, 14980, 14980), ("lib/core.mli", 468, 14980, 14995), 0), 0, Tag1 ("Re__Core", 57)), 0); (("rep", 989), ((Tag1 (0, (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -164), (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -163), 0), 100000000, 0, -162), 0, (("lib/core.mli", 471, 15015, 15015), ("lib/core.mli", 471, 15015, 15031), 0), 0, Tag1 ("Re__Core", 58)), 0); (("rep1", 990), ((Tag1 (0, (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -161), (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -160), 0), 100000000, 0, -159), 0, (("lib/core.mli", 474, 15058, 15058), ("lib/core.mli", 474, 15058, 15075), 0), 0, Tag1 ("Re__Core", 59)), 0); (("repn", 991), ((Tag1 (0, (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -158), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -157), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -156)], (0)), 100000000, 0, -155), (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -154), 0), 100000000, 0, -153), 0), 100000000, 0, -152), 0), 100000000, 0, -151), 0, (("lib/core.mli", 477, 15102, 15102), ("lib/core.mli", 477, 15102, 15140), 0), 0, Tag1 ("Re__Core", 60)), 0); (("opt", 992), ((Tag1 (0, (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -150), (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -149), 0), 100000000, 0, -148), 0, (("lib/core.mli", 483, 15276, 15276), ("lib/core.mli", 483, 15276, 15292), 0), 0, Tag1 ("Re__Core", 61)), 0); (("bol", 993), ((Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -147), 0, (("lib/core.mli", 491, 15425, 15425), ("lib/core.mli", 491, 15425, 15436), 0), 0, Tag1 ("Re__Core", 62)), 0); (("eol", 994), ((Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -146), 0, (("lib/core.mli", 494, 15463, 15463), ("lib/core.mli", 494, 15463, 15474), 0), 0, Tag1 ("Re__Core", 63)), 0); (("bow", 995), ((Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -145), 0, (("lib/core.mli", 497, 15495, 15495), ("lib/core.mli", 497, 15495, 15506), 0), 0, Tag1 ("Re__Core", 64)), 0); (("eow", 996), ((Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -144), 0, (("lib/core.mli", 500, 15533, 15533), ("lib/core.mli", 500, 15533, 15544), 0), 0, Tag1 ("Re__Core", 65)), 0); (("bos", 997), ((Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -143), 0, (("lib/core.mli", 503, 15565, 15565), ("lib/core.mli", 503, 15565, 15576), 0), 0, Tag1 ("Re__Core", 66)), 0); (("eos", 998), ((Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -142), 0, (("lib/core.mli", 513, 15828, 15828), ("lib/core.mli", 513, 15828, 15839), 0), 0, Tag1 ("Re__Core", 67)), 0); (("leol", 999), ((Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -141), 0, (("lib/core.mli", 517, 15930, 15930), ("lib/core.mli", 517, 15930, 15942), 0), 0, Tag1 ("Re__Core", 68)), 0); (("start", 1000), ((Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -140), 0, (("lib/core.mli", 520, 15985, 15985), ("lib/core.mli", 520, 15985, 15998), 0), 0, Tag1 ("Re__Core", 69)), 0); (("stop", 1001), ((Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -139), 0, (("lib/core.mli", 530, 16206, 16206), ("lib/core.mli", 530, 16206, 16218), 0), 0, Tag1 ("Re__Core", 70)), 0); (("word", 1002), ((Tag1 (0, (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -138), (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -137), 0), 100000000, 0, -136), 0, (("lib/core.mli", 534, 16311, 16311), ("lib/core.mli", 534, 16311, 16328), 0), 0, Tag1 ("Re__Core", 71)), 0); (("not_boundary", 1003), ((Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -135), 0, (("lib/core.mli", 537, 16342, 16342), ("lib/core.mli", 537, 16342, 16362), 0), 0, Tag1 ("Re__Core", 72)), 0); (("whole_string", 1004), ((Tag1 (0, (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -134), (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -133), 0), 100000000, 0, -132), 0, (("lib/core.mli", 540, 16394, 16394), ("lib/core.mli", 540, 16394, 16419), 0), 0, Tag1 ("Re__Core", 73)), 0); (("longest", 1005), ((Tag1 (0, (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -131), (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -130), 0), 100000000, 0, -129), 0, (("lib/core.mli", 565, 17552, 17552), ("lib/core.mli", 565, 17552, 17572), 0), 0, Tag1 ("Re__Core", 74)), 0); (("shortest", 1006), ((Tag1 (0, (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -128), (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -127), 0), 100000000, 0, -126), 0, (("lib/core.mli", 570, 17783, 17783), ("lib/core.mli", 570, 17783, 17804), 0), 0, Tag1 ("Re__Core", 75)), 0); (("first", 1007), ((Tag1 (0, (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -125), (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -124), 0), 100000000, 0, -123), 0, (("lib/core.mli", 573, 17873, 17873), ("lib/core.mli", 573, 17873, 17891), 0), 0, Tag1 ("Re__Core", 76)), 0); (("greedy", 1008), ((Tag1 (0, (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -122), (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -121), 0), 100000000, 0, -120), 0, (("lib/core.mli", 577, 18053, 18053), ("lib/core.mli", 577, 18053, 18072), 0), 0, Tag1 ("Re__Core", 77)), 0); (("non_greedy", 1009), ((Tag1 (0, (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -119), (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -118), 0), 100000000, 0, -117), 0, (("lib/core.mli", 581, 18195, 18195), ("lib/core.mli", 581, 18195, 18218), 0), 0, Tag1 ("Re__Core", 78)), 0); (("group", 1010), ((Tag1 (Tag1 ("name"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -116)], (0)), 100000000, 0, -115), (Tag1 (0, (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -114), (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -113), 0), 100000000, 0, -112), 0), 100000000, 0, -111), 0, (("lib/core.mli", 587, 18379, 18379), ("lib/core.mli", 587, 18379, 18413), 0), 0, Tag1 ("Re__Core", 79)), 0); (("no_group", 1011), ((Tag1 (0, (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -110), (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -109), 0), 100000000, 0, -108), 0, (("lib/core.mli", 593, 18653, 18653), ("lib/core.mli", 593, 18653, 18674), 0), 0, Tag1 ("Re__Core", 80)), 0); (("nest", 1012), ((Tag1 (0, (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -107), (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -106), 0), 100000000, 0, -105), 0, (("lib/core.mli", 596, 18701, 18701), ("lib/core.mli", 596, 18701, 18718), 0), 0, Tag1 ("Re__Core", 81)), 0); (("mark", 1013), ((Tag1 (0, (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -104), (Tag2 ([(Tag3 (Tag1 ((("Mark", 965)), "t"), 0, (0)), 100000000, 0, -102); (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -103)]), 100000000, 0, -101), 0), 100000000, 0, -100), 0, (("lib/core.mli", 615, 19231, 19231), ("lib/core.mli", 615, 19231, 19257), 0), 0, Tag1 ("Re__Core", 82)), 0); (("set", 1014), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -99), (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -98), 0), 100000000, 0, -97), 0, (("lib/core.mli", 620, 19369, 19369), ("lib/core.mli", 620, 19369, 19390), 0), 0, Tag1 ("Re__Core", 83)), 0); (("rg", 1015), ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -96), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -95), (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -94), 0), 100000000, 0, -93), 0), 100000000, 0, -92), 0, (("lib/core.mli", 623, 19427, 19427), ("lib/core.mli", 623, 19427, 19453), 0), 0, Tag1 ("Re__Core", 84)), 0); (("inter", 1016), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -91)], (0)), 100000000, 0, -90), (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -89), 0), 100000000, 0, -88), 0, (("lib/core.mli", 626, 19479, 19479), ("lib/core.mli", 626, 19479, 19502), 0), 0, Tag1 ("Re__Core", 85)), 0); (("diff", 1017), ((Tag1 (0, (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -87), (Tag1 (0, (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -86), (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -85), 0), 100000000, 0, -84), 0), 100000000, 0, -83), 0, (("lib/core.mli", 629, 19542, 19542), ("lib/core.mli", 629, 19542, 19564), 0), 0, Tag1 ("Re__Core", 86)), 0); (("compl", 1018), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -82)], (0)), 100000000, 0, -81), (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -80), 0), 100000000, 0, -79), 0, (("lib/core.mli", 632, 19602, 19602), ("lib/core.mli", 632, 19602, 19625), 0), 0, Tag1 ("Re__Core", 87)), 0); (("any", 1019), ((Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -78), 0, (("lib/core.mli", 637, 19692, 19692), ("lib/core.mli", 637, 19692, 19703), 0), 0, Tag1 ("Re__Core", 88)), 0); (("notnl", 1020), ((Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -77), 0, (("lib/core.mli", 640, 19726, 19726), ("lib/core.mli", 640, 19726, 19739), 0), 0, Tag1 ("Re__Core", 89)), 0); (("alnum", 1021), ((Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -76), 0, (("lib/core.mli", 643, 19776, 19776), ("lib/core.mli", 643, 19776, 19789), 0), 0, Tag1 ("Re__Core", 90)), 0); (("wordc", 1022), ((Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -75), 0, (("lib/core.mli", 644, 19790, 19790), ("lib/core.mli", 644, 19790, 19803), 0), 0, Tag1 ("Re__Core", 91)), 0); (("alpha", 1023), ((Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -74), 0, (("lib/core.mli", 645, 19804, 19804), ("lib/core.mli", 645, 19804, 19817), 0), 0, Tag1 ("Re__Core", 92)), 0); (("ascii", 1024), ((Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -73), 0, (("lib/core.mli", 646, 19818, 19818), ("lib/core.mli", 646, 19818, 19831), 0), 0, Tag1 ("Re__Core", 93)), 0); (("blank", 1025), ((Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -72), 0, (("lib/core.mli", 647, 19832, 19832), ("lib/core.mli", 647, 19832, 19845), 0), 0, Tag1 ("Re__Core", 94)), 0); (("cntrl", 1026), ((Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -71), 0, (("lib/core.mli", 648, 19846, 19846), ("lib/core.mli", 648, 19846, 19859), 0), 0, Tag1 ("Re__Core", 95)), 0); (("digit", 1027), ((Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -70), 0, (("lib/core.mli", 649, 19860, 19860), ("lib/core.mli", 649, 19860, 19873), 0), 0, Tag1 ("Re__Core", 96)), 0); (("graph", 1028), ((Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -69), 0, (("lib/core.mli", 650, 19874, 19874), ("lib/core.mli", 650, 19874, 19887), 0), 0, Tag1 ("Re__Core", 97)), 0); (("lower", 1029), ((Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -68), 0, (("lib/core.mli", 651, 19888, 19888), ("lib/core.mli", 651, 19888, 19901), 0), 0, Tag1 ("Re__Core", 98)), 0); (("print", 1030), ((Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -67), 0, (("lib/core.mli", 652, 19902, 19902), ("lib/core.mli", 652, 19902, 19915), 0), 0, Tag1 ("Re__Core", 99)), 0); (("punct", 1031), ((Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -66), 0, (("lib/core.mli", 653, 19916, 19916), ("lib/core.mli", 653, 19916, 19929), 0), 0, Tag1 ("Re__Core", 100)), 0); (("space", 1032), ((Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -65), 0, (("lib/core.mli", 654, 19930, 19930), ("lib/core.mli", 654, 19930, 19943), 0), 0, Tag1 ("Re__Core", 101)), 0); (("upper", 1033), ((Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -64), 0, (("lib/core.mli", 655, 19944, 19944), ("lib/core.mli", 655, 19944, 19957), 0), 0, Tag1 ("Re__Core", 102)), 0); (("xdigit", 1034), ((Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -63), 0, (("lib/core.mli", 656, 19958, 19958), ("lib/core.mli", 656, 19958, 19972), 0), 0, Tag1 ("Re__Core", 103)), 0); (("case", 1035), ((Tag1 (0, (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -62), (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -61), 0), 100000000, 0, -60), 0, (("lib/core.mli", 660, 20001, 20001), ("lib/core.mli", 660, 20001, 20018), 0), 0, Tag1 ("Re__Core", 104)), 0); (("no_case", 1036), ((Tag1 (0, (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -59), (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -58), 0), 100000000, 0, -57), 0, (("lib/core.mli", 664, 20112, 20112), ("lib/core.mli", 664, 20112, 20132), 0), 0, Tag1 ("Re__Core", 105)), 0); (("pp", 1037), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -56), (Tag1 (0, (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -55), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52), 0, (("lib/core.mli", 672, 20268, 20268), ("lib/core.mli", 672, 20268, 20306), 0), 0, Tag1 ("Re__Core", 106)), 0); (("pp_re", 1038), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -51), (Tag1 (0, (Tag3 ((("re", 954)), 0, (0)), 100000000, 0, -50), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -49), 0), 100000000, 0, -48), 0), 100000000, 0, -47), 0, (("lib/core.mli", 674, 20308, 20308), ("lib/core.mli", 674, 20308, 20350), 0), 0, Tag1 ("Re__Core", 107)), 0); (("print_re", 1039), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -46), (Tag1 (0, (Tag3 ((("re", 954)), 0, (0)), 100000000, 0, -45), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -44), 0), 100000000, 0, -43), 0), 100000000, 0, -42), 0, (("lib/core.mli", 677, 20390, 20390), ("lib/core.mli", 677, 20390, 20435), 0), 0, Tag1 ("Re__Core", 108)), 0); Tag3 (("View", 1040), 0, (Tag1 ([Tag1 (("t", 1117), (0, 0, Tag1 ([(("Set", 710), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Re__")), "Cset"), "t"), 0, (0)), 100000000, 0, -787)]), 0, (("lib/core.mli", 679, 20437, 20451), ("lib/core.mli", 702, 21174, 21198), 0), 0, Tag1 ("Re__Core", 111)); (("Sequence", 735), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -789)], (0)), 100000000, 0, -788)]), 0, (("lib/core.mli", 679, 20437, 20451), ("lib/core.mli", 702, 21174, 21198), 0), 0, Tag1 ("Re__Core", 112)); (("Alternative", 736), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -791)], (0)), 100000000, 0, -790)]), 0, (("lib/core.mli", 679, 20437, 20451), ("lib/core.mli", 702, 21174, 21198), 0), 0, Tag1 ("Re__Core", 113)); (("Repeat", 737), ([(Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -792); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -793); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -795)], (0)), 100000000, 0, -794)]), 0, (("lib/core.mli", 679, 20437, 20451), ("lib/core.mli", 702, 21174, 21198), 0), 0, Tag1 ("Re__Core", 114)); (("Beg_of_line", 738), (0), 0, (("lib/core.mli", 679, 20437, 20451), ("lib/core.mli", 702, 21174, 21198), 0), 0, Tag1 ("Re__Core", 115)); (("End_of_line", 739), (0), 0, (("lib/core.mli", 679, 20437, 20451), ("lib/core.mli", 702, 21174, 21198), 0), 0, Tag1 ("Re__Core", 116)); (("Beg_of_word", 740), (0), 0, (("lib/core.mli", 679, 20437, 20451), ("lib/core.mli", 702, 21174, 21198), 0), 0, Tag1 ("Re__Core", 117)); (("End_of_word", 741), (0), 0, (("lib/core.mli", 679, 20437, 20451), ("lib/core.mli", 702, 21174, 21198), 0), 0, Tag1 ("Re__Core", 118)); (("Not_bound", 742), (0), 0, (("lib/core.mli", 679, 20437, 20451), ("lib/core.mli", 702, 21174, 21198), 0), 0, Tag1 ("Re__Core", 119)); (("Beg_of_str", 743), (0), 0, (("lib/core.mli", 679, 20437, 20451), ("lib/core.mli", 702, 21174, 21198), 0), 0, Tag1 ("Re__Core", 120)); (("End_of_str", 744), (0), 0, (("lib/core.mli", 679, 20437, 20451), ("lib/core.mli", 702, 21174, 21198), 0), 0, Tag1 ("Re__Core", 121)); (("Last_end_of_line", 745), (0), 0, (("lib/core.mli", 679, 20437, 20451), ("lib/core.mli", 702, 21174, 21198), 0), 0, Tag1 ("Re__Core", 122)); (("Start", 746), (0), 0, (("lib/core.mli", 679, 20437, 20451), ("lib/core.mli", 702, 21174, 21198), 0), 0, Tag1 ("Re__Core", 123)); (("Stop", 747), (0), 0, (("lib/core.mli", 679, 20437, 20451), ("lib/core.mli", 702, 21174, 21198), 0), 0, Tag1 ("Re__Core", 124)); (("Sem", 748), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Re__")), "Automata"), "sem"), 0, (0)), 100000000, 0, -796); (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -797)]), 0, (("lib/core.mli", 679, 20437, 20451), ("lib/core.mli", 702, 21174, 21198), 0), 0, Tag1 ("Re__Core", 125)); (("Sem_greedy", 784), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Re__")), "Automata"), "rep_kind"), 0, (0)), 100000000, 0, -798); (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -799)]), 0, (("lib/core.mli", 679, 20437, 20451), ("lib/core.mli", 702, 21174, 21198), 0), 0, Tag1 ("Re__Core", 126)); (("Group", 785), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -801)], (0)), 100000000, 0, -800); (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -802)]), 0, (("lib/core.mli", 679, 20437, 20451), ("lib/core.mli", 702, 21174, 21198), 0), 0, Tag1 ("Re__Core", 127)); (("No_group", 786), ([(Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -803)]), 0, (("lib/core.mli", 679, 20437, 20451), ("lib/core.mli", 702, 21174, 21198), 0), 0, Tag1 ("Re__Core", 128)); (("Nest", 787), ([(Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -804)]), 0, (("lib/core.mli", 679, 20437, 20451), ("lib/core.mli", 702, 21174, 21198), 0), 0, Tag1 ("Re__Core", 129)); (("Case", 788), ([(Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -805)]), 0, (("lib/core.mli", 679, 20437, 20451), ("lib/core.mli", 702, 21174, 21198), 0), 0, Tag1 ("Re__Core", 130)); (("No_case", 789), ([(Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -806)]), 0, (("lib/core.mli", 679, 20437, 20451), ("lib/core.mli", 702, 21174, 21198), 0), 0, Tag1 ("Re__Core", 131)); (("Intersection", 790), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -808)], (0)), 100000000, 0, -807)]), 0, (("lib/core.mli", 679, 20437, 20451), ("lib/core.mli", 702, 21174, 21198), 0), 0, Tag1 ("Re__Core", 132)); (("Complement", 791), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -810)], (0)), 100000000, 0, -809)]), 0, (("lib/core.mli", 679, 20437, 20451), ("lib/core.mli", 702, 21174, 21198), 0), 0, Tag1 ("Re__Core", 133)); (("Difference", 792), ([(Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -811); (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -812)]), 0, (("lib/core.mli", 679, 20437, 20451), ("lib/core.mli", 702, 21174, 21198), 0), 0, Tag1 ("Re__Core", 134)); (("Pmark", 793), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Re__")), "Pmark"), "t"), 0, (0)), 100000000, 0, -813); (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -814)]), 0, (("lib/core.mli", 679, 20437, 20451), ("lib/core.mli", 702, 21174, 21198), 0), 0, Tag1 ("Re__Core", 135))], 0), 1, 0, 0, 0, 0, 0, (("lib/core.mli", 679, 20437, 20451), ("lib/core.mli", 702, 21174, 21198), 0), 0, 0, 0, Tag1 ("Re__Core", 110)), 1, 0); (("view", 1118), ((Tag1 (0, (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -786), (Tag3 ((("t", 1117)), 0, (0)), 100000000, 0, -785), 0), 100000000, 0, -784), 0, (("lib/core.mli", 679, 20437, 20451), ("lib/core.mli", 702, 21174, 21198), 0), 0, Tag1 ("Re__Core", 136)), 0)]), 0, (("lib/core.mli", 679, 20437, 20437), ("lib/core.mli", 702, 21174, 21198), 0), Tag1 ("Re__Core", 138)), 0, 0); (("witness", 1041), ((Tag1 (0, (Tag3 ((("t", 953)), 0, (0)), 100000000, 0, -41), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("lib/core.mli", 706, 21235, 21235), ("lib/core.mli", 706, 21235, 21260), 0), 0, Tag1 ("Re__Core", 139)), 0); Tag1 (("substrings", 1042), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Group", 955)), "t"), 0, (0)), 100000000, 0, -38)), 0, 0, 0, 0, (("lib/core.mli", 715, 21542, 21542), ("lib/core.mli", 716, 21568, 21602), 0), [(("ocaml.deprecated", (("lib/core.mli", 716, 21568, 21571), ("lib/core.mli", 716, 21568, 21587), 0)), ([([(Tag1 (Tag2 ("Use Group.t", (("lib/core.mli", 716, 21568, 21589), ("lib/core.mli", 716, 21568, 21600), 0), 0)), (("lib/core.mli", 716, 21568, 21588), ("lib/core.mli", 716, 21568, 21601), 0), 0, 0)], (("lib/core.mli", 716, 21568, 21588), ("lib/core.mli", 716, 21568, 21601), 0))]), (("lib/core.mli", 716, 21568, 21568), ("lib/core.mli", 716, 21568, 21602), 0))], 0, 0, Tag1 ("Re__Core", 140)), 1, 0); (("get", 1043), ((Tag1 (0, (Tag3 (Tag1 ((("Group", 955)), "t"), 0, (0)), 100000000, 0, -37), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -36), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -35), 0), 100000000, 0, -34), 0), 100000000, 0, -33), 0, (("lib/core.mli", 719, 21644, 21644), ("lib/core.mli", 720, 21679, 21715), 0), [(("ocaml.deprecated", (("lib/core.mli", 720, 21679, 21682), ("lib/core.mli", 720, 21679, 21698), 0)), ([([(Tag1 (Tag2 ("Use Group.get", (("lib/core.mli", 720, 21679, 21700), ("lib/core.mli", 720, 21679, 21713), 0), 0)), (("lib/core.mli", 720, 21679, 21699), ("lib/core.mli", 720, 21679, 21714), 0), 0, 0)], (("lib/core.mli", 720, 21679, 21699), ("lib/core.mli", 720, 21679, 21714), 0))]), (("lib/core.mli", 720, 21679, 21679), ("lib/core.mli", 720, 21679, 21715), 0))], Tag1 ("Re__Core", 141)), 0); (("get_ofs", 1044), ((Tag1 (0, (Tag3 (Tag1 ((("Group", 955)), "t"), 0, (0)), 100000000, 0, -32), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -31), (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -29); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -30)]), 100000000, 0, -28), 0), 100000000, 0, -27), 0), 100000000, 0, -26), 0, (("lib/core.mli", 723, 21757, 21757), ("lib/core.mli", 724, 21799, 21838), 0), [(("ocaml.deprecated", (("lib/core.mli", 724, 21799, 21802), ("lib/core.mli", 724, 21799, 21818), 0)), ([([(Tag1 (Tag2 ("Use Group.offset", (("lib/core.mli", 724, 21799, 21820), ("lib/core.mli", 724, 21799, 21836), 0), 0)), (("lib/core.mli", 724, 21799, 21819), ("lib/core.mli", 724, 21799, 21837), 0), 0, 0)], (("lib/core.mli", 724, 21799, 21819), ("lib/core.mli", 724, 21799, 21837), 0))]), (("lib/core.mli", 724, 21799, 21799), ("lib/core.mli", 724, 21799, 21838), 0))], Tag1 ("Re__Core", 142)), 0); (("get_all", 1045), ((Tag1 (0, (Tag3 (Tag1 ((("Group", 955)), "t"), 0, (0)), 100000000, 0, -25), (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -24)], (0)), 100000000, 0, -23), 0), 100000000, 0, -22), 0, (("lib/core.mli", 727, 21883, 21883), ("lib/core.mli", 728, 21921, 21957), 0), [(("ocaml.deprecated", (("lib/core.mli", 728, 21921, 21924), ("lib/core.mli", 728, 21921, 21940), 0)), ([([(Tag1 (Tag2 ("Use Group.all", (("lib/core.mli", 728, 21921, 21942), ("lib/core.mli", 728, 21921, 21955), 0), 0)), (("lib/core.mli", 728, 21921, 21941), ("lib/core.mli", 728, 21921, 21956), 0), 0, 0)], (("lib/core.mli", 728, 21921, 21941), ("lib/core.mli", 728, 21921, 21956), 0))]), (("lib/core.mli", 728, 21921, 21921), ("lib/core.mli", 728, 21921, 21957), 0))], Tag1 ("Re__Core", 143)), 0); (("get_all_ofs", 1046), ((Tag1 (0, (Tag3 (Tag1 ((("Group", 955)), "t"), 0, (0)), 100000000, 0, -21), (Tag3 ((Tag3 ("array", 8)), [(Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -19); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -20)]), 100000000, 0, -18)], (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("lib/core.mli", 731, 21999, 21999), ("lib/core.mli", 732, 22046, 22089), 0), [(("ocaml.deprecated", (("lib/core.mli", 732, 22046, 22049), ("lib/core.mli", 732, 22046, 22065), 0)), ([([(Tag1 (Tag2 ("Use Group.all_offset", (("lib/core.mli", 732, 22046, 22067), ("lib/core.mli", 732, 22046, 22087), 0), 0)), (("lib/core.mli", 732, 22046, 22066), ("lib/core.mli", 732, 22046, 22088), 0), 0, 0)], (("lib/core.mli", 732, 22046, 22066), ("lib/core.mli", 732, 22046, 22088), 0))]), (("lib/core.mli", 732, 22046, 22046), ("lib/core.mli", 732, 22046, 22089), 0))], Tag1 ("Re__Core", 144)), 0); (("test", 1047), ((Tag1 (0, (Tag3 (Tag1 ((("Group", 955)), "t"), 0, (0)), 100000000, 0, -15), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -14), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -13), 0), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("lib/core.mli", 735, 22138, 22138), ("lib/core.mli", 736, 22172, 22209), 0), [(("ocaml.deprecated", (("lib/core.mli", 736, 22172, 22175), ("lib/core.mli", 736, 22172, 22191), 0)), ([([(Tag1 (Tag2 ("Use Group.test", (("lib/core.mli", 736, 22172, 22193), ("lib/core.mli", 736, 22172, 22207), 0), 0)), (("lib/core.mli", 736, 22172, 22192), ("lib/core.mli", 736, 22172, 22208), 0), 0, 0)], (("lib/core.mli", 736, 22172, 22192), ("lib/core.mli", 736, 22172, 22208), 0))]), (("lib/core.mli", 736, 22172, 22172), ("lib/core.mli", 736, 22172, 22209), 0))], Tag1 ("Re__Core", 145)), 0); Tag1 (("markid", 1048), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Mark", 965)), "t"), 0, (0)), 100000000, 0, -10)), 0, 0, 0, 0, (("lib/core.mli", 739, 22252, 22252), ("lib/core.mli", 740, 22273, 22305), 0), [(("ocaml.deprecated", (("lib/core.mli", 740, 22273, 22276), ("lib/core.mli", 740, 22273, 22292), 0)), ([([(Tag1 (Tag2 ("Use Mark.", (("lib/core.mli", 740, 22273, 22294), ("lib/core.mli", 740, 22273, 22303), 0), 0)), (("lib/core.mli", 740, 22273, 22293), ("lib/core.mli", 740, 22273, 22304), 0), 0, 0)], (("lib/core.mli", 740, 22273, 22293), ("lib/core.mli", 740, 22273, 22304), 0))]), (("lib/core.mli", 740, 22273, 22273), ("lib/core.mli", 740, 22273, 22305), 0))], 0, 0, Tag1 ("Re__Core", 146)), 1, 0); (("marked", 1049), ((Tag1 (0, (Tag3 (Tag1 ((("Group", 955)), "t"), 0, (0)), 100000000, 0, -9), (Tag1 (0, (Tag3 (Tag1 ((("Mark", 965)), "t"), 0, (0)), 100000000, 0, -8), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("lib/core.mli", 743, 22346, 22346), ("lib/core.mli", 744, 22385, 22421), 0), [(("ocaml.deprecated", (("lib/core.mli", 744, 22385, 22388), ("lib/core.mli", 744, 22385, 22404), 0)), ([([(Tag1 (Tag2 ("Use Mark.test", (("lib/core.mli", 744, 22385, 22406), ("lib/core.mli", 744, 22385, 22419), 0), 0)), (("lib/core.mli", 744, 22385, 22405), ("lib/core.mli", 744, 22385, 22420), 0), 0, 0)], (("lib/core.mli", 744, 22385, 22405), ("lib/core.mli", 744, 22385, 22420), 0))]), (("lib/core.mli", 744, 22385, 22385), ("lib/core.mli", 744, 22385, 22421), 0))], Tag1 ("Re__Core", 147)), 0); (("mark_set", 1050), ((Tag1 (0, (Tag3 (Tag1 ((("Group", 955)), "t"), 0, (0)), 100000000, 0, -4), (Tag3 (Tag1 (Tag1 ((("Mark", 965)), "Set"), "t"), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("lib/core.mli", 747, 22463, 22463), ("lib/core.mli", 748, 22500, 22535), 0), [(("ocaml.deprecated", (("lib/core.mli", 748, 22500, 22503), ("lib/core.mli", 748, 22500, 22519), 0)), ([([(Tag1 (Tag2 ("Use Mark.all", (("lib/core.mli", 748, 22500, 22521), ("lib/core.mli", 748, 22500, 22533), 0), 0)), (("lib/core.mli", 748, 22500, 22520), ("lib/core.mli", 748, 22500, 22534), 0), 0, 0)], (("lib/core.mli", 748, 22500, 22520), ("lib/core.mli", 748, 22500, 22534), 0))]), (("lib/core.mli", 748, 22500, 22500), ("lib/core.mli", 748, 22500, 22535), 0))], Tag1 ("Re__Core", 148)), 0)], "Re__Core", [("Re__Core", ("u\184\236\029t\183=\150\227\183\016\196\129\199\174\130")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Re__Pmark", ("\165ks<XZ[\223&\136\255\140G\016\025p")); ("Re__Cset", ("\225r\195\178\225\254S\020 \207H\235\1795\0213")); ("Re__Category", ("\212tx\171G\0000\176\132_\219\135_o\135\016")); ("Re__Automata", ("\228y\t\192\135)\001\027\154pU\252\\wv\141")); ("Re__", ("\0062t\168b\007\236c5\231\253,\210\160Z\n")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

val mark_set : Group.t -> Mark.Set.t

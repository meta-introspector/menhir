val struct_ast_search :
  (Extraction_plugin.Miniml.ml_ast -> bool) ->
  Extraction_plugin.Miniml.ml_structure -> bool
val struct_type_search :
  (Extraction_plugin.Miniml.ml_type -> bool) ->
  Extraction_plugin.Miniml.ml_structure -> bool
type do_ref = Names.GlobRef.t -> unit
val type_iter_references : do_ref -> Extraction_plugin.Miniml.ml_type -> unit
val ast_iter_references :
  do_ref -> do_ref -> do_ref -> Extraction_plugin.Miniml.ml_ast -> unit
val decl_iter_references :
  do_ref -> do_ref -> do_ref -> Extraction_plugin.Miniml.ml_decl -> unit
val spec_iter_references :
  do_ref -> do_ref -> do_ref -> Extraction_plugin.Miniml.ml_spec -> unit
val signature_of_structure :
  Extraction_plugin.Miniml.ml_structure ->
  Extraction_plugin.Miniml.ml_signature
val mtyp_of_mexpr :
  Extraction_plugin.Miniml.ml_module_expr ->
  Extraction_plugin.Miniml.ml_module_type
val msid_of_mt : Extraction_plugin.Miniml.ml_module_type -> Names.ModPath.t
val get_decl_in_structure :
  Names.GlobRef.t ->
  Extraction_plugin.Miniml.ml_structure -> Extraction_plugin.Miniml.ml_decl
val optimize_struct :
  Names.GlobRef.t list * Names.ModPath.t list ->
  Extraction_plugin.Miniml.ml_structure ->
  ("DEBUG:rule", [(("struct_ast_search", 426), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -73), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -72), 0), 100000000, 0, -71), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_structure"), 0, (0)), 100000000, 0, -70), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -69), 0), 100000000, 0, -68), 0), 100000000, 0, -67), 0, (("plugins/extraction/modutil.mli", 16, 735, 735), ("plugins/extraction/modutil.mli", 16, 735, 799), 0), 0, Tag1 ("Extraction_plugin__Modutil", 0)), 0); (("struct_type_search", 427), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -66), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -65), 0), 100000000, 0, -64), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_structure"), 0, (0)), 100000000, 0, -63), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -62), 0), 100000000, 0, -61), 0), 100000000, 0, -60), 0, (("plugins/extraction/modutil.mli", 17, 800, 800), ("plugins/extraction/modutil.mli", 17, 800, 866), 0), 0, Tag1 ("Extraction_plugin__Modutil", 1)), 0); Tag1 (("do_ref", 428), (0, 0, 0, 1, ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -59), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -58), 0), 100000000, 0, -57)), 0, 0, 0, 0, (("plugins/extraction/modutil.mli", 19, 868, 868), ("plugins/extraction/modutil.mli", 19, 868, 899), 0), 0, 0, 0, Tag1 ("Extraction_plugin__Modutil", 2)), 1, 0); (("type_iter_references", 429), ((Tag1 (0, (Tag3 ((("do_ref", 428)), 0, (0)), 100000000, 0, -56), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -55), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52), 0, (("plugins/extraction/modutil.mli", 21, 901, 901), ("plugins/extraction/modutil.mli", 21, 901, 953), 0), 0, Tag1 ("Extraction_plugin__Modutil", 3)), 0); (("ast_iter_references", 430), ((Tag1 (0, (Tag3 ((("do_ref", 428)), 0, (0)), 100000000, 0, -51), (Tag1 (0, (Tag3 ((("do_ref", 428)), 0, (0)), 100000000, 0, -50), (Tag1 (0, (Tag3 ((("do_ref", 428)), 0, (0)), 100000000, 0, -49), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -48), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -47), 0), 100000000, 0, -46), 0), 100000000, 0, -45), 0), 100000000, 0, -44), 0), 100000000, 0, -43), 0, (("plugins/extraction/modutil.mli", 22, 954, 954), ("plugins/extraction/modutil.mli", 22, 954, 1024), 0), 0, Tag1 ("Extraction_plugin__Modutil", 4)), 0); (("decl_iter_references", 431), ((Tag1 (0, (Tag3 ((("do_ref", 428)), 0, (0)), 100000000, 0, -42), (Tag1 (0, (Tag3 ((("do_ref", 428)), 0, (0)), 100000000, 0, -41), (Tag1 (0, (Tag3 ((("do_ref", 428)), 0, (0)), 100000000, 0, -40), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_decl"), 0, (0)), 100000000, 0, -39), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -38), 0), 100000000, 0, -37), 0), 100000000, 0, -36), 0), 100000000, 0, -35), 0), 100000000, 0, -34), 0, (("plugins/extraction/modutil.mli", 23, 1025, 1025), ("plugins/extraction/modutil.mli", 23, 1025, 1097), 0), 0, Tag1 ("Extraction_plugin__Modutil", 5)), 0); (("spec_iter_references", 432), ((Tag1 (0, (Tag3 ((("do_ref", 428)), 0, (0)), 100000000, 0, -33), (Tag1 (0, (Tag3 ((("do_ref", 428)), 0, (0)), 100000000, 0, -32), (Tag1 (0, (Tag3 ((("do_ref", 428)), 0, (0)), 100000000, 0, -31), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_spec"), 0, (0)), 100000000, 0, -30), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -29), 0), 100000000, 0, -28), 0), 100000000, 0, -27), 0), 100000000, 0, -26), 0), 100000000, 0, -25), 0, (("plugins/extraction/modutil.mli", 24, 1098, 1098), ("plugins/extraction/modutil.mli", 24, 1098, 1170), 0), 0, Tag1 ("Extraction_plugin__Modutil", 6)), 0); (("signature_of_structure", 433), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_structure"), 0, (0)), 100000000, 0, -24), (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_signature"), 0, (0)), 100000000, 0, -23), 0), 100000000, 0, -22), 0, (("plugins/extraction/modutil.mli", 26, 1172, 1172), ("plugins/extraction/modutil.mli", 26, 1172, 1229), 0), 0, Tag1 ("Extraction_plugin__Modutil", 7)), 0); (("mtyp_of_mexpr", 434), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_module_expr"), 0, (0)), 100000000, 0, -21), (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_module_type"), 0, (0)), 100000000, 0, -20), 0), 100000000, 0, -19), 0, (("plugins/extraction/modutil.mli", 28, 1231, 1231), ("plugins/extraction/modutil.mli", 28, 1231, 1283), 0), 0, Tag1 ("Extraction_plugin__Modutil", 8)), 0); (("msid_of_mt", 435), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_module_type"), 0, (0)), 100000000, 0, -18), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("plugins/extraction/modutil.mli", 30, 1285, 1285), ("plugins/extraction/modutil.mli", 30, 1285, 1329), 0), 0, Tag1 ("Extraction_plugin__Modutil", 9)), 0); (("get_decl_in_structure", 436), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -15), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_structure"), 0, (0)), 100000000, 0, -14), (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_decl"), 0, (0)), 100000000, 0, -13), 0), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("plugins/extraction/modutil.mli", 32, 1331, 1331), ("plugins/extraction/modutil.mli", 32, 1331, 1395), 0), 0, Tag1 ("Extraction_plugin__Modutil", 10)), 0); (("optimize_struct", 437), ((Tag1 (0, (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -8)], (0)), 100000000, 0, -7); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -10)], (0)), 100000000, 0, -9)]), 100000000, 0, -6), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_structure"), 0, (0)), 100000000, 0, -5), (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_structure"), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("plugins/extraction/modutil.mli", 41, 1759, 1759), ("plugins/extraction/modutil.mli", 42, 1816, 1846), 0), 0, Tag1 ("Extraction_plugin__Modutil", 11)), 0)], "Extraction_plugin__Modutil", [("Extraction_plugin__Modutil", ("\252\246\242\247\255B\186\233jiu\n\004]\220\243")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Extraction_plugin__Miniml", ("\130\229}\135\140\233\017o.s\132\238\240\155\168f")); ("Extraction_plugin", ("o,\156$\195_6\238J\232\255\189\197B\169\n")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150"))], [(0)])
Extraction_plugin.Miniml.ml_structure

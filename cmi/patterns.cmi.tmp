val omega : Typedtree.pattern
val omegas : int -> Typedtree.pattern list
val omega_list : 'a list -> Typedtree.pattern list
module Non_empty_row :
  sig
    type 'a t = 'a * Typedtree.pattern list
    val of_initial : Typedtree.pattern list -> Typedtree.pattern t
    val map_first : ('a -> 'b) -> 'a t -> 'b t
  end
module Simple :
  sig
    type view =
        [ `Any
        | `Array of Typedtree.pattern list
        | `Constant of Asttypes.constant
        | `Construct of
            Longident.t Asttypes.loc * Types.constructor_description *
            Typedtree.pattern list
        | `Lazy of Typedtree.pattern
        | `Record of
            (Longident.t Asttypes.loc * Types.label_description *
             Typedtree.pattern)
            list * Asttypes.closed_flag
        | `Tuple of Typedtree.pattern list
        | `Variant of
            Asttypes.label * Typedtree.pattern option * Types.row_desc ref ]
    type pattern = view Typedtree.pattern_data
    val omega : [> view ] Typedtree.pattern_data
  end
module Half_simple :
  sig
    type view =
        [ `Any
        | `Array of Typedtree.pattern list
        | `Constant of Asttypes.constant
        | `Construct of
            Longident.t Asttypes.loc * Types.constructor_description *
            Typedtree.pattern list
        | `Lazy of Typedtree.pattern
        | `Or of
            Typedtree.pattern * Typedtree.pattern * Types.row_desc option
        | `Record of
            (Longident.t Asttypes.loc * Types.label_description *
             Typedtree.pattern)
            list * Asttypes.closed_flag
        | `Tuple of Typedtree.pattern list
        | `Variant of
            Asttypes.label * Typedtree.pattern option * Types.row_desc ref ]
    type pattern = view Typedtree.pattern_data
  end
module General :
  sig
    type view =
        [ `Alias of Typedtree.pattern * Ident.t * string Asttypes.loc
        | `Any
        | `Array of Typedtree.pattern list
        | `Constant of Asttypes.constant
        | `Construct of
            Longident.t Asttypes.loc * Types.constructor_description *
            Typedtree.pattern list
        | `Lazy of Typedtree.pattern
        | `Or of
            Typedtree.pattern * Typedtree.pattern * Types.row_desc option
        | `Record of
            (Longident.t Asttypes.loc * Types.label_description *
             Typedtree.pattern)
            list * Asttypes.closed_flag
        | `Tuple of Typedtree.pattern list
        | `Var of Ident.t * string Asttypes.loc
        | `Variant of
            Asttypes.label * Typedtree.pattern option * Types.row_desc ref ]
    type pattern = view Typedtree.pattern_data
    val view : Typedtree.pattern -> pattern
    val erase : [< view ] Typedtree.pattern_data -> Typedtree.pattern
    val strip_vars : pattern -> Half_simple.pattern
  end
module Head :
  sig
    type desc =
        Any
      | Construct of Types.constructor_description
      | Constant of Asttypes.constant
      | Tuple of int
      | Record of Types.label_description list
      | Variant of { tag : Asttypes.label; has_arg : bool;
          cstr_row : Types.row_desc ref; type_row : unit -> Types.row_desc;
        }
      | Array of int
      | Lazy
    type t = desc Typedtree.pattern_data
    val arity : t -> int
    val deconstruct : Simple.pattern -> t * Typedtree.pattern list
    val to_omega_pattern : t -> Typedtree.pattern
    val omega : t("DEBUG:rule", [(("omega", 636), ((Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -11), 0, (("typing/patterns.mli", 21, 1197, 1197), ("typing/patterns.mli", 21, 1197, 1216), 0), 0, Tag1 ("Patterns", 4)), 0); (("omegas", 637), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -10), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -9)], (0)), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("typing/patterns.mli", 24, 1249, 1249), ("typing/patterns.mli", 24, 1249, 1281), 0), 0, Tag1 ("Patterns", 5)), 0); (("omega_list", 638), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -6)], (0)), 100000000, 0, -5), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -4)], (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("typing/patterns.mli", 27, 1319, 1319), ("typing/patterns.mli", 27, 1319, 1359), 0), 0, Tag1 ("Patterns", 6)), 0); Tag3 (("Non_empty_row", 639), 0, (Tag1 ([Tag1 (("t", 644), ([((("a")), 100000000, 0, -25)], 1, 0, 1, ((Tag2 ([((("a")), 100000000, 0, -25); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -27)], (0)), 100000000, 0, -26)]), 100000000, 0, -24)), [25], [0], 0, 0, (("typing/patterns.mli", 31, 1423, 1425), ("typing/patterns.mli", 31, 1423, 1464), 0), 0, 0, 0, Tag1 ("Patterns", 7)), 1, 0); (("of_initial", 645), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -23)], (0)), 100000000, 0, -22), (Tag3 ((("t", 644)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -21)], (0)), 100000000, 0, -20), 0), 100000000, 0, -19), 0, (("typing/patterns.mli", 33, 1466, 1468), ("typing/patterns.mli", 33, 1466, 1530), 0), 0, Tag1 ("Patterns", 8)), 0); (("map_first", 646), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -17), ((("b")), 100000000, 0, -15), 0), 100000000, 0, -18), (Tag1 (0, (Tag3 ((("t", 644)), [((("a")), 100000000, 0, -17)], (0)), 100000000, 0, -16), (Tag3 ((("t", 644)), [((("b")), 100000000, 0, -15)], (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("typing/patterns.mli", 36, 1570, 1572), ("typing/patterns.mli", 36, 1570, 1614), 0), 0, Tag1 ("Patterns", 9)), 0)]), 0, (("typing/patterns.mli", 30, 1396, 1396), ("typing/patterns.mli", 37, 1615, 1618), 0), Tag1 ("Patterns", 10)), 0, 0); Tag3 (("Simple", 640), 0, (Tag1 ([Tag1 (("view", 647), (0, 0, 0, 1, ((Tag8 (([("Any", (0)); ("Array", (((Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -64)], (0)), 100000000, 0, -63)))); ("Constant", (((Tag3 (Tag1 ((Tag2 ("Asttypes")), "constant"), 0, (0)), 100000000, 0, -86)))); ("Construct", (((Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -82)], (0)), 100000000, 0, -81); (Tag3 (Tag1 ((Tag2 ("Types")), "constructor_description"), 0, (0)), 100000000, 0, -83); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -85)], (0)), 100000000, 0, -84)]), 100000000, 0, -80)))); ("Lazy", (((Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -79)))); ("Record", (((Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -75)], (0)), 100000000, 0, -74); (Tag3 (Tag1 ((Tag2 ("Types")), "label_description"), 0, (0)), 100000000, 0, -76); (Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -77)]), 100000000, 0, -73)], (0)), 100000000, 0, -72); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "closed_flag"), 0, (0)), 100000000, 0, -78)]), 100000000, 0, -71)))); ("Tuple", (((Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -62)], (0)), 100000000, 0, -61)))); ("Variant", (((Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -66); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -68)], (0)), 100000000, 0, -67); (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 (Tag1 ((Tag2 ("Types")), "row_desc"), 0, (0)), 100000000, 0, -70)], (0)), 100000000, 0, -69)]), 100000000, 0, -65))))], (0, 100000000, 0, -60), 1, 0, 0)), 100000000, 0, -59)), 0, 0, 0, 0, (("typing/patterns.mli", 40, 1640, 1642), ("typing/patterns.mli", 51, 2009, 2012), 0), 0, 0, 0, Tag1 ("Patterns", 11)), 1, 0); Tag1 (("pattern", 648), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern_data"), [(Tag3 ((("view", 647)), 0, (0)), 100000000, 0, -58)], (0)), 100000000, 0, -57)), 0, 0, 0, 0, (("typing/patterns.mli", 52, 2013, 2015), ("typing/patterns.mli", 52, 2013, 2047), 0), 0, 0, 0, Tag1 ("Patterns", 12)), 1, 0); (("omega", 649), ((Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern_data"), [(Tag8 (([("Any", (0)); ("Array", (((Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -34)], (0)), 100000000, 0, -33)))); ("Constant", (((Tag3 (Tag1 ((Tag2 ("Asttypes")), "constant"), 0, (0)), 100000000, 0, -56)))); ("Construct", (((Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -52)], (0)), 100000000, 0, -51); (Tag3 (Tag1 ((Tag2 ("Types")), "constructor_description"), 0, (0)), 100000000, 0, -53); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -55)], (0)), 100000000, 0, -54)]), 100000000, 0, -50)))); ("Lazy", (((Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -49)))); ("Record", (((Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -45)], (0)), 100000000, 0, -44); (Tag3 (Tag1 ((Tag2 ("Types")), "label_description"), 0, (0)), 100000000, 0, -46); (Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -47)]), 100000000, 0, -43)], (0)), 100000000, 0, -42); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "closed_flag"), 0, (0)), 100000000, 0, -48)]), 100000000, 0, -41)))); ("Tuple", (((Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -32)], (0)), 100000000, 0, -31)))); ("Variant", (((Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -36); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -38)], (0)), 100000000, 0, -37); (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 (Tag1 ((Tag2 ("Types")), "row_desc"), 0, (0)), 100000000, 0, -40)], (0)), 100000000, 0, -39)]), 100000000, 0, -35))))], ((0), 100000000, 0, -30), 0, 0, ([(("view", 647))]))), 100000000, 0, -29)], (0)), 100000000, 0, -28), 0, (("typing/patterns.mli", 54, 2049, 2051), ("typing/patterns.mli", 54, 2049, 2085), 0), 0, Tag1 ("Patterns", 13)), 0)]), 0, (("typing/patterns.mli", 39, 1620, 1620), ("typing/patterns.mli", 55, 2086, 2089), 0), Tag1 ("Patterns", 14)), 0, 0); Tag3 (("Half_simple", 641), 0, (Tag1 ([Tag1 (("view", 650), (0, 0, 0, 1, ((Tag8 (([("Any", (0)); ("Array", (((Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -94)], (0)), 100000000, 0, -93)))); ("Constant", (((Tag3 (Tag1 ((Tag2 ("Asttypes")), "constant"), 0, (0)), 100000000, 0, -121)))); ("Construct", (((Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -117)], (0)), 100000000, 0, -116); (Tag3 (Tag1 ((Tag2 ("Types")), "constructor_description"), 0, (0)), 100000000, 0, -118); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -120)], (0)), 100000000, 0, -119)]), 100000000, 0, -115)))); ("Lazy", (((Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -109)))); ("Or", (((Tag2 ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -111); (Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -112); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Types")), "row_desc"), 0, (0)), 100000000, 0, -114)], (0)), 100000000, 0, -113)]), 100000000, 0, -110)))); ("Record", (((Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -105)], (0)), 100000000, 0, -104); (Tag3 (Tag1 ((Tag2 ("Types")), "label_description"), 0, (0)), 100000000, 0, -106); (Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -107)]), 100000000, 0, -103)], (0)), 100000000, 0, -102); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "closed_flag"), 0, (0)), 100000000, 0, -108)]), 100000000, 0, -101)))); ("Tuple", (((Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -92)], (0)), 100000000, 0, -91)))); ("Variant", (((Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -96); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -98)], (0)), 100000000, 0, -97); (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 (Tag1 ((Tag2 ("Types")), "row_desc"), 0, (0)), 100000000, 0, -100)], (0)), 100000000, 0, -99)]), 100000000, 0, -95))))], (0, 100000000, 0, -90), 1, 0, 0)), 100000000, 0, -89)), 0, 0, 0, 0, (("typing/patterns.mli", 58, 2116, 2118), ("typing/patterns.mli", 61, 2199, 2202), 0), 0, 0, 0, Tag1 ("Patterns", 15)), 1, 0); Tag1 (("pattern", 651), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern_data"), [(Tag3 ((("view", 650)), 0, (0)), 100000000, 0, -88)], (0)), 100000000, 0, -87)), 0, 0, 0, 0, (("typing/patterns.mli", 62, 2203, 2205), ("typing/patterns.mli", 62, 2203, 2237), 0), 0, 0, 0, Tag1 ("Patterns", 16)), 1, 0)]), 0, (("typing/patterns.mli", 57, 2091, 2091), ("typing/patterns.mli", 63, 2238, 2241), 0), Tag1 ("Patterns", 17)), 0, 0); Tag3 (("General", 642), 0, (Tag1 ([Tag1 (("view", 652), (0, 0, 0, 1, ((Tag8 (([("Alias", (((Tag2 ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -212); (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -213); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -215)], (0)), 100000000, 0, -214)]), 100000000, 0, -211)))); ("Any", (0)); ("Array", (((Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -184)], (0)), 100000000, 0, -183)))); ("Constant", (((Tag3 (Tag1 ((Tag2 ("Asttypes")), "constant"), 0, (0)), 100000000, 0, -216)))); ("Construct", (((Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -207)], (0)), 100000000, 0, -206); (Tag3 (Tag1 ((Tag2 ("Types")), "constructor_description"), 0, (0)), 100000000, 0, -208); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -210)], (0)), 100000000, 0, -209)]), 100000000, 0, -205)))); ("Lazy", (((Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -199)))); ("Or", (((Tag2 ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -201); (Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -202); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Types")), "row_desc"), 0, (0)), 100000000, 0, -204)], (0)), 100000000, 0, -203)]), 100000000, 0, -200)))); ("Record", (((Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -195)], (0)), 100000000, 0, -194); (Tag3 (Tag1 ((Tag2 ("Types")), "label_description"), 0, (0)), 100000000, 0, -196); (Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -197)]), 100000000, 0, -193)], (0)), 100000000, 0, -192); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "closed_flag"), 0, (0)), 100000000, 0, -198)]), 100000000, 0, -191)))); ("Tuple", (((Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -178)], (0)), 100000000, 0, -177)))); ("Var", (((Tag2 ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -180); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -182)], (0)), 100000000, 0, -181)]), 100000000, 0, -179)))); ("Variant", (((Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -186); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -188)], (0)), 100000000, 0, -187); (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 (Tag1 ((Tag2 ("Types")), "row_desc"), 0, (0)), 100000000, 0, -190)], (0)), 100000000, 0, -189)]), 100000000, 0, -185))))], (0, 100000000, 0, -176), 1, 0, 0)), 100000000, 0, -175)), 0, 0, 0, 0, (("typing/patterns.mli", 66, 2264, 2266), ("typing/patterns.mli", 70, 2385, 2388), 0), 0, 0, 0, Tag1 ("Patterns", 18)), 1, 0); Tag1 (("pattern", 653), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern_data"), [(Tag3 ((("view", 652)), 0, (0)), 100000000, 0, -174)], (0)), 100000000, 0, -173)), 0, 0, 0, 0, (("typing/patterns.mli", 71, 2389, 2391), ("typing/patterns.mli", 71, 2389, 2423), 0), 0, 0, 0, Tag1 ("Patterns", 19)), 1, 0); (("view", 654), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -172), (Tag3 ((("pattern", 653)), 0, (0)), 100000000, 0, -171), 0), 100000000, 0, -170), 0, (("typing/patterns.mli", 73, 2425, 2427), ("typing/patterns.mli", 73, 2425, 2466), 0), 0, Tag1 ("Patterns", 20)), 0); (("erase", 655), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern_data"), [(Tag8 (([("Alias", Tag1 (0, [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -165); (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -166); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -168)], (0)), 100000000, 0, -167)]), 100000000, 0, -164)], 0, (1))); ("Any", Tag1 (1, 0, 0, (1))); ("Array", Tag1 (0, [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -133)], (0)), 100000000, 0, -132)], 0, (1))); ("Constant", Tag1 (0, [(Tag3 (Tag1 ((Tag2 ("Asttypes")), "constant"), 0, (0)), 100000000, 0, -169)], 0, (1))); ("Construct", Tag1 (0, [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -160)], (0)), 100000000, 0, -159); (Tag3 (Tag1 ((Tag2 ("Types")), "constructor_description"), 0, (0)), 100000000, 0, -161); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -163)], (0)), 100000000, 0, -162)]), 100000000, 0, -158)], 0, (1))); ("Lazy", Tag1 (0, [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -152)], 0, (1))); ("Or", Tag1 (0, [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -154); (Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -155); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Types")), "row_desc"), 0, (0)), 100000000, 0, -157)], (0)), 100000000, 0, -156)]), 100000000, 0, -153)], 0, (1))); ("Record", Tag1 (0, [(Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -148)], (0)), 100000000, 0, -147); (Tag3 (Tag1 ((Tag2 ("Types")), "label_description"), 0, (0)), 100000000, 0, -149); (Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -150)]), 100000000, 0, -146)], (0)), 100000000, 0, -145); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "closed_flag"), 0, (0)), 100000000, 0, -151)]), 100000000, 0, -144)], 0, (1))); ("Tuple", Tag1 (0, [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -131)], (0)), 100000000, 0, -130)], 0, (1))); ("Var", Tag1 (0, [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -135); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -137)], (0)), 100000000, 0, -136)]), 100000000, 0, -134)], 0, (1))); ("Variant", Tag1 (0, [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -139); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -141)], (0)), 100000000, 0, -140); (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 (Tag1 ((Tag2 ("Types")), "row_desc"), 0, (0)), 100000000, 0, -143)], (0)), 100000000, 0, -142)]), 100000000, 0, -138)], 0, (1)))], ((0), 100000000, 0, -129), 1, 0, ([(("view", 652))]))), 100000000, 0, -128)], (0)), 100000000, 0, -127), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -126), 0), 100000000, 0, -125), 0, (("typing/patterns.mli", 74, 2467, 2469), ("typing/patterns.mli", 74, 2467, 2524), 0), 0, Tag1 ("Patterns", 21)), 0); (("strip_vars", 656), ((Tag1 (0, (Tag3 ((("pattern", 653)), 0, (0)), 100000000, 0, -124), (Tag3 (Tag1 ((("Half_simple", 641)), "pattern"), 0, (0)), 100000000, 0, -123), 0), 100000000, 0, -122), 0, (("typing/patterns.mli", 76, 2526, 2528), ("typing/patterns.mli", 76, 2526, 2575), 0), 0, Tag1 ("Patterns", 22)), 0)]), 0, (("typing/patterns.mli", 65, 2243, 2243), ("typing/patterns.mli", 77, 2576, 2579), 0), Tag1 ("Patterns", 23)), 0, 0); Tag3 (("Head", 643), 0, (Tag1 ([Tag1 (("desc", 657), (0, 0, Tag1 ([(("Any", 618), (0), 0, (("typing/patterns.mli", 81, 2613, 2617), ("typing/patterns.mli", 81, 2613, 2622), 0), 0, Tag1 ("Patterns", 25)); (("Construct", 619), ([(Tag3 (Tag1 ((Tag2 ("Types")), "constructor_description"), 0, (0)), 100000000, 0, -232)]), 0, (("typing/patterns.mli", 82, 2623, 2627), ("typing/patterns.mli", 82, 2623, 2665), 0), 0, Tag1 ("Patterns", 26)); (("Constant", 620), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "constant"), 0, (0)), 100000000, 0, -233)]), 0, (("typing/patterns.mli", 83, 2666, 2670), ("typing/patterns.mli", 83, 2666, 2692), 0), 0, Tag1 ("Patterns", 27)); (("Tuple", 621), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -234)]), 0, (("typing/patterns.mli", 84, 2693, 2697), ("typing/patterns.mli", 84, 2693, 2711), 0), 0, Tag1 ("Patterns", 28)); (("Record", 622), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "label_description"), 0, (0)), 100000000, 0, -236)], (0)), 100000000, 0, -235)]), 0, (("typing/patterns.mli", 85, 2712, 2716), ("typing/patterns.mli", 85, 2712, 2750), 0), 0, Tag1 ("Patterns", 29)); (("Variant", 623), Tag1 ([(("tag", 624), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -237), (("typing/patterns.mli", 87, 2768, 2778), ("typing/patterns.mli", 87, 2768, 2789), 0), 0, Tag1 ("Patterns", 30)); (("has_arg", 625), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -238), (("typing/patterns.mli", 87, 2768, 2790), ("typing/patterns.mli", 87, 2768, 2804), 0), 0, Tag1 ("Patterns", 31)); (("cstr_row", 626), 0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 (Tag1 ((Tag2 ("Types")), "row_desc"), 0, (0)), 100000000, 0, -240)], (0)), 100000000, 0, -239), (("typing/patterns.mli", 88, 2805, 2815), ("typing/patterns.mli", 88, 2805, 2838), 0), 0, Tag1 ("Patterns", 32)); (("type_row", 627), 0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -243), (Tag3 (Tag1 ((Tag2 ("Types")), "row_desc"), 0, (0)), 100000000, 0, -242), 0), 100000000, 0, -241), (("typing/patterns.mli", 89, 2839, 2849), ("typing/patterns.mli", 89, 2839, 2877), 0), 0, Tag1 ("Patterns", 33))]), 0, (("typing/patterns.mli", 86, 2751, 2755), ("typing/patterns.mli", 89, 2839, 2879), 0), 0, Tag1 ("Patterns", 34)); (("Array", 628), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -244)]), 0, (("typing/patterns.mli", 92, 3000, 3004), ("typing/patterns.mli", 92, 3000, 3018), 0), 0, Tag1 ("Patterns", 35)); (("Lazy", 629), (0), 0, (("typing/patterns.mli", 93, 3019, 3023), ("typing/patterns.mli", 93, 3019, 3029), 0), 0, Tag1 ("Patterns", 36))], 0), 1, 0, 0, 0, 0, 0, (("typing/patterns.mli", 80, 2599, 2601), ("typing/patterns.mli", 93, 3019, 3029), 0), 0, 0, 0, Tag1 ("Patterns", 24)), 1, 0); Tag1 (("t", 658), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern_data"), [(Tag3 ((("desc", 657)), 0, (0)), 100000000, 0, -231)], (0)), 100000000, 0, -230)), 0, 0, 0, 0, (("typing/patterns.mli", 95, 3031, 3033), ("typing/patterns.mli", 95, 3031, 3059), 0), 0, 0, 0, Tag1 ("Patterns", 42)), 1, 0); (("arity", 659), ((Tag1 (0, (Tag3 ((("t", 658)), 0, (0)), 100000000, 0, -229), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -228), 0), 100000000, 0, -227), 0, (("typing/patterns.mli", 97, 3061, 3063), ("typing/patterns.mli", 97, 3061, 3083), 0), 0, Tag1 ("Patterns", 43)), 0); (("deconstruct", 660), ((Tag1 (0, (Tag3 (Tag1 ((("Simple", 640)), "pattern"), 0, (0)), 100000000, 0, -226), (Tag2 ([(Tag3 ((("t", 658)), 0, (0)), 100000000, 0, -223); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -225)], (0)), 100000000, 0, -224)]), 100000000, 0, -222), 0), 100000000, 0, -221), 0, (("typing/patterns.mli", 102, 3237, 3239), ("typing/patterns.mli", 102, 3237, 3291), 0), 0, Tag1 ("Patterns", 44)), 0); (("to_omega_pattern", 661), ((Tag1 (0, (Tag3 ((("t", 658)), 0, (0)), 100000000, 0, -220), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -219), 0), 100000000, 0, -218), 0, (("typing/patterns.mli", 105, 3361, 3363), ("typing/patterns.mli", 105, 3361, 3398), 0), 0, Tag1 ("Patterns", 45)), 0); (("omega", 662), ((Tag3 ((("t", 658)), 0, (0)), 100000000, 0, -217), 0, (("typing/patterns.mli", 107, 3400, 3402), ("typing/patterns.mli", 107, 3400, 3415), 0), 0, Tag1 ("Patterns", 46)), 0)]), 0, (("typing/patterns.mli", 79, 2581, 2581), ("typing/patterns.mli", 109, 3417, 3420), 0), Tag1 ("Patterns", 47)), 0, 0)], "Patterns", [("Patterns", ("\020BJ\007\246&\rx\024\018H\216\252\213Gp")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Typedtree", ("c5z\186\175w\146\254\018V\184\031\0038\004\227")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Subst", ("\021\031\148\223\127\186\189\135\027}\145r\216\143\177\156")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Load_path", ("\012@\228l\230\164S\172h\1726X\020\252o}")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("Env", ("\021\n\181\142x\b\169j\227\"\017\248*\178\245\223")); ("Cmi_format", ("6\177\bU\139\"\023\152=\249\135\174\b\011Cg")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])

  end

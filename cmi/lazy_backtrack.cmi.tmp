type ('a, 'b) t
type log
val force : ('a -> 'b) -> ('a, 'b) t -> 'b
val create : 'a -> ('a, 'b) t
val get_arg : ('a, 'b) t -> 'a option
val get_contents : ('a, 'b) t -> ('a, 'b) Either.t
val create_forced : 'b -> ('a, 'b) t
val create_failed : exn -> ('a, 'b) t
val log : unit -> log
val force_logged :
  log ->
  ('a -> ('b, 'c) result) -> ('a, ('b, 'c) result) t -> ('b, 'c) result
("DEBUG:rule", [Tag1 (("t", 310), ([((("a")), 100000000, 0, -49); ((("b")), 100000000, 0, -50)], 2, 0, 1, 0, [7; 7], [2; 2], 0, 0, (("utils/lazy_backtrack.mli", 16, 1079, 1079), ("utils/lazy_backtrack.mli", 16, 1079, 1093), 0), 0, 0, 0, Tag1 ("Lazy_backtrack", 0)), 1, 0); Tag1 (("log", 311), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("utils/lazy_backtrack.mli", 18, 1095, 1095), ("utils/lazy_backtrack.mli", 18, 1095, 1103), 0), 0, 0, 0, Tag1 ("Lazy_backtrack", 1)), 1, 0); (("force", 312), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -47), ((("b")), 100000000, 0, -45), 0), 100000000, 0, -48), (Tag1 (0, (Tag3 ((("t", 310)), [((("a")), 100000000, 0, -47); ((("b")), 100000000, 0, -45)], (0)), 100000000, 0, -46), ((("b")), 100000000, 0, -45), 0), 100000000, 0, -44), 0), 100000000, 0, -43), 0, (("utils/lazy_backtrack.mli", 20, 1105, 1105), ("utils/lazy_backtrack.mli", 20, 1105, 1146), 0), 0, Tag1 ("Lazy_backtrack", 2)), 0); (("create", 313), ((Tag1 (0, ((("a")), 100000000, 0, -41), (Tag3 ((("t", 310)), [((("a")), 100000000, 0, -41); ((("b")), 100000000, 0, -42)], (0)), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("utils/lazy_backtrack.mli", 21, 1147, 1147), ("utils/lazy_backtrack.mli", 21, 1147, 1175), 0), 0, Tag1 ("Lazy_backtrack", 3)), 0); (("get_arg", 314), ((Tag1 (0, (Tag3 ((("t", 310)), [((("a")), 100000000, 0, -36); ((("b")), 100000000, 0, -38)], (0)), 100000000, 0, -37), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -36)], (0)), 100000000, 0, -35), 0), 100000000, 0, -34), 0, (("utils/lazy_backtrack.mli", 22, 1176, 1176), ("utils/lazy_backtrack.mli", 22, 1176, 1212), 0), 0, Tag1 ("Lazy_backtrack", 4)), 0); (("get_contents", 315), ((Tag1 (0, (Tag3 ((("t", 310)), [((("a")), 100000000, 0, -31); ((("b")), 100000000, 0, -32)], (0)), 100000000, 0, -33), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Either"), "t"), [((("a")), 100000000, 0, -31); ((("b")), 100000000, 0, -32)], (0)), 100000000, 0, -30), 0), 100000000, 0, -29), 0, (("utils/lazy_backtrack.mli", 23, 1213, 1213), ("utils/lazy_backtrack.mli", 23, 1213, 1261), 0), 0, Tag1 ("Lazy_backtrack", 5)), 0); (("create_forced", 316), ((Tag1 (0, ((("b")), 100000000, 0, -28), (Tag3 ((("t", 310)), [((("a")), 100000000, 0, -27); ((("b")), 100000000, 0, -28)], (0)), 100000000, 0, -26), 0), 100000000, 0, -25), 0, (("utils/lazy_backtrack.mli", 24, 1262, 1262), ("utils/lazy_backtrack.mli", 24, 1262, 1298), 0), 0, Tag1 ("Lazy_backtrack", 6)), 0); (("create_failed", 317), ((Tag1 (0, (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -24), (Tag3 ((("t", 310)), [((("a")), 100000000, 0, -22); ((("b")), 100000000, 0, -23)], (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("utils/lazy_backtrack.mli", 25, 1299, 1299), ("utils/lazy_backtrack.mli", 25, 1299, 1336), 0), 0, Tag1 ("Lazy_backtrack", 7)), 0); (("log", 318), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -19), (Tag3 ((("log", 311)), 0, (0)), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("utils/lazy_backtrack.mli", 31, 1549, 1549), ("utils/lazy_backtrack.mli", 31, 1549, 1570), 0), 0, Tag1 ("Lazy_backtrack", 8)), 0); (("force_logged", 319), ((Tag1 (0, (Tag3 ((("log", 311)), 0, (0)), 100000000, 0, -16), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -12), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [((("b")), 100000000, 0, -9); ((("c")), 100000000, 0, -10)], (0)), 100000000, 0, -15), 0), 100000000, 0, -14), (Tag1 (0, (Tag3 ((("t", 310)), [((("a")), 100000000, 0, -12); (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [((("b")), 100000000, 0, -9); ((("c")), 100000000, 0, -10)], (0)), 100000000, 0, -13)], (0)), 100000000, 0, -11), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [((("b")), 100000000, 0, -9); ((("c")), 100000000, 0, -10)], (0)), 100000000, 0, -8), 0), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("utils/lazy_backtrack.mli", 32, 1571, 1571), ("utils/lazy_backtrack.mli", 33, 1590, 1667), 0), 0, Tag1 ("Lazy_backtrack", 9)), 0); (("backtrack", 320), ((Tag1 (0, (Tag3 ((("log", 311)), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("utils/lazy_backtrack.mli", 34, 1668, 1668), ("utils/lazy_backtrack.mli", 34, 1668, 1695), 0), 0, Tag1 ("Lazy_backtrack", 10)), 0)], "Lazy_backtrack", [("Lazy_backtrack", (":5=\0158\174\160b25\210\168sc\220\180")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
val backtrack : log -> unit

type typedtree = Typedtree.structure * Typedtree.module_coercion
module Typedtree_search :
  sig
    type ele
    type tab = (ele, Typedtree.structure_item_desc) Hashtbl.t
    type tab_values =
        (Odoc_name.t, Typedtree.pattern * Typedtree.expression) Hashtbl.t
    val tables : Typedtree.structure_item list -> tab * tab_values
    val search_module : tab -> string -> Typedtree.module_expr
    val search_module_type :
      tab -> string -> Typedtree.module_type_declaration
    val search_extension : tab -> string -> Typedtree.type_extension
    val search_type_declaration : tab -> string -> Typedtree.type_declaration
    val search_class_exp :
      tab -> string -> Typedtree.class_expr * Types.type_expr list
    val search_class_type_declaration :
      tab -> string -> Typedtree.class_type_declaration
    val search_value :
      tab_values -> string -> Typedtree.pattern * Typedtree.expression
    val search_primitive : tab -> string -> Types.type_expr
    val get_nth_inherit_class_expr :
      Typedtree.class_structure -> int -> Typedtree.class_expr
    val search_attribute_type :
      Typedtree.class_structure -> string -> Types.type_expr
    val search_method_expression :
      Typedtree.class_structure -> string -> Typedtree.expression
  end
module Analyser :
  Odoc_sig.Info_retriever ->
    sig
      val analyse_typed_tree :
        string ->
        string -> Parsetree.structure -> typedtree -> Odoc_module.t_module
    end("DEBUG:rule", [Tag1 (("typedtree", 732), (0, 0, 0, 1, ((Tag2 ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "structure"), 0, (0)), 100000000, 0, -3); (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_coercion"), 0, (0)), 100000000, 0, -4)]), 100000000, 0, -2)), 0, 0, 0, 0, (("odoc_ast.mli", 18, 1204, 1204), ("odoc_ast.mli", 18, 1204, 1268), 0), 0, 0, 0, Tag1 ("Odoc_ast", 0)), 1, 0); Tag3 (("Typedtree_search", 733), 0, (Tag1 ([Tag1 (("ele", 735), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("odoc_ast.mli", 23, 1397, 1403), ("odoc_ast.mli", 23, 1397, 1411), 0), 0, 0, 0, Tag1 ("Odoc_ast", 4)), 1, 0); Tag1 (("tab", 736), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Hashtbl"), "t"), [(Tag3 ((("ele", 735)), 0, (0)), 100000000, 0, -77); (Tag3 (Tag1 ((Tag2 ("Typedtree")), "structure_item_desc"), 0, (0)), 100000000, 0, -78)], (0)), 100000000, 0, -76)), 0, 0, 0, 0, (("odoc_ast.mli", 25, 1413, 1419), ("odoc_ast.mli", 25, 1413, 1476), 0), 0, 0, 0, Tag1 ("Odoc_ast", 5)), 1, 0); Tag1 (("tab_values", 737), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Hashtbl"), "t"), [(Tag3 (Tag1 ((Tag2 ("Odoc_name")), "t"), 0, (0)), 100000000, 0, -72); (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -74); (Tag3 (Tag1 ((Tag2 ("Typedtree")), "expression"), 0, (0)), 100000000, 0, -75)]), 100000000, 0, -73)], (0)), 100000000, 0, -71)), 0, 0, 0, 0, (("odoc_ast.mli", 26, 1477, 1483), ("odoc_ast.mli", 26, 1477, 1566), 0), 0, 0, 0, Tag1 ("Odoc_ast", 6)), 1, 0); (("tables", 738), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "structure_item"), 0, (0)), 100000000, 0, -70)], (0)), 100000000, 0, -69), (Tag2 ([(Tag3 ((("tab", 736)), 0, (0)), 100000000, 0, -67); (Tag3 ((("tab_values", 737)), 0, (0)), 100000000, 0, -68)]), 100000000, 0, -66), 0), 100000000, 0, -65), 0, (("odoc_ast.mli", 29, 1647, 1653), ("odoc_ast.mli", 29, 1647, 1715), 0), 0, Tag1 ("Odoc_ast", 7)), 0); (("search_module", 739), ((Tag1 (0, (Tag3 ((("tab", 736)), 0, (0)), 100000000, 0, -64), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -63), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_expr"), 0, (0)), 100000000, 0, -62), 0), 100000000, 0, -61), 0), 100000000, 0, -60), 0, (("odoc_ast.mli", 34, 1900, 1906), ("odoc_ast.mli", 34, 1900, 1964), 0), 0, Tag1 ("Odoc_ast", 8)), 0); (("search_module_type", 740), ((Tag1 (0, (Tag3 ((("tab", 736)), 0, (0)), 100000000, 0, -59), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -58), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_type_declaration"), 0, (0)), 100000000, 0, -57), 0), 100000000, 0, -56), 0), 100000000, 0, -55), 0, (("odoc_ast.mli", 39, 2159, 2165), ("odoc_ast.mli", 39, 2159, 2240), 0), 0, Tag1 ("Odoc_ast", 9)), 0); (("search_extension", 741), ((Tag1 (0, (Tag3 ((("tab", 736)), 0, (0)), 100000000, 0, -54), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -53), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "type_extension"), 0, (0)), 100000000, 0, -52), 0), 100000000, 0, -51), 0), 100000000, 0, -50), 0, (("odoc_ast.mli", 44, 2434, 2440), ("odoc_ast.mli", 44, 2434, 2504), 0), 0, Tag1 ("Odoc_ast", 10)), 0); (("search_type_declaration", 742), ((Tag1 (0, (Tag3 ((("tab", 736)), 0, (0)), 100000000, 0, -49), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -48), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "type_declaration"), 0, (0)), 100000000, 0, -47), 0), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("odoc_ast.mli", 49, 2691, 2697), ("odoc_ast.mli", 49, 2691, 2770), 0), 0, Tag1 ("Odoc_ast", 11)), 0); (("search_class_exp", 743), ((Tag1 (0, (Tag3 ((("tab", 736)), 0, (0)), 100000000, 0, -44), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -43), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_expr"), 0, (0)), 100000000, 0, -40); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -42)], (0)), 100000000, 0, -41)]), 100000000, 0, -39), 0), 100000000, 0, -38), 0), 100000000, 0, -37), 0, (("odoc_ast.mli", 54, 2973, 2979), ("odoc_ast.mli", 54, 2973, 3066), 0), 0, Tag1 ("Odoc_ast", 13)), 0); (("search_class_type_declaration", 744), ((Tag1 (0, (Tag3 ((("tab", 736)), 0, (0)), 100000000, 0, -36), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -35), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_type_declaration"), 0, (0)), 100000000, 0, -34), 0), 100000000, 0, -33), 0), 100000000, 0, -32), 0, (("odoc_ast.mli", 59, 3271, 3277), ("odoc_ast.mli", 59, 3271, 3362), 0), 0, Tag1 ("Odoc_ast", 14)), 0); (("search_value", 745), ((Tag1 (0, (Tag3 ((("tab_values", 737)), 0, (0)), 100000000, 0, -31), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -30), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -28); (Tag3 (Tag1 ((Tag2 ("Typedtree")), "expression"), 0, (0)), 100000000, 0, -29)]), 100000000, 0, -27), 0), 100000000, 0, -26), 0), 100000000, 0, -25), 0, (("odoc_ast.mli", 64, 3541, 3547), ("odoc_ast.mli", 64, 3541, 3630), 0), 0, Tag1 ("Odoc_ast", 15)), 0); (("search_primitive", 746), ((Tag1 (0, (Tag3 ((("tab", 736)), 0, (0)), 100000000, 0, -24), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -23), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("odoc_ast.mli", 69, 3797, 3803), ("odoc_ast.mli", 69, 3797, 3858), 0), 0, Tag1 ("Odoc_ast", 16)), 0); (("get_nth_inherit_class_expr", 747), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_structure"), 0, (0)), 100000000, 0, -19), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -18), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_expr"), 0, (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0), 100000000, 0, -15), 0, (("odoc_ast.mli", 74, 4075, 4081), ("odoc_ast.mli", 75, 4114, 4180), 0), 0, Tag1 ("Odoc_ast", 17)), 0); (("search_attribute_type", 748), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_structure"), 0, (0)), 100000000, 0, -14), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -13), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("odoc_ast.mli", 80, 4382, 4388), ("odoc_ast.mli", 81, 4416, 4480), 0), 0, Tag1 ("Odoc_ast", 18)), 0); (("search_method_expression", 749), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_structure"), 0, (0)), 100000000, 0, -9), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -8), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "expression"), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("odoc_ast.mli", 85, 4668, 4674), ("odoc_ast.mli", 86, 4705, 4774), 0), 0, Tag1 ("Odoc_ast", 19)), 0)]), 0, (("odoc_ast.mli", 21, 1363, 1363), ("odoc_ast.mli", 87, 4775, 4782), 0), Tag1 ("Odoc_ast", 20)), 0, 0); Tag3 (("Analyser", 734), 0, (Tag2 ((0, (Tag1 ((Tag2 ("Odoc_sig")), "Info_retriever"))), Tag1 ([(("analyse_typed_tree", 750), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -87), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -86), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "structure"), 0, (0)), 100000000, 0, -85), (Tag1 (0, (Tag3 ((("typedtree", 732)), 0, (0)), 100000000, 0, -84), (Tag3 (Tag1 ((Tag2 ("Odoc_module")), "t_module"), 0, (0)), 100000000, 0, -83), 0), 100000000, 0, -82), 0), 100000000, 0, -81), 0), 100000000, 0, -80), 0), 100000000, 0, -79), 0, (("odoc_ast.mli", 99, 5302, 5308), ("odoc_ast.mli", 100, 5333, 5417), 0), 0, Tag1 ("Odoc_ast", 23)), 0)])), 0, (("odoc_ast.mli", 92, 4973, 4973), ("odoc_ast.mli", 101, 5418, 5425), 0), Tag1 ("Odoc_ast", 24)), 0, 0)], "Odoc_ast", [("Odoc_ast", ("\019\249\155\213Q0\209\132i\158{_\243V>|")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Typedtree", ("c5z\186\175w\146\254\018V\184\031\0038\004\227")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Subst", ("\021\031\148\223\127\186\189\135\027}\145r\216\143\177\156")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Odoc_value", ("[\228\023\254\173\230\165o\154\026\024\245\180\229\015;")); ("Odoc_types", ("<k{\137\201\170z%E\221\170\147\151\127\189\015")); ("Odoc_type", ("\236\128j}\240\188\1487q\214\192oj\158\133\170")); ("Odoc_sig", ("\171\150D8ta,\180\142)\213\225%\162\007\174")); ("Odoc_parameter", ("\194t\209\014\154<\178\\\138k\221\183w\133L\167")); ("Odoc_name", ("\248'\1872Z\r\160\146\012'\180V\240\1577f")); ("Odoc_module", ("\0308Mi\132b\017\187 \129\239\006Z#b\225")); ("Odoc_extension", ("HQjI\247\201\206b\193\166\171\167!I\191\198")); ("Odoc_exception", ("\229\177~\170m:\200\2180e\002\1504\rj\160")); ("Odoc_env", ("\163\211\226>[x0.\210\007\156\002]\148+\253")); ("Odoc_class", ("uO\148\216(=\149\159\134h\191\t\168o\245Q")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Load_path", ("\012@\228l\230\164S\172h\1726X\020\252o}")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("Env", ("\021\n\181\142x\b\169j\227\"\017\248*\178\245\223")); ("Cmi_format", ("6\177\bU\139\"\023\152=\249\135\174\b\011Cg")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])


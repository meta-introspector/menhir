type starts_quotation = NoQuotation | Quotation
type keyword_state
val empty_keyword_state : keyword_state
val add_keyword :
  ?quotation:starts_quotation -> keyword_state -> string -> keyword_state
val is_keyword : keyword_state -> string -> bool
val keywords : keyword_state -> CString.Set.t
val check_ident : string -> unit
val is_ident : string -> bool
val check_keyword : string -> unit
val add_keyword_tok : keyword_state -> 'c Tok.p -> keyword_state
val terminal : keyword_state -> string -> string Tok.p
val terminal_number : string -> NumTok.Unsigned.t Tok.p
val after : Loc.t -> Loc.t
module Lexer :
  sig
    type keyword_state = keyword_state/2
    type te = Tok.t
    type 'c pattern = 'c Tok.p
    val tok_pattern_eq : 'a pattern -> 'b pattern -> ('a, 'b) Util.eq option
    val tok_pattern_strings : 'c pattern -> string * string option
    val tok_func :
      ?loc:Loc.t ->
      (unit, char) Gramlib.Stream.t -> (keyword_state, te) Gramlib.LStream.t
    val tok_match : 'c pattern -> te -> 'c
    val tok_text : 'c pattern -> string
    module State :
      sig
        type t
        val init : unit -> t
        val set : t -> unit
        val get : unit -> t
        val drop : unit -> unit
        val get_comments : t -> ((int * int) * string) list
      end
  end
module Error : sig type t exception E of t val to_string : t -> string end
module LexerDiff :
  sig
    type keyword_state = keyword_state/2
    type te = Tok.t
    type 'c pattern = 'c Tok.p
    val tok_pattern_eq : 'a pattern -> 'b pattern -> ('a, 'b) Util.eq option
    val tok_pattern_strings : 'c pattern -> string * string option
    val tok_func :
      ?loc:Loc.t ->
      (unit, char) Gramlib.Stream.t -> (keyword_state, te) Gramlib.LStream.t
    val tok_match : 'c pattern -> te -> 'c
    val tok_text : 'c pattern -> string
    module State :
      sig
        type t
        val init : unit -> t
        val set : t -> unit
        val get : unit -> t
        val drop : unit -> unit
        val get_comments : t -> ((int * int) * string) list
      end("DEBUG:rule", [Tag1 (("starts_quotation", 681), (0, 0, Tag1 ([(("NoQuotation", 270), (0), 0, (("parsing/cLexer.mli", 33, 1409, 1433), ("parsing/cLexer.mli", 33, 1409, 1444), 0), 0, Tag1 ("CLexer", 1)); (("Quotation", 271), (0), 0, (("parsing/cLexer.mli", 33, 1409, 1445), ("parsing/cLexer.mli", 33, 1409, 1456), 0), 0, Tag1 ("CLexer", 2))], 0), 1, 0, 0, 0, 0, 0, (("parsing/cLexer.mli", 33, 1409, 1409), ("parsing/cLexer.mli", 33, 1409, 1456), 0), 0, 1, 0, Tag1 ("CLexer", 0)), 1, 0); Tag1 (("keyword_state", 682), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("parsing/cLexer.mli", 35, 1458, 1458), ("parsing/cLexer.mli", 35, 1458, 1476), 0), 0, 0, 0, Tag1 ("CLexer", 3)), 1, 0); (("empty_keyword_state", 683), ((Tag3 ((("keyword_state", 682)), 0, (0)), 100000000, 0, -46), 0, (("parsing/cLexer.mli", 37, 1478, 1478), ("parsing/cLexer.mli", 37, 1478, 1517), 0), 0, Tag1 ("CLexer", 4)), 0); (("add_keyword", 684), ((Tag1 (Tag1 ("quotation"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("starts_quotation", 681)), 0, (0)), 100000000, 0, -45)], (0)), 100000000, 0, -44), (Tag1 (0, (Tag3 ((("keyword_state", 682)), 0, (0)), 100000000, 0, -43), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -42), (Tag3 ((("keyword_state", 682)), 0, (0)), 100000000, 0, -41), 0), 100000000, 0, -40), 0), 100000000, 0, -39), 0), 100000000, 0, -38), 0, (("parsing/cLexer.mli", 39, 1519, 1519), ("parsing/cLexer.mli", 39, 1519, 1608), 0), 0, Tag1 ("CLexer", 5)), 0); (("is_keyword", 685), ((Tag1 (0, (Tag3 ((("keyword_state", 682)), 0, (0)), 100000000, 0, -37), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -36), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -35), 0), 100000000, 0, -34), 0), 100000000, 0, -33), 0, (("parsing/cLexer.mli", 41, 1610, 1610), ("parsing/cLexer.mli", 41, 1610, 1658), 0), 0, Tag1 ("CLexer", 6)), 0); (("keywords", 686), ((Tag1 (0, (Tag3 ((("keyword_state", 682)), 0, (0)), 100000000, 0, -32), (Tag3 (Tag1 (Tag1 ((Tag2 ("CString")), "Set"), "t"), 0, (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0, (("parsing/cLexer.mli", 42, 1659, 1659), ("parsing/cLexer.mli", 42, 1659, 1704), 0), 0, Tag1 ("CLexer", 7)), 0); (("check_ident", 687), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -29), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -28), 0), 100000000, 0, -27), 0, (("parsing/cLexer.mli", 44, 1706, 1706), ("parsing/cLexer.mli", 44, 1706, 1738), 0), 0, Tag1 ("CLexer", 8)), 0); (("is_ident", 688), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -26), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("parsing/cLexer.mli", 45, 1739, 1739), ("parsing/cLexer.mli", 45, 1739, 1768), 0), 0, Tag1 ("CLexer", 9)), 0); (("check_keyword", 689), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -23), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("parsing/cLexer.mli", 46, 1769, 1769), ("parsing/cLexer.mli", 46, 1769, 1803), 0), 0, Tag1 ("CLexer", 10)), 0); (("add_keyword_tok", 690), ((Tag1 (0, (Tag3 ((("keyword_state", 682)), 0, (0)), 100000000, 0, -20), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tok")), "p"), [((("c")), 100000000, 0, -19)], (0)), 100000000, 0, -18), (Tag3 ((("keyword_state", 682)), 0, (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0), 100000000, 0, -15), 0, (("parsing/cLexer.mli", 48, 1805, 1805), ("parsing/cLexer.mli", 48, 1805, 1869), 0), 0, Tag1 ("CLexer", 11)), 0); (("terminal", 691), ((Tag1 (0, (Tag3 ((("keyword_state", 682)), 0, (0)), 100000000, 0, -14), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -13), (Tag3 (Tag1 ((Tag2 ("Tok")), "p"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12)], (0)), 100000000, 0, -11), 0), 100000000, 0, -10), 0), 100000000, 0, -9), 0, (("parsing/cLexer.mli", 51, 1926, 1926), ("parsing/cLexer.mli", 51, 1926, 1980), 0), 0, Tag1 ("CLexer", 12)), 0); (("terminal_number", 692), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -8), (Tag3 (Tag1 ((Tag2 ("Tok")), "p"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("NumTok")), "Unsigned"), "t"), 0, (0)), 100000000, 0, -7)], (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("parsing/cLexer.mli", 54, 2043, 2043), ("parsing/cLexer.mli", 54, 2043, 2098), 0), 0, Tag1 ("CLexer", 13)), 0); (("after", 693), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -4), (Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("parsing/cLexer.mli", 67, 2513, 2513), ("parsing/cLexer.mli", 67, 2513, 2539), 0), 0, Tag1 ("CLexer", 15)), 0); Tag3 (("Lexer", 694), 0, (Tag1 ([Tag1 (("keyword_state", 697), (0, 0, 0, 1, ((Tag3 ((("keyword_state", 682)), 0, (0)), 100000000, 0, -84)), 0, 0, 0, 0, (("parsing/cLexer.mli", 73, 2602, 2609), ("parsing/cLexer.mli", 73, 2602, 2643), 0), 0, 0, 0, Tag1 ("CLexer", 16)), 1, 0); Tag1 (("te", 698), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Tok")), "t"), 0, (0)), 100000000, 0, -83)), 0, 0, 0, 0, (("parsing/cLexer.mli", 74, 2644, 2651), ("parsing/cLexer.mli", 74, 2644, 2666), 0), 0, 0, 0, Tag1 ("CLexer", 17)), 1, 0); Tag1 (("pattern", 699), ([((("c")), 100000000, 0, -82)], 1, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Tok")), "p"), [((("c")), 100000000, 0, -82)], (0)), 100000000, 0, -81)), [63], [0], 0, 0, (("parsing/cLexer.mli", 75, 2667, 2674), ("parsing/cLexer.mli", 75, 2667, 2700), 0), 0, 0, 0, Tag1 ("CLexer", 18)), 1, 0); (("tok_pattern_eq", 700), ((Tag1 (0, (Tag3 ((("pattern", 699)), [((("a")), 100000000, 0, -77)], (0)), 100000000, 0, -80), (Tag1 (0, (Tag3 ((("pattern", 699)), [((("b")), 100000000, 0, -78)], (0)), 100000000, 0, -79), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Util")), "eq"), [((("a")), 100000000, 0, -77); ((("b")), 100000000, 0, -78)], (0)), 100000000, 0, -76)], (0)), 100000000, 0, -75), 0), 100000000, 0, -74), 0), 100000000, 0, -73), 0, (("gramlib/plexing.mli", 17, 362, 364), ("gramlib/plexing.mli", 17, 362, 436), 0), 0, Tag1 ("Gramlib__Plexing", 3)), 0); (("tok_pattern_strings", 701), ((Tag1 (0, (Tag3 ((("pattern", 699)), [((("c")), 100000000, 0, -72)], (0)), 100000000, 0, -71), (Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -68); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -70)], (0)), 100000000, 0, -69)]), 100000000, 0, -67), 0), 100000000, 0, -66), 0, (("gramlib/plexing.mli", 18, 437, 439), ("gramlib/plexing.mli", 18, 437, 501), 0), 0, Tag1 ("Gramlib__Plexing", 4)), 0); (("tok_func", 702), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -65)], (0)), 100000000, 0, -64), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Gramlib")), "Stream"), "t"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -62); (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -63)], (0)), 100000000, 0, -61), (Tag3 (Tag1 (Tag1 ((Tag2 ("Gramlib")), "LStream"), "t"), [(Tag3 ((("keyword_state", 697)), 0, (0)), 100000000, 0, -59); (Tag3 ((("te", 698)), 0, (0)), 100000000, 0, -60)], (0)), 100000000, 0, -58), 0), 100000000, 0, -57), 0), 100000000, 0, -56), 0, (("gramlib/plexing.mli", 21, 565, 567), ("gramlib/plexing.mli", 21, 565, 648), 0), 0, Tag1 ("Gramlib__Plexing", 6)), 0); (("tok_match", 703), ((Tag1 (0, (Tag3 ((("pattern", 699)), [((("c")), 100000000, 0, -53)], (0)), 100000000, 0, -55), (Tag1 (0, (Tag3 ((("te", 698)), 0, (0)), 100000000, 0, -54), ((("c")), 100000000, 0, -53), 0), 100000000, 0, -52), 0), 100000000, 0, -51), 0, (("gramlib/plexing.mli", 23, 650, 652), ("gramlib/plexing.mli", 23, 650, 690), 0), 0, Tag1 ("Gramlib__Plexing", 7)), 0); (("tok_text", 704), ((Tag1 (0, (Tag3 ((("pattern", 699)), [((("c")), 100000000, 0, -50)], (0)), 100000000, 0, -49), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -48), 0), 100000000, 0, -47), 0, (("gramlib/plexing.mli", 24, 691, 693), ("gramlib/plexing.mli", 24, 691, 728), 0), 0, Tag1 ("Gramlib__Plexing", 8)), 0); Tag3 (("State", 705), 0, (Tag1 ([Tag1 (("t", 706), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("gramlib/plexing.mli", 28, 826, 830), ("gramlib/plexing.mli", 28, 826, 836), 0), 0, 0, 0, Tag1 ("Gramlib__Plexing", 9)), 1, 0); (("init", 707), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -104), (Tag3 ((("t", 706)), 0, (0)), 100000000, 0, -103), 0), 100000000, 0, -102), 0, (("gramlib/plexing.mli", 29, 837, 841), ("gramlib/plexing.mli", 29, 837, 861), 0), 0, Tag1 ("Gramlib__Plexing", 10)), 0); (("set", 708), ((Tag1 (0, (Tag3 ((("t", 706)), 0, (0)), 100000000, 0, -101), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -100), 0), 100000000, 0, -99), 0, (("gramlib/plexing.mli", 30, 862, 866), ("gramlib/plexing.mli", 30, 862, 885), 0), 0, Tag1 ("Gramlib__Plexing", 11)), 0); (("get", 709), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -98), (Tag3 ((("t", 706)), 0, (0)), 100000000, 0, -97), 0), 100000000, 0, -96), 0, (("gramlib/plexing.mli", 31, 886, 890), ("gramlib/plexing.mli", 31, 886, 909), 0), 0, Tag1 ("Gramlib__Plexing", 12)), 0); (("drop", 710), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -95), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -94), 0), 100000000, 0, -93), 0, (("gramlib/plexing.mli", 32, 910, 914), ("gramlib/plexing.mli", 32, 910, 937), 0), 0, Tag1 ("Gramlib__Plexing", 13)), 0); (("get_comments", 711), ((Tag1 (0, (Tag3 ((("t", 706)), 0, (0)), 100000000, 0, -92), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -89); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -90)]), 100000000, 0, -88); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -91)]), 100000000, 0, -87)], (0)), 100000000, 0, -86), 0), 100000000, 0, -85), 0, (("gramlib/plexing.mli", 33, 938, 942), ("gramlib/plexing.mli", 33, 938, 993), 0), 0, Tag1 ("Gramlib__Plexing", 14)), 0)]), 0, (("gramlib/plexing.mli", 27, 805, 807), ("gramlib/plexing.mli", 34, 994, 999), 0), Tag1 ("Gramlib__Plexing", 15)), 0, 0)]), 0, (("parsing/cLexer.mli", 71, 2567, 2567), ("parsing/cLexer.mli", 75, 2667, 2700), 0), Tag1 ("CLexer", 19)), 0, 0); Tag3 (("Error", 695), 0, (Tag1 ([Tag1 (("t", 712), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("parsing/cLexer.mli", 79, 2722, 2724), ("parsing/cLexer.mli", 79, 2722, 2730), 0), 0, 0, 0, Tag1 ("CLexer", 20)), 1, 0); Tag2 (("E", 713), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((("t", 712)), 0, (0)), 100000000, 0, -108)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("CLexer", 21)), 2, 0); (("to_string", 714), ((Tag1 (0, (Tag3 ((("t", 712)), 0, (0)), 100000000, 0, -107), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -106), 0), 100000000, 0, -105), 0, (("parsing/cLexer.mli", 81, 2750, 2752), ("parsing/cLexer.mli", 81, 2750, 2779), 0), 0, Tag1 ("CLexer", 22)), 0)]), 0, (("parsing/cLexer.mli", 78, 2703, 2703), ("parsing/cLexer.mli", 82, 2780, 2783), 0), Tag1 ("CLexer", 23)), 0, 0); Tag3 (("LexerDiff", 696), 0, (Tag1 ([Tag1 (("keyword_state", 715), (0, 0, 0, 1, ((Tag3 ((("keyword_state", 682)), 0, (0)), 100000000, 0, -146)), 0, 0, 0, 0, (("parsing/cLexer.mli", 97, 3368, 3375), ("parsing/cLexer.mli", 97, 3368, 3409), 0), 0, 0, 0, Tag1 ("CLexer", 24)), 1, 0); Tag1 (("te", 716), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Tok")), "t"), 0, (0)), 100000000, 0, -145)), 0, 0, 0, 0, (("parsing/cLexer.mli", 98, 3410, 3417), ("parsing/cLexer.mli", 98, 3410, 3432), 0), 0, 0, 0, Tag1 ("CLexer", 25)), 1, 0); Tag1 (("pattern", 717), ([((("c")), 100000000, 0, -144)], 1, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Tok")), "p"), [((("c")), 100000000, 0, -144)], (0)), 100000000, 0, -143)), [63], [0], 0, 0, (("parsing/cLexer.mli", 99, 3433, 3440), ("parsing/cLexer.mli", 99, 3433, 3466), 0), 0, 0, 0, Tag1 ("CLexer", 26)), 1, 0); (("tok_pattern_eq", 718), ((Tag1 (0, (Tag3 ((("pattern", 717)), [((("a")), 100000000, 0, -139)], (0)), 100000000, 0, -142), (Tag1 (0, (Tag3 ((("pattern", 717)), [((("b")), 100000000, 0, -140)], (0)), 100000000, 0, -141), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Util")), "eq"), [((("a")), 100000000, 0, -139); ((("b")), 100000000, 0, -140)], (0)), 100000000, 0, -138)], (0)), 100000000, 0, -137), 0), 100000000, 0, -136), 0), 100000000, 0, -135), 0, (("gramlib/plexing.mli", 17, 362, 364), ("gramlib/plexing.mli", 17, 362, 436), 0), 0, Tag1 ("Gramlib__Plexing", 3)), 0); (("tok_pattern_strings", 719), ((Tag1 (0, (Tag3 ((("pattern", 717)), [((("c")), 100000000, 0, -134)], (0)), 100000000, 0, -133), (Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -130); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -132)], (0)), 100000000, 0, -131)]), 100000000, 0, -129), 0), 100000000, 0, -128), 0, (("gramlib/plexing.mli", 18, 437, 439), ("gramlib/plexing.mli", 18, 437, 501), 0), 0, Tag1 ("Gramlib__Plexing", 4)), 0); (("tok_func", 720), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -127)], (0)), 100000000, 0, -126), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Gramlib")), "Stream"), "t"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -124); (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -125)], (0)), 100000000, 0, -123), (Tag3 (Tag1 (Tag1 ((Tag2 ("Gramlib")), "LStream"), "t"), [(Tag3 ((("keyword_state", 715)), 0, (0)), 100000000, 0, -121); (Tag3 ((("te", 716)), 0, (0)), 100000000, 0, -122)], (0)), 100000000, 0, -120), 0), 100000000, 0, -119), 0), 100000000, 0, -118), 0, (("gramlib/plexing.mli", 21, 565, 567), ("gramlib/plexing.mli", 21, 565, 648), 0), 0, Tag1 ("Gramlib__Plexing", 6)), 0); (("tok_match", 721), ((Tag1 (0, (Tag3 ((("pattern", 717)), [((("c")), 100000000, 0, -115)], (0)), 100000000, 0, -117), (Tag1 (0, (Tag3 ((("te", 716)), 0, (0)), 100000000, 0, -116), ((("c")), 100000000, 0, -115), 0), 100000000, 0, -114), 0), 100000000, 0, -113), 0, (("gramlib/plexing.mli", 23, 650, 652), ("gramlib/plexing.mli", 23, 650, 690), 0), 0, Tag1 ("Gramlib__Plexing", 7)), 0); (("tok_text", 722), ((Tag1 (0, (Tag3 ((("pattern", 717)), [((("c")), 100000000, 0, -112)], (0)), 100000000, 0, -111), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -110), 0), 100000000, 0, -109), 0, (("gramlib/plexing.mli", 24, 691, 693), ("gramlib/plexing.mli", 24, 691, 728), 0), 0, Tag1 ("Gramlib__Plexing", 8)), 0); Tag3 (("State", 723), 0, (Tag1 ([Tag1 (("t", 724), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("gramlib/plexing.mli", 28, 826, 830), ("gramlib/plexing.mli", 28, 826, 836), 0), 0, 0, 0, Tag1 ("Gramlib__Plexing", 9)), 1, 0); (("init", 725), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -166), (Tag3 ((("t", 724)), 0, (0)), 100000000, 0, -165), 0), 100000000, 0, -164), 0, (("gramlib/plexing.mli", 29, 837, 841), ("gramlib/plexing.mli", 29, 837, 861), 0), 0, Tag1 ("Gramlib__Plexing", 10)), 0); (("set", 726), ((Tag1 (0, (Tag3 ((("t", 724)), 0, (0)), 100000000, 0, -163), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -162), 0), 100000000, 0, -161), 0, (("gramlib/plexing.mli", 30, 862, 866), ("gramlib/plexing.mli", 30, 862, 885), 0), 0, Tag1 ("Gramlib__Plexing", 11)), 0); (("get", 727), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -160), (Tag3 ((("t", 724)), 0, (0)), 100000000, 0, -159), 0), 100000000, 0, -158), 0, (("gramlib/plexing.mli", 31, 886, 890), ("gramlib/plexing.mli", 31, 886, 909), 0), 0, Tag1 ("Gramlib__Plexing", 12)), 0); (("drop", 728), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -157), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -156), 0), 100000000, 0, -155), 0, (("gramlib/plexing.mli", 32, 910, 914), ("gramlib/plexing.mli", 32, 910, 937), 0), 0, Tag1 ("Gramlib__Plexing", 13)), 0); (("get_comments", 729), ((Tag1 (0, (Tag3 ((("t", 724)), 0, (0)), 100000000, 0, -154), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -151); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -152)]), 100000000, 0, -150); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -153)]), 100000000, 0, -149)], (0)), 100000000, 0, -148), 0), 100000000, 0, -147), 0, (("gramlib/plexing.mli", 33, 938, 942), ("gramlib/plexing.mli", 33, 938, 993), 0), 0, Tag1 ("Gramlib__Plexing", 14)), 0)]), 0, (("gramlib/plexing.mli", 27, 805, 807), ("gramlib/plexing.mli", 34, 994, 999), 0), Tag1 ("Gramlib__Plexing", 15)), 0, 0)]), 0, (("parsing/cLexer.mli", 95, 3329, 3329), ("parsing/cLexer.mli", 99, 3433, 3466), 0), Tag1 ("CLexer", 27)), 0, 0)], "CLexer", [("CLexer", ("\158\155\242\159%gC\237\011\196\158\255\163\217\239G")); ("Z", ("\253\196\2168\027\199O\134\220\218\031'\1484\233o")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Tok", ("\162\196\180\135\219\014\184\165;\207\025\215\176g\188\225")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Random", ("\020\005Xq\171\026\218\152X\135\254\023\133zK\200")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("NumTok", ("vd\023^\251\244B\166\145'\156\196-0\027\169")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Gramlib__Stream", ("\248\\H\205_76\253\136\146\200\031\165\021=t")); ("Gramlib__Plexing", ("\028\200j\003G\198\183\184f\243\148a\020\011\160\171")); ("Gramlib__LStream", ("B\143\148\148@\016M\192w\155\223\189\218\224\002\004")); ("Gramlib", ("\154\143\210e\021i\246\176\224\194\220\217\007\145\139A")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CString", ("\243~4C\023~\169\148x\206\165\207\195\177Q\184")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150"))], [(0)])

  end

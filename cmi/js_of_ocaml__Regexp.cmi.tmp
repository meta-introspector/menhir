type regexp
type result
val regexp : string -> regexp
val regexp_case_fold : string -> regexp
val regexp_with_flag : string -> string -> regexp
val quote : string -> string
val regexp_string : string -> regexp
val regexp_string_case_fold : string -> regexp
val string_match : regexp -> string -> int -> result option
val search : regexp -> string -> int -> (int * result) option
val search_forward : regexp -> string -> int -> (int * result) option
val matched_string : result -> string
val matched_group : result -> int -> string option
val global_replace : regexp -> string -> string -> string
val replace_first : regexp -> string -> string -> string
val split : regexp -> string -> string list
("DEBUG:rule", [Tag1 (("regexp", 315), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("lib/js_of_ocaml/regexp.mli", 31, 1266, 1266), ("lib/js_of_ocaml/regexp.mli", 31, 1266, 1277), 0), 0, 0, 0, Tag1 ("Js_of_ocaml__Regexp", 0)), 1, 0); Tag1 (("result", 316), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("lib/js_of_ocaml/regexp.mli", 34, 1308, 1308), ("lib/js_of_ocaml/regexp.mli", 34, 1308, 1319), 0), 0, 0, 0, Tag1 ("Js_of_ocaml__Regexp", 1)), 1, 0); (("regexp", 317), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -86), (Tag3 ((("regexp", 315)), 0, (0)), 100000000, 0, -85), 0), 100000000, 0, -84), 0, (("lib/js_of_ocaml/regexp.mli", 39, 1376, 1376), ("lib/js_of_ocaml/regexp.mli", 39, 1376, 1405), 0), 0, Tag1 ("Js_of_ocaml__Regexp", 2)), 0); (("regexp_case_fold", 318), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -83), (Tag3 ((("regexp", 315)), 0, (0)), 100000000, 0, -82), 0), 100000000, 0, -81), 0, (("lib/js_of_ocaml/regexp.mli", 42, 1441, 1441), ("lib/js_of_ocaml/regexp.mli", 42, 1441, 1480), 0), 0, Tag1 ("Js_of_ocaml__Regexp", 3)), 0); (("regexp_with_flag", 319), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -80), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -79), (Tag3 ((("regexp", 315)), 0, (0)), 100000000, 0, -78), 0), 100000000, 0, -77), 0), 100000000, 0, -76), 0, (("lib/js_of_ocaml/regexp.mli", 46, 1568, 1568), ("lib/js_of_ocaml/regexp.mli", 46, 1568, 1617), 0), 0, Tag1 ("Js_of_ocaml__Regexp", 4)), 0); (("quote", 320), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -75), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -74), 0), 100000000, 0, -73), 0, (("lib/js_of_ocaml/regexp.mli", 50, 1751, 1751), ("lib/js_of_ocaml/regexp.mli", 50, 1751, 1779), 0), 0, Tag1 ("Js_of_ocaml__Regexp", 5)), 0); (("regexp_string", 321), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -72), (Tag3 ((("regexp", 315)), 0, (0)), 100000000, 0, -71), 0), 100000000, 0, -70), 0, (("lib/js_of_ocaml/regexp.mli", 53, 1851, 1851), ("lib/js_of_ocaml/regexp.mli", 53, 1851, 1887), 0), 0, Tag1 ("Js_of_ocaml__Regexp", 6)), 0); (("regexp_string_case_fold", 322), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -69), (Tag3 ((("regexp", 315)), 0, (0)), 100000000, 0, -68), 0), 100000000, 0, -67), 0, (("lib/js_of_ocaml/regexp.mli", 56, 1962, 1962), ("lib/js_of_ocaml/regexp.mli", 56, 1962, 2008), 0), 0, Tag1 ("Js_of_ocaml__Regexp", 7)), 0); (("string_match", 323), ((Tag1 (0, (Tag3 ((("regexp", 315)), 0, (0)), 100000000, 0, -66), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -65), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -64), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("result", 316)), 0, (0)), 100000000, 0, -63)], (0)), 100000000, 0, -62), 0), 100000000, 0, -61), 0), 100000000, 0, -60), 0), 100000000, 0, -59), 0, (("lib/js_of_ocaml/regexp.mli", 62, 2121, 2121), ("lib/js_of_ocaml/regexp.mli", 62, 2121, 2180), 0), 0, Tag1 ("Js_of_ocaml__Regexp", 8)), 0); (("search", 324), ((Tag1 (0, (Tag3 ((("regexp", 315)), 0, (0)), 100000000, 0, -58), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -57), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -56), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -54); (Tag3 ((("result", 316)), 0, (0)), 100000000, 0, -55)]), 100000000, 0, -53)], (0)), 100000000, 0, -52), 0), 100000000, 0, -51), 0), 100000000, 0, -50), 0), 100000000, 0, -49), 0, (("lib/js_of_ocaml/regexp.mli", 67, 2350, 2350), ("lib/js_of_ocaml/regexp.mli", 67, 2350, 2411), 0), 0, Tag1 ("Js_of_ocaml__Regexp", 9)), 0); (("search_forward", 325), ((Tag1 (0, (Tag3 ((("regexp", 315)), 0, (0)), 100000000, 0, -48), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -47), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -46), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -44); (Tag3 ((("result", 316)), 0, (0)), 100000000, 0, -45)]), 100000000, 0, -43)], (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("lib/js_of_ocaml/regexp.mli", 71, 2552, 2552), ("lib/js_of_ocaml/regexp.mli", 71, 2552, 2621), 0), 0, Tag1 ("Js_of_ocaml__Regexp", 10)), 0); (("matched_string", 326), ((Tag1 (0, (Tag3 ((("result", 316)), 0, (0)), 100000000, 0, -38), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -37), 0), 100000000, 0, -36), 0, (("lib/js_of_ocaml/regexp.mli", 74, 2648, 2648), ("lib/js_of_ocaml/regexp.mli", 74, 2648, 2685), 0), 0, Tag1 ("Js_of_ocaml__Regexp", 11)), 0); (("matched_group", 327), ((Tag1 (0, (Tag3 ((("result", 316)), 0, (0)), 100000000, 0, -35), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -34), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -33)], (0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0), 100000000, 0, -30), 0, (("lib/js_of_ocaml/regexp.mli", 78, 2779, 2779), ("lib/js_of_ocaml/regexp.mli", 78, 2779, 2829), 0), 0, Tag1 ("Js_of_ocaml__Regexp", 12)), 0); (("global_replace", 328), ((Tag1 (0, (Tag3 ((("regexp", 315)), 0, (0)), 100000000, 0, -29), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -28), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -27), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -26), 0), 100000000, 0, -25), 0), 100000000, 0, -24), 0), 100000000, 0, -23), 0, (("lib/js_of_ocaml/regexp.mli", 82, 2959, 2959), ("lib/js_of_ocaml/regexp.mli", 82, 2959, 3016), 0), 0, Tag1 ("Js_of_ocaml__Regexp", 13)), 0); (("replace_first", 329), ((Tag1 (0, (Tag3 ((("regexp", 315)), 0, (0)), 100000000, 0, -22), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -21), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -20), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("lib/js_of_ocaml/regexp.mli", 85, 3100, 3100), ("lib/js_of_ocaml/regexp.mli", 85, 3100, 3156), 0), 0, Tag1 ("Js_of_ocaml__Regexp", 14)), 0); (("split", 330), ((Tag1 (0, (Tag3 ((("regexp", 315)), 0, (0)), 100000000, 0, -15), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -14), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -13)], (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("lib/js_of_ocaml/regexp.mli", 88, 3236, 3236), ("lib/js_of_ocaml/regexp.mli", 88, 3236, 3279), 0), 0, Tag1 ("Js_of_ocaml__Regexp", 15)), 0); (("bounded_split", 331), ((Tag1 (0, (Tag3 ((("regexp", 315)), 0, (0)), 100000000, 0, -9), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -8), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -7), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6)], (0)), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("lib/js_of_ocaml/regexp.mli", 92, 3418, 3418), ("lib/js_of_ocaml/regexp.mli", 92, 3418, 3476), 0), 0, Tag1 ("Js_of_ocaml__Regexp", 16)), 0)], "Js_of_ocaml__Regexp", [("Js_of_ocaml__Regexp", ("J\143\216\241;\156\193\209\152g\179'\187@\151\b")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Js_of_ocaml__", ("\247\221\028\193\134N(\198\240\023\194\209$\158]\194")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
val bounded_split : regexp -> string -> int -> string list

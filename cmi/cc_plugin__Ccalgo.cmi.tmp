type pa_constructor = { cnode : int; arity : int; args : int list; }
type cinfo = {
  ci_constr : Constr.pconstructor;
  ci_arity : int;
  ci_nhyps : int;
}
type 'a term
module ATerm :
  sig
    type t
    val mkSymb : Constr.constr -> t
    val mkProduct : Sorts.t * Sorts.t -> t
    val mkAppli : t * t -> t
    val mkConstructor : cinfo -> t
    val constr : t -> Constr.constr
    val nth_arg : t -> int -> t
  end
type ccpattern =
    PApp of ATerm.t * ccpattern list
  | PVar of int * ccpattern list
type axiom
val constr_of_axiom : axiom -> Constr.constr
type rule =
    Congruence
  | Axiom of axiom * bool
  | Injection of int * pa_constructor * int * pa_constructor * int
type from =
    Goal
  | Hyp of Constr.constr
  | HeqG of Names.Id.t
  | HeqnH of Names.Id.t * Names.Id.t
type 'a eq = { lhs : int; rhs : int; rule : 'a; }
type equality = rule eq
type disequality = from eq
type patt_kind = Normal | Trivial of Constr.types | Creates_variables
type forest
type state
type explanation =
    Discrimination of (int * pa_constructor * int * pa_constructor)
  | Contradiction of disequality
  | Incomplete of (EConstr.t * int) list
val debug_congruence : CDebug.t
val forest : state -> forest
val axioms : forest -> axiom -> ATerm.t * ATerm.t
val empty : Environ.env -> Evd.evar_map -> int -> state
val add_aterm : state -> ATerm.t -> int
val add_equality : state -> Names.Id.t -> ATerm.t -> ATerm.t -> unit
val add_disequality : state -> from -> ATerm.t -> ATerm.t -> unit
val add_quant :
  state ->
  Names.Id.t ->
  bool -> int * patt_kind * ccpattern * patt_kind * ccpattern -> unit
val tail_pac : pa_constructor -> pa_constructor
val find_oldest_pac : forest -> int -> pa_constructor -> int
val aterm : forest -> int -> ATerm.t
val get_constructor_info : forest -> int -> cinfo
val subterms : forest -> int -> int * int
val join_path :
  forest ->
  int -> int -> ((int * int) * equality) list * ((int * int) * equality) list
val execute : bool -> state -> explanation option
("DEBUG:rule", [Tag1 (("pa_constructor", 1346), (0, 0, [[(("cnode", 516), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -160), (("plugins/cc/ccalgo.mli", 15, 722, 728), ("plugins/cc/ccalgo.mli", 15, 722, 740), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 2)); (("arity", 517), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -161), (("plugins/cc/ccalgo.mli", 16, 741, 747), ("plugins/cc/ccalgo.mli", 16, 741, 759), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 3)); (("args", 518), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -163)], (0)), 100000000, 0, -162), (("plugins/cc/ccalgo.mli", 17, 760, 766), ("plugins/cc/ccalgo.mli", 17, 760, 782), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 4))]], 1, 0, 0, 0, 0, 0, (("plugins/cc/ccalgo.mli", 14, 700, 700), ("plugins/cc/ccalgo.mli", 17, 760, 783), 0), 0, 0, 0, Tag1 ("Cc_plugin__Ccalgo", 1)), 1, 0); Tag1 (("cinfo", 1347), (0, 0, [[(("ci_constr", 520), 0, (Tag3 (Tag1 ((Tag2 ("Constr")), "pconstructor"), 0, (0)), 100000000, 0, -157), (("plugins/cc/ccalgo.mli", 20, 798, 803), ("plugins/cc/ccalgo.mli", 20, 798, 827), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 6)); (("ci_arity", 521), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -158), (("plugins/cc/ccalgo.mli", 21, 849, 854), ("plugins/cc/ccalgo.mli", 21, 849, 868), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 7)); (("ci_nhyps", 522), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -159), (("plugins/cc/ccalgo.mli", 22, 886, 891), ("plugins/cc/ccalgo.mli", 22, 886, 904), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 8))]], 1, 0, 0, 0, 0, 0, (("plugins/cc/ccalgo.mli", 19, 785, 785), ("plugins/cc/ccalgo.mli", 22, 886, 905), 0), 0, 0, 0, Tag1 ("Cc_plugin__Ccalgo", 5)), 1, 0); Tag1 (("term", 1348), ([((("a")), 100000000, 0, -156)], 1, 0, 1, 0, [7], [2], 0, 0, (("plugins/cc/ccalgo.mli", 24, 936, 936), ("plugins/cc/ccalgo.mli", 24, 936, 948), 0), 0, 0, 0, Tag1 ("Cc_plugin__Ccalgo", 9)), 1, 0); Tag3 (("ATerm", 1349), 0, (Tag1 ([Tag1 (("t", 1378), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("plugins/cc/ccalgo.mli", 28, 969, 971), ("plugins/cc/ccalgo.mli", 28, 969, 977), 0), 0, 0, 0, Tag1 ("Cc_plugin__Ccalgo", 10)), 1, 0); (("mkSymb", 1379), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -187), (Tag3 ((("t", 1378)), 0, (0)), 100000000, 0, -186), 0), 100000000, 0, -185), 0, (("plugins/cc/ccalgo.mli", 29, 978, 980), ("plugins/cc/ccalgo.mli", 29, 978, 1004), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 11)), 0); (("mkProduct", 1380), ((Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Sorts")), "t"), 0, (0)), 100000000, 0, -183); (Tag3 (Tag1 ((Tag2 ("Sorts")), "t"), 0, (0)), 100000000, 0, -184)]), 100000000, 0, -182), (Tag3 ((("t", 1378)), 0, (0)), 100000000, 0, -181), 0), 100000000, 0, -180), 0, (("plugins/cc/ccalgo.mli", 30, 1005, 1007), ("plugins/cc/ccalgo.mli", 30, 1005, 1047), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 12)), 0); (("mkAppli", 1381), ((Tag1 (0, (Tag2 ([(Tag3 ((("t", 1378)), 0, (0)), 100000000, 0, -178); (Tag3 ((("t", 1378)), 0, (0)), 100000000, 0, -179)]), 100000000, 0, -177), (Tag3 ((("t", 1378)), 0, (0)), 100000000, 0, -176), 0), 100000000, 0, -175), 0, (("plugins/cc/ccalgo.mli", 31, 1048, 1050), ("plugins/cc/ccalgo.mli", 31, 1048, 1076), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 13)), 0); (("mkConstructor", 1382), ((Tag1 (0, (Tag3 ((("cinfo", 1347)), 0, (0)), 100000000, 0, -174), (Tag3 ((("t", 1378)), 0, (0)), 100000000, 0, -173), 0), 100000000, 0, -172), 0, (("plugins/cc/ccalgo.mli", 32, 1077, 1079), ("plugins/cc/ccalgo.mli", 32, 1077, 1109), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 14)), 0); (("constr", 1383), ((Tag1 (0, (Tag3 ((("t", 1378)), 0, (0)), 100000000, 0, -171), (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -170), 0), 100000000, 0, -169), 0, (("plugins/cc/ccalgo.mli", 33, 1110, 1112), ("plugins/cc/ccalgo.mli", 33, 1110, 1136), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 15)), 0); (("nth_arg", 1384), ((Tag1 (0, (Tag3 ((("t", 1378)), 0, (0)), 100000000, 0, -168), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -167), (Tag3 ((("t", 1378)), 0, (0)), 100000000, 0, -166), 0), 100000000, 0, -165), 0), 100000000, 0, -164), 0, (("plugins/cc/ccalgo.mli", 34, 1137, 1139), ("plugins/cc/ccalgo.mli", 34, 1137, 1166), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 16)), 0)]), 0, (("plugins/cc/ccalgo.mli", 26, 950, 950), ("plugins/cc/ccalgo.mli", 35, 1167, 1170), 0), Tag1 ("Cc_plugin__Ccalgo", 17)), 0, 0); Tag1 (("ccpattern", 1350), (0, 0, Tag1 ([(("PApp", 661), ([(Tag3 (Tag1 ((("ATerm", 1349)), "t"), 0, (0)), 100000000, 0, -150); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("ccpattern", 1350)), 0, (0)), 100000000, 0, -152)], (0)), 100000000, 0, -151)]), 0, (("plugins/cc/ccalgo.mli", 38, 1189, 1193), ("plugins/cc/ccalgo.mli", 38, 1189, 1225), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 19)); (("PVar", 662), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -153); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("ccpattern", 1350)), 0, (0)), 100000000, 0, -155)], (0)), 100000000, 0, -154)]), 0, (("plugins/cc/ccalgo.mli", 39, 1226, 1228), ("plugins/cc/ccalgo.mli", 39, 1226, 1258), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 20))], 0), 1, 0, 0, 0, 0, 0, (("plugins/cc/ccalgo.mli", 37, 1172, 1172), ("plugins/cc/ccalgo.mli", 39, 1226, 1258), 0), 0, 0, 0, Tag1 ("Cc_plugin__Ccalgo", 18)), 1, 0); Tag1 (("axiom", 1351), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("plugins/cc/ccalgo.mli", 41, 1260, 1260), ("plugins/cc/ccalgo.mli", 41, 1260, 1270), 0), 0, 0, 0, Tag1 ("Cc_plugin__Ccalgo", 21)), 1, 0); (("constr_of_axiom", 1352), ((Tag1 (0, (Tag3 ((("axiom", 1351)), 0, (0)), 100000000, 0, -149), (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -148), 0), 100000000, 0, -147), 0, (("plugins/cc/ccalgo.mli", 43, 1272, 1272), ("plugins/cc/ccalgo.mli", 43, 1272, 1309), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 22)), 0); Tag1 (("rule", 1353), (0, 0, Tag1 ([(("Congruence", 666), (0), 0, (("plugins/cc/ccalgo.mli", 46, 1322, 1326), ("plugins/cc/ccalgo.mli", 46, 1322, 1336), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 24)); (("Axiom", 667), ([(Tag3 ((("axiom", 1351)), 0, (0)), 100000000, 0, -140); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -141)]), 0, (("plugins/cc/ccalgo.mli", 47, 1337, 1339), ("plugins/cc/ccalgo.mli", 47, 1337, 1362), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 25)); (("Injection", 668), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -142); (Tag3 ((("pa_constructor", 1346)), 0, (0)), 100000000, 0, -143); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -144); (Tag3 ((("pa_constructor", 1346)), 0, (0)), 100000000, 0, -145); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -146)]), 0, (("plugins/cc/ccalgo.mli", 48, 1363, 1365), ("plugins/cc/ccalgo.mli", 48, 1363, 1429), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 26))], 0), 1, 0, 0, 0, 0, 0, (("plugins/cc/ccalgo.mli", 45, 1311, 1311), ("plugins/cc/ccalgo.mli", 48, 1363, 1429), 0), 0, 0, 0, Tag1 ("Cc_plugin__Ccalgo", 23)), 1, 0); Tag1 (("from", 1354), (0, 0, Tag1 ([(("Goal", 670), (0), 0, (("plugins/cc/ccalgo.mli", 51, 1442, 1446), ("plugins/cc/ccalgo.mli", 51, 1442, 1450), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 28)); (("Hyp", 671), ([(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -136)]), 0, (("plugins/cc/ccalgo.mli", 52, 1451, 1453), ("plugins/cc/ccalgo.mli", 52, 1451, 1468), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 29)); (("HeqG", 672), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -137)]), 0, (("plugins/cc/ccalgo.mli", 53, 1469, 1471), ("plugins/cc/ccalgo.mli", 53, 1469, 1485), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 30)); (("HeqnH", 689), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -138); (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -139)]), 0, (("plugins/cc/ccalgo.mli", 54, 1486, 1488), ("plugins/cc/ccalgo.mli", 54, 1486, 1510), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 31))], 0), 1, 0, 0, 0, 0, 0, (("plugins/cc/ccalgo.mli", 50, 1431, 1431), ("plugins/cc/ccalgo.mli", 54, 1486, 1510), 0), 0, 0, 0, Tag1 ("Cc_plugin__Ccalgo", 27)), 1, 0); Tag1 (("eq", 1355), ([((("a")), 100000000, 0, -135)], 1, [[(("lhs", 691), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -133), (("plugins/cc/ccalgo.mli", 56, 1512, 1526), ("plugins/cc/ccalgo.mli", 56, 1512, 1534), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 33)); (("rhs", 692), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -134), (("plugins/cc/ccalgo.mli", 56, 1512, 1534), ("plugins/cc/ccalgo.mli", 56, 1512, 1542), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 34)); (("rule", 693), 0, ((("a")), 100000000, 0, -135), (("plugins/cc/ccalgo.mli", 56, 1512, 1542), ("plugins/cc/ccalgo.mli", 56, 1512, 1549), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 35))]], 1, 0, [25], [0], 0, 0, (("plugins/cc/ccalgo.mli", 56, 1512, 1512), ("plugins/cc/ccalgo.mli", 56, 1512, 1550), 0), 0, 0, 0, Tag1 ("Cc_plugin__Ccalgo", 32)), 1, 0); Tag1 (("equality", 1356), (0, 0, 0, 1, ((Tag3 ((("eq", 1355)), [(Tag3 ((("rule", 1353)), 0, (0)), 100000000, 0, -132)], (0)), 100000000, 0, -131)), 0, 0, 0, 0, (("plugins/cc/ccalgo.mli", 58, 1552, 1552), ("plugins/cc/ccalgo.mli", 58, 1552, 1575), 0), 0, 0, 0, Tag1 ("Cc_plugin__Ccalgo", 36)), 1, 0); Tag1 (("disequality", 1357), (0, 0, 0, 1, ((Tag3 ((("eq", 1355)), [(Tag3 ((("from", 1354)), 0, (0)), 100000000, 0, -130)], (0)), 100000000, 0, -129)), 0, 0, 0, 0, (("plugins/cc/ccalgo.mli", 60, 1577, 1577), ("plugins/cc/ccalgo.mli", 60, 1577, 1603), 0), 0, 0, 0, Tag1 ("Cc_plugin__Ccalgo", 37)), 1, 0); Tag1 (("patt_kind", 1358), (0, 0, Tag1 ([(("Normal", 697), (0), 0, (("plugins/cc/ccalgo.mli", 63, 1622, 1626), ("plugins/cc/ccalgo.mli", 63, 1622, 1632), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 39)); (("Trivial", 698), ([(Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -128)]), 0, (("plugins/cc/ccalgo.mli", 64, 1633, 1635), ("plugins/cc/ccalgo.mli", 64, 1633, 1653), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 40)); (("Creates_variables", 699), (0), 0, (("plugins/cc/ccalgo.mli", 65, 1654, 1656), ("plugins/cc/ccalgo.mli", 65, 1654, 1675), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 41))], 0), 1, 0, 0, 0, 0, 0, (("plugins/cc/ccalgo.mli", 62, 1605, 1605), ("plugins/cc/ccalgo.mli", 65, 1654, 1675), 0), 0, 0, 0, Tag1 ("Cc_plugin__Ccalgo", 38)), 1, 0); Tag1 (("forest", 1359), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("plugins/cc/ccalgo.mli", 67, 1677, 1677), ("plugins/cc/ccalgo.mli", 67, 1677, 1688), 0), 0, 0, 0, Tag1 ("Cc_plugin__Ccalgo", 42)), 1, 0); Tag1 (("state", 1360), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("plugins/cc/ccalgo.mli", 69, 1690, 1690), ("plugins/cc/ccalgo.mli", 69, 1690, 1700), 0), 0, 0, 0, Tag1 ("Cc_plugin__Ccalgo", 43)), 1, 0); Tag1 (("explanation", 1361), (0, 0, Tag1 ([(("Discrimination", 703), ([(Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -119); (Tag3 ((("pa_constructor", 1346)), 0, (0)), 100000000, 0, -120); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -121); (Tag3 ((("pa_constructor", 1346)), 0, (0)), 100000000, 0, -122)]), 100000000, 0, -118)]), 0, (("plugins/cc/ccalgo.mli", 72, 1721, 1725), ("plugins/cc/ccalgo.mli", 72, 1721, 1782), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 45)); (("Contradiction", 704), ([(Tag3 ((("disequality", 1357)), 0, (0)), 100000000, 0, -123)]), 0, (("plugins/cc/ccalgo.mli", 73, 1783, 1785), ("plugins/cc/ccalgo.mli", 73, 1783, 1815), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 46)); (("Incomplete", 705), ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -126); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -127)]), 100000000, 0, -125)], (0)), 100000000, 0, -124)]), 0, (("plugins/cc/ccalgo.mli", 74, 1816, 1818), ("plugins/cc/ccalgo.mli", 74, 1816, 1856), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 47))], 0), 1, 0, 0, 0, 0, 0, (("plugins/cc/ccalgo.mli", 71, 1702, 1702), ("plugins/cc/ccalgo.mli", 74, 1816, 1856), 0), 0, 0, 0, Tag1 ("Cc_plugin__Ccalgo", 44)), 1, 0); (("debug_congruence", 1362), ((Tag3 (Tag1 ((Tag2 ("CDebug")), "t"), 0, (0)), 100000000, 0, -117), 0, (("plugins/cc/ccalgo.mli", 76, 1858, 1858), ("plugins/cc/ccalgo.mli", 76, 1858, 1889), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 48)), 0); (("forest", 1363), ((Tag1 (0, (Tag3 ((("state", 1360)), 0, (0)), 100000000, 0, -116), (Tag3 ((("forest", 1359)), 0, (0)), 100000000, 0, -115), 0), 100000000, 0, -114), 0, (("plugins/cc/ccalgo.mli", 78, 1891, 1891), ("plugins/cc/ccalgo.mli", 78, 1891, 1919), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 49)), 0); (("axioms", 1364), ((Tag1 (0, (Tag3 ((("forest", 1359)), 0, (0)), 100000000, 0, -113), (Tag1 (0, (Tag3 ((("axiom", 1351)), 0, (0)), 100000000, 0, -112), (Tag2 ([(Tag3 (Tag1 ((("ATerm", 1349)), "t"), 0, (0)), 100000000, 0, -110); (Tag3 (Tag1 ((("ATerm", 1349)), "t"), 0, (0)), 100000000, 0, -111)]), 100000000, 0, -109), 0), 100000000, 0, -108), 0), 100000000, 0, -107), 0, (("plugins/cc/ccalgo.mli", 80, 1921, 1921), ("plugins/cc/ccalgo.mli", 80, 1921, 1970), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 50)), 0); (("empty", 1365), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -106), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -105), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -104), (Tag3 ((("state", 1360)), 0, (0)), 100000000, 0, -103), 0), 100000000, 0, -102), 0), 100000000, 0, -101), 0), 100000000, 0, -100), 0, (("plugins/cc/ccalgo.mli", 82, 1972, 1972), ("plugins/cc/ccalgo.mli", 82, 1972, 2027), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 51)), 0); (("add_aterm", 1366), ((Tag1 (0, (Tag3 ((("state", 1360)), 0, (0)), 100000000, 0, -99), (Tag1 (0, (Tag3 (Tag1 ((("ATerm", 1349)), "t"), 0, (0)), 100000000, 0, -98), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -97), 0), 100000000, 0, -96), 0), 100000000, 0, -95), 0, (("plugins/cc/ccalgo.mli", 84, 2029, 2029), ("plugins/cc/ccalgo.mli", 84, 2029, 2068), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 52)), 0); (("add_equality", 1367), ((Tag1 (0, (Tag3 ((("state", 1360)), 0, (0)), 100000000, 0, -94), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -93), (Tag1 (0, (Tag3 (Tag1 ((("ATerm", 1349)), "t"), 0, (0)), 100000000, 0, -92), (Tag1 (0, (Tag3 (Tag1 ((("ATerm", 1349)), "t"), 0, (0)), 100000000, 0, -91), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -90), 0), 100000000, 0, -89), 0), 100000000, 0, -88), 0), 100000000, 0, -87), 0), 100000000, 0, -86), 0, (("plugins/cc/ccalgo.mli", 86, 2070, 2070), ("plugins/cc/ccalgo.mli", 86, 2070, 2132), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 53)), 0); (("add_disequality", 1368), ((Tag1 (0, (Tag3 ((("state", 1360)), 0, (0)), 100000000, 0, -85), (Tag1 (0, (Tag3 ((("from", 1354)), 0, (0)), 100000000, 0, -84), (Tag1 (0, (Tag3 (Tag1 ((("ATerm", 1349)), "t"), 0, (0)), 100000000, 0, -83), (Tag1 (0, (Tag3 (Tag1 ((("ATerm", 1349)), "t"), 0, (0)), 100000000, 0, -82), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -81), 0), 100000000, 0, -80), 0), 100000000, 0, -79), 0), 100000000, 0, -78), 0), 100000000, 0, -77), 0, (("plugins/cc/ccalgo.mli", 88, 2134, 2134), ("plugins/cc/ccalgo.mli", 88, 2134, 2199), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 54)), 0); (("add_quant", 1369), ((Tag1 (0, (Tag3 ((("state", 1360)), 0, (0)), 100000000, 0, -76), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -75), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -74), (Tag1 (0, (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -69); (Tag3 ((("patt_kind", 1358)), 0, (0)), 100000000, 0, -70); (Tag3 ((("ccpattern", 1350)), 0, (0)), 100000000, 0, -71); (Tag3 ((("patt_kind", 1358)), 0, (0)), 100000000, 0, -72); (Tag3 ((("ccpattern", 1350)), 0, (0)), 100000000, 0, -73)]), 100000000, 0, -68), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -67), 0), 100000000, 0, -66), 0), 100000000, 0, -65), 0), 100000000, 0, -64), 0), 100000000, 0, -63), 0, (("plugins/cc/ccalgo.mli", 90, 2201, 2201), ("plugins/cc/ccalgo.mli", 91, 2242, 2303), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 55)), 0); (("tail_pac", 1370), ((Tag1 (0, (Tag3 ((("pa_constructor", 1346)), 0, (0)), 100000000, 0, -62), (Tag3 ((("pa_constructor", 1346)), 0, (0)), 100000000, 0, -61), 0), 100000000, 0, -60), 0, (("plugins/cc/ccalgo.mli", 93, 2305, 2305), ("plugins/cc/ccalgo.mli", 93, 2305, 2352), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 56)), 0); (("find_oldest_pac", 1371), ((Tag1 (0, (Tag3 ((("forest", 1359)), 0, (0)), 100000000, 0, -59), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -58), (Tag1 (0, (Tag3 ((("pa_constructor", 1346)), 0, (0)), 100000000, 0, -57), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -56), 0), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0, (("plugins/cc/ccalgo.mli", 95, 2354, 2354), ("plugins/cc/ccalgo.mli", 95, 2354, 2414), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 57)), 0); (("aterm", 1372), ((Tag1 (0, (Tag3 ((("forest", 1359)), 0, (0)), 100000000, 0, -52), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -51), (Tag3 (Tag1 ((("ATerm", 1349)), "t"), 0, (0)), 100000000, 0, -50), 0), 100000000, 0, -49), 0), 100000000, 0, -48), 0, (("plugins/cc/ccalgo.mli", 97, 2416, 2416), ("plugins/cc/ccalgo.mli", 97, 2416, 2452), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 58)), 0); (("get_constructor_info", 1373), ((Tag1 (0, (Tag3 ((("forest", 1359)), 0, (0)), 100000000, 0, -47), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -46), (Tag3 ((("cinfo", 1347)), 0, (0)), 100000000, 0, -45), 0), 100000000, 0, -44), 0), 100000000, 0, -43), 0, (("plugins/cc/ccalgo.mli", 99, 2454, 2454), ("plugins/cc/ccalgo.mli", 99, 2454, 2503), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 59)), 0); (("subterms", 1374), ((Tag1 (0, (Tag3 ((("forest", 1359)), 0, (0)), 100000000, 0, -42), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -41), (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -39); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -40)]), 100000000, 0, -38), 0), 100000000, 0, -37), 0), 100000000, 0, -36), 0, (("plugins/cc/ccalgo.mli", 101, 2505, 2505), ("plugins/cc/ccalgo.mli", 101, 2505, 2546), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 60)), 0); (("join_path", 1375), ((Tag1 (0, (Tag3 ((("forest", 1359)), 0, (0)), 100000000, 0, -35), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -34), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -33), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -24); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -25)]), 100000000, 0, -23); (Tag3 ((("equality", 1356)), 0, (0)), 100000000, 0, -26)]), 100000000, 0, -22)], (0)), 100000000, 0, -21); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -30); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -31)]), 100000000, 0, -29); (Tag3 ((("equality", 1356)), 0, (0)), 100000000, 0, -32)]), 100000000, 0, -28)], (0)), 100000000, 0, -27)]), 100000000, 0, -20), 0), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("plugins/cc/ccalgo.mli", 103, 2548, 2548), ("plugins/cc/ccalgo.mli", 104, 2588, 2651), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 61)), 0); (("execute", 1376), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -16), (Tag1 (0, (Tag3 ((("state", 1360)), 0, (0)), 100000000, 0, -15), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("explanation", 1361)), 0, (0)), 100000000, 0, -14)], (0)), 100000000, 0, -13), 0), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("plugins/cc/ccalgo.mli", 106, 2653, 2653), ("plugins/cc/ccalgo.mli", 106, 2653, 2702), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 62)), 0); (("pr_idx_term", 1377), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -10), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -9), (Tag1 (0, (Tag3 ((("forest", 1359)), 0, (0)), 100000000, 0, -8), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -7), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("plugins/cc/ccalgo.mli", 108, 2704, 2704), ("plugins/cc/ccalgo.mli", 108, 2704, 2774), 0), 0, Tag1 ("Cc_plugin__Ccalgo", 63)), 0)], "Cc_plugin__Ccalgo", [("Cc_plugin__Ccalgo", ("\166\b\168\142\029\212_\163R\249ts\199f?\t")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Unix", (":B72R\011\005Sj\189)\011\239PH\254")); ("UnivSubst", ("\190qu\031mc\130\181\003G]\132\"\219m)")); ("UnivProblem", ("6'\161\018\181\001.\253\000\141a6\171\1727\155")); ("UnivNames", ("%\151_\209%+JM$n\001\232\194n\178N")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UState", ("SD\203\215|\136\n\251\239\208\148\215C\n\167\005")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Summary", ("\148G\135\226\024L3\246\021\028U\146\164`\253\250")); ("Store", ("/dT\252\145\179pq\216{\181\206\190K+U")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Section", ("\245\207\b\021\142v=\155#w\246}\"4b\006")); ("Safe_typing", (")\250?\164\145\132\241\127\186\152h+\145\"\237l")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("Nativevalues", ("8:\007\025e\226c,\001\171\146#l\210\171\152")); ("Nativelib", ("V\239\205Y1\147E:,\176\196Hy\1483|")); ("Nativecode", ("\190\185\255\006m\012\210\163\138Rz\247\15283\183")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Monad", ("\244\171T\157\194p\187\160\149\195{\132\222\020\253\148")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hook", ("\183\194\223\003\155\169',\187\240a;E\b\1396")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Genlambda", ("\170}\024\241\141\222\136S\169\219\2212i\134KI")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evd", ("\211\205p\193\216\129r\006\239oN\142ar\196\175")); ("Evar_kinds", ("\023L\186\132\218}\254\221\185\198\220\200h\003{\021")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Entries", ("\172\201\198\221Ap\027_{\174\141C\021\";p")); ("EConstr", ("\201aW\156\157;N\004\201V\208\006L\166\211)")); ("Dyn", ("\131z`\205v\2306\007x\027&K.?;\169")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conversion", ("\158\150&\195M\tv\127|\029\158RRK\211A")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("Cc_plugin", ("\1458v\208\200L!\175\252\222\021\027\020\028\1675")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CUnix", ("\140Zl\153\167\011J\015\005|th\247OTu")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CDebug", ("^4\210p7\239!3\138\138\213?\239`\250\157")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])
val pr_idx_term : Environ.env -> Evd.evar_map -> forest -> int -> Pp.t

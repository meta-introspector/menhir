type 'a gen = unit -> 'a option
type 'a iter = ('a -> unit) -> unit
type 'a clonable = < clone : 'a clonable; gen : 'a gen >
type 'a t
val of_gen : 'a gen -> 'a t
val of_gen_lazy : ?max_chunk_size:int -> ?caching:bool -> 'a gen -> 'a t
val to_gen : 'a t -> 'a gen
val to_seq : 'a t -> 'a Seq.t("DEBUG:rule", [Tag1 (("gen", 400), ([((("a")), 100000000, 0, -45)], 1, 0, 1, ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -46), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -45)], (0)), 100000000, 0, -44), 0), 100000000, 0, -43)), [25], [0], 0, 0, (("src/genMList.mli", 34, 786, 786), ("src/genMList.mli", 34, 786, 817), 0), 0, 0, 0, Tag1 ("GenMList", 0)), 1, 0); Tag1 (("iter", 401), ([((("a")), 100000000, 0, -42)], 1, 0, 1, ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -42), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -41), 0), 100000000, 0, -40), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -39), 0), 100000000, 0, -38)), [29], [0], 0, 0, (("src/genMList.mli", 35, 818, 818), ("src/genMList.mli", 35, 818, 853), 0), 0, 0, 0, Tag1 ("GenMList", 1)), 1, 0); Tag1 (("clonable", 402), ([((("a")), 100000000, 0, -35)], 1, 0, 1, ((Tag4 ((Tag5 ("clone", 1, (Tag10 ((Tag3 ((("clonable", 402)), [((("a")), 100000000, 0, -35)], (0)), 100000000, 0, -34), 0), 100000000, 0, -33), (Tag5 ("gen", 1, (Tag10 ((Tag3 ((("gen", 400)), [((("a")), 100000000, 0, -35)], (0)), 100000000, 0, -37), 0), 100000000, 0, -36), (0, 100000000, 0, -32)), 100000000, 0, 40)), 100000000, 0, -30), (0)), 100000000, 0, -29)), [25], [0], 0, 0, (("src/genMList.mli", 36, 854, 854), ("src/genMList.mli", 39, 993, 994), 0), 0, 0, 0, Tag1 ("GenMList", 2)), 1, 0); Tag1 (("t", 403), ([((("a")), 100000000, 0, -28)], 1, 0, 1, 0, [7], [2], 0, 0, (("src/genMList.mli", 41, 996, 996), ("src/genMList.mli", 41, 996, 1005), 0), 0, 0, 0, Tag1 ("GenMList", 3)), 1, 0); (("of_gen", 404), ((Tag1 (0, (Tag3 ((("gen", 400)), [((("a")), 100000000, 0, -26)], (0)), 100000000, 0, -27), (Tag3 ((("t", 403)), [((("a")), 100000000, 0, -26)], (0)), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("src/genMList.mli", 45, 1100, 1100), ("src/genMList.mli", 45, 1100, 1127), 0), 0, Tag1 ("GenMList", 4)), 0); (("of_gen_lazy", 405), ((Tag1 (Tag1 ("max_chunk_size"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -23)], (0)), 100000000, 0, -22), (Tag1 (Tag1 ("caching"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -21)], (0)), 100000000, 0, -20), (Tag1 (0, (Tag3 ((("gen", 400)), [((("a")), 100000000, 0, -18)], (0)), 100000000, 0, -19), (Tag3 ((("t", 403)), [((("a")), 100000000, 0, -18)], (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0), 100000000, 0, -15), 0), 100000000, 0, -14), 0, (("src/genMList.mli", 48, 1177, 1177), ("src/genMList.mli", 48, 1177, 1249), 0), 0, Tag1 ("GenMList", 5)), 0); (("to_gen", 406), ((Tag1 (0, (Tag3 ((("t", 403)), [((("a")), 100000000, 0, -12)], (0)), 100000000, 0, -13), (Tag3 ((("gen", 400)), [((("a")), 100000000, 0, -12)], (0)), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("src/genMList.mli", 57, 1701, 1701), ("src/genMList.mli", 57, 1701, 1728), 0), 0, Tag1 ("GenMList", 6)), 0); (("to_seq", 407), ((Tag1 (0, (Tag3 ((("t", 403)), [((("a")), 100000000, 0, -8)], (0)), 100000000, 0, -9), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [((("a")), 100000000, 0, -8)], (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0, (("src/genMList.mli", 61, 1851, 1851), ("src/genMList.mli", 61, 1851, 1880), 0), 0, Tag1 ("GenMList", 7)), 0); (("to_clonable", 408), ((Tag1 (0, (Tag3 ((("t", 403)), [((("a")), 100000000, 0, -4)], (0)), 100000000, 0, -5), (Tag3 ((("clonable", 402)), [((("a")), 100000000, 0, -4)], (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/genMList.mli", 65, 1966, 1966), ("src/genMList.mli", 65, 1966, 2003), 0), 0, Tag1 ("GenMList", 8)), 0)], "GenMList", [("GenMList", ("\233\224\194U\201'\169\n\167c\210\175\208\155\004\172")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

val to_clonable : 'a t -> 'a clonable

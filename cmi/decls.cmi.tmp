type theorem_kind =
    Theorem
  | Lemma
  | Fact
  | Remark
  | Property
  | Proposition
  | Corollary
type definition_object_kind =
    Definition
  | Coercion
  | SubClass
  | CanonicalStructure
  | Example
  | Fixpoint
  | CoFixpoint
  | Scheme
  | StructureComponent
  | IdentityCoercion
  | Instance
  | Method
  | Let
type assumption_object_kind = Definitional | Logical | Conjectural | Context
type logical_kind =
    IsPrimitive
  | IsAssumption of assumption_object_kind
  | IsDefinition of definition_object_kind
  | IsProof of theorem_kind
type variable_data = { opaque : bool; kind : logical_kind; }
val add_variable_data : Names.variable -> variable_data -> unit
val variable_secpath : Names.variable -> Libnames.qualid
val variable_kind : Names.variable -> logical_kind
val variable_opacity : Names.variable -> bool
("DEBUG:rule", [Tag1 (("theorem_kind", 435), (0, 0, Tag1 ([(("Theorem", 396), (0), 0, (("interp/decls.mli", 15, 722, 724), ("interp/decls.mli", 15, 722, 733), 0), 0, Tag1 ("Decls", 1)); (("Lemma", 397), (0), 0, (("interp/decls.mli", 16, 734, 736), ("interp/decls.mli", 16, 734, 743), 0), 0, Tag1 ("Decls", 2)); (("Fact", 398), (0), 0, (("interp/decls.mli", 17, 744, 746), ("interp/decls.mli", 17, 744, 752), 0), 0, Tag1 ("Decls", 3)); (("Remark", 399), (0), 0, (("interp/decls.mli", 18, 753, 755), ("interp/decls.mli", 18, 753, 763), 0), 0, Tag1 ("Decls", 4)); (("Property", 400), (0), 0, (("interp/decls.mli", 19, 764, 766), ("interp/decls.mli", 19, 764, 776), 0), 0, Tag1 ("Decls", 5)); (("Proposition", 401), (0), 0, (("interp/decls.mli", 20, 777, 779), ("interp/decls.mli", 20, 777, 792), 0), 0, Tag1 ("Decls", 6)); (("Corollary", 402), (0), 0, (("interp/decls.mli", 21, 793, 795), ("interp/decls.mli", 21, 793, 806), 0), 0, Tag1 ("Decls", 7))], 0), 1, 0, 0, 0, 0, 0, (("interp/decls.mli", 14, 702, 702), ("interp/decls.mli", 21, 793, 806), 0), 0, 1, 0, Tag1 ("Decls", 0)), 1, 0); Tag1 (("definition_object_kind", 436), (0, 0, Tag1 ([(("Definition", 404), (0), 0, (("interp/decls.mli", 24, 838, 840), ("interp/decls.mli", 24, 838, 852), 0), 0, Tag1 ("Decls", 9)); (("Coercion", 405), (0), 0, (("interp/decls.mli", 25, 853, 855), ("interp/decls.mli", 25, 853, 865), 0), 0, Tag1 ("Decls", 10)); (("SubClass", 406), (0), 0, (("interp/decls.mli", 26, 866, 868), ("interp/decls.mli", 26, 866, 878), 0), 0, Tag1 ("Decls", 11)); (("CanonicalStructure", 407), (0), 0, (("interp/decls.mli", 27, 879, 881), ("interp/decls.mli", 27, 879, 901), 0), 0, Tag1 ("Decls", 12)); (("Example", 408), (0), 0, (("interp/decls.mli", 28, 902, 904), ("interp/decls.mli", 28, 902, 913), 0), 0, Tag1 ("Decls", 13)); (("Fixpoint", 409), (0), 0, (("interp/decls.mli", 29, 914, 916), ("interp/decls.mli", 29, 914, 926), 0), 0, Tag1 ("Decls", 14)); (("CoFixpoint", 410), (0), 0, (("interp/decls.mli", 30, 927, 929), ("interp/decls.mli", 30, 927, 941), 0), 0, Tag1 ("Decls", 15)); (("Scheme", 411), (0), 0, (("interp/decls.mli", 31, 942, 944), ("interp/decls.mli", 31, 942, 952), 0), 0, Tag1 ("Decls", 16)); (("StructureComponent", 412), (0), 0, (("interp/decls.mli", 32, 953, 955), ("interp/decls.mli", 32, 953, 975), 0), 0, Tag1 ("Decls", 17)); (("IdentityCoercion", 413), (0), 0, (("interp/decls.mli", 33, 976, 978), ("interp/decls.mli", 33, 976, 996), 0), 0, Tag1 ("Decls", 18)); (("Instance", 414), (0), 0, (("interp/decls.mli", 34, 997, 999), ("interp/decls.mli", 34, 997, 1009), 0), 0, Tag1 ("Decls", 19)); (("Method", 415), (0), 0, (("interp/decls.mli", 35, 1010, 1012), ("interp/decls.mli", 35, 1010, 1020), 0), 0, Tag1 ("Decls", 20)); (("Let", 416), (0), 0, (("interp/decls.mli", 36, 1021, 1023), ("interp/decls.mli", 36, 1021, 1028), 0), 0, Tag1 ("Decls", 21))], 0), 1, 0, 0, 0, 0, 0, (("interp/decls.mli", 23, 808, 808), ("interp/decls.mli", 36, 1021, 1028), 0), 0, 1, 0, Tag1 ("Decls", 8)), 1, 0); Tag1 (("assumption_object_kind", 437), (0, 0, Tag1 ([(("Definitional", 418), (0), 0, (("interp/decls.mli", 38, 1030, 1060), ("interp/decls.mli", 38, 1030, 1072), 0), 0, Tag1 ("Decls", 23)); (("Logical", 419), (0), 0, (("interp/decls.mli", 38, 1030, 1073), ("interp/decls.mli", 38, 1030, 1082), 0), 0, Tag1 ("Decls", 24)); (("Conjectural", 420), (0), 0, (("interp/decls.mli", 38, 1030, 1083), ("interp/decls.mli", 38, 1030, 1096), 0), 0, Tag1 ("Decls", 25)); (("Context", 421), (0), 0, (("interp/decls.mli", 38, 1030, 1097), ("interp/decls.mli", 38, 1030, 1106), 0), 0, Tag1 ("Decls", 26))], 0), 1, 0, 0, 0, 0, 0, (("interp/decls.mli", 38, 1030, 1030), ("interp/decls.mli", 38, 1030, 1106), 0), 0, 1, 0, Tag1 ("Decls", 22)), 1, 0); Tag1 (("logical_kind", 438), (0, 0, Tag1 ([(("IsPrimitive", 423), (0), 0, (("interp/decls.mli", 52, 1344, 1346), ("interp/decls.mli", 52, 1344, 1359), 0), 0, Tag1 ("Decls", 28)); (("IsAssumption", 424), ([(Tag3 ((("assumption_object_kind", 437)), 0, (0)), 100000000, 0, -21)]), 0, (("interp/decls.mli", 53, 1360, 1362), ("interp/decls.mli", 53, 1360, 1402), 0), 0, Tag1 ("Decls", 29)); (("IsDefinition", 425), ([(Tag3 ((("definition_object_kind", 436)), 0, (0)), 100000000, 0, -22)]), 0, (("interp/decls.mli", 54, 1403, 1405), ("interp/decls.mli", 54, 1403, 1445), 0), 0, Tag1 ("Decls", 30)); (("IsProof", 426), ([(Tag3 ((("theorem_kind", 435)), 0, (0)), 100000000, 0, -23)]), 0, (("interp/decls.mli", 55, 1446, 1448), ("interp/decls.mli", 55, 1446, 1473), 0), 0, Tag1 ("Decls", 31))], 0), 1, 0, 0, 0, 0, 0, (("interp/decls.mli", 51, 1324, 1324), ("interp/decls.mli", 55, 1446, 1473), 0), 0, 0, 0, Tag1 ("Decls", 27)), 1, 0); Tag1 (("variable_data", 439), (0, 0, [[(("opaque", 428), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -19), (("interp/decls.mli", 64, 1742, 1744), ("interp/decls.mli", 64, 1742, 1756), 0), 0, Tag1 ("Decls", 33)); (("kind", 429), 0, (Tag3 ((("logical_kind", 438)), 0, (0)), 100000000, 0, -20), (("interp/decls.mli", 65, 1757, 1759), ("interp/decls.mli", 65, 1757, 1777), 0), 0, Tag1 ("Decls", 34))]], 1, 0, 0, 0, 0, 0, (("interp/decls.mli", 63, 1719, 1719), ("interp/decls.mli", 66, 1778, 1779), 0), 0, 0, 0, Tag1 ("Decls", 32)), 1, 0); (("add_variable_data", 440), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "variable"), 0, (0)), 100000000, 0, -18), (Tag1 (0, (Tag3 ((("variable_data", 439)), 0, (0)), 100000000, 0, -17), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -16), 0), 100000000, 0, -15), 0), 100000000, 0, -14), 0, (("interp/decls.mli", 68, 1781, 1781), ("interp/decls.mli", 68, 1781, 1838), 0), 0, Tag1 ("Decls", 35)), 0); (("variable_secpath", 441), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "variable"), 0, (0)), 100000000, 0, -13), (Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("interp/decls.mli", 71, 1868, 1868), ("interp/decls.mli", 71, 1868, 1909), 0), 0, Tag1 ("Decls", 36)), 0); (("variable_kind", 442), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "variable"), 0, (0)), 100000000, 0, -10), (Tag3 ((("logical_kind", 438)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("interp/decls.mli", 72, 1910, 1910), ("interp/decls.mli", 72, 1910, 1954), 0), 0, Tag1 ("Decls", 37)), 0); (("variable_opacity", 443), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "variable"), 0, (0)), 100000000, 0, -7), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("interp/decls.mli", 75, 1990, 1990), ("interp/decls.mli", 75, 1990, 2029), 0), 0, Tag1 ("Decls", 38)), 0); (("variable_exists", 444), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "variable"), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("interp/decls.mli", 78, 2067, 2067), ("interp/decls.mli", 78, 2067, 2105), 0), 0, Tag1 ("Decls", 39)), 0)], "Decls", [("Decls", ("\140C{$\142?\215\153\180\186h;\153\139\187\129")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150"))], [(0)])
val variable_exists : Names.variable -> bool

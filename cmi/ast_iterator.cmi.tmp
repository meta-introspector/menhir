type iterator = {
  attribute : iterator -> Parsetree.attribute -> unit;
  attributes : iterator -> Parsetree.attribute list -> unit;
  binding_op : iterator -> Parsetree.binding_op -> unit;
  case : iterator -> Parsetree.case -> unit;
  cases : iterator -> Parsetree.case list -> unit;
  class_declaration : iterator -> Parsetree.class_declaration -> unit;
  class_description : iterator -> Parsetree.class_description -> unit;
  class_expr : iterator -> Parsetree.class_expr -> unit;
  class_field : iterator -> Parsetree.class_field -> unit;
  class_signature : iterator -> Parsetree.class_signature -> unit;
  class_structure : iterator -> Parsetree.class_structure -> unit;
  class_type : iterator -> Parsetree.class_type -> unit;
  class_type_declaration :
    iterator -> Parsetree.class_type_declaration -> unit;
  class_type_field : iterator -> Parsetree.class_type_field -> unit;
  constructor_declaration :
    iterator -> Parsetree.constructor_declaration -> unit;
  expr : iterator -> Parsetree.expression -> unit;
  extension : iterator -> Parsetree.extension -> unit;
  extension_constructor : iterator -> Parsetree.extension_constructor -> unit;
  include_declaration : iterator -> Parsetree.include_declaration -> unit;
  include_description : iterator -> Parsetree.include_description -> unit;
  label_declaration : iterator -> Parsetree.label_declaration -> unit;
  location : iterator -> Location.t -> unit;
  module_binding : iterator -> Parsetree.module_binding -> unit;
  module_declaration : iterator -> Parsetree.module_declaration -> unit;
  module_substitution : iterator -> Parsetree.module_substitution -> unit;
  module_expr : iterator -> Parsetree.module_expr -> unit;
  module_type : iterator -> Parsetree.module_type -> unit;
  module_type_declaration :
    iterator -> Parsetree.module_type_declaration -> unit;
  open_declaration : iterator -> Parsetree.open_declaration -> unit;
  open_description : iterator -> Parsetree.open_description -> unit;
  pat : iterator -> Parsetree.pattern -> unit;
  payload : iterator -> Parsetree.payload -> unit;
  signature : iterator -> Parsetree.signature -> unit;
  signature_item : iterator -> Parsetree.signature_item -> unit;
  structure : iterator -> Parsetree.structure -> unit;
  structure_item : iterator -> Parsetree.structure_item -> unit;
  typ : iterator -> Parsetree.core_type -> unit;
  row_field : iterator -> Parsetree.row_field -> unit;
  object_field : iterator -> Parsetree.object_field -> unit;
  type_declaration : iterator -> Parsetree.type_declaration -> unit;
  type_extension : iterator -> Parsetree.type_extension -> unit;
  type_exception : iterator -> Parsetree.type_exception -> unit;
  type_kind : iterator -> Parsetree.type_kind -> unit;
  value_binding : iterator -> Parsetree.value_binding -> unit;
  value_description : iterator -> Parsetree.value_description -> unit;
  with_constraint : iterator -> Parsetree.with_constraint -> unit;
}("DEBUG:rule", [Tag1 (("iterator", 501), (0, 0, [[(("attribute", 343), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -7), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "attribute"), 0, (0)), 100000000, 0, -6), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), (("parsing/ast_iterator.mli", 31, 1491, 1493), ("parsing/ast_iterator.mli", 31, 1491, 1534), 0), 0, Tag1 ("Ast_iterator", 3)); (("attributes", 344), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -13), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Parsetree")), "attribute"), 0, (0)), 100000000, 0, -12)], (0)), 100000000, 0, -11), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10), 0), 100000000, 0, -9), 0), 100000000, 0, -8), (("parsing/ast_iterator.mli", 32, 1535, 1537), ("parsing/ast_iterator.mli", 32, 1535, 1584), 0), 0, Tag1 ("Ast_iterator", 4)); (("binding_op", 345), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -18), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "binding_op"), 0, (0)), 100000000, 0, -17), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -16), 0), 100000000, 0, -15), 0), 100000000, 0, -14), (("parsing/ast_iterator.mli", 33, 1585, 1587), ("parsing/ast_iterator.mli", 33, 1585, 1630), 0), 0, Tag1 ("Ast_iterator", 5)); (("case", 346), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -23), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "case"), 0, (0)), 100000000, 0, -22), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0), 100000000, 0, -19), (("parsing/ast_iterator.mli", 34, 1631, 1633), ("parsing/ast_iterator.mli", 34, 1631, 1664), 0), 0, Tag1 ("Ast_iterator", 6)); (("cases", 347), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -29), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Parsetree")), "case"), 0, (0)), 100000000, 0, -28)], (0)), 100000000, 0, -27), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -26), 0), 100000000, 0, -25), 0), 100000000, 0, -24), (("parsing/ast_iterator.mli", 35, 1665, 1667), ("parsing/ast_iterator.mli", 35, 1665, 1704), 0), 0, Tag1 ("Ast_iterator", 7)); (("class_declaration", 348), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -34), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "class_declaration"), 0, (0)), 100000000, 0, -33), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0), 100000000, 0, -30), (("parsing/ast_iterator.mli", 36, 1705, 1707), ("parsing/ast_iterator.mli", 36, 1705, 1764), 0), 0, Tag1 ("Ast_iterator", 8)); (("class_description", 349), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -39), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "class_description"), 0, (0)), 100000000, 0, -38), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -37), 0), 100000000, 0, -36), 0), 100000000, 0, -35), (("parsing/ast_iterator.mli", 37, 1765, 1767), ("parsing/ast_iterator.mli", 37, 1765, 1824), 0), 0, Tag1 ("Ast_iterator", 9)); (("class_expr", 350), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -44), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "class_expr"), 0, (0)), 100000000, 0, -43), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0), 100000000, 0, -40), (("parsing/ast_iterator.mli", 38, 1825, 1827), ("parsing/ast_iterator.mli", 38, 1825, 1870), 0), 0, Tag1 ("Ast_iterator", 10)); (("class_field", 351), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -49), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "class_field"), 0, (0)), 100000000, 0, -48), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -47), 0), 100000000, 0, -46), 0), 100000000, 0, -45), (("parsing/ast_iterator.mli", 39, 1871, 1873), ("parsing/ast_iterator.mli", 39, 1871, 1918), 0), 0, Tag1 ("Ast_iterator", 11)); (("class_signature", 352), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -54), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "class_signature"), 0, (0)), 100000000, 0, -53), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -52), 0), 100000000, 0, -51), 0), 100000000, 0, -50), (("parsing/ast_iterator.mli", 40, 1919, 1921), ("parsing/ast_iterator.mli", 40, 1919, 1974), 0), 0, Tag1 ("Ast_iterator", 12)); (("class_structure", 353), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -59), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "class_structure"), 0, (0)), 100000000, 0, -58), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -57), 0), 100000000, 0, -56), 0), 100000000, 0, -55), (("parsing/ast_iterator.mli", 41, 1975, 1977), ("parsing/ast_iterator.mli", 41, 1975, 2030), 0), 0, Tag1 ("Ast_iterator", 13)); (("class_type", 354), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -64), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "class_type"), 0, (0)), 100000000, 0, -63), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -62), 0), 100000000, 0, -61), 0), 100000000, 0, -60), (("parsing/ast_iterator.mli", 42, 2031, 2033), ("parsing/ast_iterator.mli", 42, 2031, 2076), 0), 0, Tag1 ("Ast_iterator", 14)); (("class_type_declaration", 355), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -69), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "class_type_declaration"), 0, (0)), 100000000, 0, -68), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -67), 0), 100000000, 0, -66), 0), 100000000, 0, -65), (("parsing/ast_iterator.mli", 43, 2077, 2079), ("parsing/ast_iterator.mli", 43, 2077, 2146), 0), 0, Tag1 ("Ast_iterator", 15)); (("class_type_field", 356), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -74), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "class_type_field"), 0, (0)), 100000000, 0, -73), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -72), 0), 100000000, 0, -71), 0), 100000000, 0, -70), (("parsing/ast_iterator.mli", 44, 2147, 2149), ("parsing/ast_iterator.mli", 44, 2147, 2204), 0), 0, Tag1 ("Ast_iterator", 16)); (("constructor_declaration", 357), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -79), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "constructor_declaration"), 0, (0)), 100000000, 0, -78), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -77), 0), 100000000, 0, -76), 0), 100000000, 0, -75), (("parsing/ast_iterator.mli", 45, 2205, 2207), ("parsing/ast_iterator.mli", 45, 2205, 2276), 0), 0, Tag1 ("Ast_iterator", 17)); (("expr", 358), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -84), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "expression"), 0, (0)), 100000000, 0, -83), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -82), 0), 100000000, 0, -81), 0), 100000000, 0, -80), (("parsing/ast_iterator.mli", 46, 2277, 2279), ("parsing/ast_iterator.mli", 46, 2277, 2316), 0), 0, Tag1 ("Ast_iterator", 18)); (("extension", 359), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -89), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "extension"), 0, (0)), 100000000, 0, -88), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -87), 0), 100000000, 0, -86), 0), 100000000, 0, -85), (("parsing/ast_iterator.mli", 47, 2317, 2319), ("parsing/ast_iterator.mli", 47, 2317, 2360), 0), 0, Tag1 ("Ast_iterator", 19)); (("extension_constructor", 360), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -94), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "extension_constructor"), 0, (0)), 100000000, 0, -93), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -92), 0), 100000000, 0, -91), 0), 100000000, 0, -90), (("parsing/ast_iterator.mli", 48, 2361, 2363), ("parsing/ast_iterator.mli", 48, 2361, 2428), 0), 0, Tag1 ("Ast_iterator", 20)); (("include_declaration", 361), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -99), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "include_declaration"), 0, (0)), 100000000, 0, -98), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -97), 0), 100000000, 0, -96), 0), 100000000, 0, -95), (("parsing/ast_iterator.mli", 49, 2429, 2431), ("parsing/ast_iterator.mli", 49, 2429, 2492), 0), 0, Tag1 ("Ast_iterator", 21)); (("include_description", 362), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -104), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "include_description"), 0, (0)), 100000000, 0, -103), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -102), 0), 100000000, 0, -101), 0), 100000000, 0, -100), (("parsing/ast_iterator.mli", 50, 2493, 2495), ("parsing/ast_iterator.mli", 50, 2493, 2556), 0), 0, Tag1 ("Ast_iterator", 22)); (("label_declaration", 363), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -109), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "label_declaration"), 0, (0)), 100000000, 0, -108), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -107), 0), 100000000, 0, -106), 0), 100000000, 0, -105), (("parsing/ast_iterator.mli", 51, 2557, 2559), ("parsing/ast_iterator.mli", 51, 2557, 2616), 0), 0, Tag1 ("Ast_iterator", 23)); (("location", 430), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -114), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -113), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -112), 0), 100000000, 0, -111), 0), 100000000, 0, -110), (("parsing/ast_iterator.mli", 52, 2617, 2619), ("parsing/ast_iterator.mli", 52, 2617, 2660), 0), 0, Tag1 ("Ast_iterator", 24)); (("module_binding", 431), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -119), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "module_binding"), 0, (0)), 100000000, 0, -118), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -117), 0), 100000000, 0, -116), 0), 100000000, 0, -115), (("parsing/ast_iterator.mli", 53, 2661, 2663), ("parsing/ast_iterator.mli", 53, 2661, 2714), 0), 0, Tag1 ("Ast_iterator", 25)); (("module_declaration", 432), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -124), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "module_declaration"), 0, (0)), 100000000, 0, -123), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -122), 0), 100000000, 0, -121), 0), 100000000, 0, -120), (("parsing/ast_iterator.mli", 54, 2715, 2717), ("parsing/ast_iterator.mli", 54, 2715, 2776), 0), 0, Tag1 ("Ast_iterator", 26)); (("module_substitution", 433), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -129), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "module_substitution"), 0, (0)), 100000000, 0, -128), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -127), 0), 100000000, 0, -126), 0), 100000000, 0, -125), (("parsing/ast_iterator.mli", 55, 2777, 2779), ("parsing/ast_iterator.mli", 55, 2777, 2840), 0), 0, Tag1 ("Ast_iterator", 27)); (("module_expr", 434), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -134), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "module_expr"), 0, (0)), 100000000, 0, -133), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -132), 0), 100000000, 0, -131), 0), 100000000, 0, -130), (("parsing/ast_iterator.mli", 56, 2841, 2843), ("parsing/ast_iterator.mli", 56, 2841, 2888), 0), 0, Tag1 ("Ast_iterator", 28)); (("module_type", 435), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -139), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "module_type"), 0, (0)), 100000000, 0, -138), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -137), 0), 100000000, 0, -136), 0), 100000000, 0, -135), (("parsing/ast_iterator.mli", 57, 2889, 2891), ("parsing/ast_iterator.mli", 57, 2889, 2936), 0), 0, Tag1 ("Ast_iterator", 29)); (("module_type_declaration", 436), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -144), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "module_type_declaration"), 0, (0)), 100000000, 0, -143), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -142), 0), 100000000, 0, -141), 0), 100000000, 0, -140), (("parsing/ast_iterator.mli", 58, 2937, 2939), ("parsing/ast_iterator.mli", 58, 2937, 3008), 0), 0, Tag1 ("Ast_iterator", 30)); (("open_declaration", 437), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -149), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "open_declaration"), 0, (0)), 100000000, 0, -148), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -147), 0), 100000000, 0, -146), 0), 100000000, 0, -145), (("parsing/ast_iterator.mli", 59, 3009, 3011), ("parsing/ast_iterator.mli", 59, 3009, 3066), 0), 0, Tag1 ("Ast_iterator", 31)); (("open_description", 438), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -154), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "open_description"), 0, (0)), 100000000, 0, -153), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -152), 0), 100000000, 0, -151), 0), 100000000, 0, -150), (("parsing/ast_iterator.mli", 60, 3067, 3069), ("parsing/ast_iterator.mli", 60, 3067, 3124), 0), 0, Tag1 ("Ast_iterator", 32)); (("pat", 439), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -159), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "pattern"), 0, (0)), 100000000, 0, -158), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -157), 0), 100000000, 0, -156), 0), 100000000, 0, -155), (("parsing/ast_iterator.mli", 61, 3125, 3127), ("parsing/ast_iterator.mli", 61, 3125, 3160), 0), 0, Tag1 ("Ast_iterator", 33)); (("payload", 440), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -164), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "payload"), 0, (0)), 100000000, 0, -163), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -162), 0), 100000000, 0, -161), 0), 100000000, 0, -160), (("parsing/ast_iterator.mli", 62, 3161, 3163), ("parsing/ast_iterator.mli", 62, 3161, 3200), 0), 0, Tag1 ("Ast_iterator", 34)); (("signature", 441), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -169), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "signature"), 0, (0)), 100000000, 0, -168), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -167), 0), 100000000, 0, -166), 0), 100000000, 0, -165), (("parsing/ast_iterator.mli", 63, 3201, 3203), ("parsing/ast_iterator.mli", 63, 3201, 3244), 0), 0, Tag1 ("Ast_iterator", 35)); (("signature_item", 442), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -174), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "signature_item"), 0, (0)), 100000000, 0, -173), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -172), 0), 100000000, 0, -171), 0), 100000000, 0, -170), (("parsing/ast_iterator.mli", 64, 3245, 3247), ("parsing/ast_iterator.mli", 64, 3245, 3298), 0), 0, Tag1 ("Ast_iterator", 36)); (("structure", 443), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -179), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "structure"), 0, (0)), 100000000, 0, -178), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -177), 0), 100000000, 0, -176), 0), 100000000, 0, -175), (("parsing/ast_iterator.mli", 65, 3299, 3301), ("parsing/ast_iterator.mli", 65, 3299, 3342), 0), 0, Tag1 ("Ast_iterator", 37)); (("structure_item", 444), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -184), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "structure_item"), 0, (0)), 100000000, 0, -183), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -182), 0), 100000000, 0, -181), 0), 100000000, 0, -180), (("parsing/ast_iterator.mli", 66, 3343, 3345), ("parsing/ast_iterator.mli", 66, 3343, 3396), 0), 0, Tag1 ("Ast_iterator", 38)); (("typ", 445), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -189), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "core_type"), 0, (0)), 100000000, 0, -188), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -187), 0), 100000000, 0, -186), 0), 100000000, 0, -185), (("parsing/ast_iterator.mli", 67, 3397, 3399), ("parsing/ast_iterator.mli", 67, 3397, 3434), 0), 0, Tag1 ("Ast_iterator", 39)); (("row_field", 446), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -194), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "row_field"), 0, (0)), 100000000, 0, -193), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -192), 0), 100000000, 0, -191), 0), 100000000, 0, -190), (("parsing/ast_iterator.mli", 68, 3435, 3437), ("parsing/ast_iterator.mli", 68, 3435, 3478), 0), 0, Tag1 ("Ast_iterator", 40)); (("object_field", 447), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -199), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "object_field"), 0, (0)), 100000000, 0, -198), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -197), 0), 100000000, 0, -196), 0), 100000000, 0, -195), (("parsing/ast_iterator.mli", 69, 3479, 3481), ("parsing/ast_iterator.mli", 69, 3479, 3528), 0), 0, Tag1 ("Ast_iterator", 41)); (("type_declaration", 448), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -204), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "type_declaration"), 0, (0)), 100000000, 0, -203), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -202), 0), 100000000, 0, -201), 0), 100000000, 0, -200), (("parsing/ast_iterator.mli", 70, 3529, 3531), ("parsing/ast_iterator.mli", 70, 3529, 3586), 0), 0, Tag1 ("Ast_iterator", 42)); (("type_extension", 449), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -209), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "type_extension"), 0, (0)), 100000000, 0, -208), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -207), 0), 100000000, 0, -206), 0), 100000000, 0, -205), (("parsing/ast_iterator.mli", 71, 3587, 3589), ("parsing/ast_iterator.mli", 71, 3587, 3640), 0), 0, Tag1 ("Ast_iterator", 43)); (("type_exception", 450), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -214), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "type_exception"), 0, (0)), 100000000, 0, -213), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -212), 0), 100000000, 0, -211), 0), 100000000, 0, -210), (("parsing/ast_iterator.mli", 72, 3641, 3643), ("parsing/ast_iterator.mli", 72, 3641, 3694), 0), 0, Tag1 ("Ast_iterator", 44)); (("type_kind", 451), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -219), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "type_kind"), 0, (0)), 100000000, 0, -218), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -217), 0), 100000000, 0, -216), 0), 100000000, 0, -215), (("parsing/ast_iterator.mli", 73, 3695, 3697), ("parsing/ast_iterator.mli", 73, 3695, 3738), 0), 0, Tag1 ("Ast_iterator", 45)); (("value_binding", 452), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -224), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "value_binding"), 0, (0)), 100000000, 0, -223), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -222), 0), 100000000, 0, -221), 0), 100000000, 0, -220), (("parsing/ast_iterator.mli", 74, 3739, 3741), ("parsing/ast_iterator.mli", 74, 3739, 3790), 0), 0, Tag1 ("Ast_iterator", 46)); (("value_description", 453), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -229), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "value_description"), 0, (0)), 100000000, 0, -228), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -227), 0), 100000000, 0, -226), 0), 100000000, 0, -225), (("parsing/ast_iterator.mli", 75, 3791, 3793), ("parsing/ast_iterator.mli", 75, 3791, 3850), 0), 0, Tag1 ("Ast_iterator", 47)); (("with_constraint", 454), 0, (Tag1 (0, (Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -234), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "with_constraint"), 0, (0)), 100000000, 0, -233), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -232), 0), 100000000, 0, -231), 0), 100000000, 0, -230), (("parsing/ast_iterator.mli", 76, 3851, 3853), ("parsing/ast_iterator.mli", 76, 3851, 3906), 0), 0, Tag1 ("Ast_iterator", 48))]], 1, 0, 0, 0, 0, 0, (("parsing/ast_iterator.mli", 30, 1473, 1473), ("parsing/ast_iterator.mli", 77, 3907, 3908), 0), 0, 0, 0, Tag1 ("Ast_iterator", 2)), 1, 0); (("default_iterator", 502), ((Tag3 ((("iterator", 501)), 0, (0)), 100000000, 0, -2), 0, (("parsing/ast_iterator.mli", 83, 4127, 4127), ("parsing/ast_iterator.mli", 83, 4127, 4157), 0), 0, Tag1 ("Ast_iterator", 49)), 0)], "Ast_iterator", [("Ast_iterator", ("7\030`A\003\229O\254\182\137Q\129+`<O")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])

val default_iterator : iterator

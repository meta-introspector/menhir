val get_pattern_id : Glob_term.cases_pattern -> Names.Id.t list
val pattern_to_term : Glob_term.cases_pattern -> Glob_term.glob_constr
val mkGRef : Names.GlobRef.t -> Glob_term.glob_constr
val mkGVar : Names.Id.t -> Glob_term.glob_constr
val mkGApp :
  Glob_term.glob_constr * Glob_term.glob_constr list -> Glob_term.glob_constr
val mkGLambda :
  Names.Name.t * Glob_term.glob_constr * Glob_term.glob_constr ->
  Glob_term.glob_constr
val mkGProd :
  Names.Name.t * Glob_term.glob_constr * Glob_term.glob_constr ->
  Glob_term.glob_constr
val mkGLetIn :
  Names.Name.t * Glob_term.glob_constr * Glob_term.glob_constr option *
  Glob_term.glob_constr -> Glob_term.glob_constr
val mkGCases :
  Glob_term.glob_constr option * Glob_term.tomatch_tuples *
  Glob_term.cases_clauses -> Glob_term.glob_constr
val mkGHole : unit -> Glob_term.glob_constr
val glob_decompose_app :
  Glob_term.glob_constr -> Glob_term.glob_constr * Glob_term.glob_constr list
val glob_make_eq :
  ?typ:Glob_term.glob_constr ->
  Glob_term.glob_constr -> Glob_term.glob_constr -> Glob_term.glob_constr
val glob_make_neq :
  Glob_term.glob_constr -> Glob_term.glob_constr -> Glob_term.glob_constr
val change_vars :
  Names.Id.t Names.Id.Map.t -> Glob_term.glob_constr -> Glob_term.glob_constr
val alpha_pat :
  Names.Id.Map.key list ->
  Glob_term.cases_pattern ->
  Glob_term.cases_pattern * Names.Id.Map.key list * Names.Id.t Names.Id.Map.t
val alpha_rt :
  Names.Id.t list -> Glob_term.glob_constr -> Glob_term.glob_constr
val alpha_br :
  Names.Id.t list -> Glob_term.cases_clause -> Glob_term.cases_clause
val replace_var_by_term :
  Names.Id.t ->
  Glob_term.glob_constr -> Glob_term.glob_constr -> Glob_term.glob_constr
val is_free_in : Names.Id.t -> Glob_term.glob_constr -> bool
val are_unifiable :
  Environ.env -> Glob_term.cases_pattern -> Glob_term.cases_pattern -> bool
val eq_cases_pattern :
  Environ.env -> Glob_term.cases_pattern -> Glob_term.cases_pattern -> bool
val ids_of_pat : Glob_term.cases_pattern -> Names.Id.Set.t
val expand_as : Glob_term.glob_constr -> Glob_term.glob_constr
val resolve_and_replace_implicits :
  ?flags:Pretyping.inference_flags ->
  ?expected_type:Pretyping.typing_constraint ->
  Environ.env ->
  ("DEBUG:rule", [(("get_pattern_id", 929), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "cases_pattern"), 0, (0)), 100000000, 0, -143), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -142)], (0)), 100000000, 0, -141), 0), 100000000, 0, -140), 0, (("plugins/funind/glob_termops.mli", 15, 784, 784), ("plugins/funind/glob_termops.mli", 15, 784, 831), 0), 0, Tag1 ("Funind_plugin__Glob_termops", 1)), 0); (("pattern_to_term", 930), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "cases_pattern"), 0, (0)), 100000000, 0, -139), (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -138), 0), 100000000, 0, -137), 0, (("plugins/funind/glob_termops.mli", 20, 966, 966), ("plugins/funind/glob_termops.mli", 20, 966, 1016), 0), 0, Tag1 ("Funind_plugin__Glob_termops", 2)), 0); (("mkGRef", 931), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -136), (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -135), 0), 100000000, 0, -134), 0, (("plugins/funind/glob_termops.mli", 26, 1121, 1121), ("plugins/funind/glob_termops.mli", 26, 1121, 1158), 0), 0, Tag1 ("Funind_plugin__Glob_termops", 3)), 0); (("mkGVar", 932), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -133), (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -132), 0), 100000000, 0, -131), 0, (("plugins/funind/glob_termops.mli", 27, 1159, 1159), ("plugins/funind/glob_termops.mli", 27, 1159, 1191), 0), 0, Tag1 ("Funind_plugin__Glob_termops", 4)), 0); (("mkGApp", 933), ((Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -128); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -130)], (0)), 100000000, 0, -129)]), 100000000, 0, -127), (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -126), 0), 100000000, 0, -125), 0, (("plugins/funind/glob_termops.mli", 28, 1192, 1192), ("plugins/funind/glob_termops.mli", 28, 1192, 1250), 0), 0, Tag1 ("Funind_plugin__Glob_termops", 5)), 0); (("mkGLambda", 934), ((Tag1 (0, (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -122); (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -123); (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -124)]), 100000000, 0, -121), (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -120), 0), 100000000, 0, -119), 0, (("plugins/funind/glob_termops.mli", 29, 1251, 1251), ("plugins/funind/glob_termops.mli", 29, 1251, 1316), 0), 0, Tag1 ("Funind_plugin__Glob_termops", 6)), 0); (("mkGProd", 935), ((Tag1 (0, (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -116); (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -117); (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -118)]), 100000000, 0, -115), (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -114), 0), 100000000, 0, -113), 0, (("plugins/funind/glob_termops.mli", 30, 1317, 1317), ("plugins/funind/glob_termops.mli", 30, 1317, 1380), 0), 0, Tag1 ("Funind_plugin__Glob_termops", 7)), 0); (("mkGLetIn", 936), ((Tag1 (0, (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -108); (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -109); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -111)], (0)), 100000000, 0, -110); (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -112)]), 100000000, 0, -107), (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -106), 0), 100000000, 0, -105), 0, (("plugins/funind/glob_termops.mli", 32, 1382, 1382), ("plugins/funind/glob_termops.mli", 33, 1397, 1469), 0), 0, Tag1 ("Funind_plugin__Glob_termops", 8)), 0); (("mkGCases", 937), ((Tag1 (0, (Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -102)], (0)), 100000000, 0, -101); (Tag3 (Tag1 ((Tag2 ("Glob_term")), "tomatch_tuples"), 0, (0)), 100000000, 0, -103); (Tag3 (Tag1 ((Tag2 ("Glob_term")), "cases_clauses"), 0, (0)), 100000000, 0, -104)]), 100000000, 0, -100), (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -99), 0), 100000000, 0, -98), 0, (("plugins/funind/glob_termops.mli", 35, 1471, 1471), ("plugins/funind/glob_termops.mli", 36, 1486, 1554), 0), 0, Tag1 ("Funind_plugin__Glob_termops", 9)), 0); (("mkGHole", 938), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -97), (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -96), 0), 100000000, 0, -95), 0, (("plugins/funind/glob_termops.mli", 38, 1556, 1556), ("plugins/funind/glob_termops.mli", 38, 1556, 1589), 0), 0, Tag1 ("Funind_plugin__Glob_termops", 10)), 0); (("glob_decompose_app", 939), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -94), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -91); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -93)], (0)), 100000000, 0, -92)]), 100000000, 0, -90), 0), 100000000, 0, -89), 0, (("plugins/funind/glob_termops.mli", 46, 1740, 1740), ("plugins/funind/glob_termops.mli", 46, 1740, 1810), 0), 0, Tag1 ("Funind_plugin__Glob_termops", 11)), 0); (("glob_make_eq", 940), ((Tag1 (Tag1 ("typ"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -88)], (0)), 100000000, 0, -87), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -86), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -85), (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -84), 0), 100000000, 0, -83), 0), 100000000, 0, -82), 0), 100000000, 0, -81), 0, (("plugins/funind/glob_termops.mli", 49, 1888, 1888), ("plugins/funind/glob_termops.mli", 49, 1888, 1968), 0), 0, Tag1 ("Funind_plugin__Glob_termops", 12)), 0); (("glob_make_neq", 941), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -80), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -79), (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -78), 0), 100000000, 0, -77), 0), 100000000, 0, -76), 0, (("plugins/funind/glob_termops.mli", 52, 2048, 2048), ("plugins/funind/glob_termops.mli", 52, 2048, 2109), 0), 0, Tag1 ("Funind_plugin__Glob_termops", 13)), 0); (("change_vars", 942), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Map"), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -75)], (0)), 100000000, 0, -74), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -73), (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -72), 0), 100000000, 0, -71), 0), 100000000, 0, -70), 0, (("plugins/funind/glob_termops.mli", 57, 2201, 2201), ("plugins/funind/glob_termops.mli", 57, 2201, 2262), 0), 0, Tag1 ("Funind_plugin__Glob_termops", 14)), 0); (("alpha_pat", 943), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Map"), "key"), 0, (0)), 100000000, 0, -69)], (0)), 100000000, 0, -68), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "cases_pattern"), 0, (0)), 100000000, 0, -67), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Glob_term")), "cases_pattern"), 0, (0)), 100000000, 0, -62); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Map"), "key"), 0, (0)), 100000000, 0, -64)], (0)), 100000000, 0, -63); (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Map"), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -66)], (0)), 100000000, 0, -65)]), 100000000, 0, -61), 0), 100000000, 0, -60), 0), 100000000, 0, -59), 0, (("plugins/funind/glob_termops.mli", 66, 2618, 2618), ("plugins/funind/glob_termops.mli", 69, 2684, 2746), 0), 0, Tag1 ("Funind_plugin__Glob_termops", 15)), 0); (("alpha_rt", 944), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -58)], (0)), 100000000, 0, -57), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -56), (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0, (("plugins/funind/glob_termops.mli", 74, 2891, 2891), ("plugins/funind/glob_termops.mli", 74, 2891, 2945), 0), 0, Tag1 ("Funind_plugin__Glob_termops", 16)), 0); (("alpha_br", 945), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -52)], (0)), 100000000, 0, -51), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "cases_clause"), 0, (0)), 100000000, 0, -50), (Tag3 (Tag1 ((Tag2 ("Glob_term")), "cases_clause"), 0, (0)), 100000000, 0, -49), 0), 100000000, 0, -48), 0), 100000000, 0, -47), 0, (("plugins/funind/glob_termops.mli", 77, 2992, 2992), ("plugins/funind/glob_termops.mli", 77, 2992, 3068), 0), 0, Tag1 ("Funind_plugin__Glob_termops", 17)), 0); (("replace_var_by_term", 946), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -46), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -45), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -44), (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -43), 0), 100000000, 0, -42), 0), 100000000, 0, -41), 0), 100000000, 0, -40), 0, (("plugins/funind/glob_termops.mli", 80, 3095, 3095), ("plugins/funind/glob_termops.mli", 84, 3185, 3211), 0), 0, Tag1 ("Funind_plugin__Glob_termops", 18)), 0); (("is_free_in", 947), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -39), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -38), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -37), 0), 100000000, 0, -36), 0), 100000000, 0, -35), 0, (("plugins/funind/glob_termops.mli", 89, 3283, 3283), ("plugins/funind/glob_termops.mli", 89, 3283, 3327), 0), 0, Tag1 ("Funind_plugin__Glob_termops", 19)), 0); (("are_unifiable", 948), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -34), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "cases_pattern"), 0, (0)), 100000000, 0, -33), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "cases_pattern"), 0, (0)), 100000000, 0, -32), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("plugins/funind/glob_termops.mli", 90, 3328, 3328), ("plugins/funind/glob_termops.mli", 90, 3328, 3401), 0), 0, Tag1 ("Funind_plugin__Glob_termops", 20)), 0); (("eq_cases_pattern", 949), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -27), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "cases_pattern"), 0, (0)), 100000000, 0, -26), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "cases_pattern"), 0, (0)), 100000000, 0, -25), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("plugins/funind/glob_termops.mli", 91, 3402, 3402), ("plugins/funind/glob_termops.mli", 91, 3402, 3478), 0), 0, Tag1 ("Funind_plugin__Glob_termops", 21)), 0); (("ids_of_pat", 950), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "cases_pattern"), 0, (0)), 100000000, 0, -20), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Set"), "t"), 0, (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0, (("plugins/funind/glob_termops.mli", 97, 3583, 3583), ("plugins/funind/glob_termops.mli", 97, 3583, 3625), 0), 0, Tag1 ("Funind_plugin__Glob_termops", 22)), 0); (("expand_as", 951), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -17), (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -16), 0), 100000000, 0, -15), 0, (("plugins/funind/glob_termops.mli", 98, 3626, 3626), ("plugins/funind/glob_termops.mli", 98, 3626, 3668), 0), 0, Tag1 ("Funind_plugin__Glob_termops", 23)), 0); (("resolve_and_replace_implicits", 952), ((Tag1 (Tag1 ("flags"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Pretyping")), "inference_flags"), 0, (0)), 100000000, 0, -14)], (0)), 100000000, 0, -13), (Tag1 (Tag1 ("expected_type"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Pretyping")), "typing_constraint"), 0, (0)), 100000000, 0, -12)], (0)), 100000000, 0, -11), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -10), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -9), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -8), (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("plugins/funind/glob_termops.mli", 102, 3827, 3827), ("plugins/funind/glob_termops.mli", 108, 4001, 4017), 0), 0, Tag1 ("Funind_plugin__Glob_termops", 24)), 0)], "Funind_plugin__Glob_termops", [("Funind_plugin__Glob_termops", ("\194\025\157\127\0113\200\164\195\195\251\156\132\227&\167")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Unix", (":B72R\011\005Sj\189)\011\239PH\254")); ("UnivSubst", ("\190qu\031mc\130\181\003G]\132\"\219m)")); ("UnivProblem", ("6'\161\018\181\001.\253\000\141a6\171\1727\155")); ("UnivNames", ("%\151_\209%+JM$n\001\232\194n\178N")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UState", ("SD\203\215|\136\n\251\239\208\148\215C\n\167\005")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Summary", ("\148G\135\226\024L3\246\021\028U\146\164`\253\250")); ("Store", ("/dT\252\145\179pq\216{\181\206\190K+U")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Section", ("\245\207\b\021\142v=\155#w\246}\"4b\006")); ("Safe_typing", (")\250?\164\145\132\241\127\186\152h+\145\"\237l")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Proofview_monad", ("\218\196\189S\147\216\129\221\231\224v\228O\024*\239")); ("Proofview", ("\245\140U\027\236\199\199&\242\156\199YG\250tA")); ("Pretyping", ("\151\160\191\149\149Ff\195\171g\189\156\r\166n\189")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("Nativevalues", ("8:\007\025e\226c,\001\171\146#l\210\171\152")); ("Nativelib", ("V\239\205Y1\147E:,\176\196Hy\1483|")); ("Nativecode", ("\190\185\255\006m\012\210\163\138Rz\247\15283\183")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Namegen", ("\187\222\224T\255\020\1808-\212*\164\131\177\157x")); ("Monad", ("\244\171T\157\194p\187\160\149\195{\132\222\020\253\148")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Ltac_pretype", ("\224\"\167\018i:U\172>\188\128$\r\252\020T")); ("Logic_monad", ("\130\157\160Q\163vQ\137\184\2242\209\128\024\220i")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hook", ("\183\194\223\003\155\169',\187\240a;E\b\1396")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Glob_term", ("\165=a\227\160\153.\021_$\232\209T\236\153O")); ("GlobEnv", ("(\152\019ok\006R\183\193\145\137\133<\171\005\231")); ("Genlambda", ("\170}\024\241\141\222\136S\169\219\2212i\134KI")); ("Geninterp", ("2S\151\191\189\159\004\188;\224d\199|U\004\028")); ("Genarg", ("\1434\015\001\152\196\005s\156\136\195\185\247\b3\t")); ("Funind_plugin", ("\\j\002\143\228\130\246U7\002\198\214\253\240\139\242")); ("Ftactic", ("K\172\205\128\241\162\160\201\202\1561o\180L\206:")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evd", ("\211\205p\193\216\129r\006\239oN\142ar\196\175")); ("Evarutil", ("\005\175\132e\164O\223svi \252\232\138\022\137")); ("Evardefine", ("\178\167R\199\158\242\001Y\215<\151\020\206\153\227\019")); ("Evar_kinds", ("\023L\186\132\218}\254\221\185\198\220\200h\003{\021")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Entries", ("\172\201\198\221Ap\027_{\174\141C\021\";p")); ("EConstr", ("\201aW\156\157;N\004\201V\208\006L\166\211)")); ("Dyn", ("\131z`\205v\2306\007x\027&K.?;\169")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("DAst", ("\224/\200)\007\184ni\134\b\139\204\241\005w\212")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conversion", ("\158\150&\195M\tv\127|\029\158RRK\211A")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CUnix", ("\140Zl\153\167\011J\015\005|th\247OTu")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CDebug", ("^4\210p7\239!3\138\138\213?\239`\250\157")); ("CClosure", ("\167\b\022\241V-\r\253\b\002\000j]\223%\142")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])
Evd.evar_map -> Glob_term.glob_constr -> Glob_term.glob_constr

val get_argv : unit -> string array
val argv : string array
val interactive : bool ref
val os_type : string
val unix : bool
val win32 : bool
val cygwin : bool
type backend_type =
  Base__.Sys0.backend_type =
    Native
  | Bytecode
  | Other of string
val backend_type : backend_type
val word_size_in_bits : int
val int_size_in_bits : int
val big_endian : bool
val max_string_length : int
val max_array_length : int
val runtime_variant : unit -> string
val runtime_parameters : unit -> string
val ocaml_version : string
val enable_runtime_warnings : bool -> unit
val runtime_warnings_enabled : unit -> bool
val getenv : string -> string option
val getenv_exn : string -> string
external opaque_identity : 'a -> 'a = "%opaque"
("DEBUG:rule", [(("get_argv", 1349), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -45), (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -44)], (0)), 100000000, 0, -43), 0), 100000000, 0, -42), 0, (("src/sys.mli", 11, 462, 462), ("src/sys.mli", 11, 462, 497), 0), 0, Tag1 ("Base__Sys", 0)), 0); (("argv", 1350), ((Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -41)], (0)), 100000000, 0, -40), 0, (("src/sys.mli", 15, 634, 634), ("src/sys.mli", 18, 757, 795), 0), [(("deprecated", (("src/sys.mli", 16, 658, 661), ("src/sys.mli", 16, 658, 671), 0)), ([([(Tag1 (Tag2 ("[since 2019-08] Use [Sys.get_argv] instead, which has the correct behavior when [caml_sys_modify_argv] is called.", (("src/sys.mli", 17, 672, 675), ("src/sys.mli", 18, 757, 793), 0), 0)), (("src/sys.mli", 17, 672, 674), ("src/sys.mli", 18, 757, 794), 0), 0, 0)], (("src/sys.mli", 17, 672, 674), ("src/sys.mli", 18, 757, 794), 0))]), (("src/sys.mli", 16, 658, 658), ("src/sys.mli", 18, 757, 795), 0))], Tag1 ("Base__Sys", 1)), 0); (("interactive", 1351), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -39)], (0)), 100000000, 0, -38), 0, (("src/sys.mli", 22, 903, 903), ("src/sys.mli", 22, 903, 929), 0), 0, Tag1 ("Base__Sys", 2)), 0); (("os_type", 1352), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -37), 0, (("src/sys.mli", 32, 1295, 1295), ("src/sys.mli", 32, 1295, 1315), 0), 0, Tag1 ("Base__Sys", 3)), 0); (("unix", 1353), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -36), 0, (("src/sys.mli", 35, 1364, 1364), ("src/sys.mli", 35, 1364, 1379), 0), 0, Tag1 ("Base__Sys", 4)), 0); (("win32", 1354), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -35), 0, (("src/sys.mli", 38, 1430, 1430), ("src/sys.mli", 38, 1430, 1446), 0), 0, Tag1 ("Base__Sys", 5)), 0); (("cygwin", 1355), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -34), 0, (("src/sys.mli", 41, 1499, 1499), ("src/sys.mli", 41, 1499, 1516), 0), 0, Tag1 ("Base__Sys", 6)), 0); Tag1 (("backend_type", 1356), (0, 0, Tag1 ([(("Native", 412), (0), 0, (("src/sys.mli", 47, 1731, 1733), ("src/sys.mli", 47, 1731, 1741), 0), 0, Tag1 ("Base__Sys", 8)); (("Bytecode", 413), (0), 0, (("src/sys.mli", 48, 1742, 1744), ("src/sys.mli", 48, 1742, 1754), 0), 0, Tag1 ("Base__Sys", 9)); (("Other", 414), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -33)]), 0, (("src/sys.mli", 49, 1755, 1757), ("src/sys.mli", 49, 1755, 1774), 0), 0, Tag1 ("Base__Sys", 10))], 0), 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sys0"), "backend_type"), 0, (0)), 100000000, 0, -32)), 0, 0, 0, 0, (("src/sys.mli", 46, 1691, 1691), ("src/sys.mli", 49, 1755, 1774), 0), 0, 0, 0, Tag1 ("Base__Sys", 7)), 1, 0); (("backend_type", 1357), ((Tag3 ((("backend_type", 1356)), 0, (0)), 100000000, 0, -31), 0, (("src/sys.mli", 52, 1835, 1835), ("src/sys.mli", 52, 1835, 1866), 0), 0, Tag1 ("Base__Sys", 11)), 0); (("word_size_in_bits", 1358), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -30), 0, (("src/sys.mli", 57, 2089, 2089), ("src/sys.mli", 57, 2089, 2116), 0), 0, Tag1 ("Base__Sys", 12)), 0); (("int_size_in_bits", 1359), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -29), 0, (("src/sys.mli", 63, 2390, 2390), ("src/sys.mli", 63, 2390, 2416), 0), 0, Tag1 ("Base__Sys", 13)), 0); (("big_endian", 1360), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -28), 0, (("src/sys.mli", 67, 2557, 2557), ("src/sys.mli", 67, 2557, 2578), 0), 0, Tag1 ("Base__Sys", 14)), 0); (("max_string_length", 1361), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -27), 0, (("src/sys.mli", 71, 2717, 2717), ("src/sys.mli", 71, 2717, 2744), 0), 0, Tag1 ("Base__Sys", 15)), 0); (("max_array_length", 1362), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -26), 0, (("src/sys.mli", 75, 2871, 2871), ("src/sys.mli", 75, 2871, 2897), 0), 0, Tag1 ("Base__Sys", 16)), 0); (("runtime_variant", 1363), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -25), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0, (("src/sys.mli", 84, 3334, 3334), ("src/sys.mli", 84, 3334, 3370), 0), 0, Tag1 ("Base__Sys", 17)), 0); (("runtime_parameters", 1364), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -22), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("src/sys.mli", 88, 3554, 3554), ("src/sys.mli", 88, 3554, 3593), 0), 0, Tag1 ("Base__Sys", 18)), 0); (("ocaml_version", 1365), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -19), 0, (("src/sys.mli", 94, 3924, 3924), ("src/sys.mli", 94, 3924, 3950), 0), 0, Tag1 ("Base__Sys", 19)), 0); (("enable_runtime_warnings", 1366), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -18), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("src/sys.mli", 99, 4210, 4210), ("src/sys.mli", 99, 4210, 4252), 0), 0, Tag1 ("Base__Sys", 20)), 0); (("runtime_warnings_enabled", 1367), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -15), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("src/sys.mli", 102, 4317, 4317), ("src/sys.mli", 102, 4317, 4360), 0), 0, Tag1 ("Base__Sys", 21)), 0); (("getenv", 1368), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -11)], (0)), 100000000, 0, -10), 0), 100000000, 0, -9), 0, (("src/sys.mli", 107, 4573, 4573), ("src/sys.mli", 107, 4573, 4609), 0), 0, Tag1 ("Base__Sys", 22)), 0); (("getenv_exn", 1369), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -8), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0, (("src/sys.mli", 109, 4611, 4611), ("src/sys.mli", 109, 4611, 4644), 0), 0, Tag1 ("Base__Sys", 23)), 0); (("opaque_identity", 1370), ((Tag1 (0, ((("a")), 100000000, 0, -5), ((("a")), 100000000, 0, -5), 0), 100000000, 0, -4), (("%opaque", 1, 1, "", [0], 0)), (("src/sys.mli", 122, 5091, 5091), ("src/sys.mli", 122, 5091, 5166), 0), 0, Tag1 ("Base__Sys", 24)), 0); (("opaque_identity_global", 1371), ((Tag1 (0, ((("a")), 100000000, 0, -3), ((("a")), 100000000, 0, -3), 0), 100000000, 0, -2), (("%opaque", 1, 1, "", [0], 0)), (("src/sys.mli", 125, 5245, 5245), ("src/sys.mli", 125, 5245, 5299), 0), 0, Tag1 ("Base__Sys", 25)), 0)], "Base__Sys", [("Base__Sys", ("\140\014\150V\201\154a\233\249\002\001\202!\218\199\243")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base__Sys0", ("\206z\231\154s\\\136\2364\131\005\014\031\152m3")); ("Base__Printf", ("\000\196c,\214\127\226\174\220\190\253z!\242\028\250")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158"))], [(0)])
external opaque_identity_global : 'a -> 'a = "%opaque"

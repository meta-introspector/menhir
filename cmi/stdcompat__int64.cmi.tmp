type t = int64
val min : t -> t -> t
val max : t -> t -> t
val unsigned_div : int64 -> int64 -> int64
val unsigned_rem : int64 -> int64 -> int64
val unsigned_to_int : int64 -> int option
val unsigned_compare : t -> t -> int
val of_string_opt : string -> int64 option
val equal : t -> t -> bool
val zero : int64
val one : int64
val minus_one : int64
external neg : int64 -> int64 = "%int64_neg"
external add : int64 -> int64 -> int64 = "%int64_add"
external sub : int64 -> int64 -> int64 = "%int64_sub"
external mul : int64 -> int64 -> int64 = "%int64_mul"
external div : int64 -> int64 -> int64 = "%int64_div"
external rem : int64 -> int64 -> int64 = "%int64_mod"
val succ : int64 -> int64
val pred : int64 -> int64
val abs : int64 -> int64
val max_int : int64
val min_int : int64
external logand : int64 -> int64 -> int64 = "%int64_and"
external logor : int64 -> int64 -> int64 = "%int64_or"
external logxor : int64 -> int64 -> int64 = "%int64_xor"
val lognot : int64 -> int64
external shift_left : int64 -> int -> int64 = "%int64_lsl"
external shift_right : int64 -> int -> int64 = "%int64_asr"
external shift_right_logical : int64 -> int -> int64 = "%int64_lsr"
external of_int : int -> int64 = "%int64_of_int"
external to_int : int64 -> int = "%int64_to_int"
external of_float : float -> int64 = "caml_int64_of_float"
  "caml_int64_of_float_unboxed" [@@unboxed] [@@noalloc]
external to_float : int64 -> float = "caml_int64_to_float"
  "caml_int64_to_float_unboxed" [@@unboxed] [@@noalloc]
external of_int32 : int32 -> int64 = "%int64_of_int32"
external to_int32 : int64 -> int32 = "%int64_to_int32"
external of_nativeint : nativeint -> int64 = "%int64_of_nativeint"
external to_nativeint : int64 -> nativeint = "%int64_to_nativeint"
external of_string : string -> int64 = "caml_int64_of_string"
val to_string : int64 -> string
external bits_of_float : float -> int64 = "caml_int64_bits_of_float"
  "caml_int64_bits_of_float_unboxed" [@@unboxed] [@@noalloc]
external float_of_bits : int64 -> float = "caml_int64_float_of_bits"
  "caml_int64_float_of_bits_unboxed" [@@unboxed] [@@noalloc]
("DEBUG:rule", [Tag1 (("t", 356), (0, 0, 0, 1, ((Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -156)), 0, 0, 0, 0, (("stdcompat__int64_s.mli", 2, 20, 20), ("stdcompat__int64_s.mli", 2, 20, 34), 0), 0, 0, 0, Tag1 ("Stdcompat__int64_s", 0)), 1, 0); (("min", 357), ((Tag1 (0, (Tag3 ((("t", 356)), 0, (0)), 100000000, 0, -155), (Tag1 (0, (Tag3 ((("t", 356)), 0, (0)), 100000000, 0, -154), (Tag3 ((("t", 356)), 0, (0)), 100000000, 0, -153), 0), 100000000, 0, -152), 0), 100000000, 0, -151), 0, (("stdcompat__int64_s.mli", 5, 64, 64), ("stdcompat__int64_s.mli", 5, 64, 85), 0), 0, Tag1 ("Stdcompat__int64_s", 1)), 0); (("max", 358), ((Tag1 (0, (Tag3 ((("t", 356)), 0, (0)), 100000000, 0, -150), (Tag1 (0, (Tag3 ((("t", 356)), 0, (0)), 100000000, 0, -149), (Tag3 ((("t", 356)), 0, (0)), 100000000, 0, -148), 0), 100000000, 0, -147), 0), 100000000, 0, -146), 0, (("stdcompat__int64_s.mli", 8, 131, 131), ("stdcompat__int64_s.mli", 8, 131, 152), 0), 0, Tag1 ("Stdcompat__int64_s", 2)), 0); (("unsigned_div", 359), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -145), (Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -144), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -143), 0), 100000000, 0, -142), 0), 100000000, 0, -141), 0, (("stdcompat__int64_s.mli", 11, 198, 198), ("stdcompat__int64_s.mli", 11, 198, 240), 0), 0, Tag1 ("Stdcompat__int64_s", 3)), 0); (("unsigned_rem", 360), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -140), (Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -139), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -138), 0), 100000000, 0, -137), 0), 100000000, 0, -136), 0, (("stdcompat__int64_s.mli", 14, 307, 307), ("stdcompat__int64_s.mli", 14, 307, 349), 0), 0, Tag1 ("Stdcompat__int64_s", 4)), 0); (("unsigned_to_int", 361), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -135), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -134)], (0)), 100000000, 0, -133), 0), 100000000, 0, -132), 0, (("stdcompat__int64_s.mli", 17, 416, 416), ("stdcompat__int64_s.mli", 17, 416, 457), 0), 0, Tag1 ("Stdcompat__int64_s", 5)), 0); (("unsigned_compare", 362), ((Tag1 (0, (Tag3 ((("t", 356)), 0, (0)), 100000000, 0, -131), (Tag1 (0, (Tag3 ((("t", 356)), 0, (0)), 100000000, 0, -130), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -129), 0), 100000000, 0, -128), 0), 100000000, 0, -127), 0, (("stdcompat__int64_s.mli", 20, 523, 523), ("stdcompat__int64_s.mli", 20, 523, 559), 0), 0, Tag1 ("Stdcompat__int64_s", 6)), 0); (("of_string_opt", 363), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -126), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -125)], (0)), 100000000, 0, -124), 0), 100000000, 0, -123), 0, (("stdcompat__int64_s.mli", 23, 620, 620), ("stdcompat__int64_s.mli", 23, 620, 662), 0), 0, Tag1 ("Stdcompat__int64_s", 7)), 0); (("equal", 364), ((Tag1 (0, (Tag3 ((("t", 356)), 0, (0)), 100000000, 0, -122), (Tag1 (0, (Tag3 ((("t", 356)), 0, (0)), 100000000, 0, -121), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -120), 0), 100000000, 0, -119), 0), 100000000, 0, -118), 0, (("stdcompat__int64_s.mli", 26, 729, 729), ("stdcompat__int64_s.mli", 26, 729, 755), 0), 0, Tag1 ("Stdcompat__int64_s", 8)), 0); (("zero", 365), ((Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -117), 0, (("stdcompat__int64_s.mli", 29, 806, 806), ("stdcompat__int64_s.mli", 29, 806, 822), 0), 0, Tag1 ("Stdcompat__int64_s", 9)), 0); (("one", 366), ((Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -116), 0, (("stdcompat__int64_s.mli", 32, 855, 855), ("stdcompat__int64_s.mli", 32, 855, 870), 0), 0, Tag1 ("Stdcompat__int64_s", 10)), 0); (("minus_one", 367), ((Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -115), 0, (("stdcompat__int64_s.mli", 35, 902, 902), ("stdcompat__int64_s.mli", 35, 902, 923), 0), 0, Tag1 ("Stdcompat__int64_s", 11)), 0); (("neg", 368), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -114), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -113), 0), 100000000, 0, -112), (("%int64_neg", 1, 1, "", [0], 0)), (("stdcompat__int64_s.mli", 38, 961, 961), ("stdcompat__int64_s.mli", 38, 961, 1005), 0), 0, Tag1 ("Stdcompat__int64_s", 12)), 0); (("add", 369), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -111), (Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -110), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -109), 0), 100000000, 0, -108), 0), 100000000, 0, -107), (("%int64_add", 2, 1, "", [0; 0], 0)), (("stdcompat__int64_s.mli", 41, 1037, 1037), ("stdcompat__int64_s.mli", 41, 1037, 1090), 0), 0, Tag1 ("Stdcompat__int64_s", 13)), 0); (("sub", 370), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -106), (Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -105), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -104), 0), 100000000, 0, -103), 0), 100000000, 0, -102), (("%int64_sub", 2, 1, "", [0; 0], 0)), (("stdcompat__int64_s.mli", 44, 1122, 1122), ("stdcompat__int64_s.mli", 44, 1122, 1175), 0), 0, Tag1 ("Stdcompat__int64_s", 14)), 0); (("mul", 371), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -101), (Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -100), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -99), 0), 100000000, 0, -98), 0), 100000000, 0, -97), (("%int64_mul", 2, 1, "", [0; 0], 0)), (("stdcompat__int64_s.mli", 47, 1207, 1207), ("stdcompat__int64_s.mli", 47, 1207, 1260), 0), 0, Tag1 ("Stdcompat__int64_s", 15)), 0); (("div", 372), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -96), (Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -95), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -94), 0), 100000000, 0, -93), 0), 100000000, 0, -92), (("%int64_div", 2, 1, "", [0; 0], 0)), (("stdcompat__int64_s.mli", 50, 1292, 1292), ("stdcompat__int64_s.mli", 50, 1292, 1345), 0), 0, Tag1 ("Stdcompat__int64_s", 16)), 0); (("rem", 373), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -91), (Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -90), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -89), 0), 100000000, 0, -88), 0), 100000000, 0, -87), (("%int64_mod", 2, 1, "", [0; 0], 0)), (("stdcompat__int64_s.mli", 53, 1377, 1377), ("stdcompat__int64_s.mli", 53, 1377, 1430), 0), 0, Tag1 ("Stdcompat__int64_s", 17)), 0); (("succ", 374), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -86), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -85), 0), 100000000, 0, -84), 0, (("stdcompat__int64_s.mli", 56, 1462, 1462), ("stdcompat__int64_s.mli", 56, 1462, 1487), 0), 0, Tag1 ("Stdcompat__int64_s", 18)), 0); (("pred", 375), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -83), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -82), 0), 100000000, 0, -81), 0, (("stdcompat__int64_s.mli", 59, 1520, 1520), ("stdcompat__int64_s.mli", 59, 1520, 1545), 0), 0, Tag1 ("Stdcompat__int64_s", 19)), 0); (("abs", 376), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -80), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -79), 0), 100000000, 0, -78), 0, (("stdcompat__int64_s.mli", 62, 1578, 1578), ("stdcompat__int64_s.mli", 62, 1578, 1602), 0), 0, Tag1 ("Stdcompat__int64_s", 20)), 0); (("max_int", 377), ((Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -77), 0, (("stdcompat__int64_s.mli", 65, 1634, 1634), ("stdcompat__int64_s.mli", 65, 1634, 1653), 0), 0, Tag1 ("Stdcompat__int64_s", 21)), 0); (("min_int", 378), ((Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -76), 0, (("stdcompat__int64_s.mli", 68, 1689, 1689), ("stdcompat__int64_s.mli", 68, 1689, 1708), 0), 0, Tag1 ("Stdcompat__int64_s", 22)), 0); (("logand", 379), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -75), (Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -74), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -73), 0), 100000000, 0, -72), 0), 100000000, 0, -71), (("%int64_and", 2, 1, "", [0; 0], 0)), (("stdcompat__int64_s.mli", 71, 1744, 1744), ("stdcompat__int64_s.mli", 71, 1744, 1800), 0), 0, Tag1 ("Stdcompat__int64_s", 23)), 0); (("logor", 380), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -70), (Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -69), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -68), 0), 100000000, 0, -67), 0), 100000000, 0, -66), (("%int64_or", 2, 1, "", [0; 0], 0)), (("stdcompat__int64_s.mli", 74, 1835, 1835), ("stdcompat__int64_s.mli", 74, 1835, 1889), 0), 0, Tag1 ("Stdcompat__int64_s", 24)), 0); (("logxor", 381), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -65), (Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -64), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -63), 0), 100000000, 0, -62), 0), 100000000, 0, -61), (("%int64_xor", 2, 1, "", [0; 0], 0)), (("stdcompat__int64_s.mli", 77, 1923, 1923), ("stdcompat__int64_s.mli", 77, 1923, 1979), 0), 0, Tag1 ("Stdcompat__int64_s", 25)), 0); (("lognot", 382), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -60), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -59), 0), 100000000, 0, -58), 0, (("stdcompat__int64_s.mli", 80, 2014, 2014), ("stdcompat__int64_s.mli", 80, 2014, 2041), 0), 0, Tag1 ("Stdcompat__int64_s", 26)), 0); (("shift_left", 383), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -57), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -56), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), (("%int64_lsl", 2, 1, "", [0; 0], 0)), (("stdcompat__int64_s.mli", 83, 2076, 2076), ("stdcompat__int64_s.mli", 83, 2076, 2134), 0), 0, Tag1 ("Stdcompat__int64_s", 27)), 0); (("shift_right", 384), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -52), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -51), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -50), 0), 100000000, 0, -49), 0), 100000000, 0, -48), (("%int64_asr", 2, 1, "", [0; 0], 0)), (("stdcompat__int64_s.mli", 86, 2173, 2173), ("stdcompat__int64_s.mli", 86, 2173, 2232), 0), 0, Tag1 ("Stdcompat__int64_s", 28)), 0); (("shift_right_logical", 385), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -47), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -46), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -45), 0), 100000000, 0, -44), 0), 100000000, 0, -43), (("%int64_lsr", 2, 1, "", [0; 0], 0)), (("stdcompat__int64_s.mli", 89, 2272, 2272), ("stdcompat__int64_s.mli", 89, 2272, 2339), 0), 0, Tag1 ("Stdcompat__int64_s", 29)), 0); (("of_int", 386), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -42), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -41), 0), 100000000, 0, -40), (("%int64_of_int", 1, 1, "", [0], 0)), (("stdcompat__int64_s.mli", 92, 2387, 2387), ("stdcompat__int64_s.mli", 92, 2387, 2435), 0), 0, Tag1 ("Stdcompat__int64_s", 30)), 0); (("to_int", 387), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -39), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -38), 0), 100000000, 0, -37), (("%int64_to_int", 1, 1, "", [0], 0)), (("stdcompat__int64_s.mli", 95, 2470, 2470), ("stdcompat__int64_s.mli", 95, 2470, 2518), 0), 0, Tag1 ("Stdcompat__int64_s", 31)), 0); (("of_float", 388), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -36), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -35), 0), 100000000, 0, -34), (("caml_int64_of_float", 1, 0, "caml_int64_of_float_unboxed", [1], (2))), (("stdcompat__int64_s.mli", 99, 2554, 2554), ("stdcompat__int64_s.mli", 101, 2645, 2669), 0), [(("unboxed", (("stdcompat__int64_s.mli", 101, 2645, 2648), ("stdcompat__int64_s.mli", 101, 2645, 2655), 0)), (0), (("stdcompat__int64_s.mli", 101, 2645, 2645), ("stdcompat__int64_s.mli", 101, 2645, 2657), 0)); (("noalloc", (("stdcompat__int64_s.mli", 101, 2645, 2660), ("stdcompat__int64_s.mli", 101, 2645, 2667), 0)), (0), (("stdcompat__int64_s.mli", 101, 2645, 2657), ("stdcompat__int64_s.mli", 101, 2645, 2669), 0))], Tag1 ("Stdcompat__int64_s", 32)), 0); (("to_float", 389), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -33), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -32), 0), 100000000, 0, -31), (("caml_int64_to_float", 1, 0, "caml_int64_to_float_unboxed", [(2)], 1)), (("stdcompat__int64_s.mli", 121, 3095, 3095), ("stdcompat__int64_s.mli", 123, 3186, 3210), 0), [(("unboxed", (("stdcompat__int64_s.mli", 123, 3186, 3189), ("stdcompat__int64_s.mli", 123, 3186, 3196), 0)), (0), (("stdcompat__int64_s.mli", 123, 3186, 3186), ("stdcompat__int64_s.mli", 123, 3186, 3198), 0)); (("noalloc", (("stdcompat__int64_s.mli", 123, 3186, 3201), ("stdcompat__int64_s.mli", 123, 3186, 3208), 0)), (0), (("stdcompat__int64_s.mli", 123, 3186, 3198), ("stdcompat__int64_s.mli", 123, 3186, 3210), 0))], Tag1 ("Stdcompat__int64_s", 33)), 0); (("of_int32", 390), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -30), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -29), 0), 100000000, 0, -28), (("%int64_of_int32", 1, 1, "", [0], 0)), (("stdcompat__int64_s.mli", 142, 3635, 3635), ("stdcompat__int64_s.mli", 142, 3635, 3689), 0), 0, Tag1 ("Stdcompat__int64_s", 34)), 0); (("to_int32", 391), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -27), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -26), 0), 100000000, 0, -25), (("%int64_to_int32", 1, 1, "", [0], 0)), (("stdcompat__int64_s.mli", 145, 3726, 3726), ("stdcompat__int64_s.mli", 145, 3726, 3780), 0), 0, Tag1 ("Stdcompat__int64_s", 35)), 0); (("of_nativeint", 392), ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -24), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -23), 0), 100000000, 0, -22), (("%int64_of_nativeint", 1, 1, "", [0], 0)), (("stdcompat__int64_s.mli", 148, 3817, 3817), ("stdcompat__int64_s.mli", 148, 3817, 3883), 0), 0, Tag1 ("Stdcompat__int64_s", 36)), 0); (("to_nativeint", 393), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -21), (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -20), 0), 100000000, 0, -19), (("%int64_to_nativeint", 1, 1, "", [0], 0)), (("stdcompat__int64_s.mli", 151, 3924, 3924), ("stdcompat__int64_s.mli", 151, 3924, 3990), 0), 0, Tag1 ("Stdcompat__int64_s", 37)), 0); (("of_string", 394), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -18), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -17), 0), 100000000, 0, -16), (("caml_int64_of_string", 1, 1, "", [0], 0)), (("stdcompat__int64_s.mli", 155, 4032, 4032), ("stdcompat__int64_s.mli", 155, 4032, 4093), 0), 0, Tag1 ("Stdcompat__int64_s", 38)), 0); (("to_string", 395), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -15), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("stdcompat__int64_s.mli", 165, 4320, 4320), ("stdcompat__int64_s.mli", 165, 4320, 4351), 0), 0, Tag1 ("Stdcompat__int64_s", 39)), 0); (("bits_of_float", 396), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -11), 0), 100000000, 0, -10), (("caml_int64_bits_of_float", 1, 0, "caml_int64_bits_of_float_unboxed", [1], (2))), (("stdcompat__int64_s.mli", 169, 4390, 4390), ("stdcompat__int64_s.mli", 171, 4461, 4523), 0), [(("unboxed", (("stdcompat__int64_s.mli", 171, 4461, 4502), ("stdcompat__int64_s.mli", 171, 4461, 4509), 0)), (0), (("stdcompat__int64_s.mli", 171, 4461, 4499), ("stdcompat__int64_s.mli", 171, 4461, 4511), 0)); (("noalloc", (("stdcompat__int64_s.mli", 171, 4461, 4514), ("stdcompat__int64_s.mli", 171, 4461, 4521), 0)), (0), (("stdcompat__int64_s.mli", 171, 4461, 4511), ("stdcompat__int64_s.mli", 171, 4461, 4523), 0))], Tag1 ("Stdcompat__int64_s", 40)), 0); (("float_of_bits", 397), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -9), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -8), 0), 100000000, 0, -7), (("caml_int64_float_of_bits", 1, 0, "caml_int64_float_of_bits_unboxed", [(2)], 1)), (("stdcompat__int64_s.mli", 193, 5007, 5007), ("stdcompat__int64_s.mli", 195, 5078, 5140), 0), [(("unboxed", (("stdcompat__int64_s.mli", 195, 5078, 5119), ("stdcompat__int64_s.mli", 195, 5078, 5126), 0)), (0), (("stdcompat__int64_s.mli", 195, 5078, 5116), ("stdcompat__int64_s.mli", 195, 5078, 5128), 0)); (("noalloc", (("stdcompat__int64_s.mli", 195, 5078, 5131), ("stdcompat__int64_s.mli", 195, 5078, 5138), 0)), (0), (("stdcompat__int64_s.mli", 195, 5078, 5128), ("stdcompat__int64_s.mli", 195, 5078, 5140), 0))], Tag1 ("Stdcompat__int64_s", 41)), 0); (("compare", 398), ((Tag1 (0, (Tag3 ((("t", 356)), 0, (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 ((("t", 356)), 0, (0)), 100000000, 0, -5), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("stdcompat__int64_s.mli", 216, 5623, 5623), ("stdcompat__int64_s.mli", 216, 5623, 5650), 0), 0, Tag1 ("Stdcompat__int64_s", 42)), 0)], "Stdcompat__int64", [("Stdcompat__int64", ("\155m\183Tp\2410\216\219Y9\250\199+\160\003")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Stdcompat__int64_s", ("\006F\231\149\b%\131\226\028\r\199p\227Lh4")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
val compare : t -> t -> int

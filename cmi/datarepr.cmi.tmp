val extension_descr :
  current_unit:string ->
  Path.t -> Types.extension_constructor -> Types.constructor_description
val labels_of_type :
  Path.t ->
  Types.type_declaration -> (Ident.t * Types.label_description) list
val constructors_of_type :
  current_unit:string ->
  Path.t ->
  Types.type_declaration -> (Ident.t * Types.constructor_description) list
exception Constr_not_found
val find_constr_by_tag :
  Types.constructor_tag ->
  Types.constructor_declaration list -> Types.constructor_declaration
val constructor_existentials :
  Types.constructor_arguments ->
  ("DEBUG:rule", [(("extension_descr", 437), ((Tag1 (("current_unit"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -42), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -41), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "extension_constructor"), 0, (0)), 100000000, 0, -40), (Tag3 (Tag1 ((Tag2 ("Types")), "constructor_description"), 0, (0)), 100000000, 0, -39), 0), 100000000, 0, -38), 0), 100000000, 0, -37), 0), 100000000, 0, -36), 0, (("typing/datarepr.mli", 21, 1202, 1202), ("typing/datarepr.mli", 23, 1283, 1308), 0), 0, Tag1 ("Datarepr", 1)), 0); (("labels_of_type", 438), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -35), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -34), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -32); (Tag3 (Tag1 ((Tag2 ("Types")), "label_description"), 0, (0)), 100000000, 0, -33)]), 100000000, 0, -31)], (0)), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("typing/datarepr.mli", 25, 1310, 1310), ("typing/datarepr.mli", 27, 1362, 1398), 0), 0, Tag1 ("Datarepr", 2)), 0); (("constructors_of_type", 439), ((Tag1 (("current_unit"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -27), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -26), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -25), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -23); (Tag3 (Tag1 ((Tag2 ("Types")), "constructor_description"), 0, (0)), 100000000, 0, -24)]), 100000000, 0, -22)], (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0), 100000000, 0, -19), 0), 100000000, 0, -18), 0, (("typing/datarepr.mli", 28, 1399, 1399), ("typing/datarepr.mli", 30, 1480, 1522), 0), 0, Tag1 ("Datarepr", 3)), 0); Tag2 (("Constr_not_found", 440), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Datarepr", 4)), 2, 0); (("find_constr_by_tag", 441), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "constructor_tag"), 0, (0)), 100000000, 0, -17), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "constructor_declaration"), 0, (0)), 100000000, 0, -16)], (0)), 100000000, 0, -15), (Tag3 (Tag1 ((Tag2 ("Types")), "constructor_declaration"), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("typing/datarepr.mli", 35, 1553, 1553), ("typing/datarepr.mli", 37, 1630, 1657), 0), 0, Tag1 ("Datarepr", 5)), 0); (("constructor_existentials", 442), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "constructor_arguments"), 0, (0)), 100000000, 0, -11), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -10)], (0)), 100000000, 0, -9), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -6)], (0)), 100000000, 0, -5); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -8)], (0)), 100000000, 0, -7)]), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("typing/datarepr.mli", 39, 1659, 1659), ("typing/datarepr.mli", 40, 1690, 1770), 0), 0, Tag1 ("Datarepr", 6)), 0)], "Datarepr", [("Datarepr", ("\180\151\137\199\007tv\141\015/\149j\190\219\215\199")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])
Types.type_expr option -> Types.type_expr list * Types.type_expr list

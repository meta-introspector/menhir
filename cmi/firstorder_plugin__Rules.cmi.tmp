type tactic = unit Proofview.tactic
type seqtac =
    (Firstorder_plugin.Sequent.t -> tactic) ->
    Firstorder_plugin.Sequent.t -> tactic
type lseqtac = Names.GlobRef.t -> seqtac
type 'a with_backtracking = tactic -> 'a
val wrap : flags:Firstorder_plugin.Formula.flags -> int -> bool -> seqtac
val clear_global : Names.GlobRef.t -> tactic
val axiom_tac : Firstorder_plugin.Sequent.t -> tactic
val ll_atom_tac :
  flags:Firstorder_plugin.Formula.flags ->
  EConstr.constr -> lseqtac with_backtracking
val and_tac :
  flags:Firstorder_plugin.Formula.flags -> seqtac with_backtracking
val or_tac :
  flags:Firstorder_plugin.Formula.flags -> seqtac with_backtracking
val arrow_tac :
  flags:Firstorder_plugin.Formula.flags -> seqtac with_backtracking
val left_and_tac :
  flags:Firstorder_plugin.Formula.flags ->
  Constr.pinductive -> lseqtac with_backtracking
val left_or_tac :
  flags:Firstorder_plugin.Formula.flags ->
  Constr.pinductive -> lseqtac with_backtracking
val left_false_tac : Names.GlobRef.t -> tactic
val ll_ind_tac :
  flags:Firstorder_plugin.Formula.flags ->
  Constr.pinductive -> EConstr.constr list -> lseqtac with_backtracking
val ll_arrow_tac :
  flags:Firstorder_plugin.Formula.flags ->
  EConstr.constr ->
  EConstr.constr -> EConstr.constr -> lseqtac with_backtracking
val forall_tac :
  flags:Firstorder_plugin.Formula.flags -> seqtac with_backtracking
val left_exists_tac :
  flags:Firstorder_plugin.Formula.flags ->
  Constr.pinductive -> lseqtac with_backtracking
val ll_forall_tac :
  flags:Firstorder_plugin.Formula.flags ->
  ("DEBUG:rule", [Tag1 (("tactic", 880), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -97)], (0)), 100000000, 0, -96)), 0, 0, 0, 0, (("plugins/firstorder/rules.mli", 15, 713, 713), ("plugins/firstorder/rules.mli", 15, 713, 748), 0), 0, 0, 0, Tag1 ("Firstorder_plugin__Rules", 1)), 1, 0); Tag1 (("seqtac", 881), (0, 0, 0, 1, ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Firstorder_plugin")), "Sequent"), "t"), 0, (0)), 100000000, 0, -95), (Tag3 ((("tactic", 880)), 0, (0)), 100000000, 0, -94), 0), 100000000, 0, -93), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Firstorder_plugin")), "Sequent"), "t"), 0, (0)), 100000000, 0, -92), (Tag3 ((("tactic", 880)), 0, (0)), 100000000, 0, -91), 0), 100000000, 0, -90), 0), 100000000, 0, -89)), 0, 0, 0, 0, (("plugins/firstorder/rules.mli", 17, 750, 750), ("plugins/firstorder/rules.mli", 17, 750, 807), 0), 0, 0, 0, Tag1 ("Firstorder_plugin__Rules", 2)), 1, 0); Tag1 (("lseqtac", 882), (0, 0, 0, 1, ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -88), (Tag3 ((("seqtac", 881)), 0, (0)), 100000000, 0, -87), 0), 100000000, 0, -86)), 0, 0, 0, 0, (("plugins/firstorder/rules.mli", 19, 809, 809), ("plugins/firstorder/rules.mli", 19, 809, 842), 0), 0, 0, 0, Tag1 ("Firstorder_plugin__Rules", 3)), 1, 0); Tag1 (("with_backtracking", 883), ([((("a")), 100000000, 0, -84)], 1, 0, 1, ((Tag1 (0, (Tag3 ((("tactic", 880)), 0, (0)), 100000000, 0, -85), ((("a")), 100000000, 0, -84), 0), 100000000, 0, -83)), [25], [0], 0, 0, (("plugins/firstorder/rules.mli", 21, 844, 844), ("plugins/firstorder/rules.mli", 21, 844, 884), 0), 0, 0, 0, Tag1 ("Firstorder_plugin__Rules", 4)), 1, 0); (("wrap", 884), ((Tag1 (("flags"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Firstorder_plugin")), "Formula"), "flags"), 0, (0)), 100000000, 0, -82), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -81), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -80), (Tag3 ((("seqtac", 881)), 0, (0)), 100000000, 0, -79), 0), 100000000, 0, -78), 0), 100000000, 0, -77), 0), 100000000, 0, -76), 0, (("plugins/firstorder/rules.mli", 23, 886, 886), ("plugins/firstorder/rules.mli", 23, 886, 941), 0), 0, Tag1 ("Firstorder_plugin__Rules", 5)), 0); (("clear_global", 885), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -75), (Tag3 ((("tactic", 880)), 0, (0)), 100000000, 0, -74), 0), 100000000, 0, -73), 0, (("plugins/firstorder/rules.mli", 25, 943, 943), ("plugins/firstorder/rules.mli", 25, 943, 980), 0), 0, Tag1 ("Firstorder_plugin__Rules", 6)), 0); (("axiom_tac", 886), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Firstorder_plugin")), "Sequent"), "t"), 0, (0)), 100000000, 0, -72), (Tag3 ((("tactic", 880)), 0, (0)), 100000000, 0, -71), 0), 100000000, 0, -70), 0, (("plugins/firstorder/rules.mli", 27, 982, 982), ("plugins/firstorder/rules.mli", 27, 982, 1017), 0), 0, Tag1 ("Firstorder_plugin__Rules", 7)), 0); (("ll_atom_tac", 887), ((Tag1 (("flags"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Firstorder_plugin")), "Formula"), "flags"), 0, (0)), 100000000, 0, -69), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -68), (Tag3 ((("with_backtracking", 883)), [(Tag3 ((("lseqtac", 882)), 0, (0)), 100000000, 0, -67)], (0)), 100000000, 0, -66), 0), 100000000, 0, -65), 0), 100000000, 0, -64), 0, (("plugins/firstorder/rules.mli", 29, 1019, 1019), ("plugins/firstorder/rules.mli", 29, 1019, 1095), 0), 0, Tag1 ("Firstorder_plugin__Rules", 8)), 0); (("and_tac", 888), ((Tag1 (("flags"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Firstorder_plugin")), "Formula"), "flags"), 0, (0)), 100000000, 0, -63), (Tag3 ((("with_backtracking", 883)), [(Tag3 ((("seqtac", 881)), 0, (0)), 100000000, 0, -62)], (0)), 100000000, 0, -61), 0), 100000000, 0, -60), 0, (("plugins/firstorder/rules.mli", 31, 1097, 1097), ("plugins/firstorder/rules.mli", 31, 1097, 1158), 0), 0, Tag1 ("Firstorder_plugin__Rules", 9)), 0); (("or_tac", 889), ((Tag1 (("flags"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Firstorder_plugin")), "Formula"), "flags"), 0, (0)), 100000000, 0, -59), (Tag3 ((("with_backtracking", 883)), [(Tag3 ((("seqtac", 881)), 0, (0)), 100000000, 0, -58)], (0)), 100000000, 0, -57), 0), 100000000, 0, -56), 0, (("plugins/firstorder/rules.mli", 33, 1160, 1160), ("plugins/firstorder/rules.mli", 33, 1160, 1220), 0), 0, Tag1 ("Firstorder_plugin__Rules", 10)), 0); (("arrow_tac", 890), ((Tag1 (("flags"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Firstorder_plugin")), "Formula"), "flags"), 0, (0)), 100000000, 0, -55), (Tag3 ((("with_backtracking", 883)), [(Tag3 ((("seqtac", 881)), 0, (0)), 100000000, 0, -54)], (0)), 100000000, 0, -53), 0), 100000000, 0, -52), 0, (("plugins/firstorder/rules.mli", 35, 1222, 1222), ("plugins/firstorder/rules.mli", 35, 1222, 1285), 0), 0, Tag1 ("Firstorder_plugin__Rules", 11)), 0); (("left_and_tac", 891), ((Tag1 (("flags"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Firstorder_plugin")), "Formula"), "flags"), 0, (0)), 100000000, 0, -51), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "pinductive"), 0, (0)), 100000000, 0, -50), (Tag3 ((("with_backtracking", 883)), [(Tag3 ((("lseqtac", 882)), 0, (0)), 100000000, 0, -49)], (0)), 100000000, 0, -48), 0), 100000000, 0, -47), 0), 100000000, 0, -46), 0, (("plugins/firstorder/rules.mli", 37, 1287, 1287), ("plugins/firstorder/rules.mli", 37, 1287, 1368), 0), 0, Tag1 ("Firstorder_plugin__Rules", 12)), 0); (("left_or_tac", 892), ((Tag1 (("flags"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Firstorder_plugin")), "Formula"), "flags"), 0, (0)), 100000000, 0, -45), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "pinductive"), 0, (0)), 100000000, 0, -44), (Tag3 ((("with_backtracking", 883)), [(Tag3 ((("lseqtac", 882)), 0, (0)), 100000000, 0, -43)], (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0), 100000000, 0, -40), 0, (("plugins/firstorder/rules.mli", 39, 1370, 1370), ("plugins/firstorder/rules.mli", 39, 1370, 1450), 0), 0, Tag1 ("Firstorder_plugin__Rules", 13)), 0); (("left_false_tac", 893), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -39), (Tag3 ((("tactic", 880)), 0, (0)), 100000000, 0, -38), 0), 100000000, 0, -37), 0, (("plugins/firstorder/rules.mli", 41, 1452, 1452), ("plugins/firstorder/rules.mli", 41, 1452, 1492), 0), 0, Tag1 ("Firstorder_plugin__Rules", 14)), 0); (("ll_ind_tac", 894), ((Tag1 (("flags"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Firstorder_plugin")), "Formula"), "flags"), 0, (0)), 100000000, 0, -36), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "pinductive"), 0, (0)), 100000000, 0, -35), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -34)], (0)), 100000000, 0, -33), (Tag3 ((("with_backtracking", 883)), [(Tag3 ((("lseqtac", 882)), 0, (0)), 100000000, 0, -32)], (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("plugins/firstorder/rules.mli", 43, 1494, 1494), ("plugins/firstorder/rules.mli", 43, 1494, 1588), 0), 0, Tag1 ("Firstorder_plugin__Rules", 15)), 0); (("ll_arrow_tac", 895), ((Tag1 (("flags"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Firstorder_plugin")), "Formula"), "flags"), 0, (0)), 100000000, 0, -27), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -26), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -25), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -24), (Tag3 ((("with_backtracking", 883)), [(Tag3 ((("lseqtac", 882)), 0, (0)), 100000000, 0, -23)], (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), 0), 100000000, 0, -19), 0), 100000000, 0, -18), 0, (("plugins/firstorder/rules.mli", 45, 1590, 1590), ("plugins/firstorder/rules.mli", 45, 1590, 1687), 0), 0, Tag1 ("Firstorder_plugin__Rules", 16)), 0); (("forall_tac", 896), ((Tag1 (("flags"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Firstorder_plugin")), "Formula"), "flags"), 0, (0)), 100000000, 0, -17), (Tag3 ((("with_backtracking", 883)), [(Tag3 ((("seqtac", 881)), 0, (0)), 100000000, 0, -16)], (0)), 100000000, 0, -15), 0), 100000000, 0, -14), 0, (("plugins/firstorder/rules.mli", 47, 1689, 1689), ("plugins/firstorder/rules.mli", 47, 1689, 1753), 0), 0, Tag1 ("Firstorder_plugin__Rules", 17)), 0); (("left_exists_tac", 897), ((Tag1 (("flags"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Firstorder_plugin")), "Formula"), "flags"), 0, (0)), 100000000, 0, -13), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "pinductive"), 0, (0)), 100000000, 0, -12), (Tag3 ((("with_backtracking", 883)), [(Tag3 ((("lseqtac", 882)), 0, (0)), 100000000, 0, -11)], (0)), 100000000, 0, -10), 0), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("plugins/firstorder/rules.mli", 49, 1755, 1755), ("plugins/firstorder/rules.mli", 49, 1755, 1839), 0), 0, Tag1 ("Firstorder_plugin__Rules", 18)), 0); (("ll_forall_tac", 898), ((Tag1 (("flags"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Firstorder_plugin")), "Formula"), "flags"), 0, (0)), 100000000, 0, -7), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -6), (Tag3 ((("with_backtracking", 883)), [(Tag3 ((("lseqtac", 882)), 0, (0)), 100000000, 0, -5)], (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("plugins/firstorder/rules.mli", 51, 1841, 1841), ("plugins/firstorder/rules.mli", 51, 1841, 1918), 0), 0, Tag1 ("Firstorder_plugin__Rules", 19)), 0)], "Firstorder_plugin__Rules", [("Firstorder_plugin__Rules", ("\219\134\127F\196z:\172n\131\204D\140\193\217R")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Unix", (":B72R\011\005Sj\189)\011\239PH\254")); ("UnivSubst", ("\190qu\031mc\130\181\003G]\132\"\219m)")); ("UnivProblem", ("6'\161\018\181\001.\253\000\141a6\171\1727\155")); ("UnivNames", ("%\151_\209%+JM$n\001\232\194n\178N")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Unification", ("\017\027\157=\255\1914L\020\213h\154.\219\005\170")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UState", ("SD\203\215|\136\n\251\239\208\148\215C\n\167\005")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("Typeclasses", ("KO\1297x\192\210\231\001\1824l\135\192\160|")); ("Type_errors", ("7\157\162-\214M\206\196\228\191\005v\134\177\144\134")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Tactypes", ("\143E\135*\195\151\144H\151M\011($\017\159\203")); ("Tacred", ("\133d\143\1310z\030\237\232\002\001\025\147\140\215:")); ("Summary", ("\148G\135\226\024L3\246\021\028U\146\164`\253\250")); ("Store", ("/dT\252\145\179pq\216{\181\206\190K+U")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Section", ("\245\207\b\021\142v=\155#w\246}\"4b\006")); ("Safe_typing", (")\250?\164\145\132\241\127\186\152h+\145\"\237l")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Reductionops", ("\179\023P\218\146Uh\014IS\196C\031q~#")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Proofview_monad", ("\218\196\189S\147\216\129\221\231\224v\228O\024*\239")); ("Proofview", ("\245\140U\027\236\199\199&\242\156\199YG\250tA")); ("Proof", ("\249\030\200g\248\164o&\tS\132\rTl\1736")); ("Primred", ("\158G\192\182\224\196\144*\174y_E\165\012\137C")); ("Pretype_errors", ("\155\229\201\176\163\234\203C\127\227\141\174j\199\200H")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Pattern", ("\195C\140Wb=\022\222\208\227^K\003\020\215X")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("Nativevalues", ("8:\007\025e\226c,\001\171\146#l\210\171\152")); ("Nativelib", ("V\239\205Y1\147E:,\176\196Hy\1483|")); ("Nativecode", ("\190\185\255\006m\012\210\163\138Rz\247\15283\183")); ("Nametab", ("1\018\163\254\225\2178\025DI\0271Q\198\134\140")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Namegen", ("\187\222\224T\255\020\1808-\212*\164\131\177\157x")); ("Monad", ("\244\171T\157\194p\187\160\149\195{\132\222\020\253\148")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Ltac_pretype", ("\224\"\167\018i:U\172>\188\128$\r\252\020T")); ("Logic_monad", ("\130\157\160Q\163vQ\137\184\2242\209\128\024\220i")); ("Locus", ("_\002\003W\246\181\225\242Uf\139\226\176\174\192I")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Libobject", ("\132}t\226hl\213L\210\172\167pc\012~\129")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hook", ("\183\194\223\003\155\169',\187\240a;E\b\1396")); ("Hints", ("\007\130]H\\t(\131\000}\205\137H\148\250\166")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Goal_select", ("\235$\175\023t\178\194.Ivlz\005\211\173\n")); ("Globnames", ("W\004\172T\214\181H\220\232\160LSW\006\130\226")); ("Glob_term", ("\165=a\227\160\153.\021_$\232\209T\236\153O")); ("Genlambda", ("\170}\024\241\141\222\136S\169\219\2212i\134KI")); ("Geninterp", ("2S\151\191\189\159\004\188;\224d\199|U\004\028")); ("Genarg", ("\1434\015\001\152\196\005s\156\136\195\185\247\b3\t")); ("Ftactic", ("K\172\205\128\241\162\160\201\202\1561o\180L\206:")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Firstorder_plugin__Unify", ("\016\2115\204G-\000\180\248ka`\199 =\027")); ("Firstorder_plugin__Sequent", ("\163\224H\230\199H\"\244p&eC1H\193\212")); ("Firstorder_plugin__Formula", ("\251\018G\248\241\193\170\000\146\149\159O,\183o\145")); ("Firstorder_plugin", ("\022o\134\200\217\182Qo\201\176\165\144\172oj\236")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evd", ("\211\205p\193\216\129r\006\239oN\142ar\196\175")); ("Evarsolve", ("\000&\228\016}j\199\t\229\173\127\024\219\199\184\178")); ("Evar_kinds", ("\023L\186\132\218}\254\221\185\198\220\200h\003{\021")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Entries", ("\172\201\198\221Ap\027_{\174\141C\021\";p")); ("EConstr", ("\201aW\156\157;N\004\201V\208\006L\166\211)")); ("Dyn", ("\131z`\205v\2306\007x\027&K.?;\169")); ("Deprecation", ("\226:\146\245\190;\1929\254@\247a\218\244\134\189")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("DAst", ("\224/\200)\007\184ni\134\b\139\204\241\005w\212")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conversion", ("\158\150&\195M\tv\127|\029\158RRK\211A")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CWarnings", ("\132\220\150\227\215\239t\217\132\220'JX\188\246c")); ("CUnix", ("\140Zl\153\167\011J\015\005|th\247OTu")); ("CString", ("\243~4C\023~\169\148x\206\165\207\195\177Q\184")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CDebug", ("^4\210p7\239!3\138\138\213?\239`\250\157")); ("CClosure", ("\167\b\022\241V-\r\253\b\002\000j]\223%\142")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])
EConstr.types -> lseqtac with_backtracking

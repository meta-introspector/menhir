module type S =
  sig
    type fpclass =
      fpclass =
        FP_normal
      | FP_subnormal
      | FP_zero
      | FP_infinite
      | FP_nan
    type t = float
    module Array = Float.Array
    module ArrayLabels = Float.ArrayLabels
    external cbrt : float -> float = "caml_cbrt_float" "caml_cbrt"
      [@@unboxed] [@@noalloc]
    external exp2 : float -> float = "caml_exp2_float" "caml_exp2"
      [@@unboxed] [@@noalloc]
    external log2 : float -> float = "caml_log2_float" "caml_log2"
      [@@unboxed] [@@noalloc]
    external acosh : float -> float = "caml_acosh_float" "caml_acosh"
      [@@unboxed] [@@noalloc]
    external asinh : float -> float = "caml_asinh_float" "caml_asinh"
      [@@unboxed] [@@noalloc]
    external atanh : float -> float = "caml_atanh_float" "caml_atanh"
      [@@unboxed] [@@noalloc]
    external erf : float -> float = "caml_erf_float" "caml_erf" [@@unboxed]
      [@@noalloc]
    external erfc : float -> float = "caml_erfc_float" "caml_erfc"
      [@@unboxed] [@@noalloc]
    val zero : float
    val one : float
    val minus_one : float
    external fma : float -> float -> float -> float = "caml_fma_float"
      "caml_fma" [@@unboxed] [@@noalloc]
    val succ : float -> float
    val pred : float -> float
    val is_finite : float -> bool
    val is_infinite : float -> bool
    val is_nan : float -> bool
    val is_integer : float -> bool
    external trunc : float -> float = "caml_trunc_float" "caml_trunc"
      [@@unboxed] [@@noalloc]
    external round : float -> float = "caml_round_float" "caml_round"
      [@@unboxed] [@@noalloc]
    external next_after : float -> float -> float = "caml_nextafter_float"
      "caml_nextafter" [@@unboxed] [@@noalloc]
    external copy_sign : float -> float -> float = "caml_copysign_float"
      "caml_copysign" [@@unboxed] [@@noalloc]
    external sign_bit : (float [@unboxed]) -> bool = "caml_signbit_float"
      "caml_signbit" [@@noalloc]
    val min : t -> t -> t
    val max : float -> float -> float
    val min_max : float -> float -> float * float
    val min_num : t -> t -> t
    val max_num : t -> t -> t
    val min_max_num : float -> float -> float * float
    external neg : float -> float = "%negfloat"
    external add : float -> float -> float = "%addfloat"
    external sub : float -> float -> float = "%subfloat"
    external mul : float -> float -> float = "%mulfloat"
    external div : float -> float -> float = "%divfloat"
    external rem : float -> float -> float = "caml_fmod_float" "fmod"
      [@@unboxed] [@@noalloc]
    external abs : float -> float = "%absfloat"
    val infinity : float
    val neg_infinity : float
    val nan : float
    val pi : float
    val max_float : float
    val min_float : float
    val epsilon : float
    external of_int : int -> float = "%floatofint"
    external to_int : float -> int = "%intoffloat"
    external of_string : string -> float = "caml_float_of_string"
    val of_string_opt : string -> float option
    val to_string : float -> string
    external classify_float : (float [@unboxed]) -> fpclass
      = "caml_classify_float" "caml_classify_float_unboxed" [@@noalloc]
    external pow : float -> float -> float = "caml_power_float" "pow"
      [@@unboxed] [@@noalloc]
    external sqrt : float -> float = "caml_sqrt_float" "sqrt" [@@unboxed]
      [@@noalloc]
    external exp : float -> float = "caml_exp_float" "exp" [@@unboxed]
      [@@noalloc]
    external log : float -> float = "caml_log_float" "log" [@@unboxed]
      [@@noalloc]
    external log10 : float -> float = "caml_log10_float" "log10" [@@unboxed]
      [@@noalloc]
    external expm1 : float -> float = "caml_expm1_float" "caml_expm1"
      [@@unboxed] [@@noalloc]
    external log1p : float -> float = "caml_log1p_float" "caml_log1p"
      [@@unboxed] [@@noalloc]
    external cos : float -> float = "caml_cos_float" "cos" [@@unboxed]
      [@@noalloc]
    external sin : float -> float = "caml_sin_float" "sin" [@@unboxed]
      [@@noalloc]
    external tan : float -> float = "caml_tan_float" "tan" [@@unboxed]
      [@@noalloc]
    external acos : float -> float = "caml_acos_float" "acos" [@@unboxed]
      [@@noalloc]
    external asin : float -> float = "caml_asin_float" "asin" [@@unboxed]
      [@@noalloc]
    external atan : float -> float = "caml_atan_float" "atan" [@@unboxed]
      [@@noalloc]
    external atan2 : float -> float -> float = "caml_atan2_float" "atan2"
      [@@unboxed] [@@noalloc]
    external hypot : float -> float -> float = "caml_hypot_float"
      "caml_hypot" [@@unboxed] [@@noalloc]
    external cosh : float -> float = "caml_cosh_float" "cosh" [@@unboxed]
      [@@noalloc]
    external sinh : float -> float = "caml_sinh_float" "sinh" [@@unboxed]
      [@@noalloc]
    external tanh : float -> float = "caml_tanh_float" "tanh" [@@unboxed]
      [@@noalloc]
    external ceil : float -> float = "caml_ceil_float" "ceil" [@@unboxed]
      [@@noalloc]
    external floor : float -> float = "caml_floor_float" "floor" [@@unboxed]
      [@@noalloc]
    external frexp : float -> float * int = "caml_frexp_float"
    external ldexp :
      (float [@unboxed]) -> (int [@untagged]) -> (float [@unboxed])
      = "caml_ldexp_float" "caml_ldexp_float_unboxed" [@@noalloc]
    external modf : float -> float * float = "caml_modf_float"
    val compare : t -> t -> int
    val equal : t -> t -> bool
    val hash : t -> int("DEBUG:rule", [Tag4 (("S", 515), ((Tag1 ([Tag1 (("fpclass", 516), (0, 0, Tag1 ([(("FP_normal", 270), (0), 0, (("stdcompat__float_s.mli", 4, 53, 55), ("stdcompat__float_s.mli", 4, 53, 66), 0), 0, Tag1 ("Stdcompat__float_s", 1)); (("FP_subnormal", 271), (0), 0, (("stdcompat__float_s.mli", 5, 68, 70), ("stdcompat__float_s.mli", 5, 68, 84), 0), 0, Tag1 ("Stdcompat__float_s", 2)); (("FP_zero", 272), (0), 0, (("stdcompat__float_s.mli", 6, 86, 88), ("stdcompat__float_s.mli", 6, 86, 97), 0), 0, Tag1 ("Stdcompat__float_s", 3)); (("FP_infinite", 273), (0), 0, (("stdcompat__float_s.mli", 7, 99, 101), ("stdcompat__float_s.mli", 7, 99, 114), 0), 0, Tag1 ("Stdcompat__float_s", 4)); (("FP_nan", 274), (0), 0, (("stdcompat__float_s.mli", 8, 116, 118), ("stdcompat__float_s.mli", 8, 116, 126), 0), 0, Tag1 ("Stdcompat__float_s", 5))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "fpclass"), 0, (0)), 100000000, 0, -259)), 0, 0, 0, 0, (("stdcompat__float_s.mli", 3, 21, 21), ("stdcompat__float_s.mli", 8, 116, 126), 0), 0, 1, 0, Tag1 ("Stdcompat__float_s", 0)), 1, 0); Tag1 (("t", 517), (0, 0, 0, 1, ((Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -258)), 0, 0, 0, 0, (("stdcompat__float_s.mli", 28, 381, 381), ("stdcompat__float_s.mli", 28, 381, 395), 0), 0, 0, 0, Tag1 ("Stdcompat__float_s", 6)), 1, 0); Tag3 (("Array", 518), 1, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Float"), "Array")), 0, (("stdcompat__float_s.mli", 37, 458, 458), ("stdcompat__float_s.mli", 37, 458, 484), 0), Tag1 ("Stdcompat__float_s", 7)), 0, 0); Tag3 (("ArrayLabels", 519), 1, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Float"), "ArrayLabels")), 0, (("stdcompat__float_s.mli", 110, 3605, 3605), ("stdcompat__float_s.mli", 110, 3605, 3643), 0), Tag1 ("Stdcompat__float_s", 8)), 0, 0); (("cbrt", 520), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -257), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -256), 0), 100000000, 0, -255), (("caml_cbrt_float", 1, 0, "caml_cbrt", [1], 1)), (("stdcompat__float_s.mli", 185, 6988, 6988), ("stdcompat__float_s.mli", 186, 7063, 7075), 0), [(("unboxed", (("stdcompat__float_s.mli", 185, 6988, 7053), ("stdcompat__float_s.mli", 185, 6988, 7060), 0)), (0), (("stdcompat__float_s.mli", 185, 6988, 7050), ("stdcompat__float_s.mli", 185, 6988, 7062), 0)); (("noalloc", (("stdcompat__float_s.mli", 186, 7063, 7066), ("stdcompat__float_s.mli", 186, 7063, 7073), 0)), (0), (("stdcompat__float_s.mli", 186, 7063, 7063), ("stdcompat__float_s.mli", 186, 7063, 7075), 0))], Tag1 ("Stdcompat__float_s", 9)), 0); (("exp2", 521), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -254), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -253), 0), 100000000, 0, -252), (("caml_exp2_float", 1, 0, "caml_exp2", [1], 1)), (("stdcompat__float_s.mli", 198, 7298, 7298), ("stdcompat__float_s.mli", 199, 7373, 7385), 0), [(("unboxed", (("stdcompat__float_s.mli", 198, 7298, 7363), ("stdcompat__float_s.mli", 198, 7298, 7370), 0)), (0), (("stdcompat__float_s.mli", 198, 7298, 7360), ("stdcompat__float_s.mli", 198, 7298, 7372), 0)); (("noalloc", (("stdcompat__float_s.mli", 199, 7373, 7376), ("stdcompat__float_s.mli", 199, 7373, 7383), 0)), (0), (("stdcompat__float_s.mli", 199, 7373, 7373), ("stdcompat__float_s.mli", 199, 7373, 7385), 0))], Tag1 ("Stdcompat__float_s", 10)), 0); (("log2", 522), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -251), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -250), 0), 100000000, 0, -249), (("caml_log2_float", 1, 0, "caml_log2", [1], 1)), (("stdcompat__float_s.mli", 211, 7608, 7608), ("stdcompat__float_s.mli", 212, 7683, 7695), 0), [(("unboxed", (("stdcompat__float_s.mli", 211, 7608, 7673), ("stdcompat__float_s.mli", 211, 7608, 7680), 0)), (0), (("stdcompat__float_s.mli", 211, 7608, 7670), ("stdcompat__float_s.mli", 211, 7608, 7682), 0)); (("noalloc", (("stdcompat__float_s.mli", 212, 7683, 7686), ("stdcompat__float_s.mli", 212, 7683, 7693), 0)), (0), (("stdcompat__float_s.mli", 212, 7683, 7683), ("stdcompat__float_s.mli", 212, 7683, 7695), 0))], Tag1 ("Stdcompat__float_s", 11)), 0); (("acosh", 523), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -248), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -247), 0), 100000000, 0, -246), (("caml_acosh_float", 1, 0, "caml_acosh", [1], 1)), (("stdcompat__float_s.mli", 224, 7918, 7918), ("stdcompat__float_s.mli", 225, 7996, 8008), 0), [(("unboxed", (("stdcompat__float_s.mli", 224, 7918, 7986), ("stdcompat__float_s.mli", 224, 7918, 7993), 0)), (0), (("stdcompat__float_s.mli", 224, 7918, 7983), ("stdcompat__float_s.mli", 224, 7918, 7995), 0)); (("noalloc", (("stdcompat__float_s.mli", 225, 7996, 7999), ("stdcompat__float_s.mli", 225, 7996, 8006), 0)), (0), (("stdcompat__float_s.mli", 225, 7996, 7996), ("stdcompat__float_s.mli", 225, 7996, 8008), 0))], Tag1 ("Stdcompat__float_s", 12)), 0); (("asinh", 524), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -245), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -244), 0), 100000000, 0, -243), (("caml_asinh_float", 1, 0, "caml_asinh", [1], 1)), (("stdcompat__float_s.mli", 236, 8167, 8167), ("stdcompat__float_s.mli", 237, 8245, 8257), 0), [(("unboxed", (("stdcompat__float_s.mli", 236, 8167, 8235), ("stdcompat__float_s.mli", 236, 8167, 8242), 0)), (0), (("stdcompat__float_s.mli", 236, 8167, 8232), ("stdcompat__float_s.mli", 236, 8167, 8244), 0)); (("noalloc", (("stdcompat__float_s.mli", 237, 8245, 8248), ("stdcompat__float_s.mli", 237, 8245, 8255), 0)), (0), (("stdcompat__float_s.mli", 237, 8245, 8245), ("stdcompat__float_s.mli", 237, 8245, 8257), 0))], Tag1 ("Stdcompat__float_s", 13)), 0); (("atanh", 525), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -242), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -241), 0), 100000000, 0, -240), (("caml_atanh_float", 1, 0, "caml_atanh", [1], 1)), (("stdcompat__float_s.mli", 248, 8416, 8416), ("stdcompat__float_s.mli", 249, 8494, 8506), 0), [(("unboxed", (("stdcompat__float_s.mli", 248, 8416, 8484), ("stdcompat__float_s.mli", 248, 8416, 8491), 0)), (0), (("stdcompat__float_s.mli", 248, 8416, 8481), ("stdcompat__float_s.mli", 248, 8416, 8493), 0)); (("noalloc", (("stdcompat__float_s.mli", 249, 8494, 8497), ("stdcompat__float_s.mli", 249, 8494, 8504), 0)), (0), (("stdcompat__float_s.mli", 249, 8494, 8494), ("stdcompat__float_s.mli", 249, 8494, 8506), 0))], Tag1 ("Stdcompat__float_s", 14)), 0); (("erf", 526), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -239), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -238), 0), 100000000, 0, -237), (("caml_erf_float", 1, 0, "caml_erf", [1], 1)), (("stdcompat__float_s.mli", 260, 8665, 8665), ("stdcompat__float_s.mli", 261, 8737, 8749), 0), [(("unboxed", (("stdcompat__float_s.mli", 260, 8665, 8727), ("stdcompat__float_s.mli", 260, 8665, 8734), 0)), (0), (("stdcompat__float_s.mli", 260, 8665, 8724), ("stdcompat__float_s.mli", 260, 8665, 8736), 0)); (("noalloc", (("stdcompat__float_s.mli", 261, 8737, 8740), ("stdcompat__float_s.mli", 261, 8737, 8747), 0)), (0), (("stdcompat__float_s.mli", 261, 8737, 8737), ("stdcompat__float_s.mli", 261, 8737, 8749), 0))], Tag1 ("Stdcompat__float_s", 15)), 0); (("erfc", 527), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -236), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -235), 0), 100000000, 0, -234), (("caml_erfc_float", 1, 0, "caml_erfc", [1], 1)), (("stdcompat__float_s.mli", 272, 8900, 8900), ("stdcompat__float_s.mli", 273, 8975, 8987), 0), [(("unboxed", (("stdcompat__float_s.mli", 272, 8900, 8965), ("stdcompat__float_s.mli", 272, 8900, 8972), 0)), (0), (("stdcompat__float_s.mli", 272, 8900, 8962), ("stdcompat__float_s.mli", 272, 8900, 8974), 0)); (("noalloc", (("stdcompat__float_s.mli", 273, 8975, 8978), ("stdcompat__float_s.mli", 273, 8975, 8985), 0)), (0), (("stdcompat__float_s.mli", 273, 8975, 8975), ("stdcompat__float_s.mli", 273, 8975, 8987), 0))], Tag1 ("Stdcompat__float_s", 16)), 0); (("zero", 528), ((Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -233), 0, (("stdcompat__float_s.mli", 284, 9209, 9209), ("stdcompat__float_s.mli", 284, 9209, 9225), 0), 0, Tag1 ("Stdcompat__float_s", 17)), 0); (("one", 529), ((Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -232), 0, (("stdcompat__float_s.mli", 287, 9266, 9266), ("stdcompat__float_s.mli", 287, 9266, 9281), 0), 0, Tag1 ("Stdcompat__float_s", 18)), 0); (("minus_one", 530), ((Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -231), 0, (("stdcompat__float_s.mli", 290, 9321, 9321), ("stdcompat__float_s.mli", 290, 9321, 9342), 0), 0, Tag1 ("Stdcompat__float_s", 19)), 0); (("fma", 531), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -230), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -229), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -228), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -227), 0), 100000000, 0, -226), 0), 100000000, 0, -225), 0), 100000000, 0, -224), (("caml_fma_float", 3, 0, "caml_fma", [1; 1; 1], 1)), (("stdcompat__float_s.mli", 294, 9389, 9389), ("stdcompat__float_s.mli", 295, 9467, 9491), 0), [(("unboxed", (("stdcompat__float_s.mli", 295, 9467, 9470), ("stdcompat__float_s.mli", 295, 9467, 9477), 0)), (0), (("stdcompat__float_s.mli", 295, 9467, 9467), ("stdcompat__float_s.mli", 295, 9467, 9479), 0)); (("noalloc", (("stdcompat__float_s.mli", 295, 9467, 9482), ("stdcompat__float_s.mli", 295, 9467, 9489), 0)), (0), (("stdcompat__float_s.mli", 295, 9467, 9479), ("stdcompat__float_s.mli", 295, 9467, 9491), 0))], Tag1 ("Stdcompat__float_s", 20)), 0); (("succ", 532), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -223), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -222), 0), 100000000, 0, -221), 0, (("stdcompat__float_s.mli", 307, 9751, 9751), ("stdcompat__float_s.mli", 307, 9751, 9776), 0), 0, Tag1 ("Stdcompat__float_s", 21)), 0); (("pred", 533), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -220), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -219), 0), 100000000, 0, -218), 0, (("stdcompat__float_s.mli", 310, 9826, 9826), ("stdcompat__float_s.mli", 310, 9826, 9851), 0), 0, Tag1 ("Stdcompat__float_s", 22)), 0); (("is_finite", 534), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -217), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -216), 0), 100000000, 0, -215), 0, (("stdcompat__float_s.mli", 313, 9901, 9901), ("stdcompat__float_s.mli", 313, 9901, 9930), 0), 0, Tag1 ("Stdcompat__float_s", 23)), 0); (("is_infinite", 535), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -214), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -213), 0), 100000000, 0, -212), 0, (("stdcompat__float_s.mli", 316, 9984, 9984), ("stdcompat__float_s.mli", 316, 9984, 10015), 0), 0, Tag1 ("Stdcompat__float_s", 24)), 0); (("is_nan", 536), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -211), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -210), 0), 100000000, 0, -209), 0, (("stdcompat__float_s.mli", 319, 10071, 10071), ("stdcompat__float_s.mli", 319, 10071, 10097), 0), 0, Tag1 ("Stdcompat__float_s", 25)), 0); (("is_integer", 537), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -208), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -207), 0), 100000000, 0, -206), 0, (("stdcompat__float_s.mli", 322, 10148, 10148), ("stdcompat__float_s.mli", 322, 10148, 10178), 0), 0, Tag1 ("Stdcompat__float_s", 26)), 0); (("trunc", 538), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -205), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -204), 0), 100000000, 0, -203), (("caml_trunc_float", 1, 0, "caml_trunc", [1], 1)), (("stdcompat__float_s.mli", 326, 10234, 10234), ("stdcompat__float_s.mli", 327, 10312, 10324), 0), [(("unboxed", (("stdcompat__float_s.mli", 326, 10234, 10302), ("stdcompat__float_s.mli", 326, 10234, 10309), 0)), (0), (("stdcompat__float_s.mli", 326, 10234, 10299), ("stdcompat__float_s.mli", 326, 10234, 10311), 0)); (("noalloc", (("stdcompat__float_s.mli", 327, 10312, 10315), ("stdcompat__float_s.mli", 327, 10312, 10322), 0)), (0), (("stdcompat__float_s.mli", 327, 10312, 10312), ("stdcompat__float_s.mli", 327, 10312, 10324), 0))], Tag1 ("Stdcompat__float_s", 27)), 0); (("round", 539), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -202), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -201), 0), 100000000, 0, -200), (("caml_round_float", 1, 0, "caml_round", [1], 1)), (("stdcompat__float_s.mli", 338, 10483, 10483), ("stdcompat__float_s.mli", 339, 10561, 10573), 0), [(("unboxed", (("stdcompat__float_s.mli", 338, 10483, 10551), ("stdcompat__float_s.mli", 338, 10483, 10558), 0)), (0), (("stdcompat__float_s.mli", 338, 10483, 10548), ("stdcompat__float_s.mli", 338, 10483, 10560), 0)); (("noalloc", (("stdcompat__float_s.mli", 339, 10561, 10564), ("stdcompat__float_s.mli", 339, 10561, 10571), 0)), (0), (("stdcompat__float_s.mli", 339, 10561, 10561), ("stdcompat__float_s.mli", 339, 10561, 10573), 0))], Tag1 ("Stdcompat__float_s", 28)), 0); (("next_after", 540), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -199), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -198), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -197), 0), 100000000, 0, -196), 0), 100000000, 0, -195), (("caml_nextafter_float", 2, 0, "caml_nextafter", [1; 1], 1)), (("stdcompat__float_s.mli", 350, 10732, 10732), ("stdcompat__float_s.mli", 353, 10902, 10914), 0), [(("unboxed", (("stdcompat__float_s.mli", 351, 10754, 10824), ("stdcompat__float_s.mli", 351, 10754, 10831), 0)), (0), (("stdcompat__float_s.mli", 351, 10754, 10821), ("stdcompat__float_s.mli", 352, 10832, 10901), 0)); (("noalloc", (("stdcompat__float_s.mli", 353, 10902, 10905), ("stdcompat__float_s.mli", 353, 10902, 10912), 0)), (0), (("stdcompat__float_s.mli", 353, 10902, 10902), ("stdcompat__float_s.mli", 353, 10902, 10914), 0))], Tag1 ("Stdcompat__float_s", 29)), 0); (("copy_sign", 541), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -194), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -193), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -192), 0), 100000000, 0, -191), 0), 100000000, 0, -190), (("caml_copysign_float", 2, 0, "caml_copysign", [1; 1], 1)), (("stdcompat__float_s.mli", 365, 11115, 11115), ("stdcompat__float_s.mli", 367, 11214, 11226), 0), [(("unboxed", (("stdcompat__float_s.mli", 366, 11136, 11204), ("stdcompat__float_s.mli", 366, 11136, 11211), 0)), (0), (("stdcompat__float_s.mli", 366, 11136, 11201), ("stdcompat__float_s.mli", 366, 11136, 11213), 0)); (("noalloc", (("stdcompat__float_s.mli", 367, 11214, 11217), ("stdcompat__float_s.mli", 367, 11214, 11224), 0)), (0), (("stdcompat__float_s.mli", 367, 11214, 11214), ("stdcompat__float_s.mli", 367, 11214, 11226), 0))], Tag1 ("Stdcompat__float_s", 30)), 0); (("sign_bit", 542), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -189), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -188), 0), 100000000, 0, -187), (("caml_signbit_float", 1, 0, "caml_signbit", [1], 0)), (("stdcompat__float_s.mli", 386, 11527, 11527), ("stdcompat__float_s.mli", 388, 11626, 11695), 0), [(("noalloc", (("stdcompat__float_s.mli", 387, 11547, 11618), ("stdcompat__float_s.mli", 387, 11547, 11625), 0)), (0), (("stdcompat__float_s.mli", 387, 11547, 11615), ("stdcompat__float_s.mli", 388, 11626, 11695), 0))], Tag1 ("Stdcompat__float_s", 31)), 0); (("min", 543), ((Tag1 (0, (Tag3 ((("t", 517)), 0, (0)), 100000000, 0, -186), (Tag1 (0, (Tag3 ((("t", 517)), 0, (0)), 100000000, 0, -185), (Tag3 ((("t", 517)), 0, (0)), 100000000, 0, -184), 0), 100000000, 0, -183), 0), 100000000, 0, -182), 0, (("stdcompat__float_s.mli", 399, 11870, 11870), ("stdcompat__float_s.mli", 399, 11870, 11891), 0), 0, Tag1 ("Stdcompat__float_s", 32)), 0); (("max", 544), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -181), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -180), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -179), 0), 100000000, 0, -178), 0), 100000000, 0, -177), 0, (("stdcompat__float_s.mli", 402, 11937, 11937), ("stdcompat__float_s.mli", 402, 11937, 11970), 0), 0, Tag1 ("Stdcompat__float_s", 33)), 0); (("min_max", 545), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -176), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -175), (Tag2 ([(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -173); (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -174)]), 100000000, 0, -172), 0), 100000000, 0, -171), 0), 100000000, 0, -170), 0, (("stdcompat__float_s.mli", 405, 12028, 12028), ("stdcompat__float_s.mli", 405, 12028, 12075), 0), 0, Tag1 ("Stdcompat__float_s", 34)), 0); (("min_num", 546), ((Tag1 (0, (Tag3 ((("t", 517)), 0, (0)), 100000000, 0, -169), (Tag1 (0, (Tag3 ((("t", 517)), 0, (0)), 100000000, 0, -168), (Tag3 ((("t", 517)), 0, (0)), 100000000, 0, -167), 0), 100000000, 0, -166), 0), 100000000, 0, -165), 0, (("stdcompat__float_s.mli", 408, 12147, 12147), ("stdcompat__float_s.mli", 408, 12147, 12172), 0), 0, Tag1 ("Stdcompat__float_s", 35)), 0); (("max_num", 547), ((Tag1 (0, (Tag3 ((("t", 517)), 0, (0)), 100000000, 0, -164), (Tag1 (0, (Tag3 ((("t", 517)), 0, (0)), 100000000, 0, -163), (Tag3 ((("t", 517)), 0, (0)), 100000000, 0, -162), 0), 100000000, 0, -161), 0), 100000000, 0, -160), 0, (("stdcompat__float_s.mli", 411, 12222, 12222), ("stdcompat__float_s.mli", 411, 12222, 12247), 0), 0, Tag1 ("Stdcompat__float_s", 36)), 0); (("min_max_num", 548), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -159), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -158), (Tag2 ([(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -156); (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -157)]), 100000000, 0, -155), 0), 100000000, 0, -154), 0), 100000000, 0, -153), 0, (("stdcompat__float_s.mli", 414, 12297, 12297), ("stdcompat__float_s.mli", 414, 12297, 12348), 0), 0, Tag1 ("Stdcompat__float_s", 37)), 0); (("neg", 549), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -152), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -151), 0), 100000000, 0, -150), (("%negfloat", 1, 1, "", [0], 0)), (("stdcompat__float_s.mli", 417, 12424, 12424), ("stdcompat__float_s.mli", 417, 12424, 12467), 0), 0, Tag1 ("Stdcompat__float_s", 38)), 0); (("add", 550), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -149), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -148), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -147), 0), 100000000, 0, -146), 0), 100000000, 0, -145), (("%addfloat", 2, 1, "", [0; 0], 0)), (("stdcompat__float_s.mli", 420, 12535, 12535), ("stdcompat__float_s.mli", 420, 12535, 12587), 0), 0, Tag1 ("Stdcompat__float_s", 39)), 0); (("sub", 551), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -144), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -143), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -142), 0), 100000000, 0, -141), 0), 100000000, 0, -140), (("%subfloat", 2, 1, "", [0; 0], 0)), (("stdcompat__float_s.mli", 423, 12664, 12664), ("stdcompat__float_s.mli", 423, 12664, 12716), 0), 0, Tag1 ("Stdcompat__float_s", 40)), 0); (("mul", 552), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -139), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -138), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -137), 0), 100000000, 0, -136), 0), 100000000, 0, -135), (("%mulfloat", 2, 1, "", [0; 0], 0)), (("stdcompat__float_s.mli", 426, 12793, 12793), ("stdcompat__float_s.mli", 426, 12793, 12845), 0), 0, Tag1 ("Stdcompat__float_s", 41)), 0); (("div", 553), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -134), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -133), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -132), 0), 100000000, 0, -131), 0), 100000000, 0, -130), (("%divfloat", 2, 1, "", [0; 0], 0)), (("stdcompat__float_s.mli", 429, 12922, 12922), ("stdcompat__float_s.mli", 429, 12922, 12974), 0), 0, Tag1 ("Stdcompat__float_s", 42)), 0); (("rem", 554), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -129), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -128), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -127), 0), 100000000, 0, -126), 0), 100000000, 0, -125), (("caml_fmod_float", 2, 0, "fmod", [1; 1], 1)), (("stdcompat__float_s.mli", 433, 13052, 13052), ("stdcompat__float_s.mli", 434, 13130, 13142), 0), [(("unboxed", (("stdcompat__float_s.mli", 433, 13052, 13120), ("stdcompat__float_s.mli", 433, 13052, 13127), 0)), (0), (("stdcompat__float_s.mli", 433, 13052, 13117), ("stdcompat__float_s.mli", 433, 13052, 13129), 0)); (("noalloc", (("stdcompat__float_s.mli", 434, 13130, 13133), ("stdcompat__float_s.mli", 434, 13130, 13140), 0)), (0), (("stdcompat__float_s.mli", 434, 13130, 13130), ("stdcompat__float_s.mli", 434, 13130, 13142), 0))], Tag1 ("Stdcompat__float_s", 43)), 0); (("abs", 555), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -124), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -123), 0), 100000000, 0, -122), (("%absfloat", 1, 1, "", [0], 0)), (("stdcompat__float_s.mli", 450, 13425, 13425), ("stdcompat__float_s.mli", 450, 13425, 13468), 0), 0, Tag1 ("Stdcompat__float_s", 44)), 0); (("infinity", 556), ((Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -121), 0, (("stdcompat__float_s.mli", 453, 13536, 13536), ("stdcompat__float_s.mli", 453, 13536, 13556), 0), 0, Tag1 ("Stdcompat__float_s", 45)), 0); (("neg_infinity", 557), ((Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -120), 0, (("stdcompat__float_s.mli", 456, 13601, 13601), ("stdcompat__float_s.mli", 456, 13601, 13625), 0), 0, Tag1 ("Stdcompat__float_s", 46)), 0); (("nan", 558), ((Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -119), 0, (("stdcompat__float_s.mli", 459, 13674, 13674), ("stdcompat__float_s.mli", 459, 13674, 13689), 0), 0, Tag1 ("Stdcompat__float_s", 47)), 0); (("pi", 559), ((Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -118), 0, (("stdcompat__float_s.mli", 462, 13729, 13729), ("stdcompat__float_s.mli", 462, 13729, 13743), 0), 0, Tag1 ("Stdcompat__float_s", 48)), 0); (("max_float", 560), ((Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -117), 0, (("stdcompat__float_s.mli", 465, 13782, 13782), ("stdcompat__float_s.mli", 465, 13782, 13803), 0), 0, Tag1 ("Stdcompat__float_s", 49)), 0); (("min_float", 561), ((Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -116), 0, (("stdcompat__float_s.mli", 468, 13849, 13849), ("stdcompat__float_s.mli", 468, 13849, 13870), 0), 0, Tag1 ("Stdcompat__float_s", 50)), 0); (("epsilon", 562), ((Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -115), 0, (("stdcompat__float_s.mli", 471, 13916, 13916), ("stdcompat__float_s.mli", 471, 13916, 13935), 0), 0, Tag1 ("Stdcompat__float_s", 51)), 0); (("of_int", 563), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -114), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -113), 0), 100000000, 0, -112), (("%floatofint", 1, 1, "", [0], 0)), (("stdcompat__float_s.mli", 474, 13979, 13979), ("stdcompat__float_s.mli", 474, 13979, 14025), 0), 0, Tag1 ("Stdcompat__float_s", 52)), 0); (("to_int", 564), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -111), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -110), 0), 100000000, 0, -109), (("%intoffloat", 1, 1, "", [0], 0)), (("stdcompat__float_s.mli", 477, 14096, 14096), ("stdcompat__float_s.mli", 477, 14096, 14142), 0), 0, Tag1 ("Stdcompat__float_s", 53)), 0); (("of_string", 565), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -108), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -107), 0), 100000000, 0, -106), (("caml_float_of_string", 1, 1, "", [0], 0)), (("stdcompat__float_s.mli", 481, 14214, 14214), ("stdcompat__float_s.mli", 481, 14214, 14275), 0), 0, Tag1 ("Stdcompat__float_s", 54)), 0); (("of_string_opt", 566), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -105), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -104)], (0)), 100000000, 0, -103), 0), 100000000, 0, -102), 0, (("stdcompat__float_s.mli", 490, 14430, 14430), ("stdcompat__float_s.mli", 490, 14430, 14472), 0), 0, Tag1 ("Stdcompat__float_s", 55)), 0); (("to_string", 567), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -101), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -100), 0), 100000000, 0, -99), 0, (("stdcompat__float_s.mli", 493, 14539, 14539), ("stdcompat__float_s.mli", 493, 14539, 14570), 0), 0, Tag1 ("Stdcompat__float_s", 56)), 0); (("classify_float", 568), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -98), (Tag3 ((("fpclass", 516)), 0, (0)), 100000000, 0, -97), 0), 100000000, 0, -96), (("caml_classify_float", 1, 0, "caml_classify_float_unboxed", [1], 0)), (("stdcompat__float_s.mli", 497, 14627, 14627), ("stdcompat__float_s.mli", 499, 14711, 14756), 0), [(("noalloc", (("stdcompat__float_s.mli", 499, 14711, 14747), ("stdcompat__float_s.mli", 499, 14711, 14754), 0)), (0), (("stdcompat__float_s.mli", 499, 14711, 14744), ("stdcompat__float_s.mli", 499, 14711, 14756), 0))], Tag1 ("Stdcompat__float_s", 57)), 0); (("pow", 569), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -95), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -94), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -93), 0), 100000000, 0, -92), 0), 100000000, 0, -91), (("caml_power_float", 2, 0, "pow", [1; 1], 1)), (("stdcompat__float_s.mli", 517, 15069, 15069), ("stdcompat__float_s.mli", 518, 15147, 15159), 0), [(("unboxed", (("stdcompat__float_s.mli", 517, 15069, 15137), ("stdcompat__float_s.mli", 517, 15069, 15144), 0)), (0), (("stdcompat__float_s.mli", 517, 15069, 15134), ("stdcompat__float_s.mli", 517, 15069, 15146), 0)); (("noalloc", (("stdcompat__float_s.mli", 518, 15147, 15150), ("stdcompat__float_s.mli", 518, 15147, 15157), 0)), (0), (("stdcompat__float_s.mli", 518, 15147, 15147), ("stdcompat__float_s.mli", 518, 15147, 15159), 0))], Tag1 ("Stdcompat__float_s", 58)), 0); (("sqrt", 570), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -90), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -89), 0), 100000000, 0, -88), (("caml_sqrt_float", 1, 0, "sqrt", [1], 1)), (("stdcompat__float_s.mli", 535, 15443, 15443), ("stdcompat__float_s.mli", 536, 15513, 15525), 0), [(("unboxed", (("stdcompat__float_s.mli", 535, 15443, 15503), ("stdcompat__float_s.mli", 535, 15443, 15510), 0)), (0), (("stdcompat__float_s.mli", 535, 15443, 15500), ("stdcompat__float_s.mli", 535, 15443, 15512), 0)); (("noalloc", (("stdcompat__float_s.mli", 536, 15513, 15516), ("stdcompat__float_s.mli", 536, 15513, 15523), 0)), (0), (("stdcompat__float_s.mli", 536, 15513, 15513), ("stdcompat__float_s.mli", 536, 15513, 15525), 0))], Tag1 ("Stdcompat__float_s", 59)), 0); (("exp", 571), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -87), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -86), 0), 100000000, 0, -85), (("caml_exp_float", 1, 0, "exp", [1], 1)), (("stdcompat__float_s.mli", 553, 15785, 15785), ("stdcompat__float_s.mli", 554, 15862, 15931), 0), [(("unboxed", (("stdcompat__float_s.mli", 553, 15785, 15842), ("stdcompat__float_s.mli", 553, 15785, 15849), 0)), (0), (("stdcompat__float_s.mli", 553, 15785, 15839), ("stdcompat__float_s.mli", 553, 15785, 15851), 0)); (("noalloc", (("stdcompat__float_s.mli", 553, 15785, 15854), ("stdcompat__float_s.mli", 553, 15785, 15861), 0)), (0), (("stdcompat__float_s.mli", 553, 15785, 15851), ("stdcompat__float_s.mli", 554, 15862, 15931), 0))], Tag1 ("Stdcompat__float_s", 60)), 0); (("log", 572), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -84), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -83), 0), 100000000, 0, -82), (("caml_log_float", 1, 0, "log", [1], 1)), (("stdcompat__float_s.mli", 571, 16182, 16182), ("stdcompat__float_s.mli", 572, 16259, 16328), 0), [(("unboxed", (("stdcompat__float_s.mli", 571, 16182, 16239), ("stdcompat__float_s.mli", 571, 16182, 16246), 0)), (0), (("stdcompat__float_s.mli", 571, 16182, 16236), ("stdcompat__float_s.mli", 571, 16182, 16248), 0)); (("noalloc", (("stdcompat__float_s.mli", 571, 16182, 16251), ("stdcompat__float_s.mli", 571, 16182, 16258), 0)), (0), (("stdcompat__float_s.mli", 571, 16182, 16248), ("stdcompat__float_s.mli", 572, 16259, 16328), 0))], Tag1 ("Stdcompat__float_s", 61)), 0); (("log10", 573), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -81), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -80), 0), 100000000, 0, -79), (("caml_log10_float", 1, 0, "log10", [1], 1)), (("stdcompat__float_s.mli", 589, 16579, 16579), ("stdcompat__float_s.mli", 590, 16652, 16664), 0), [(("unboxed", (("stdcompat__float_s.mli", 589, 16579, 16642), ("stdcompat__float_s.mli", 589, 16579, 16649), 0)), (0), (("stdcompat__float_s.mli", 589, 16579, 16639), ("stdcompat__float_s.mli", 589, 16579, 16651), 0)); (("noalloc", (("stdcompat__float_s.mli", 590, 16652, 16655), ("stdcompat__float_s.mli", 590, 16652, 16662), 0)), (0), (("stdcompat__float_s.mli", 590, 16652, 16652), ("stdcompat__float_s.mli", 590, 16652, 16664), 0))], Tag1 ("Stdcompat__float_s", 62)), 0); (("expm1", 574), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -78), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -77), 0), 100000000, 0, -76), (("caml_expm1_float", 1, 0, "caml_expm1", [1], 1)), (("stdcompat__float_s.mli", 607, 16933, 16933), ("stdcompat__float_s.mli", 608, 17011, 17023), 0), [(("unboxed", (("stdcompat__float_s.mli", 607, 16933, 17001), ("stdcompat__float_s.mli", 607, 16933, 17008), 0)), (0), (("stdcompat__float_s.mli", 607, 16933, 16998), ("stdcompat__float_s.mli", 607, 16933, 17010), 0)); (("noalloc", (("stdcompat__float_s.mli", 608, 17011, 17014), ("stdcompat__float_s.mli", 608, 17011, 17021), 0)), (0), (("stdcompat__float_s.mli", 608, 17011, 17011), ("stdcompat__float_s.mli", 608, 17011, 17023), 0))], Tag1 ("Stdcompat__float_s", 63)), 0); (("log1p", 575), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -75), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -74), 0), 100000000, 0, -73), (("caml_log1p_float", 1, 0, "caml_log1p", [1], 1)), (("stdcompat__float_s.mli", 625, 17265, 17265), ("stdcompat__float_s.mli", 626, 17343, 17355), 0), [(("unboxed", (("stdcompat__float_s.mli", 625, 17265, 17333), ("stdcompat__float_s.mli", 625, 17265, 17340), 0)), (0), (("stdcompat__float_s.mli", 625, 17265, 17330), ("stdcompat__float_s.mli", 625, 17265, 17342), 0)); (("noalloc", (("stdcompat__float_s.mli", 626, 17343, 17346), ("stdcompat__float_s.mli", 626, 17343, 17353), 0)), (0), (("stdcompat__float_s.mli", 626, 17343, 17343), ("stdcompat__float_s.mli", 626, 17343, 17355), 0))], Tag1 ("Stdcompat__float_s", 64)), 0); (("cos", 576), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -72), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -71), 0), 100000000, 0, -70), (("caml_cos_float", 1, 0, "cos", [1], 1)), (("stdcompat__float_s.mli", 643, 17597, 17597), ("stdcompat__float_s.mli", 644, 17674, 17743), 0), [(("unboxed", (("stdcompat__float_s.mli", 643, 17597, 17654), ("stdcompat__float_s.mli", 643, 17597, 17661), 0)), (0), (("stdcompat__float_s.mli", 643, 17597, 17651), ("stdcompat__float_s.mli", 643, 17597, 17663), 0)); (("noalloc", (("stdcompat__float_s.mli", 643, 17597, 17666), ("stdcompat__float_s.mli", 643, 17597, 17673), 0)), (0), (("stdcompat__float_s.mli", 643, 17597, 17663), ("stdcompat__float_s.mli", 644, 17674, 17743), 0))], Tag1 ("Stdcompat__float_s", 65)), 0); (("sin", 577), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -69), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -68), 0), 100000000, 0, -67), (("caml_sin_float", 1, 0, "sin", [1], 1)), (("stdcompat__float_s.mli", 661, 17994, 17994), ("stdcompat__float_s.mli", 662, 18071, 18140), 0), [(("unboxed", (("stdcompat__float_s.mli", 661, 17994, 18051), ("stdcompat__float_s.mli", 661, 17994, 18058), 0)), (0), (("stdcompat__float_s.mli", 661, 17994, 18048), ("stdcompat__float_s.mli", 661, 17994, 18060), 0)); (("noalloc", (("stdcompat__float_s.mli", 661, 17994, 18063), ("stdcompat__float_s.mli", 661, 17994, 18070), 0)), (0), (("stdcompat__float_s.mli", 661, 17994, 18060), ("stdcompat__float_s.mli", 662, 18071, 18140), 0))], Tag1 ("Stdcompat__float_s", 66)), 0); (("tan", 578), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -66), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -65), 0), 100000000, 0, -64), (("caml_tan_float", 1, 0, "tan", [1], 1)), (("stdcompat__float_s.mli", 679, 18391, 18391), ("stdcompat__float_s.mli", 680, 18468, 18537), 0), [(("unboxed", (("stdcompat__float_s.mli", 679, 18391, 18448), ("stdcompat__float_s.mli", 679, 18391, 18455), 0)), (0), (("stdcompat__float_s.mli", 679, 18391, 18445), ("stdcompat__float_s.mli", 679, 18391, 18457), 0)); (("noalloc", (("stdcompat__float_s.mli", 679, 18391, 18460), ("stdcompat__float_s.mli", 679, 18391, 18467), 0)), (0), (("stdcompat__float_s.mli", 679, 18391, 18457), ("stdcompat__float_s.mli", 680, 18468, 18537), 0))], Tag1 ("Stdcompat__float_s", 67)), 0); (("acos", 579), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -63), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -62), 0), 100000000, 0, -61), (("caml_acos_float", 1, 0, "acos", [1], 1)), (("stdcompat__float_s.mli", 697, 18788, 18788), ("stdcompat__float_s.mli", 698, 18858, 18870), 0), [(("unboxed", (("stdcompat__float_s.mli", 697, 18788, 18848), ("stdcompat__float_s.mli", 697, 18788, 18855), 0)), (0), (("stdcompat__float_s.mli", 697, 18788, 18845), ("stdcompat__float_s.mli", 697, 18788, 18857), 0)); (("noalloc", (("stdcompat__float_s.mli", 698, 18858, 18861), ("stdcompat__float_s.mli", 698, 18858, 18868), 0)), (0), (("stdcompat__float_s.mli", 698, 18858, 18858), ("stdcompat__float_s.mli", 698, 18858, 18870), 0))], Tag1 ("Stdcompat__float_s", 68)), 0); (("asin", 580), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -60), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -59), 0), 100000000, 0, -58), (("caml_asin_float", 1, 0, "asin", [1], 1)), (("stdcompat__float_s.mli", 715, 19130, 19130), ("stdcompat__float_s.mli", 716, 19200, 19212), 0), [(("unboxed", (("stdcompat__float_s.mli", 715, 19130, 19190), ("stdcompat__float_s.mli", 715, 19130, 19197), 0)), (0), (("stdcompat__float_s.mli", 715, 19130, 19187), ("stdcompat__float_s.mli", 715, 19130, 19199), 0)); (("noalloc", (("stdcompat__float_s.mli", 716, 19200, 19203), ("stdcompat__float_s.mli", 716, 19200, 19210), 0)), (0), (("stdcompat__float_s.mli", 716, 19200, 19200), ("stdcompat__float_s.mli", 716, 19200, 19212), 0))], Tag1 ("Stdcompat__float_s", 69)), 0); (("atan", 581), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -57), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -56), 0), 100000000, 0, -55), (("caml_atan_float", 1, 0, "atan", [1], 1)), (("stdcompat__float_s.mli", 733, 19472, 19472), ("stdcompat__float_s.mli", 734, 19542, 19554), 0), [(("unboxed", (("stdcompat__float_s.mli", 733, 19472, 19532), ("stdcompat__float_s.mli", 733, 19472, 19539), 0)), (0), (("stdcompat__float_s.mli", 733, 19472, 19529), ("stdcompat__float_s.mli", 733, 19472, 19541), 0)); (("noalloc", (("stdcompat__float_s.mli", 734, 19542, 19545), ("stdcompat__float_s.mli", 734, 19542, 19552), 0)), (0), (("stdcompat__float_s.mli", 734, 19542, 19542), ("stdcompat__float_s.mli", 734, 19542, 19554), 0))], Tag1 ("Stdcompat__float_s", 70)), 0); (("atan2", 582), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -54), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -53), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -52), 0), 100000000, 0, -51), 0), 100000000, 0, -50), (("caml_atan2_float", 2, 0, "atan2", [1; 1], 1)), (("stdcompat__float_s.mli", 751, 19814, 19814), ("stdcompat__float_s.mli", 752, 19884, 19908), 0), [(("unboxed", (("stdcompat__float_s.mli", 752, 19884, 19887), ("stdcompat__float_s.mli", 752, 19884, 19894), 0)), (0), (("stdcompat__float_s.mli", 752, 19884, 19884), ("stdcompat__float_s.mli", 752, 19884, 19896), 0)); (("noalloc", (("stdcompat__float_s.mli", 752, 19884, 19899), ("stdcompat__float_s.mli", 752, 19884, 19906), 0)), (0), (("stdcompat__float_s.mli", 752, 19884, 19896), ("stdcompat__float_s.mli", 752, 19884, 19908), 0))], Tag1 ("Stdcompat__float_s", 71)), 0); (("hypot", 583), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -49), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -48), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -47), 0), 100000000, 0, -46), 0), 100000000, 0, -45), (("caml_hypot_float", 2, 0, "caml_hypot", [1; 1], 1)), (("stdcompat__float_s.mli", 769, 20204, 20204), ("stdcompat__float_s.mli", 770, 20279, 20303), 0), [(("unboxed", (("stdcompat__float_s.mli", 770, 20279, 20282), ("stdcompat__float_s.mli", 770, 20279, 20289), 0)), (0), (("stdcompat__float_s.mli", 770, 20279, 20279), ("stdcompat__float_s.mli", 770, 20279, 20291), 0)); (("noalloc", (("stdcompat__float_s.mli", 770, 20279, 20294), ("stdcompat__float_s.mli", 770, 20279, 20301), 0)), (0), (("stdcompat__float_s.mli", 770, 20279, 20291), ("stdcompat__float_s.mli", 770, 20279, 20303), 0))], Tag1 ("Stdcompat__float_s", 72)), 0); (("cosh", 584), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -44), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -43), 0), 100000000, 0, -42), (("caml_cosh_float", 1, 0, "cosh", [1], 1)), (("stdcompat__float_s.mli", 789, 20580, 20580), ("stdcompat__float_s.mli", 790, 20650, 20662), 0), [(("unboxed", (("stdcompat__float_s.mli", 789, 20580, 20640), ("stdcompat__float_s.mli", 789, 20580, 20647), 0)), (0), (("stdcompat__float_s.mli", 789, 20580, 20637), ("stdcompat__float_s.mli", 789, 20580, 20649), 0)); (("noalloc", (("stdcompat__float_s.mli", 790, 20650, 20653), ("stdcompat__float_s.mli", 790, 20650, 20660), 0)), (0), (("stdcompat__float_s.mli", 790, 20650, 20650), ("stdcompat__float_s.mli", 790, 20650, 20662), 0))], Tag1 ("Stdcompat__float_s", 73)), 0); (("sinh", 585), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -41), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -40), 0), 100000000, 0, -39), (("caml_sinh_float", 1, 0, "sinh", [1], 1)), (("stdcompat__float_s.mli", 807, 20922, 20922), ("stdcompat__float_s.mli", 808, 20992, 21004), 0), [(("unboxed", (("stdcompat__float_s.mli", 807, 20922, 20982), ("stdcompat__float_s.mli", 807, 20922, 20989), 0)), (0), (("stdcompat__float_s.mli", 807, 20922, 20979), ("stdcompat__float_s.mli", 807, 20922, 20991), 0)); (("noalloc", (("stdcompat__float_s.mli", 808, 20992, 20995), ("stdcompat__float_s.mli", 808, 20992, 21002), 0)), (0), (("stdcompat__float_s.mli", 808, 20992, 20992), ("stdcompat__float_s.mli", 808, 20992, 21004), 0))], Tag1 ("Stdcompat__float_s", 74)), 0); (("tanh", 586), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -38), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -37), 0), 100000000, 0, -36), (("caml_tanh_float", 1, 0, "tanh", [1], 1)), (("stdcompat__float_s.mli", 825, 21264, 21264), ("stdcompat__float_s.mli", 826, 21334, 21346), 0), [(("unboxed", (("stdcompat__float_s.mli", 825, 21264, 21324), ("stdcompat__float_s.mli", 825, 21264, 21331), 0)), (0), (("stdcompat__float_s.mli", 825, 21264, 21321), ("stdcompat__float_s.mli", 825, 21264, 21333), 0)); (("noalloc", (("stdcompat__float_s.mli", 826, 21334, 21337), ("stdcompat__float_s.mli", 826, 21334, 21344), 0)), (0), (("stdcompat__float_s.mli", 826, 21334, 21334), ("stdcompat__float_s.mli", 826, 21334, 21346), 0))], Tag1 ("Stdcompat__float_s", 75)), 0); (("ceil", 587), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -35), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -34), 0), 100000000, 0, -33), (("caml_ceil_float", 1, 0, "ceil", [1], 1)), (("stdcompat__float_s.mli", 843, 21606, 21606), ("stdcompat__float_s.mli", 844, 21676, 21688), 0), [(("unboxed", (("stdcompat__float_s.mli", 843, 21606, 21666), ("stdcompat__float_s.mli", 843, 21606, 21673), 0)), (0), (("stdcompat__float_s.mli", 843, 21606, 21663), ("stdcompat__float_s.mli", 843, 21606, 21675), 0)); (("noalloc", (("stdcompat__float_s.mli", 844, 21676, 21679), ("stdcompat__float_s.mli", 844, 21676, 21686), 0)), (0), (("stdcompat__float_s.mli", 844, 21676, 21676), ("stdcompat__float_s.mli", 844, 21676, 21688), 0))], Tag1 ("Stdcompat__float_s", 76)), 0); (("floor", 588), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -32), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -31), 0), 100000000, 0, -30), (("caml_floor_float", 1, 0, "floor", [1], 1)), (("stdcompat__float_s.mli", 861, 21948, 21948), ("stdcompat__float_s.mli", 862, 22021, 22033), 0), [(("unboxed", (("stdcompat__float_s.mli", 861, 21948, 22011), ("stdcompat__float_s.mli", 861, 21948, 22018), 0)), (0), (("stdcompat__float_s.mli", 861, 21948, 22008), ("stdcompat__float_s.mli", 861, 21948, 22020), 0)); (("noalloc", (("stdcompat__float_s.mli", 862, 22021, 22024), ("stdcompat__float_s.mli", 862, 22021, 22031), 0)), (0), (("stdcompat__float_s.mli", 862, 22021, 22021), ("stdcompat__float_s.mli", 862, 22021, 22033), 0))], Tag1 ("Stdcompat__float_s", 77)), 0); (("frexp", 589), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -29), (Tag2 ([(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -27); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -28)]), 100000000, 0, -26), 0), 100000000, 0, -25), (("caml_frexp_float", 1, 1, "", [0], 0)), (("stdcompat__float_s.mli", 879, 22302, 22302), ("stdcompat__float_s.mli", 879, 22302, 22362), 0), 0, Tag1 ("Stdcompat__float_s", 78)), 0); (("ldexp", 590), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -24), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -23), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), (("caml_ldexp_float", 2, 0, "caml_ldexp_float_unboxed", [1; 2], 1)), (("stdcompat__float_s.mli", 889, 22516, 22516), ("stdcompat__float_s.mli", 891, 22605, 22666), 0), [(("noalloc", (("stdcompat__float_s.mli", 891, 22605, 22657), ("stdcompat__float_s.mli", 891, 22605, 22664), 0)), (0), (("stdcompat__float_s.mli", 891, 22605, 22654), ("stdcompat__float_s.mli", 891, 22605, 22666), 0))], Tag1 ("Stdcompat__float_s", 79)), 0); (("modf", 591), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -19), (Tag2 ([(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -17); (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -18)]), 100000000, 0, -16), 0), 100000000, 0, -15), (("caml_modf_float", 1, 1, "", [0], 0)), (("stdcompat__float_s.mli", 909, 22965, 22965), ("stdcompat__float_s.mli", 909, 22965, 23025), 0), 0, Tag1 ("Stdcompat__float_s", 80)), 0); (("compare", 592), ((Tag1 (0, (Tag3 ((("t", 517)), 0, (0)), 100000000, 0, -14), (Tag1 (0, (Tag3 ((("t", 517)), 0, (0)), 100000000, 0, -13), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("stdcompat__float_s.mli", 918, 23178, 23178), ("stdcompat__float_s.mli", 918, 23178, 23205), 0), 0, Tag1 ("Stdcompat__float_s", 81)), 0); (("equal", 593), ((Tag1 (0, (Tag3 ((("t", 517)), 0, (0)), 100000000, 0, -9), (Tag1 (0, (Tag3 ((("t", 517)), 0, (0)), 100000000, 0, -8), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("stdcompat__float_s.mli", 921, 23257, 23257), ("stdcompat__float_s.mli", 921, 23257, 23283), 0), 0, Tag1 ("Stdcompat__float_s", 82)), 0); (("hash", 594), ((Tag1 (0, (Tag3 ((("t", 517)), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("stdcompat__float_s.mli", 924, 23334, 23334), ("stdcompat__float_s.mli", 924, 23334, 23353), 0), 0, Tag1 ("Stdcompat__float_s", 83)), 0)])), 0, (("stdcompat__float_s.mli", 1, 0, 0), ("stdcompat__float_s.mli", 927, 23397, 23400), 0), Tag1 ("Stdcompat__float_s", 84)), 0)], "Stdcompat__float_s", [("Stdcompat__float_s", ("\201q\241\226\030\190\198\223\028UEa}\211\173C")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Float", ("\233'\145d\227\138\212\186=\190\184\244\206L5'")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

  end

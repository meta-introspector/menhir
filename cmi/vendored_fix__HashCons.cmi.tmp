type 'data cell = private { id : int; data : 'data; }
val id : 'data cell -> int
val data : 'data cell -> 'data
val equal : 'data cell -> 'data cell -> bool
val compare : 'data cell -> 'data cell -> int
val hash : 'data cell -> int
module type SERVICE = sig type data val make : data -> data cell end
module Make :
  functor (M : Vendored_fix__.Sigs.MEMOIZER) ->
    sig type data = M.key val make : data -> data cell end
module ForHashedType :
  functor (T : Vendored_fix__.Sigs.HashedType) ->
    ("DEBUG:rule", [Tag1 (("cell", 441), ([((("data")), 100000000, 0, -26)], 1, [[(("id", 305), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -25), (("fix/src/HashCons.mli", 28, 1505, 1509), ("fix/src/HashCons.mli", 28, 1505, 1517), 0), 0, Tag1 ("Vendored_fix__HashCons", 1)); (("data", 306), 0, ((("data")), 100000000, 0, -26), (("fix/src/HashCons.mli", 28, 1505, 1518), ("fix/src/HashCons.mli", 28, 1505, 1529), 0), 0, Tag1 ("Vendored_fix__HashCons", 2))]], 0, 0, [31], [0], 0, 0, (("fix/src/HashCons.mli", 27, 1479, 1479), ("fix/src/HashCons.mli", 28, 1505, 1531), 0), 0, 0, 0, Tag1 ("Vendored_fix__HashCons", 0)), 1, 0); (("id", 442), ((Tag1 (0, (Tag3 ((("cell", 441)), [((("data")), 100000000, 0, -24)], (0)), 100000000, 0, -23), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("fix/src/HashCons.mli", 32, 1551, 1551), ("fix/src/HashCons.mli", 32, 1551, 1578), 0), 0, Tag1 ("Vendored_fix__HashCons", 3)), 0); (("data", 443), ((Tag1 (0, (Tag3 ((("cell", 441)), [((("data")), 100000000, 0, -19)], (0)), 100000000, 0, -20), ((("data")), 100000000, 0, -19), 0), 100000000, 0, -18), 0, (("fix/src/HashCons.mli", 33, 1579, 1579), ("fix/src/HashCons.mli", 33, 1579, 1608), 0), 0, Tag1 ("Vendored_fix__HashCons", 4)), 0); (("equal", 444), ((Tag1 (0, (Tag3 ((("cell", 441)), [((("data")), 100000000, 0, -16)], (0)), 100000000, 0, -17), (Tag1 (0, (Tag3 ((("cell", 441)), [((("data")), 100000000, 0, -16)], (0)), 100000000, 0, -15), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("fix/src/HashCons.mli", 43, 1960, 1960), ("fix/src/HashCons.mli", 43, 1960, 2003), 0), 0, Tag1 ("Vendored_fix__HashCons", 5)), 0); (("compare", 445), ((Tag1 (0, (Tag3 ((("cell", 441)), [((("data")), 100000000, 0, -10)], (0)), 100000000, 0, -11), (Tag1 (0, (Tag3 ((("cell", 441)), [((("data")), 100000000, 0, -10)], (0)), 100000000, 0, -9), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -8), 0), 100000000, 0, -7), 0), 100000000, 0, -6), 0, (("fix/src/HashCons.mli", 44, 2004, 2004), ("fix/src/HashCons.mli", 44, 2004, 2048), 0), 0, Tag1 ("Vendored_fix__HashCons", 6)), 0); (("hash", 446), ((Tag1 (0, (Tag3 ((("cell", 441)), [((("data")), 100000000, 0, -5)], (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("fix/src/HashCons.mli", 45, 2049, 2049), ("fix/src/HashCons.mli", 45, 2049, 2077), 0), 0, Tag1 ("Vendored_fix__HashCons", 7)), 0); Tag4 (("SERVICE", 447), ((Tag1 ([Tag1 (("data", 452), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("fix/src/HashCons.mli", 52, 2289, 2291), ("fix/src/HashCons.mli", 52, 2289, 2300), 0), 0, 0, 0, Tag1 ("Vendored_fix__HashCons", 8)), 1, 0); (("make", 453), ((Tag1 (0, (Tag3 ((("data", 452)), 0, (0)), 100000000, 0, -30), (Tag3 ((("cell", 441)), [(Tag3 ((("data", 452)), 0, (0)), 100000000, 0, -29)], (0)), 100000000, 0, -28), 0), 100000000, 0, -27), 0, (("fix/src/HashCons.mli", 53, 2301, 2303), ("fix/src/HashCons.mli", 53, 2301, 2330), 0), 0, Tag1 ("Vendored_fix__HashCons", 9)), 0)])), 0, (("fix/src/HashCons.mli", 51, 2263, 2263), ("fix/src/HashCons.mli", 54, 2331, 2334), 0), Tag1 ("Vendored_fix__HashCons", 10)), 0); Tag3 (("Make", 448), 0, (Tag2 (((("M", 451)), (Tag1 (Tag1 ((Tag2 ("Vendored_fix__")), "Sigs"), "MEMOIZER"))), Tag1 ([Tag1 (("data", 454), (0, 0, 0, 1, ((Tag3 (Tag1 ((("M", 451)), "key"), 0, (0)), 100000000, 0, -35)), 0, 0, 0, 0, (("fix/src/HashCons.mli", 61, 2489, 2509), ("fix/src/HashCons.mli", 61, 2489, 2526), 0), 0, 0, 0, Tag1 ("Vendored_fix__HashCons", 12)), 1, 0); (("make", 455), ((Tag1 (0, (Tag3 ((("data", 454)), 0, (0)), 100000000, 0, -34), (Tag3 ((("cell", 441)), [(Tag3 ((("data", 454)), 0, (0)), 100000000, 0, -33)], (0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("fix/src/HashCons.mli", 53, 2301, 2303), ("fix/src/HashCons.mli", 53, 2301, 2330), 0), 0, Tag1 ("Vendored_fix__HashCons", 9)), 0)])), 0, (("fix/src/HashCons.mli", 59, 2460, 2460), ("fix/src/HashCons.mli", 61, 2489, 2526), 0), Tag1 ("Vendored_fix__HashCons", 13)), 0, 0); Tag3 (("ForHashedType", 449), 0, (Tag2 (((("T", 450)), (Tag1 (Tag1 ((Tag2 ("Vendored_fix__")), "Sigs"), "HashedType"))), Tag1 ([Tag1 (("data", 456), (0, 0, 0, 1, ((Tag3 (Tag1 ((("T", 450)), "t"), 0, (0)), 100000000, 0, -40)), 0, 0, 0, 0, (("fix/src/HashCons.mli", 69, 2737, 2757), ("fix/src/HashCons.mli", 69, 2737, 2772), 0), 0, 0, 0, Tag1 ("Vendored_fix__HashCons", 15)), 1, 0); (("make", 457), ((Tag1 (0, (Tag3 ((("data", 456)), 0, (0)), 100000000, 0, -39), (Tag3 ((("cell", 441)), [(Tag3 ((("data", 456)), 0, (0)), 100000000, 0, -38)], (0)), 100000000, 0, -37), 0), 100000000, 0, -36), 0, (("fix/src/HashCons.mli", 53, 2301, 2303), ("fix/src/HashCons.mli", 53, 2301, 2330), 0), 0, Tag1 ("Vendored_fix__HashCons", 9)), 0)])), 0, (("fix/src/HashCons.mli", 67, 2697, 2697), ("fix/src/HashCons.mli", 69, 2737, 2772), 0), Tag1 ("Vendored_fix__HashCons", 16)), 0, 0)], "Vendored_fix__HashCons", [("Vendored_fix__HashCons", ("\007[3.\223\143\232#N\019\189\132\t\218\204\154")); ("Vendored_fix__Sigs", ("a{\193\210\184\138\163\252\132\135.\2156meu")); ("Vendored_fix__", ("\r\196g\002\180\221\139\252\200\240t\184\171.K\020")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
sig type data = T.t val make : data -> data cell end

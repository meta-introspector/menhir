type tag = Segment | Whitespace
val __ocaml_lex_tables : Lexing.lex_tables
val idle :
  Lexing.position ->
  (tag * Lexing.position * Lexing.position) list ->
  Lexing.lexbuf -> (tag * Lexing.position * Lexing.position) list
val __ocaml_lex_idle_rec :
  Lexing.position ->
  (tag * Lexing.position * Lexing.position) list ->
  Lexing.lexbuf -> int -> (tag * Lexing.position * Lexing.position) list
val busy :
  (tag * Lexing.position * Lexing.position) list ->
  Lexing.position ->
  bool -> Lexing.lexbuf -> (tag * Lexing.position * Lexing.position) list
val __ocaml_lex_busy_rec :
  (tag * Lexing.position * Lexing.position) list ->
  Lexing.position ->
  bool ->
  Lexing.lexbuf -> int -> (tag * Lexing.position * Lexing.position) list
("DEBUG:rule", [Tag1 (("tag", 639), (0, 0, Tag1 ([(("Segment", 397), (0), 0, (("src/segment.mll", 28, 60, 64), ("src/segment.mll", 28, 60, 73), 0), 0, Tag1 ("Dune__exe__Segment", 1)); (("Whitespace", 398), (0), 0, (("src/segment.mll", 29, 74, 78), ("src/segment.mll", 29, 74, 90), 0), 0, Tag1 ("Dune__exe__Segment", 2))], 0), 1, 0, 0, 0, 0, 0, (("src/segment.mll", 27, 47, 49), ("src/segment.mll", 29, 74, 90), 0), 0, 1, 0, Tag1 ("Dune__exe__Segment", 0)), 1, 0); (("__ocaml_lex_tables", 640), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lex_tables"), 0, (0)), 100000000, 0, -35), 0, (("src/segment.ml", 12, 130, 134), ("src/segment.ml", 12, 130, 152), 0), 0, Tag1 ("Dune__exe__Segment", 3)), 0); (("idle", 641), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -17), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("tag", 639)), 0, (0)), 100000000, 0, -16); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -17); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -17)]), 100000000, 0, -15)], (0)), 100000000, 0, -31), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -19), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("tag", 639)), 0, (0)), 100000000, 0, -16); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -17); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -17)]), 100000000, 0, -15)], (0)), 100000000, 0, -14), 0), 100000000, 0, -34), 0), 100000000, 0, -33), 0), 100000000, 0, -32), 0, (("src/segment.ml", 109, 5586, 5594), ("src/segment.ml", 109, 5586, 5598), 0), 0, Tag1 ("Dune__exe__Segment", 4)), 0); (("__ocaml_lex_idle_rec", 642), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -17), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("tag", 639)), 0, (0)), 100000000, 0, -16); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -17); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -17)]), 100000000, 0, -15)], (0)), 100000000, 0, -31), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -19), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -30), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("tag", 639)), 0, (0)), 100000000, 0, -16); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -17); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -17)]), 100000000, 0, -15)], (0)), 100000000, 0, -14), 0), 100000000, 0, -29), 0), 100000000, 0, -28), 0), 100000000, 0, -27), 0), 100000000, 0, -26), 0, (("src/segment.ml", 111, 5675, 5679), ("src/segment.ml", 111, 5675, 5699), 0), 0, Tag1 ("Dune__exe__Segment", 5)), 0); (("busy", 643), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("tag", 639)), 0, (0)), 100000000, 0, -16); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -17); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -17)]), 100000000, 0, -15)], (0)), 100000000, 0, -21), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -17), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -20), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -19), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("tag", 639)), 0, (0)), 100000000, 0, -16); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -17); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -17)]), 100000000, 0, -15)], (0)), 100000000, 0, -14), 0), 100000000, 0, -25), 0), 100000000, 0, -24), 0), 100000000, 0, -23), 0), 100000000, 0, -22), 0, (("src/segment.ml", 148, 6749, 6753), ("src/segment.ml", 148, 6749, 6757), 0), 0, Tag1 ("Dune__exe__Segment", 6)), 0); (("__ocaml_lex_busy_rec", 644), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("tag", 639)), 0, (0)), 100000000, 0, -16); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -17); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -17)]), 100000000, 0, -15)], (0)), 100000000, 0, -21), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -17), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -20), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -19), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -18), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("tag", 639)), 0, (0)), 100000000, 0, -16); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -17); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -17)]), 100000000, 0, -15)], (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0), 100000000, 0, -11), 0), 100000000, 0, -10), 0), 100000000, 0, -9), 0, (("src/segment.ml", 150, 6873, 6877), ("src/segment.ml", 150, 6873, 6897), 0), 0, Tag1 ("Dune__exe__Segment", 7)), 0); (("segment", 645), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -8), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("tag", 639)), 0, (0)), 100000000, 0, -5); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -7)]), 100000000, 0, -4)], (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/segment.mll", 102, 8295, 8301), ("src/segment.mll", 102, 8295, 8308), 0), 0, Tag1 ("Dune__exe__Segment", 40)), 0)], "Dune__exe__Segment", [("Dune__exe__Segment", ("*\152\209\204\175l\142uBh\025\222\158K|\129")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("MenhirSdk", ("F\232\012\196l\143\145[\255\2193U\197\027\176\139")); ("Dune__exe__IO", ("2\175\211\003\2228+0\158[\176\224%\188\0279")); ("Dune__exe", ("\137\000\197\175$\007]\218\141\248\172\212\146c\153\212")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
val segment : string -> (tag * string * Lexing.lexbuf) list

module Common = Extraction_plugin__Common
module Extract_env = Extraction_plugin__Extract_env
module Extraction = Extraction_plugin__Extraction
module G_extraction = Extraction_plugin__G_extraction
module Haskell = Extraction_plugin__Haskell
module Json = Extraction_plugin__Json
module Miniml = Extraction_plugin__Miniml
module Mlutil = Extraction_plugin__Mlutil
module Modutil = Extraction_plugin__Modutil
module Ocaml = Extraction_plugin__Ocaml
module Scheme = Extraction_plugin__Scheme
("DEBUG:rule", [Tag3 (("Common", 16), 1, (Tag3 ((Tag2 ("Extraction_plugin__Common"))), 0, (("plugins/extraction/extraction_plugin.ml-gen", 4, 68, 68), ("plugins/extraction/extraction_plugin.ml-gen", 4, 68, 109), 0), Tag1 ("Extraction_plugin", 0)), 0, 0); Tag3 (("Extract_env", 17), 1, (Tag3 ((Tag2 ("Extraction_plugin__Extract_env"))), 0, (("plugins/extraction/extraction_plugin.ml-gen", 7, 159, 159), ("plugins/extraction/extraction_plugin.ml-gen", 7, 159, 210), 0), Tag1 ("Extraction_plugin", 1)), 0, 0); Tag3 (("Extraction", 18), 1, (Tag3 ((Tag2 ("Extraction_plugin__Extraction"))), 0, (("plugins/extraction/extraction_plugin.ml-gen", 10, 259, 259), ("plugins/extraction/extraction_plugin.ml-gen", 10, 259, 308), 0), Tag1 ("Extraction_plugin", 2)), 0, 0); Tag3 (("G_extraction", 19), 1, (Tag3 ((Tag2 ("Extraction_plugin__G_extraction"))), 0, (("plugins/extraction/extraction_plugin.ml-gen", 13, 359, 359), ("plugins/extraction/extraction_plugin.ml-gen", 13, 359, 412), 0), Tag1 ("Extraction_plugin", 3)), 0, 0); Tag3 (("Haskell", 20), 1, (Tag3 ((Tag2 ("Extraction_plugin__Haskell"))), 0, (("plugins/extraction/extraction_plugin.ml-gen", 16, 458, 458), ("plugins/extraction/extraction_plugin.ml-gen", 16, 458, 501), 0), Tag1 ("Extraction_plugin", 4)), 0, 0); Tag3 (("Json", 21), 1, (Tag3 ((Tag2 ("Extraction_plugin__Json"))), 0, (("plugins/extraction/extraction_plugin.ml-gen", 19, 544, 544), ("plugins/extraction/extraction_plugin.ml-gen", 19, 544, 581), 0), Tag1 ("Extraction_plugin", 5)), 0, 0); Tag3 (("Miniml", 22), 1, (Tag3 ((Tag2 ("Extraction_plugin__Miniml"))), 0, (("plugins/extraction/extraction_plugin.ml-gen", 22, 626, 626), ("plugins/extraction/extraction_plugin.ml-gen", 22, 626, 667), 0), Tag1 ("Extraction_plugin", 6)), 0, 0); Tag3 (("Mlutil", 23), 1, (Tag3 ((Tag2 ("Extraction_plugin__Mlutil"))), 0, (("plugins/extraction/extraction_plugin.ml-gen", 25, 712, 712), ("plugins/extraction/extraction_plugin.ml-gen", 25, 712, 753), 0), Tag1 ("Extraction_plugin", 7)), 0, 0); Tag3 (("Modutil", 24), 1, (Tag3 ((Tag2 ("Extraction_plugin__Modutil"))), 0, (("plugins/extraction/extraction_plugin.ml-gen", 28, 799, 799), ("plugins/extraction/extraction_plugin.ml-gen", 28, 799, 842), 0), Tag1 ("Extraction_plugin", 8)), 0, 0); Tag3 (("Ocaml", 25), 1, (Tag3 ((Tag2 ("Extraction_plugin__Ocaml"))), 0, (("plugins/extraction/extraction_plugin.ml-gen", 31, 886, 886), ("plugins/extraction/extraction_plugin.ml-gen", 31, 886, 925), 0), Tag1 ("Extraction_plugin", 9)), 0, 0); Tag3 (("Scheme", 26), 1, (Tag3 ((Tag2 ("Extraction_plugin__Scheme"))), 0, (("plugins/extraction/extraction_plugin.ml-gen", 34, 970, 970), ("plugins/extraction/extraction_plugin.ml-gen", 34, 970, 1011), 0), Tag1 ("Extraction_plugin", 10)), 0, 0); Tag3 (("Table", 27), 1, (Tag3 ((Tag2 ("Extraction_plugin__Table"))), 0, (("plugins/extraction/extraction_plugin.ml-gen", 37, 1055, 1055), ("plugins/extraction/extraction_plugin.ml-gen", 37, 1055, 1094), 0), Tag1 ("Extraction_plugin", 11)), 0, 0)], "Extraction_plugin", [("Extraction_plugin", ("o,\156$\195_6\238J\232\255\189\197B\169\n")); ["Extraction_plugin__Table"]; ["Extraction_plugin__Scheme"]; ["Extraction_plugin__Ocaml"]; ["Extraction_plugin__Modutil"]; ["Extraction_plugin__Mlutil"]; ["Extraction_plugin__Miniml"]; ["Extraction_plugin__Json"]; ["Extraction_plugin__Haskell"]; ["Extraction_plugin__G_extraction"]; ["Extraction_plugin__Extraction"]; ["Extraction_plugin__Extract_env"]; ["Extraction_plugin__Common"]], [(0)])
module Table = Extraction_plugin__Table

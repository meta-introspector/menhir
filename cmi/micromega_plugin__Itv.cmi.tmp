type interval =
    Micromega_plugin.NumCompat.Q.t option *
    Micromega_plugin.NumCompat.Q.t option
val pp : out_channel -> interval -> unit
val inter : interval -> interval -> interval option
val range : interval -> Micromega_plugin.NumCompat.Q.t option
val smaller_itv : interval -> interval -> bool
val in_bound : interval -> Micromega_plugin.NumCompat.Q.t -> bool
("DEBUG:rule", [Tag1 (("interval", 359), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -33)], (0)), 100000000, 0, -32); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -35)], (0)), 100000000, 0, -34)]), 100000000, 0, -31)), 0, 0, 0, 0, (("plugins/micromega/itv.mli", 12, 691, 691), ("plugins/micromega/itv.mli", 12, 691, 730), 0), 0, 0, 0, Tag1 ("Micromega_plugin__Itv", 0)), 1, 0); (("pp", 360), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -30), (Tag1 (0, (Tag3 ((("interval", 359)), 0, (0)), 100000000, 0, -29), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -28), 0), 100000000, 0, -27), 0), 100000000, 0, -26), 0, (("plugins/micromega/itv.mli", 14, 732, 732), ("plugins/micromega/itv.mli", 14, 732, 772), 0), 0, Tag1 ("Micromega_plugin__Itv", 1)), 0); (("inter", 361), ((Tag1 (0, (Tag3 ((("interval", 359)), 0, (0)), 100000000, 0, -25), (Tag1 (0, (Tag3 ((("interval", 359)), 0, (0)), 100000000, 0, -24), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("interval", 359)), 0, (0)), 100000000, 0, -23)], (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("plugins/micromega/itv.mli", 15, 773, 773), ("plugins/micromega/itv.mli", 15, 773, 824), 0), 0, Tag1 ("Micromega_plugin__Itv", 2)), 0); (("range", 362), ((Tag1 (0, (Tag3 ((("interval", 359)), 0, (0)), 100000000, 0, -19), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -18)], (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("plugins/micromega/itv.mli", 16, 825, 825), ("plugins/micromega/itv.mli", 16, 825, 859), 0), 0, Tag1 ("Micromega_plugin__Itv", 3)), 0); (("smaller_itv", 363), ((Tag1 (0, (Tag3 ((("interval", 359)), 0, (0)), 100000000, 0, -15), (Tag1 (0, (Tag3 ((("interval", 359)), 0, (0)), 100000000, 0, -14), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -13), 0), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("plugins/micromega/itv.mli", 17, 860, 860), ("plugins/micromega/itv.mli", 17, 860, 906), 0), 0, Tag1 ("Micromega_plugin__Itv", 4)), 0); (("in_bound", 364), ((Tag1 (0, (Tag3 ((("interval", 359)), 0, (0)), 100000000, 0, -10), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -9), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -8), 0), 100000000, 0, -7), 0), 100000000, 0, -6), 0, (("plugins/micromega/itv.mli", 18, 907, 907), ("plugins/micromega/itv.mli", 18, 907, 945), 0), 0, Tag1 ("Micromega_plugin__Itv", 5)), 0); (("norm_itv", 365), ((Tag1 (0, (Tag3 ((("interval", 359)), 0, (0)), 100000000, 0, -5), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("interval", 359)), 0, (0)), 100000000, 0, -4)], (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("plugins/micromega/itv.mli", 19, 946, 946), ("plugins/micromega/itv.mli", 19, 946, 988), 0), 0, Tag1 ("Micromega_plugin__Itv", 6)), 0)], "Micromega_plugin__Itv", [("Micromega_plugin__Itv", ("\182b\157jq\233\243\188\1524\157\156\231B?,")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Micromega_plugin__NumCompat", ("\167R)~D\225*6\249\146\173\\\233F6m")); ("Micromega_plugin", ("-|C6\194\020\193\204\234h\242\238\191\214'\193")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
val norm_itv : interval -> interval option

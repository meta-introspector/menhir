module type S =
  sig
    type position =
      Lexing.position = {
      pos_fname : string;
      pos_lnum : int;
      pos_bol : int;
      pos_cnum : int;
    }
    type lexbuf =
      Lexing.lexbuf = {
      refill_buff : lexbuf -> unit;
      mutable lex_buffer : bytes;
      mutable lex_buffer_len : int;
      mutable lex_abs_pos : int;
      mutable lex_start_pos : int;
      mutable lex_curr_pos : int;
      mutable lex_last_pos : int;
      mutable lex_last_action : int;
      mutable lex_eof_reached : bool;
      mutable lex_mem : int array;
      mutable lex_start_p : position;
      mutable lex_curr_p : position;
    }
    type lex_tables =
      Lexing.lex_tables = {
      lex_base : string;
      lex_backtrk : string;
      lex_default : string;
      lex_trans : string;
      lex_check : string;
      lex_base_code : string;
      lex_backtrk_code : string;
      lex_default_code : string;
      lex_trans_code : string;
      lex_check_code : string;
      lex_code : string;
    }
    val set_position : lexbuf -> position -> unit
    val set_filename : lexbuf -> string -> unit
    val from_channel : ?with_positions:bool -> in_channel -> lexbuf
    val from_string : ?with_positions:bool -> string -> lexbuf
    val from_function :
      ?with_positions:bool -> (bytes -> int -> int) -> lexbuf
    val with_positions : lexbuf -> bool
    val new_line : lexbuf -> unit
    val dummy_pos : position
    val lexeme : lexbuf -> string
    val lexeme_char : lexbuf -> int -> char
    val lexeme_start : lexbuf -> int
    val lexeme_end : lexbuf -> int
    val lexeme_start_p : lexbuf -> position
    val lexeme_end_p : lexbuf -> position
    val flush_input : lexbuf -> unit
    val sub_lexeme : lexbuf -> int -> int -> string
    val sub_lexeme_opt : lexbuf -> int -> int -> string option
    val sub_lexeme_char : lexbuf -> int -> char
    val sub_lexeme_char_opt : lexbuf -> int -> char option
    val engine : lex_tables -> int -> lexbuf -> int
    val new_engine : lex_tables -> int -> lexbuf -> int("DEBUG:rule", [Tag4 (("S", 393), ((Tag1 ([Tag1 (("position", 394), (0, 0, [[(("pos_fname", 270), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -133), (("stdcompat__lexing_s.mli", 4, 58, 60), ("stdcompat__lexing_s.mli", 4, 58, 79), 0), 0, Tag1 ("Stdcompat__lexing_s", 1)); (("pos_lnum", 271), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -134), (("stdcompat__lexing_s.mli", 5, 80, 82), ("stdcompat__lexing_s.mli", 5, 80, 97), 0), 0, Tag1 ("Stdcompat__lexing_s", 2)); (("pos_bol", 272), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -135), (("stdcompat__lexing_s.mli", 6, 98, 100), ("stdcompat__lexing_s.mli", 6, 98, 114), 0), 0, Tag1 ("Stdcompat__lexing_s", 3)); (("pos_cnum", 273), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -136), (("stdcompat__lexing_s.mli", 7, 115, 117), ("stdcompat__lexing_s.mli", 7, 115, 130), 0), 0, Tag1 ("Stdcompat__lexing_s", 4))]], 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -132)), 0, 0, 0, 0, (("stdcompat__lexing_s.mli", 2, 20, 20), ("stdcompat__lexing_s.mli", 7, 115, 132), 0), 0, 0, 0, Tag1 ("Stdcompat__lexing_s", 0)), 1, 0); Tag1 (("lexbuf", 395), (0, 0, [[(("refill_buff", 323), 0, (Tag1 (0, (Tag3 ((("lexbuf", 395)), 0, (0)), 100000000, 0, -119), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -118), 0), 100000000, 0, -117), (("stdcompat__lexing_s.mli", 13, 205, 207), ("stdcompat__lexing_s.mli", 13, 205, 236), 0), 0, Tag1 ("Stdcompat__lexing_s", 6)); (("lex_buffer", 324), 1, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -120), (("stdcompat__lexing_s.mli", 14, 237, 239), ("stdcompat__lexing_s.mli", 14, 237, 266), 0), 0, Tag1 ("Stdcompat__lexing_s", 7)); (("lex_buffer_len", 325), 1, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -121), (("stdcompat__lexing_s.mli", 15, 267, 269), ("stdcompat__lexing_s.mli", 15, 267, 298), 0), 0, Tag1 ("Stdcompat__lexing_s", 8)); (("lex_abs_pos", 326), 1, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -122), (("stdcompat__lexing_s.mli", 16, 299, 301), ("stdcompat__lexing_s.mli", 16, 299, 327), 0), 0, Tag1 ("Stdcompat__lexing_s", 9)); (("lex_start_pos", 327), 1, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -123), (("stdcompat__lexing_s.mli", 17, 328, 330), ("stdcompat__lexing_s.mli", 17, 328, 358), 0), 0, Tag1 ("Stdcompat__lexing_s", 10)); (("lex_curr_pos", 328), 1, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -124), (("stdcompat__lexing_s.mli", 18, 359, 361), ("stdcompat__lexing_s.mli", 18, 359, 388), 0), 0, Tag1 ("Stdcompat__lexing_s", 11)); (("lex_last_pos", 329), 1, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -125), (("stdcompat__lexing_s.mli", 19, 389, 391), ("stdcompat__lexing_s.mli", 19, 389, 418), 0), 0, Tag1 ("Stdcompat__lexing_s", 12)); (("lex_last_action", 330), 1, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -126), (("stdcompat__lexing_s.mli", 20, 419, 421), ("stdcompat__lexing_s.mli", 20, 419, 451), 0), 0, Tag1 ("Stdcompat__lexing_s", 13)); (("lex_eof_reached", 331), 1, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -127), (("stdcompat__lexing_s.mli", 21, 452, 454), ("stdcompat__lexing_s.mli", 21, 452, 485), 0), 0, Tag1 ("Stdcompat__lexing_s", 14)); (("lex_mem", 332), 1, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -129)], (0)), 100000000, 0, -128), (("stdcompat__lexing_s.mli", 22, 486, 488), ("stdcompat__lexing_s.mli", 22, 486, 516), 0), 0, Tag1 ("Stdcompat__lexing_s", 15)); (("lex_start_p", 333), 1, (Tag3 ((("position", 394)), 0, (0)), 100000000, 0, -130), (("stdcompat__lexing_s.mli", 23, 517, 519), ("stdcompat__lexing_s.mli", 23, 517, 550), 0), 0, Tag1 ("Stdcompat__lexing_s", 16)); (("lex_curr_p", 334), 1, (Tag3 ((("position", 394)), 0, (0)), 100000000, 0, -131), (("stdcompat__lexing_s.mli", 24, 551, 553), ("stdcompat__lexing_s.mli", 24, 551, 581), 0), 0, Tag1 ("Stdcompat__lexing_s", 17))]], 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -116)), 0, 0, 0, 0, (("stdcompat__lexing_s.mli", 11, 171, 171), ("stdcompat__lexing_s.mli", 24, 551, 583), 0), 0, 0, 0, Tag1 ("Stdcompat__lexing_s", 5)), 1, 0); Tag1 (("lex_tables", 396), (0, 0, [[(("lex_base", 336), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -105), (("stdcompat__lexing_s.mli", 76, 1937, 1939), ("stdcompat__lexing_s.mli", 76, 1937, 1957), 0), 0, Tag1 ("Stdcompat__lexing_s", 19)); (("lex_backtrk", 337), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -106), (("stdcompat__lexing_s.mli", 77, 1958, 1960), ("stdcompat__lexing_s.mli", 77, 1958, 1981), 0), 0, Tag1 ("Stdcompat__lexing_s", 20)); (("lex_default", 338), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -107), (("stdcompat__lexing_s.mli", 78, 1982, 1984), ("stdcompat__lexing_s.mli", 78, 1982, 2005), 0), 0, Tag1 ("Stdcompat__lexing_s", 21)); (("lex_trans", 339), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -108), (("stdcompat__lexing_s.mli", 79, 2006, 2008), ("stdcompat__lexing_s.mli", 79, 2006, 2027), 0), 0, Tag1 ("Stdcompat__lexing_s", 22)); (("lex_check", 340), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -109), (("stdcompat__lexing_s.mli", 80, 2028, 2030), ("stdcompat__lexing_s.mli", 80, 2028, 2049), 0), 0, Tag1 ("Stdcompat__lexing_s", 23)); (("lex_base_code", 341), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -110), (("stdcompat__lexing_s.mli", 81, 2050, 2052), ("stdcompat__lexing_s.mli", 81, 2050, 2075), 0), 0, Tag1 ("Stdcompat__lexing_s", 24)); (("lex_backtrk_code", 342), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -111), (("stdcompat__lexing_s.mli", 82, 2076, 2078), ("stdcompat__lexing_s.mli", 82, 2076, 2104), 0), 0, Tag1 ("Stdcompat__lexing_s", 25)); (("lex_default_code", 343), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -112), (("stdcompat__lexing_s.mli", 83, 2105, 2107), ("stdcompat__lexing_s.mli", 83, 2105, 2133), 0), 0, Tag1 ("Stdcompat__lexing_s", 26)); (("lex_trans_code", 344), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -113), (("stdcompat__lexing_s.mli", 84, 2134, 2136), ("stdcompat__lexing_s.mli", 84, 2134, 2160), 0), 0, Tag1 ("Stdcompat__lexing_s", 27)); (("lex_check_code", 345), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -114), (("stdcompat__lexing_s.mli", 85, 2161, 2163), ("stdcompat__lexing_s.mli", 85, 2161, 2187), 0), 0, Tag1 ("Stdcompat__lexing_s", 28)); (("lex_code", 346), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -115), (("stdcompat__lexing_s.mli", 86, 2188, 2190), ("stdcompat__lexing_s.mli", 86, 2188, 2206), 0), 0, Tag1 ("Stdcompat__lexing_s", 29))]], 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lex_tables"), 0, (0)), 100000000, 0, -104)), 0, 0, 0, 0, (("stdcompat__lexing_s.mli", 74, 1895, 1895), ("stdcompat__lexing_s.mli", 86, 2188, 2208), 0), 0, 0, 0, Tag1 ("Stdcompat__lexing_s", 18)), 1, 0); (("set_position", 397), ((Tag1 (0, (Tag3 ((("lexbuf", 395)), 0, (0)), 100000000, 0, -103), (Tag1 (0, (Tag3 ((("position", 394)), 0, (0)), 100000000, 0, -102), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -101), 0), 100000000, 0, -100), 0), 100000000, 0, -99), 0, (("stdcompat__lexing_s.mli", 89, 2248, 2248), ("stdcompat__lexing_s.mli", 89, 2248, 2293), 0), 0, Tag1 ("Stdcompat__lexing_s", 30)), 0); (("set_filename", 398), ((Tag1 (0, (Tag3 ((("lexbuf", 395)), 0, (0)), 100000000, 0, -98), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -97), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -96), 0), 100000000, 0, -95), 0), 100000000, 0, -94), 0, (("stdcompat__lexing_s.mli", 92, 2363, 2363), ("stdcompat__lexing_s.mli", 92, 2363, 2406), 0), 0, Tag1 ("Stdcompat__lexing_s", 31)), 0); (("from_channel", 399), ((Tag1 (Tag1 ("with_positions"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -93)], (0)), 100000000, 0, -92), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "in_channel"), 0, (0)), 100000000, 0, -91), (Tag3 ((("lexbuf", 395)), 0, (0)), 100000000, 0, -90), 0), 100000000, 0, -89), 0), 100000000, 0, -88), 0, (("stdcompat__lexing_s.mli", 95, 2474, 2474), ("stdcompat__lexing_s.mli", 95, 2474, 2537), 0), 0, Tag1 ("Stdcompat__lexing_s", 32)), 0); (("from_string", 400), ((Tag1 (Tag1 ("with_positions"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -87)], (0)), 100000000, 0, -86), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -85), (Tag3 ((("lexbuf", 395)), 0, (0)), 100000000, 0, -84), 0), 100000000, 0, -83), 0), 100000000, 0, -82), 0, (("stdcompat__lexing_s.mli", 99, 2629, 2629), ("stdcompat__lexing_s.mli", 99, 2629, 2687), 0), 0, Tag1 ("Stdcompat__lexing_s", 33)), 0); (("from_function", 401), ((Tag1 (Tag1 ("with_positions"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -81)], (0)), 100000000, 0, -80), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -79), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -78), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -77), 0), 100000000, 0, -76), 0), 100000000, 0, -75), (Tag3 ((("lexbuf", 395)), 0, (0)), 100000000, 0, -74), 0), 100000000, 0, -73), 0), 100000000, 0, -72), 0, (("stdcompat__lexing_s.mli", 103, 2771, 2771), ("stdcompat__lexing_s.mli", 103, 2771, 2846), 0), 0, Tag1 ("Stdcompat__lexing_s", 34)), 0); (("with_positions", 402), ((Tag1 (0, (Tag3 ((("lexbuf", 395)), 0, (0)), 100000000, 0, -71), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -70), 0), 100000000, 0, -69), 0, (("stdcompat__lexing_s.mli", 114, 3058, 3058), ("stdcompat__lexing_s.mli", 114, 3058, 3093), 0), 0, Tag1 ("Stdcompat__lexing_s", 35)), 0); (("new_line", 403), ((Tag1 (0, (Tag3 ((("lexbuf", 395)), 0, (0)), 100000000, 0, -68), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -67), 0), 100000000, 0, -66), 0, (("stdcompat__lexing_s.mli", 117, 3153, 3153), ("stdcompat__lexing_s.mli", 117, 3153, 3182), 0), 0, Tag1 ("Stdcompat__lexing_s", 36)), 0); (("dummy_pos", 404), ((Tag3 ((("position", 394)), 0, (0)), 100000000, 0, -65), 0, (("stdcompat__lexing_s.mli", 120, 3236, 3236), ("stdcompat__lexing_s.mli", 120, 3236, 3260), 0), 0, Tag1 ("Stdcompat__lexing_s", 37)), 0); (("lexeme", 405), ((Tag1 (0, (Tag3 ((("lexbuf", 395)), 0, (0)), 100000000, 0, -64), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -63), 0), 100000000, 0, -62), 0, (("stdcompat__lexing_s.mli", 123, 3299, 3299), ("stdcompat__lexing_s.mli", 123, 3299, 3328), 0), 0, Tag1 ("Stdcompat__lexing_s", 38)), 0); (("lexeme_char", 406), ((Tag1 (0, (Tag3 ((("lexbuf", 395)), 0, (0)), 100000000, 0, -61), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -60), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -59), 0), 100000000, 0, -58), 0), 100000000, 0, -57), 0, (("stdcompat__lexing_s.mli", 126, 3364, 3364), ("stdcompat__lexing_s.mli", 126, 3364, 3403), 0), 0, Tag1 ("Stdcompat__lexing_s", 39)), 0); (("lexeme_start", 407), ((Tag1 (0, (Tag3 ((("lexbuf", 395)), 0, (0)), 100000000, 0, -56), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0, (("stdcompat__lexing_s.mli", 129, 3444, 3444), ("stdcompat__lexing_s.mli", 129, 3444, 3476), 0), 0, Tag1 ("Stdcompat__lexing_s", 40)), 0); (("lexeme_end", 408), ((Tag1 (0, (Tag3 ((("lexbuf", 395)), 0, (0)), 100000000, 0, -53), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -52), 0), 100000000, 0, -51), 0, (("stdcompat__lexing_s.mli", 132, 3518, 3518), ("stdcompat__lexing_s.mli", 132, 3518, 3548), 0), 0, Tag1 ("Stdcompat__lexing_s", 41)), 0); (("lexeme_start_p", 409), ((Tag1 (0, (Tag3 ((("lexbuf", 395)), 0, (0)), 100000000, 0, -50), (Tag3 ((("position", 394)), 0, (0)), 100000000, 0, -49), 0), 100000000, 0, -48), 0, (("stdcompat__lexing_s.mli", 135, 3588, 3588), ("stdcompat__lexing_s.mli", 135, 3588, 3627), 0), 0, Tag1 ("Stdcompat__lexing_s", 42)), 0); (("lexeme_end_p", 410), ((Tag1 (0, (Tag3 ((("lexbuf", 395)), 0, (0)), 100000000, 0, -47), (Tag3 ((("position", 394)), 0, (0)), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("stdcompat__lexing_s.mli", 138, 3671, 3671), ("stdcompat__lexing_s.mli", 138, 3671, 3708), 0), 0, Tag1 ("Stdcompat__lexing_s", 43)), 0); (("flush_input", 411), ((Tag1 (0, (Tag3 ((("lexbuf", 395)), 0, (0)), 100000000, 0, -44), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -43), 0), 100000000, 0, -42), 0, (("stdcompat__lexing_s.mli", 141, 3750, 3750), ("stdcompat__lexing_s.mli", 141, 3750, 3782), 0), 0, Tag1 ("Stdcompat__lexing_s", 44)), 0); (("sub_lexeme", 412), ((Tag1 (0, (Tag3 ((("lexbuf", 395)), 0, (0)), 100000000, 0, -41), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -40), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -39), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -38), 0), 100000000, 0, -37), 0), 100000000, 0, -36), 0), 100000000, 0, -35), 0, (("stdcompat__lexing_s.mli", 144, 3823, 3823), ("stdcompat__lexing_s.mli", 144, 3823, 3870), 0), 0, Tag1 ("Stdcompat__lexing_s", 45)), 0); (("sub_lexeme_opt", 413), ((Tag1 (0, (Tag3 ((("lexbuf", 395)), 0, (0)), 100000000, 0, -34), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -33), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -32), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -31)], (0)), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), 0), 100000000, 0, -27), 0, (("stdcompat__lexing_s.mli", 147, 3910, 3910), ("stdcompat__lexing_s.mli", 147, 3910, 3968), 0), 0, Tag1 ("Stdcompat__lexing_s", 46)), 0); (("sub_lexeme_char", 414), ((Tag1 (0, (Tag3 ((("lexbuf", 395)), 0, (0)), 100000000, 0, -26), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -25), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0), 100000000, 0, -22), 0, (("stdcompat__lexing_s.mli", 150, 4012, 4012), ("stdcompat__lexing_s.mli", 150, 4012, 4055), 0), 0, Tag1 ("Stdcompat__lexing_s", 47)), 0); (("sub_lexeme_char_opt", 415), ((Tag1 (0, (Tag3 ((("lexbuf", 395)), 0, (0)), 100000000, 0, -21), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -20), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -19)], (0)), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("stdcompat__lexing_s.mli", 153, 4100, 4100), ("stdcompat__lexing_s.mli", 153, 4100, 4154), 0), 0, Tag1 ("Stdcompat__lexing_s", 48)), 0); (("engine", 416), ((Tag1 (0, (Tag3 ((("lex_tables", 396)), 0, (0)), 100000000, 0, -15), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -14), (Tag1 (0, (Tag3 ((("lexbuf", 395)), 0, (0)), 100000000, 0, -13), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0), 100000000, 0, -10), 0), 100000000, 0, -9), 0, (("stdcompat__lexing_s.mli", 156, 4203, 4203), ("stdcompat__lexing_s.mli", 156, 4203, 4250), 0), 0, Tag1 ("Stdcompat__lexing_s", 49)), 0); (("new_engine", 417), ((Tag1 (0, (Tag3 ((("lex_tables", 396)), 0, (0)), 100000000, 0, -8), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -7), (Tag1 (0, (Tag3 ((("lexbuf", 395)), 0, (0)), 100000000, 0, -6), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("stdcompat__lexing_s.mli", 159, 4286, 4286), ("stdcompat__lexing_s.mli", 159, 4286, 4337), 0), 0, Tag1 ("Stdcompat__lexing_s", 50)), 0)])), 0, (("stdcompat__lexing_s.mli", 1, 0, 0), ("stdcompat__lexing_s.mli", 162, 4377, 4380), 0), Tag1 ("Stdcompat__lexing_s", 51)), 0)], "Stdcompat__lexing_s", [("Stdcompat__lexing_s", ("@2\227\245\171H\240/\201\020\223Kh\188\2550")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

  end

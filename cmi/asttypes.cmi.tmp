type constant =
    Const_int of int
  | Const_char of char
  | Const_string of string * Location.t * string option
  | Const_float of string
  | Const_int32 of int32
  | Const_int64 of int64
  | Const_nativeint of nativeint
type rec_flag = Nonrecursive | Recursive
type direction_flag = Upto | Downto
type private_flag = Private | Public
type mutable_flag = Immutable | Mutable
type virtual_flag = Virtual | Concrete
type override_flag = Override | Fresh
type closed_flag = Closed | Open
type label = string
type arg_label = Nolabel | Labelled of string | Optional of string
type 'a loc = 'a Location.loc = { txt : 'a; loc : Location.t; }
type variance = Covariant | Contravariant | NoVariance
("DEBUG:rule", [Tag1 (("constant", 406), (0, 0, Tag1 ([(("Const_int", 270), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -8)]), 0, (("parsing/asttypes.mli", 24, 1244, 1248), ("parsing/asttypes.mli", 24, 1244, 1264), 0), 0, Tag1 ("Asttypes", 1)); (("Const_char", 271), ([(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -9)]), 0, (("parsing/asttypes.mli", 25, 1265, 1267), ("parsing/asttypes.mli", 25, 1265, 1287), 0), 0, Tag1 ("Asttypes", 2)); (("Const_string", 272), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10); (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -11); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -13)], (0)), 100000000, 0, -12)]), 0, (("parsing/asttypes.mli", 26, 1288, 1290), ("parsing/asttypes.mli", 26, 1288, 1343), 0), 0, Tag1 ("Asttypes", 3)); (("Const_float", 339), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -14)]), 0, (("parsing/asttypes.mli", 27, 1344, 1346), ("parsing/asttypes.mli", 27, 1344, 1369), 0), 0, Tag1 ("Asttypes", 4)); (("Const_int32", 340), ([(Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -15)]), 0, (("parsing/asttypes.mli", 28, 1370, 1372), ("parsing/asttypes.mli", 28, 1370, 1394), 0), 0, Tag1 ("Asttypes", 5)); (("Const_int64", 341), ([(Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -16)]), 0, (("parsing/asttypes.mli", 29, 1395, 1397), ("parsing/asttypes.mli", 29, 1395, 1419), 0), 0, Tag1 ("Asttypes", 6)); (("Const_nativeint", 342), ([(Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -17)]), 0, (("parsing/asttypes.mli", 30, 1420, 1422), ("parsing/asttypes.mli", 30, 1420, 1452), 0), 0, Tag1 ("Asttypes", 7))], 0), 1, 0, 0, 0, 0, 0, (("parsing/asttypes.mli", 23, 1228, 1228), ("parsing/asttypes.mli", 30, 1420, 1452), 0), 0, 0, 0, Tag1 ("Asttypes", 0)), 1, 0); Tag1 (("rec_flag", 407), (0, 0, Tag1 ([(("Nonrecursive", 371), (0), 0, (("parsing/asttypes.mli", 32, 1454, 1470), ("parsing/asttypes.mli", 32, 1454, 1482), 0), 0, Tag1 ("Asttypes", 9)); (("Recursive", 372), (0), 0, (("parsing/asttypes.mli", 32, 1454, 1483), ("parsing/asttypes.mli", 32, 1454, 1494), 0), 0, Tag1 ("Asttypes", 10))], 0), 1, 0, 0, 0, 0, 0, (("parsing/asttypes.mli", 32, 1454, 1454), ("parsing/asttypes.mli", 32, 1454, 1494), 0), 0, 1, 0, Tag1 ("Asttypes", 8)), 1, 0); Tag1 (("direction_flag", 408), (0, 0, Tag1 ([(("Upto", 374), (0), 0, (("parsing/asttypes.mli", 34, 1496, 1518), ("parsing/asttypes.mli", 34, 1496, 1522), 0), 0, Tag1 ("Asttypes", 12)); (("Downto", 375), (0), 0, (("parsing/asttypes.mli", 34, 1496, 1523), ("parsing/asttypes.mli", 34, 1496, 1531), 0), 0, Tag1 ("Asttypes", 13))], 0), 1, 0, 0, 0, 0, 0, (("parsing/asttypes.mli", 34, 1496, 1496), ("parsing/asttypes.mli", 34, 1496, 1531), 0), 0, 1, 0, Tag1 ("Asttypes", 11)), 1, 0); Tag1 (("private_flag", 409), (0, 0, Tag1 ([(("Private", 377), (0), 0, (("parsing/asttypes.mli", 37, 1585, 1605), ("parsing/asttypes.mli", 37, 1585, 1612), 0), 0, Tag1 ("Asttypes", 15)); (("Public", 378), (0), 0, (("parsing/asttypes.mli", 37, 1585, 1613), ("parsing/asttypes.mli", 37, 1585, 1621), 0), 0, Tag1 ("Asttypes", 16))], 0), 1, 0, 0, 0, 0, 0, (("parsing/asttypes.mli", 37, 1585, 1585), ("parsing/asttypes.mli", 37, 1585, 1621), 0), 0, 1, 0, Tag1 ("Asttypes", 14)), 1, 0); Tag1 (("mutable_flag", 410), (0, 0, Tag1 ([(("Immutable", 380), (0), 0, (("parsing/asttypes.mli", 39, 1623, 1643), ("parsing/asttypes.mli", 39, 1623, 1652), 0), 0, Tag1 ("Asttypes", 18)); (("Mutable", 381), (0), 0, (("parsing/asttypes.mli", 39, 1623, 1653), ("parsing/asttypes.mli", 39, 1623, 1662), 0), 0, Tag1 ("Asttypes", 19))], 0), 1, 0, 0, 0, 0, 0, (("parsing/asttypes.mli", 39, 1623, 1623), ("parsing/asttypes.mli", 39, 1623, 1662), 0), 0, 1, 0, Tag1 ("Asttypes", 17)), 1, 0); Tag1 (("virtual_flag", 411), (0, 0, Tag1 ([(("Virtual", 383), (0), 0, (("parsing/asttypes.mli", 41, 1664, 1684), ("parsing/asttypes.mli", 41, 1664, 1691), 0), 0, Tag1 ("Asttypes", 21)); (("Concrete", 384), (0), 0, (("parsing/asttypes.mli", 41, 1664, 1692), ("parsing/asttypes.mli", 41, 1664, 1702), 0), 0, Tag1 ("Asttypes", 22))], 0), 1, 0, 0, 0, 0, 0, (("parsing/asttypes.mli", 41, 1664, 1664), ("parsing/asttypes.mli", 41, 1664, 1702), 0), 0, 1, 0, Tag1 ("Asttypes", 20)), 1, 0); Tag1 (("override_flag", 412), (0, 0, Tag1 ([(("Override", 386), (0), 0, (("parsing/asttypes.mli", 43, 1704, 1725), ("parsing/asttypes.mli", 43, 1704, 1733), 0), 0, Tag1 ("Asttypes", 24)); (("Fresh", 387), (0), 0, (("parsing/asttypes.mli", 43, 1704, 1734), ("parsing/asttypes.mli", 43, 1704, 1741), 0), 0, Tag1 ("Asttypes", 25))], 0), 1, 0, 0, 0, 0, 0, (("parsing/asttypes.mli", 43, 1704, 1704), ("parsing/asttypes.mli", 43, 1704, 1741), 0), 0, 1, 0, Tag1 ("Asttypes", 23)), 1, 0); Tag1 (("closed_flag", 413), (0, 0, Tag1 ([(("Closed", 389), (0), 0, (("parsing/asttypes.mli", 45, 1743, 1762), ("parsing/asttypes.mli", 45, 1743, 1768), 0), 0, Tag1 ("Asttypes", 27)); (("Open", 390), (0), 0, (("parsing/asttypes.mli", 45, 1743, 1769), ("parsing/asttypes.mli", 45, 1743, 1775), 0), 0, Tag1 ("Asttypes", 28))], 0), 1, 0, 0, 0, 0, 0, (("parsing/asttypes.mli", 45, 1743, 1743), ("parsing/asttypes.mli", 45, 1743, 1775), 0), 0, 1, 0, Tag1 ("Asttypes", 26)), 1, 0); Tag1 (("label", 414), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -7)), 0, 0, 0, 0, (("parsing/asttypes.mli", 47, 1777, 1777), ("parsing/asttypes.mli", 47, 1777, 1796), 0), 0, 0, 0, Tag1 ("Asttypes", 29)), 1, 0); Tag1 (("arg_label", 415), (0, 0, Tag1 ([(("Nolabel", 393), (0), 0, (("parsing/asttypes.mli", 50, 1815, 1819), ("parsing/asttypes.mli", 50, 1815, 1826), 0), 0, Tag1 ("Asttypes", 31)); (("Labelled", 394), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5)]), 0, (("parsing/asttypes.mli", 51, 1827, 1829), ("parsing/asttypes.mli", 51, 1827, 1849), 0), 0, Tag1 ("Asttypes", 32)); (("Optional", 395), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6)]), 0, (("parsing/asttypes.mli", 52, 1874, 1876), ("parsing/asttypes.mli", 52, 1874, 1896), 0), 0, Tag1 ("Asttypes", 33))], 0), 1, 0, 0, 0, 0, 0, (("parsing/asttypes.mli", 49, 1798, 1798), ("parsing/asttypes.mli", 52, 1874, 1896), 0), 0, 0, 0, Tag1 ("Asttypes", 30)), 1, 0); Tag1 (("loc", 416), ([((("a")), 100000000, 0, -3)], 1, [[(("txt", 397), 0, ((("a")), 100000000, 0, -3), (("parsing/asttypes.mli", 55, 1957, 1959), ("parsing/asttypes.mli", 55, 1957, 1968), 0), 0, Tag1 ("Asttypes", 35)); (("loc", 398), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -4), (("parsing/asttypes.mli", 56, 1969, 1971), ("parsing/asttypes.mli", 56, 1969, 1988), 0), 0, Tag1 ("Asttypes", 36))]], 1, ((Tag3 (Tag1 ((Tag2 ("Location")), "loc"), [((("a")), 100000000, 0, -3)], (0)), 100000000, 0, -2)), [25], [0], 0, 0, (("parsing/asttypes.mli", 54, 1923, 1923), ("parsing/asttypes.mli", 57, 1989, 1990), 0), 0, 0, 0, Tag1 ("Asttypes", 34)), 1, 0); Tag1 (("variance", 417), (0, 0, Tag1 ([(("Covariant", 400), (0), 0, (("parsing/asttypes.mli", 61, 2009, 2011), ("parsing/asttypes.mli", 61, 2009, 2022), 0), 0, Tag1 ("Asttypes", 38)); (("Contravariant", 401), (0), 0, (("parsing/asttypes.mli", 62, 2023, 2025), ("parsing/asttypes.mli", 62, 2023, 2040), 0), 0, Tag1 ("Asttypes", 39)); (("NoVariance", 402), (0), 0, (("parsing/asttypes.mli", 63, 2041, 2043), ("parsing/asttypes.mli", 63, 2041, 2055), 0), 0, Tag1 ("Asttypes", 40))], 0), 1, 0, 0, 0, 0, 0, (("parsing/asttypes.mli", 60, 1993, 1993), ("parsing/asttypes.mli", 63, 2041, 2055), 0), 0, 1, 0, Tag1 ("Asttypes", 37)), 1, 0); Tag1 (("injectivity", 418), (0, 0, Tag1 ([(("Injective", 404), (0), 0, (("parsing/asttypes.mli", 66, 2076, 2078), ("parsing/asttypes.mli", 66, 2076, 2089), 0), 0, Tag1 ("Asttypes", 42)); (("NoInjectivity", 405), (0), 0, (("parsing/asttypes.mli", 67, 2090, 2092), ("parsing/asttypes.mli", 67, 2090, 2107), 0), 0, Tag1 ("Asttypes", 43))], 0), 1, 0, 0, 0, 0, 0, (("parsing/asttypes.mli", 65, 2057, 2057), ("parsing/asttypes.mli", 67, 2090, 2107), 0), 0, 1, 0, Tag1 ("Asttypes", 41)), 1, 0)], "Asttypes", [("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
type injectivity = Injective | NoInjectivity

type 'a module_signature = Enforce of 'a | Check of 'a list
type inline = NoInline | DefaultInline | InlineAt of int
type module_params =
    (Names.lident list * (Constrexpr.module_ast * inline)) list
type module_expr =
    Modintern.module_struct_expr * Names.ModPath.t * Modintern.module_kind *
    Entries.inline
type module_params_expr = (Names.MBId.t list * module_expr) list
type library_name = Names.DirPath.t
type library_objects
module Synterp :
  sig
    val declare_module :
      Names.Id.t ->
      module_params ->
      (Constrexpr.module_ast * inline) module_signature ->
      (Constrexpr.module_ast * inline) list ->
      Names.ModPath.t * module_params_expr * module_expr list *
      module_expr module_signature
    val start_module :
      Lib.export ->
      Names.Id.t ->
      module_params ->
      (Constrexpr.module_ast * inline) module_signature ->
      Names.ModPath.t * module_params_expr * module_expr module_signature
    val end_module : unit -> Names.ModPath.t
    val declare_include :
      (Constrexpr.module_ast * inline) list -> module_expr list
    val declare_modtype :
      Names.Id.t ->
      module_params ->
      (Constrexpr.module_ast * inline) list ->
      (Constrexpr.module_ast * inline) list ->
      Names.ModPath.t * module_params_expr * module_expr list *
      module_expr list
    val start_modtype :
      Names.Id.t ->
      module_params ->
      (Constrexpr.module_ast * inline) list ->
      Names.ModPath.t * module_params_expr * module_expr list
    val end_modtype : unit -> Names.ModPath.t
    val import_module :
      Libobject.open_filter ->
      export:Lib.export_flag -> Names.ModPath.t -> unit
    val import_modules :
      export:Lib.export_flag ->
      (Libobject.open_filter * Names.ModPath.t) list -> unit
    val register_library : library_name -> library_objects -> unit
  end
module Interp :
  sig
    val declare_module :
      Names.Id.t ->
      module_params_expr ->
      module_expr module_signature -> module_expr list -> Names.ModPath.t
    val start_module :
      Lib.export ->
      Names.Id.t ->
      module_params_expr -> module_expr module_signature -> Names.ModPath.t
    val end_module : unit -> Names.ModPath.t
    val declare_modtype :
      Names.Id.t ->
      module_params_expr ->
      module_expr list -> module_expr list -> Names.ModPath.t
    val start_modtype :
      Names.Id.t -> module_params_expr -> module_expr list -> Names.ModPath.t
    val end_modtype : unit -> Names.ModPath.t
    val register_library :
      library_name ->
      Safe_typing.compiled_library ->
      library_objects -> Safe_typing.vodigest -> Univ.ContextSet.t -> unit
    val import_module :
      Libobject.open_filter ->
      export:Lib.export_flag -> Names.ModPath.t -> unit
    val import_modules :
      export:Lib.export_flag ->
      (Libobject.open_filter * Names.ModPath.t) list -> unit
    val declare_include : module_expr list -> unit
  end
val start_library : library_name -> unit
val end_library :
  output_native_objects:bool ->
  library_name ->
  Safe_typing.compiled_library * library_objects * library_objects *
  Nativelib.native_library
val append_end_library_hook : (unit -> unit) -> unit
val iter_all_interp_segments :
  (Nametab.object_prefix -> Libobject.t -> unit) -> unit
val debug_print_modtab : unit -> Pp.t
val process_module_binding :
  Names.MBId.t ->
  (Constr.t * Univ.AbstractContext.t option) Declarations.module_alg_expr ->
  unit
val import_module :
  Libobject.open_filter -> export:Lib.export_flag -> Names.ModPath.t -> unit
val declare_module :
  Names.Id.t ->
  module_params ->
  (Constrexpr.module_ast * inline) module_signature ->
  (Constrexpr.module_ast * inline) list -> Names.ModPath.t
val start_module :
  Lib.export ->
  Names.Id.t ->
  module_params ->
  (Constrexpr.module_ast * inline) module_signature -> Names.ModPath.t
val end_module : unit -> Names.ModPath.t
val declare_modtype :
  Names.Id.t ->
  module_params ->
  (Constrexpr.module_ast * inline) list ->
  (Constrexpr.module_ast * inline) list -> Names.ModPath.t
val start_modtype :
  Names.Id.t ->
  module_params -> (Constrexpr.module_ast * inline) list -> Names.ModPath.t
val end_modtype : unit -> Names.ModPath.t
("DEBUG:rule", [Tag1 (("module_signature", 1171), ([((("a")), 100000000, 0, -128)], 1, Tag1 ([(("Enforce", 361), ([((("a")), 100000000, 0, -128)]), 0, (("vernac/declaremods.mli", 19, 793, 795), ("vernac/declaremods.mli", 19, 793, 810), 0), 0, Tag1 ("Declaremods", 1)); (("Check", 362), ([(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -128)], (0)), 100000000, 0, -129)]), 0, (("vernac/declaremods.mli", 20, 826, 828), ("vernac/declaremods.mli", 20, 826, 846), 0), 0, Tag1 ("Declaremods", 2))], 0), 1, 0, [25], [0], 0, 0, (("vernac/declaremods.mli", 18, 766, 766), ("vernac/declaremods.mli", 20, 826, 846), 0), 0, 0, 0, Tag1 ("Declaremods", 0)), 1, 0); Tag1 (("inline", 1172), (0, 0, Tag1 ([(("NoInline", 364), (0), 0, (("vernac/declaremods.mli", 27, 1040, 1042), ("vernac/declaremods.mli", 27, 1040, 1052), 0), 0, Tag1 ("Declaremods", 4)); (("DefaultInline", 365), (0), 0, (("vernac/declaremods.mli", 28, 1053, 1055), ("vernac/declaremods.mli", 28, 1053, 1070), 0), 0, Tag1 ("Declaremods", 5)); (("InlineAt", 366), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -127)]), 0, (("vernac/declaremods.mli", 29, 1071, 1073), ("vernac/declaremods.mli", 29, 1071, 1090), 0), 0, Tag1 ("Declaremods", 6))], 0), 1, 0, 0, 0, 0, 0, (("vernac/declaremods.mli", 26, 1026, 1026), ("vernac/declaremods.mli", 29, 1071, 1090), 0), 0, 0, 0, Tag1 ("Declaremods", 3)), 1, 0); Tag1 (("module_params", 1173), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -123)], (0)), 100000000, 0, -122); (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "module_ast"), 0, (0)), 100000000, 0, -125); (Tag3 ((("inline", 1172)), 0, (0)), 100000000, 0, -126)]), 100000000, 0, -124)]), 100000000, 0, -121)], (0)), 100000000, 0, -120)), 0, 0, 0, 0, (("vernac/declaremods.mli", 33, 1117, 1117), ("vernac/declaremods.mli", 33, 1117, 1191), 0), 0, 0, 0, Tag1 ("Declaremods", 7)), 1, 0); Tag1 (("module_expr", 1174), (0, 0, 0, 1, ((Tag2 ([(Tag3 (Tag1 ((Tag2 ("Modintern")), "module_struct_expr"), 0, (0)), 100000000, 0, -116); (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -117); (Tag3 (Tag1 ((Tag2 ("Modintern")), "module_kind"), 0, (0)), 100000000, 0, -118); (Tag3 (Tag1 ((Tag2 ("Entries")), "inline"), 0, (0)), 100000000, 0, -119)]), 100000000, 0, -115)), 0, 0, 0, 0, (("vernac/declaremods.mli", 34, 1192, 1192), ("vernac/declaremods.mli", 34, 1192, 1274), 0), 0, 0, 0, Tag1 ("Declaremods", 8)), 1, 0); Tag1 (("module_params_expr", 1175), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "MBId"), "t"), 0, (0)), 100000000, 0, -113)], (0)), 100000000, 0, -112); (Tag3 ((("module_expr", 1174)), 0, (0)), 100000000, 0, -114)]), 100000000, 0, -111)], (0)), 100000000, 0, -110)), 0, 0, 0, 0, (("vernac/declaremods.mli", 35, 1275, 1275), ("vernac/declaremods.mli", 35, 1275, 1333), 0), 0, 0, 0, Tag1 ("Declaremods", 9)), 1, 0); Tag1 (("library_name", 1176), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "DirPath"), "t"), 0, (0)), 100000000, 0, -109)), 0, 0, 0, 0, (("vernac/declaremods.mli", 39, 1379, 1379), ("vernac/declaremods.mli", 39, 1379, 1408), 0), 0, 0, 0, Tag1 ("Declaremods", 10)), 1, 0); Tag1 (("library_objects", 1177), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("vernac/declaremods.mli", 41, 1410, 1410), ("vernac/declaremods.mli", 41, 1410, 1430), 0), 0, 0, 0, Tag1 ("Declaremods", 11)), 1, 0); Tag3 (("Synterp", 1178), 0, (Tag1 ([(("declare_module", 1194), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -234), (Tag1 (0, (Tag3 ((("module_params", 1173)), 0, (0)), 100000000, 0, -233), (Tag1 (0, (Tag3 ((("module_signature", 1171)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "module_ast"), 0, (0)), 100000000, 0, -231); (Tag3 ((("inline", 1172)), 0, (0)), 100000000, 0, -232)]), 100000000, 0, -230)], (0)), 100000000, 0, -229), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "module_ast"), 0, (0)), 100000000, 0, -227); (Tag3 ((("inline", 1172)), 0, (0)), 100000000, 0, -228)]), 100000000, 0, -226)], (0)), 100000000, 0, -225), (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -219); (Tag3 ((("module_params_expr", 1175)), 0, (0)), 100000000, 0, -220); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("module_expr", 1174)), 0, (0)), 100000000, 0, -222)], (0)), 100000000, 0, -221); (Tag3 ((("module_signature", 1171)), [(Tag3 ((("module_expr", 1174)), 0, (0)), 100000000, 0, -224)], (0)), 100000000, 0, -223)]), 100000000, 0, -218), 0), 100000000, 0, -217), 0), 100000000, 0, -216), 0), 100000000, 0, -215), 0), 100000000, 0, -214), 0, (("vernac/declaremods.mli", 45, 1454, 1454), ("vernac/declaremods.mli", 50, 1602, 1684), 0), 0, Tag1 ("Declaremods", 12)), 0); (("start_module", 1195), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Lib")), "export"), 0, (0)), 100000000, 0, -213), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -212), (Tag1 (0, (Tag3 ((("module_params", 1173)), 0, (0)), 100000000, 0, -211), (Tag1 (0, (Tag3 ((("module_signature", 1171)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "module_ast"), 0, (0)), 100000000, 0, -209); (Tag3 ((("inline", 1172)), 0, (0)), 100000000, 0, -210)]), 100000000, 0, -208)], (0)), 100000000, 0, -207), (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -203); (Tag3 ((("module_params_expr", 1175)), 0, (0)), 100000000, 0, -204); (Tag3 ((("module_signature", 1171)), [(Tag3 ((("module_expr", 1174)), 0, (0)), 100000000, 0, -206)], (0)), 100000000, 0, -205)]), 100000000, 0, -202), 0), 100000000, 0, -201), 0), 100000000, 0, -200), 0), 100000000, 0, -199), 0), 100000000, 0, -198), 0, (("vernac/declaremods.mli", 52, 1686, 1686), ("vernac/declaremods.mli", 56, 1803, 1866), 0), 0, Tag1 ("Declaremods", 13)), 0); (("end_module", 1196), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -197), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -196), 0), 100000000, 0, -195), 0, (("vernac/declaremods.mli", 58, 1868, 1868), ("vernac/declaremods.mli", 58, 1868, 1902), 0), 0, Tag1 ("Declaremods", 14)), 0); (("declare_include", 1197), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "module_ast"), 0, (0)), 100000000, 0, -193); (Tag3 ((("inline", 1172)), 0, (0)), 100000000, 0, -194)]), 100000000, 0, -192)], (0)), 100000000, 0, -191), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("module_expr", 1174)), 0, (0)), 100000000, 0, -190)], (0)), 100000000, 0, -189), 0), 100000000, 0, -188), 0, (("vernac/declaremods.mli", 60, 1904, 1904), ("vernac/declaremods.mli", 62, 1969, 1987), 0), 0, Tag1 ("Declaremods", 15)), 0); (("declare_modtype", 1198), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -187), (Tag1 (0, (Tag3 ((("module_params", 1173)), 0, (0)), 100000000, 0, -186), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "module_ast"), 0, (0)), 100000000, 0, -184); (Tag3 ((("inline", 1172)), 0, (0)), 100000000, 0, -185)]), 100000000, 0, -183)], (0)), 100000000, 0, -182), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "module_ast"), 0, (0)), 100000000, 0, -180); (Tag3 ((("inline", 1172)), 0, (0)), 100000000, 0, -181)]), 100000000, 0, -179)], (0)), 100000000, 0, -178), (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -172); (Tag3 ((("module_params_expr", 1175)), 0, (0)), 100000000, 0, -173); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("module_expr", 1174)), 0, (0)), 100000000, 0, -175)], (0)), 100000000, 0, -174); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("module_expr", 1174)), 0, (0)), 100000000, 0, -177)], (0)), 100000000, 0, -176)]), 100000000, 0, -171), 0), 100000000, 0, -170), 0), 100000000, 0, -169), 0), 100000000, 0, -168), 0), 100000000, 0, -167), 0, (("vernac/declaremods.mli", 64, 1989, 1989), ("vernac/declaremods.mli", 69, 2126, 2196), 0), 0, Tag1 ("Declaremods", 16)), 0); (("start_modtype", 1199), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -166), (Tag1 (0, (Tag3 ((("module_params", 1173)), 0, (0)), 100000000, 0, -165), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "module_ast"), 0, (0)), 100000000, 0, -163); (Tag3 ((("inline", 1172)), 0, (0)), 100000000, 0, -164)]), 100000000, 0, -162)], (0)), 100000000, 0, -161), (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -157); (Tag3 ((("module_params_expr", 1175)), 0, (0)), 100000000, 0, -158); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("module_expr", 1174)), 0, (0)), 100000000, 0, -160)], (0)), 100000000, 0, -159)]), 100000000, 0, -156), 0), 100000000, 0, -155), 0), 100000000, 0, -154), 0), 100000000, 0, -153), 0, (("vernac/declaremods.mli", 71, 2198, 2198), ("vernac/declaremods.mli", 75, 2290, 2341), 0), 0, Tag1 ("Declaremods", 17)), 0); (("end_modtype", 1200), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -152), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -151), 0), 100000000, 0, -150), 0, (("vernac/declaremods.mli", 77, 2343, 2343), ("vernac/declaremods.mli", 77, 2343, 2378), 0), 0, Tag1 ("Declaremods", 18)), 0); (("import_module", 1201), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Libobject")), "open_filter"), 0, (0)), 100000000, 0, -149), (Tag1 (("export"), (Tag3 (Tag1 ((Tag2 ("Lib")), "export_flag"), 0, (0)), 100000000, 0, -148), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -147), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -146), 0), 100000000, 0, -145), 0), 100000000, 0, -144), 0), 100000000, 0, -143), 0, (("vernac/declaremods.mli", 79, 2380, 2380), ("vernac/declaremods.mli", 79, 2380, 2468), 0), 0, Tag1 ("Declaremods", 20)), 0); (("import_modules", 1202), ((Tag1 (("export"), (Tag3 (Tag1 ((Tag2 ("Lib")), "export_flag"), 0, (0)), 100000000, 0, -142), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Libobject")), "open_filter"), 0, (0)), 100000000, 0, -140); (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -141)]), 100000000, 0, -139)], (0)), 100000000, 0, -138), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -137), 0), 100000000, 0, -136), 0), 100000000, 0, -135), 0, (("vernac/declaremods.mli", 81, 2470, 2470), ("vernac/declaremods.mli", 81, 2470, 2565), 0), 0, Tag1 ("Declaremods", 21)), 0); (("register_library", 1203), ((Tag1 (0, (Tag3 ((("library_name", 1176)), 0, (0)), 100000000, 0, -134), (Tag1 (0, (Tag3 ((("library_objects", 1177)), 0, (0)), 100000000, 0, -133), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -132), 0), 100000000, 0, -131), 0), 100000000, 0, -130), 0, (("vernac/declaremods.mli", 83, 2567, 2567), ("vernac/declaremods.mli", 83, 2567, 2629), 0), 0, Tag1 ("Declaremods", 22)), 0)]), 0, (("vernac/declaremods.mli", 43, 1432, 1432), ("vernac/declaremods.mli", 85, 2631, 2634), 0), Tag1 ("Declaremods", 23)), 0, 0); Tag3 (("Interp", 1179), 0, (Tag1 ([(("declare_module", 1204), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -310), (Tag1 (0, (Tag3 ((("module_params_expr", 1175)), 0, (0)), 100000000, 0, -309), (Tag1 (0, (Tag3 ((("module_signature", 1171)), [(Tag3 ((("module_expr", 1174)), 0, (0)), 100000000, 0, -308)], (0)), 100000000, 0, -307), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("module_expr", 1174)), 0, (0)), 100000000, 0, -306)], (0)), 100000000, 0, -305), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -304), 0), 100000000, 0, -303), 0), 100000000, 0, -302), 0), 100000000, 0, -301), 0), 100000000, 0, -300), 0, (("vernac/declaremods.mli", 95, 2980, 2980), ("vernac/declaremods.mli", 100, 3091, 3102), 0), 0, Tag1 ("Declaremods", 24)), 0); (("start_module", 1205), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Lib")), "export"), 0, (0)), 100000000, 0, -299), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -298), (Tag1 (0, (Tag3 ((("module_params_expr", 1175)), 0, (0)), 100000000, 0, -297), (Tag1 (0, (Tag3 ((("module_signature", 1171)), [(Tag3 ((("module_expr", 1174)), 0, (0)), 100000000, 0, -296)], (0)), 100000000, 0, -295), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -294), 0), 100000000, 0, -293), 0), 100000000, 0, -292), 0), 100000000, 0, -291), 0), 100000000, 0, -290), 0, (("vernac/declaremods.mli", 102, 3104, 3104), ("vernac/declaremods.mli", 106, 3205, 3216), 0), 0, Tag1 ("Declaremods", 25)), 0); (("end_module", 1206), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -289), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -288), 0), 100000000, 0, -287), 0, (("vernac/declaremods.mli", 108, 3218, 3218), ("vernac/declaremods.mli", 108, 3218, 3252), 0), 0, Tag1 ("Declaremods", 26)), 0); (("declare_modtype", 1207), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -286), (Tag1 (0, (Tag3 ((("module_params_expr", 1175)), 0, (0)), 100000000, 0, -285), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("module_expr", 1174)), 0, (0)), 100000000, 0, -284)], (0)), 100000000, 0, -283), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("module_expr", 1174)), 0, (0)), 100000000, 0, -282)], (0)), 100000000, 0, -281), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -280), 0), 100000000, 0, -279), 0), 100000000, 0, -278), 0), 100000000, 0, -277), 0), 100000000, 0, -276), 0, (("vernac/declaremods.mli", 115, 3413, 3413), ("vernac/declaremods.mli", 120, 3513, 3524), 0), 0, Tag1 ("Declaremods", 27)), 0); (("start_modtype", 1208), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -275), (Tag1 (0, (Tag3 ((("module_params_expr", 1175)), 0, (0)), 100000000, 0, -274), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("module_expr", 1174)), 0, (0)), 100000000, 0, -273)], (0)), 100000000, 0, -272), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -271), 0), 100000000, 0, -270), 0), 100000000, 0, -269), 0), 100000000, 0, -268), 0, (("vernac/declaremods.mli", 122, 3526, 3526), ("vernac/declaremods.mli", 126, 3602, 3613), 0), 0, Tag1 ("Declaremods", 28)), 0); (("end_modtype", 1209), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -267), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -266), 0), 100000000, 0, -265), 0, (("vernac/declaremods.mli", 128, 3615, 3615), ("vernac/declaremods.mli", 128, 3615, 3650), 0), 0, Tag1 ("Declaremods", 29)), 0); (("register_library", 1210), ((Tag1 (0, (Tag3 ((("library_name", 1176)), 0, (0)), 100000000, 0, -264), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Safe_typing")), "compiled_library"), 0, (0)), 100000000, 0, -263), (Tag1 (0, (Tag3 ((("library_objects", 1177)), 0, (0)), 100000000, 0, -262), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Safe_typing")), "vodigest"), 0, (0)), 100000000, 0, -261), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "ContextSet"), "t"), 0, (0)), 100000000, 0, -260), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -259), 0), 100000000, 0, -258), 0), 100000000, 0, -257), 0), 100000000, 0, -256), 0), 100000000, 0, -255), 0), 100000000, 0, -254), 0, (("vernac/declaremods.mli", 130, 3652, 3652), ("vernac/declaremods.mli", 134, 3793, 3799), 0), 0, Tag1 ("Declaremods", 30)), 0); (("import_module", 1211), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Libobject")), "open_filter"), 0, (0)), 100000000, 0, -253), (Tag1 (("export"), (Tag3 (Tag1 ((Tag2 ("Lib")), "export_flag"), 0, (0)), 100000000, 0, -252), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -251), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -250), 0), 100000000, 0, -249), 0), 100000000, 0, -248), 0), 100000000, 0, -247), 0, (("vernac/declaremods.mli", 142, 4132, 4132), ("vernac/declaremods.mli", 142, 4132, 4220), 0), 0, Tag1 ("Declaremods", 31)), 0); (("import_modules", 1212), ((Tag1 (("export"), (Tag3 (Tag1 ((Tag2 ("Lib")), "export_flag"), 0, (0)), 100000000, 0, -246), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Libobject")), "open_filter"), 0, (0)), 100000000, 0, -244); (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -245)]), 100000000, 0, -243)], (0)), 100000000, 0, -242), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -241), 0), 100000000, 0, -240), 0), 100000000, 0, -239), 0, (("vernac/declaremods.mli", 146, 4334, 4334), ("vernac/declaremods.mli", 146, 4334, 4429), 0), 0, Tag1 ("Declaremods", 32)), 0); (("declare_include", 1213), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("module_expr", 1174)), 0, (0)), 100000000, 0, -238)], (0)), 100000000, 0, -237), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -236), 0), 100000000, 0, -235), 0, (("vernac/declaremods.mli", 150, 4448, 4448), ("vernac/declaremods.mli", 150, 4448, 4494), 0), 0, Tag1 ("Declaremods", 33)), 0)]), 0, (("vernac/declaremods.mli", 87, 2636, 2636), ("vernac/declaremods.mli", 152, 4496, 4499), 0), Tag1 ("Declaremods", 34)), 0, 0); (("start_library", 1180), ((Tag1 (0, (Tag3 ((("library_name", 1176)), 0, (0)), 100000000, 0, -108), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -107), 0), 100000000, 0, -106), 0, (("vernac/declaremods.mli", 154, 4501, 4501), ("vernac/declaremods.mli", 154, 4501, 4541), 0), 0, Tag1 ("Declaremods", 35)), 0); (("end_library", 1181), ((Tag1 (("output_native_objects"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -105), (Tag1 (0, (Tag3 ((("library_name", 1176)), 0, (0)), 100000000, 0, -104), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Safe_typing")), "compiled_library"), 0, (0)), 100000000, 0, -100); (Tag3 ((("library_objects", 1177)), 0, (0)), 100000000, 0, -101); (Tag3 ((("library_objects", 1177)), 0, (0)), 100000000, 0, -102); (Tag3 (Tag1 ((Tag2 ("Nativelib")), "native_library"), 0, (0)), 100000000, 0, -103)]), 100000000, 0, -99), 0), 100000000, 0, -98), 0), 100000000, 0, -97), 0, (("vernac/declaremods.mli", 156, 4543, 4543), ("vernac/declaremods.mli", 158, 4609, 4702), 0), 0, Tag1 ("Declaremods", 36)), 0); (("append_end_library_hook", 1182), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -96), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -95), 0), 100000000, 0, -94), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -93), 0), 100000000, 0, -92), 0, (("vernac/declaremods.mli", 161, 4759, 4759), ("vernac/declaremods.mli", 161, 4759, 4811), 0), 0, Tag1 ("Declaremods", 37)), 0); (("iter_all_interp_segments", 1183), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Nametab")), "object_prefix"), 0, (0)), 100000000, 0, -91), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Libobject")), "t"), 0, (0)), 100000000, 0, -90), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -89), 0), 100000000, 0, -88), 0), 100000000, 0, -87), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -86), 0), 100000000, 0, -85), 0, (("vernac/declaremods.mli", 170, 5112, 5112), ("vernac/declaremods.mli", 171, 5143, 5199), 0), 0, Tag1 ("Declaremods", 38)), 0); (("debug_print_modtab", 1184), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -84), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -83), 0), 100000000, 0, -82), 0, (("vernac/declaremods.mli", 174, 5202, 5202), ("vernac/declaremods.mli", 174, 5202, 5239), 0), 0, Tag1 ("Declaremods", 39)), 0); (("process_module_binding", 1185), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "MBId"), "t"), 0, (0)), 100000000, 0, -81), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "module_alg_expr"), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constr")), "t"), 0, (0)), 100000000, 0, -78); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "AbstractContext"), "t"), 0, (0)), 100000000, 0, -80)], (0)), 100000000, 0, -79)]), 100000000, 0, -77)], (0)), 100000000, 0, -76), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -75), 0), 100000000, 0, -74), 0), 100000000, 0, -73), 0, (("vernac/declaremods.mli", 181, 5478, 5478), ("vernac/declaremods.mli", 182, 5507, 5598), 0), 0, Tag1 ("Declaremods", 41)), 0); (("import_module", 1186), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Libobject")), "open_filter"), 0, (0)), 100000000, 0, -72), (Tag1 (("export"), (Tag3 (Tag1 ((Tag2 ("Lib")), "export_flag"), 0, (0)), 100000000, 0, -71), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -70), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -69), 0), 100000000, 0, -68), 0), 100000000, 0, -67), 0), 100000000, 0, -66), 0, (("vernac/declaremods.mli", 186, 5628, 5628), ("vernac/declaremods.mli", 186, 5628, 5716), 0), 0, Tag1 ("Declaremods", 42)), 0); (("declare_module", 1187), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -65), (Tag1 (0, (Tag3 ((("module_params", 1173)), 0, (0)), 100000000, 0, -64), (Tag1 (0, (Tag3 ((("module_signature", 1171)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "module_ast"), 0, (0)), 100000000, 0, -62); (Tag3 ((("inline", 1172)), 0, (0)), 100000000, 0, -63)]), 100000000, 0, -61)], (0)), 100000000, 0, -60), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "module_ast"), 0, (0)), 100000000, 0, -58); (Tag3 ((("inline", 1172)), 0, (0)), 100000000, 0, -59)]), 100000000, 0, -57)], (0)), 100000000, 0, -56), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52), 0), 100000000, 0, -51), 0, (("vernac/declaremods.mli", 188, 5718, 5718), ("vernac/declaremods.mli", 193, 5866, 5877), 0), 0, Tag1 ("Declaremods", 43)), 0); (("start_module", 1188), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Lib")), "export"), 0, (0)), 100000000, 0, -50), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -49), (Tag1 (0, (Tag3 ((("module_params", 1173)), 0, (0)), 100000000, 0, -48), (Tag1 (0, (Tag3 ((("module_signature", 1171)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "module_ast"), 0, (0)), 100000000, 0, -46); (Tag3 ((("inline", 1172)), 0, (0)), 100000000, 0, -47)]), 100000000, 0, -45)], (0)), 100000000, 0, -44), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -43), 0), 100000000, 0, -42), 0), 100000000, 0, -41), 0), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("vernac/declaremods.mli", 195, 5879, 5879), ("vernac/declaremods.mli", 199, 5996, 6007), 0), 0, Tag1 ("Declaremods", 44)), 0); (("end_module", 1189), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -38), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -37), 0), 100000000, 0, -36), 0, (("vernac/declaremods.mli", 201, 6009, 6009), ("vernac/declaremods.mli", 201, 6009, 6043), 0), 0, Tag1 ("Declaremods", 45)), 0); (("declare_modtype", 1190), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -35), (Tag1 (0, (Tag3 ((("module_params", 1173)), 0, (0)), 100000000, 0, -34), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "module_ast"), 0, (0)), 100000000, 0, -32); (Tag3 ((("inline", 1172)), 0, (0)), 100000000, 0, -33)]), 100000000, 0, -31)], (0)), 100000000, 0, -30), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "module_ast"), 0, (0)), 100000000, 0, -28); (Tag3 ((("inline", 1172)), 0, (0)), 100000000, 0, -29)]), 100000000, 0, -27)], (0)), 100000000, 0, -26), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -25), 0), 100000000, 0, -24), 0), 100000000, 0, -23), 0), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("vernac/declaremods.mli", 203, 6045, 6045), ("vernac/declaremods.mli", 208, 6182, 6193), 0), 0, Tag1 ("Declaremods", 46)), 0); (("start_modtype", 1191), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -20), (Tag1 (0, (Tag3 ((("module_params", 1173)), 0, (0)), 100000000, 0, -19), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "module_ast"), 0, (0)), 100000000, 0, -17); (Tag3 ((("inline", 1172)), 0, (0)), 100000000, 0, -18)]), 100000000, 0, -16)], (0)), 100000000, 0, -15), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("vernac/declaremods.mli", 210, 6195, 6195), ("vernac/declaremods.mli", 214, 6287, 6298), 0), 0, Tag1 ("Declaremods", 47)), 0); (("end_modtype", 1192), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("vernac/declaremods.mli", 216, 6300, 6300), ("vernac/declaremods.mli", 216, 6300, 6335), 0), 0, Tag1 ("Declaremods", 48)), 0); (("declare_include", 1193), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "module_ast"), 0, (0)), 100000000, 0, -6); (Tag3 ((("inline", 1172)), 0, (0)), 100000000, 0, -7)]), 100000000, 0, -5)], (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("vernac/declaremods.mli", 218, 6337, 6337), ("vernac/declaremods.mli", 220, 6402, 6408), 0), 0, Tag1 ("Declaremods", 49)), 0)], "Declaremods", [("Declaremods", ("\019d|\168<\144\239o\017\222\248K^\157\198\179")); ("Z", ("\253\196\2168\027\199O\134\220\218\031'\1484\233o")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Unix", (":B72R\011\005Sj\189)\011\239PH\254")); ("UnivSubst", ("\190qu\031mc\130\181\003G]\132\"\219m)")); ("UnivProblem", ("6'\161\018\181\001.\253\000\141a6\171\1727\155")); ("UnivNames", ("%\151_\209%+JM$n\001\232\194n\178N")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UState", ("SD\203\215|\136\n\251\239\208\148\215C\n\167\005")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Summary", ("\148G\135\226\024L3\246\021\028U\146\164`\253\250")); ("Store", ("/dT\252\145\179pq\216{\181\206\190K+U")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Random", ("\020\005Xq\171\026\218\152X\135\254\023\133zK\200")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Section", ("\245\207\b\021\142v=\155#w\246}\"4b\006")); ("Safe_typing", (")\250?\164\145\132\241\127\186\152h+\145\"\237l")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Pattern", ("\195C\140Wb=\022\222\208\227^K\003\020\215X")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("NumTok", ("vd\023^\251\244B\166\145'\156\196-0\027\169")); ("Nativevalues", ("8:\007\025e\226c,\001\171\146#l\210\171\152")); ("Nativelib", ("V\239\205Y1\147E:,\176\196Hy\1483|")); ("Nativecode", ("\190\185\255\006m\012\210\163\138Rz\247\15283\183")); ("Nametab", ("1\018\163\254\225\2178\025DI\0271Q\198\134\140")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Namegen", ("\187\222\224T\255\020\1808-\212*\164\131\177\157x")); ("Monad", ("\244\171T\157\194p\187\160\149\195{\132\222\020\253\148")); ("Modintern", ("F\222V\246R\143{\n\240\004;;;\011\026\223")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Libobject", ("\132}t\226hl\213L\210\172\167pc\012~\129")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Lib", ("8\018\021\210\020\136$\149\164=\007\002\218\026RX")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hook", ("\183\194\223\003\155\169',\187\240a;E\b\1396")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Gramlib__Stream", ("\248\\H\205_76\253\136\146\200\031\165\021=t")); ("Gramlib", ("\154\143\210e\021i\246\176\224\194\220\217\007\145\139A")); ("Globnames", ("W\004\172T\214\181H\220\232\160LSW\006\130\226")); ("Glob_term", ("\165=a\227\160\153.\021_$\232\209T\236\153O")); ("Genlambda", ("\170}\024\241\141\222\136S\169\219\2212i\134KI")); ("Genarg", ("\1434\015\001\152\196\005s\156\136\195\185\247\b3\t")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evd", ("\211\205p\193\216\129r\006\239oN\142ar\196\175")); ("Evar_kinds", ("\023L\186\132\218}\254\221\185\198\220\200h\003{\021")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Entries", ("\172\201\198\221Ap\027_{\174\141C\021\";p")); ("EConstr", ("\201aW\156\157;N\004\201V\208\006L\166\211)")); ("Dyn", ("\131z`\205v\2306\007x\027&K.?;\169")); ("Deprecation", ("\226:\146\245\190;\1929\254@\247a\218\244\134\189")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("DAst", ("\224/\200)\007\184ni\134\b\139\204\241\005w\212")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conversion", ("\158\150&\195M\tv\127|\029\158RRK\211A")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constrexpr", ("p'r\245\184chL\183\249\"\213]\1741\237")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CWarnings", ("\132\220\150\227\215\239t\217\132\220'JX\188\246c")); ("CUnix", ("\140Zl\153\167\011J\015\005|th\247OTu")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CDebug", ("^4\210p7\239!3\138\138\213?\239`\250\157")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])
val declare_include : (Constrexpr.module_ast * inline) list -> unit

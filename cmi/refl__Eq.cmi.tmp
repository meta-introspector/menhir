module Equaler : sig type ('a, 'b) t = 'a -> 'b -> bool end
module Equalers :
  sig
    type ('a, 'b, 'occurrence) item =
      ('a, 'b, 'occurrence) Refl__Tools.BinaryVector(Equaler).item =
        None : ('c, 'd, [ `Absent ]) item
      | Some : ('a, 'b) Equaler.t -> ('a, 'b, 'e) item
    type ('a, 'b, 'occurrences) t =
      ('a, 'b, 'occurrences) Refl__Tools.BinaryVector(Equaler).t =
        [] : (unit, unit, unit) t
      | (::) : ('head_a, 'head_b, 'occurrence) item *
          ('tail_a, 'tail_b, 'occurrences) t -> ('head_a * 'tail_a,
                                                 'head_b * 'tail_b,
                                                 'occurrence * 'occurrences)
                                                t
    val get :
      ('index, 'a, 'value_a, 'positive, 'occurrences) Refl__.Desc.variable ->
      ('index, 'b, 'value_b, 'positive, 'occurrences) Refl__.Desc.variable ->
      ('a, 'b, 'occurrences) t -> ('value_a, 'value_b) Equaler.t
    val make_transfer :
      ('source, 'sub, 'arg) Refl__.Desc.transfer_arguments ->
      ('a, 'b, 'source) t ->
      (('a, 'b, 'arg) t, ('sub, [ `Absent ]) Refl__.Desc.eq) result
    type ('arity_a, 'arity_b, 'rec_group, 'kinds, 'gadt_a, 'gadt_b) make =
      ('arity_a, 'arity_b, 'rec_group, 'kinds, 'gadt_a, 'gadt_b)
      Refl__Tools.BinaryVector(Equaler).make = {
      f :
        'a 'b 'structure 'ap 'an 'ad.
          ('a, 'structure, 'arity_a, 'rec_group, 'kinds, 'ap, 'an, 'ad,
           'gadt_a)
          Refl__.Desc.desc ->
          ('b, 'structure, 'arity_b, 'rec_group, 'kinds, 'ap, 'an, 'ad,
           'gadt_b)
          Refl__.Desc.desc ->
          ('arity_a, 'arity_b, 'ad) t -> ('a, 'b) Equaler.t;
    }
    val make_transfer_vector :
      ('arity_a, 'arity_b, 'rec_group, 'kinds, 'gadt_a, 'gadt_b) make ->
      ('types_a, 'structures, 'arity_a, 'rec_group, 'kinds, 'arguments,
       'gadt_a)
      Refl__.Desc.vector ->
      ('types_b, 'structures, 'arity_b, 'rec_group, 'kinds, 'arguments,
       'gadt_b)
      Refl__.Desc.vector ->
      ('positive, 'negative, 'direct, 'subpositive, 'subnegative, 'subdirect,
       'arguments)
      Refl__.Desc.transfer ->
      ('arity_a, 'arity_b, 'direct) t -> ('types_a, 'types_b, 'subdirect) t
    val skip :
      ('variables, 'skip_variables) Refl__.Desc.skip_vector ->
      ('a, 'b, 'variables) t -> ('a, 'b, 'skip_variables) t
    val make :
      ('a, 'b, 'c, 'd, 'e, 'f) make ->
      ('g, 'h, 'a, 'c, 'd, 'i, 'e) Refl__.Desc.vector ->
      ('j, 'h, 'b, 'c, 'd, 'i, 'f) Refl__.Desc.vector ->
      ('k, 'l, 'm, 'n, 'o, 'p, 'i) Refl__.Desc.transfer_skip ->
      ('a, 'b, 'm) t -> ('g, 'j, 'p) t
    type 'presence any =
      'presence Refl__Tools.BinaryVector(Equaler).any =
        None : [ `Absent ] any
      | Some : { item : 'a 'b. ('a, 'b) Equaler.t; } -> 'c any
    val append :
      'presence any ->
      ('presence, 'directs) Refl__.Desc.presences ->
      ('count, 'directs) Refl__.Desc.length ->
      ('directs, 'direct, 'subdirect) Refl__.Desc.append ->
      ('count, 'types_a) Refl__.Desc.length ->
      ('types_a, 'a, 'sub_a) Refl__.Desc.append ->
      ('count, 'types_b) Refl__.Desc.length ->
      ('types_b, 'b, 'sub_b) Refl__.Desc.append ->
      ('a, 'b, 'direct) t -> ('sub_a, 'sub_b, 'subdirect) t
  end
type ('a, 'b) hook_fun =
    'a Refl__.Desc.refl ->
    'b Refl__.Desc.refl ->
    (?hook:hook -> ('a, 'b) Equaler.t) -> ('a, 'b) Equaler.t
and hook = { hook : 'a 'b. ('a, 'b) hook_fun; }
val equal_poly :
  ?hook:hook ->
  ('a, 'structure, 'arity_a, 'rec_group,
   [< Refl__.Desc.Kinds.comparable
    > `Array `Attributes `Bool `Bytes `Char `Constr `Exists `Float `Int
      `Int32 `Int64 `Lazy `MapOpaque `Nativeint `Object `Opaque `Record
      `String `Tuple `Variable `Variant ]
   as 'c, 'positive, 'negative, 'direct, 'gadt_a)
  Refl__.Desc.desc ->
  ('b, 'structure, 'arity_b, 'rec_group, 'c, 'positive, 'negative, 'direct,
   'gadt_b)
  Refl__.Desc.desc ->
  ('arity_a, 'arity_b, 'direct) Equalers.t -> ('a, 'b) Equaler.t
val equal :
  ?hook:hook ->
  ('a, 'b, 'c, 'd,
   [< Refl__.Desc.Kinds.comparable
    > `Array `Attributes `Bool `Bytes `Char `Constr `Exists `Float `Int
      `Int32 `Int64 `Lazy `MapOpaque `Nativeint `Object `Opaque `Record
      `String `Tuple `Variable `Variant ],
   'e, 'f, 'g, 'h)
  Refl__.Desc.desc ->("DEBUG:rule", [Tag3 (("Equaler", 15044), 0, (Tag1 ([Tag1 (("t", 15050), ([((("a")), 100000000, 0, -63); ((("b")), 100000000, 0, -62)], 2, 0, 1, ((Tag1 (0, ((("a")), 100000000, 0, -63), (Tag1 (0, ((("b")), 100000000, 0, -62), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -61), 0), 100000000, 0, -60), 0), 100000000, 0, -59)), [46; 46], [0; 0], 0, 0, (("runtime/eq.ml", 6, 47, 49), ("runtime/eq.ml", 6, 47, 83), 0), 0, 0, 0, Tag1 ("Refl__Eq", 37)), 1, 0)]), 0, (("runtime/eq.ml", 5, 23, 23), ("runtime/eq.ml", 7, 84, 87), 0), Tag1 ("Refl__Eq", 38)), 0, 0); Tag3 (("Equalers", 15045), 0, (Tag1 ([Tag1 (("item", 15051), ([((("a")), 100000000, 0, -238); ((("b")), 100000000, 0, -239); ((("occurrence")), 100000000, 0, -240)], 3, Tag1 ([(("None", 1219), (0), ((Tag3 ((("item", 15051)), [((0), 100000000, 0, -242); ((0), 100000000, 0, -243); (Tag8 (([("Absent", (0))], (0, 100000000, 0, -245), 1, 0, 0)), 100000000, 0, -244)], (0)), 100000000, 0, -241)), (("runtime/tools.ml", 413, 13459, 13463), ("runtime/tools.ml", 413, 13459, 13494), 0), 0, Tag1 ("Refl__Tools", 1299)); (("Some", 1220), ([(Tag3 (Tag1 ((("Equaler", 15044)), "t"), [((("a")), 100000000, 0, -247); ((("b")), 100000000, 0, -248)], (0)), 100000000, 0, -250)]), ((Tag3 ((("item", 15051)), [((("a")), 100000000, 0, -247); ((("b")), 100000000, 0, -248); ((0), 100000000, 0, -249)], (0)), 100000000, 0, -246)), (("runtime/tools.ml", 414, 13495, 13499), ("runtime/tools.ml", 414, 13495, 13540), 0), 0, Tag1 ("Refl__Tools", 1300))], 0), 1, ((Tag3 (Tag1 (Tag2 (Tag1 ((Tag2 ("Refl__Tools")), "BinaryVector"), (("Equaler", 15044))), "item"), [((("a")), 100000000, 0, -238); ((("b")), 100000000, 0, -239); ((("occurrence")), 100000000, 0, -240)], (0)), 100000000, 0, -237)), [15; 15; 63], [0; 0; 0], 0, 0, (("runtime/tools.ml", 412, 13423, 13425), ("runtime/tools.ml", 414, 13495, 13540), 0), 0, 0, 0, Tag1 ("Refl__Tools", 1298)), 1, 0); Tag1 (("t", 15052), ([((("a")), 100000000, 0, -218); ((("b")), 100000000, 0, -219); ((("occurrences")), 100000000, 0, -220)], 3, Tag1 ([(("[]", 1222), (0), ((Tag3 ((("t", 15052)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -222); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -223); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -224)], (0)), 100000000, 0, -221)), (("runtime/tools.ml", 417, 13576, 13580), ("runtime/tools.ml", 417, 13576, 13607), 0), 0, Tag1 ("Refl__Tools", 1302)); (("::", 1223), ([(Tag3 ((("item", 15051)), [((("head_a")), 100000000, 0, -227); ((("head_b")), 100000000, 0, -230); ((("occurrence")), 100000000, 0, -233)], (0)), 100000000, 0, -235); (Tag3 ((("t", 15052)), [((("tail_a")), 100000000, 0, -228); ((("tail_b")), 100000000, 0, -231); ((("occurrences")), 100000000, 0, -234)], (0)), 100000000, 0, -236)]), ((Tag3 ((("t", 15052)), [(Tag2 ([((("head_a")), 100000000, 0, -227); ((("tail_a")), 100000000, 0, -228)]), 100000000, 0, -226); (Tag2 ([((("head_b")), 100000000, 0, -230); ((("tail_b")), 100000000, 0, -231)]), 100000000, 0, -229); (Tag2 ([((("occurrence")), 100000000, 0, -233); ((("occurrences")), 100000000, 0, -234)]), 100000000, 0, -232)], (0)), 100000000, 0, -225)), (("runtime/tools.ml", 418, 13608, 13612), ("runtime/tools.ml", 420, 13706, 13782), 0), 0, Tag1 ("Refl__Tools", 1303))], 0), 1, ((Tag3 (Tag1 (Tag2 (Tag1 ((Tag2 ("Refl__Tools")), "BinaryVector"), (("Equaler", 15044))), "t"), [((("a")), 100000000, 0, -218); ((("b")), 100000000, 0, -219); ((("occurrences")), 100000000, 0, -220)], (0)), 100000000, 0, -217)), [63; 63; 63], [0; 0; 0], 0, 0, (("runtime/tools.ml", 416, 13542, 13544), ("runtime/tools.ml", 420, 13706, 13782), 0), 0, 0, 0, Tag1 ("Refl__Tools", 1301)), 1, 0); (("get", 15053), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "variable"), [((("index")), 100000000, 0, -214); ((("a")), 100000000, 0, -210); ((("value_a")), 100000000, 0, -207); ((("positive")), 100000000, 0, -215); ((("occurrences")), 100000000, 0, -212)], (0)), 100000000, 0, -216), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "variable"), [((("index")), 100000000, 0, -214); ((("b")), 100000000, 0, -211); ((("value_b")), 100000000, 0, -208); ((("positive")), 100000000, 0, -215); ((("occurrences")), 100000000, 0, -212)], (0)), 100000000, 0, -213), (Tag1 (0, (Tag3 ((("t", 15052)), [((("a")), 100000000, 0, -210); ((("b")), 100000000, 0, -211); ((("occurrences")), 100000000, 0, -212)], (0)), 100000000, 0, -209), (Tag3 (Tag1 ((("Equaler", 15044)), "t"), [((("value_a")), 100000000, 0, -207); ((("value_b")), 100000000, 0, -208)], (0)), 100000000, 0, -206), 0), 100000000, 0, -205), 0), 100000000, 0, -204), 0), 100000000, 0, -203), 0, (("runtime/tools.ml", 422, 13784, 13794), ("runtime/tools.ml", 422, 13784, 13797), 0), 0, Tag1 ("Refl__Tools", 1304)), 0); (("make_transfer", 15054), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "transfer_arguments"), [((("source")), 100000000, 0, -201); ((("sub")), 100000000, 0, -197); ((("arg")), 100000000, 0, -195)], (0)), 100000000, 0, -202), (Tag1 (0, (Tag3 ((("t", 15052)), [((("a")), 100000000, 0, -193); ((("b")), 100000000, 0, -194); ((("source")), 100000000, 0, -201)], (0)), 100000000, 0, -200), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((("t", 15052)), [((("a")), 100000000, 0, -193); ((("b")), 100000000, 0, -194); ((("arg")), 100000000, 0, -195)], (0)), 100000000, 0, -192); (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "eq"), [((("sub")), 100000000, 0, -197); (Tag8 (([("Absent", (0))], (0, 100000000, 0, -199), 1, 0, 0)), 100000000, 0, -198)], (0)), 100000000, 0, -196)], (0)), 100000000, 0, -191), 0), 100000000, 0, -190), 0), 100000000, 0, -189), 0, (("runtime/tools.ml", 432, 14226, 14236), ("runtime/tools.ml", 432, 14226, 14249), 0), 0, Tag1 ("Refl__Tools", 1407)), 0); Tag1 (("make", 15055), ([((("arity_a")), 100000000, 0, -169); ((("arity_b")), 100000000, 0, -170); ((("rec_group")), 100000000, 0, -171); ((("kinds")), 100000000, 0, -172); ((("gadt_a")), 100000000, 0, -173); ((("gadt_b")), 100000000, 0, -174)], 6, [[(("f", 1345), 0, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [(Tag9 (("a")), 100000000, 0, -176); (Tag9 (("structure")), 100000000, 0, -178); ((("arity_a")), 100000000, 0, -169); ((("rec_group")), 100000000, 0, -171); ((("kinds")), 100000000, 0, -172); (Tag9 (("ap")), 100000000, 0, -179); (Tag9 (("an")), 100000000, 0, -180); (Tag9 (("ad")), 100000000, 0, -181); ((("gadt_a")), 100000000, 0, -173)], (0)), 100000000, 0, -188), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [(Tag9 (("b")), 100000000, 0, -177); (Tag9 (("structure")), 100000000, 0, -178); ((("arity_b")), 100000000, 0, -170); ((("rec_group")), 100000000, 0, -171); ((("kinds")), 100000000, 0, -172); (Tag9 (("ap")), 100000000, 0, -179); (Tag9 (("an")), 100000000, 0, -180); (Tag9 (("ad")), 100000000, 0, -181); ((("gadt_b")), 100000000, 0, -174)], (0)), 100000000, 0, -187), (Tag1 (0, (Tag3 ((("t", 15052)), [((("arity_a")), 100000000, 0, -169); ((("arity_b")), 100000000, 0, -170); (Tag9 (("ad")), 100000000, 0, -181)], (0)), 100000000, 0, -186), (Tag3 (Tag1 ((("Equaler", 15044)), "t"), [(Tag9 (("a")), 100000000, 0, -176); (Tag9 (("b")), 100000000, 0, -177)], (0)), 100000000, 0, -185), 0), 100000000, 0, -184), 0), 100000000, 0, -183), 0), 100000000, 0, -182), [(Tag9 (("a")), 100000000, 0, -176); (Tag9 (("b")), 100000000, 0, -177); (Tag9 (("structure")), 100000000, 0, -178); (Tag9 (("ap")), 100000000, 0, -179); (Tag9 (("an")), 100000000, 0, -180); (Tag9 (("ad")), 100000000, 0, -181)]), 100000000, 0, -175), (("runtime/tools.ml", 453, 15037, 15043), ("runtime/tools.ml", 457, 15254, 15316), 0), 0, Tag1 ("Refl__Tools", 1502))]], 1, ((Tag3 (Tag1 (Tag2 (Tag1 ((Tag2 ("Refl__Tools")), "BinaryVector"), (("Equaler", 15044))), "make"), [((("arity_a")), 100000000, 0, -169); ((("arity_b")), 100000000, 0, -170); ((("rec_group")), 100000000, 0, -171); ((("kinds")), 100000000, 0, -172); ((("gadt_a")), 100000000, 0, -173); ((("gadt_b")), 100000000, 0, -174)], (0)), 100000000, 0, -168)), [63; 63; 15; 63; 15; 15], [0; 0; 0; 0; 0; 0], 0, 0, (("runtime/tools.ml", 452, 14962, 14964), ("runtime/tools.ml", 458, 15317, 15322), 0), 0, 0, 1, Tag1 ("Refl__Tools", 1501)), 1, 0); (("make_transfer_vector", 15056), ((Tag1 (0, (Tag3 ((("make", 15055)), [((("arity_a")), 100000000, 0, -151); ((("arity_b")), 100000000, 0, -152); ((("rec_group")), 100000000, 0, -162); ((("kinds")), 100000000, 0, -163); ((("gadt_a")), 100000000, 0, -166); ((("gadt_b")), 100000000, 0, -164)], (0)), 100000000, 0, -167), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "vector"), [((("types_a")), 100000000, 0, -147); ((("structures")), 100000000, 0, -161); ((("arity_a")), 100000000, 0, -151); ((("rec_group")), 100000000, 0, -162); ((("kinds")), 100000000, 0, -163); ((("arguments")), 100000000, 0, -159); ((("gadt_a")), 100000000, 0, -166)], (0)), 100000000, 0, -165), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "vector"), [((("types_b")), 100000000, 0, -148); ((("structures")), 100000000, 0, -161); ((("arity_b")), 100000000, 0, -152); ((("rec_group")), 100000000, 0, -162); ((("kinds")), 100000000, 0, -163); ((("arguments")), 100000000, 0, -159); ((("gadt_b")), 100000000, 0, -164)], (0)), 100000000, 0, -160), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "transfer"), [((("positive")), 100000000, 0, -155); ((("negative")), 100000000, 0, -156); ((("direct")), 100000000, 0, -153); ((("subpositive")), 100000000, 0, -157); ((("subnegative")), 100000000, 0, -158); ((("subdirect")), 100000000, 0, -149); ((("arguments")), 100000000, 0, -159)], (0)), 100000000, 0, -154), (Tag1 (0, (Tag3 ((("t", 15052)), [((("arity_a")), 100000000, 0, -151); ((("arity_b")), 100000000, 0, -152); ((("direct")), 100000000, 0, -153)], (0)), 100000000, 0, -150), (Tag3 ((("t", 15052)), [((("types_a")), 100000000, 0, -147); ((("types_b")), 100000000, 0, -148); ((("subdirect")), 100000000, 0, -149)], (0)), 100000000, 0, -146), 0), 100000000, 0, -145), 0), 100000000, 0, -144), 0), 100000000, 0, -143), 0), 100000000, 0, -142), 0), 100000000, 0, -141), 0, (("runtime/tools.ml", 460, 15324, 15334), ("runtime/tools.ml", 460, 15324, 15354), 0), 0, Tag1 ("Refl__Tools", 1503)), 0); (("skip", 15057), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "skip_vector"), [((("variables")), 100000000, 0, -139); ((("skip_variables")), 100000000, 0, -137)], (0)), 100000000, 0, -140), (Tag1 (0, (Tag3 ((("t", 15052)), [((("a")), 100000000, 0, -135); ((("b")), 100000000, 0, -136); ((("variables")), 100000000, 0, -139)], (0)), 100000000, 0, -138), (Tag3 ((("t", 15052)), [((("a")), 100000000, 0, -135); ((("b")), 100000000, 0, -136); ((("skip_variables")), 100000000, 0, -137)], (0)), 100000000, 0, -134), 0), 100000000, 0, -133), 0), 100000000, 0, -132), 0, (("runtime/tools.ml", 485, 16403, 16413), ("runtime/tools.ml", 485, 16403, 16417), 0), 0, Tag1 ("Refl__Tools", 1608)), 0); (("make", 15058), ((Tag1 (0, (Tag3 ((("make", 15055)), [((0), 100000000, 0, -115); ((0), 100000000, 0, -116); ((0), 100000000, 0, -126); ((0), 100000000, 0, -127); ((0), 100000000, 0, -130); ((0), 100000000, 0, -128)], (0)), 100000000, 0, -131), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "vector"), [((0), 100000000, 0, -111); ((0), 100000000, 0, -125); ((0), 100000000, 0, -115); ((0), 100000000, 0, -126); ((0), 100000000, 0, -127); ((0), 100000000, 0, -123); ((0), 100000000, 0, -130)], (0)), 100000000, 0, -129), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "vector"), [((0), 100000000, 0, -112); ((0), 100000000, 0, -125); ((0), 100000000, 0, -116); ((0), 100000000, 0, -126); ((0), 100000000, 0, -127); ((0), 100000000, 0, -123); ((0), 100000000, 0, -128)], (0)), 100000000, 0, -124), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "transfer_skip"), [((0), 100000000, 0, -119); ((0), 100000000, 0, -120); ((0), 100000000, 0, -117); ((0), 100000000, 0, -121); ((0), 100000000, 0, -122); ((0), 100000000, 0, -113); ((0), 100000000, 0, -123)], (0)), 100000000, 0, -118), (Tag1 (0, (Tag3 ((("t", 15052)), [((0), 100000000, 0, -115); ((0), 100000000, 0, -116); ((0), 100000000, 0, -117)], (0)), 100000000, 0, -114), (Tag3 ((("t", 15052)), [((0), 100000000, 0, -111); ((0), 100000000, 0, -112); ((0), 100000000, 0, -113)], (0)), 100000000, 0, -110), 0), 100000000, 0, -109), 0), 100000000, 0, -108), 0), 100000000, 0, -107), 0), 100000000, 0, -106), 0), 100000000, 0, -105), 0, (("runtime/tools.ml", 497, 16769, 16775), ("runtime/tools.ml", 497, 16769, 16779), 0), 0, Tag1 ("Refl__Tools", 1655)), 0); Tag1 (("any", 15059), ([((("presence")), 100000000, 0, -95)], 1, Tag1 ([(("None", 1456), (0), ((Tag3 ((("any", 15059)), [(Tag8 (([("Absent", (0))], (0, 100000000, 0, -98), 1, 0, 0)), 100000000, 0, -97)], (0)), 100000000, 0, -96)), (("runtime/tools.ml", 503, 16986, 16990), ("runtime/tools.ml", 503, 16986, 17012), 0), 0, Tag1 ("Refl__Tools", 1667)); (("Some", 1457), Tag1 ([(("item", 1458), 0, (Tag10 ((Tag3 (Tag1 ((("Equaler", 15044)), "t"), [(Tag9 (("a")), 100000000, 0, -102); (Tag9 (("b")), 100000000, 0, -103)], (0)), 100000000, 0, -104), [(Tag9 (("a")), 100000000, 0, -102); (Tag9 (("b")), 100000000, 0, -103)]), 100000000, 0, -101), (("runtime/tools.ml", 505, 17028, 17038), ("runtime/tools.ml", 505, 17028, 17066), 0), 0, Tag1 ("Refl__Tools", 1668))]), ((Tag3 ((("any", 15059)), [((0), 100000000, 0, -100)], (0)), 100000000, 0, -99)), (("runtime/tools.ml", 504, 17013, 17017), ("runtime/tools.ml", 506, 17067, 17085), 0), 0, Tag1 ("Refl__Tools", 1669))], 0), 1, ((Tag3 (Tag1 (Tag2 (Tag1 ((Tag2 ("Refl__Tools")), "BinaryVector"), (("Equaler", 15044))), "any"), [((("presence")), 100000000, 0, -95)], (0)), 100000000, 0, -94)), [63], [0], 0, 0, (("runtime/tools.ml", 502, 16963, 16965), ("runtime/tools.ml", 506, 17067, 17085), 0), 0, 0, 0, Tag1 ("Refl__Tools", 1666)), 1, 0); (("append", 15060), ((Tag1 (0, (Tag3 ((("any", 15059)), [((("presence")), 100000000, 0, -92)], (0)), 100000000, 0, -93), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "presences"), [((("presence")), 100000000, 0, -92); ((("directs")), 100000000, 0, -89)], (0)), 100000000, 0, -91), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "length"), [((("count")), 100000000, 0, -84); ((("directs")), 100000000, 0, -89)], (0)), 100000000, 0, -90), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "append"), [((("directs")), 100000000, 0, -89); ((("direct")), 100000000, 0, -80); ((("subdirect")), 100000000, 0, -76)], (0)), 100000000, 0, -88), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "length"), [((("count")), 100000000, 0, -84); ((("types_a")), 100000000, 0, -86)], (0)), 100000000, 0, -87), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "append"), [((("types_a")), 100000000, 0, -86); ((("a")), 100000000, 0, -78); ((("sub_a")), 100000000, 0, -74)], (0)), 100000000, 0, -85), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "length"), [((("count")), 100000000, 0, -84); ((("types_b")), 100000000, 0, -82)], (0)), 100000000, 0, -83), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "append"), [((("types_b")), 100000000, 0, -82); ((("b")), 100000000, 0, -79); ((("sub_b")), 100000000, 0, -75)], (0)), 100000000, 0, -81), (Tag1 (0, (Tag3 ((("t", 15052)), [((("a")), 100000000, 0, -78); ((("b")), 100000000, 0, -79); ((("direct")), 100000000, 0, -80)], (0)), 100000000, 0, -77), (Tag3 ((("t", 15052)), [((("sub_a")), 100000000, 0, -74); ((("sub_b")), 100000000, 0, -75); ((("subdirect")), 100000000, 0, -76)], (0)), 100000000, 0, -73), 0), 100000000, 0, -72), 0), 100000000, 0, -71), 0), 100000000, 0, -70), 0), 100000000, 0, -69), 0), 100000000, 0, -68), 0), 100000000, 0, -67), 0), 100000000, 0, -66), 0), 100000000, 0, -65), 0), 100000000, 0, -64), 0, (("runtime/tools.ml", 508, 17087, 17097), ("runtime/tools.ml", 508, 17087, 17103), 0), 0, Tag1 ("Refl__Tools", 1676)), 0)]), 0, (("runtime/eq.ml", 9, 89, 89), ("runtime/eq.ml", 9, 89, 129), 0), Tag1 ("Refl__Eq", 41)), 0, 0); Tag1 (("hook_fun", 15046), ([((("a")), 100000000, 0, -51); ((("b")), 100000000, 0, -52)], 2, 0, 1, ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "refl"), [((("a")), 100000000, 0, -51)], (0)), 100000000, 0, -58), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "refl"), [((("b")), 100000000, 0, -52)], (0)), 100000000, 0, -57), (Tag1 (0, (Tag1 (Tag1 ("hook"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("hook", 15047)), 0, (0)), 100000000, 0, -56)], (0)), 100000000, 0, -55), (Tag3 (Tag1 ((("Equaler", 15044)), "t"), [((("a")), 100000000, 0, -51); ((("b")), 100000000, 0, -52)], (0)), 100000000, 0, -54), 0), 100000000, 0, -53), (Tag3 (Tag1 ((("Equaler", 15044)), "t"), [((("a")), 100000000, 0, -51); ((("b")), 100000000, 0, -52)], (0)), 100000000, 0, -50), 0), 100000000, 0, -49), 0), 100000000, 0, -48), 0), 100000000, 0, -47)), [63; 63], [0; 0], 0, 0, (("runtime/eq.ml", 11, 131, 131), ("runtime/eq.ml", 13, 222, 248), 0), 0, 0, 0, Tag1 ("Refl__Eq", 42)), 1, 0); Tag1 (("hook", 15047), (0, 0, [[(("hook", 461), 0, (Tag10 ((Tag3 ((("hook_fun", 15046)), [(Tag9 (("a")), 100000000, 0, -44); (Tag9 (("b")), 100000000, 0, -45)], (0)), 100000000, 0, -46), [(Tag9 (("a")), 100000000, 0, -44); (Tag9 (("b")), 100000000, 0, -45)]), 100000000, 0, -43), (("runtime/eq.ml", 14, 249, 262), ("runtime/eq.ml", 14, 249, 294), 0), 0, Tag1 ("Refl__Eq", 44))]], 1, 0, 0, 0, 0, 0, (("runtime/eq.ml", 14, 249, 249), ("runtime/eq.ml", 14, 249, 296), 0), 0, 0, 1, Tag1 ("Refl__Eq", 43)), 2, 0); (("equal_poly", 15048), ((Tag1 (Tag1 ("hook"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("hook", 15047)), 0, (0)), 100000000, 0, -42)], (0)), 100000000, 0, -41), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((("a")), 100000000, 0, -25); ((("structure")), 100000000, 0, -32); ((("arity_a")), 100000000, 0, -28); ((("rec_group")), 100000000, 0, -33); (Tag8 (([("Absent", Tag1 (1, 0, 0, (1))); ("Array", (0)); ("Attributes", (0)); ("Bool", (0)); ("Bytes", (0)); ("Char", (0)); ("Constr", (0)); ("Exists", (0)); ("Float", (0)); ("GADT", Tag1 (1, 0, 0, (1))); ("Int", (0)); ("Int32", (0)); ("Int64", (0)); ("Lazy", (0)); ("MapOpaque", (0)); ("Name", Tag1 (1, 0, 0, (1))); ("Nativeint", (0)); ("Object", (0)); ("Opaque", (0)); ("Record", (0)); ("String", (0)); ("Tuple", (0)); ("Unit", Tag1 (1, 0, 0, (1))); ("Variable", (0)); ("Variant", (0))], ((0), 100000000, 0, -35), 1, 0, ([Tag1 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "Kinds"), "comparable")]))), 100000000, 0, -34); ((("positive")), 100000000, 0, -36); ((("negative")), 100000000, 0, -37); ((("direct")), 100000000, 0, -30); ((("gadt_a")), 100000000, 0, -40)], (0)), 100000000, 0, -39), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((("b")), 100000000, 0, -26); ((("structure")), 100000000, 0, -32); ((("arity_b")), 100000000, 0, -29); ((("rec_group")), 100000000, 0, -33); (Tag8 (([("Absent", Tag1 (1, 0, 0, (1))); ("Array", (0)); ("Attributes", (0)); ("Bool", (0)); ("Bytes", (0)); ("Char", (0)); ("Constr", (0)); ("Exists", (0)); ("Float", (0)); ("GADT", Tag1 (1, 0, 0, (1))); ("Int", (0)); ("Int32", (0)); ("Int64", (0)); ("Lazy", (0)); ("MapOpaque", (0)); ("Name", Tag1 (1, 0, 0, (1))); ("Nativeint", (0)); ("Object", (0)); ("Opaque", (0)); ("Record", (0)); ("String", (0)); ("Tuple", (0)); ("Unit", Tag1 (1, 0, 0, (1))); ("Variable", (0)); ("Variant", (0))], ((0), 100000000, 0, -35), 1, 0, ([Tag1 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "Kinds"), "comparable")]))), 100000000, 0, -34); ((("positive")), 100000000, 0, -36); ((("negative")), 100000000, 0, -37); ((("direct")), 100000000, 0, -30); ((("gadt_b")), 100000000, 0, -38)], (0)), 100000000, 0, -31), (Tag1 (0, (Tag3 (Tag1 ((("Equalers", 15045)), "t"), [((("arity_a")), 100000000, 0, -28); ((("arity_b")), 100000000, 0, -29); ((("direct")), 100000000, 0, -30)], (0)), 100000000, 0, -27), (Tag3 (Tag1 ((("Equaler", 15044)), "t"), [((("a")), 100000000, 0, -25); ((("b")), 100000000, 0, -26)], (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("runtime/eq.ml", 16, 298, 306), ("runtime/eq.ml", 16, 298, 316), 0), 0, Tag1 ("Refl__Eq", 81)), 0); (("equal", 15049), ((Tag1 (Tag1 ("hook"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("hook", 15047)), 0, (0)), 100000000, 0, -19)], (0)), 100000000, 0, -18), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((0), 100000000, 0, -6); ((0), 100000000, 0, -11); ((0), 100000000, 0, -8); ((0), 100000000, 0, -12); (Tag8 (([("Absent", Tag1 (1, 0, 0, (1))); ("Array", (0)); ("Attributes", (0)); ("Bool", (0)); ("Bytes", (0)); ("Char", (0)); ("Constr", (0)); ("Exists", (0)); ("Float", (0)); ("GADT", Tag1 (1, 0, 0, (1))); ("Int", (0)); ("Int32", (0)); ("Int64", (0)); ("Lazy", (0)); ("MapOpaque", (0)); ("Name", Tag1 (1, 0, 0, (1))); ("Nativeint", (0)); ("Object", (0)); ("Opaque", (0)); ("Record", (0)); ("String", (0)); ("Tuple", (0)); ("Unit", Tag1 (1, 0, 0, (1))); ("Variable", (0)); ("Variant", (0))], ((0), 100000000, 0, -14), 1, 0, ([Tag1 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "Kinds"), "comparable")]))), 100000000, 0, -13); ((0), 100000000, 0, -15); ((0), 100000000, 0, -16); ((0), 100000000, 0, -9); ((0), 100000000, 0, -17)], (0)), 100000000, 0, -10), (Tag1 (0, (Tag3 (Tag1 ((("Equalers", 15045)), "t"), [((0), 100000000, 0, -8); ((0), 100000000, 0, -8); ((0), 100000000, 0, -9)], (0)), 100000000, 0, -7), (Tag3 (Tag1 ((("Equaler", 15044)), "t"), [((0), 100000000, 0, -6); ((0), 100000000, 0, -6)], (0)), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("runtime/eq.ml", 194, 7360, 7364), ("runtime/eq.ml", 194, 7360, 7369), 0), 0, Tag1 ("Refl__Eq", 16391)), 0)], "Refl__Eq", [("Refl__Eq", ("\222\211E\155\148\201\223\216\130PZ\185\160HH\207")); ("Traverse__Values", ("}\239\001\023\024&\227\167Sl\002\148\026\190\180\025")); ("Traverse__Modules", ("=\175q\026#\242\139\b\202\252\139\207\195\170\254\202")); ("Traverse__Interface", ("\252\146\219\195\199\167\234\143+\145l\200\254\244s}")); ("Traverse__", ("y\220\011\221C%Ob7%t,\252N21")); ("Traverse", ("\019\209\190\177II\1552 \b\174\006\b\1643\152")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Oo", ("\171\243\248\026\217y\205\024\145\173k|\254x3\005")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Stdcompat__stdlib_s", ("?\143\027\238\145\138\139e`\216P\248\156\178=\206")); ("Stdcompat__init", ("r\254q\255\217]\232\239'\192d\165\222\016\157\133")); ("Stdcompat", ("\139\1989\181:\137\230\132\240\223\206\210Y\135S\\")); ("Refl__Tools", ("i\215\207\166d\225\190DU\241\194\224\137P\158e")); ("Refl__Desc", ("\221\150mt\149.2\132\189\244\007\164&\203\225\172")); ("Refl__", ("i\003\196\150\161\159\229g\157\181\149\015g%\221\240")); ("CamlinternalOO", ("\161\236\205-\150\171\185\243\146\139if:\146\170q")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
 ('c, 'c, 'g) Equalers.t -> ('a, 'a) Equaler.t

val hd_exn : 'a list -> 'a
val length : 'a list -> int
val rev_append : 'a list -> 'a list -> 'a list
val tl_exn : 'a list -> 'a list
val unzip : ('a * 'b) list -> 'a list * 'b list
val exists : 'a list -> f:('a -> bool) -> bool
val exists2_ok : 'a list -> 'b list -> f:('a -> 'b -> bool) -> bool
val fold : 'a list -> init:'b -> f:('b -> 'a -> 'b) -> 'b
val fold2_ok :
  'a list -> 'b list -> init:'c -> f:('c -> 'a -> 'b -> 'c) -> 'c
val for_all : 'a list -> f:('a -> bool) -> bool
val for_all2_ok : 'a list -> 'b list -> f:('a -> 'b -> bool) -> bool
val iter : 'a list -> f:('a -> 'b) -> unit
val iter2_ok : 'a list -> 'b list -> f:('a -> 'b -> unit) -> unit
val nontail_map : 'a list -> f:('a -> 'b) -> 'b list
val nontail_mapi : 'a list -> f:(int -> 'a -> 'b) -> 'b list
val partition : 'a list -> f:('a -> bool) -> 'a list * 'a list
val rev_map : 'a list -> f:('a -> 'b) -> 'b list
val rev_map2_ok : 'a list -> 'b list -> f:('a -> 'b -> 'c) -> 'c list
val sort : 'a list -> compare:('a -> 'a -> int) -> 'a list
val stable_sort : 'a list -> compare:('a -> 'a -> int) -> 'a list
val rev : 'a list -> 'a list
val fold_right : 'a list -> f:('a -> 'b -> 'b) -> init:'b -> 'b
val fold_right2_ok :
  ("DEBUG:rule", [(("hd_exn", 1342), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -182)], (0)), 100000000, 0, -183), ((0), 100000000, 0, -182), 0), 100000000, 0, -181), 0, (("src/list0.ml", 12, 631, 635), ("src/list0.ml", 12, 631, 641), 0), 0, Tag1 ("Base__List0", 0)), 0); (("length", 1343), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -180)], (0)), 100000000, 0, -179), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -178), 0), 100000000, 0, -177), 0, (("src/list0.ml", 13, 659, 663), ("src/list0.ml", 13, 659, 669), 0), 0, Tag1 ("Base__List0", 1)), 0); (("rev_append", 1344), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -174)], (0)), 100000000, 0, -176), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -174)], (0)), 100000000, 0, -175), (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -174)], (0)), 100000000, 0, -173), 0), 100000000, 0, -172), 0), 100000000, 0, -171), 0, (("src/list0.ml", 14, 691, 695), ("src/list0.ml", 14, 691, 705), 0), 0, Tag1 ("Base__List0", 2)), 0); (("tl_exn", 1345), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -169)], (0)), 100000000, 0, -170), (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -169)], (0)), 100000000, 0, -168), 0), 100000000, 0, -167), 0, (("src/list0.ml", 15, 731, 735), ("src/list0.ml", 15, 731, 741), 0), 0, Tag1 ("Base__List0", 3)), 0); (("unzip", 1346), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((0), 100000000, 0, -162); ((0), 100000000, 0, -164)]), 100000000, 0, -166)], (0)), 100000000, 0, -165), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -162)], (0)), 100000000, 0, -161); (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -164)], (0)), 100000000, 0, -163)]), 100000000, 0, -160), 0), 100000000, 0, -159), 0, (("src/list0.ml", 16, 759, 763), ("src/list0.ml", 16, 759, 768), 0), 0, Tag1 ("Base__List0", 4)), 0); (("exists", 1347), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -157)], (0)), 100000000, 0, -158), (Tag1 (("f"), (Tag1 (0, ((0), 100000000, 0, -157), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -156), (1)), 100000000, 0, -155), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -154), 0), 100000000, 0, -153), 0), 100000000, 0, -152), 0, (("src/list0.ml", 21, 895, 903), ("src/list0.ml", 21, 895, 909), 0), 0, Tag1 ("Base__List0", 5)), 0); (("exists2_ok", 1348), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -149)], (0)), 100000000, 0, -151), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -148)], (0)), 100000000, 0, -150), (Tag1 (("f"), (Tag1 (0, ((0), 100000000, 0, -149), (Tag1 (0, ((0), 100000000, 0, -148), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -147), 0), 100000000, 0, -146), 0), 100000000, 0, -145), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -144), 0), 100000000, 0, -143), 0), 100000000, 0, -142), 0), 100000000, 0, -141), 0, (("src/list0.ml", 27, 1015, 1023), ("src/list0.ml", 27, 1015, 1033), 0), 0, Tag1 ("Base__List0", 10)), 0); (("fold", 1349), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -139)], (0)), 100000000, 0, -140), (Tag1 (("init"), ((0), 100000000, 0, -136), (Tag1 (("f"), (Tag1 (0, ((0), 100000000, 0, -136), (Tag1 (0, ((0), 100000000, 0, -139), ((0), 100000000, 0, -136), 0), 100000000, 0, -138), 0), 100000000, 0, -137), ((0), 100000000, 0, -136), 0), 100000000, 0, -135), 0), 100000000, 0, -134), 0), 100000000, 0, -133), 0, (("src/list0.ml", 34, 1214, 1222), ("src/list0.ml", 34, 1214, 1226), 0), 0, Tag1 ("Base__List0", 18)), 0); (("fold2_ok", 1350), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -130)], (0)), 100000000, 0, -132), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -129)], (0)), 100000000, 0, -131), (Tag1 (("init"), ((0), 100000000, 0, -125), (Tag1 (("f"), (Tag1 (0, ((0), 100000000, 0, -125), (Tag1 (0, ((0), 100000000, 0, -130), (Tag1 (0, ((0), 100000000, 0, -129), ((0), 100000000, 0, -125), 0), 100000000, 0, -128), 0), 100000000, 0, -127), 0), 100000000, 0, -126), ((0), 100000000, 0, -125), 0), 100000000, 0, -124), 0), 100000000, 0, -123), 0), 100000000, 0, -122), 0), 100000000, 0, -121), 0, (("src/list0.ml", 40, 1344, 1352), ("src/list0.ml", 40, 1344, 1360), 0), 0, Tag1 ("Base__List0", 24)), 0); (("for_all", 1351), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -119)], (0)), 100000000, 0, -120), (Tag1 (("f"), (Tag1 (0, ((0), 100000000, 0, -119), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -118), (1)), 100000000, 0, -117), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -116), 0), 100000000, 0, -115), 0), 100000000, 0, -114), 0, (("src/list0.ml", 47, 1562, 1566), ("src/list0.ml", 47, 1562, 1573), 0), 0, Tag1 ("Base__List0", 33)), 0); (("for_all2_ok", 1352), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -111)], (0)), 100000000, 0, -113), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -110)], (0)), 100000000, 0, -112), (Tag1 (("f"), (Tag1 (0, ((0), 100000000, 0, -111), (Tag1 (0, ((0), 100000000, 0, -110), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -109), 0), 100000000, 0, -108), 0), 100000000, 0, -107), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -106), 0), 100000000, 0, -105), 0), 100000000, 0, -104), 0), 100000000, 0, -103), 0, (("src/list0.ml", 49, 1634, 1642), ("src/list0.ml", 49, 1634, 1653), 0), 0, Tag1 ("Base__List0", 37)), 0); (("iter", 1353), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -101)], (0)), 100000000, 0, -102), (Tag1 (("f"), (Tag1 (0, ((0), 100000000, 0, -101), ((0), 100000000, 0, -100), 0), 100000000, 0, -99), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -98), 0), 100000000, 0, -97), 0), 100000000, 0, -96), 0, (("src/list0.ml", 56, 1835, 1843), ("src/list0.ml", 56, 1835, 1847), 0), 0, Tag1 ("Base__List0", 45)), 0); (("iter2_ok", 1354), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -93)], (0)), 100000000, 0, -95), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -92)], (0)), 100000000, 0, -94), (Tag1 (("f"), (Tag1 (0, ((0), 100000000, 0, -93), (Tag1 (0, ((0), 100000000, 0, -92), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -91), 0), 100000000, 0, -90), 0), 100000000, 0, -89), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -88), 0), 100000000, 0, -87), 0), 100000000, 0, -86), 0), 100000000, 0, -85), 0, (("src/list0.ml", 64, 1948, 1956), ("src/list0.ml", 64, 1948, 1964), 0), 0, Tag1 ("Base__List0", 50)), 0); (("nontail_map", 1355), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -83)], (0)), 100000000, 0, -84), (Tag1 (("f"), (Tag1 (0, ((0), 100000000, 0, -83), ((0), 100000000, 0, -81), (1)), 100000000, 0, -82), (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -81)], (0)), 100000000, 0, -80), 0), 100000000, 0, -79), 0), 100000000, 0, -78), 0, (("src/list0.ml", 73, 2147, 2155), ("src/list0.ml", 73, 2147, 2166), 0), 0, Tag1 ("Base__List0", 58)), 0); (("nontail_mapi", 1356), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -75)], (0)), 100000000, 0, -77), (Tag1 (("f"), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -76), (Tag1 (0, ((0), 100000000, 0, -75), ((0), 100000000, 0, -72), 0), 100000000, 0, -74), 0), 100000000, 0, -73), (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -72)], (0)), 100000000, 0, -71), 0), 100000000, 0, -70), 0), 100000000, 0, -69), 0, (("src/list0.ml", 81, 2280, 2284), ("src/list0.ml", 81, 2280, 2296), 0), 0, Tag1 ("Base__List0", 64)), 0); (("partition", 1357), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -64)], (0)), 100000000, 0, -68), (Tag1 (("f"), (Tag1 (0, ((0), 100000000, 0, -64), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -67), 0), 100000000, 0, -66), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -64)], (0)), 100000000, 0, -63); (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -64)], (0)), 100000000, 0, -65)]), 100000000, 0, -62), 0), 100000000, 0, -61), 0), 100000000, 0, -60), 0, (("src/list0.ml", 82, 2326, 2330), ("src/list0.ml", 82, 2326, 2339), 0), 0, Tag1 ("Base__List0", 67)), 0); (("rev_map", 1358), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -58)], (0)), 100000000, 0, -59), (Tag1 (("f"), (Tag1 (0, ((0), 100000000, 0, -58), ((0), 100000000, 0, -56), (1)), 100000000, 0, -57), (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -56)], (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0, (("src/list0.ml", 84, 2375, 2379), ("src/list0.ml", 84, 2375, 2386), 0), 0, Tag1 ("Base__List0", 70)), 0); (("rev_map2_ok", 1359), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -50)], (0)), 100000000, 0, -52), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -49)], (0)), 100000000, 0, -51), (Tag1 (("f"), (Tag1 (0, ((0), 100000000, 0, -50), (Tag1 (0, ((0), 100000000, 0, -49), ((0), 100000000, 0, -46), 0), 100000000, 0, -48), 0), 100000000, 0, -47), (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -46)], (0)), 100000000, 0, -45), 0), 100000000, 0, -44), 0), 100000000, 0, -43), 0), 100000000, 0, -42), 0, (("src/list0.ml", 92, 2532, 2536), ("src/list0.ml", 92, 2532, 2547), 0), 0, Tag1 ("Base__List0", 78)), 0); (("sort", 1360), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -37)], (0)), 100000000, 0, -41), (Tag1 (("compare"), (Tag1 (0, ((0), 100000000, 0, -37), (Tag1 (0, ((0), 100000000, 0, -37), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -40), 0), 100000000, 0, -39), 0), 100000000, 0, -38), (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -37)], (0)), 100000000, 0, -36), 0), 100000000, 0, -35), 0), 100000000, 0, -34), 0, (("src/list0.ml", 102, 2805, 2809), ("src/list0.ml", 102, 2805, 2813), 0), 0, Tag1 ("Base__List0", 91)), 0); (("stable_sort", 1361), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -29)], (0)), 100000000, 0, -33), (Tag1 (("compare"), (Tag1 (0, ((0), 100000000, 0, -29), (Tag1 (0, ((0), 100000000, 0, -29), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0), 100000000, 0, -30), (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -29)], (0)), 100000000, 0, -28), 0), 100000000, 0, -27), 0), 100000000, 0, -26), 0, (("src/list0.ml", 103, 2859, 2863), ("src/list0.ml", 103, 2859, 2874), 0), 0, Tag1 ("Base__List0", 94)), 0); (("rev", 1362), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -24)], (0)), 100000000, 0, -25), (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -24)], (0)), 100000000, 0, -23), 0), 100000000, 0, -22), 0, (("src/list0.ml", 105, 2928, 2932), ("src/list0.ml", 105, 2928, 2935), 0), 0, Tag1 ("Base__List0", 97)), 0); (("fold_right", 1363), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -20)], (0)), 100000000, 0, -21), (Tag1 (("f"), (Tag1 (0, ((0), 100000000, 0, -20), (Tag1 (0, ((0), 100000000, 0, -17), ((0), 100000000, 0, -17), 0), 100000000, 0, -19), 0), 100000000, 0, -18), (Tag1 (("init"), ((0), 100000000, 0, -17), ((0), 100000000, 0, -17), 0), 100000000, 0, -16), 0), 100000000, 0, -15), 0), 100000000, 0, -14), 0, (("src/list0.ml", 110, 3029, 3033), ("src/list0.ml", 110, 3029, 3043), 0), 0, Tag1 ("Base__List0", 102)), 0); (("fold_right2_ok", 1364), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -11)], (0)), 100000000, 0, -13), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -10)], (0)), 100000000, 0, -12), (Tag1 (("f"), (Tag1 (0, ((0), 100000000, 0, -11), (Tag1 (0, ((0), 100000000, 0, -10), (Tag1 (0, ((0), 100000000, 0, -6), ((0), 100000000, 0, -6), 0), 100000000, 0, -9), 0), 100000000, 0, -8), 0), 100000000, 0, -7), (Tag1 (("init"), ((0), 100000000, 0, -6), ((0), 100000000, 0, -6), 0), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/list0.ml", 116, 3222, 3226), ("src/list0.ml", 116, 3222, 3240), 0), 0, Tag1 ("Base__List0", 108)), 0)], "Base__List0", [("Base__List0", ("+\178\223(\221\0257w\210\027\166\235\234L\153\b")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__ListLabels", ("*\194\012\191\020%\170\249m\002\180\178hk\205\220")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158"))], [(0)])
'a list -> 'b list -> f:('a -> 'b -> 'c -> 'c) -> init:'c -> 'c

module type S =
  sig
    type 'a t = 'a list = [] | (::) of 'a * 'a list
    val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool
    val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int
    val partition_map :
      ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list
    val fold_left_map :
      ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list
    val filteri : (int -> 'a -> bool) -> 'a list -> 'a list
    val concat_map : ('a -> 'b list) -> 'a list -> 'b list
    val find_map : ('a -> 'b option) -> 'a list -> 'b option
    val filter_map : ('a -> 'b option) -> 'a list -> 'b list
    val to_seq : 'a list -> 'a Seq.t
    val of_seq : 'a Seq.t -> 'a list
    val init : int -> (int -> 'a) -> 'a list
    val compare_lengths : 'a list -> 'b list -> int
    val compare_length_with : 'a list -> int -> int
    val nth_opt : 'a list -> int -> 'a option
    val find_opt : ('a -> bool) -> 'a list -> 'a option
    val assoc_opt : 'a -> ('a * 'b) list -> 'b option
    val assq_opt : 'a -> ('a * 'b) list -> 'b option
    val cons : 'a -> 'a list -> 'a list
    val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list
    val iteri : (int -> 'a -> unit) -> 'a list -> unit
    val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list
    val length : 'a list -> int
    val hd : 'a list -> 'a
    val tl : 'a list -> 'a list
    val nth : 'a list -> int -> 'a
    val rev : 'a list -> 'a list
    val append : 'a list -> 'a list -> 'a list
    val rev_append : 'a list -> 'a list -> 'a list
    val concat : 'a list list -> 'a list
    val flatten : 'a list list -> 'a list
    val iter : ('a -> unit) -> 'a list -> unit
    val map : ('a -> 'b) -> 'a list -> 'b list
    val rev_map : ('a -> 'b) -> 'a list -> 'b list
    val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
    val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b
    val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit
    val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list
    val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list
    val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a
    val fold_right2 :
      ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c
    val for_all : ('a -> bool) -> 'a list -> bool
    val exists : ('a -> bool) -> 'a list -> bool
    val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool
    val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool
    val mem : 'a -> 'a list -> bool
    val memq : 'a -> 'a list -> bool
    val find : ('a -> bool) -> 'a list -> 'a
    val filter : ('a -> bool) -> 'a list -> 'a list
    val find_all : ('a -> bool) -> 'a list -> 'a list
    val partition : ('a -> bool) -> 'a list -> 'a list * 'a list
    val assoc : 'a -> ('a * 'b) list -> 'b
    val assq : 'a -> ('a * 'b) list -> 'b
    val mem_assoc : 'a -> ('a * 'b) list -> bool
    val mem_assq : 'a -> ('a * 'b) list -> bool
    val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list
    val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list
    val split : ('a * 'b) list -> 'a list * 'b list
    val combine : 'a list -> 'b list -> ('a * 'b) list
    val sort : ('a -> 'a -> int) -> 'a list -> 'a list
    val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list
    val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list
    val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list("DEBUG:rule", [Tag4 (("S", 550), ((Tag1 ([Tag1 (("t", 551), ([((("a")), 100000000, 0, -468)], 1, Tag1 ([(("[]", 270), (0), 0, (("stdcompat__list_s.mli", 5, 44, 46), ("stdcompat__list_s.mli", 5, 44, 50), 0), 0, Tag1 ("Stdcompat__list_s", 1)); (("::", 271), ([((("a")), 100000000, 0, -468); (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -468)], (0)), 100000000, 0, -469)]), 0, (("stdcompat__list_s.mli", 6, 51, 53), ("stdcompat__list_s.mli", 6, 51, 75), 0), 0, Tag1 ("Stdcompat__list_s", 2))], 0), 1, ((Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -468)], (0)), 100000000, 0, -467)), [25], [0], 0, 0, (("stdcompat__list_s.mli", 4, 22, 22), ("stdcompat__list_s.mli", 6, 51, 75), 0), 0, 0, 0, Tag1 ("Stdcompat__list_s", 0)), 1, 0); (("equal", 552), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -462), (Tag1 (0, ((("a")), 100000000, 0, -462), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -466), 0), 100000000, 0, -465), 0), 100000000, 0, -464), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -462)], (0)), 100000000, 0, -463), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -462)], (0)), 100000000, 0, -461), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -460), 0), 100000000, 0, -459), 0), 100000000, 0, -458), 0), 100000000, 0, -457), 0, (("stdcompat__list_s.mli", 27, 310, 310), ("stdcompat__list_s.mli", 27, 310, 370), 0), 0, Tag1 ("Stdcompat__list_s", 3)), 0); (("compare", 553), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -452), (Tag1 (0, ((("a")), 100000000, 0, -452), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -456), 0), 100000000, 0, -455), 0), 100000000, 0, -454), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -452)], (0)), 100000000, 0, -453), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -452)], (0)), 100000000, 0, -451), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -450), 0), 100000000, 0, -449), 0), 100000000, 0, -448), 0), 100000000, 0, -447), 0, (("stdcompat__list_s.mli", 31, 459, 459), ("stdcompat__list_s.mli", 31, 459, 519), 0), 0, Tag1 ("Stdcompat__list_s", 4)), 0); (("partition_map", 554), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -444), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Either"), "t"), [((("b")), 100000000, 0, -440); ((("c")), 100000000, 0, -442)], (0)), 100000000, 0, -446), 0), 100000000, 0, -445), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -444)], (0)), 100000000, 0, -443), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -440)], (0)), 100000000, 0, -439); (Tag3 ((Tag3 ("list", 9)), [((("c")), 100000000, 0, -442)], (0)), 100000000, 0, -441)]), 100000000, 0, -438), 0), 100000000, 0, -437), 0), 100000000, 0, -436), 0, (("stdcompat__list_s.mli", 36, 609, 609), ("stdcompat__list_s.mli", 37, 629, 690), 0), 0, Tag1 ("Stdcompat__list_s", 5)), 0); (("fold_left_map", 555), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -428), (Tag1 (0, ((("b")), 100000000, 0, -432), (Tag2 ([((("a")), 100000000, 0, -428); ((("c")), 100000000, 0, -430)]), 100000000, 0, -435), 0), 100000000, 0, -434), 0), 100000000, 0, -433), (Tag1 (0, ((("a")), 100000000, 0, -428), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -432)], (0)), 100000000, 0, -431), (Tag2 ([((("a")), 100000000, 0, -428); (Tag3 ((Tag3 ("list", 9)), [((("c")), 100000000, 0, -430)], (0)), 100000000, 0, -429)]), 100000000, 0, -427), 0), 100000000, 0, -426), 0), 100000000, 0, -425), 0), 100000000, 0, -424), 0, (("stdcompat__list_s.mli", 48, 905, 905), ("stdcompat__list_s.mli", 49, 925, 985), 0), 0, Tag1 ("Stdcompat__list_s", 6)), 0); (("filteri", 556), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -423), (Tag1 (0, ((("a")), 100000000, 0, -418), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -422), 0), 100000000, 0, -421), 0), 100000000, 0, -420), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -418)], (0)), 100000000, 0, -419), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -418)], (0)), 100000000, 0, -417), 0), 100000000, 0, -416), 0), 100000000, 0, -415), 0, (("stdcompat__list_s.mli", 54, 1098, 1098), ("stdcompat__list_s.mli", 54, 1098, 1153), 0), 0, Tag1 ("Stdcompat__list_s", 7)), 0); (("concat_map", 557), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -412), (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -410)], (0)), 100000000, 0, -414), 0), 100000000, 0, -413), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -412)], (0)), 100000000, 0, -411), (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -410)], (0)), 100000000, 0, -409), 0), 100000000, 0, -408), 0), 100000000, 0, -407), 0, (("stdcompat__list_s.mli", 57, 1233, 1233), ("stdcompat__list_s.mli", 57, 1233, 1287), 0), 0, Tag1 ("Stdcompat__list_s", 8)), 0); (("find_map", 558), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -404), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -402)], (0)), 100000000, 0, -406), 0), 100000000, 0, -405), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -404)], (0)), 100000000, 0, -403), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -402)], (0)), 100000000, 0, -401), 0), 100000000, 0, -400), 0), 100000000, 0, -399), 0, (("stdcompat__list_s.mli", 60, 1366, 1366), ("stdcompat__list_s.mli", 60, 1366, 1422), 0), 0, Tag1 ("Stdcompat__list_s", 9)), 0); (("filter_map", 559), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -396), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -394)], (0)), 100000000, 0, -398), 0), 100000000, 0, -397), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -396)], (0)), 100000000, 0, -395), (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -394)], (0)), 100000000, 0, -393), 0), 100000000, 0, -392), 0), 100000000, 0, -391), 0, (("stdcompat__list_s.mli", 63, 1503, 1503), ("stdcompat__list_s.mli", 63, 1503, 1559), 0), 0, Tag1 ("Stdcompat__list_s", 10)), 0); (("to_seq", 560), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -389)], (0)), 100000000, 0, -390), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [((("a")), 100000000, 0, -389)], (0)), 100000000, 0, -388), 0), 100000000, 0, -387), 0, (("stdcompat__list_s.mli", 67, 1641, 1641), ("stdcompat__list_s.mli", 67, 1641, 1673), 0), 0, Tag1 ("Stdcompat__list_s", 11)), 0); (("of_seq", 561), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [((("a")), 100000000, 0, -385)], (0)), 100000000, 0, -386), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -385)], (0)), 100000000, 0, -384), 0), 100000000, 0, -383), 0, (("stdcompat__list_s.mli", 76, 1783, 1783), ("stdcompat__list_s.mli", 76, 1783, 1815), 0), 0, Tag1 ("Stdcompat__list_s", 12)), 0); (("init", 562), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -382), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -381), ((("a")), 100000000, 0, -379), 0), 100000000, 0, -380), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -379)], (0)), 100000000, 0, -378), 0), 100000000, 0, -377), 0), 100000000, 0, -376), 0, (("stdcompat__list_s.mli", 84, 1924, 1924), ("stdcompat__list_s.mli", 84, 1924, 1964), 0), 0, Tag1 ("Stdcompat__list_s", 13)), 0); (("compare_lengths", 563), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -375)], (0)), 100000000, 0, -374), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -373)], (0)), 100000000, 0, -372), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -371), 0), 100000000, 0, -370), 0), 100000000, 0, -369), 0, (("stdcompat__list_s.mli", 87, 2029, 2029), ("stdcompat__list_s.mli", 87, 2029, 2076), 0), 0, Tag1 ("Stdcompat__list_s", 14)), 0); (("compare_length_with", 564), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -368)], (0)), 100000000, 0, -367), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -366), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -365), 0), 100000000, 0, -364), 0), 100000000, 0, -363), 0, (("stdcompat__list_s.mli", 90, 2148, 2148), ("stdcompat__list_s.mli", 90, 2148, 2195), 0), 0, Tag1 ("Stdcompat__list_s", 15)), 0); (("nth_opt", 565), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -360)], (0)), 100000000, 0, -362), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -361), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -360)], (0)), 100000000, 0, -359), 0), 100000000, 0, -358), 0), 100000000, 0, -357), 0, (("stdcompat__list_s.mli", 93, 2267, 2267), ("stdcompat__list_s.mli", 93, 2267, 2308), 0), 0, Tag1 ("Stdcompat__list_s", 16)), 0); (("find_opt", 566), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -353), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -356), 0), 100000000, 0, -355), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -353)], (0)), 100000000, 0, -354), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -353)], (0)), 100000000, 0, -352), 0), 100000000, 0, -351), 0), 100000000, 0, -350), 0, (("stdcompat__list_s.mli", 96, 2374, 2374), ("stdcompat__list_s.mli", 96, 2374, 2425), 0), 0, Tag1 ("Stdcompat__list_s", 17)), 0); (("assoc_opt", 567), ((Tag1 (0, ((("a")), 100000000, 0, -349), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -349); ((("b")), 100000000, 0, -346)]), 100000000, 0, -348)], (0)), 100000000, 0, -347), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -346)], (0)), 100000000, 0, -345), 0), 100000000, 0, -344), 0), 100000000, 0, -343), 0, (("stdcompat__list_s.mli", 99, 2501, 2501), ("stdcompat__list_s.mli", 99, 2501, 2550), 0), 0, Tag1 ("Stdcompat__list_s", 18)), 0); (("assq_opt", 568), ((Tag1 (0, ((("a")), 100000000, 0, -342), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -342); ((("b")), 100000000, 0, -339)]), 100000000, 0, -341)], (0)), 100000000, 0, -340), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -339)], (0)), 100000000, 0, -338), 0), 100000000, 0, -337), 0), 100000000, 0, -336), 0, (("stdcompat__list_s.mli", 102, 2624, 2624), ("stdcompat__list_s.mli", 102, 2624, 2672), 0), 0, Tag1 ("Stdcompat__list_s", 19)), 0); (("cons", 569), ((Tag1 (0, ((("a")), 100000000, 0, -334), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -334)], (0)), 100000000, 0, -335), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -334)], (0)), 100000000, 0, -333), 0), 100000000, 0, -332), 0), 100000000, 0, -331), 0, (("stdcompat__list_s.mli", 105, 2745, 2745), ("stdcompat__list_s.mli", 105, 2745, 2780), 0), 0, Tag1 ("Stdcompat__list_s", 20)), 0); (("sort_uniq", 570), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -326), (Tag1 (0, ((("a")), 100000000, 0, -326), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -330), 0), 100000000, 0, -329), 0), 100000000, 0, -328), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -326)], (0)), 100000000, 0, -327), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -326)], (0)), 100000000, 0, -325), 0), 100000000, 0, -324), 0), 100000000, 0, -323), 0, (("stdcompat__list_s.mli", 108, 2840, 2840), ("stdcompat__list_s.mli", 108, 2840, 2895), 0), 0, Tag1 ("Stdcompat__list_s", 21)), 0); (("iteri", 571), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -322), (Tag1 (0, ((("a")), 100000000, 0, -318), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -321), 0), 100000000, 0, -320), 0), 100000000, 0, -319), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -318)], (0)), 100000000, 0, -317), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -316), 0), 100000000, 0, -315), 0), 100000000, 0, -314), 0, (("stdcompat__list_s.mli", 111, 2975, 2975), ("stdcompat__list_s.mli", 111, 2975, 3025), 0), 0, Tag1 ("Stdcompat__list_s", 22)), 0); (("mapi", 572), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -313), (Tag1 (0, ((("a")), 100000000, 0, -310), ((("b")), 100000000, 0, -308), 0), 100000000, 0, -312), 0), 100000000, 0, -311), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -310)], (0)), 100000000, 0, -309), (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -308)], (0)), 100000000, 0, -307), 0), 100000000, 0, -306), 0), 100000000, 0, -305), 0, (("stdcompat__list_s.mli", 114, 3100, 3100), ("stdcompat__list_s.mli", 114, 3100, 3150), 0), 0, Tag1 ("Stdcompat__list_s", 23)), 0); (("length", 573), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -304)], (0)), 100000000, 0, -303), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -302), 0), 100000000, 0, -301), 0, (("stdcompat__list_s.mli", 117, 3225, 3225), ("stdcompat__list_s.mli", 117, 3225, 3252), 0), 0, Tag1 ("Stdcompat__list_s", 24)), 0); (("hd", 574), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -299)], (0)), 100000000, 0, -300), ((("a")), 100000000, 0, -299), 0), 100000000, 0, -298), 0, (("stdcompat__list_s.mli", 120, 3286, 3286), ("stdcompat__list_s.mli", 120, 3286, 3308), 0), 0, Tag1 ("Stdcompat__list_s", 25)), 0); (("tl", 575), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -296)], (0)), 100000000, 0, -297), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -296)], (0)), 100000000, 0, -295), 0), 100000000, 0, -294), 0, (("stdcompat__list_s.mli", 123, 3338, 3338), ("stdcompat__list_s.mli", 123, 3338, 3365), 0), 0, Tag1 ("Stdcompat__list_s", 26)), 0); (("nth", 576), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -291)], (0)), 100000000, 0, -293), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -292), ((("a")), 100000000, 0, -291), 0), 100000000, 0, -290), 0), 100000000, 0, -289), 0, (("stdcompat__list_s.mli", 126, 3395, 3395), ("stdcompat__list_s.mli", 126, 3395, 3425), 0), 0, Tag1 ("Stdcompat__list_s", 27)), 0); (("rev", 577), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -287)], (0)), 100000000, 0, -288), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -287)], (0)), 100000000, 0, -286), 0), 100000000, 0, -285), 0, (("stdcompat__list_s.mli", 129, 3456, 3456), ("stdcompat__list_s.mli", 129, 3456, 3484), 0), 0, Tag1 ("Stdcompat__list_s", 28)), 0); (("append", 578), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -282)], (0)), 100000000, 0, -284), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -282)], (0)), 100000000, 0, -283), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -282)], (0)), 100000000, 0, -281), 0), 100000000, 0, -280), 0), 100000000, 0, -279), 0, (("stdcompat__list_s.mli", 132, 3515, 3515), ("stdcompat__list_s.mli", 132, 3515, 3557), 0), 0, Tag1 ("Stdcompat__list_s", 29)), 0); (("rev_append", 579), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -276)], (0)), 100000000, 0, -278), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -276)], (0)), 100000000, 0, -277), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -276)], (0)), 100000000, 0, -275), 0), 100000000, 0, -274), 0), 100000000, 0, -273), 0, (("stdcompat__list_s.mli", 135, 3591, 3591), ("stdcompat__list_s.mli", 135, 3591, 3637), 0), 0, Tag1 ("Stdcompat__list_s", 30)), 0); (("concat", 580), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -270)], (0)), 100000000, 0, -272)], (0)), 100000000, 0, -271), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -270)], (0)), 100000000, 0, -269), 0), 100000000, 0, -268), 0, (("stdcompat__list_s.mli", 138, 3675, 3675), ("stdcompat__list_s.mli", 138, 3675, 3711), 0), 0, Tag1 ("Stdcompat__list_s", 31)), 0); (("flatten", 581), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -265)], (0)), 100000000, 0, -267)], (0)), 100000000, 0, -266), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -265)], (0)), 100000000, 0, -264), 0), 100000000, 0, -263), 0, (("stdcompat__list_s.mli", 141, 3745, 3745), ("stdcompat__list_s.mli", 141, 3745, 3782), 0), 0, Tag1 ("Stdcompat__list_s", 32)), 0); (("iter", 582), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -260), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -262), 0), 100000000, 0, -261), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -260)], (0)), 100000000, 0, -259), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -258), 0), 100000000, 0, -257), 0), 100000000, 0, -256), 0, (("stdcompat__list_s.mli", 144, 3817, 3817), ("stdcompat__list_s.mli", 144, 3817, 3859), 0), 0, Tag1 ("Stdcompat__list_s", 33)), 0); (("map", 583), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -254), ((("b")), 100000000, 0, -252), 0), 100000000, 0, -255), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -254)], (0)), 100000000, 0, -253), (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -252)], (0)), 100000000, 0, -251), 0), 100000000, 0, -250), 0), 100000000, 0, -249), 0, (("stdcompat__list_s.mli", 147, 3891, 3891), ("stdcompat__list_s.mli", 147, 3891, 3933), 0), 0, Tag1 ("Stdcompat__list_s", 34)), 0); (("rev_map", 584), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -247), ((("b")), 100000000, 0, -245), 0), 100000000, 0, -248), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -247)], (0)), 100000000, 0, -246), (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -245)], (0)), 100000000, 0, -244), 0), 100000000, 0, -243), 0), 100000000, 0, -242), 0, (("stdcompat__list_s.mli", 150, 3964, 3964), ("stdcompat__list_s.mli", 150, 3964, 4010), 0), 0, Tag1 ("Stdcompat__list_s", 35)), 0); (("fold_left", 585), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -237), (Tag1 (0, ((("b")), 100000000, 0, -239), ((("a")), 100000000, 0, -237), 0), 100000000, 0, -241), 0), 100000000, 0, -240), (Tag1 (0, ((("a")), 100000000, 0, -237), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -239)], (0)), 100000000, 0, -238), ((("a")), 100000000, 0, -237), 0), 100000000, 0, -236), 0), 100000000, 0, -235), 0), 100000000, 0, -234), 0, (("stdcompat__list_s.mli", 153, 4045, 4045), ("stdcompat__list_s.mli", 153, 4045, 4100), 0), 0, Tag1 ("Stdcompat__list_s", 36)), 0); (("fold_right", 586), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -231), (Tag1 (0, ((("b")), 100000000, 0, -229), ((("b")), 100000000, 0, -229), 0), 100000000, 0, -233), 0), 100000000, 0, -232), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -231)], (0)), 100000000, 0, -230), (Tag1 (0, ((("b")), 100000000, 0, -229), ((("b")), 100000000, 0, -229), 0), 100000000, 0, -228), 0), 100000000, 0, -227), 0), 100000000, 0, -226), 0, (("stdcompat__list_s.mli", 156, 4137, 4137), ("stdcompat__list_s.mli", 156, 4137, 4193), 0), 0, Tag1 ("Stdcompat__list_s", 37)), 0); (("iter2", 587), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -222), (Tag1 (0, ((("b")), 100000000, 0, -220), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -225), 0), 100000000, 0, -224), 0), 100000000, 0, -223), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -222)], (0)), 100000000, 0, -221), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -220)], (0)), 100000000, 0, -219), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -218), 0), 100000000, 0, -217), 0), 100000000, 0, -216), 0), 100000000, 0, -215), 0, (("stdcompat__list_s.mli", 159, 4231, 4231), ("stdcompat__list_s.mli", 159, 4231, 4291), 0), 0, Tag1 ("Stdcompat__list_s", 38)), 0); (("map2", 588), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -212), (Tag1 (0, ((("b")), 100000000, 0, -210), ((("c")), 100000000, 0, -208), 0), 100000000, 0, -214), 0), 100000000, 0, -213), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -212)], (0)), 100000000, 0, -211), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -210)], (0)), 100000000, 0, -209), (Tag3 ((Tag3 ("list", 9)), [((("c")), 100000000, 0, -208)], (0)), 100000000, 0, -207), 0), 100000000, 0, -206), 0), 100000000, 0, -205), 0), 100000000, 0, -204), 0, (("stdcompat__list_s.mli", 162, 4324, 4324), ("stdcompat__list_s.mli", 162, 4324, 4384), 0), 0, Tag1 ("Stdcompat__list_s", 39)), 0); (("rev_map2", 589), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -201), (Tag1 (0, ((("b")), 100000000, 0, -199), ((("c")), 100000000, 0, -197), 0), 100000000, 0, -203), 0), 100000000, 0, -202), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -201)], (0)), 100000000, 0, -200), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -199)], (0)), 100000000, 0, -198), (Tag3 ((Tag3 ("list", 9)), [((("c")), 100000000, 0, -197)], (0)), 100000000, 0, -196), 0), 100000000, 0, -195), 0), 100000000, 0, -194), 0), 100000000, 0, -193), 0, (("stdcompat__list_s.mli", 165, 4416, 4416), ("stdcompat__list_s.mli", 165, 4416, 4480), 0), 0, Tag1 ("Stdcompat__list_s", 40)), 0); (("fold_left2", 590), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -185), (Tag1 (0, ((("b")), 100000000, 0, -189), (Tag1 (0, ((("c")), 100000000, 0, -187), ((("a")), 100000000, 0, -185), 0), 100000000, 0, -192), 0), 100000000, 0, -191), 0), 100000000, 0, -190), (Tag1 (0, ((("a")), 100000000, 0, -185), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -189)], (0)), 100000000, 0, -188), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("c")), 100000000, 0, -187)], (0)), 100000000, 0, -186), ((("a")), 100000000, 0, -185), 0), 100000000, 0, -184), 0), 100000000, 0, -183), 0), 100000000, 0, -182), 0), 100000000, 0, -181), 0, (("stdcompat__list_s.mli", 168, 4516, 4516), ("stdcompat__list_s.mli", 168, 4516, 4589), 0), 0, Tag1 ("Stdcompat__list_s", 41)), 0); (("fold_right2", 591), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -177), (Tag1 (0, ((("b")), 100000000, 0, -175), (Tag1 (0, ((("c")), 100000000, 0, -173), ((("c")), 100000000, 0, -173), 0), 100000000, 0, -180), 0), 100000000, 0, -179), 0), 100000000, 0, -178), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -177)], (0)), 100000000, 0, -176), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -175)], (0)), 100000000, 0, -174), (Tag1 (0, ((("c")), 100000000, 0, -173), ((("c")), 100000000, 0, -173), 0), 100000000, 0, -172), 0), 100000000, 0, -171), 0), 100000000, 0, -170), 0), 100000000, 0, -169), 0, (("stdcompat__list_s.mli", 171, 4627, 4627), ("stdcompat__list_s.mli", 171, 4627, 4701), 0), 0, Tag1 ("Stdcompat__list_s", 42)), 0); (("for_all", 592), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -166), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -168), 0), 100000000, 0, -167), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -166)], (0)), 100000000, 0, -165), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -164), 0), 100000000, 0, -163), 0), 100000000, 0, -162), 0, (("stdcompat__list_s.mli", 174, 4740, 4740), ("stdcompat__list_s.mli", 174, 4740, 4785), 0), 0, Tag1 ("Stdcompat__list_s", 43)), 0); (("exists", 593), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -159), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -161), 0), 100000000, 0, -160), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -159)], (0)), 100000000, 0, -158), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -157), 0), 100000000, 0, -156), 0), 100000000, 0, -155), 0, (("stdcompat__list_s.mli", 177, 4820, 4820), ("stdcompat__list_s.mli", 177, 4820, 4864), 0), 0, Tag1 ("Stdcompat__list_s", 44)), 0); (("for_all2", 594), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -151), (Tag1 (0, ((("b")), 100000000, 0, -149), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -154), 0), 100000000, 0, -153), 0), 100000000, 0, -152), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -151)], (0)), 100000000, 0, -150), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -149)], (0)), 100000000, 0, -148), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -147), 0), 100000000, 0, -146), 0), 100000000, 0, -145), 0), 100000000, 0, -144), 0, (("stdcompat__list_s.mli", 180, 4898, 4898), ("stdcompat__list_s.mli", 180, 4898, 4961), 0), 0, Tag1 ("Stdcompat__list_s", 45)), 0); (("exists2", 595), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -140), (Tag1 (0, ((("b")), 100000000, 0, -138), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -143), 0), 100000000, 0, -142), 0), 100000000, 0, -141), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -140)], (0)), 100000000, 0, -139), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -138)], (0)), 100000000, 0, -137), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -136), 0), 100000000, 0, -135), 0), 100000000, 0, -134), 0), 100000000, 0, -133), 0, (("stdcompat__list_s.mli", 183, 4997, 4997), ("stdcompat__list_s.mli", 183, 4997, 5059), 0), 0, Tag1 ("Stdcompat__list_s", 46)), 0); (("mem", 596), ((Tag1 (0, ((("a")), 100000000, 0, -132), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -132)], (0)), 100000000, 0, -131), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -130), 0), 100000000, 0, -129), 0), 100000000, 0, -128), 0, (("stdcompat__list_s.mli", 186, 5094, 5094), ("stdcompat__list_s.mli", 186, 5094, 5125), 0), 0, Tag1 ("Stdcompat__list_s", 47)), 0); (("memq", 597), ((Tag1 (0, ((("a")), 100000000, 0, -127), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -127)], (0)), 100000000, 0, -126), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -125), 0), 100000000, 0, -124), 0), 100000000, 0, -123), 0, (("stdcompat__list_s.mli", 189, 5156, 5156), ("stdcompat__list_s.mli", 189, 5156, 5188), 0), 0, Tag1 ("Stdcompat__list_s", 48)), 0); (("find", 598), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -119), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -122), 0), 100000000, 0, -121), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -119)], (0)), 100000000, 0, -120), ((("a")), 100000000, 0, -119), 0), 100000000, 0, -118), 0), 100000000, 0, -117), 0, (("stdcompat__list_s.mli", 192, 5220, 5220), ("stdcompat__list_s.mli", 192, 5220, 5260), 0), 0, Tag1 ("Stdcompat__list_s", 49)), 0); (("filter", 599), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -113), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -116), 0), 100000000, 0, -115), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -113)], (0)), 100000000, 0, -114), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -113)], (0)), 100000000, 0, -112), 0), 100000000, 0, -111), 0), 100000000, 0, -110), 0, (("stdcompat__list_s.mli", 195, 5292, 5292), ("stdcompat__list_s.mli", 195, 5292, 5339), 0), 0, Tag1 ("Stdcompat__list_s", 50)), 0); (("find_all", 600), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -106), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -109), 0), 100000000, 0, -108), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -106)], (0)), 100000000, 0, -107), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -106)], (0)), 100000000, 0, -105), 0), 100000000, 0, -104), 0), 100000000, 0, -103), 0, (("stdcompat__list_s.mli", 198, 5373, 5373), ("stdcompat__list_s.mli", 198, 5373, 5422), 0), 0, Tag1 ("Stdcompat__list_s", 51)), 0); (("partition", 601), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -98), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -102), 0), 100000000, 0, -101), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -98)], (0)), 100000000, 0, -100), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -98)], (0)), 100000000, 0, -97); (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -98)], (0)), 100000000, 0, -99)]), 100000000, 0, -96), 0), 100000000, 0, -95), 0), 100000000, 0, -94), 0, (("stdcompat__list_s.mli", 201, 5458, 5458), ("stdcompat__list_s.mli", 201, 5458, 5520), 0), 0, Tag1 ("Stdcompat__list_s", 52)), 0); (("assoc", 602), ((Tag1 (0, ((("a")), 100000000, 0, -93), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -93); ((("b")), 100000000, 0, -90)]), 100000000, 0, -92)], (0)), 100000000, 0, -91), ((("b")), 100000000, 0, -90), 0), 100000000, 0, -89), 0), 100000000, 0, -88), 0, (("stdcompat__list_s.mli", 204, 5557, 5557), ("stdcompat__list_s.mli", 204, 5557, 5595), 0), 0, Tag1 ("Stdcompat__list_s", 53)), 0); (("assq", 603), ((Tag1 (0, ((("a")), 100000000, 0, -87), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -87); ((("b")), 100000000, 0, -84)]), 100000000, 0, -86)], (0)), 100000000, 0, -85), ((("b")), 100000000, 0, -84), 0), 100000000, 0, -83), 0), 100000000, 0, -82), 0, (("stdcompat__list_s.mli", 207, 5628, 5628), ("stdcompat__list_s.mli", 207, 5628, 5665), 0), 0, Tag1 ("Stdcompat__list_s", 54)), 0); (("mem_assoc", 604), ((Tag1 (0, ((("a")), 100000000, 0, -80), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -80); ((("b")), 100000000, 0, -81)]), 100000000, 0, -79)], (0)), 100000000, 0, -78), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -77), 0), 100000000, 0, -76), 0), 100000000, 0, -75), 0, (("stdcompat__list_s.mli", 210, 5697, 5697), ("stdcompat__list_s.mli", 210, 5697, 5741), 0), 0, Tag1 ("Stdcompat__list_s", 55)), 0); (("mem_assq", 605), ((Tag1 (0, ((("a")), 100000000, 0, -73), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -73); ((("b")), 100000000, 0, -74)]), 100000000, 0, -72)], (0)), 100000000, 0, -71), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -70), 0), 100000000, 0, -69), 0), 100000000, 0, -68), 0, (("stdcompat__list_s.mli", 213, 5778, 5778), ("stdcompat__list_s.mli", 213, 5778, 5821), 0), 0, Tag1 ("Stdcompat__list_s", 56)), 0); (("remove_assoc", 606), ((Tag1 (0, ((("a")), 100000000, 0, -64), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -64); ((("b")), 100000000, 0, -65)]), 100000000, 0, -67)], (0)), 100000000, 0, -66), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -64); ((("b")), 100000000, 0, -65)]), 100000000, 0, -63)], (0)), 100000000, 0, -62), 0), 100000000, 0, -61), 0), 100000000, 0, -60), 0, (("stdcompat__list_s.mli", 216, 5857, 5857), ("stdcompat__list_s.mli", 216, 5857, 5914), 0), 0, Tag1 ("Stdcompat__list_s", 57)), 0); (("remove_assq", 607), ((Tag1 (0, ((("a")), 100000000, 0, -56), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -56); ((("b")), 100000000, 0, -57)]), 100000000, 0, -59)], (0)), 100000000, 0, -58), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -56); ((("b")), 100000000, 0, -57)]), 100000000, 0, -55)], (0)), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52), 0, (("stdcompat__list_s.mli", 219, 5954, 5954), ("stdcompat__list_s.mli", 219, 5954, 6010), 0), 0, Tag1 ("Stdcompat__list_s", 58)), 0); (("split", 608), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -47); ((("b")), 100000000, 0, -49)]), 100000000, 0, -51)], (0)), 100000000, 0, -50), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -47)], (0)), 100000000, 0, -46); (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -49)], (0)), 100000000, 0, -48)]), 100000000, 0, -45), 0), 100000000, 0, -44), 0, (("stdcompat__list_s.mli", 222, 6049, 6049), ("stdcompat__list_s.mli", 222, 6049, 6098), 0), 0, Tag1 ("Stdcompat__list_s", 59)), 0); (("combine", 609), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -40)], (0)), 100000000, 0, -43), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -41)], (0)), 100000000, 0, -42), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -40); ((("b")), 100000000, 0, -41)]), 100000000, 0, -39)], (0)), 100000000, 0, -38), 0), 100000000, 0, -37), 0), 100000000, 0, -36), 0, (("stdcompat__list_s.mli", 225, 6131, 6131), ("stdcompat__list_s.mli", 225, 6131, 6181), 0), 0, Tag1 ("Stdcompat__list_s", 60)), 0); (("sort", 610), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -31), (Tag1 (0, ((("a")), 100000000, 0, -31), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -35), 0), 100000000, 0, -34), 0), 100000000, 0, -33), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -31)], (0)), 100000000, 0, -32), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -31)], (0)), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("stdcompat__list_s.mli", 228, 6216, 6216), ("stdcompat__list_s.mli", 228, 6216, 6266), 0), 0, Tag1 ("Stdcompat__list_s", 61)), 0); (("stable_sort", 611), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -23), (Tag1 (0, ((("a")), 100000000, 0, -23), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -27), 0), 100000000, 0, -26), 0), 100000000, 0, -25), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -23)], (0)), 100000000, 0, -24), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -23)], (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("stdcompat__list_s.mli", 231, 6298, 6298), ("stdcompat__list_s.mli", 231, 6298, 6355), 0), 0, Tag1 ("Stdcompat__list_s", 62)), 0); (("fast_sort", 612), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -15), (Tag1 (0, ((("a")), 100000000, 0, -15), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -15)], (0)), 100000000, 0, -16), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -15)], (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("stdcompat__list_s.mli", 234, 6394, 6394), ("stdcompat__list_s.mli", 234, 6394, 6449), 0), 0, Tag1 ("Stdcompat__list_s", 63)), 0); (("merge", 613), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -6), (Tag1 (0, ((("a")), 100000000, 0, -6), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11), 0), 100000000, 0, -10), 0), 100000000, 0, -9), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -6)], (0)), 100000000, 0, -8), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -6)], (0)), 100000000, 0, -7), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -6)], (0)), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("stdcompat__list_s.mli", 237, 6486, 6486), ("stdcompat__list_s.mli", 237, 6486, 6548), 0), 0, Tag1 ("Stdcompat__list_s", 64)), 0)])), 0, (("stdcompat__list_s.mli", 1, 0, 0), ("stdcompat__list_s.mli", 240, 6581, 6584), 0), Tag1 ("Stdcompat__list_s", 65)), 0)], "Stdcompat__list_s", [("Stdcompat__list_s", ("\202qe\t\246\208\019\1827\223\222\187\019\015\134\204")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

  end

module type CAPACITY =
  sig
    val capacity :
      Sek__.PublicTypeAbbreviations.depth ->
      Sek__.PublicTypeAbbreviations.capacity
  end
module type OVERWRITE_EMPTY_SLOTS = sig val overwrite_empty_slots : bool end
module type THRESHOLD =
  sig val threshold : Sek__.PublicTypeAbbreviations.capacity end
module type CHECK_ITERATOR_VALIDITY =
  ("DEBUG:rule", [Tag4 (("CAPACITY", 308), ((Tag1 ([(("capacity", 312), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "depth"), 0, (0)), 100000000, 0, -4), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "capacity"), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/PublicSettings.ml", 42, 2103, 2105), ("src/PublicSettings.ml", 42, 2103, 2137), 0), 0, Tag1 ("Sek__PublicSettings", 0)), 0)])), 0, (("src/PublicSettings.ml", 38, 1900, 1900), ("src/PublicSettings.ml", 43, 2138, 2141), 0), Tag1 ("Sek__PublicSettings", 1)), 0); Tag4 (("OVERWRITE_EMPTY_SLOTS", 309), ((Tag1 ([(("overwrite_empty_slots", 313), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5), 0, (("src/PublicSettings.ml", 64, 3022, 3024), ("src/PublicSettings.ml", 64, 3022, 3056), 0), 0, Tag1 ("Sek__PublicSettings", 2)), 0)])), 0, (("src/PublicSettings.ml", 60, 2803, 2803), ("src/PublicSettings.ml", 65, 3057, 3060), 0), Tag1 ("Sek__PublicSettings", 3)), 0); Tag4 (("THRESHOLD", 310), ((Tag1 ([(("threshold", 314), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "capacity"), 0, (0)), 100000000, 0, -6), 0, (("src/PublicSettings.ml", 81, 3667, 3669), ("src/PublicSettings.ml", 81, 3667, 3693), 0), 0, Tag1 ("Sek__PublicSettings", 4)), 0)])), 0, (("src/PublicSettings.ml", 78, 3493, 3493), ("src/PublicSettings.ml", 82, 3694, 3697), 0), Tag1 ("Sek__PublicSettings", 5)), 0); Tag4 (("CHECK_ITERATOR_VALIDITY", 311), ((Tag1 ([(("check_iterator_validity", 315), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -7), 0, (("src/PublicSettings.ml", 105, 4835, 4837), ("src/PublicSettings.ml", 105, 4835, 4871), 0), 0, Tag1 ("Sek__PublicSettings", 6)), 0)])), 0, (("src/PublicSettings.ml", 101, 4572, 4572), ("src/PublicSettings.ml", 106, 4872, 4875), 0), Tag1 ("Sek__PublicSettings", 7)), 0)], "Sek__PublicSettings", [("Sek__PublicSettings", ("\133\220\011\157jd\181\\V\002\146\022t\166u\149")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sek__PublicTypeAbbreviations", ("\201\251\244\167\199\157\227\233\251\227b\132\146]>\232")); ("Sek__", ("b\188\017\179d|~L\019\214\028\188\145y\210\250")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
sig val check_iterator_validity : bool end

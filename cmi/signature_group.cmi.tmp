type sig_item = {
  src : Types.signature_item;
  post_ghosts : Types.signature_item list;
}
val flatten : sig_item -> Types.signature
type core_rec_group = Not_rec of sig_item | Rec_group of sig_item list
val rec_items : core_rec_group -> sig_item list
type rec_group = {
  pre_ghosts : Types.signature_item list;
  group : core_rec_group;
}
val next : Types.signature -> (rec_group * Types.signature) option
val seq : Types.signature -> rec_group Seq.t
val iter : (rec_group -> unit) -> Types.signature -> unit
val fold : ('acc -> rec_group -> 'acc) -> 'acc -> Types.signature -> 'acc
type in_place_patch = {
  ghosts : Types.signature;
  replace_by : Types.signature_item option;
}
val replace_in_place :
  (ghosts:Types.signature ->
   Types.signature_item -> ('a * in_place_patch) option) ->
  ("DEBUG:rule", [Tag1 (("sig_item", 516), (0, 0, [[(("src", 376), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "signature_item"), 0, (0)), 100000000, 0, -57), (("typing/signature_group.mli", 33, 1647, 1651), ("typing/signature_group.mli", 34, 1703, 1704), 0), 0, Tag1 ("Signature_group", 2)); (("post_ghosts", 377), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "signature_item"), 0, (0)), 100000000, 0, -59)], (0)), 100000000, 0, -58), (("typing/signature_group.mli", 35, 1705, 1709), ("typing/signature_group.mli", 36, 1748, 1797), 0), 0, Tag1 ("Signature_group", 3))]], 1, 0, 0, 0, 0, 0, (("typing/signature_group.mli", 31, 1627, 1627), ("typing/signature_group.mli", 37, 1798, 1801), 0), 0, 0, 0, Tag1 ("Signature_group", 0)), 1, 0); (("flatten", 517), ((Tag1 (0, (Tag3 ((("sig_item", 516)), 0, (0)), 100000000, 0, -56), (Tag3 (Tag1 ((Tag2 ("Types")), "signature"), 0, (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0, (("typing/signature_group.mli", 40, 1857, 1857), ("typing/signature_group.mli", 40, 1857, 1897), 0), 0, Tag1 ("Signature_group", 4)), 0); Tag1 (("core_rec_group", 518), (0, 0, Tag1 ([(("Not_rec", 380), ([(Tag3 ((("sig_item", 516)), 0, (0)), 100000000, 0, -51)]), 0, (("typing/signature_group.mli", 44, 1969, 1971), ("typing/signature_group.mli", 44, 1969, 1992), 0), 0, Tag1 ("Signature_group", 6)); (("Rec_group", 381), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("sig_item", 516)), 0, (0)), 100000000, 0, -53)], (0)), 100000000, 0, -52)]), 0, (("typing/signature_group.mli", 45, 1993, 1995), ("typing/signature_group.mli", 45, 1993, 2023), 0), 0, Tag1 ("Signature_group", 7))], 0), 1, 0, 0, 0, 0, 0, (("typing/signature_group.mli", 43, 1947, 1947), ("typing/signature_group.mli", 45, 1993, 2023), 0), 0, 0, 0, Tag1 ("Signature_group", 5)), 1, 0); (("rec_items", 519), ((Tag1 (0, (Tag3 ((("core_rec_group", 518)), 0, (0)), 100000000, 0, -50), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("sig_item", 516)), 0, (0)), 100000000, 0, -49)], (0)), 100000000, 0, -48), 0), 100000000, 0, -47), 0, (("typing/signature_group.mli", 48, 2088, 2088), ("typing/signature_group.mli", 48, 2088, 2134), 0), 0, Tag1 ("Signature_group", 8)), 0); Tag1 (("rec_group", 520), (0, 0, [[(("pre_ghosts", 384), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "signature_item"), 0, (0)), 100000000, 0, -45)], (0)), 100000000, 0, -44), (("typing/signature_group.mli", 54, 2330, 2334), ("typing/signature_group.mli", 54, 2330, 2372), 0), 0, Tag1 ("Signature_group", 10)); (("group", 385), 0, (Tag3 ((("core_rec_group", 518)), 0, (0)), 100000000, 0, -46), (("typing/signature_group.mli", 54, 2330, 2373), ("typing/signature_group.mli", 54, 2330, 2393), 0), 0, Tag1 ("Signature_group", 11))]], 1, 0, 0, 0, 0, 0, (("typing/signature_group.mli", 53, 2313, 2313), ("typing/signature_group.mli", 54, 2330, 2395), 0), 0, 0, 0, Tag1 ("Signature_group", 9)), 1, 0); (("next", 521), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "signature"), 0, (0)), 100000000, 0, -43), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("rec_group", 520)), 0, (0)), 100000000, 0, -41); (Tag3 (Tag1 ((Tag2 ("Types")), "signature"), 0, (0)), 100000000, 0, -42)]), 100000000, 0, -40)], (0)), 100000000, 0, -39), 0), 100000000, 0, -38), 0, (("typing/signature_group.mli", 61, 2605, 2605), ("typing/signature_group.mli", 61, 2605, 2670), 0), 0, Tag1 ("Signature_group", 12)), 0); (("seq", 522), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "signature"), 0, (0)), 100000000, 0, -37), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("rec_group", 520)), 0, (0)), 100000000, 0, -36)], (0)), 100000000, 0, -35), 0), 100000000, 0, -34), 0, (("typing/signature_group.mli", 62, 2671, 2671), ("typing/signature_group.mli", 62, 2671, 2714), 0), 0, Tag1 ("Signature_group", 13)), 0); (("iter", 523), ((Tag1 (0, (Tag1 (0, (Tag3 ((("rec_group", 520)), 0, (0)), 100000000, 0, -33), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -32), 0), 100000000, 0, -31), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "signature"), 0, (0)), 100000000, 0, -30), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -29), 0), 100000000, 0, -28), 0), 100000000, 0, -27), 0, (("typing/signature_group.mli", 64, 2716, 2716), ("typing/signature_group.mli", 64, 2716, 2772), 0), 0, Tag1 ("Signature_group", 14)), 0); (("fold", 524), ((Tag1 (0, (Tag1 (0, ((("acc")), 100000000, 0, -22), (Tag1 (0, (Tag3 ((("rec_group", 520)), 0, (0)), 100000000, 0, -26), ((("acc")), 100000000, 0, -22), 0), 100000000, 0, -25), 0), 100000000, 0, -24), (Tag1 (0, ((("acc")), 100000000, 0, -22), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "signature"), 0, (0)), 100000000, 0, -23), ((("acc")), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), 0), 100000000, 0, -19), 0, (("typing/signature_group.mli", 65, 2773, 2773), ("typing/signature_group.mli", 65, 2773, 2845), 0), 0, Tag1 ("Signature_group", 15)), 0); Tag1 (("in_place_patch", 525), (0, 0, [[(("ghosts", 452), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "signature"), 0, (0)), 100000000, 0, -16), (("typing/signature_group.mli", 69, 2927, 2929), ("typing/signature_group.mli", 69, 2927, 2953), 0), 0, Tag1 ("Signature_group", 17)); (("replace_by", 453), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Types")), "signature_item"), 0, (0)), 100000000, 0, -18)], (0)), 100000000, 0, -17), (("typing/signature_group.mli", 70, 2989, 2991), ("typing/signature_group.mli", 70, 2989, 3031), 0), 0, Tag1 ("Signature_group", 18))]], 1, 0, 0, 0, 0, 0, (("typing/signature_group.mli", 68, 2903, 2903), ("typing/signature_group.mli", 72, 3075, 3076), 0), 0, 0, 0, Tag1 ("Signature_group", 16)), 1, 0); (("replace_in_place", 526), ((Tag1 (0, (Tag1 (("ghosts"), (Tag3 (Tag1 ((Tag2 ("Types")), "signature"), 0, (0)), 100000000, 0, -15), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "signature_item"), 0, (0)), 100000000, 0, -14), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([((("a")), 100000000, 0, -6); (Tag3 ((("in_place_patch", 525)), 0, (0)), 100000000, 0, -13)]), 100000000, 0, -12)], (0)), 100000000, 0, -11), 0), 100000000, 0, -10), 0), 100000000, 0, -9), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "signature"), 0, (0)), 100000000, 0, -8), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([((("a")), 100000000, 0, -6); (Tag3 (Tag1 ((Tag2 ("Types")), "signature"), 0, (0)), 100000000, 0, -7)]), 100000000, 0, -5)], (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("typing/signature_group.mli", 82, 3433, 3433), ("typing/signature_group.mli", 85, 3544, 3597), 0), 0, Tag1 ("Signature_group", 19)), 0)], "Signature_group", [("Signature_group", ("\216.\132\027\214e\199\207\240\173\026g\023y;\001")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])
Types.signature -> ('a * Types.signature) option

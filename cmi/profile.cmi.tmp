type file = string
val reset : unit -> unit
val record_call : ?accumulate:bool -> string -> (unit -> 'a) -> 'a
val record : ?accumulate:bool -> string -> ('a -> 'b) -> 'a -> 'b
type column = [ `Abs_top_heap | `Alloc | `Time | `Top_heap ]
val print : Format.formatter -> column list -> unit
val options_doc : string
val all_columns : column list
val generate : string
val transl : string("DEBUG:rule", [Tag1 (("file", 436), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -38)), 0, 0, 0, 0, (("utils/profile.mli", 23, 1206, 1206), ("utils/profile.mli", 23, 1206, 1224), 0), 0, 0, 0, Tag1 ("Profile", 0)), 1, 0); (("reset", 437), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -37), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -36), 0), 100000000, 0, -35), 0, (("utils/profile.mli", 25, 1226, 1226), ("utils/profile.mli", 25, 1226, 1250), 0), 0, Tag1 ("Profile", 1)), 0); (("record_call", 438), ((Tag1 (Tag1 ("accumulate"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -34)], (0)), 100000000, 0, -33), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -32), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -31), ((("a")), 100000000, 0, -29), 0), 100000000, 0, -30), ((("a")), 100000000, 0, -29), 0), 100000000, 0, -28), 0), 100000000, 0, -27), 0), 100000000, 0, -26), 0, (("utils/profile.mli", 28, 1298, 1298), ("utils/profile.mli", 28, 1298, 1364), 0), 0, Tag1 ("Profile", 2)), 0); (("record", 439), ((Tag1 (Tag1 ("accumulate"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -25)], (0)), 100000000, 0, -24), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -23), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -21), ((("b")), 100000000, 0, -20), 0), 100000000, 0, -22), (Tag1 (0, ((("a")), 100000000, 0, -21), ((("b")), 100000000, 0, -20), 0), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("utils/profile.mli", 31, 1441, 1441), ("utils/profile.mli", 31, 1441, 1506), 0), 0, Tag1 ("Profile", 3)), 0); Tag1 (("column", 440), (0, 0, 0, 1, ((Tag8 (([("Abs_top_heap", (0)); ("Alloc", (0)); ("Time", (0)); ("Top_heap", (0))], (0, 100000000, 0, -15), 1, 0, 0)), 100000000, 0, -14)), 0, 0, 0, 0, (("utils/profile.mli", 34, 1578, 1578), ("utils/profile.mli", 34, 1578, 1638), 0), 0, 1, 0, Tag1 ("Profile", 4)), 1, 0); (("print", 441), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -13), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("column", 440)), 0, (0)), 100000000, 0, -12)], (0)), 100000000, 0, -11), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10), 0), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("utils/profile.mli", 36, 1640, 1640), ("utils/profile.mli", 36, 1640, 1691), 0), 0, Tag1 ("Profile", 5)), 0); (("options_doc", 442), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -7), 0, (("utils/profile.mli", 41, 1796, 1796), ("utils/profile.mli", 41, 1796, 1820), 0), 0, Tag1 ("Profile", 6)), 0); (("all_columns", 443), ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("column", 440)), 0, (0)), 100000000, 0, -6)], (0)), 100000000, 0, -5), 0, (("utils/profile.mli", 42, 1821, 1821), ("utils/profile.mli", 42, 1821, 1850), 0), 0, Tag1 ("Profile", 7)), 0); (("generate", 444), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4), 0, (("utils/profile.mli", 47, 1943, 1943), ("utils/profile.mli", 47, 1943, 1964), 0), 0, Tag1 ("Profile", 8)), 0); (("transl", 445), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3), 0, (("utils/profile.mli", 48, 1965, 1965), ("utils/profile.mli", 48, 1965, 1984), 0), 0, Tag1 ("Profile", 9)), 0); (("typing", 446), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2), 0, (("utils/profile.mli", 49, 1985, 1985), ("utils/profile.mli", 49, 1985, 2004), 0), 0, Tag1 ("Profile", 10)), 0)], "Profile", [("Profile", ("\201i\132?<qM\169\011\239@\142\202\182\023,")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

val typing : string

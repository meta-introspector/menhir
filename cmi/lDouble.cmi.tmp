type t
val to_float : t -> float
val of_float : float -> t
val to_int : t -> int
val of_int : int -> t
val to_string : ?width:int -> ?prec:int -> t -> string
val of_string : string -> t
val add : t -> t -> t
val sub : t -> t -> t
val mul : t -> t -> t
val div : t -> t -> t
val neg : t -> t
val pow : t -> t -> t
val sqrt : t -> t
val exp : t -> t
val log : t -> t
val log10 : t -> t
val expm1 : t -> t
val log1p : t -> t
val cos : t -> t
val sin : t -> t
val tan : t -> t
val acos : t -> t
val asin : t -> t
val atan : t -> t
val atan2 : t -> t -> t
val hypot : t -> t -> t
val cosh : t -> t
val sinh : t -> t
val tanh : t -> t
val acosh : t -> t
val asinh : t -> t
val atanh : t -> t
val ceil : t -> t
val floor : t -> t
val abs : t -> t
val rem : t -> t -> t
val copysign : t -> t -> t
val frexp : t -> t * int
val ldexp : t -> int -> t
val modf : t -> t * t
val classify : t -> fpclass
val min_float : t
val max_float : t
val epsilon : t
val nan : t
val infinity : t
val neg_infinity : t
val zero : t
val one : t
val byte_sizes : int * int("DEBUG:rule", [Tag1 (("t", 321), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/ctypes/lDouble.mli", 8, 144, 144), ("src/ctypes/lDouble.mli", 8, 144, 150), 0), 0, 0, 0, Tag1 ("LDouble", 0)), 1, 0); (("to_float", 322), ((Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -166), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -165), 0), 100000000, 0, -164), 0, (("src/ctypes/lDouble.mli", 11, 185, 185), ("src/ctypes/lDouble.mli", 11, 185, 210), 0), 0, Tag1 ("LDouble", 1)), 0); (("of_float", 323), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -163), (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -162), 0), 100000000, 0, -161), 0, (("src/ctypes/lDouble.mli", 15, 365, 365), ("src/ctypes/lDouble.mli", 15, 365, 390), 0), 0, Tag1 ("LDouble", 2)), 0); (("to_int", 324), ((Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -160), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -159), 0), 100000000, 0, -158), 0, (("src/ctypes/lDouble.mli", 18, 434, 434), ("src/ctypes/lDouble.mli", 18, 434, 455), 0), 0, Tag1 ("LDouble", 3)), 0); (("of_int", 325), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -157), (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -156), 0), 100000000, 0, -155), 0, (("src/ctypes/lDouble.mli", 22, 606, 606), ("src/ctypes/lDouble.mli", 22, 606, 627), 0), 0, Tag1 ("LDouble", 4)), 0); (("to_string", 326), ((Tag1 (Tag1 ("width"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -154)], (0)), 100000000, 0, -153), (Tag1 (Tag1 ("prec"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -152)], (0)), 100000000, 0, -151), (Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -150), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -149), 0), 100000000, 0, -148), 0), 100000000, 0, -147), 0), 100000000, 0, -146), 0, (("src/ctypes/lDouble.mli", 25, 670, 670), ("src/ctypes/lDouble.mli", 25, 670, 725), 0), 0, Tag1 ("LDouble", 5)), 0); (("of_string", 327), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -145), (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -144), 0), 100000000, 0, -143), 0, (("src/ctypes/lDouble.mli", 34, 984, 984), ("src/ctypes/lDouble.mli", 34, 984, 1011), 0), 0, Tag1 ("LDouble", 6)), 0); (("add", 328), ((Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -142), (Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -141), (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -140), 0), 100000000, 0, -139), 0), 100000000, 0, -138), 0, (("src/ctypes/lDouble.mli", 37, 1055, 1055), ("src/ctypes/lDouble.mli", 37, 1055, 1076), 0), 0, Tag1 ("LDouble", 7)), 0); (("sub", 329), ((Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -137), (Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -136), (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -135), 0), 100000000, 0, -134), 0), 100000000, 0, -133), 0, (("src/ctypes/lDouble.mli", 40, 1095, 1095), ("src/ctypes/lDouble.mli", 40, 1095, 1116), 0), 0, Tag1 ("LDouble", 8)), 0); (("mul", 330), ((Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -132), (Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -131), (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -130), 0), 100000000, 0, -129), 0), 100000000, 0, -128), 0, (("src/ctypes/lDouble.mli", 43, 1138, 1138), ("src/ctypes/lDouble.mli", 43, 1138, 1159), 0), 0, Tag1 ("LDouble", 9)), 0); (("div", 331), ((Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -127), (Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -126), (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -125), 0), 100000000, 0, -124), 0), 100000000, 0, -123), 0, (("src/ctypes/lDouble.mli", 46, 1184, 1184), ("src/ctypes/lDouble.mli", 46, 1184, 1205), 0), 0, Tag1 ("LDouble", 10)), 0); (("neg", 332), ((Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -122), (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -121), 0), 100000000, 0, -120), 0, (("src/ctypes/lDouble.mli", 49, 1224, 1224), ("src/ctypes/lDouble.mli", 49, 1224, 1240), 0), 0, Tag1 ("LDouble", 11)), 0); (("pow", 333), ((Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -119), (Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -118), (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -117), 0), 100000000, 0, -116), 0), 100000000, 0, -115), 0, (("src/ctypes/lDouble.mli", 52, 1258, 1258), ("src/ctypes/lDouble.mli", 52, 1258, 1279), 0), 0, Tag1 ("LDouble", 12)), 0); (("sqrt", 334), ((Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -114), (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -113), 0), 100000000, 0, -112), 0, (("src/ctypes/lDouble.mli", 55, 1304, 1304), ("src/ctypes/lDouble.mli", 55, 1304, 1321), 0), 0, Tag1 ("LDouble", 13)), 0); (("exp", 335), ((Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -111), (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -110), 0), 100000000, 0, -109), 0, (("src/ctypes/lDouble.mli", 58, 1343, 1343), ("src/ctypes/lDouble.mli", 58, 1343, 1359), 0), 0, Tag1 ("LDouble", 14)), 0); (("log", 336), ((Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -108), (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -107), 0), 100000000, 0, -106), 0, (("src/ctypes/lDouble.mli", 61, 1381, 1381), ("src/ctypes/lDouble.mli", 61, 1381, 1397), 0), 0, Tag1 ("LDouble", 15)), 0); (("log10", 337), ((Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -105), (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -104), 0), 100000000, 0, -103), 0, (("src/ctypes/lDouble.mli", 64, 1425, 1425), ("src/ctypes/lDouble.mli", 64, 1425, 1443), 0), 0, Tag1 ("LDouble", 16)), 0); (("expm1", 338), ((Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -102), (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -101), 0), 100000000, 0, -100), 0, (("src/ctypes/lDouble.mli", 67, 1471, 1471), ("src/ctypes/lDouble.mli", 67, 1471, 1489), 0), 0, Tag1 ("LDouble", 17)), 0); (("log1p", 339), ((Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -99), (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -98), 0), 100000000, 0, -97), 0, (("src/ctypes/lDouble.mli", 72, 1605, 1605), ("src/ctypes/lDouble.mli", 72, 1605, 1623), 0), 0, Tag1 ("LDouble", 18)), 0); (("cos", 340), ((Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -96), (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -95), 0), 100000000, 0, -94), 0, (("src/ctypes/lDouble.mli", 77, 1760, 1760), ("src/ctypes/lDouble.mli", 77, 1760, 1776), 0), 0, Tag1 ("LDouble", 19)), 0); (("sin", 341), ((Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -93), (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -92), 0), 100000000, 0, -91), 0, (("src/ctypes/lDouble.mli", 80, 1819, 1819), ("src/ctypes/lDouble.mli", 80, 1819, 1835), 0), 0, Tag1 ("LDouble", 20)), 0); (("tan", 342), ((Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -90), (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -89), 0), 100000000, 0, -88), 0, (("src/ctypes/lDouble.mli", 83, 1876, 1876), ("src/ctypes/lDouble.mli", 83, 1876, 1892), 0), 0, Tag1 ("LDouble", 21)), 0); (("acos", 343), ((Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -87), (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -86), 0), 100000000, 0, -85), 0, (("src/ctypes/lDouble.mli", 86, 1936, 1936), ("src/ctypes/lDouble.mli", 86, 1936, 1953), 0), 0, Tag1 ("LDouble", 22)), 0); (("asin", 344), ((Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -84), (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -83), 0), 100000000, 0, -82), 0, (("src/ctypes/lDouble.mli", 89, 1974, 1974), ("src/ctypes/lDouble.mli", 89, 1974, 1991), 0), 0, Tag1 ("LDouble", 23)), 0); (("atan", 345), ((Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -81), (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -80), 0), 100000000, 0, -79), 0, (("src/ctypes/lDouble.mli", 92, 2010, 2010), ("src/ctypes/lDouble.mli", 92, 2010, 2027), 0), 0, Tag1 ("LDouble", 24)), 0); (("atan2", 346), ((Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -78), (Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -77), (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -76), 0), 100000000, 0, -75), 0), 100000000, 0, -74), 0, (("src/ctypes/lDouble.mli", 95, 2049, 2049), ("src/ctypes/lDouble.mli", 95, 2049, 2072), 0), 0, Tag1 ("LDouble", 25)), 0); (("hypot", 347), ((Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -73), (Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -72), (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -71), 0), 100000000, 0, -70), 0), 100000000, 0, -69), 0, (("src/ctypes/lDouble.mli", 98, 2131, 2131), ("src/ctypes/lDouble.mli", 98, 2131, 2154), 0), 0, Tag1 ("LDouble", 26)), 0); (("cosh", 348), ((Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -68), (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -67), 0), 100000000, 0, -66), 0, (("src/ctypes/lDouble.mli", 100, 2157, 2157), ("src/ctypes/lDouble.mli", 100, 2157, 2174), 0), 0, Tag1 ("LDouble", 27)), 0); (("sinh", 349), ((Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -65), (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -64), 0), 100000000, 0, -63), 0, (("src/ctypes/lDouble.mli", 103, 2202, 2202), ("src/ctypes/lDouble.mli", 103, 2202, 2219), 0), 0, Tag1 ("LDouble", 28)), 0); (("tanh", 350), ((Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -62), (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -61), 0), 100000000, 0, -60), 0, (("src/ctypes/lDouble.mli", 106, 2245, 2245), ("src/ctypes/lDouble.mli", 106, 2245, 2262), 0), 0, Tag1 ("LDouble", 29)), 0); (("acosh", 351), ((Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -59), (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -58), 0), 100000000, 0, -57), 0, (("src/ctypes/lDouble.mli", 109, 2291, 2291), ("src/ctypes/lDouble.mli", 109, 2291, 2309), 0), 0, Tag1 ("LDouble", 30)), 0); (("asinh", 352), ((Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -56), (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0, (("src/ctypes/lDouble.mli", 112, 2345, 2345), ("src/ctypes/lDouble.mli", 112, 2345, 2363), 0), 0, Tag1 ("LDouble", 31)), 0); (("atanh", 353), ((Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -53), (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -52), 0), 100000000, 0, -51), 0, (("src/ctypes/lDouble.mli", 115, 2397, 2397), ("src/ctypes/lDouble.mli", 115, 2397, 2415), 0), 0, Tag1 ("LDouble", 32)), 0); (("ceil", 354), ((Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -50), (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -49), 0), 100000000, 0, -48), 0, (("src/ctypes/lDouble.mli", 118, 2452, 2452), ("src/ctypes/lDouble.mli", 118, 2452, 2469), 0), 0, Tag1 ("LDouble", 33)), 0); (("floor", 355), ((Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -47), (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("src/ctypes/lDouble.mli", 121, 2512, 2512), ("src/ctypes/lDouble.mli", 121, 2512, 2530), 0), 0, Tag1 ("LDouble", 34)), 0); (("abs", 356), ((Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -44), (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -43), 0), 100000000, 0, -42), 0, (("src/ctypes/lDouble.mli", 124, 2573, 2573), ("src/ctypes/lDouble.mli", 124, 2573, 2589), 0), 0, Tag1 ("LDouble", 35)), 0); (("rem", 357), ((Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -41), (Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -40), (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -39), 0), 100000000, 0, -38), 0), 100000000, 0, -37), 0, (("src/ctypes/lDouble.mli", 127, 2637, 2637), ("src/ctypes/lDouble.mli", 127, 2637, 2658), 0), 0, Tag1 ("LDouble", 36)), 0); (("copysign", 358), ((Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -36), (Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -35), (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -34), 0), 100000000, 0, -33), 0), 100000000, 0, -32), 0, (("src/ctypes/lDouble.mli", 130, 2713, 2713), ("src/ctypes/lDouble.mli", 130, 2713, 2739), 0), 0, Tag1 ("LDouble", 37)), 0); (("frexp", 359), ((Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -31), (Tag2 ([(Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -29); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -30)]), 100000000, 0, -28), 0), 100000000, 0, -27), 0, (("src/ctypes/lDouble.mli", 134, 2850, 2850), ("src/ctypes/lDouble.mli", 134, 2850, 2874), 0), 0, Tag1 ("LDouble", 38)), 0); (("ldexp", 360), ((Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -26), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -25), (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0), 100000000, 0, -22), 0, (("src/ctypes/lDouble.mli", 137, 2954, 2954), ("src/ctypes/lDouble.mli", 137, 2954, 2979), 0), 0, Tag1 ("LDouble", 39)), 0); (("modf", 361), ((Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -21), (Tag2 ([(Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -19); (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -20)]), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("src/ctypes/lDouble.mli", 140, 3023, 3023), ("src/ctypes/lDouble.mli", 140, 3023, 3044), 0), 0, Tag1 ("LDouble", 40)), 0); (("classify", 362), ((Tag1 (0, (Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -16), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "fpclass"), 0, (0)), 100000000, 0, -15), 0), 100000000, 0, -14), 0, (("src/ctypes/lDouble.mli", 145, 3183, 3183), ("src/ctypes/lDouble.mli", 145, 3183, 3210), 0), 0, Tag1 ("LDouble", 41)), 0); (("min_float", 363), ((Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -13), 0, (("src/ctypes/lDouble.mli", 149, 3327, 3327), ("src/ctypes/lDouble.mli", 149, 3327, 3344), 0), 0, Tag1 ("LDouble", 42)), 0); (("max_float", 364), ((Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -12), 0, (("src/ctypes/lDouble.mli", 152, 3409, 3409), ("src/ctypes/lDouble.mli", 152, 3409, 3426), 0), 0, Tag1 ("LDouble", 43)), 0); (("epsilon", 365), ((Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -11), 0, (("src/ctypes/lDouble.mli", 155, 3469, 3469), ("src/ctypes/lDouble.mli", 155, 3469, 3484), 0), 0, Tag1 ("LDouble", 44)), 0); (("nan", 366), ((Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -10), 0, (("src/ctypes/lDouble.mli", 159, 3607, 3607), ("src/ctypes/lDouble.mli", 159, 3607, 3618), 0), 0, Tag1 ("LDouble", 45)), 0); (("infinity", 367), ((Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -9), 0, (("src/ctypes/lDouble.mli", 164, 3760, 3760), ("src/ctypes/lDouble.mli", 164, 3760, 3776), 0), 0, Tag1 ("LDouble", 46)), 0); (("neg_infinity", 368), ((Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -8), 0, (("src/ctypes/lDouble.mli", 167, 3803, 3803), ("src/ctypes/lDouble.mli", 167, 3803, 3823), 0), 0, Tag1 ("LDouble", 47)), 0); (("zero", 369), ((Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -7), 0, (("src/ctypes/lDouble.mli", 170, 3850, 3850), ("src/ctypes/lDouble.mli", 170, 3850, 3862), 0), 0, Tag1 ("LDouble", 48)), 0); (("one", 370), ((Tag3 ((("t", 321)), 0, (0)), 100000000, 0, -6), 0, (("src/ctypes/lDouble.mli", 173, 3875, 3875), ("src/ctypes/lDouble.mli", 173, 3875, 3886), 0), 0, Tag1 ("LDouble", 49)), 0); (("byte_sizes", 371), ((Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -4); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -5)]), 100000000, 0, -3), 0, (("src/ctypes/lDouble.mli", 176, 3899, 3899), ("src/ctypes/lDouble.mli", 176, 3899, 3925), 0), 0, Tag1 ("LDouble", 50)), 0); (("mant_dig", 372), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2), 0, (("src/ctypes/lDouble.mli", 181, 4084, 4084), ("src/ctypes/lDouble.mli", 181, 4084, 4102), 0), 0, Tag1 ("LDouble", 51)), 0)], "LDouble", [("LDouble", ("j\251\140\230^u\251\210\143\236T\207\022\147\011\211")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

val mant_dig : int

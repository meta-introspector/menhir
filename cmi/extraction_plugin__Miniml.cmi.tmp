type kill_reason = Ktype | Kprop | Kimplicit of Names.GlobRef.t * int
type sign = Keep | Kill of kill_reason
type signature = sign list
type ml_type =
    Tarr of ml_type * ml_type
  | Tglob of Names.GlobRef.t * ml_type list
  | Tvar of int
  | Tvar' of int
  | Tmeta of ml_meta
  | Tdummy of kill_reason
  | Tunknown
  | Taxiom
and ml_meta = { id : int; mutable contents : ml_type option; }
type ml_schema = int * ml_type
type inductive_kind =
    Singleton
  | Coinductive
  | Standard
  | Record of Names.GlobRef.t option list
type ml_ind_packet = {
  ip_typename : Names.Id.t;
  ip_consnames : Names.Id.t array;
  ip_logical : bool;
  ip_sign : signature;
  ip_vars : Names.Id.t list;
  ip_types : ml_type list array;
}
type equiv = NoEquiv | Equiv of Names.KerName.t | RenEquiv of string
type ml_ind = {
  ind_kind : inductive_kind;
  ind_nparams : int;
  ind_packets : ml_ind_packet array;
  ind_equiv : equiv;
}
type ml_ident = Dummy | Id of Names.Id.t | Tmp of Names.Id.t
type ml_branch = ml_ident list * ml_pattern * ml_ast
and ml_ast =
    MLrel of int
  | MLapp of ml_ast * ml_ast list
  | MLlam of ml_ident * ml_ast
  | MLletin of ml_ident * ml_ast * ml_ast
  | MLglob of Names.GlobRef.t
  | MLcons of ml_type * Names.GlobRef.t * ml_ast list
  | MLtuple of ml_ast list
  | MLcase of ml_type * ml_ast * ml_branch array
  | MLfix of int * Names.Id.t array * ml_ast array
  | MLexn of string
  | MLdummy of kill_reason
  | MLaxiom
  | MLmagic of ml_ast
  | MLuint of Uint63.t
  | MLfloat of Float64.t
  | MLparray of ml_ast array * ml_ast
and ml_pattern =
    Pcons of Names.GlobRef.t * ml_pattern list
  | Ptuple of ml_pattern list
  | Prel of int
  | Pwild
  | Pusual of Names.GlobRef.t
type ml_decl =
    Dind of Names.MutInd.t * ml_ind
  | Dtype of Names.GlobRef.t * Names.Id.t list * ml_type
  | Dterm of Names.GlobRef.t * ml_ast * ml_type
  | Dfix of Names.GlobRef.t array * ml_ast array * ml_type array
type ml_spec =
    Sind of Names.MutInd.t * ml_ind
  | Stype of Names.GlobRef.t * Names.Id.t list * ml_type option
  | Sval of Names.GlobRef.t * ml_type
type ml_specif =
    Spec of ml_spec
  | Smodule of ml_module_type
  | Smodtype of ml_module_type
and ml_module_type =
    MTident of Names.ModPath.t
  | MTfunsig of Names.MBId.t * ml_module_type * ml_module_type
  | MTsig of Names.ModPath.t * ml_module_sig
  | MTwith of ml_module_type * ml_with_declaration
and ml_with_declaration =
    ML_With_type of Names.Id.t list * Names.Id.t list * ml_type
  | ML_With_module of Names.Id.t list * Names.ModPath.t
and ml_module_sig = (Names.Label.t * ml_specif) list
type ml_structure_elem =
    SEdecl of ml_decl
  | SEmodule of ml_module
  | SEmodtype of ml_module_type
and ml_module_expr =
    MEident of Names.ModPath.t
  | MEfunctor of Names.MBId.t * ml_module_type * ml_module_expr
  | MEstruct of Names.ModPath.t * ml_module_structure
  | MEapply of ml_module_expr * ml_module_expr
and ml_module_structure = (Names.Label.t * ml_structure_elem) list
and ml_module = {
  ml_mod_expr : ml_module_expr;
  ml_mod_type : ml_module_type;
}
type ml_structure = (Names.ModPath.t * ml_module_structure) list
type ml_signature = (Names.ModPath.t * ml_module_sig) list
type unsafe_needs = {
  mldummy : bool;
  tdummy : bool;
  tunknown : bool;
  magic : bool;
}
type language_descr = {
  keywords : Names.Id.Set.t;
  file_suffix : string;
  file_naming : Names.ModPath.t -> string;
  preamble :
    Names.Id.t -> Pp.t option -> Names.ModPath.t list -> unsafe_needs -> Pp.t;
  pp_struct : ml_structure -> Pp.t;
  sig_suffix : string option;
  sig_preamble :
    Names.Id.t -> Pp.t option -> Names.ModPath.t list -> unsafe_needs -> Pp.t;
  pp_sig : ml_signature -> Pp.t;
  pp_decl : ml_decl -> Pp.t;("DEBUG:rule", [Tag1 (("kill_reason", 764), (0, 0, Tag1 ([(("Ktype", 367), (0), 0, (("plugins/extraction/miniml.mli", 26, 1050, 1052), ("plugins/extraction/miniml.mli", 26, 1050, 1059), 0), 0, Tag1 ("Extraction_plugin__Miniml", 1)); (("Kprop", 368), (0), 0, (("plugins/extraction/miniml.mli", 27, 1060, 1062), ("plugins/extraction/miniml.mli", 27, 1060, 1069), 0), 0, Tag1 ("Extraction_plugin__Miniml", 2)); (("Kimplicit", 369), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -201); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -202)]), 0, (("plugins/extraction/miniml.mli", 28, 1070, 1072), ("plugins/extraction/miniml.mli", 28, 1070, 1102), 0), 0, Tag1 ("Extraction_plugin__Miniml", 3))], 0), 1, 0, 0, 0, 0, 0, (("plugins/extraction/miniml.mli", 25, 1031, 1031), ("plugins/extraction/miniml.mli", 28, 1070, 1102), 0), 0, 0, 0, Tag1 ("Extraction_plugin__Miniml", 0)), 1, 0); Tag1 (("sign", 765), (0, 0, Tag1 ([(("Keep", 382), (0), 0, (("plugins/extraction/miniml.mli", 30, 1142, 1154), ("plugins/extraction/miniml.mli", 30, 1142, 1158), 0), 0, Tag1 ("Extraction_plugin__Miniml", 5)); (("Kill", 383), ([(Tag3 ((("kill_reason", 764)), 0, (0)), 100000000, 0, -200)]), 0, (("plugins/extraction/miniml.mli", 30, 1142, 1159), ("plugins/extraction/miniml.mli", 30, 1142, 1180), 0), 0, Tag1 ("Extraction_plugin__Miniml", 6))], 0), 1, 0, 0, 0, 0, 0, (("plugins/extraction/miniml.mli", 30, 1142, 1142), ("plugins/extraction/miniml.mli", 30, 1142, 1180), 0), 0, 0, 0, Tag1 ("Extraction_plugin__Miniml", 4)), 1, 0); Tag1 (("signature", 766), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("sign", 765)), 0, (0)), 100000000, 0, -199)], (0)), 100000000, 0, -198)), 0, 0, 0, 0, (("plugins/extraction/miniml.mli", 35, 1253, 1253), ("plugins/extraction/miniml.mli", 35, 1253, 1279), 0), 0, 0, 0, Tag1 ("Extraction_plugin__Miniml", 7)), 1, 0); Tag1 (("ml_type", 767), (0, 0, Tag1 ([(("Tarr", 387), ([(Tag3 ((("ml_type", 767)), 0, (0)), 100000000, 0, -189); (Tag3 ((("ml_type", 767)), 0, (0)), 100000000, 0, -190)]), 0, (("plugins/extraction/miniml.mli", 40, 1325, 1327), ("plugins/extraction/miniml.mli", 40, 1325, 1357), 0), 0, Tag1 ("Extraction_plugin__Miniml", 10)); (("Tglob", 388), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -191); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("ml_type", 767)), 0, (0)), 100000000, 0, -193)], (0)), 100000000, 0, -192)]), 0, (("plugins/extraction/miniml.mli", 41, 1358, 1360), ("plugins/extraction/miniml.mli", 41, 1358, 1397), 0), 0, Tag1 ("Extraction_plugin__Miniml", 11)); (("Tvar", 389), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -194)]), 0, (("plugins/extraction/miniml.mli", 42, 1398, 1400), ("plugins/extraction/miniml.mli", 42, 1398, 1416), 0), 0, Tag1 ("Extraction_plugin__Miniml", 12)); (("Tvar'", 390), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -195)]), 0, (("plugins/extraction/miniml.mli", 43, 1417, 1419), ("plugins/extraction/miniml.mli", 43, 1417, 1435), 0), 0, Tag1 ("Extraction_plugin__Miniml", 13)); (("Tmeta", 391), ([(Tag3 ((("ml_meta", 768)), 0, (0)), 100000000, 0, -196)]), 0, (("plugins/extraction/miniml.mli", 44, 1476, 1478), ("plugins/extraction/miniml.mli", 44, 1476, 1498), 0), 0, Tag1 ("Extraction_plugin__Miniml", 14)); (("Tdummy", 392), ([(Tag3 ((("kill_reason", 764)), 0, (0)), 100000000, 0, -197)]), 0, (("plugins/extraction/miniml.mli", 45, 1540, 1542), ("plugins/extraction/miniml.mli", 45, 1540, 1566), 0), 0, Tag1 ("Extraction_plugin__Miniml", 15)); (("Tunknown", 393), (0), 0, (("plugins/extraction/miniml.mli", 46, 1567, 1569), ("plugins/extraction/miniml.mli", 46, 1567, 1579), 0), 0, Tag1 ("Extraction_plugin__Miniml", 16)); (("Taxiom", 394), (0), 0, (("plugins/extraction/miniml.mli", 47, 1580, 1582), ("plugins/extraction/miniml.mli", 47, 1580, 1590), 0), 0, Tag1 ("Extraction_plugin__Miniml", 17))], 0), 1, 0, 0, 0, 0, 0, (("plugins/extraction/miniml.mli", 39, 1310, 1310), ("plugins/extraction/miniml.mli", 47, 1580, 1590), 0), 0, 0, 0, Tag1 ("Extraction_plugin__Miniml", 8)), 1, 0); Tag1 (("ml_meta", 768), (0, 0, [[(("id", 395), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -186), (("plugins/extraction/miniml.mli", 49, 1592, 1608), ("plugins/extraction/miniml.mli", 49, 1592, 1617), 0), 0, Tag1 ("Extraction_plugin__Miniml", 18)); (("contents", 396), 1, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("ml_type", 767)), 0, (0)), 100000000, 0, -188)], (0)), 100000000, 0, -187), (("plugins/extraction/miniml.mli", 49, 1592, 1618), ("plugins/extraction/miniml.mli", 49, 1592, 1651), 0), 0, Tag1 ("Extraction_plugin__Miniml", 19))]], 1, 0, 0, 0, 0, 0, (("plugins/extraction/miniml.mli", 49, 1592, 1592), ("plugins/extraction/miniml.mli", 49, 1592, 1653), 0), 0, 0, 0, Tag1 ("Extraction_plugin__Miniml", 9)), 2, 0); Tag1 (("ml_schema", 769), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -184); (Tag3 ((("ml_type", 767)), 0, (0)), 100000000, 0, -185)]), 100000000, 0, -183)), 0, 0, 0, 0, (("plugins/extraction/miniml.mli", 54, 1734, 1734), ("plugins/extraction/miniml.mli", 54, 1734, 1764), 0), 0, 0, 0, Tag1 ("Extraction_plugin__Miniml", 20)), 1, 0); Tag1 (("inductive_kind", 770), (0, 0, Tag1 ([(("Singleton", 399), (0), 0, (("plugins/extraction/miniml.mli", 59, 1816, 1818), ("plugins/extraction/miniml.mli", 59, 1816, 1829), 0), 0, Tag1 ("Extraction_plugin__Miniml", 22)); (("Coinductive", 400), (0), 0, (("plugins/extraction/miniml.mli", 60, 1830, 1832), ("plugins/extraction/miniml.mli", 60, 1830, 1845), 0), 0, Tag1 ("Extraction_plugin__Miniml", 23)); (("Standard", 401), (0), 0, (("plugins/extraction/miniml.mli", 61, 1846, 1848), ("plugins/extraction/miniml.mli", 61, 1846, 1858), 0), 0, Tag1 ("Extraction_plugin__Miniml", 24)); (("Record", 402), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -182)], (0)), 100000000, 0, -181)], (0)), 100000000, 0, -180)]), 0, (("plugins/extraction/miniml.mli", 62, 1859, 1861), ("plugins/extraction/miniml.mli", 62, 1859, 1894), 0), 0, Tag1 ("Extraction_plugin__Miniml", 25))], 0), 1, 0, 0, 0, 0, 0, (("plugins/extraction/miniml.mli", 58, 1794, 1794), ("plugins/extraction/miniml.mli", 62, 1859, 1894), 0), 0, 0, 0, Tag1 ("Extraction_plugin__Miniml", 21)), 1, 0); Tag1 (("ml_ind_packet", 771), (0, 0, [[(("ip_typename", 420), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -170), (("plugins/extraction/miniml.mli", 73, 2330, 2332), ("plugins/extraction/miniml.mli", 73, 2330, 2351), 0), 0, Tag1 ("Extraction_plugin__Miniml", 27)); (("ip_consnames", 421), 0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -172)], (0)), 100000000, 0, -171), (("plugins/extraction/miniml.mli", 74, 2352, 2354), ("plugins/extraction/miniml.mli", 74, 2352, 2380), 0), 0, Tag1 ("Extraction_plugin__Miniml", 28)); (("ip_logical", 422), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -173), (("plugins/extraction/miniml.mli", 75, 2381, 2383), ("plugins/extraction/miniml.mli", 75, 2381, 2401), 0), 0, Tag1 ("Extraction_plugin__Miniml", 29)); (("ip_sign", 423), 0, (Tag3 ((("signature", 766)), 0, (0)), 100000000, 0, -174), (("plugins/extraction/miniml.mli", 76, 2402, 2404), ("plugins/extraction/miniml.mli", 76, 2402, 2424), 0), 0, Tag1 ("Extraction_plugin__Miniml", 30)); (("ip_vars", 424), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -176)], (0)), 100000000, 0, -175), (("plugins/extraction/miniml.mli", 77, 2425, 2427), ("plugins/extraction/miniml.mli", 77, 2425, 2447), 0), 0, Tag1 ("Extraction_plugin__Miniml", 31)); (("ip_types", 425), 0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("ml_type", 767)), 0, (0)), 100000000, 0, -179)], (0)), 100000000, 0, -178)], (0)), 100000000, 0, -177), (("plugins/extraction/miniml.mli", 78, 2448, 2450), ("plugins/extraction/miniml.mli", 78, 2448, 2481), 0), 0, Tag1 ("Extraction_plugin__Miniml", 32))]], 1, 0, 0, 0, 0, 0, (("plugins/extraction/miniml.mli", 72, 2307, 2307), ("plugins/extraction/miniml.mli", 79, 2482, 2483), 0), 0, 0, 0, Tag1 ("Extraction_plugin__Miniml", 26)), 1, 0); Tag1 (("equiv", 772), (0, 0, Tag1 ([(("NoEquiv", 427), (0), 0, (("plugins/extraction/miniml.mli", 84, 2553, 2555), ("plugins/extraction/miniml.mli", 84, 2553, 2564), 0), 0, Tag1 ("Extraction_plugin__Miniml", 34)); (("Equiv", 428), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "KerName"), "t"), 0, (0)), 100000000, 0, -168)]), 0, (("plugins/extraction/miniml.mli", 85, 2565, 2567), ("plugins/extraction/miniml.mli", 85, 2565, 2587), 0), 0, Tag1 ("Extraction_plugin__Miniml", 35)); (("RenEquiv", 441), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -169)]), 0, (("plugins/extraction/miniml.mli", 86, 2588, 2590), ("plugins/extraction/miniml.mli", 86, 2588, 2610), 0), 0, Tag1 ("Extraction_plugin__Miniml", 36))], 0), 1, 0, 0, 0, 0, 0, (("plugins/extraction/miniml.mli", 83, 2540, 2540), ("plugins/extraction/miniml.mli", 86, 2588, 2610), 0), 0, 0, 0, Tag1 ("Extraction_plugin__Miniml", 33)), 1, 0); Tag1 (("ml_ind", 773), (0, 0, [[(("ind_kind", 443), 0, (Tag3 ((("inductive_kind", 770)), 0, (0)), 100000000, 0, -163), (("plugins/extraction/miniml.mli", 89, 2628, 2630), ("plugins/extraction/miniml.mli", 89, 2628, 2656), 0), 0, Tag1 ("Extraction_plugin__Miniml", 38)); (("ind_nparams", 444), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -164), (("plugins/extraction/miniml.mli", 90, 2657, 2659), ("plugins/extraction/miniml.mli", 90, 2657, 2677), 0), 0, Tag1 ("Extraction_plugin__Miniml", 39)); (("ind_packets", 445), 0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("ml_ind_packet", 771)), 0, (0)), 100000000, 0, -166)], (0)), 100000000, 0, -165), (("plugins/extraction/miniml.mli", 91, 2678, 2680), ("plugins/extraction/miniml.mli", 91, 2678, 2714), 0), 0, Tag1 ("Extraction_plugin__Miniml", 40)); (("ind_equiv", 446), 0, (Tag3 ((("equiv", 772)), 0, (0)), 100000000, 0, -167), (("plugins/extraction/miniml.mli", 92, 2715, 2717), ("plugins/extraction/miniml.mli", 92, 2715, 2734), 0), 0, Tag1 ("Extraction_plugin__Miniml", 41))]], 1, 0, 0, 0, 0, 0, (("plugins/extraction/miniml.mli", 88, 2612, 2612), ("plugins/extraction/miniml.mli", 93, 2735, 2736), 0), 0, 0, 0, Tag1 ("Extraction_plugin__Miniml", 37)), 1, 0); Tag1 (("ml_ident", 774), (0, 0, Tag1 ([(("Dummy", 448), (0), 0, (("plugins/extraction/miniml.mli", 98, 2772, 2774), ("plugins/extraction/miniml.mli", 98, 2772, 2781), 0), 0, Tag1 ("Extraction_plugin__Miniml", 43)); (("Id", 449), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -161)]), 0, (("plugins/extraction/miniml.mli", 99, 2782, 2784), ("plugins/extraction/miniml.mli", 99, 2782, 2796), 0), 0, Tag1 ("Extraction_plugin__Miniml", 44)); (("Tmp", 450), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -162)]), 0, (("plugins/extraction/miniml.mli", 100, 2797, 2799), ("plugins/extraction/miniml.mli", 100, 2797, 2812), 0), 0, Tag1 ("Extraction_plugin__Miniml", 45))], 0), 1, 0, 0, 0, 0, 0, (("plugins/extraction/miniml.mli", 97, 2756, 2756), ("plugins/extraction/miniml.mli", 100, 2797, 2812), 0), 0, 0, 0, Tag1 ("Extraction_plugin__Miniml", 42)), 1, 0); Tag1 (("ml_branch", 775), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("ml_ident", 774)), 0, (0)), 100000000, 0, -158)], (0)), 100000000, 0, -157); (Tag3 ((("ml_pattern", 777)), 0, (0)), 100000000, 0, -159); (Tag3 ((("ml_ast", 776)), 0, (0)), 100000000, 0, -160)]), 100000000, 0, -156)), 0, 0, 0, 0, (("plugins/extraction/miniml.mli", 113, 3284, 3284), ("plugins/extraction/miniml.mli", 113, 3284, 3336), 0), 0, 0, 0, Tag1 ("Extraction_plugin__Miniml", 46)), 1, 0); Tag1 (("ml_ast", 776), (0, 0, Tag1 ([(("MLrel", 454), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -123)]), 0, (("plugins/extraction/miniml.mli", 116, 3351, 3353), ("plugins/extraction/miniml.mli", 116, 3351, 3370), 0), 0, Tag1 ("Extraction_plugin__Miniml", 49)); (("MLapp", 455), ([(Tag3 ((("ml_ast", 776)), 0, (0)), 100000000, 0, -124); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("ml_ast", 776)), 0, (0)), 100000000, 0, -126)], (0)), 100000000, 0, -125)]), 0, (("plugins/extraction/miniml.mli", 117, 3371, 3373), ("plugins/extraction/miniml.mli", 117, 3371, 3407), 0), 0, Tag1 ("Extraction_plugin__Miniml", 50)); (("MLlam", 456), ([(Tag3 ((("ml_ident", 774)), 0, (0)), 100000000, 0, -127); (Tag3 ((("ml_ast", 776)), 0, (0)), 100000000, 0, -128)]), 0, (("plugins/extraction/miniml.mli", 118, 3408, 3410), ("plugins/extraction/miniml.mli", 118, 3408, 3441), 0), 0, Tag1 ("Extraction_plugin__Miniml", 51)); (("MLletin", 457), ([(Tag3 ((("ml_ident", 774)), 0, (0)), 100000000, 0, -129); (Tag3 ((("ml_ast", 776)), 0, (0)), 100000000, 0, -130); (Tag3 ((("ml_ast", 776)), 0, (0)), 100000000, 0, -131)]), 0, (("plugins/extraction/miniml.mli", 119, 3442, 3444), ("plugins/extraction/miniml.mli", 119, 3442, 3484), 0), 0, Tag1 ("Extraction_plugin__Miniml", 52)); (("MLglob", 458), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -132)]), 0, (("plugins/extraction/miniml.mli", 120, 3485, 3487), ("plugins/extraction/miniml.mli", 120, 3485, 3510), 0), 0, Tag1 ("Extraction_plugin__Miniml", 53)); (("MLcons", 459), ([(Tag3 ((("ml_type", 767)), 0, (0)), 100000000, 0, -133); (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -134); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("ml_ast", 776)), 0, (0)), 100000000, 0, -136)], (0)), 100000000, 0, -135)]), 0, (("plugins/extraction/miniml.mli", 121, 3511, 3513), ("plugins/extraction/miniml.mli", 121, 3511, 3560), 0), 0, Tag1 ("Extraction_plugin__Miniml", 54)); (("MLtuple", 460), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("ml_ast", 776)), 0, (0)), 100000000, 0, -138)], (0)), 100000000, 0, -137)]), 0, (("plugins/extraction/miniml.mli", 122, 3561, 3563), ("plugins/extraction/miniml.mli", 122, 3561, 3588), 0), 0, Tag1 ("Extraction_plugin__Miniml", 55)); (("MLcase", 461), ([(Tag3 ((("ml_type", 767)), 0, (0)), 100000000, 0, -139); (Tag3 ((("ml_ast", 776)), 0, (0)), 100000000, 0, -140); (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("ml_branch", 775)), 0, (0)), 100000000, 0, -142)], (0)), 100000000, 0, -141)]), 0, (("plugins/extraction/miniml.mli", 123, 3589, 3591), ("plugins/extraction/miniml.mli", 123, 3589, 3639), 0), 0, Tag1 ("Extraction_plugin__Miniml", 56)); (("MLfix", 462), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -143); (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -145)], (0)), 100000000, 0, -144); (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("ml_ast", 776)), 0, (0)), 100000000, 0, -147)], (0)), 100000000, 0, -146)]), 0, (("plugins/extraction/miniml.mli", 124, 3640, 3642), ("plugins/extraction/miniml.mli", 124, 3640, 3687), 0), 0, Tag1 ("Extraction_plugin__Miniml", 57)); (("MLexn", 463), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -148)]), 0, (("plugins/extraction/miniml.mli", 125, 3688, 3690), ("plugins/extraction/miniml.mli", 125, 3688, 3710), 0), 0, Tag1 ("Extraction_plugin__Miniml", 58)); (("MLdummy", 464), ([(Tag3 ((("kill_reason", 764)), 0, (0)), 100000000, 0, -149)]), 0, (("plugins/extraction/miniml.mli", 126, 3711, 3713), ("plugins/extraction/miniml.mli", 126, 3711, 3738), 0), 0, Tag1 ("Extraction_plugin__Miniml", 59)); (("MLaxiom", 465), (0), 0, (("plugins/extraction/miniml.mli", 127, 3739, 3741), ("plugins/extraction/miniml.mli", 127, 3739, 3750), 0), 0, Tag1 ("Extraction_plugin__Miniml", 60)); (("MLmagic", 466), ([(Tag3 ((("ml_ast", 776)), 0, (0)), 100000000, 0, -150)]), 0, (("plugins/extraction/miniml.mli", 128, 3751, 3753), ("plugins/extraction/miniml.mli", 128, 3751, 3773), 0), 0, Tag1 ("Extraction_plugin__Miniml", 61)); (("MLuint", 467), ([(Tag3 (Tag1 ((Tag2 ("Uint63")), "t"), 0, (0)), 100000000, 0, -151)]), 0, (("plugins/extraction/miniml.mli", 129, 3774, 3776), ("plugins/extraction/miniml.mli", 129, 3774, 3798), 0), 0, Tag1 ("Extraction_plugin__Miniml", 62)); (("MLfloat", 515), ([(Tag3 (Tag1 ((Tag2 ("Float64")), "t"), 0, (0)), 100000000, 0, -152)]), 0, (("plugins/extraction/miniml.mli", 130, 3799, 3801), ("plugins/extraction/miniml.mli", 130, 3799, 3824), 0), 0, Tag1 ("Extraction_plugin__Miniml", 63)); (("MLparray", 552), ([(Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("ml_ast", 776)), 0, (0)), 100000000, 0, -154)], (0)), 100000000, 0, -153); (Tag3 ((("ml_ast", 776)), 0, (0)), 100000000, 0, -155)]), 0, (("plugins/extraction/miniml.mli", 131, 3825, 3827), ("plugins/extraction/miniml.mli", 131, 3825, 3862), 0), 0, Tag1 ("Extraction_plugin__Miniml", 64))], 0), 1, 0, 0, 0, 0, 0, (("plugins/extraction/miniml.mli", 115, 3338, 3338), ("plugins/extraction/miniml.mli", 131, 3825, 3862), 0), 0, 0, 0, Tag1 ("Extraction_plugin__Miniml", 47)), 2, 0); Tag1 (("ml_pattern", 777), (0, 0, Tag1 ([(("Pcons", 553), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -116); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("ml_pattern", 777)), 0, (0)), 100000000, 0, -118)], (0)), 100000000, 0, -117)]), 0, (("plugins/extraction/miniml.mli", 134, 3881, 3883), ("plugins/extraction/miniml.mli", 134, 3881, 3923), 0), 0, Tag1 ("Extraction_plugin__Miniml", 65)); (("Ptuple", 554), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("ml_pattern", 777)), 0, (0)), 100000000, 0, -120)], (0)), 100000000, 0, -119)]), 0, (("plugins/extraction/miniml.mli", 135, 3924, 3926), ("plugins/extraction/miniml.mli", 135, 3924, 3954), 0), 0, Tag1 ("Extraction_plugin__Miniml", 66)); (("Prel", 555), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -121)]), 0, (("plugins/extraction/miniml.mli", 136, 3955, 3957), ("plugins/extraction/miniml.mli", 136, 3955, 3973), 0), 0, Tag1 ("Extraction_plugin__Miniml", 67)); (("Pwild", 556), (0), 0, (("plugins/extraction/miniml.mli", 137, 4037, 4039), ("plugins/extraction/miniml.mli", 137, 4037, 4046), 0), 0, Tag1 ("Extraction_plugin__Miniml", 68)); (("Pusual", 557), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -122)]), 0, (("plugins/extraction/miniml.mli", 138, 4047, 4049), ("plugins/extraction/miniml.mli", 138, 4047, 4071), 0), 0, Tag1 ("Extraction_plugin__Miniml", 69))], 0), 1, 0, 0, 0, 0, 0, (("plugins/extraction/miniml.mli", 133, 3864, 3864), ("plugins/extraction/miniml.mli", 138, 4047, 4071), 0), 0, 0, 0, Tag1 ("Extraction_plugin__Miniml", 48)), 2, 0); Tag1 (("ml_decl", 778), (0, 0, Tag1 ([(("Dind", 559), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "MutInd"), "t"), 0, (0)), 100000000, 0, -101); (Tag3 ((("ml_ind", 773)), 0, (0)), 100000000, 0, -102)]), 0, (("plugins/extraction/miniml.mli", 143, 4164, 4166), ("plugins/extraction/miniml.mli", 143, 4164, 4194), 0), 0, Tag1 ("Extraction_plugin__Miniml", 71)); (("Dtype", 577), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -103); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -105)], (0)), 100000000, 0, -104); (Tag3 ((("ml_type", 767)), 0, (0)), 100000000, 0, -106)]), 0, (("plugins/extraction/miniml.mli", 144, 4195, 4197), ("plugins/extraction/miniml.mli", 144, 4195, 4239), 0), 0, Tag1 ("Extraction_plugin__Miniml", 72)); (("Dterm", 578), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -107); (Tag3 ((("ml_ast", 776)), 0, (0)), 100000000, 0, -108); (Tag3 ((("ml_type", 767)), 0, (0)), 100000000, 0, -109)]), 0, (("plugins/extraction/miniml.mli", 145, 4240, 4242), ("plugins/extraction/miniml.mli", 145, 4240, 4281), 0), 0, Tag1 ("Extraction_plugin__Miniml", 73)); (("Dfix", 579), ([(Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -111)], (0)), 100000000, 0, -110); (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("ml_ast", 776)), 0, (0)), 100000000, 0, -113)], (0)), 100000000, 0, -112); (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("ml_type", 767)), 0, (0)), 100000000, 0, -115)], (0)), 100000000, 0, -114)]), 0, (("plugins/extraction/miniml.mli", 146, 4282, 4284), ("plugins/extraction/miniml.mli", 146, 4282, 4341), 0), 0, Tag1 ("Extraction_plugin__Miniml", 74))], 0), 1, 0, 0, 0, 0, 0, (("plugins/extraction/miniml.mli", 142, 4149, 4149), ("plugins/extraction/miniml.mli", 146, 4282, 4341), 0), 0, 0, 0, Tag1 ("Extraction_plugin__Miniml", 70)), 1, 0); Tag1 (("ml_spec", 779), (0, 0, Tag1 ([(("Sind", 581), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "MutInd"), "t"), 0, (0)), 100000000, 0, -92); (Tag3 ((("ml_ind", 773)), 0, (0)), 100000000, 0, -93)]), 0, (("plugins/extraction/miniml.mli", 149, 4358, 4360), ("plugins/extraction/miniml.mli", 149, 4358, 4388), 0), 0, Tag1 ("Extraction_plugin__Miniml", 76)); (("Stype", 582), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -94); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -96)], (0)), 100000000, 0, -95); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("ml_type", 767)), 0, (0)), 100000000, 0, -98)], (0)), 100000000, 0, -97)]), 0, (("plugins/extraction/miniml.mli", 150, 4389, 4391), ("plugins/extraction/miniml.mli", 150, 4389, 4440), 0), 0, Tag1 ("Extraction_plugin__Miniml", 77)); (("Sval", 583), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -99); (Tag3 ((("ml_type", 767)), 0, (0)), 100000000, 0, -100)]), 0, (("plugins/extraction/miniml.mli", 151, 4441, 4443), ("plugins/extraction/miniml.mli", 151, 4441, 4473), 0), 0, Tag1 ("Extraction_plugin__Miniml", 78))], 0), 1, 0, 0, 0, 0, 0, (("plugins/extraction/miniml.mli", 148, 4343, 4343), ("plugins/extraction/miniml.mli", 151, 4441, 4473), 0), 0, 0, 0, Tag1 ("Extraction_plugin__Miniml", 75)), 1, 0); Tag1 (("ml_specif", 780), (0, 0, Tag1 ([(("Spec", 588), ([(Tag3 ((("ml_spec", 779)), 0, (0)), 100000000, 0, -89)]), 0, (("plugins/extraction/miniml.mli", 154, 4492, 4494), ("plugins/extraction/miniml.mli", 154, 4492, 4511), 0), 0, Tag1 ("Extraction_plugin__Miniml", 83)); (("Smodule", 589), ([(Tag3 ((("ml_module_type", 781)), 0, (0)), 100000000, 0, -90)]), 0, (("plugins/extraction/miniml.mli", 155, 4512, 4514), ("plugins/extraction/miniml.mli", 155, 4512, 4541), 0), 0, Tag1 ("Extraction_plugin__Miniml", 84)); (("Smodtype", 590), ([(Tag3 ((("ml_module_type", 781)), 0, (0)), 100000000, 0, -91)]), 0, (("plugins/extraction/miniml.mli", 156, 4542, 4544), ("plugins/extraction/miniml.mli", 156, 4542, 4572), 0), 0, Tag1 ("Extraction_plugin__Miniml", 85))], 0), 1, 0, 0, 0, 0, 0, (("plugins/extraction/miniml.mli", 153, 4475, 4475), ("plugins/extraction/miniml.mli", 156, 4542, 4572), 0), 0, 0, 0, Tag1 ("Extraction_plugin__Miniml", 79)), 1, 0); Tag1 (("ml_module_type", 781), (0, 0, Tag1 ([(("MTident", 591), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -81)]), 0, (("plugins/extraction/miniml.mli", 159, 4595, 4597), ("plugins/extraction/miniml.mli", 159, 4595, 4619), 0), 0, Tag1 ("Extraction_plugin__Miniml", 86)); (("MTfunsig", 601), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "MBId"), "t"), 0, (0)), 100000000, 0, -82); (Tag3 ((("ml_module_type", 781)), 0, (0)), 100000000, 0, -83); (Tag3 ((("ml_module_type", 781)), 0, (0)), 100000000, 0, -84)]), 0, (("plugins/extraction/miniml.mli", 160, 4620, 4622), ("plugins/extraction/miniml.mli", 160, 4620, 4676), 0), 0, Tag1 ("Extraction_plugin__Miniml", 87)); (("MTsig", 611), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -85); (Tag3 ((("ml_module_sig", 783)), 0, (0)), 100000000, 0, -86)]), 0, (("plugins/extraction/miniml.mli", 161, 4677, 4679), ("plugins/extraction/miniml.mli", 161, 4677, 4715), 0), 0, Tag1 ("Extraction_plugin__Miniml", 88)); (("MTwith", 612), ([(Tag3 ((("ml_module_type", 781)), 0, (0)), 100000000, 0, -87); (Tag3 ((("ml_with_declaration", 782)), 0, (0)), 100000000, 0, -88)]), 0, (("plugins/extraction/miniml.mli", 162, 4716, 4718), ("plugins/extraction/miniml.mli", 162, 4716, 4766), 0), 0, Tag1 ("Extraction_plugin__Miniml", 89))], 0), 1, 0, 0, 0, 0, 0, (("plugins/extraction/miniml.mli", 158, 4574, 4574), ("plugins/extraction/miniml.mli", 162, 4716, 4766), 0), 0, 0, 0, Tag1 ("Extraction_plugin__Miniml", 80)), 2, 0); Tag1 (("ml_with_declaration", 782), (0, 0, Tag1 ([(("ML_With_type", 613), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -74)], (0)), 100000000, 0, -73); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -76)], (0)), 100000000, 0, -75); (Tag3 ((("ml_type", 767)), 0, (0)), 100000000, 0, -77)]), 0, (("plugins/extraction/miniml.mli", 165, 4794, 4796), ("plugins/extraction/miniml.mli", 165, 4794, 4845), 0), 0, Tag1 ("Extraction_plugin__Miniml", 90)); (("ML_With_module", 614), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -79)], (0)), 100000000, 0, -78); (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -80)]), 0, (("plugins/extraction/miniml.mli", 166, 4846, 4848), ("plugins/extraction/miniml.mli", 166, 4846, 4889), 0), 0, Tag1 ("Extraction_plugin__Miniml", 91))], 0), 1, 0, 0, 0, 0, 0, (("plugins/extraction/miniml.mli", 164, 4768, 4768), ("plugins/extraction/miniml.mli", 166, 4846, 4889), 0), 0, 0, 0, Tag1 ("Extraction_plugin__Miniml", 81)), 2, 0); Tag1 (("ml_module_sig", 783), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Label"), "t"), 0, (0)), 100000000, 0, -71); (Tag3 ((("ml_specif", 780)), 0, (0)), 100000000, 0, -72)]), 100000000, 0, -70)], (0)), 100000000, 0, -69)), 0, 0, 0, 0, (("plugins/extraction/miniml.mli", 168, 4891, 4891), ("plugins/extraction/miniml.mli", 168, 4891, 4937), 0), 0, 0, 0, Tag1 ("Extraction_plugin__Miniml", 82)), 2, 0); Tag1 (("ml_structure_elem", 784), (0, 0, Tag1 ([(("SEdecl", 631), ([(Tag3 ((("ml_decl", 778)), 0, (0)), 100000000, 0, -66)]), 0, (("plugins/extraction/miniml.mli", 171, 4964, 4966), ("plugins/extraction/miniml.mli", 171, 4964, 4985), 0), 0, Tag1 ("Extraction_plugin__Miniml", 96)); (("SEmodule", 632), ([(Tag3 ((("ml_module", 787)), 0, (0)), 100000000, 0, -67)]), 0, (("plugins/extraction/miniml.mli", 172, 4986, 4988), ("plugins/extraction/miniml.mli", 172, 4986, 5011), 0), 0, Tag1 ("Extraction_plugin__Miniml", 97)); (("SEmodtype", 633), ([(Tag3 ((("ml_module_type", 781)), 0, (0)), 100000000, 0, -68)]), 0, (("plugins/extraction/miniml.mli", 173, 5012, 5014), ("plugins/extraction/miniml.mli", 173, 5012, 5043), 0), 0, Tag1 ("Extraction_plugin__Miniml", 98))], 0), 1, 0, 0, 0, 0, 0, (("plugins/extraction/miniml.mli", 170, 4939, 4939), ("plugins/extraction/miniml.mli", 173, 5012, 5043), 0), 0, 0, 0, Tag1 ("Extraction_plugin__Miniml", 92)), 1, 0); Tag1 (("ml_module_expr", 785), (0, 0, Tag1 ([(("MEident", 634), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -58)]), 0, (("plugins/extraction/miniml.mli", 176, 5066, 5068), ("plugins/extraction/miniml.mli", 176, 5066, 5090), 0), 0, Tag1 ("Extraction_plugin__Miniml", 99)); (("MEfunctor", 635), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "MBId"), "t"), 0, (0)), 100000000, 0, -59); (Tag3 ((("ml_module_type", 781)), 0, (0)), 100000000, 0, -60); (Tag3 ((("ml_module_expr", 785)), 0, (0)), 100000000, 0, -61)]), 0, (("plugins/extraction/miniml.mli", 177, 5091, 5093), ("plugins/extraction/miniml.mli", 177, 5091, 5148), 0), 0, Tag1 ("Extraction_plugin__Miniml", 100)); (("MEstruct", 636), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -62); (Tag3 ((("ml_module_structure", 786)), 0, (0)), 100000000, 0, -63)]), 0, (("plugins/extraction/miniml.mli", 178, 5149, 5151), ("plugins/extraction/miniml.mli", 178, 5149, 5196), 0), 0, Tag1 ("Extraction_plugin__Miniml", 101)); (("MEapply", 637), ([(Tag3 ((("ml_module_expr", 785)), 0, (0)), 100000000, 0, -64); (Tag3 ((("ml_module_expr", 785)), 0, (0)), 100000000, 0, -65)]), 0, (("plugins/extraction/miniml.mli", 179, 5197, 5199), ("plugins/extraction/miniml.mli", 179, 5197, 5243), 0), 0, Tag1 ("Extraction_plugin__Miniml", 102))], 0), 1, 0, 0, 0, 0, 0, (("plugins/extraction/miniml.mli", 175, 5045, 5045), ("plugins/extraction/miniml.mli", 179, 5197, 5243), 0), 0, 0, 0, Tag1 ("Extraction_plugin__Miniml", 93)), 2, 0); Tag1 (("ml_module_structure", 786), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Label"), "t"), 0, (0)), 100000000, 0, -56); (Tag3 ((("ml_structure_elem", 784)), 0, (0)), 100000000, 0, -57)]), 100000000, 0, -55)], (0)), 100000000, 0, -54)), 0, 0, 0, 0, (("plugins/extraction/miniml.mli", 181, 5245, 5245), ("plugins/extraction/miniml.mli", 181, 5245, 5305), 0), 0, 0, 0, Tag1 ("Extraction_plugin__Miniml", 94)), 2, 0); Tag1 (("ml_module", 787), (0, 0, [[(("ml_mod_expr", 638), 0, (Tag3 ((("ml_module_expr", 785)), 0, (0)), 100000000, 0, -52), (("plugins/extraction/miniml.mli", 184, 5323, 5329), ("plugins/extraction/miniml.mli", 184, 5323, 5358), 0), 0, Tag1 ("Extraction_plugin__Miniml", 103)); (("ml_mod_type", 639), 0, (Tag3 ((("ml_module_type", 781)), 0, (0)), 100000000, 0, -53), (("plugins/extraction/miniml.mli", 185, 5359, 5365), ("plugins/extraction/miniml.mli", 185, 5359, 5393), 0), 0, Tag1 ("Extraction_plugin__Miniml", 104))]], 1, 0, 0, 0, 0, 0, (("plugins/extraction/miniml.mli", 183, 5307, 5307), ("plugins/extraction/miniml.mli", 185, 5359, 5395), 0), 0, 0, 0, Tag1 ("Extraction_plugin__Miniml", 95)), 2, 0); Tag1 (("ml_structure", 788), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -50); (Tag3 ((("ml_module_structure", 786)), 0, (0)), 100000000, 0, -51)]), 100000000, 0, -49)], (0)), 100000000, 0, -48)), 0, 0, 0, 0, (("plugins/extraction/miniml.mli", 190, 5539, 5539), ("plugins/extraction/miniml.mli", 190, 5539, 5597), 0), 0, 0, 0, Tag1 ("Extraction_plugin__Miniml", 105)), 1, 0); Tag1 (("ml_signature", 789), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -46); (Tag3 ((("ml_module_sig", 783)), 0, (0)), 100000000, 0, -47)]), 100000000, 0, -45)], (0)), 100000000, 0, -44)), 0, 0, 0, 0, (("plugins/extraction/miniml.mli", 192, 5599, 5599), ("plugins/extraction/miniml.mli", 192, 5599, 5651), 0), 0, 0, 0, Tag1 ("Extraction_plugin__Miniml", 106)), 1, 0); Tag1 (("unsafe_needs", 790), (0, 0, [[(("mldummy", 643), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -40), (("plugins/extraction/miniml.mli", 195, 5675, 5677), ("plugins/extraction/miniml.mli", 195, 5675, 5692), 0), 0, Tag1 ("Extraction_plugin__Miniml", 108)); (("tdummy", 644), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -41), (("plugins/extraction/miniml.mli", 196, 5693, 5695), ("plugins/extraction/miniml.mli", 196, 5693, 5709), 0), 0, Tag1 ("Extraction_plugin__Miniml", 109)); (("tunknown", 645), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -42), (("plugins/extraction/miniml.mli", 197, 5710, 5712), ("plugins/extraction/miniml.mli", 197, 5710, 5728), 0), 0, Tag1 ("Extraction_plugin__Miniml", 110)); (("magic", 646), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -43), (("plugins/extraction/miniml.mli", 198, 5729, 5731), ("plugins/extraction/miniml.mli", 198, 5729, 5743), 0), 0, Tag1 ("Extraction_plugin__Miniml", 111))]], 1, 0, 0, 0, 0, 0, (("plugins/extraction/miniml.mli", 194, 5653, 5653), ("plugins/extraction/miniml.mli", 199, 5744, 5745), 0), 0, 0, 0, Tag1 ("Extraction_plugin__Miniml", 107)), 1, 0); Tag1 (("language_descr", 791), (0, 0, [[(("keywords", 693), 0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Set"), "t"), 0, (0)), 100000000, 0, -2), (("plugins/extraction/miniml.mli", 202, 5771, 5773), ("plugins/extraction/miniml.mli", 202, 5771, 5793), 0), 0, Tag1 ("Extraction_plugin__Miniml", 113)); (("file_suffix", 694), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3), (("plugins/extraction/miniml.mli", 205, 5830, 5832), ("plugins/extraction/miniml.mli", 205, 5830, 5853), 0), 0, Tag1 ("Extraction_plugin__Miniml", 114)); (("file_naming", 695), 0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -6), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5), 0), 100000000, 0, -4), (("plugins/extraction/miniml.mli", 206, 5854, 5856), ("plugins/extraction/miniml.mli", 206, 5854, 5890), 0), 0, Tag1 ("Extraction_plugin__Miniml", 115)); (("preamble", 758), 0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -17), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -16)], (0)), 100000000, 0, -15), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -14)], (0)), 100000000, 0, -13), (Tag1 (0, (Tag3 ((("unsafe_needs", 790)), 0, (0)), 100000000, 0, -12), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -11), 0), 100000000, 0, -10), 0), 100000000, 0, -9), 0), 100000000, 0, -8), 0), 100000000, 0, -7), (("plugins/extraction/miniml.mli", 208, 5955, 5957), ("plugins/extraction/miniml.mli", 210, 6029, 6038), 0), 0, Tag1 ("Extraction_plugin__Miniml", 116)); (("pp_struct", 759), 0, (Tag1 (0, (Tag3 ((("ml_structure", 788)), 0, (0)), 100000000, 0, -20), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -19), 0), 100000000, 0, -18), (("plugins/extraction/miniml.mli", 211, 6039, 6041), ("plugins/extraction/miniml.mli", 211, 6039, 6074), 0), 0, Tag1 ("Extraction_plugin__Miniml", 117)); (("sig_suffix", 760), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -22)], (0)), 100000000, 0, -21), (("plugins/extraction/miniml.mli", 214, 6121, 6123), ("plugins/extraction/miniml.mli", 214, 6121, 6150), 0), 0, Tag1 ("Extraction_plugin__Miniml", 118)); (("sig_preamble", 761), 0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -33), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -32)], (0)), 100000000, 0, -31), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -30)], (0)), 100000000, 0, -29), (Tag1 (0, (Tag3 ((("unsafe_needs", 790)), 0, (0)), 100000000, 0, -28), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -27), 0), 100000000, 0, -26), 0), 100000000, 0, -25), 0), 100000000, 0, -24), 0), 100000000, 0, -23), (("plugins/extraction/miniml.mli", 216, 6215, 6217), ("plugins/extraction/miniml.mli", 218, 6293, 6302), 0), 0, Tag1 ("Extraction_plugin__Miniml", 119)); (("pp_sig", 762), 0, (Tag1 (0, (Tag3 ((("ml_signature", 789)), 0, (0)), 100000000, 0, -36), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -35), 0), 100000000, 0, -34), (("plugins/extraction/miniml.mli", 219, 6303, 6305), ("plugins/extraction/miniml.mli", 219, 6303, 6335), 0), 0, Tag1 ("Extraction_plugin__Miniml", 120)); (("pp_decl", 763), 0, (Tag1 (0, (Tag3 ((("ml_decl", 778)), 0, (0)), 100000000, 0, -39), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -38), 0), 100000000, 0, -37), (("plugins/extraction/miniml.mli", 222, 6379, 6381), ("plugins/extraction/miniml.mli", 222, 6379, 6407), 0), 0, Tag1 ("Extraction_plugin__Miniml", 121))]], 1, 0, 0, 0, 0, 0, (("plugins/extraction/miniml.mli", 201, 5747, 5747), ("plugins/extraction/miniml.mli", 224, 6409, 6410), 0), 0, 0, 0, Tag1 ("Extraction_plugin__Miniml", 112)), 1, 0)], "Extraction_plugin__Miniml", [("Extraction_plugin__Miniml", ("\130\229}\135\140\233\017o.s\132\238\240\155\168f")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Extraction_plugin", ("o,\156$\195_6\238J\232\255\189\197B\169\n")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150"))], [(0)])

}

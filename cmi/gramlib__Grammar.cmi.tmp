type norec
type mayrec
module type S =
  sig
    type keyword_state
    type te
    type 'c pattern
    type ty_pattern = TPattern : 'a pattern -> ty_pattern
    type 'a with_gstate
    type 'a with_kwstate
    type 'a with_estate
    type 'a mod_estate
    module Parsable :
      sig
        type t
        val make : ?loc:Loc.t -> (unit, char) Gramlib.Stream.t -> t
        val comments : t -> ((int * int) * string) list
        val loc : t -> Loc.t
        val consume : t -> int -> unit with_kwstate
      end
    module Entry :
      sig
        type 'a t
        val make : string -> 'a t mod_estate
        val parse : 'a t -> Parsable.t -> 'a with_gstate
        val name : 'a t -> string
        type 'a parser_fun = {
          parser_fun :
            keyword_state -> (keyword_state, te) Gramlib.LStream.t -> 'a;
        }
        val of_parser : string -> 'a parser_fun -> 'a t mod_estate
        val parse_token_stream :
          'a t -> (keyword_state, te) Gramlib.LStream.t -> 'a with_gstate
        val print : Format.formatter -> 'a t -> unit with_estate
        val is_empty : 'a t -> bool with_estate
        type any_t = Any : 'a t -> any_t
        val accumulate_in : 'a t -> any_t list CString.Map.t with_estate
      end
    module rec Symbol :
      sig
        type ('self, 'trec, 'a) t
        val nterm : 'a Entry.t -> ('self, norec, 'a) t
        val nterml : 'a Entry.t -> string -> ('self, norec, 'a) t
        val list0 : ('self, 'trec, 'a) t -> ('self, 'trec, 'a list) t
        val list0sep :
          ('self, 'trec, 'a) t ->
          ('self, norec, unit) t -> bool -> ('self, 'trec, 'a list) t
        val list1 : ('self, 'trec, 'a) t -> ('self, 'trec, 'a list) t
        val list1sep :
          ('self, 'trec, 'a) t ->
          ('self, norec, unit) t -> bool -> ('self, 'trec, 'a list) t
        val opt : ('self, 'trec, 'a) t -> ('self, 'trec, 'a option) t
        val self : ('self, mayrec, 'self) t
        val next : ('self, mayrec, 'self) t
        val token : 'c pattern -> ('self, norec, 'c) t
        val tokens : ty_pattern list -> ('self, norec, unit) t
        val rules : 'a Rules.t list -> ('self, norec, 'a) t
      end
    and Rule :
      sig
        type ('self, 'trec, 'f, 'r) t
        val stop : ('self, norec, 'r, 'r) t
        val next :
          ('self, 'c, 'a, 'r) t ->
          ('self, 'd, 'b) Symbol.t -> ('self, mayrec, 'b -> 'a, 'r) t
        val next_norec :
          ('self, norec, 'a, 'r) Rule.t ->
          ('self, norec, 'b) Symbol.t -> ('self, norec, 'b -> 'a, 'r) t
      end
    and Rules :
      sig
        type 'a t
        val make : ('b, norec, 'f, Loc.t -> 'a) Rule.t -> 'f -> 'a t
      end
    module Production :
      sig
        type 'a t
        val make : ('a, 'b, 'f, Loc.t -> 'a) Rule.t -> 'f -> 'a t
      end
    type 'a single_extend_statement =
        string option * Gramlib.Gramext.g_assoc option * 'a Production.t list
    type 'a extend_statement =
        Reuse of string option * 'a Production.t list
      | Fresh of Gramlib.Gramext.position * 'a single_extend_statement list
    val generalize_symbol :
      ('a, 'tr, 'c) Symbol.t -> ('a, norec, 'c) Symbol.t option
    val level_of_nonterm : ('a, norec, 'c) Symbol.t -> string option
  end
module type ExtS =
  sig
    type keyword_state
    module EState : sig type t val empty : t end
    module GState :
      sig type t = { estate : EState.t; kwstate : keyword_state; } end
    type te
    type 'c pattern
    type ty_pattern = TPattern : 'a pattern -> ty_pattern
    module Parsable :
      sig
        type t
        val make : ?loc:Loc.t -> (unit, char) Gramlib.Stream.t -> t
        val comments : t -> ((int * int) * string) list
        val loc : t -> Loc.t
        val consume : t -> int -> keyword_state -> unit
      end
    module Entry :
      sig
        type 'a t
        val make : string -> EState.t -> EState.t * 'a t
        val parse : 'a t -> Parsable.t -> GState.t -> 'a
        val name : 'a t -> string
        type 'a parser_fun = {
          parser_fun :
            keyword_state -> (keyword_state, te) Gramlib.LStream.t -> 'a;
        }
        val of_parser :
          string -> 'a parser_fun -> EState.t -> EState.t * 'a t
        val parse_token_stream :
          'a t -> (keyword_state, te) Gramlib.LStream.t -> GState.t -> 'a
        val print : Format.formatter -> 'a t -> EState.t -> unit
        val is_empty : 'a t -> EState.t -> bool
        type any_t = Any : 'a t -> any_t
        val accumulate_in : 'a t -> EState.t -> any_t list CString.Map.t
      end
    module rec Symbol :
      sig
        type ('self, 'trec, 'a) t
        val nterm : 'a Entry.t -> ('self, norec, 'a) t
        val nterml : 'a Entry.t -> string -> ('self, norec, 'a) t
        val list0 : ('self, 'trec, 'a) t -> ('self, 'trec, 'a list) t
        val list0sep :
          ('self, 'trec, 'a) t ->
          ('self, norec, unit) t -> bool -> ('self, 'trec, 'a list) t
        val list1 : ('self, 'trec, 'a) t -> ('self, 'trec, 'a list) t
        val list1sep :
          ('self, 'trec, 'a) t ->
          ('self, norec, unit) t -> bool -> ('self, 'trec, 'a list) t
        val opt : ('self, 'trec, 'a) t -> ('self, 'trec, 'a option) t
        val self : ('self, mayrec, 'self) t
        val next : ('self, mayrec, 'self) t
        val token : 'c pattern -> ('self, norec, 'c) t
        val tokens : ty_pattern list -> ('self, norec, unit) t
        val rules : 'a Rules.t list -> ('self, norec, 'a) t
      end
    and Rule :
      sig
        type ('self, 'trec, 'f, 'r) t
        val stop : ('self, norec, 'r, 'r) t
        val next :
          ('self, 'c, 'a, 'r) t ->
          ('self, 'd, 'b) Symbol.t -> ('self, mayrec, 'b -> 'a, 'r) t
        val next_norec :
          ('self, norec, 'a, 'r) Rule.t ->
          ('self, norec, 'b) Symbol.t -> ('self, norec, 'b -> 'a, 'r) t
      end
    and Rules :
      sig
        type 'a t
        val make : ('b, norec, 'f, Loc.t -> 'a) Rule.t -> 'f -> 'a t
      end
    module Production :
      sig
        type 'a t
        val make : ('a, 'b, 'f, Loc.t -> 'a) Rule.t -> 'f -> 'a t
      end
    type 'a single_extend_statement =
        string option * Gramlib.Gramext.g_assoc option * 'a Production.t list
    type 'a extend_statement =
        Reuse of string option * 'a Production.t list
      | Fresh of Gramlib.Gramext.position * 'a single_extend_statement list
    val generalize_symbol :
      ('a, 'tr, 'c) Symbol.t -> ('a, norec, 'c) Symbol.t option
    val level_of_nonterm : ('a, norec, 'c) Symbol.t -> string option
    type 's add_kw = { add_kw : 'c. 's -> 'c pattern -> 's; }
    val safe_extend :
      's add_kw ->
      EState.t -> 's -> 'a Entry.t -> 'a extend_statement -> EState.t * 's
    val safe_delete_rule :
      EState.t -> 'a Entry.t -> 'a Production.t -> EState.t
    module Unsafe :
      sig val clear_entry : EState.t -> 'a Entry.t -> EState.t end
  end
module GMake :
  functor (L : Gramlib.Plexing.S) ->
    sig
      module EState : sig type t val empty : t end
      module GState :
        sig type t = { estate : EState.t; kwstate : L.keyword_state; } end
      type ty_pattern = TPattern : 'a L.pattern -> ty_pattern
      module Parsable :
        sig
          type t
          val make : ?loc:Loc.t -> (unit, char) Gramlib.Stream.t -> t
          val comments : t -> ((int * int) * string) list
          val loc : t -> Loc.t
          val consume : t -> int -> L.keyword_state -> unit
        end
      module Entry :
        sig
          type 'a t
          val make : string -> EState.t -> EState.t * 'a t
          val parse : 'a t -> Parsable.t -> GState.t -> 'a
          val name : 'a t -> string
          type 'a parser_fun = {
            parser_fun :
              L.keyword_state ->
              (L.keyword_state, L.te) Gramlib.LStream.t -> 'a;
          }
          val of_parser :
            string -> 'a parser_fun -> EState.t -> EState.t * 'a t
          val parse_token_stream :
            'a t ->
            (L.keyword_state, L.te) Gramlib.LStream.t -> GState.t -> 'a
          val print : Format.formatter -> 'a t -> EState.t -> unit
          val is_empty : 'a t -> EState.t -> bool
          type any_t = Any : 'a t -> any_t
          val accumulate_in : 'a t -> EState.t -> any_t list CString.Map.t
        end
      module rec Symbol :
        sig
          type ('self, 'trec, 'a) t
          val nterm : 'a Entry.t -> ('self, norec, 'a) t
          val nterml : 'a Entry.t -> string -> ('self, norec, 'a) t
          val list0 : ('self, 'trec, 'a) t -> ('self, 'trec, 'a list) t
          val list0sep :
            ('self, 'trec, 'a) t ->
            ('self, norec, unit) t -> bool -> ('self, 'trec, 'a list) t
          val list1 : ('self, 'trec, 'a) t -> ('self, 'trec, 'a list) t
          val list1sep :
            ('self, 'trec, 'a) t ->
            ('self, norec, unit) t -> bool -> ('self, 'trec, 'a list) t
          val opt : ('self, 'trec, 'a) t -> ('self, 'trec, 'a option) t
          val self : ('self, mayrec, 'self) t
          val next : ('self, mayrec, 'self) t
          val token : 'c L.pattern -> ('self, norec, 'c) t
          val tokens : ty_pattern list -> ('self, norec, unit) t
          val rules : 'a Rules.t list -> ('self, norec, 'a) t
        end
      and Rule :
        sig
          type ('self, 'trec, 'f, 'r) t
          val stop : ('self, norec, 'r, 'r) t
          val next :
            ('self, 'c, 'a, 'r) t ->
            ('self, 'd, 'b) Symbol.t -> ('self, mayrec, 'b -> 'a, 'r) t
          val next_norec :
            ('self, norec, 'a, 'r) Rule.t ->
            ('self, norec, 'b) Symbol.t -> ('self, norec, 'b -> 'a, 'r) t
        end
      and Rules :
        sig
          type 'a t
          val make : ('b, norec, 'f, Loc.t -> 'a) Rule.t -> 'f -> 'a t
        end
      module Production :
        sig
          type 'a t
          val make : ('a, 'b, 'f, Loc.t -> 'a) Rule.t -> 'f -> 'a t
        end
      type 'a single_extend_statement =
          string option * Gramlib.Gramext.g_assoc option *
          'a Production.t list
      type 'a extend_statement =
          Reuse of string option * 'a Production.t list
        | Fresh of Gramlib.Gramext.position * 'a single_extend_statement list
      val generalize_symbol :
        ('a, 'tr, 'c) Symbol.t -> ('a, norec, 'c) Symbol.t option
      val level_of_nonterm : ('a, norec, 'c) Symbol.t -> string option
      type 's add_kw = { add_kw : 'c. 's -> 'c L.pattern -> 's; }
      val safe_extend :
        's add_kw ->
        EState.t -> 's -> 'a Entry.t -> 'a extend_statement -> EState.t * 's
      val safe_delete_rule :
        EState.t -> 'a Entry.t -> 'a Production.t -> EState.t
      module Unsafe :
        sig val clear_entry : EState.t -> 'a Entry.t -> EState.t end("DEBUG:rule", [Tag1 (("norec", 1910), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("gramlib/grammar.mli", 21, 656, 656), ("gramlib/grammar.mli", 21, 656, 666), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 0)), 1, 0); Tag1 (("mayrec", 1911), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("gramlib/grammar.mli", 22, 667, 667), ("gramlib/grammar.mli", 22, 667, 678), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 1)), 1, 0); Tag4 (("S", 1912), ((Tag1 ([Tag1 (("keyword_state", 1916), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("gramlib/grammar.mli", 25, 700, 702), ("gramlib/grammar.mli", 25, 700, 720), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 2)), 1, 0); Tag1 (("te", 1917), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("gramlib/grammar.mli", 26, 721, 723), ("gramlib/grammar.mli", 26, 721, 730), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 3)), 1, 0); Tag1 (("pattern", 1918), ([((("c")), 100000000, 0, -40)], 1, 0, 1, 0, [7], [2], 0, 0, (("gramlib/grammar.mli", 27, 731, 733), ("gramlib/grammar.mli", 27, 731, 748), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 4)), 1, 0); Tag1 (("ty_pattern", 1919), (0, 0, Tag1 ([(("TPattern", 280), ([(Tag3 ((("pattern", 1918)), [((("a")), 100000000, 0, -39)], (0)), 100000000, 0, -38)]), ((Tag3 ((("ty_pattern", 1919)), 0, (0)), 100000000, 0, -37)), (("gramlib/grammar.mli", 28, 749, 769), ("gramlib/grammar.mli", 28, 749, 804), 0), 0, Tag1 ("Gramlib__Grammar", 6))], 0), 1, 0, 0, 0, 0, 0, (("gramlib/grammar.mli", 28, 749, 751), ("gramlib/grammar.mli", 28, 749, 804), 0), 0, 0, 1, Tag1 ("Gramlib__Grammar", 5)), 1, 0); Tag1 (("with_gstate", 1920), ([((("a")), 100000000, 0, -36)], 1, 0, 1, 0, [7], [2], 0, 0, (("gramlib/grammar.mli", 33, 932, 934), ("gramlib/grammar.mli", 33, 932, 953), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 7)), 1, 0); Tag1 (("with_kwstate", 1921), ([((("a")), 100000000, 0, -35)], 1, 0, 1, 0, [7], [2], 0, 0, (("gramlib/grammar.mli", 36, 988, 990), ("gramlib/grammar.mli", 36, 988, 1010), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 8)), 1, 0); Tag1 (("with_estate", 1922), ([((("a")), 100000000, 0, -34)], 1, 0, 1, 0, [7], [2], 0, 0, (("gramlib/grammar.mli", 39, 1040, 1042), ("gramlib/grammar.mli", 39, 1040, 1061), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 9)), 1, 0); Tag1 (("mod_estate", 1923), ([((("a")), 100000000, 0, -33)], 1, 0, 1, 0, [7], [2], 0, 0, (("gramlib/grammar.mli", 42, 1089, 1091), ("gramlib/grammar.mli", 42, 1089, 1109), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 10)), 1, 0); Tag3 (("Parsable", 1924), 0, (Tag1 ([Tag1 (("t", 1934), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("gramlib/grammar.mli", 46, 1167, 1171), ("gramlib/grammar.mli", 46, 1167, 1177), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 11)), 1, 0); (("make", 1935), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -65)], (0)), 100000000, 0, -64), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Gramlib")), "Stream"), "t"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -62); (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -63)], (0)), 100000000, 0, -61), (Tag3 ((("t", 1934)), 0, (0)), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0, (("gramlib/grammar.mli", 47, 1178, 1182), ("gramlib/grammar.mli", 47, 1178, 1232), 0), 0, Tag1 ("Gramlib__Grammar", 13)), 0); (("comments", 1936), ((Tag1 (0, (Tag3 ((("t", 1934)), 0, (0)), 100000000, 0, -57), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -54); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -55)]), 100000000, 0, -53); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -56)]), 100000000, 0, -52)], (0)), 100000000, 0, -51), 0), 100000000, 0, -50), 0, (("gramlib/grammar.mli", 48, 1233, 1237), ("gramlib/grammar.mli", 48, 1233, 1284), 0), 0, Tag1 ("Gramlib__Grammar", 14)), 0); (("loc", 1937), ((Tag1 (0, (Tag3 ((("t", 1934)), 0, (0)), 100000000, 0, -49), (Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -48), 0), 100000000, 0, -47), 0, (("gramlib/grammar.mli", 49, 1285, 1289), ("gramlib/grammar.mli", 49, 1285, 1309), 0), 0, Tag1 ("Gramlib__Grammar", 15)), 0); (("consume", 1938), ((Tag1 (0, (Tag3 ((("t", 1934)), 0, (0)), 100000000, 0, -46), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -45), (Tag3 ((("with_kwstate", 1921)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -44)], (0)), 100000000, 0, -43), 0), 100000000, 0, -42), 0), 100000000, 0, -41), 0, (("gramlib/grammar.mli", 50, 1310, 1314), ("gramlib/grammar.mli", 50, 1310, 1357), 0), 0, Tag1 ("Gramlib__Grammar", 16)), 0)]), 0, (("gramlib/grammar.mli", 45, 1143, 1145), ("gramlib/grammar.mli", 51, 1358, 1363), 0), Tag1 ("Gramlib__Grammar", 17)), 0, 0); Tag3 (("Entry", 1925), 0, (Tag1 ([Tag1 (("t", 1939), ([((("a")), 100000000, 0, -125)], 1, 0, 1, 0, [7], [2], 0, 0, (("gramlib/grammar.mli", 54, 1386, 1390), ("gramlib/grammar.mli", 54, 1386, 1399), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 18)), 1, 0); (("make", 1940), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -124), (Tag3 ((("mod_estate", 1923)), [(Tag3 ((("t", 1939)), [((("a")), 100000000, 0, -123)], (0)), 100000000, 0, -122)], (0)), 100000000, 0, -121), 0), 100000000, 0, -120), 0, (("gramlib/grammar.mli", 55, 1400, 1404), ("gramlib/grammar.mli", 55, 1400, 1440), 0), 0, Tag1 ("Gramlib__Grammar", 19)), 0); (("parse", 1941), ((Tag1 (0, (Tag3 ((("t", 1939)), [((("a")), 100000000, 0, -117)], (0)), 100000000, 0, -119), (Tag1 (0, (Tag3 (Tag1 ((("Parsable", 1924)), "t"), 0, (0)), 100000000, 0, -118), (Tag3 ((("with_gstate", 1920)), [((("a")), 100000000, 0, -117)], (0)), 100000000, 0, -116), 0), 100000000, 0, -115), 0), 100000000, 0, -114), 0, (("gramlib/grammar.mli", 56, 1441, 1445), ("gramlib/grammar.mli", 56, 1441, 1493), 0), 0, Tag1 ("Gramlib__Grammar", 20)), 0); (("name", 1942), ((Tag1 (0, (Tag3 ((("t", 1939)), [((("a")), 100000000, 0, -113)], (0)), 100000000, 0, -112), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -111), 0), 100000000, 0, -110), 0, (("gramlib/grammar.mli", 57, 1494, 1498), ("gramlib/grammar.mli", 57, 1494, 1523), 0), 0, Tag1 ("Gramlib__Grammar", 21)), 0); Tag1 (("parser_fun", 1943), ([((("a")), 100000000, 0, -105)], 1, [[(("parser_fun", 343), 0, (Tag1 (0, (Tag3 ((("keyword_state", 1916)), 0, (0)), 100000000, 0, -109), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Gramlib")), "LStream"), "t"), [(Tag3 ((("keyword_state", 1916)), 0, (0)), 100000000, 0, -107); (Tag3 ((("te", 1917)), 0, (0)), 100000000, 0, -108)], (0)), 100000000, 0, -106), ((("a")), 100000000, 0, -105), 0), 100000000, 0, -104), 0), 100000000, 0, -103), (("gramlib/grammar.mli", 58, 1524, 1551), ("gramlib/grammar.mli", 58, 1524, 1615), 0), 0, Tag1 ("Gramlib__Grammar", 23))]], 1, 0, [25], [0], 0, 0, (("gramlib/grammar.mli", 58, 1524, 1528), ("gramlib/grammar.mli", 58, 1524, 1617), 0), 0, 0, 1, Tag1 ("Gramlib__Grammar", 22)), 1, 0); (("of_parser", 1944), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -102), (Tag1 (0, (Tag3 ((("parser_fun", 1943)), [((("a")), 100000000, 0, -100)], (0)), 100000000, 0, -101), (Tag3 ((("mod_estate", 1923)), [(Tag3 ((("t", 1939)), [((("a")), 100000000, 0, -100)], (0)), 100000000, 0, -99)], (0)), 100000000, 0, -98), 0), 100000000, 0, -97), 0), 100000000, 0, -96), 0, (("gramlib/grammar.mli", 59, 1618, 1622), ("gramlib/grammar.mli", 59, 1618, 1680), 0), 0, Tag1 ("Gramlib__Grammar", 24)), 0); (("parse_token_stream", 1945), ((Tag1 (0, (Tag3 ((("t", 1939)), [((("a")), 100000000, 0, -91)], (0)), 100000000, 0, -95), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Gramlib")), "LStream"), "t"), [(Tag3 ((("keyword_state", 1916)), 0, (0)), 100000000, 0, -93); (Tag3 ((("te", 1917)), 0, (0)), 100000000, 0, -94)], (0)), 100000000, 0, -92), (Tag3 ((("with_gstate", 1920)), [((("a")), 100000000, 0, -91)], (0)), 100000000, 0, -90), 0), 100000000, 0, -89), 0), 100000000, 0, -88), 0, (("gramlib/grammar.mli", 60, 1681, 1685), ("gramlib/grammar.mli", 60, 1681, 1764), 0), 0, Tag1 ("Gramlib__Grammar", 25)), 0); (("print", 1946), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -87), (Tag1 (0, (Tag3 ((("t", 1939)), [((("a")), 100000000, 0, -86)], (0)), 100000000, 0, -85), (Tag3 ((("with_estate", 1922)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -84)], (0)), 100000000, 0, -83), 0), 100000000, 0, -82), 0), 100000000, 0, -81), 0, (("gramlib/grammar.mli", 61, 1765, 1769), ("gramlib/grammar.mli", 61, 1765, 1825), 0), 0, Tag1 ("Gramlib__Grammar", 26)), 0); (("is_empty", 1947), ((Tag1 (0, (Tag3 ((("t", 1939)), [((("a")), 100000000, 0, -80)], (0)), 100000000, 0, -79), (Tag3 ((("with_estate", 1922)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -78)], (0)), 100000000, 0, -77), 0), 100000000, 0, -76), 0, (("gramlib/grammar.mli", 62, 1826, 1830), ("gramlib/grammar.mli", 62, 1826, 1869), 0), 0, Tag1 ("Gramlib__Grammar", 27)), 0); Tag1 (("any_t", 1948), (0, 0, Tag1 ([(("Any", 518), ([(Tag3 ((("t", 1939)), [((("a")), 100000000, 0, -75)], (0)), 100000000, 0, -74)]), ((Tag3 ((("any_t", 1948)), 0, (0)), 100000000, 0, -73)), (("gramlib/grammar.mli", 64, 1871, 1888), ("gramlib/grammar.mli", 64, 1871, 1907), 0), 0, Tag1 ("Gramlib__Grammar", 29))], 0), 1, 0, 0, 0, 0, 0, (("gramlib/grammar.mli", 64, 1871, 1875), ("gramlib/grammar.mli", 64, 1871, 1907), 0), 0, 0, 1, Tag1 ("Gramlib__Grammar", 28)), 1, 0); (("accumulate_in", 1949), ((Tag1 (0, (Tag3 ((("t", 1939)), [((("a")), 100000000, 0, -72)], (0)), 100000000, 0, -71), (Tag3 ((("with_estate", 1922)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("CString")), "Map"), "t"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("any_t", 1948)), 0, (0)), 100000000, 0, -70)], (0)), 100000000, 0, -69)], (0)), 100000000, 0, -68)], (0)), 100000000, 0, -67), 0), 100000000, 0, -66), 0, (("gramlib/grammar.mli", 65, 1908, 1912), ("gramlib/grammar.mli", 65, 1908, 1976), 0), 0, Tag1 ("Gramlib__Grammar", 30)), 0)]), 0, (("gramlib/grammar.mli", 53, 1365, 1367), ("gramlib/grammar.mli", 66, 1977, 1982), 0), Tag1 ("Gramlib__Grammar", 31)), 0, 0); Tag3 (("Symbol", 1926), 0, (Tag1 ([Tag1 (("t", 1950), ([((("self")), 100000000, 0, -213); ((("trec")), 100000000, 0, -214); ((("a")), 100000000, 0, -215)], 3, 0, 1, 0, [7; 7; 7], [2; 2; 2], 0, 0, (("gramlib/grammar.mli", 70, 2011, 2015), ("gramlib/grammar.mli", 70, 2011, 2040), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 54)), 1, 0); (("nterm", 1951), ((Tag1 (0, (Tag3 (Tag1 ((("Entry", 1925)), "t"), [((("a")), 100000000, 0, -211)], (0)), 100000000, 0, -212), (Tag3 ((("t", 1950)), [((("self")), 100000000, 0, -209); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -210); ((("a")), 100000000, 0, -211)], (0)), 100000000, 0, -208), 0), 100000000, 0, -207), 0, (("gramlib/grammar.mli", 71, 2041, 2045), ("gramlib/grammar.mli", 71, 2041, 2091), 0), 0, Tag1 ("Gramlib__Grammar", 55)), 0); (("nterml", 1952), ((Tag1 (0, (Tag3 (Tag1 ((("Entry", 1925)), "t"), [((("a")), 100000000, 0, -204)], (0)), 100000000, 0, -206), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -205), (Tag3 ((("t", 1950)), [((("self")), 100000000, 0, -202); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -203); ((("a")), 100000000, 0, -204)], (0)), 100000000, 0, -201), 0), 100000000, 0, -200), 0), 100000000, 0, -199), 0, (("gramlib/grammar.mli", 72, 2092, 2096), ("gramlib/grammar.mli", 72, 2092, 2153), 0), 0, Tag1 ("Gramlib__Grammar", 56)), 0); (("list0", 1953), ((Tag1 (0, (Tag3 ((("t", 1950)), [((("self")), 100000000, 0, -194); ((("trec")), 100000000, 0, -195); ((("a")), 100000000, 0, -197)], (0)), 100000000, 0, -198), (Tag3 ((("t", 1950)), [((("self")), 100000000, 0, -194); ((("trec")), 100000000, 0, -195); (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -197)], (0)), 100000000, 0, -196)], (0)), 100000000, 0, -193), 0), 100000000, 0, -192), 0, (("gramlib/grammar.mli", 73, 2154, 2158), ("gramlib/grammar.mli", 73, 2154, 2219), 0), 0, Tag1 ("Gramlib__Grammar", 57)), 0); (("list0sep", 1954), ((Tag1 (0, (Tag3 ((("t", 1950)), [((("self")), 100000000, 0, -183); ((("trec")), 100000000, 0, -184); ((("a")), 100000000, 0, -186)], (0)), 100000000, 0, -191), (Tag1 (0, (Tag3 ((("t", 1950)), [((("self")), 100000000, 0, -183); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -189); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -190)], (0)), 100000000, 0, -188), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -187), (Tag3 ((("t", 1950)), [((("self")), 100000000, 0, -183); ((("trec")), 100000000, 0, -184); (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -186)], (0)), 100000000, 0, -185)], (0)), 100000000, 0, -182), 0), 100000000, 0, -181), 0), 100000000, 0, -180), 0), 100000000, 0, -179), 0, (("gramlib/grammar.mli", 74, 2220, 2224), ("gramlib/grammar.mli", 76, 2303, 2334), 0), 0, Tag1 ("Gramlib__Grammar", 58)), 0); (("list1", 1955), ((Tag1 (0, (Tag3 ((("t", 1950)), [((("self")), 100000000, 0, -174); ((("trec")), 100000000, 0, -175); ((("a")), 100000000, 0, -177)], (0)), 100000000, 0, -178), (Tag3 ((("t", 1950)), [((("self")), 100000000, 0, -174); ((("trec")), 100000000, 0, -175); (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -177)], (0)), 100000000, 0, -176)], (0)), 100000000, 0, -173), 0), 100000000, 0, -172), 0, (("gramlib/grammar.mli", 77, 2335, 2339), ("gramlib/grammar.mli", 77, 2335, 2400), 0), 0, Tag1 ("Gramlib__Grammar", 59)), 0); (("list1sep", 1956), ((Tag1 (0, (Tag3 ((("t", 1950)), [((("self")), 100000000, 0, -163); ((("trec")), 100000000, 0, -164); ((("a")), 100000000, 0, -166)], (0)), 100000000, 0, -171), (Tag1 (0, (Tag3 ((("t", 1950)), [((("self")), 100000000, 0, -163); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -169); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -170)], (0)), 100000000, 0, -168), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -167), (Tag3 ((("t", 1950)), [((("self")), 100000000, 0, -163); ((("trec")), 100000000, 0, -164); (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -166)], (0)), 100000000, 0, -165)], (0)), 100000000, 0, -162), 0), 100000000, 0, -161), 0), 100000000, 0, -160), 0), 100000000, 0, -159), 0, (("gramlib/grammar.mli", 78, 2401, 2405), ("gramlib/grammar.mli", 80, 2484, 2515), 0), 0, Tag1 ("Gramlib__Grammar", 60)), 0); (("opt", 1957), ((Tag1 (0, (Tag3 ((("t", 1950)), [((("self")), 100000000, 0, -154); ((("trec")), 100000000, 0, -155); ((("a")), 100000000, 0, -157)], (0)), 100000000, 0, -158), (Tag3 ((("t", 1950)), [((("self")), 100000000, 0, -154); ((("trec")), 100000000, 0, -155); (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -157)], (0)), 100000000, 0, -156)], (0)), 100000000, 0, -153), 0), 100000000, 0, -152), 0, (("gramlib/grammar.mli", 81, 2516, 2520), ("gramlib/grammar.mli", 81, 2516, 2581), 0), 0, Tag1 ("Gramlib__Grammar", 61)), 0); (("self", 1958), ((Tag3 ((("t", 1950)), [((("self")), 100000000, 0, -150); (Tag3 ((("mayrec", 1911)), 0, (0)), 100000000, 0, -151); ((("self")), 100000000, 0, -150)], (0)), 100000000, 0, -149), 0, (("gramlib/grammar.mli", 82, 2582, 2586), ("gramlib/grammar.mli", 82, 2582, 2621), 0), 0, Tag1 ("Gramlib__Grammar", 62)), 0); (("next", 1959), ((Tag3 ((("t", 1950)), [((("self")), 100000000, 0, -147); (Tag3 ((("mayrec", 1911)), 0, (0)), 100000000, 0, -148); ((("self")), 100000000, 0, -147)], (0)), 100000000, 0, -146), 0, (("gramlib/grammar.mli", 83, 2622, 2626), ("gramlib/grammar.mli", 83, 2622, 2661), 0), 0, Tag1 ("Gramlib__Grammar", 63)), 0); (("token", 1960), ((Tag1 (0, (Tag3 ((("pattern", 1918)), [((("c")), 100000000, 0, -144)], (0)), 100000000, 0, -145), (Tag3 ((("t", 1950)), [((("self")), 100000000, 0, -142); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -143); ((("c")), 100000000, 0, -144)], (0)), 100000000, 0, -141), 0), 100000000, 0, -140), 0, (("gramlib/grammar.mli", 84, 2662, 2666), ("gramlib/grammar.mli", 84, 2662, 2712), 0), 0, Tag1 ("Gramlib__Grammar", 64)), 0); (("tokens", 1961), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("ty_pattern", 1919)), 0, (0)), 100000000, 0, -139)], (0)), 100000000, 0, -138), (Tag3 ((("t", 1950)), [((("self")), 100000000, 0, -135); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -136); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -137)], (0)), 100000000, 0, -134), 0), 100000000, 0, -133), 0, (("gramlib/grammar.mli", 85, 2713, 2717), ("gramlib/grammar.mli", 85, 2713, 2771), 0), 0, Tag1 ("Gramlib__Grammar", 65)), 0); (("rules", 1962), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Rules", 1928)), "t"), [((("a")), 100000000, 0, -130)], (0)), 100000000, 0, -132)], (0)), 100000000, 0, -131), (Tag3 ((("t", 1950)), [((("self")), 100000000, 0, -128); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -129); ((("a")), 100000000, 0, -130)], (0)), 100000000, 0, -127), 0), 100000000, 0, -126), 0, (("gramlib/grammar.mli", 86, 2772, 2776), ("gramlib/grammar.mli", 86, 2772, 2827), 0), 0, Tag1 ("Gramlib__Grammar", 66)), 0)]), 0, (("gramlib/grammar.mli", 68, 1984, 1986), ("gramlib/grammar.mli", 88, 2829, 2834), 0), Tag1 ("Gramlib__Grammar", 32)), 1, 0); Tag3 (("Rule", 1927), 0, (Tag1 ([Tag1 (("t", 1963), ([((("self")), 100000000, 0, -246); ((("trec")), 100000000, 0, -247); ((("f")), 100000000, 0, -248); ((("r")), 100000000, 0, -249)], 4, 0, 1, 0, [7; 7; 7; 7], [2; 2; 2; 2], 0, 0, (("gramlib/grammar.mli", 90, 2851, 2855), ("gramlib/grammar.mli", 90, 2851, 2884), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 67)), 1, 0); (("stop", 1964), ((Tag3 ((("t", 1963)), [((("self")), 100000000, 0, -243); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -244); ((("r")), 100000000, 0, -245); ((("r")), 100000000, 0, -245)], (0)), 100000000, 0, -242), 0, (("gramlib/grammar.mli", 92, 2886, 2890), ("gramlib/grammar.mli", 92, 2886, 2925), 0), 0, Tag1 ("Gramlib__Grammar", 68)), 0); (("next", 1965), ((Tag1 (0, (Tag3 ((("t", 1963)), [((("self")), 100000000, 0, -232); ((0), 100000000, 0, -241); ((("a")), 100000000, 0, -235); ((("r")), 100000000, 0, -237)], (0)), 100000000, 0, -240), (Tag1 (0, (Tag3 (Tag1 ((("Symbol", 1926)), "t"), [((("self")), 100000000, 0, -232); ((0), 100000000, 0, -239); ((("b")), 100000000, 0, -236)], (0)), 100000000, 0, -238), (Tag3 ((("t", 1963)), [((("self")), 100000000, 0, -232); (Tag3 ((("mayrec", 1911)), 0, (0)), 100000000, 0, -233); (Tag1 (0, ((("b")), 100000000, 0, -236), ((("a")), 100000000, 0, -235), 0), 100000000, 0, -234); ((("r")), 100000000, 0, -237)], (0)), 100000000, 0, -231), 0), 100000000, 0, -230), 0), 100000000, 0, -229), 0, (("gramlib/grammar.mli", 93, 2926, 2930), ("gramlib/grammar.mli", 95, 2998, 3035), 0), 0, Tag1 ("Gramlib__Grammar", 69)), 0); (("next_norec", 1966), ((Tag1 (0, (Tag3 (Tag1 ((("Rule", 1927)), "t"), [((("self")), 100000000, 0, -219); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -228); ((("a")), 100000000, 0, -222); ((("r")), 100000000, 0, -224)], (0)), 100000000, 0, -227), (Tag1 (0, (Tag3 (Tag1 ((("Symbol", 1926)), "t"), [((("self")), 100000000, 0, -219); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -226); ((("b")), 100000000, 0, -223)], (0)), 100000000, 0, -225), (Tag3 ((("t", 1963)), [((("self")), 100000000, 0, -219); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -220); (Tag1 (0, ((("b")), 100000000, 0, -223), ((("a")), 100000000, 0, -222), 0), 100000000, 0, -221); ((("r")), 100000000, 0, -224)], (0)), 100000000, 0, -218), 0), 100000000, 0, -217), 0), 100000000, 0, -216), 0, (("gramlib/grammar.mli", 96, 3036, 3040), ("gramlib/grammar.mli", 98, 3127, 3163), 0), 0, Tag1 ("Gramlib__Grammar", 70)), 0)]), 0, (("gramlib/grammar.mli", 88, 2829, 2835), ("gramlib/grammar.mli", 100, 3165, 3170), 0), Tag1 ("Gramlib__Grammar", 33)), 2, 0); Tag3 (("Rules", 1928), 0, (Tag1 ([Tag1 (("t", 1967), ([((("a")), 100000000, 0, -260)], 1, 0, 1, 0, [7], [2], 0, 0, (("gramlib/grammar.mli", 102, 3188, 3192), ("gramlib/grammar.mli", 102, 3188, 3201), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 71)), 1, 0); (("make", 1968), ((Tag1 (0, (Tag3 (Tag1 ((("Rule", 1927)), "t"), [((0), 100000000, 0, -256); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -257); ((("f")), 100000000, 0, -254); (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -259), ((("a")), 100000000, 0, -253), 0), 100000000, 0, -258)], (0)), 100000000, 0, -255), (Tag1 (0, ((("f")), 100000000, 0, -254), (Tag3 ((("t", 1967)), [((("a")), 100000000, 0, -253)], (0)), 100000000, 0, -252), 0), 100000000, 0, -251), 0), 100000000, 0, -250), 0, (("gramlib/grammar.mli", 103, 3202, 3206), ("gramlib/grammar.mli", 103, 3202, 3265), 0), 0, Tag1 ("Gramlib__Grammar", 72)), 0)]), 0, (("gramlib/grammar.mli", 100, 3165, 3171), ("gramlib/grammar.mli", 105, 3267, 3272), 0), Tag1 ("Gramlib__Grammar", 34)), 2, 0); Tag3 (("Production", 1929), 0, (Tag1 ([Tag1 (("t", 1969), ([((("a")), 100000000, 0, -270)], 1, 0, 1, 0, [7], [2], 0, 0, (("gramlib/grammar.mli", 108, 3300, 3304), ("gramlib/grammar.mli", 108, 3300, 3313), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 73)), 1, 0); (("make", 1970), ((Tag1 (0, (Tag3 (Tag1 ((("Rule", 1927)), "t"), [((("a")), 100000000, 0, -264); ((0), 100000000, 0, -267); ((("f")), 100000000, 0, -265); (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -269), ((("a")), 100000000, 0, -264), 0), 100000000, 0, -268)], (0)), 100000000, 0, -266), (Tag1 (0, ((("f")), 100000000, 0, -265), (Tag3 ((("t", 1969)), [((("a")), 100000000, 0, -264)], (0)), 100000000, 0, -263), 0), 100000000, 0, -262), 0), 100000000, 0, -261), 0, (("gramlib/grammar.mli", 109, 3314, 3318), ("gramlib/grammar.mli", 109, 3314, 3374), 0), 0, Tag1 ("Gramlib__Grammar", 74)), 0)]), 0, (("gramlib/grammar.mli", 107, 3274, 3276), ("gramlib/grammar.mli", 110, 3375, 3380), 0), Tag1 ("Gramlib__Grammar", 75)), 0, 0); Tag1 (("single_extend_statement", 1930), ([((("a")), 100000000, 0, -32)], 1, 0, 1, ((Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -27)], (0)), 100000000, 0, -26); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Gramlib")), "Gramext"), "g_assoc"), 0, (0)), 100000000, 0, -29)], (0)), 100000000, 0, -28); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Production", 1929)), "t"), [((("a")), 100000000, 0, -32)], (0)), 100000000, 0, -31)], (0)), 100000000, 0, -30)]), 100000000, 0, -25)), [7], [0], 0, 0, (("gramlib/grammar.mli", 112, 3382, 3384), ("gramlib/grammar.mli", 113, 3418, 3483), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 76)), 1, 0); Tag1 (("extend_statement", 1931), ([((("a")), 100000000, 0, -21)], 1, Tag1 ([(("Reuse", 712), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -18)], (0)), 100000000, 0, -17); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Production", 1929)), "t"), [((("a")), 100000000, 0, -21)], (0)), 100000000, 0, -20)], (0)), 100000000, 0, -19)]), 0, (("gramlib/grammar.mli", 116, 3514, 3516), ("gramlib/grammar.mli", 116, 3514, 3563), 0), 0, Tag1 ("Gramlib__Grammar", 78)); (("Fresh", 713), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Gramlib")), "Gramext"), "position"), 0, (0)), 100000000, 0, -22); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("single_extend_statement", 1930)), [((("a")), 100000000, 0, -21)], (0)), 100000000, 0, -24)], (0)), 100000000, 0, -23)]), 0, (("gramlib/grammar.mli", 118, 3662, 3664), ("gramlib/grammar.mli", 118, 3662, 3725), 0), 0, Tag1 ("Gramlib__Grammar", 79))], 0), 1, 0, [15], [0], 0, 0, (("gramlib/grammar.mli", 115, 3485, 3487), ("gramlib/grammar.mli", 118, 3662, 3725), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 77)), 1, 0); (("generalize_symbol", 1932), ((Tag1 (0, (Tag3 (Tag1 ((("Symbol", 1926)), "t"), [((("a")), 100000000, 0, -12); ((("tr")), 100000000, 0, -16); ((("c")), 100000000, 0, -14)], (0)), 100000000, 0, -15), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Symbol", 1926)), "t"), [((("a")), 100000000, 0, -12); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -13); ((("c")), 100000000, 0, -14)], (0)), 100000000, 0, -11)], (0)), 100000000, 0, -10), 0), 100000000, 0, -9), 0, (("gramlib/grammar.mli", 121, 3776, 3778), ("gramlib/grammar.mli", 121, 3776, 3859), 0), 0, Tag1 ("Gramlib__Grammar", 80)), 0); (("level_of_nonterm", 1933), ((Tag1 (0, (Tag3 (Tag1 ((("Symbol", 1926)), "t"), [((("a")), 100000000, 0, -6); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -7); ((("c")), 100000000, 0, -8)], (0)), 100000000, 0, -5), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4)], (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("gramlib/grammar.mli", 124, 3907, 3909), ("gramlib/grammar.mli", 124, 3907, 3973), 0), 0, Tag1 ("Gramlib__Grammar", 81)), 0)])), 0, (("gramlib/grammar.mli", 24, 680, 680), ("gramlib/grammar.mli", 126, 3975, 3978), 0), Tag1 ("Gramlib__Grammar", 82)), 0); Tag4 (("ExtS", 1913), ((Tag1 ([Tag1 (("keyword_state", 1971), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("gramlib/grammar.mli", 131, 4040, 4042), ("gramlib/grammar.mli", 131, 4040, 4060), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 83)), 1, 0); Tag3 (("EState", 1972), 0, (Tag1 ([Tag1 (("t", 1991), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("gramlib/grammar.mli", 134, 4084, 4088), ("gramlib/grammar.mli", 134, 4084, 4094), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 84)), 1, 0); (("empty", 1992), ((Tag3 ((("t", 1991)), 0, (0)), 100000000, 0, -333), 0, (("gramlib/grammar.mli", 135, 4095, 4099), ("gramlib/grammar.mli", 135, 4095, 4112), 0), 0, Tag1 ("Gramlib__Grammar", 85)), 0)]), 0, (("gramlib/grammar.mli", 133, 4062, 4064), ("gramlib/grammar.mli", 136, 4113, 4118), 0), Tag1 ("Gramlib__Grammar", 86)), 0, 0); Tag3 (("GState", 1973), 0, (Tag1 ([Tag1 (("t", 1993), (0, 0, [[(("estate", 722), 0, (Tag3 (Tag1 ((("EState", 1972)), "t"), 0, (0)), 100000000, 0, -334), (("gramlib/grammar.mli", 139, 4156, 4162), ("gramlib/grammar.mli", 139, 4156, 4180), 0), 0, Tag1 ("Gramlib__Grammar", 88)); (("kwstate", 723), 0, (Tag3 ((("keyword_state", 1971)), 0, (0)), 100000000, 0, -335), (("gramlib/grammar.mli", 140, 4181, 4187), ("gramlib/grammar.mli", 140, 4181, 4211), 0), 0, Tag1 ("Gramlib__Grammar", 89))]], 1, 0, 0, 0, 0, 0, (("gramlib/grammar.mli", 138, 4141, 4145), ("gramlib/grammar.mli", 141, 4212, 4217), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 87)), 1, 0)]), 0, (("gramlib/grammar.mli", 137, 4119, 4121), ("gramlib/grammar.mli", 142, 4218, 4223), 0), Tag1 ("Gramlib__Grammar", 90)), 0, 0); Tag1 (("te", 1974), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 3)), 1, 0); Tag1 (("pattern", 1975), ([((("c")), 100000000, 0, -332)], 1, 0, 1, 0, [7], [2], 0, 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 4)), 1, 0); Tag1 (("ty_pattern", 1976), (0, 0, Tag1 ([(("TPattern", 280), ([(Tag3 ((("pattern", 1975)), [((("a")), 100000000, 0, -331)], (0)), 100000000, 0, -330)]), ((Tag3 ((("ty_pattern", 1976)), 0, (0)), 100000000, 0, -329)), (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, Tag1 ("Gramlib__Grammar", 6))], 0), 1, 0, 0, 0, 0, 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, 0, 1, Tag1 ("Gramlib__Grammar", 5)), 1, 0); Tag3 (("Parsable", 1977), 0, (Tag1 ([Tag1 (("t", 1994), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 11)), 1, 0); (("make", 1995), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -361)], (0)), 100000000, 0, -360), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Gramlib")), "Stream"), "t"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -358); (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -359)], (0)), 100000000, 0, -357), (Tag3 ((("t", 1994)), 0, (0)), 100000000, 0, -356), 0), 100000000, 0, -355), 0), 100000000, 0, -354), 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, Tag1 ("Gramlib__Grammar", 13)), 0); (("comments", 1996), ((Tag1 (0, (Tag3 ((("t", 1994)), 0, (0)), 100000000, 0, -353), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -350); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -351)]), 100000000, 0, -349); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -352)]), 100000000, 0, -348)], (0)), 100000000, 0, -347), 0), 100000000, 0, -346), 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, Tag1 ("Gramlib__Grammar", 14)), 0); (("loc", 1997), ((Tag1 (0, (Tag3 ((("t", 1994)), 0, (0)), 100000000, 0, -345), (Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -344), 0), 100000000, 0, -343), 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, Tag1 ("Gramlib__Grammar", 15)), 0); (("consume", 1998), ((Tag1 (0, (Tag3 ((("t", 1994)), 0, (0)), 100000000, 0, -342), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -341), (Tag1 (0, (Tag3 ((("keyword_state", 1971)), 0, (0)), 100000000, 0, -340), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -339), 0), 100000000, 0, -338), 0), 100000000, 0, -337), 0), 100000000, 0, -336), 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, Tag1 ("Gramlib__Grammar", 16)), 0)]), 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), Tag1 ("Gramlib__Grammar", 17)), 0, 0); Tag3 (("Entry", 1978), 0, (Tag1 ([Tag1 (("t", 1999), ([((("a")), 100000000, 0, -432)], 1, 0, 1, 0, [7], [2], 0, 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 18)), 1, 0); (("make", 2000), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -431), (Tag1 (0, (Tag3 (Tag1 ((("EState", 1972)), "t"), 0, (0)), 100000000, 0, -430), (Tag2 ([(Tag3 (Tag1 ((("EState", 1972)), "t"), 0, (0)), 100000000, 0, -427); (Tag3 ((("t", 1999)), [((("a")), 100000000, 0, -429)], (0)), 100000000, 0, -428)]), 100000000, 0, -426), 0), 100000000, 0, -425), 0), 100000000, 0, -424), 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, Tag1 ("Gramlib__Grammar", 19)), 0); (("parse", 2001), ((Tag1 (0, (Tag3 ((("t", 1999)), [((("a")), 100000000, 0, -420)], (0)), 100000000, 0, -423), (Tag1 (0, (Tag3 (Tag1 ((("Parsable", 1977)), "t"), 0, (0)), 100000000, 0, -422), (Tag1 (0, (Tag3 (Tag1 ((("GState", 1973)), "t"), 0, (0)), 100000000, 0, -421), ((("a")), 100000000, 0, -420), 0), 100000000, 0, -419), 0), 100000000, 0, -418), 0), 100000000, 0, -417), 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, Tag1 ("Gramlib__Grammar", 20)), 0); (("name", 2002), ((Tag1 (0, (Tag3 ((("t", 1999)), [((("a")), 100000000, 0, -416)], (0)), 100000000, 0, -415), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -414), 0), 100000000, 0, -413), 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, Tag1 ("Gramlib__Grammar", 21)), 0); Tag1 (("parser_fun", 2003), ([((("a")), 100000000, 0, -408)], 1, [[(("parser_fun", 343), 0, (Tag1 (0, (Tag3 ((("keyword_state", 1971)), 0, (0)), 100000000, 0, -412), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Gramlib")), "LStream"), "t"), [(Tag3 ((("keyword_state", 1971)), 0, (0)), 100000000, 0, -410); (Tag3 ((("te", 1974)), 0, (0)), 100000000, 0, -411)], (0)), 100000000, 0, -409), ((("a")), 100000000, 0, -408), 0), 100000000, 0, -407), 0), 100000000, 0, -406), (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, Tag1 ("Gramlib__Grammar", 23))]], 1, 0, [25], [0], 0, 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, 0, 1, Tag1 ("Gramlib__Grammar", 22)), 1, 0); (("of_parser", 2004), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -405), (Tag1 (0, (Tag3 ((("parser_fun", 2003)), [((("a")), 100000000, 0, -402)], (0)), 100000000, 0, -404), (Tag1 (0, (Tag3 (Tag1 ((("EState", 1972)), "t"), 0, (0)), 100000000, 0, -403), (Tag2 ([(Tag3 (Tag1 ((("EState", 1972)), "t"), 0, (0)), 100000000, 0, -400); (Tag3 ((("t", 1999)), [((("a")), 100000000, 0, -402)], (0)), 100000000, 0, -401)]), 100000000, 0, -399), 0), 100000000, 0, -398), 0), 100000000, 0, -397), 0), 100000000, 0, -396), 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, Tag1 ("Gramlib__Grammar", 24)), 0); (("parse_token_stream", 2005), ((Tag1 (0, (Tag3 ((("t", 1999)), [((("a")), 100000000, 0, -390)], (0)), 100000000, 0, -395), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Gramlib")), "LStream"), "t"), [(Tag3 ((("keyword_state", 1971)), 0, (0)), 100000000, 0, -393); (Tag3 ((("te", 1974)), 0, (0)), 100000000, 0, -394)], (0)), 100000000, 0, -392), (Tag1 (0, (Tag3 (Tag1 ((("GState", 1973)), "t"), 0, (0)), 100000000, 0, -391), ((("a")), 100000000, 0, -390), 0), 100000000, 0, -389), 0), 100000000, 0, -388), 0), 100000000, 0, -387), 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, Tag1 ("Gramlib__Grammar", 25)), 0); (("print", 2006), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -386), (Tag1 (0, (Tag3 ((("t", 1999)), [((("a")), 100000000, 0, -385)], (0)), 100000000, 0, -384), (Tag1 (0, (Tag3 (Tag1 ((("EState", 1972)), "t"), 0, (0)), 100000000, 0, -383), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -382), 0), 100000000, 0, -381), 0), 100000000, 0, -380), 0), 100000000, 0, -379), 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, Tag1 ("Gramlib__Grammar", 26)), 0); (("is_empty", 2007), ((Tag1 (0, (Tag3 ((("t", 1999)), [((("a")), 100000000, 0, -378)], (0)), 100000000, 0, -377), (Tag1 (0, (Tag3 (Tag1 ((("EState", 1972)), "t"), 0, (0)), 100000000, 0, -376), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -375), 0), 100000000, 0, -374), 0), 100000000, 0, -373), 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, Tag1 ("Gramlib__Grammar", 27)), 0); Tag1 (("any_t", 2008), (0, 0, Tag1 ([(("Any", 518), ([(Tag3 ((("t", 1999)), [((("a")), 100000000, 0, -372)], (0)), 100000000, 0, -371)]), ((Tag3 ((("any_t", 2008)), 0, (0)), 100000000, 0, -370)), (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, Tag1 ("Gramlib__Grammar", 29))], 0), 1, 0, 0, 0, 0, 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, 0, 1, Tag1 ("Gramlib__Grammar", 28)), 1, 0); (("accumulate_in", 2009), ((Tag1 (0, (Tag3 ((("t", 1999)), [((("a")), 100000000, 0, -369)], (0)), 100000000, 0, -368), (Tag1 (0, (Tag3 (Tag1 ((("EState", 1972)), "t"), 0, (0)), 100000000, 0, -367), (Tag3 (Tag1 (Tag1 ((Tag2 ("CString")), "Map"), "t"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("any_t", 2008)), 0, (0)), 100000000, 0, -366)], (0)), 100000000, 0, -365)], (0)), 100000000, 0, -364), 0), 100000000, 0, -363), 0), 100000000, 0, -362), 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, Tag1 ("Gramlib__Grammar", 30)), 0)]), 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), Tag1 ("Gramlib__Grammar", 31)), 0, 0); Tag3 (("Symbol", 1979), 0, (Tag1 ([Tag1 (("t", 2010), ([((("self")), 100000000, 0, -520); ((("trec")), 100000000, 0, -521); ((("a")), 100000000, 0, -522)], 3, 0, 1, 0, [7; 7; 7], [2; 2; 2], 0, 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 54)), 1, 0); (("nterm", 2011), ((Tag1 (0, (Tag3 (Tag1 ((("Entry", 1978)), "t"), [((("a")), 100000000, 0, -518)], (0)), 100000000, 0, -519), (Tag3 ((("t", 2010)), [((("self")), 100000000, 0, -516); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -517); ((("a")), 100000000, 0, -518)], (0)), 100000000, 0, -515), 0), 100000000, 0, -514), 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, Tag1 ("Gramlib__Grammar", 55)), 0); (("nterml", 2012), ((Tag1 (0, (Tag3 (Tag1 ((("Entry", 1978)), "t"), [((("a")), 100000000, 0, -511)], (0)), 100000000, 0, -513), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -512), (Tag3 ((("t", 2010)), [((("self")), 100000000, 0, -509); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -510); ((("a")), 100000000, 0, -511)], (0)), 100000000, 0, -508), 0), 100000000, 0, -507), 0), 100000000, 0, -506), 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, Tag1 ("Gramlib__Grammar", 56)), 0); (("list0", 2013), ((Tag1 (0, (Tag3 ((("t", 2010)), [((("self")), 100000000, 0, -501); ((("trec")), 100000000, 0, -502); ((("a")), 100000000, 0, -504)], (0)), 100000000, 0, -505), (Tag3 ((("t", 2010)), [((("self")), 100000000, 0, -501); ((("trec")), 100000000, 0, -502); (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -504)], (0)), 100000000, 0, -503)], (0)), 100000000, 0, -500), 0), 100000000, 0, -499), 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, Tag1 ("Gramlib__Grammar", 57)), 0); (("list0sep", 2014), ((Tag1 (0, (Tag3 ((("t", 2010)), [((("self")), 100000000, 0, -490); ((("trec")), 100000000, 0, -491); ((("a")), 100000000, 0, -493)], (0)), 100000000, 0, -498), (Tag1 (0, (Tag3 ((("t", 2010)), [((("self")), 100000000, 0, -490); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -496); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -497)], (0)), 100000000, 0, -495), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -494), (Tag3 ((("t", 2010)), [((("self")), 100000000, 0, -490); ((("trec")), 100000000, 0, -491); (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -493)], (0)), 100000000, 0, -492)], (0)), 100000000, 0, -489), 0), 100000000, 0, -488), 0), 100000000, 0, -487), 0), 100000000, 0, -486), 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, Tag1 ("Gramlib__Grammar", 58)), 0); (("list1", 2015), ((Tag1 (0, (Tag3 ((("t", 2010)), [((("self")), 100000000, 0, -481); ((("trec")), 100000000, 0, -482); ((("a")), 100000000, 0, -484)], (0)), 100000000, 0, -485), (Tag3 ((("t", 2010)), [((("self")), 100000000, 0, -481); ((("trec")), 100000000, 0, -482); (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -484)], (0)), 100000000, 0, -483)], (0)), 100000000, 0, -480), 0), 100000000, 0, -479), 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, Tag1 ("Gramlib__Grammar", 59)), 0); (("list1sep", 2016), ((Tag1 (0, (Tag3 ((("t", 2010)), [((("self")), 100000000, 0, -470); ((("trec")), 100000000, 0, -471); ((("a")), 100000000, 0, -473)], (0)), 100000000, 0, -478), (Tag1 (0, (Tag3 ((("t", 2010)), [((("self")), 100000000, 0, -470); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -476); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -477)], (0)), 100000000, 0, -475), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -474), (Tag3 ((("t", 2010)), [((("self")), 100000000, 0, -470); ((("trec")), 100000000, 0, -471); (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -473)], (0)), 100000000, 0, -472)], (0)), 100000000, 0, -469), 0), 100000000, 0, -468), 0), 100000000, 0, -467), 0), 100000000, 0, -466), 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, Tag1 ("Gramlib__Grammar", 60)), 0); (("opt", 2017), ((Tag1 (0, (Tag3 ((("t", 2010)), [((("self")), 100000000, 0, -461); ((("trec")), 100000000, 0, -462); ((("a")), 100000000, 0, -464)], (0)), 100000000, 0, -465), (Tag3 ((("t", 2010)), [((("self")), 100000000, 0, -461); ((("trec")), 100000000, 0, -462); (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -464)], (0)), 100000000, 0, -463)], (0)), 100000000, 0, -460), 0), 100000000, 0, -459), 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, Tag1 ("Gramlib__Grammar", 61)), 0); (("self", 2018), ((Tag3 ((("t", 2010)), [((("self")), 100000000, 0, -457); (Tag3 ((("mayrec", 1911)), 0, (0)), 100000000, 0, -458); ((("self")), 100000000, 0, -457)], (0)), 100000000, 0, -456), 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, Tag1 ("Gramlib__Grammar", 62)), 0); (("next", 2019), ((Tag3 ((("t", 2010)), [((("self")), 100000000, 0, -454); (Tag3 ((("mayrec", 1911)), 0, (0)), 100000000, 0, -455); ((("self")), 100000000, 0, -454)], (0)), 100000000, 0, -453), 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, Tag1 ("Gramlib__Grammar", 63)), 0); (("token", 2020), ((Tag1 (0, (Tag3 ((("pattern", 1975)), [((("c")), 100000000, 0, -451)], (0)), 100000000, 0, -452), (Tag3 ((("t", 2010)), [((("self")), 100000000, 0, -449); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -450); ((("c")), 100000000, 0, -451)], (0)), 100000000, 0, -448), 0), 100000000, 0, -447), 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, Tag1 ("Gramlib__Grammar", 64)), 0); (("tokens", 2021), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("ty_pattern", 1976)), 0, (0)), 100000000, 0, -446)], (0)), 100000000, 0, -445), (Tag3 ((("t", 2010)), [((("self")), 100000000, 0, -442); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -443); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -444)], (0)), 100000000, 0, -441), 0), 100000000, 0, -440), 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, Tag1 ("Gramlib__Grammar", 65)), 0); (("rules", 2022), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Rules", 1981)), "t"), [((("a")), 100000000, 0, -437)], (0)), 100000000, 0, -439)], (0)), 100000000, 0, -438), (Tag3 ((("t", 2010)), [((("self")), 100000000, 0, -435); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -436); ((("a")), 100000000, 0, -437)], (0)), 100000000, 0, -434), 0), 100000000, 0, -433), 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, Tag1 ("Gramlib__Grammar", 66)), 0)]), 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), Tag1 ("Gramlib__Grammar", 32)), 1, 0); Tag3 (("Rule", 1980), 0, (Tag1 ([Tag1 (("t", 2023), ([((("self")), 100000000, 0, -553); ((("trec")), 100000000, 0, -554); ((("f")), 100000000, 0, -555); ((("r")), 100000000, 0, -556)], 4, 0, 1, 0, [7; 7; 7; 7], [2; 2; 2; 2], 0, 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 67)), 1, 0); (("stop", 2024), ((Tag3 ((("t", 2023)), [((("self")), 100000000, 0, -550); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -551); ((("r")), 100000000, 0, -552); ((("r")), 100000000, 0, -552)], (0)), 100000000, 0, -549), 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, Tag1 ("Gramlib__Grammar", 68)), 0); (("next", 2025), ((Tag1 (0, (Tag3 ((("t", 2023)), [((("self")), 100000000, 0, -539); ((0), 100000000, 0, -548); ((("a")), 100000000, 0, -542); ((("r")), 100000000, 0, -544)], (0)), 100000000, 0, -547), (Tag1 (0, (Tag3 (Tag1 ((("Symbol", 1979)), "t"), [((("self")), 100000000, 0, -539); ((0), 100000000, 0, -546); ((("b")), 100000000, 0, -543)], (0)), 100000000, 0, -545), (Tag3 ((("t", 2023)), [((("self")), 100000000, 0, -539); (Tag3 ((("mayrec", 1911)), 0, (0)), 100000000, 0, -540); (Tag1 (0, ((("b")), 100000000, 0, -543), ((("a")), 100000000, 0, -542), 0), 100000000, 0, -541); ((("r")), 100000000, 0, -544)], (0)), 100000000, 0, -538), 0), 100000000, 0, -537), 0), 100000000, 0, -536), 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, Tag1 ("Gramlib__Grammar", 69)), 0); (("next_norec", 2026), ((Tag1 (0, (Tag3 (Tag1 ((("Rule", 1980)), "t"), [((("self")), 100000000, 0, -526); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -535); ((("a")), 100000000, 0, -529); ((("r")), 100000000, 0, -531)], (0)), 100000000, 0, -534), (Tag1 (0, (Tag3 (Tag1 ((("Symbol", 1979)), "t"), [((("self")), 100000000, 0, -526); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -533); ((("b")), 100000000, 0, -530)], (0)), 100000000, 0, -532), (Tag3 ((("t", 2023)), [((("self")), 100000000, 0, -526); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -527); (Tag1 (0, ((("b")), 100000000, 0, -530), ((("a")), 100000000, 0, -529), 0), 100000000, 0, -528); ((("r")), 100000000, 0, -531)], (0)), 100000000, 0, -525), 0), 100000000, 0, -524), 0), 100000000, 0, -523), 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, Tag1 ("Gramlib__Grammar", 70)), 0)]), 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), Tag1 ("Gramlib__Grammar", 33)), 2, 0); Tag3 (("Rules", 1981), 0, (Tag1 ([Tag1 (("t", 2027), ([((("a")), 100000000, 0, -567)], 1, 0, 1, 0, [7], [2], 0, 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 71)), 1, 0); (("make", 2028), ((Tag1 (0, (Tag3 (Tag1 ((("Rule", 1980)), "t"), [((0), 100000000, 0, -563); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -564); ((("f")), 100000000, 0, -561); (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -566), ((("a")), 100000000, 0, -560), 0), 100000000, 0, -565)], (0)), 100000000, 0, -562), (Tag1 (0, ((("f")), 100000000, 0, -561), (Tag3 ((("t", 2027)), [((("a")), 100000000, 0, -560)], (0)), 100000000, 0, -559), 0), 100000000, 0, -558), 0), 100000000, 0, -557), 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, Tag1 ("Gramlib__Grammar", 72)), 0)]), 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), Tag1 ("Gramlib__Grammar", 34)), 2, 0); Tag3 (("Production", 1982), 0, (Tag1 ([Tag1 (("t", 2029), ([((("a")), 100000000, 0, -577)], 1, 0, 1, 0, [7], [2], 0, 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 73)), 1, 0); (("make", 2030), ((Tag1 (0, (Tag3 (Tag1 ((("Rule", 1980)), "t"), [((("a")), 100000000, 0, -571); ((0), 100000000, 0, -574); ((("f")), 100000000, 0, -572); (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -576), ((("a")), 100000000, 0, -571), 0), 100000000, 0, -575)], (0)), 100000000, 0, -573), (Tag1 (0, ((("f")), 100000000, 0, -572), (Tag3 ((("t", 2029)), [((("a")), 100000000, 0, -571)], (0)), 100000000, 0, -570), 0), 100000000, 0, -569), 0), 100000000, 0, -568), 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, Tag1 ("Gramlib__Grammar", 74)), 0)]), 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), Tag1 ("Gramlib__Grammar", 75)), 0, 0); Tag1 (("single_extend_statement", 1983), ([((("a")), 100000000, 0, -328)], 1, 0, 1, ((Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -323)], (0)), 100000000, 0, -322); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Gramlib")), "Gramext"), "g_assoc"), 0, (0)), 100000000, 0, -325)], (0)), 100000000, 0, -324); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Production", 1982)), "t"), [((("a")), 100000000, 0, -328)], (0)), 100000000, 0, -327)], (0)), 100000000, 0, -326)]), 100000000, 0, -321)), [7], [0], 0, 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 76)), 1, 0); Tag1 (("extend_statement", 1984), ([((("a")), 100000000, 0, -317)], 1, Tag1 ([(("Reuse", 712), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -314)], (0)), 100000000, 0, -313); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Production", 1982)), "t"), [((("a")), 100000000, 0, -317)], (0)), 100000000, 0, -316)], (0)), 100000000, 0, -315)]), 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, Tag1 ("Gramlib__Grammar", 78)); (("Fresh", 713), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Gramlib")), "Gramext"), "position"), 0, (0)), 100000000, 0, -318); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("single_extend_statement", 1983)), [((("a")), 100000000, 0, -317)], (0)), 100000000, 0, -320)], (0)), 100000000, 0, -319)]), 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, Tag1 ("Gramlib__Grammar", 79))], 0), 1, 0, [15], [0], 0, 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 77)), 1, 0); (("generalize_symbol", 1985), ((Tag1 (0, (Tag3 (Tag1 ((("Symbol", 1979)), "t"), [((("a")), 100000000, 0, -308); ((("tr")), 100000000, 0, -312); ((("c")), 100000000, 0, -310)], (0)), 100000000, 0, -311), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Symbol", 1979)), "t"), [((("a")), 100000000, 0, -308); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -309); ((("c")), 100000000, 0, -310)], (0)), 100000000, 0, -307)], (0)), 100000000, 0, -306), 0), 100000000, 0, -305), 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, Tag1 ("Gramlib__Grammar", 80)), 0); (("level_of_nonterm", 1986), ((Tag1 (0, (Tag3 (Tag1 ((("Symbol", 1979)), "t"), [((("a")), 100000000, 0, -302); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -303); ((("c")), 100000000, 0, -304)], (0)), 100000000, 0, -301), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -300)], (0)), 100000000, 0, -299), 0), 100000000, 0, -298), 0, (("gramlib/grammar.mli", 144, 4225, 4235), ("gramlib/grammar.mli", 149, 4429, 4485), 0), 0, Tag1 ("Gramlib__Grammar", 81)), 0); Tag1 (("add_kw", 1987), ([((("s")), 100000000, 0, -296)], 1, [[(("add_kw", 1276), 0, (Tag10 ((Tag1 (0, ((("s")), 100000000, 0, -296), (Tag1 (0, (Tag3 ((("pattern", 1975)), [(Tag9 (("c")), 100000000, 0, -293)], (0)), 100000000, 0, -297), ((("s")), 100000000, 0, -296), 0), 100000000, 0, -295), 0), 100000000, 0, -294), [(Tag9 (("c")), 100000000, 0, -293)]), 100000000, 0, -292), (("gramlib/grammar.mli", 151, 4487, 4508), ("gramlib/grammar.mli", 151, 4487, 4543), 0), 0, Tag1 ("Gramlib__Grammar", 97))]], 1, 0, [63], [0], 0, 0, (("gramlib/grammar.mli", 151, 4487, 4489), ("gramlib/grammar.mli", 151, 4487, 4545), 0), 0, 0, 1, Tag1 ("Gramlib__Grammar", 96)), 1, 0); (("safe_extend", 1988), ((Tag1 (0, (Tag3 ((("add_kw", 1987)), [((("s")), 100000000, 0, -286)], (0)), 100000000, 0, -291), (Tag1 (0, (Tag3 (Tag1 ((("EState", 1972)), "t"), 0, (0)), 100000000, 0, -290), (Tag1 (0, ((("s")), 100000000, 0, -286), (Tag1 (0, (Tag3 (Tag1 ((("Entry", 1978)), "t"), [((("a")), 100000000, 0, -288)], (0)), 100000000, 0, -289), (Tag1 (0, (Tag3 ((("extend_statement", 1984)), [((("a")), 100000000, 0, -288)], (0)), 100000000, 0, -287), (Tag2 ([(Tag3 (Tag1 ((("EState", 1972)), "t"), 0, (0)), 100000000, 0, -285); ((("s")), 100000000, 0, -286)]), 100000000, 0, -284), 0), 100000000, 0, -283), 0), 100000000, 0, -282), 0), 100000000, 0, -281), 0), 100000000, 0, -280), 0), 100000000, 0, -279), 0, (("gramlib/grammar.mli", 153, 4547, 4549), ("gramlib/grammar.mli", 153, 4547, 4648), 0), 0, Tag1 ("Gramlib__Grammar", 98)), 0); (("safe_delete_rule", 1989), ((Tag1 (0, (Tag3 (Tag1 ((("EState", 1972)), "t"), 0, (0)), 100000000, 0, -278), (Tag1 (0, (Tag3 (Tag1 ((("Entry", 1978)), "t"), [((("a")), 100000000, 0, -276)], (0)), 100000000, 0, -277), (Tag1 (0, (Tag3 (Tag1 ((("Production", 1982)), "t"), [((("a")), 100000000, 0, -276)], (0)), 100000000, 0, -275), (Tag3 (Tag1 ((("EState", 1972)), "t"), 0, (0)), 100000000, 0, -274), 0), 100000000, 0, -273), 0), 100000000, 0, -272), 0), 100000000, 0, -271), 0, (("gramlib/grammar.mli", 154, 4649, 4651), ("gramlib/grammar.mli", 154, 4649, 4727), 0), 0, Tag1 ("Gramlib__Grammar", 99)), 0); Tag3 (("Unsafe", 1990), 0, (Tag1 ([(("clear_entry", 2031), ((Tag1 (0, (Tag3 (Tag1 ((("EState", 1972)), "t"), 0, (0)), 100000000, 0, -583), (Tag1 (0, (Tag3 (Tag1 ((("Entry", 1978)), "t"), [((("a")), 100000000, 0, -582)], (0)), 100000000, 0, -581), (Tag3 (Tag1 ((("EState", 1972)), "t"), 0, (0)), 100000000, 0, -580), 0), 100000000, 0, -579), 0), 100000000, 0, -578), 0, (("gramlib/grammar.mli", 157, 4751, 4755), ("gramlib/grammar.mli", 157, 4751, 4807), 0), 0, Tag1 ("Gramlib__Grammar", 100)), 0)]), 0, (("gramlib/grammar.mli", 156, 4729, 4731), ("gramlib/grammar.mli", 158, 4808, 4813), 0), Tag1 ("Gramlib__Grammar", 101)), 0, 0)])), 0, (("gramlib/grammar.mli", 129, 4016, 4016), ("gramlib/grammar.mli", 160, 4815, 4818), 0), Tag1 ("Gramlib__Grammar", 102)), 0); Tag3 (("GMake", 1914), 0, (Tag2 (((("L", 1915)), (Tag1 (Tag1 ((Tag2 ("Gramlib")), "Plexing"), "S"))), Tag1 ([Tag3 (("EState", 2032), 0, (Tag1 ([Tag1 (("t", 2049), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 84)), 1, 0); (("empty", 2050), ((Tag3 ((("t", 2049)), 0, (0)), 100000000, 0, -645), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 85)), 0)]), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), Tag1 ("Gramlib__Grammar", 86)), 0, 0); Tag3 (("GState", 2033), 0, (Tag1 ([Tag1 (("t", 2051), (0, 0, [[(("estate", 722), 0, (Tag3 (Tag1 ((("EState", 2032)), "t"), 0, (0)), 100000000, 0, -646), (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 88)); (("kwstate", 723), 0, (Tag3 (Tag1 ((("L", 1915)), "keyword_state"), 0, (0)), 100000000, 0, -647), (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 89))]], 1, 0, 0, 0, 0, 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 87)), 1, 0)]), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), Tag1 ("Gramlib__Grammar", 90)), 0, 0); Tag1 (("ty_pattern", 2034), (0, 0, Tag1 ([(("TPattern", 280), ([(Tag3 (Tag1 ((("L", 1915)), "pattern"), [((("a")), 100000000, 0, -644)], (0)), 100000000, 0, -643)]), ((Tag3 ((("ty_pattern", 2034)), 0, (0)), 100000000, 0, -642)), (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 6))], 0), 1, 0, 0, 0, 0, 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, 0, 1, Tag1 ("Gramlib__Grammar", 5)), 1, 0); Tag3 (("Parsable", 2035), 0, (Tag1 ([Tag1 (("t", 2052), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 11)), 1, 0); (("make", 2053), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -673)], (0)), 100000000, 0, -672), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Gramlib")), "Stream"), "t"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -670); (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -671)], (0)), 100000000, 0, -669), (Tag3 ((("t", 2052)), 0, (0)), 100000000, 0, -668), 0), 100000000, 0, -667), 0), 100000000, 0, -666), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 13)), 0); (("comments", 2054), ((Tag1 (0, (Tag3 ((("t", 2052)), 0, (0)), 100000000, 0, -665), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -662); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -663)]), 100000000, 0, -661); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -664)]), 100000000, 0, -660)], (0)), 100000000, 0, -659), 0), 100000000, 0, -658), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 14)), 0); (("loc", 2055), ((Tag1 (0, (Tag3 ((("t", 2052)), 0, (0)), 100000000, 0, -657), (Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -656), 0), 100000000, 0, -655), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 15)), 0); (("consume", 2056), ((Tag1 (0, (Tag3 ((("t", 2052)), 0, (0)), 100000000, 0, -654), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -653), (Tag1 (0, (Tag3 (Tag1 ((("L", 1915)), "keyword_state"), 0, (0)), 100000000, 0, -652), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -651), 0), 100000000, 0, -650), 0), 100000000, 0, -649), 0), 100000000, 0, -648), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 16)), 0)]), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), Tag1 ("Gramlib__Grammar", 17)), 0, 0); Tag3 (("Entry", 2036), 0, (Tag1 ([Tag1 (("t", 2057), ([((("a")), 100000000, 0, -744)], 1, 0, 1, 0, [7], [2], 0, 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 18)), 1, 0); (("make", 2058), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -743), (Tag1 (0, (Tag3 (Tag1 ((("EState", 2032)), "t"), 0, (0)), 100000000, 0, -742), (Tag2 ([(Tag3 (Tag1 ((("EState", 2032)), "t"), 0, (0)), 100000000, 0, -739); (Tag3 ((("t", 2057)), [((("a")), 100000000, 0, -741)], (0)), 100000000, 0, -740)]), 100000000, 0, -738), 0), 100000000, 0, -737), 0), 100000000, 0, -736), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 19)), 0); (("parse", 2059), ((Tag1 (0, (Tag3 ((("t", 2057)), [((("a")), 100000000, 0, -732)], (0)), 100000000, 0, -735), (Tag1 (0, (Tag3 (Tag1 ((("Parsable", 2035)), "t"), 0, (0)), 100000000, 0, -734), (Tag1 (0, (Tag3 (Tag1 ((("GState", 2033)), "t"), 0, (0)), 100000000, 0, -733), ((("a")), 100000000, 0, -732), 0), 100000000, 0, -731), 0), 100000000, 0, -730), 0), 100000000, 0, -729), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 20)), 0); (("name", 2060), ((Tag1 (0, (Tag3 ((("t", 2057)), [((("a")), 100000000, 0, -728)], (0)), 100000000, 0, -727), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -726), 0), 100000000, 0, -725), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 21)), 0); Tag1 (("parser_fun", 2061), ([((("a")), 100000000, 0, -720)], 1, [[(("parser_fun", 343), 0, (Tag1 (0, (Tag3 (Tag1 ((("L", 1915)), "keyword_state"), 0, (0)), 100000000, 0, -724), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Gramlib")), "LStream"), "t"), [(Tag3 (Tag1 ((("L", 1915)), "keyword_state"), 0, (0)), 100000000, 0, -722); (Tag3 (Tag1 ((("L", 1915)), "te"), 0, (0)), 100000000, 0, -723)], (0)), 100000000, 0, -721), ((("a")), 100000000, 0, -720), 0), 100000000, 0, -719), 0), 100000000, 0, -718), (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 23))]], 1, 0, [25], [0], 0, 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, 0, 1, Tag1 ("Gramlib__Grammar", 22)), 1, 0); (("of_parser", 2062), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -717), (Tag1 (0, (Tag3 ((("parser_fun", 2061)), [((("a")), 100000000, 0, -714)], (0)), 100000000, 0, -716), (Tag1 (0, (Tag3 (Tag1 ((("EState", 2032)), "t"), 0, (0)), 100000000, 0, -715), (Tag2 ([(Tag3 (Tag1 ((("EState", 2032)), "t"), 0, (0)), 100000000, 0, -712); (Tag3 ((("t", 2057)), [((("a")), 100000000, 0, -714)], (0)), 100000000, 0, -713)]), 100000000, 0, -711), 0), 100000000, 0, -710), 0), 100000000, 0, -709), 0), 100000000, 0, -708), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 24)), 0); (("parse_token_stream", 2063), ((Tag1 (0, (Tag3 ((("t", 2057)), [((("a")), 100000000, 0, -702)], (0)), 100000000, 0, -707), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Gramlib")), "LStream"), "t"), [(Tag3 (Tag1 ((("L", 1915)), "keyword_state"), 0, (0)), 100000000, 0, -705); (Tag3 (Tag1 ((("L", 1915)), "te"), 0, (0)), 100000000, 0, -706)], (0)), 100000000, 0, -704), (Tag1 (0, (Tag3 (Tag1 ((("GState", 2033)), "t"), 0, (0)), 100000000, 0, -703), ((("a")), 100000000, 0, -702), 0), 100000000, 0, -701), 0), 100000000, 0, -700), 0), 100000000, 0, -699), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 25)), 0); (("print", 2064), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -698), (Tag1 (0, (Tag3 ((("t", 2057)), [((("a")), 100000000, 0, -697)], (0)), 100000000, 0, -696), (Tag1 (0, (Tag3 (Tag1 ((("EState", 2032)), "t"), 0, (0)), 100000000, 0, -695), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -694), 0), 100000000, 0, -693), 0), 100000000, 0, -692), 0), 100000000, 0, -691), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 26)), 0); (("is_empty", 2065), ((Tag1 (0, (Tag3 ((("t", 2057)), [((("a")), 100000000, 0, -690)], (0)), 100000000, 0, -689), (Tag1 (0, (Tag3 (Tag1 ((("EState", 2032)), "t"), 0, (0)), 100000000, 0, -688), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -687), 0), 100000000, 0, -686), 0), 100000000, 0, -685), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 27)), 0); Tag1 (("any_t", 2066), (0, 0, Tag1 ([(("Any", 518), ([(Tag3 ((("t", 2057)), [((("a")), 100000000, 0, -684)], (0)), 100000000, 0, -683)]), ((Tag3 ((("any_t", 2066)), 0, (0)), 100000000, 0, -682)), (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 29))], 0), 1, 0, 0, 0, 0, 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, 0, 1, Tag1 ("Gramlib__Grammar", 28)), 1, 0); (("accumulate_in", 2067), ((Tag1 (0, (Tag3 ((("t", 2057)), [((("a")), 100000000, 0, -681)], (0)), 100000000, 0, -680), (Tag1 (0, (Tag3 (Tag1 ((("EState", 2032)), "t"), 0, (0)), 100000000, 0, -679), (Tag3 (Tag1 (Tag1 ((Tag2 ("CString")), "Map"), "t"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("any_t", 2066)), 0, (0)), 100000000, 0, -678)], (0)), 100000000, 0, -677)], (0)), 100000000, 0, -676), 0), 100000000, 0, -675), 0), 100000000, 0, -674), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 30)), 0)]), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), Tag1 ("Gramlib__Grammar", 31)), 0, 0); Tag3 (("Symbol", 2037), 0, (Tag1 ([Tag1 (("t", 2068), ([((("self")), 100000000, 0, -832); ((("trec")), 100000000, 0, -833); ((("a")), 100000000, 0, -834)], 3, 0, 1, 0, [7; 7; 7], [2; 2; 2], 0, 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 54)), 1, 0); (("nterm", 2069), ((Tag1 (0, (Tag3 (Tag1 ((("Entry", 2036)), "t"), [((("a")), 100000000, 0, -830)], (0)), 100000000, 0, -831), (Tag3 ((("t", 2068)), [((("self")), 100000000, 0, -828); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -829); ((("a")), 100000000, 0, -830)], (0)), 100000000, 0, -827), 0), 100000000, 0, -826), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 55)), 0); (("nterml", 2070), ((Tag1 (0, (Tag3 (Tag1 ((("Entry", 2036)), "t"), [((("a")), 100000000, 0, -823)], (0)), 100000000, 0, -825), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -824), (Tag3 ((("t", 2068)), [((("self")), 100000000, 0, -821); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -822); ((("a")), 100000000, 0, -823)], (0)), 100000000, 0, -820), 0), 100000000, 0, -819), 0), 100000000, 0, -818), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 56)), 0); (("list0", 2071), ((Tag1 (0, (Tag3 ((("t", 2068)), [((("self")), 100000000, 0, -813); ((("trec")), 100000000, 0, -814); ((("a")), 100000000, 0, -816)], (0)), 100000000, 0, -817), (Tag3 ((("t", 2068)), [((("self")), 100000000, 0, -813); ((("trec")), 100000000, 0, -814); (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -816)], (0)), 100000000, 0, -815)], (0)), 100000000, 0, -812), 0), 100000000, 0, -811), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 57)), 0); (("list0sep", 2072), ((Tag1 (0, (Tag3 ((("t", 2068)), [((("self")), 100000000, 0, -802); ((("trec")), 100000000, 0, -803); ((("a")), 100000000, 0, -805)], (0)), 100000000, 0, -810), (Tag1 (0, (Tag3 ((("t", 2068)), [((("self")), 100000000, 0, -802); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -808); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -809)], (0)), 100000000, 0, -807), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -806), (Tag3 ((("t", 2068)), [((("self")), 100000000, 0, -802); ((("trec")), 100000000, 0, -803); (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -805)], (0)), 100000000, 0, -804)], (0)), 100000000, 0, -801), 0), 100000000, 0, -800), 0), 100000000, 0, -799), 0), 100000000, 0, -798), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 58)), 0); (("list1", 2073), ((Tag1 (0, (Tag3 ((("t", 2068)), [((("self")), 100000000, 0, -793); ((("trec")), 100000000, 0, -794); ((("a")), 100000000, 0, -796)], (0)), 100000000, 0, -797), (Tag3 ((("t", 2068)), [((("self")), 100000000, 0, -793); ((("trec")), 100000000, 0, -794); (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -796)], (0)), 100000000, 0, -795)], (0)), 100000000, 0, -792), 0), 100000000, 0, -791), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 59)), 0); (("list1sep", 2074), ((Tag1 (0, (Tag3 ((("t", 2068)), [((("self")), 100000000, 0, -782); ((("trec")), 100000000, 0, -783); ((("a")), 100000000, 0, -785)], (0)), 100000000, 0, -790), (Tag1 (0, (Tag3 ((("t", 2068)), [((("self")), 100000000, 0, -782); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -788); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -789)], (0)), 100000000, 0, -787), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -786), (Tag3 ((("t", 2068)), [((("self")), 100000000, 0, -782); ((("trec")), 100000000, 0, -783); (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -785)], (0)), 100000000, 0, -784)], (0)), 100000000, 0, -781), 0), 100000000, 0, -780), 0), 100000000, 0, -779), 0), 100000000, 0, -778), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 60)), 0); (("opt", 2075), ((Tag1 (0, (Tag3 ((("t", 2068)), [((("self")), 100000000, 0, -773); ((("trec")), 100000000, 0, -774); ((("a")), 100000000, 0, -776)], (0)), 100000000, 0, -777), (Tag3 ((("t", 2068)), [((("self")), 100000000, 0, -773); ((("trec")), 100000000, 0, -774); (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -776)], (0)), 100000000, 0, -775)], (0)), 100000000, 0, -772), 0), 100000000, 0, -771), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 61)), 0); (("self", 2076), ((Tag3 ((("t", 2068)), [((("self")), 100000000, 0, -769); (Tag3 ((("mayrec", 1911)), 0, (0)), 100000000, 0, -770); ((("self")), 100000000, 0, -769)], (0)), 100000000, 0, -768), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 62)), 0); (("next", 2077), ((Tag3 ((("t", 2068)), [((("self")), 100000000, 0, -766); (Tag3 ((("mayrec", 1911)), 0, (0)), 100000000, 0, -767); ((("self")), 100000000, 0, -766)], (0)), 100000000, 0, -765), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 63)), 0); (("token", 2078), ((Tag1 (0, (Tag3 (Tag1 ((("L", 1915)), "pattern"), [((("c")), 100000000, 0, -763)], (0)), 100000000, 0, -764), (Tag3 ((("t", 2068)), [((("self")), 100000000, 0, -761); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -762); ((("c")), 100000000, 0, -763)], (0)), 100000000, 0, -760), 0), 100000000, 0, -759), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 64)), 0); (("tokens", 2079), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("ty_pattern", 2034)), 0, (0)), 100000000, 0, -758)], (0)), 100000000, 0, -757), (Tag3 ((("t", 2068)), [((("self")), 100000000, 0, -754); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -755); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -756)], (0)), 100000000, 0, -753), 0), 100000000, 0, -752), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 65)), 0); (("rules", 2080), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Rules", 2039)), "t"), [((("a")), 100000000, 0, -749)], (0)), 100000000, 0, -751)], (0)), 100000000, 0, -750), (Tag3 ((("t", 2068)), [((("self")), 100000000, 0, -747); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -748); ((("a")), 100000000, 0, -749)], (0)), 100000000, 0, -746), 0), 100000000, 0, -745), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 66)), 0)]), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), Tag1 ("Gramlib__Grammar", 32)), 1, 0); Tag3 (("Rule", 2038), 0, (Tag1 ([Tag1 (("t", 2081), ([((("self")), 100000000, 0, -865); ((("trec")), 100000000, 0, -866); ((("f")), 100000000, 0, -867); ((("r")), 100000000, 0, -868)], 4, 0, 1, 0, [7; 7; 7; 7], [2; 2; 2; 2], 0, 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 67)), 1, 0); (("stop", 2082), ((Tag3 ((("t", 2081)), [((("self")), 100000000, 0, -862); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -863); ((("r")), 100000000, 0, -864); ((("r")), 100000000, 0, -864)], (0)), 100000000, 0, -861), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 68)), 0); (("next", 2083), ((Tag1 (0, (Tag3 ((("t", 2081)), [((("self")), 100000000, 0, -851); ((0), 100000000, 0, -860); ((("a")), 100000000, 0, -854); ((("r")), 100000000, 0, -856)], (0)), 100000000, 0, -859), (Tag1 (0, (Tag3 (Tag1 ((("Symbol", 2037)), "t"), [((("self")), 100000000, 0, -851); ((0), 100000000, 0, -858); ((("b")), 100000000, 0, -855)], (0)), 100000000, 0, -857), (Tag3 ((("t", 2081)), [((("self")), 100000000, 0, -851); (Tag3 ((("mayrec", 1911)), 0, (0)), 100000000, 0, -852); (Tag1 (0, ((("b")), 100000000, 0, -855), ((("a")), 100000000, 0, -854), 0), 100000000, 0, -853); ((("r")), 100000000, 0, -856)], (0)), 100000000, 0, -850), 0), 100000000, 0, -849), 0), 100000000, 0, -848), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 69)), 0); (("next_norec", 2084), ((Tag1 (0, (Tag3 (Tag1 ((("Rule", 2038)), "t"), [((("self")), 100000000, 0, -838); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -847); ((("a")), 100000000, 0, -841); ((("r")), 100000000, 0, -843)], (0)), 100000000, 0, -846), (Tag1 (0, (Tag3 (Tag1 ((("Symbol", 2037)), "t"), [((("self")), 100000000, 0, -838); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -845); ((("b")), 100000000, 0, -842)], (0)), 100000000, 0, -844), (Tag3 ((("t", 2081)), [((("self")), 100000000, 0, -838); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -839); (Tag1 (0, ((("b")), 100000000, 0, -842), ((("a")), 100000000, 0, -841), 0), 100000000, 0, -840); ((("r")), 100000000, 0, -843)], (0)), 100000000, 0, -837), 0), 100000000, 0, -836), 0), 100000000, 0, -835), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 70)), 0)]), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), Tag1 ("Gramlib__Grammar", 33)), 2, 0); Tag3 (("Rules", 2039), 0, (Tag1 ([Tag1 (("t", 2085), ([((("a")), 100000000, 0, -879)], 1, 0, 1, 0, [7], [2], 0, 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 71)), 1, 0); (("make", 2086), ((Tag1 (0, (Tag3 (Tag1 ((("Rule", 2038)), "t"), [((0), 100000000, 0, -875); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -876); ((("f")), 100000000, 0, -873); (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -878), ((("a")), 100000000, 0, -872), 0), 100000000, 0, -877)], (0)), 100000000, 0, -874), (Tag1 (0, ((("f")), 100000000, 0, -873), (Tag3 ((("t", 2085)), [((("a")), 100000000, 0, -872)], (0)), 100000000, 0, -871), 0), 100000000, 0, -870), 0), 100000000, 0, -869), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 72)), 0)]), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), Tag1 ("Gramlib__Grammar", 34)), 2, 0); Tag3 (("Production", 2040), 0, (Tag1 ([Tag1 (("t", 2087), ([((("a")), 100000000, 0, -889)], 1, 0, 1, 0, [7], [2], 0, 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 73)), 1, 0); (("make", 2088), ((Tag1 (0, (Tag3 (Tag1 ((("Rule", 2038)), "t"), [((("a")), 100000000, 0, -883); ((0), 100000000, 0, -886); ((("f")), 100000000, 0, -884); (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -888), ((("a")), 100000000, 0, -883), 0), 100000000, 0, -887)], (0)), 100000000, 0, -885), (Tag1 (0, ((("f")), 100000000, 0, -884), (Tag3 ((("t", 2087)), [((("a")), 100000000, 0, -883)], (0)), 100000000, 0, -882), 0), 100000000, 0, -881), 0), 100000000, 0, -880), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 74)), 0)]), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), Tag1 ("Gramlib__Grammar", 75)), 0, 0); Tag1 (("single_extend_statement", 2041), ([((("a")), 100000000, 0, -641)], 1, 0, 1, ((Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -636)], (0)), 100000000, 0, -635); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Gramlib")), "Gramext"), "g_assoc"), 0, (0)), 100000000, 0, -638)], (0)), 100000000, 0, -637); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Production", 2040)), "t"), [((("a")), 100000000, 0, -641)], (0)), 100000000, 0, -640)], (0)), 100000000, 0, -639)]), 100000000, 0, -634)), [7], [0], 0, 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 76)), 1, 0); Tag1 (("extend_statement", 2042), ([((("a")), 100000000, 0, -630)], 1, Tag1 ([(("Reuse", 712), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -627)], (0)), 100000000, 0, -626); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Production", 2040)), "t"), [((("a")), 100000000, 0, -630)], (0)), 100000000, 0, -629)], (0)), 100000000, 0, -628)]), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 78)); (("Fresh", 713), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Gramlib")), "Gramext"), "position"), 0, (0)), 100000000, 0, -631); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("single_extend_statement", 2041)), [((("a")), 100000000, 0, -630)], (0)), 100000000, 0, -633)], (0)), 100000000, 0, -632)]), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 79))], 0), 1, 0, [15], [0], 0, 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 77)), 1, 0); (("generalize_symbol", 2043), ((Tag1 (0, (Tag3 (Tag1 ((("Symbol", 2037)), "t"), [((("a")), 100000000, 0, -621); ((("tr")), 100000000, 0, -625); ((("c")), 100000000, 0, -623)], (0)), 100000000, 0, -624), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Symbol", 2037)), "t"), [((("a")), 100000000, 0, -621); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -622); ((("c")), 100000000, 0, -623)], (0)), 100000000, 0, -620)], (0)), 100000000, 0, -619), 0), 100000000, 0, -618), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 80)), 0); (("level_of_nonterm", 2044), ((Tag1 (0, (Tag3 (Tag1 ((("Symbol", 2037)), "t"), [((("a")), 100000000, 0, -615); (Tag3 ((("norec", 1910)), 0, (0)), 100000000, 0, -616); ((("c")), 100000000, 0, -617)], (0)), 100000000, 0, -614), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -613)], (0)), 100000000, 0, -612), 0), 100000000, 0, -611), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 81)), 0); Tag1 (("add_kw", 2045), ([((("s")), 100000000, 0, -609)], 1, [[(("add_kw", 1276), 0, (Tag10 ((Tag1 (0, ((("s")), 100000000, 0, -609), (Tag1 (0, (Tag3 (Tag1 ((("L", 1915)), "pattern"), [(Tag9 (("c")), 100000000, 0, -606)], (0)), 100000000, 0, -610), ((("s")), 100000000, 0, -609), 0), 100000000, 0, -608), 0), 100000000, 0, -607), [(Tag9 (("c")), 100000000, 0, -606)]), 100000000, 0, -605), (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 97))]], 1, 0, [63], [0], 0, 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, 0, 1, Tag1 ("Gramlib__Grammar", 96)), 1, 0); (("safe_extend", 2046), ((Tag1 (0, (Tag3 ((("add_kw", 2045)), [((("s")), 100000000, 0, -599)], (0)), 100000000, 0, -604), (Tag1 (0, (Tag3 (Tag1 ((("EState", 2032)), "t"), 0, (0)), 100000000, 0, -603), (Tag1 (0, ((("s")), 100000000, 0, -599), (Tag1 (0, (Tag3 (Tag1 ((("Entry", 2036)), "t"), [((("a")), 100000000, 0, -601)], (0)), 100000000, 0, -602), (Tag1 (0, (Tag3 ((("extend_statement", 2042)), [((("a")), 100000000, 0, -601)], (0)), 100000000, 0, -600), (Tag2 ([(Tag3 (Tag1 ((("EState", 2032)), "t"), 0, (0)), 100000000, 0, -598); ((("s")), 100000000, 0, -599)]), 100000000, 0, -597), 0), 100000000, 0, -596), 0), 100000000, 0, -595), 0), 100000000, 0, -594), 0), 100000000, 0, -593), 0), 100000000, 0, -592), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 98)), 0); (("safe_delete_rule", 2047), ((Tag1 (0, (Tag3 (Tag1 ((("EState", 2032)), "t"), 0, (0)), 100000000, 0, -591), (Tag1 (0, (Tag3 (Tag1 ((("Entry", 2036)), "t"), [((("a")), 100000000, 0, -589)], (0)), 100000000, 0, -590), (Tag1 (0, (Tag3 (Tag1 ((("Production", 2040)), "t"), [((("a")), 100000000, 0, -589)], (0)), 100000000, 0, -588), (Tag3 (Tag1 ((("EState", 2032)), "t"), 0, (0)), 100000000, 0, -587), 0), 100000000, 0, -586), 0), 100000000, 0, -585), 0), 100000000, 0, -584), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 99)), 0); Tag3 (("Unsafe", 2048), 0, (Tag1 ([(("clear_entry", 2089), ((Tag1 (0, (Tag3 (Tag1 ((("EState", 2032)), "t"), 0, (0)), 100000000, 0, -895), (Tag1 (0, (Tag3 (Tag1 ((("Entry", 2036)), "t"), [((("a")), 100000000, 0, -894)], (0)), 100000000, 0, -893), (Tag3 (Tag1 ((("EState", 2032)), "t"), 0, (0)), 100000000, 0, -892), 0), 100000000, 0, -891), 0), 100000000, 0, -890), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), 0, Tag1 ("Gramlib__Grammar", 100)), 0)]), 0, (("gramlib/grammar.mli", 172, 5392, 5423), ("gramlib/grammar.mli", 175, 5496, 5534), 0), Tag1 ("Gramlib__Grammar", 101)), 0, 0)])), 0, (("gramlib/grammar.mli", 172, 5392, 5392), ("gramlib/grammar.mli", 175, 5496, 5534), 0), Tag1 ("Gramlib__Grammar", 107)), 0, 0)], "Gramlib__Grammar", [("Gramlib__Grammar", ("zuU\178r\159\234NC\015_hKT\240\151")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Gramlib__Stream", ("\248\\H\205_76\253\136\146\200\031\165\021=t")); ("Gramlib__Plexing", ("\028\200j\003G\198\183\184f\243\148a\020\011\160\171")); ("Gramlib__LStream", ("B\143\148\148@\016M\192w\155\223\189\218\224\002\004")); ("Gramlib__Gramext", ("B\171oA\172\212\187>\175\233Q\145\"\176TM")); ("Gramlib", ("\154\143\210e\021i\246\176\224\194\220\217\007\145\139A")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CString", ("\243~4C\023~\169\148x\206\165\207\195\177Q\184")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150"))], [(0)])

    end

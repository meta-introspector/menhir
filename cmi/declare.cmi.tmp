module Hook :
  sig
    type 'a g
    type t = unit g
    module S :
      sig
        type t = {
          uctx : UState.t;
          obls : (Names.Id.t * Constr.t) list;
          scope : Locality.definition_scope;
          dref : Names.GlobRef.t;
        }
      end
    val make_g : (S.t -> 'a -> 'a) -> 'a g
    val make : (S.t -> unit) -> t
    val call : ?hook:t -> S.t -> unit
  end
module CInfo :
  sig
    type 'constr t
    val make :
      name:Names.Id.t ->
      typ:'constr ->
      ?args:Names.Name.t list ->
      ?impargs:Impargs.manual_implicits ->
      ?using:Proof_using.t -> unit -> 'constr t
    val to_constr : Evd.evar_map -> EConstr.t t -> Constr.t t
    val get_typ : 'constr t -> 'constr
  end
module Info :
  sig
    type t
    val make :
      ?poly:bool ->
      ?inline:bool ->
      ?kind:Decls.logical_kind ->
      ?udecl:UState.universe_decl ->
      ?scope:Locality.definition_scope ->
      ?clearbody:bool ->
      ?hook:Hook.t ->
      ?typing_flags:Declarations.typing_flags ->
      ?deprecation:Deprecation.t -> unit -> t
  end
val declare_definition :
  info:Info.t ->
  cinfo:EConstr.t option CInfo.t ->
  opaque:bool -> body:EConstr.t -> Evd.evar_map -> Names.GlobRef.t
type lemma_possible_guards = int list list
val declare_mutually_recursive :
  info:Info.t ->
  cinfo:Constr.t CInfo.t list ->
  opaque:bool ->
  ntns:Metasyntax.notation_interpretation_decl list ->
  uctx:UState.t ->
  rec_declaration:Constr.rec_declaration ->
  possible_indexes:lemma_possible_guards option -> Names.GlobRef.t list
module OblState :
  sig
    type t
    val empty : t
    module View :
      sig
        module Obl :
          sig
            type t = private {
              name : Names.Id.t;
              loc : Loc.t option;
              status : bool * Evar_kinds.obligation_definition_status;
              solved : bool;
            }
          end
        type t = private {
          opaque : bool;
          remaining : int;
          obligations : Obl.t array;
        }
      end
    val view : t -> View.t Names.Id.Map.t
  end
module Proof :
  sig
    type t
    val start : info:Info.t -> cinfo:EConstr.t CInfo.t -> Evd.evar_map -> t
    val start_derive :
      f:Names.Id.t ->
      name:Names.Id.t -> info:Info.t -> Proofview.telescope -> t
    val start_equations :
      name:Names.Id.t ->
      info:Info.t ->
      hook:(pm:OblState.t ->
            Names.Constant.t list -> Evd.evar_map -> OblState.t) ->
      types:(Environ.env * Evar.t * Evd.undefined Evd.evar_info *
             EConstr.named_context * Evd.econstr)
            list ->
      Evd.evar_map -> Proofview.telescope -> t
    val start_with_initialization :
      info:Info.t -> cinfo:Constr.t CInfo.t -> Evd.evar_map -> t
    type mutual_info =
        bool * lemma_possible_guards * Constr.t option list option
    val start_mutual_with_initialization :
      info:Info.t ->
      cinfo:Constr.t CInfo.t list ->
      mutual_info:mutual_info -> Evd.evar_map -> int list option -> t
    val save :
      pm:OblState.t ->
      proof:t ->
      opaque:Vernacexpr.opacity_flag ->
      idopt:Names.lident option -> OblState.t * Names.GlobRef.t list
    val save_regular :
      proof:t ->
      opaque:Vernacexpr.opacity_flag ->
      idopt:Names.lident option -> Names.GlobRef.t list
    val save_admitted : pm:OblState.t -> proof:t -> OblState.t
    val by : unit Proofview.tactic -> t -> t * bool
    val get : t -> Proof.t
    val get_name : t -> Names.Id.t
    val fold : f:(Proof.t -> 'a) -> t -> 'a
    val map : f:(Proof.t -> Proof.t) -> t -> t
    val map_fold : f:(Proof.t -> Proof.t * 'a) -> t -> t * 'a
    val map_fold_endline :
      f:(unit Proofview.tactic -> Proof.t -> Proof.t * 'a) -> t -> t * 'a
    val set_endline_tactic : Genarg.glob_generic_argument -> t -> t
    val set_used_variables :
      t -> using:Proof_using.t -> Constr.named_context * t
    val get_used_variables : t -> Names.Id.Set.t option
    val compact : t -> t
    val update_sigma_univs : UGraph.t -> t -> t
    val get_open_goals : t -> int
    val get_goal_context : t -> int -> Evd.evar_map * Environ.env
    val get_current_goal_context : t -> Evd.evar_map * Environ.env
    val get_current_context : t -> Evd.evar_map * Environ.env
    type closed_proof_output
    val return_proof : t -> closed_proof_output
    val return_partial_proof : t -> closed_proof_output
    type proof_object
    val close_proof :
      opaque:Vernacexpr.opacity_flag ->
      keep_body_ucst_separate:bool -> t -> proof_object
    val close_future_proof :
      feedback_id:Stateid.t ->
      t -> closed_proof_output Future.computation -> proof_object
    val save_lemma_admitted_delayed :
      pm:OblState.t -> proof:proof_object -> OblState.t
    val save_lemma_proved_delayed :
      pm:OblState.t ->
      proof:proof_object ->
      idopt:Names.lident option -> OblState.t * Names.GlobRef.t list
    val get_po_name : proof_object -> Names.Id.t
  end
type proof_entry
type parameter_entry
type primitive_entry
val definition_entry :
  ?opaque:bool ->
  ?using:Names.Id.Set.t ->
  ?inline:bool ->
  ?types:Constr.types ->
  ?univs:UState.named_universes_entry -> Constr.constr -> proof_entry
val parameter_entry :
  ?inline:int ->
  ?univs:UState.named_universes_entry -> Constr.constr -> parameter_entry
val primitive_entry :
  ?types:Constr.types * UState.named_universes_entry ->
  CPrimitives.op_or_type -> primitive_entry
val declare_entry :
  name:Names.Id.t ->
  ?scope:Locality.definition_scope ->
  kind:Decls.logical_kind ->
  ?deprecation:Deprecation.t ->
  ?hook:Hook.t ->
  impargs:Impargs.manual_implicits ->
  uctx:UState.t -> proof_entry -> Names.GlobRef.t
val declare_variable :
  name:Names.variable ->
  kind:Decls.logical_kind ->
  typ:Constr.types ->
  impl:Glob_term.binding_kind -> univs:UState.named_universes_entry -> unit
type constant_entry =
    DefinitionEntry of proof_entry
  | ParameterEntry of parameter_entry
  | PrimitiveEntry of primitive_entry
val prepare_parameter :
  poly:bool ->
  udecl:UState.universe_decl ->
  types:EConstr.types -> Evd.evar_map -> Evd.evar_map * parameter_entry
val declare_constant :
  ?local:Locality.import_status ->
  name:Names.Id.t ->
  kind:Decls.logical_kind ->
  ?typing_flags:Declarations.typing_flags ->
  ?deprecation:Deprecation.t -> constant_entry -> Names.Constant.t
val definition_message : Names.Id.t -> unit
val assumption_message : Names.Id.t -> unit
val fixpoint_message : int array option -> Names.Id.t list -> unit
val check_exists : Names.Id.t -> unit
val build_by_tactic :
  Environ.env ->
  uctx:UState.t ->
  poly:bool ->
  typ:EConstr.types ->
  unit Proofview.tactic ->
  Constr.constr * Constr.types option * UState.named_universes_entry * 
  bool * UState.t
module Obls :
  sig
    type fixpoint_kind =
        IsFixpoint of Names.lident option list
      | IsCoFixpoint
    val check_solved_obligations : pm:OblState.t -> what_for:Pp.t -> unit
    val default_tactic : unit Proofview.tactic ref
    type progress = Remain of int | Dependent | Defined of Names.GlobRef.t
    val prepare_obligation :
      name:Names.Id.t ->
      types:EConstr.t option ->
      body:EConstr.t ->
      Evd.evar_map ->
      Constr.constr * Constr.types * UState.t * RetrieveObl.obligation_info
    val add_definition :
      pm:OblState.t ->
      cinfo:Constr.types CInfo.t ->
      info:Info.t ->
      ?obl_hook:OblState.t Hook.g ->
      ?term:Constr.t ->
      uctx:UState.t ->
      ?tactic:unit Proofview.tactic ->
      ?reduce:(Constr.t -> Constr.t) ->
      ?opaque:bool -> RetrieveObl.obligation_info -> OblState.t * progress
    val add_mutual_definitions :
      (Constr.t CInfo.t * Constr.t * RetrieveObl.obligation_info) list ->
      pm:OblState.t ->
      info:Info.t ->
      ?obl_hook:OblState.t Hook.g ->
      uctx:UState.t ->
      ?tactic:unit Proofview.tactic ->
      ?reduce:(Constr.t -> Constr.t) ->
      ?opaque:bool ->
      ntns:Metasyntax.notation_interpretation_decl list ->
      fixpoint_kind -> OblState.t
    val obligation :
      int * Names.Id.t option * Constrexpr.constr_expr option ->
      pm:OblState.t -> Genarg.glob_generic_argument option -> Proof.t
    val next_obligation :
      pm:OblState.t ->
      ?final:bool ->
      Names.Id.t option -> Genarg.glob_generic_argument option -> Proof.t
    val solve_obligations :
      pm:OblState.t ->
      Names.Id.t option ->
      unit Proofview.tactic option -> OblState.t * progress
    val solve_all_obligations :
      pm:OblState.t -> unit Proofview.tactic option -> OblState.t
    val try_solve_obligations :
      pm:OblState.t ->
      Names.Id.t option -> unit Proofview.tactic option -> OblState.t
    val show_obligations :
      pm:OblState.t -> ?msg:bool -> Names.Id.t option -> unit
    val show_term : pm:OblState.t -> Names.Id.t option -> Pp.t
    val admit_obligations : pm:OblState.t -> Names.Id.t option -> OblState.t
    val check_program_libraries : unit -> unit
  end
val is_local_constant : Names.Constant.t -> bool
module Internal :
  sig
    module Constant :
      sig
        type t
        val tag : (Names.Id.t * t) Libobject.Dyn.tag
        val kind : t -> Decls.logical_kind
      end
    val objVariable : Names.Id.t Libobject.Dyn.tag
    val export_side_effects : Evd.side_effects -> unit("DEBUG:rule", [Tag3 (("Hook", 2131), 0, (Tag1 ([Tag1 (("g", 2158), ([((("a")), 100000000, 0, -191)], 1, 0, 1, 0, [7], [2], 0, 0, (("vernac/declare.mli", 43, 1836, 1838), ("vernac/declare.mli", 43, 1836, 1847), 0), 0, 0, 0, Tag1 ("Declare", 0)), 1, 0); Tag1 (("t", 2159), (0, 0, 0, 1, ((Tag3 ((("g", 2158)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -190)], (0)), 100000000, 0, -189)), 0, 0, 0, 0, (("vernac/declare.mli", 45, 1849, 1851), ("vernac/declare.mli", 45, 1849, 1866), 0), 0, 0, 0, Tag1 ("Declare", 1)), 1, 0); Tag3 (("S", 2160), 0, (Tag1 ([Tag1 (("t", 2164), (0, 0, [[(("uctx", 425), 0, (Tag3 (Tag1 ((Tag2 ("UState")), "t"), 0, (0)), 100000000, 0, -192), (("vernac/declare.mli", 53, 2121, 2129), ("vernac/declare.mli", 55, 2223, 2230), 0), 0, Tag1 ("Declare", 4)); (("obls", 599), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -195); (Tag3 (Tag1 ((Tag2 ("Constr")), "t"), 0, (0)), 100000000, 0, -196)]), 100000000, 0, -194)], (0)), 100000000, 0, -193), (("vernac/declare.mli", 55, 2223, 2231), ("vernac/declare.mli", 59, 2476, 2483), 0), 0, Tag1 ("Declare", 5)); (("scope", 611), 0, (Tag3 (Tag1 ((Tag2 ("Locality")), "definition_scope"), 0, (0)), 100000000, 0, -197), (("vernac/declare.mli", 59, 2476, 2484), ("vernac/declare.mli", 61, 2577, 2584), 0), 0, Tag1 ("Declare", 6)); (("dref", 623), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -198), (("vernac/declare.mli", 61, 2577, 2585), ("vernac/declare.mli", 61, 2577, 2601), 0), 0, Tag1 ("Declare", 7))]], 1, 0, 0, 0, 0, 0, (("vernac/declare.mli", 52, 2108, 2112), ("vernac/declare.mli", 63, 2662, 2669), 0), 0, 0, 0, Tag1 ("Declare", 2)), 1, 0)]), 0, (("vernac/declare.mli", 51, 2091, 2093), ("vernac/declare.mli", 64, 2670, 2675), 0), Tag1 ("Declare", 8)), 0, 0); (("make_g", 2161), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((("S", 2160)), "t"), 0, (0)), 100000000, 0, -188), (Tag1 (0, ((("a")), 100000000, 0, -185), ((("a")), 100000000, 0, -185), 0), 100000000, 0, -187), 0), 100000000, 0, -186), (Tag3 ((("g", 2158)), [((("a")), 100000000, 0, -185)], (0)), 100000000, 0, -184), 0), 100000000, 0, -183), 0, (("vernac/declare.mli", 66, 2677, 2679), ("vernac/declare.mli", 66, 2677, 2717), 0), 0, Tag1 ("Declare", 9)), 0); (("make", 2162), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((("S", 2160)), "t"), 0, (0)), 100000000, 0, -182), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -181), 0), 100000000, 0, -180), (Tag3 ((("t", 2159)), 0, (0)), 100000000, 0, -179), 0), 100000000, 0, -178), 0, (("vernac/declare.mli", 67, 2718, 2720), ("vernac/declare.mli", 67, 2718, 2749), 0), 0, Tag1 ("Declare", 10)), 0); (("call", 2163), ((Tag1 (Tag1 ("hook"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 2159)), 0, (0)), 100000000, 0, -177)], (0)), 100000000, 0, -176), (Tag1 (0, (Tag3 (Tag1 ((("S", 2160)), "t"), 0, (0)), 100000000, 0, -175), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -174), 0), 100000000, 0, -173), 0), 100000000, 0, -172), 0, (("vernac/declare.mli", 68, 2750, 2752), ("vernac/declare.mli", 68, 2750, 2785), 0), 0, Tag1 ("Declare", 11)), 0)]), 0, (("vernac/declare.mli", 42, 1818, 1818), ("vernac/declare.mli", 69, 2786, 2789), 0), Tag1 ("Declare", 12)), 0, 0); Tag3 (("CInfo", 2132), 0, (Tag1 ([Tag1 (("t", 2165), ([((("constr")), 100000000, 0, -226)], 1, 0, 1, 0, [7], [2], 0, 0, (("vernac/declare.mli", 75, 2920, 2922), ("vernac/declare.mli", 75, 2920, 2936), 0), 0, 0, 0, Tag1 ("Declare", 13)), 1, 0); (("make", 2166), ((Tag1 (("name"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -225), (Tag1 (("typ"), ((("constr")), 100000000, 0, -216), (Tag1 (Tag1 ("args"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -224)], (0)), 100000000, 0, -223)], (0)), 100000000, 0, -222), (Tag1 (Tag1 ("impargs"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Impargs")), "manual_implicits"), 0, (0)), 100000000, 0, -221)], (0)), 100000000, 0, -220), (Tag1 (Tag1 ("using"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Proof_using")), "t"), 0, (0)), 100000000, 0, -219)], (0)), 100000000, 0, -218), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -217), (Tag3 ((("t", 2165)), [((("constr")), 100000000, 0, -216)], (0)), 100000000, 0, -215), 0), 100000000, 0, -214), 0), 100000000, 0, -213), 0), 100000000, 0, -212), 0), 100000000, 0, -211), 0), 100000000, 0, -210), 0), 100000000, 0, -209), 0, (("vernac/declare.mli", 77, 2938, 2940), ("vernac/declare.mli", 84, 3092, 3108), 0), 0, Tag1 ("Declare", 14)), 0); (("to_constr", 2167), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -208), (Tag1 (0, (Tag3 ((("t", 2165)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -207)], (0)), 100000000, 0, -206), (Tag3 ((("t", 2165)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "t"), 0, (0)), 100000000, 0, -205)], (0)), 100000000, 0, -204), 0), 100000000, 0, -203), 0), 100000000, 0, -202), 0, (("vernac/declare.mli", 87, 3176, 3178), ("vernac/declare.mli", 87, 3176, 3235), 0), 0, Tag1 ("Declare", 15)), 0); (("get_typ", 2168), ((Tag1 (0, (Tag3 ((("t", 2165)), [((("constr")), 100000000, 0, -200)], (0)), 100000000, 0, -201), ((("constr")), 100000000, 0, -200), 0), 100000000, 0, -199), 0, (("vernac/declare.mli", 90, 3299, 3301), ("vernac/declare.mli", 90, 3299, 3335), 0), 0, Tag1 ("Declare", 16)), 0)]), 0, (("vernac/declare.mli", 74, 2901, 2901), ("vernac/declare.mli", 92, 3337, 3340), 0), Tag1 ("Declare", 17)), 0, 0); Tag3 (("Info", 2133), 0, (Tag1 ([Tag1 (("t", 2169), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("vernac/declare.mli", 98, 3469, 3471), ("vernac/declare.mli", 98, 3469, 3477), 0), 0, 0, 0, Tag1 ("Declare", 18)), 1, 0); (("make", 2170), ((Tag1 (Tag1 ("poly"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -256)], (0)), 100000000, 0, -255), (Tag1 (Tag1 ("inline"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -254)], (0)), 100000000, 0, -253), (Tag1 (Tag1 ("kind"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Decls")), "logical_kind"), 0, (0)), 100000000, 0, -252)], (0)), 100000000, 0, -251), (Tag1 (Tag1 ("udecl"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("UState")), "universe_decl"), 0, (0)), 100000000, 0, -250)], (0)), 100000000, 0, -249), (Tag1 (Tag1 ("scope"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Locality")), "definition_scope"), 0, (0)), 100000000, 0, -248)], (0)), 100000000, 0, -247), (Tag1 (Tag1 ("clearbody"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -246)], (0)), 100000000, 0, -245), (Tag1 (Tag1 ("hook"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Hook", 2131)), "t"), 0, (0)), 100000000, 0, -244)], (0)), 100000000, 0, -243), (Tag1 (Tag1 ("typing_flags"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Declarations")), "typing_flags"), 0, (0)), 100000000, 0, -242)], (0)), 100000000, 0, -241), (Tag1 (Tag1 ("deprecation"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Deprecation")), "t"), 0, (0)), 100000000, 0, -240)], (0)), 100000000, 0, -239), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -238), (Tag3 ((("t", 2169)), 0, (0)), 100000000, 0, -237), 0), 100000000, 0, -236), 0), 100000000, 0, -235), 0), 100000000, 0, -234), 0), 100000000, 0, -233), 0), 100000000, 0, -232), 0), 100000000, 0, -231), 0), 100000000, 0, -230), 0), 100000000, 0, -229), 0), 100000000, 0, -228), 0), 100000000, 0, -227), 0, (("vernac/declare.mli", 102, 3602, 3604), ("vernac/declare.mli", 116, 4014, 4022), 0), 0, Tag1 ("Declare", 19)), 0)]), 0, (("vernac/declare.mli", 96, 3450, 3450), ("vernac/declare.mli", 118, 4024, 4027), 0), Tag1 ("Declare", 20)), 0, 0); (("declare_definition", 2134), ((Tag1 (("info"), (Tag3 (Tag1 ((("Info", 2133)), "t"), 0, (0)), 100000000, 0, -171), (Tag1 (("cinfo"), (Tag3 (Tag1 ((("CInfo", 2132)), "t"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -170)], (0)), 100000000, 0, -169)], (0)), 100000000, 0, -168), (Tag1 (("opaque"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -167), (Tag1 (("body"), (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -166), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -165), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -164), 0), 100000000, 0, -163), 0), 100000000, 0, -162), 0), 100000000, 0, -161), 0), 100000000, 0, -160), 0), 100000000, 0, -159), 0, (("vernac/declare.mli", 125, 4342, 4342), ("vernac/declare.mli", 131, 4473, 4487), 0), 0, Tag1 ("Declare", 21)), 0); Tag1 (("lemma_possible_guards", 2135), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -158)], (0)), 100000000, 0, -157)], (0)), 100000000, 0, -156)), 0, 0, 0, 0, (("vernac/declare.mli", 133, 4489, 4489), ("vernac/declare.mli", 133, 4489, 4531), 0), 0, 0, 0, Tag1 ("Declare", 22)), 1, 0); (("declare_mutually_recursive", 2136), ((Tag1 (("info"), (Tag3 (Tag1 ((("Info", 2133)), "t"), 0, (0)), 100000000, 0, -155), (Tag1 (("cinfo"), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("CInfo", 2132)), "t"), [(Tag3 (Tag1 ((Tag2 ("Constr")), "t"), 0, (0)), 100000000, 0, -154)], (0)), 100000000, 0, -153)], (0)), 100000000, 0, -152), (Tag1 (("opaque"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -151), (Tag1 (("ntns"), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Metasyntax")), "notation_interpretation_decl"), 0, (0)), 100000000, 0, -150)], (0)), 100000000, 0, -149), (Tag1 (("uctx"), (Tag3 (Tag1 ((Tag2 ("UState")), "t"), 0, (0)), 100000000, 0, -148), (Tag1 (("rec_declaration"), (Tag3 (Tag1 ((Tag2 ("Constr")), "rec_declaration"), 0, (0)), 100000000, 0, -147), (Tag1 (("possible_indexes"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("lemma_possible_guards", 2135)), 0, (0)), 100000000, 0, -146)], (0)), 100000000, 0, -145), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -144)], (0)), 100000000, 0, -143), 0), 100000000, 0, -142), 0), 100000000, 0, -141), 0), 100000000, 0, -140), 0), 100000000, 0, -139), 0), 100000000, 0, -138), 0), 100000000, 0, -137), 0), 100000000, 0, -136), 0, (("vernac/declare.mli", 135, 4533, 4533), ("vernac/declare.mli", 143, 4800, 4825), 0), 0, Tag1 ("Declare", 23)), 0); Tag3 (("OblState", 2137), 0, (Tag1 ([Tag1 (("t", 2171), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("vernac/declare.mli", 151, 5002, 5004), ("vernac/declare.mli", 151, 5002, 5010), 0), 0, 0, 0, Tag1 ("Declare", 24)), 1, 0); (("empty", 2172), ((Tag3 ((("t", 2171)), 0, (0)), 100000000, 0, -261), 0, (("vernac/declare.mli", 152, 5011, 5013), ("vernac/declare.mli", 152, 5011, 5026), 0), 0, Tag1 ("Declare", 25)), 0); Tag3 (("View", 2173), 0, (Tag1 ([Tag3 (("Obl", 2175), 0, (Tag1 ([Tag1 (("t", 2177), (0, 0, [[(("name", 1185), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -266), (("vernac/declare.mli", 157, 5092, 5102), ("vernac/declare.mli", 158, 5114, 5123), 0), 0, Tag1 ("Declare", 28)); (("loc", 1205), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -268)], (0)), 100000000, 0, -267), (("vernac/declare.mli", 158, 5114, 5124), ("vernac/declare.mli", 159, 5143, 5152), 0), 0, Tag1 ("Declare", 29)); (("status", 1213), 0, (Tag2 ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -270); (Tag3 (Tag1 ((Tag2 ("Evar_kinds")), "obligation_definition_status"), 0, (0)), 100000000, 0, -271)]), 100000000, 0, -269), (("vernac/declare.mli", 159, 5143, 5153), ("vernac/declare.mli", 160, 5209, 5218), 0), 0, Tag1 ("Declare", 30)); (("solved", 1214), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -272), (("vernac/declare.mli", 160, 5209, 5219), ("vernac/declare.mli", 160, 5209, 5232), 0), 0, Tag1 ("Declare", 31))]], 0, 0, 0, 0, 0, 0, (("vernac/declare.mli", 156, 5069, 5075), ("vernac/declare.mli", 161, 5233, 5242), 0), 0, 0, 0, Tag1 ("Declare", 26)), 1, 0)]), 0, (("vernac/declare.mli", 155, 5048, 5052), ("vernac/declare.mli", 162, 5243, 5250), 0), Tag1 ("Declare", 32)), 0, 0); Tag1 (("t", 2176), (0, 0, [[(("opaque", 1217), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -262), (("vernac/declare.mli", 165, 5273, 5281), ("vernac/declare.mli", 166, 5295, 5302), 0), 0, Tag1 ("Declare", 34)); (("remaining", 1218), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -263), (("vernac/declare.mli", 166, 5295, 5303), ("vernac/declare.mli", 167, 5319, 5326), 0), 0, Tag1 ("Declare", 35)); (("obligations", 1219), 0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((("Obl", 2175)), "t"), 0, (0)), 100000000, 0, -265)], (0)), 100000000, 0, -264), (("vernac/declare.mli", 167, 5319, 5327), ("vernac/declare.mli", 167, 5319, 5352), 0), 0, Tag1 ("Declare", 36))]], 0, 0, 0, 0, 0, 0, (("vernac/declare.mli", 164, 5252, 5256), ("vernac/declare.mli", 168, 5353, 5360), 0), 0, 0, 0, Tag1 ("Declare", 33)), 1, 0)]), 0, (("vernac/declare.mli", 154, 5028, 5030), ("vernac/declare.mli", 169, 5361, 5366), 0), Tag1 ("Declare", 37)), 0, 0); (("view", 2174), ((Tag1 (0, (Tag3 ((("t", 2171)), 0, (0)), 100000000, 0, -260), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Map"), "t"), [(Tag3 (Tag1 ((("View", 2173)), "t"), 0, (0)), 100000000, 0, -259)], (0)), 100000000, 0, -258), 0), 100000000, 0, -257), 0, (("vernac/declare.mli", 171, 5368, 5370), ("vernac/declare.mli", 171, 5368, 5401), 0), 0, Tag1 ("Declare", 38)), 0)]), 0, (("vernac/declare.mli", 149, 4979, 4979), ("vernac/declare.mli", 173, 5403, 5406), 0), Tag1 ("Declare", 39)), 0, 0); Tag3 (("Proof", 2138), 0, (Tag1 ([Tag1 (("t", 2178), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("vernac/declare.mli", 178, 5505, 5507), ("vernac/declare.mli", 178, 5505, 5513), 0), 0, 0, 0, Tag1 ("Declare", 40)), 1, 0); (("start", 2179), ((Tag1 (("info"), (Tag3 (Tag1 ((("Info", 2133)), "t"), 0, (0)), 100000000, 0, -507), (Tag1 (("cinfo"), (Tag3 (Tag1 ((("CInfo", 2132)), "t"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -506)], (0)), 100000000, 0, -505), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -504), (Tag3 ((("t", 2178)), 0, (0)), 100000000, 0, -503), 0), 100000000, 0, -502), 0), 100000000, 0, -501), 0), 100000000, 0, -500), 0, (("vernac/declare.mli", 183, 5692, 5694), ("vernac/declare.mli", 187, 5774, 5782), 0), 0, Tag1 ("Declare", 41)), 0); (("start_derive", 2180), ((Tag1 (("f"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -499), (Tag1 (("name"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -498), (Tag1 (("info"), (Tag3 (Tag1 ((("Info", 2133)), "t"), 0, (0)), 100000000, 0, -497), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "telescope"), 0, (0)), 100000000, 0, -496), (Tag3 ((("t", 2178)), 0, (0)), 100000000, 0, -495), 0), 100000000, 0, -494), 0), 100000000, 0, -493), 0), 100000000, 0, -492), 0), 100000000, 0, -491), 0, (("vernac/declare.mli", 195, 6178, 6180), ("vernac/declare.mli", 195, 6178, 6261), 0), 0, Tag1 ("Declare", 42)), 0); (("start_equations", 2181), ((Tag1 (("name"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -490), (Tag1 (("info"), (Tag3 (Tag1 ((("Info", 2133)), "t"), 0, (0)), 100000000, 0, -489), (Tag1 (("hook"), (Tag1 (("pm"), (Tag3 (Tag1 ((("OblState", 2137)), "t"), 0, (0)), 100000000, 0, -488), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -487)], (0)), 100000000, 0, -486), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -485), (Tag3 (Tag1 ((("OblState", 2137)), "t"), 0, (0)), 100000000, 0, -484), 0), 100000000, 0, -483), 0), 100000000, 0, -482), 0), 100000000, 0, -481), (Tag1 (("types"), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -475); (Tag3 (Tag1 ((Tag2 ("Evar")), "t"), 0, (0)), 100000000, 0, -476); (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_info"), [(Tag3 (Tag1 ((Tag2 ("Evd")), "undefined"), 0, (0)), 100000000, 0, -478)], (0)), 100000000, 0, -477); (Tag3 (Tag1 ((Tag2 ("EConstr")), "named_context"), 0, (0)), 100000000, 0, -479); (Tag3 (Tag1 ((Tag2 ("Evd")), "econstr"), 0, (0)), 100000000, 0, -480)]), 100000000, 0, -474)], (0)), 100000000, 0, -473), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -472), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "telescope"), 0, (0)), 100000000, 0, -471), (Tag3 ((("t", 2178)), 0, (0)), 100000000, 0, -470), 0), 100000000, 0, -469), 0), 100000000, 0, -468), 0), 100000000, 0, -467), 0), 100000000, 0, -466), 0), 100000000, 0, -465), 0), 100000000, 0, -464), 0, (("vernac/declare.mli", 197, 6263, 6265), ("vernac/declare.mli", 204, 6556, 6564), 0), 0, Tag1 ("Declare", 43)), 0); (("start_with_initialization", 2182), ((Tag1 (("info"), (Tag3 (Tag1 ((("Info", 2133)), "t"), 0, (0)), 100000000, 0, -463), (Tag1 (("cinfo"), (Tag3 (Tag1 ((("CInfo", 2132)), "t"), [(Tag3 (Tag1 ((Tag2 ("Constr")), "t"), 0, (0)), 100000000, 0, -462)], (0)), 100000000, 0, -461), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -460), (Tag3 ((("t", 2178)), 0, (0)), 100000000, 0, -459), 0), 100000000, 0, -458), 0), 100000000, 0, -457), 0), 100000000, 0, -456), 0, (("vernac/declare.mli", 207, 6627, 6629), ("vernac/declare.mli", 211, 6728, 6736), 0), 0, Tag1 ("Declare", 44)), 0); Tag1 (("mutual_info", 2183), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -450); (Tag3 ((("lemma_possible_guards", 2135)), 0, (0)), 100000000, 0, -451); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "t"), 0, (0)), 100000000, 0, -455)], (0)), 100000000, 0, -454)], (0)), 100000000, 0, -453)], (0)), 100000000, 0, -452)]), 100000000, 0, -449)), 0, 0, 0, 0, (("vernac/declare.mli", 213, 6738, 6740), ("vernac/declare.mli", 213, 6738, 6819), 0), 0, 0, 0, Tag1 ("Declare", 45)), 1, 0); (("start_mutual_with_initialization", 2184), ((Tag1 (("info"), (Tag3 (Tag1 ((("Info", 2133)), "t"), 0, (0)), 100000000, 0, -448), (Tag1 (("cinfo"), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("CInfo", 2132)), "t"), [(Tag3 (Tag1 ((Tag2 ("Constr")), "t"), 0, (0)), 100000000, 0, -447)], (0)), 100000000, 0, -446)], (0)), 100000000, 0, -445), (Tag1 (("mutual_info"), (Tag3 ((("mutual_info", 2183)), 0, (0)), 100000000, 0, -444), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -443), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -442)], (0)), 100000000, 0, -441)], (0)), 100000000, 0, -440), (Tag3 ((("t", 2178)), 0, (0)), 100000000, 0, -439), 0), 100000000, 0, -438), 0), 100000000, 0, -437), 0), 100000000, 0, -436), 0), 100000000, 0, -435), 0), 100000000, 0, -434), 0, (("vernac/declare.mli", 216, 6896, 6898), ("vernac/declare.mli", 222, 7063, 7071), 0), 0, Tag1 ("Declare", 46)), 0); (("save", 2185), ((Tag1 (("pm"), (Tag3 (Tag1 ((("OblState", 2137)), "t"), 0, (0)), 100000000, 0, -433), (Tag1 (("proof"), (Tag3 ((("t", 2178)), 0, (0)), 100000000, 0, -432), (Tag1 (("opaque"), (Tag3 (Tag1 ((Tag2 ("Vernacexpr")), "opacity_flag"), 0, (0)), 100000000, 0, -431), (Tag1 (("idopt"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -430)], (0)), 100000000, 0, -429), (Tag2 ([(Tag3 (Tag1 ((("OblState", 2137)), "t"), 0, (0)), 100000000, 0, -426); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -428)], (0)), 100000000, 0, -427)]), 100000000, 0, -425), 0), 100000000, 0, -424), 0), 100000000, 0, -423), 0), 100000000, 0, -422), 0), 100000000, 0, -421), 0, (("vernac/declare.mli", 225, 7095, 7097), ("vernac/declare.mli", 230, 7212, 7246), 0), 0, Tag1 ("Declare", 47)), 0); (("save_regular", 2186), ((Tag1 (("proof"), (Tag3 ((("t", 2178)), 0, (0)), 100000000, 0, -420), (Tag1 (("opaque"), (Tag3 (Tag1 ((Tag2 ("Vernacexpr")), "opacity_flag"), 0, (0)), 100000000, 0, -419), (Tag1 (("idopt"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -418)], (0)), 100000000, 0, -417), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -416)], (0)), 100000000, 0, -415), 0), 100000000, 0, -414), 0), 100000000, 0, -413), 0), 100000000, 0, -412), 0, (("vernac/declare.mli", 233, 7332, 7334), ("vernac/declare.mli", 237, 7436, 7457), 0), 0, Tag1 ("Declare", 48)), 0); (("save_admitted", 2187), ((Tag1 (("pm"), (Tag3 (Tag1 ((("OblState", 2137)), "t"), 0, (0)), 100000000, 0, -411), (Tag1 (("proof"), (Tag3 ((("t", 2178)), 0, (0)), 100000000, 0, -410), (Tag3 (Tag1 ((("OblState", 2137)), "t"), 0, (0)), 100000000, 0, -409), 0), 100000000, 0, -408), 0), 100000000, 0, -407), 0, (("vernac/declare.mli", 240, 7482, 7484), ("vernac/declare.mli", 240, 7482, 7542), 0), 0, Tag1 ("Declare", 49)), 0); (("by", 2188), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -406)], (0)), 100000000, 0, -405), (Tag1 (0, (Tag3 ((("t", 2178)), 0, (0)), 100000000, 0, -404), (Tag2 ([(Tag3 ((("t", 2178)), 0, (0)), 100000000, 0, -402); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -403)]), 100000000, 0, -401), 0), 100000000, 0, -400), 0), 100000000, 0, -399), 0, (("vernac/declare.mli", 245, 7695, 7697), ("vernac/declare.mli", 245, 7695, 7744), 0), 0, Tag1 ("Declare", 50)), 0); (("get", 2189), ((Tag1 (0, (Tag3 ((("t", 2178)), 0, (0)), 100000000, 0, -398), (Tag3 (Tag1 ((Tag2 ("Proof")), "t"), 0, (0)), 100000000, 0, -397), 0), 100000000, 0, -396), 0, (("vernac/declare.mli", 248, 7784, 7786), ("vernac/declare.mli", 248, 7784, 7808), 0), 0, Tag1 ("Declare", 51)), 0); (("get_name", 2190), ((Tag1 (0, (Tag3 ((("t", 2178)), 0, (0)), 100000000, 0, -395), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -394), 0), 100000000, 0, -393), 0, (("vernac/declare.mli", 249, 7809, 7811), ("vernac/declare.mli", 249, 7809, 7841), 0), 0, Tag1 ("Declare", 52)), 0); (("fold", 2191), ((Tag1 (("f"), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proof")), "t"), 0, (0)), 100000000, 0, -392), ((("a")), 100000000, 0, -389), 0), 100000000, 0, -391), (Tag1 (0, (Tag3 ((("t", 2178)), 0, (0)), 100000000, 0, -390), ((("a")), 100000000, 0, -389), 0), 100000000, 0, -388), 0), 100000000, 0, -387), 0, (("vernac/declare.mli", 251, 7843, 7845), ("vernac/declare.mli", 251, 7843, 7884), 0), 0, Tag1 ("Declare", 53)), 0); (("map", 2192), ((Tag1 (("f"), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proof")), "t"), 0, (0)), 100000000, 0, -386), (Tag3 (Tag1 ((Tag2 ("Proof")), "t"), 0, (0)), 100000000, 0, -385), 0), 100000000, 0, -384), (Tag1 (0, (Tag3 ((("t", 2178)), 0, (0)), 100000000, 0, -383), (Tag3 ((("t", 2178)), 0, (0)), 100000000, 0, -382), 0), 100000000, 0, -381), 0), 100000000, 0, -380), 0, (("vernac/declare.mli", 252, 7885, 7887), ("vernac/declare.mli", 252, 7885, 7929), 0), 0, Tag1 ("Declare", 54)), 0); (("map_fold", 2193), ((Tag1 (("f"), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proof")), "t"), 0, (0)), 100000000, 0, -379), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Proof")), "t"), 0, (0)), 100000000, 0, -378); ((("a")), 100000000, 0, -374)]), 100000000, 0, -377), 0), 100000000, 0, -376), (Tag1 (0, (Tag3 ((("t", 2178)), 0, (0)), 100000000, 0, -375), (Tag2 ([(Tag3 ((("t", 2178)), 0, (0)), 100000000, 0, -373); ((("a")), 100000000, 0, -374)]), 100000000, 0, -372), 0), 100000000, 0, -371), 0), 100000000, 0, -370), 0, (("vernac/declare.mli", 253, 7930, 7932), ("vernac/declare.mli", 253, 7930, 7989), 0), 0, Tag1 ("Declare", 55)), 0); (("map_fold_endline", 2194), ((Tag1 (("f"), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -369)], (0)), 100000000, 0, -368), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proof")), "t"), 0, (0)), 100000000, 0, -367), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Proof")), "t"), 0, (0)), 100000000, 0, -366); ((("a")), 100000000, 0, -361)]), 100000000, 0, -365), 0), 100000000, 0, -364), 0), 100000000, 0, -363), (Tag1 (0, (Tag3 ((("t", 2178)), 0, (0)), 100000000, 0, -362), (Tag2 ([(Tag3 ((("t", 2178)), 0, (0)), 100000000, 0, -360); ((("a")), 100000000, 0, -361)]), 100000000, 0, -359), 0), 100000000, 0, -358), 0), 100000000, 0, -357), 0, (("vernac/declare.mli", 254, 7990, 7992), ("vernac/declare.mli", 254, 7990, 8082), 0), 0, Tag1 ("Declare", 56)), 0); (("set_endline_tactic", 2195), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Genarg")), "glob_generic_argument"), 0, (0)), 100000000, 0, -356), (Tag1 (0, (Tag3 ((("t", 2178)), 0, (0)), 100000000, 0, -355), (Tag3 ((("t", 2178)), 0, (0)), 100000000, 0, -354), 0), 100000000, 0, -353), 0), 100000000, 0, -352), 0, (("vernac/declare.mli", 257, 8160, 8162), ("vernac/declare.mli", 257, 8160, 8225), 0), 0, Tag1 ("Declare", 57)), 0); (("set_used_variables", 2196), ((Tag1 (0, (Tag3 ((("t", 2178)), 0, (0)), 100000000, 0, -351), (Tag1 (("using"), (Tag3 (Tag1 ((Tag2 ("Proof_using")), "t"), 0, (0)), 100000000, 0, -350), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constr")), "named_context"), 0, (0)), 100000000, 0, -348); (Tag3 ((("t", 2178)), 0, (0)), 100000000, 0, -349)]), 100000000, 0, -347), 0), 100000000, 0, -346), 0), 100000000, 0, -345), 0, (("vernac/declare.mli", 261, 8363, 8365), ("vernac/declare.mli", 261, 8363, 8442), 0), 0, Tag1 ("Declare", 58)), 0); (("get_used_variables", 2197), ((Tag1 (0, (Tag3 ((("t", 2178)), 0, (0)), 100000000, 0, -344), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Set"), "t"), 0, (0)), 100000000, 0, -343)], (0)), 100000000, 0, -342), 0), 100000000, 0, -341), 0, (("vernac/declare.mli", 265, 8569, 8571), ("vernac/declare.mli", 265, 8569, 8616), 0), 0, Tag1 ("Declare", 59)), 0); (("compact", 2198), ((Tag1 (0, (Tag3 ((("t", 2178)), 0, (0)), 100000000, 0, -340), (Tag3 ((("t", 2178)), 0, (0)), 100000000, 0, -339), 0), 100000000, 0, -338), 0, (("vernac/declare.mli", 269, 8708, 8710), ("vernac/declare.mli", 269, 8708, 8730), 0), 0, Tag1 ("Declare", 60)), 0); (("update_sigma_univs", 2199), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("UGraph")), "t"), 0, (0)), 100000000, 0, -337), (Tag1 (0, (Tag3 ((("t", 2178)), 0, (0)), 100000000, 0, -336), (Tag3 ((("t", 2178)), 0, (0)), 100000000, 0, -335), 0), 100000000, 0, -334), 0), 100000000, 0, -333), 0, (("vernac/declare.mli", 274, 8887, 8889), ("vernac/declare.mli", 274, 8887, 8932), 0), 0, Tag1 ("Declare", 61)), 0); (("get_open_goals", 2200), ((Tag1 (0, (Tag3 ((("t", 2178)), 0, (0)), 100000000, 0, -332), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -331), 0), 100000000, 0, -330), 0, (("vernac/declare.mli", 276, 8934, 8936), ("vernac/declare.mli", 276, 8934, 8965), 0), 0, Tag1 ("Declare", 62)), 0); (("get_goal_context", 2201), ((Tag1 (0, (Tag3 ((("t", 2178)), 0, (0)), 100000000, 0, -329), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -328), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -326); (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -327)]), 100000000, 0, -325), 0), 100000000, 0, -324), 0), 100000000, 0, -323), 0, (("vernac/declare.mli", 284, 9234, 9236), ("vernac/declare.mli", 284, 9234, 9297), 0), 0, Tag1 ("Declare", 63)), 0); (("get_current_goal_context", 2202), ((Tag1 (0, (Tag3 ((("t", 2178)), 0, (0)), 100000000, 0, -322), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -320); (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -321)]), 100000000, 0, -319), 0), 100000000, 0, -318), 0, (("vernac/declare.mli", 287, 9368, 9370), ("vernac/declare.mli", 287, 9368, 9432), 0), 0, Tag1 ("Declare", 64)), 0); (("get_current_context", 2203), ((Tag1 (0, (Tag3 ((("t", 2178)), 0, (0)), 100000000, 0, -317), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -315); (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -316)]), 100000000, 0, -314), 0), 100000000, 0, -313), 0, (("vernac/declare.mli", 294, 9738, 9740), ("vernac/declare.mli", 294, 9738, 9797), 0), 0, Tag1 ("Declare", 65)), 0); Tag1 (("closed_proof_output", 2204), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("vernac/declare.mli", 301, 10048, 10050), ("vernac/declare.mli", 301, 10048, 10074), 0), 0, 0, 0, Tag1 ("Declare", 66)), 1, 0); (("return_proof", 2205), ((Tag1 (0, (Tag3 ((("t", 2178)), 0, (0)), 100000000, 0, -312), (Tag3 ((("closed_proof_output", 2204)), 0, (0)), 100000000, 0, -311), 0), 100000000, 0, -310), 0, (("vernac/declare.mli", 304, 10112, 10114), ("vernac/declare.mli", 304, 10112, 10157), 0), 0, Tag1 ("Declare", 67)), 0); (("return_partial_proof", 2206), ((Tag1 (0, (Tag3 ((("t", 2178)), 0, (0)), 100000000, 0, -309), (Tag3 ((("closed_proof_output", 2204)), 0, (0)), 100000000, 0, -308), 0), 100000000, 0, -307), 0, (("vernac/declare.mli", 308, 10263, 10265), ("vernac/declare.mli", 308, 10263, 10316), 0), 0, Tag1 ("Declare", 68)), 0); Tag1 (("proof_object", 2207), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("vernac/declare.mli", 313, 10477, 10479), ("vernac/declare.mli", 313, 10477, 10496), 0), 0, 0, 0, Tag1 ("Declare", 69)), 1, 0); (("close_proof", 2208), ((Tag1 (("opaque"), (Tag3 (Tag1 ((Tag2 ("Vernacexpr")), "opacity_flag"), 0, (0)), 100000000, 0, -306), (Tag1 (("keep_body_ucst_separate"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -305), (Tag1 (0, (Tag3 ((("t", 2178)), 0, (0)), 100000000, 0, -304), (Tag3 ((("proof_object", 2207)), 0, (0)), 100000000, 0, -303), 0), 100000000, 0, -302), 0), 100000000, 0, -301), 0), 100000000, 0, -300), 0, (("vernac/declare.mli", 315, 10498, 10500), ("vernac/declare.mli", 315, 10498, 10601), 0), 0, Tag1 ("Declare", 70)), 0); (("close_future_proof", 2209), ((Tag1 (("feedback_id"), (Tag3 (Tag1 ((Tag2 ("Stateid")), "t"), 0, (0)), 100000000, 0, -299), (Tag1 (0, (Tag3 ((("t", 2178)), 0, (0)), 100000000, 0, -298), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Future")), "computation"), [(Tag3 ((("closed_proof_output", 2204)), 0, (0)), 100000000, 0, -297)], (0)), 100000000, 0, -296), (Tag3 ((("proof_object", 2207)), 0, (0)), 100000000, 0, -295), 0), 100000000, 0, -294), 0), 100000000, 0, -293), 0), 100000000, 0, -292), 0, (("vernac/declare.mli", 316, 10602, 10604), ("vernac/declare.mli", 316, 10602, 10713), 0), 0, Tag1 ("Declare", 71)), 0); (("save_lemma_admitted_delayed", 2210), ((Tag1 (("pm"), (Tag3 (Tag1 ((("OblState", 2137)), "t"), 0, (0)), 100000000, 0, -291), (Tag1 (("proof"), (Tag3 ((("proof_object", 2207)), 0, (0)), 100000000, 0, -290), (Tag3 (Tag1 ((("OblState", 2137)), "t"), 0, (0)), 100000000, 0, -289), 0), 100000000, 0, -288), 0), 100000000, 0, -287), 0, (("vernac/declare.mli", 320, 10845, 10847), ("vernac/declare.mli", 323, 10928, 10945), 0), 0, Tag1 ("Declare", 72)), 0); (("save_lemma_proved_delayed", 2211), ((Tag1 (("pm"), (Tag3 (Tag1 ((("OblState", 2137)), "t"), 0, (0)), 100000000, 0, -286), (Tag1 (("proof"), (Tag3 ((("proof_object", 2207)), 0, (0)), 100000000, 0, -285), (Tag1 (("idopt"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -284)], (0)), 100000000, 0, -283), (Tag2 ([(Tag3 (Tag1 ((("OblState", 2137)), "t"), 0, (0)), 100000000, 0, -280); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -282)], (0)), 100000000, 0, -281)]), 100000000, 0, -279), 0), 100000000, 0, -278), 0), 100000000, 0, -277), 0), 100000000, 0, -276), 0, (("vernac/declare.mli", 325, 10947, 10949), ("vernac/declare.mli", 329, 11058, 11092), 0), 0, Tag1 ("Declare", 73)), 0); (("get_po_name", 2212), ((Tag1 (0, (Tag3 ((("proof_object", 2207)), 0, (0)), 100000000, 0, -275), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -274), 0), 100000000, 0, -273), 0, (("vernac/declare.mli", 332, 11154, 11156), ("vernac/declare.mli", 332, 11154, 11194), 0), 0, Tag1 ("Declare", 74)), 0)]), 0, (("vernac/declare.mli", 176, 5485, 5485), ("vernac/declare.mli", 334, 11196, 11199), 0), Tag1 ("Declare", 75)), 0, 0); Tag1 (("proof_entry", 2139), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("vernac/declare.mli", 344, 11537, 11537), ("vernac/declare.mli", 344, 11537, 11553), 0), 0, 0, 0, Tag1 ("Declare", 76)), 1, 0); Tag1 (("parameter_entry", 2140), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("vernac/declare.mli", 345, 11554, 11554), ("vernac/declare.mli", 345, 11554, 11574), 0), 0, 0, 0, Tag1 ("Declare", 77)), 1, 0); Tag1 (("primitive_entry", 2141), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("vernac/declare.mli", 346, 11575, 11575), ("vernac/declare.mli", 346, 11575, 11595), 0), 0, 0, 0, Tag1 ("Declare", 78)), 1, 0); (("definition_entry", 2142), ((Tag1 (Tag1 ("opaque"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -135)], (0)), 100000000, 0, -134), (Tag1 (Tag1 ("using"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Set"), "t"), 0, (0)), 100000000, 0, -133)], (0)), 100000000, 0, -132), (Tag1 (Tag1 ("inline"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -131)], (0)), 100000000, 0, -130), (Tag1 (Tag1 ("types"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -129)], (0)), 100000000, 0, -128), (Tag1 (Tag1 ("univs"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("UState")), "named_universes_entry"), 0, (0)), 100000000, 0, -127)], (0)), 100000000, 0, -126), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -125), (Tag3 ((("proof_entry", 2139)), 0, (0)), 100000000, 0, -124), 0), 100000000, 0, -123), 0), 100000000, 0, -122), 0), 100000000, 0, -121), 0), 100000000, 0, -120), 0), 100000000, 0, -119), 0), 100000000, 0, -118), 0, (("vernac/declare.mli", 348, 11597, 11597), ("vernac/declare.mli", 355, 11766, 11782), 0), 0, Tag1 ("Declare", 79)), 0); (("parameter_entry", 2143), ((Tag1 (Tag1 ("inline"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -117)], (0)), 100000000, 0, -116), (Tag1 (Tag1 ("univs"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("UState")), "named_universes_entry"), 0, (0)), 100000000, 0, -115)], (0)), 100000000, 0, -114), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -113), (Tag3 ((("parameter_entry", 2140)), 0, (0)), 100000000, 0, -112), 0), 100000000, 0, -111), 0), 100000000, 0, -110), 0), 100000000, 0, -109), 0, (("vernac/declare.mli", 357, 11784, 11784), ("vernac/declare.mli", 361, 11881, 11901), 0), 0, Tag1 ("Declare", 80)), 0); (("primitive_entry", 2144), ((Tag1 (Tag1 ("types"), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -107); (Tag3 (Tag1 ((Tag2 ("UState")), "named_universes_entry"), 0, (0)), 100000000, 0, -108)]), 100000000, 0, -106)], (0)), 100000000, 0, -105), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("CPrimitives")), "op_or_type"), 0, (0)), 100000000, 0, -104), (Tag3 ((("primitive_entry", 2141)), 0, (0)), 100000000, 0, -103), 0), 100000000, 0, -102), 0), 100000000, 0, -101), 0, (("vernac/declare.mli", 363, 11903, 11903), ("vernac/declare.mli", 366, 12009, 12029), 0), 0, Tag1 ("Declare", 81)), 0); (("declare_entry", 2145), ((Tag1 (("name"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -100), (Tag1 (Tag1 ("scope"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Locality")), "definition_scope"), 0, (0)), 100000000, 0, -99)], (0)), 100000000, 0, -98), (Tag1 (("kind"), (Tag3 (Tag1 ((Tag2 ("Decls")), "logical_kind"), 0, (0)), 100000000, 0, -97), (Tag1 (Tag1 ("deprecation"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Deprecation")), "t"), 0, (0)), 100000000, 0, -96)], (0)), 100000000, 0, -95), (Tag1 (Tag1 ("hook"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Hook", 2131)), "t"), 0, (0)), 100000000, 0, -94)], (0)), 100000000, 0, -93), (Tag1 (("impargs"), (Tag3 (Tag1 ((Tag2 ("Impargs")), "manual_implicits"), 0, (0)), 100000000, 0, -92), (Tag1 (("uctx"), (Tag3 (Tag1 ((Tag2 ("UState")), "t"), 0, (0)), 100000000, 0, -91), (Tag1 (0, (Tag3 ((("proof_entry", 2139)), 0, (0)), 100000000, 0, -90), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -89), 0), 100000000, 0, -88), 0), 100000000, 0, -87), 0), 100000000, 0, -86), 0), 100000000, 0, -85), 0), 100000000, 0, -84), 0), 100000000, 0, -83), 0), 100000000, 0, -82), 0), 100000000, 0, -81), 0, (("vernac/declare.mli", 371, 12184, 12184), ("vernac/declare.mli", 380, 12408, 12422), 0), 0, Tag1 ("Declare", 82)), 0); (("declare_variable", 2146), ((Tag1 (("name"), (Tag3 (Tag1 ((Tag2 ("Names")), "variable"), 0, (0)), 100000000, 0, -80), (Tag1 (("kind"), (Tag3 (Tag1 ((Tag2 ("Decls")), "logical_kind"), 0, (0)), 100000000, 0, -79), (Tag1 (("typ"), (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -78), (Tag1 (("impl"), (Tag3 (Tag1 ((Tag2 ("Glob_term")), "binding_kind"), 0, (0)), 100000000, 0, -77), (Tag1 (("univs"), (Tag3 (Tag1 ((Tag2 ("UState")), "named_universes_entry"), 0, (0)), 100000000, 0, -76), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -75), 0), 100000000, 0, -74), 0), 100000000, 0, -73), 0), 100000000, 0, -72), 0), 100000000, 0, -71), 0), 100000000, 0, -70), 0, (("vernac/declare.mli", 383, 12494, 12494), ("vernac/declare.mli", 389, 12658, 12667), 0), 0, Tag1 ("Declare", 84)), 0); Tag1 (("constant_entry", 2147), (0, 0, Tag1 ([(("DefinitionEntry", 1904), ([(Tag3 ((("proof_entry", 2139)), 0, (0)), 100000000, 0, -67)]), 0, (("vernac/declare.mli", 398, 12929, 12931), ("vernac/declare.mli", 398, 12929, 12963), 0), 0, Tag1 ("Declare", 86)); (("ParameterEntry", 1905), ([(Tag3 ((("parameter_entry", 2140)), 0, (0)), 100000000, 0, -68)]), 0, (("vernac/declare.mli", 399, 12964, 12966), ("vernac/declare.mli", 399, 12964, 13001), 0), 0, Tag1 ("Declare", 87)); (("PrimitiveEntry", 1906), ([(Tag3 ((("primitive_entry", 2141)), 0, (0)), 100000000, 0, -69)]), 0, (("vernac/declare.mli", 400, 13002, 13004), ("vernac/declare.mli", 400, 13002, 13039), 0), 0, Tag1 ("Declare", 88))], 0), 1, 0, 0, 0, 0, 0, (("vernac/declare.mli", 397, 12907, 12907), ("vernac/declare.mli", 400, 13002, 13039), 0), 0, 0, 0, Tag1 ("Declare", 85)), 1, 0); (("prepare_parameter", 2148), ((Tag1 (("poly"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -66), (Tag1 (("udecl"), (Tag3 (Tag1 ((Tag2 ("UState")), "universe_decl"), 0, (0)), 100000000, 0, -65), (Tag1 (("types"), (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -64), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -63), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -61); (Tag3 ((("parameter_entry", 2140)), 0, (0)), 100000000, 0, -62)]), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0), 100000000, 0, -57), 0), 100000000, 0, -56), 0, (("vernac/declare.mli", 402, 13041, 13041), ("vernac/declare.mli", 407, 13152, 13187), 0), 0, Tag1 ("Declare", 89)), 0); (("declare_constant", 2149), ((Tag1 (Tag1 ("local"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Locality")), "import_status"), 0, (0)), 100000000, 0, -55)], (0)), 100000000, 0, -54), (Tag1 (("name"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -53), (Tag1 (("kind"), (Tag3 (Tag1 ((Tag2 ("Decls")), "logical_kind"), 0, (0)), 100000000, 0, -52), (Tag1 (Tag1 ("typing_flags"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Declarations")), "typing_flags"), 0, (0)), 100000000, 0, -51)], (0)), 100000000, 0, -50), (Tag1 (Tag1 ("deprecation"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Deprecation")), "t"), 0, (0)), 100000000, 0, -49)], (0)), 100000000, 0, -48), (Tag1 (0, (Tag3 ((("constant_entry", 2147)), 0, (0)), 100000000, 0, -47), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -46), 0), 100000000, 0, -45), 0), 100000000, 0, -44), 0), 100000000, 0, -43), 0), 100000000, 0, -42), 0), 100000000, 0, -41), 0), 100000000, 0, -40), 0, (("vernac/declare.mli", 416, 13506, 13506), ("vernac/declare.mli", 423, 13704, 13719), 0), 0, Tag1 ("Declare", 90)), 0); (("definition_message", 2150), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -39), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -38), 0), 100000000, 0, -37), 0, (("vernac/declare.mli", 428, 13830, 13830), ("vernac/declare.mli", 428, 13830, 13867), 0), 0, Tag1 ("Declare", 91)), 0); (("assumption_message", 2151), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -36), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -35), 0), 100000000, 0, -34), 0, (("vernac/declare.mli", 429, 13868, 13868), ("vernac/declare.mli", 429, 13868, 13905), 0), 0, Tag1 ("Declare", 92)), 0); (("fixpoint_message", 2152), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -33)], (0)), 100000000, 0, -32)], (0)), 100000000, 0, -31), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -30)], (0)), 100000000, 0, -29), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -28), 0), 100000000, 0, -27), 0), 100000000, 0, -26), 0, (("vernac/declare.mli", 430, 13906, 13906), ("vernac/declare.mli", 430, 13906, 13966), 0), 0, Tag1 ("Declare", 93)), 0); (("check_exists", 2153), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -25), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0, (("vernac/declare.mli", 432, 13968, 13968), ("vernac/declare.mli", 432, 13968, 13999), 0), 0, Tag1 ("Declare", 94)), 0); (("build_by_tactic", 2154), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -22), (Tag1 (("uctx"), (Tag3 (Tag1 ((Tag2 ("UState")), "t"), 0, (0)), 100000000, 0, -21), (Tag1 (("poly"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -20), (Tag1 (("typ"), (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -19), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -18)], (0)), 100000000, 0, -17), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -11); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -13)], (0)), 100000000, 0, -12); (Tag3 (Tag1 ((Tag2 ("UState")), "named_universes_entry"), 0, (0)), 100000000, 0, -14); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -15); (Tag3 (Tag1 ((Tag2 ("UState")), "t"), 0, (0)), 100000000, 0, -16)]), 100000000, 0, -10), 0), 100000000, 0, -9), 0), 100000000, 0, -8), 0), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("vernac/declare.mli", 435, 14067, 14067), ("vernac/declare.mli", 441, 14188, 14279), 0), 0, Tag1 ("Declare", 95)), 0); Tag3 (("Obls", 2155), 0, (Tag1 ([Tag1 (("fixpoint_kind", 2213), (0, 0, Tag1 ([(("IsFixpoint", 1915), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -680)], (0)), 100000000, 0, -679)], (0)), 100000000, 0, -678)]), 0, (("vernac/declare.mli", 495, 16660, 16681), ("vernac/declare.mli", 495, 16660, 16713), 0), 0, Tag1 ("Declare", 97)); (("IsCoFixpoint", 1916), (0), 0, (("vernac/declare.mli", 495, 16660, 16714), ("vernac/declare.mli", 495, 16660, 16728), 0), 0, Tag1 ("Declare", 98))], 0), 1, 0, 0, 0, 0, 0, (("vernac/declare.mli", 495, 16660, 16660), ("vernac/declare.mli", 495, 16660, 16728), 0), 0, 0, 0, Tag1 ("Declare", 96)), 1, 0); (("check_solved_obligations", 2214), ((Tag1 (("pm"), (Tag3 (Tag1 ((("OblState", 2137)), "t"), 0, (0)), 100000000, 0, -677), (Tag1 (("what_for"), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -676), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -675), 0), 100000000, 0, -674), 0), 100000000, 0, -673), 0, (("vernac/declare.mli", 499, 16825, 16825), ("vernac/declare.mli", 499, 16825, 16894), 0), 0, Tag1 ("Declare", 99)), 0); (("default_tactic", 2215), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -672)], (0)), 100000000, 0, -671)], (0)), 100000000, 0, -670), 0, (("vernac/declare.mli", 500, 16895, 16895), ("vernac/declare.mli", 500, 16895, 16941), 0), 0, Tag1 ("Declare", 100)), 0); Tag1 (("progress", 2216), (0, 0, Tag1 ([(("Remain", 1991), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -668)]), 0, (("vernac/declare.mli", 504, 16997, 16999), ("vernac/declare.mli", 504, 16997, 17014), 0), 0, Tag1 ("Declare", 102)); (("Dependent", 1992), (0), 0, (("vernac/declare.mli", 505, 17047, 17049), ("vernac/declare.mli", 505, 17047, 17060), 0), 0, Tag1 ("Declare", 103)); (("Defined", 1993), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -669)]), 0, (("vernac/declare.mli", 506, 17100, 17102), ("vernac/declare.mli", 506, 17100, 17124), 0), 0, Tag1 ("Declare", 104))], 0), 1, 0, 0, 0, 0, 0, (("vernac/declare.mli", 503, 16981, 16981), ("vernac/declare.mli", 506, 17100, 17124), 0), 0, 0, 0, Tag1 ("Declare", 101)), 1, 0); (("prepare_obligation", 2217), ((Tag1 (("name"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -667), (Tag1 (("types"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -666)], (0)), 100000000, 0, -665), (Tag1 (("body"), (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -664), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -663), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -659); (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -660); (Tag3 (Tag1 ((Tag2 ("UState")), "t"), 0, (0)), 100000000, 0, -661); (Tag3 (Tag1 ((Tag2 ("RetrieveObl")), "obligation_info"), 0, (0)), 100000000, 0, -662)]), 100000000, 0, -658), 0), 100000000, 0, -657), 0), 100000000, 0, -656), 0), 100000000, 0, -655), 0), 100000000, 0, -654), 0, (("vernac/declare.mli", 509, 17227, 17227), ("vernac/declare.mli", 514, 17331, 17405), 0), 0, Tag1 ("Declare", 105)), 0); (("add_definition", 2218), ((Tag1 (("pm"), (Tag3 (Tag1 ((("OblState", 2137)), "t"), 0, (0)), 100000000, 0, -653), (Tag1 (("cinfo"), (Tag3 (Tag1 ((("CInfo", 2132)), "t"), [(Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -652)], (0)), 100000000, 0, -651), (Tag1 (("info"), (Tag3 (Tag1 ((("Info", 2133)), "t"), 0, (0)), 100000000, 0, -650), (Tag1 (Tag1 ("obl_hook"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Hook", 2131)), "g"), [(Tag3 (Tag1 ((("OblState", 2137)), "t"), 0, (0)), 100000000, 0, -649)], (0)), 100000000, 0, -648)], (0)), 100000000, 0, -647), (Tag1 (Tag1 ("term"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "t"), 0, (0)), 100000000, 0, -646)], (0)), 100000000, 0, -645), (Tag1 (("uctx"), (Tag3 (Tag1 ((Tag2 ("UState")), "t"), 0, (0)), 100000000, 0, -644), (Tag1 (Tag1 ("tactic"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -643)], (0)), 100000000, 0, -642)], (0)), 100000000, 0, -641), (Tag1 (Tag1 ("reduce"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "t"), 0, (0)), 100000000, 0, -640), (Tag3 (Tag1 ((Tag2 ("Constr")), "t"), 0, (0)), 100000000, 0, -639), 0), 100000000, 0, -638)], (0)), 100000000, 0, -637), (Tag1 (Tag1 ("opaque"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -636)], (0)), 100000000, 0, -635), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("RetrieveObl")), "obligation_info"), 0, (0)), 100000000, 0, -634), (Tag2 ([(Tag3 (Tag1 ((("OblState", 2137)), "t"), 0, (0)), 100000000, 0, -632); (Tag3 ((("progress", 2216)), 0, (0)), 100000000, 0, -633)]), 100000000, 0, -631), 0), 100000000, 0, -630), 0), 100000000, 0, -629), 0), 100000000, 0, -628), 0), 100000000, 0, -627), 0), 100000000, 0, -626), 0), 100000000, 0, -625), 0), 100000000, 0, -624), 0), 100000000, 0, -623), 0), 100000000, 0, -622), 0), 100000000, 0, -621), 0, (("vernac/declare.mli", 521, 17721, 17721), ("vernac/declare.mli", 532, 18005, 18031), 0), 0, Tag1 ("Declare", 106)), 0); (("add_mutual_definitions", 2219), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((("CInfo", 2132)), "t"), [(Tag3 (Tag1 ((Tag2 ("Constr")), "t"), 0, (0)), 100000000, 0, -618)], (0)), 100000000, 0, -617); (Tag3 (Tag1 ((Tag2 ("Constr")), "t"), 0, (0)), 100000000, 0, -619); (Tag3 (Tag1 ((Tag2 ("RetrieveObl")), "obligation_info"), 0, (0)), 100000000, 0, -620)]), 100000000, 0, -616)], (0)), 100000000, 0, -615), (Tag1 (("pm"), (Tag3 (Tag1 ((("OblState", 2137)), "t"), 0, (0)), 100000000, 0, -614), (Tag1 (("info"), (Tag3 (Tag1 ((("Info", 2133)), "t"), 0, (0)), 100000000, 0, -613), (Tag1 (Tag1 ("obl_hook"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Hook", 2131)), "g"), [(Tag3 (Tag1 ((("OblState", 2137)), "t"), 0, (0)), 100000000, 0, -612)], (0)), 100000000, 0, -611)], (0)), 100000000, 0, -610), (Tag1 (("uctx"), (Tag3 (Tag1 ((Tag2 ("UState")), "t"), 0, (0)), 100000000, 0, -609), (Tag1 (Tag1 ("tactic"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -608)], (0)), 100000000, 0, -607)], (0)), 100000000, 0, -606), (Tag1 (Tag1 ("reduce"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "t"), 0, (0)), 100000000, 0, -605), (Tag3 (Tag1 ((Tag2 ("Constr")), "t"), 0, (0)), 100000000, 0, -604), 0), 100000000, 0, -603)], (0)), 100000000, 0, -602), (Tag1 (Tag1 ("opaque"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -601)], (0)), 100000000, 0, -600), (Tag1 (("ntns"), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Metasyntax")), "notation_interpretation_decl"), 0, (0)), 100000000, 0, -599)], (0)), 100000000, 0, -598), (Tag1 (0, (Tag3 ((("fixpoint_kind", 2213)), 0, (0)), 100000000, 0, -597), (Tag3 (Tag1 ((("OblState", 2137)), "t"), 0, (0)), 100000000, 0, -596), 0), 100000000, 0, -595), 0), 100000000, 0, -594), 0), 100000000, 0, -593), 0), 100000000, 0, -592), 0), 100000000, 0, -591), 0), 100000000, 0, -590), 0), 100000000, 0, -589), 0), 100000000, 0, -588), 0), 100000000, 0, -587), 0), 100000000, 0, -586), 0, (("vernac/declare.mli", 538, 18168, 18168), ("vernac/declare.mli", 549, 18519, 18534), 0), 0, Tag1 ("Declare", 107)), 0); (("obligation", 2220), ((Tag1 (0, (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -581); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -583)], (0)), 100000000, 0, -582); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -585)], (0)), 100000000, 0, -584)]), 100000000, 0, -580), (Tag1 (("pm"), (Tag3 (Tag1 ((("OblState", 2137)), "t"), 0, (0)), 100000000, 0, -579), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Genarg")), "glob_generic_argument"), 0, (0)), 100000000, 0, -578)], (0)), 100000000, 0, -577), (Tag3 (Tag1 ((("Proof", 2138)), "t"), 0, (0)), 100000000, 0, -576), 0), 100000000, 0, -575), 0), 100000000, 0, -574), 0), 100000000, 0, -573), 0, (("vernac/declare.mli", 552, 18586, 18586), ("vernac/declare.mli", 556, 18724, 18736), 0), 0, Tag1 ("Declare", 108)), 0); (("next_obligation", 2221), ((Tag1 (("pm"), (Tag3 (Tag1 ((("OblState", 2137)), "t"), 0, (0)), 100000000, 0, -572), (Tag1 (Tag1 ("final"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -571)], (0)), 100000000, 0, -570), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -569)], (0)), 100000000, 0, -568), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Genarg")), "glob_generic_argument"), 0, (0)), 100000000, 0, -567)], (0)), 100000000, 0, -566), (Tag3 (Tag1 ((("Proof", 2138)), "t"), 0, (0)), 100000000, 0, -565), 0), 100000000, 0, -564), 0), 100000000, 0, -563), 0), 100000000, 0, -562), 0), 100000000, 0, -561), 0, (("vernac/declare.mli", 559, 18817, 18817), ("vernac/declare.mli", 560, 18839, 18940), 0), 0, Tag1 ("Declare", 109)), 0); (("solve_obligations", 2222), ((Tag1 (("pm"), (Tag3 (Tag1 ((("OblState", 2137)), "t"), 0, (0)), 100000000, 0, -560), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -559)], (0)), 100000000, 0, -558), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -557)], (0)), 100000000, 0, -556)], (0)), 100000000, 0, -555), (Tag2 ([(Tag3 (Tag1 ((("OblState", 2137)), "t"), 0, (0)), 100000000, 0, -553); (Tag3 ((("progress", 2216)), 0, (0)), 100000000, 0, -554)]), 100000000, 0, -552), 0), 100000000, 0, -551), 0), 100000000, 0, -550), 0), 100000000, 0, -549), 0, (("vernac/declare.mli", 563, 18998, 18998), ("vernac/declare.mli", 564, 19022, 19115), 0), 0, Tag1 ("Declare", 110)), 0); (("solve_all_obligations", 2223), ((Tag1 (("pm"), (Tag3 (Tag1 ((("OblState", 2137)), "t"), 0, (0)), 100000000, 0, -548), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -547)], (0)), 100000000, 0, -546)], (0)), 100000000, 0, -545), (Tag3 (Tag1 ((("OblState", 2137)), "t"), 0, (0)), 100000000, 0, -544), 0), 100000000, 0, -543), 0), 100000000, 0, -542), 0, (("vernac/declare.mli", 566, 19117, 19117), ("vernac/declare.mli", 566, 19117, 19204), 0), 0, Tag1 ("Declare", 111)), 0); (("try_solve_obligations", 2224), ((Tag1 (("pm"), (Tag3 (Tag1 ((("OblState", 2137)), "t"), 0, (0)), 100000000, 0, -541), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -540)], (0)), 100000000, 0, -539), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -538)], (0)), 100000000, 0, -537)], (0)), 100000000, 0, -536), (Tag3 (Tag1 ((("OblState", 2137)), "t"), 0, (0)), 100000000, 0, -535), 0), 100000000, 0, -534), 0), 100000000, 0, -533), 0), 100000000, 0, -532), 0, (("vernac/declare.mli", 568, 19206, 19206), ("vernac/declare.mli", 569, 19234, 19316), 0), 0, Tag1 ("Declare", 112)), 0); (("show_obligations", 2225), ((Tag1 (("pm"), (Tag3 (Tag1 ((("OblState", 2137)), "t"), 0, (0)), 100000000, 0, -531), (Tag1 (Tag1 ("msg"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -530)], (0)), 100000000, 0, -529), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -528)], (0)), 100000000, 0, -527), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -526), 0), 100000000, 0, -525), 0), 100000000, 0, -524), 0), 100000000, 0, -523), 0, (("vernac/declare.mli", 571, 19318, 19318), ("vernac/declare.mli", 571, 19318, 19396), 0), 0, Tag1 ("Declare", 113)), 0); (("show_term", 2226), ((Tag1 (("pm"), (Tag3 (Tag1 ((("OblState", 2137)), "t"), 0, (0)), 100000000, 0, -522), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -521)], (0)), 100000000, 0, -520), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -519), 0), 100000000, 0, -518), 0), 100000000, 0, -517), 0, (("vernac/declare.mli", 572, 19397, 19397), ("vernac/declare.mli", 572, 19397, 19455), 0), 0, Tag1 ("Declare", 114)), 0); (("admit_obligations", 2227), ((Tag1 (("pm"), (Tag3 (Tag1 ((("OblState", 2137)), "t"), 0, (0)), 100000000, 0, -516), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -515)], (0)), 100000000, 0, -514), (Tag3 (Tag1 ((("OblState", 2137)), "t"), 0, (0)), 100000000, 0, -513), 0), 100000000, 0, -512), 0), 100000000, 0, -511), 0, (("vernac/declare.mli", 573, 19456, 19456), ("vernac/declare.mli", 573, 19456, 19528), 0), 0, Tag1 ("Declare", 115)), 0); (("check_program_libraries", 2228), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -510), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -509), 0), 100000000, 0, -508), 0, (("vernac/declare.mli", 575, 19530, 19530), ("vernac/declare.mli", 575, 19530, 19572), 0), 0, Tag1 ("Declare", 116)), 0)]), 0, (("vernac/declare.mli", 493, 16641, 16641), ("vernac/declare.mli", 577, 19574, 19577), 0), Tag1 ("Declare", 117)), 0, 0); (("is_local_constant", 2156), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("vernac/declare.mli", 579, 19579, 19579), ("vernac/declare.mli", 579, 19579, 19621), 0), 0, Tag1 ("Declare", 118)), 0); Tag3 (("Internal", 2157), 0, (Tag1 ([Tag3 (("Constant", 2229), 0, (Tag1 ([Tag1 (("t", 2232), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("vernac/declare.mli", 587, 19741, 19745), ("vernac/declare.mli", 587, 19741, 19751), 0), 0, 0, 0, Tag1 ("Declare", 119)), 1, 0); (("tag", 2233), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Libobject")), "Dyn"), "tag"), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -691); (Tag3 ((("t", 2232)), 0, (0)), 100000000, 0, -692)]), 100000000, 0, -690)], (0)), 100000000, 0, -689), 0, (("vernac/declare.mli", 588, 19752, 19756), ("vernac/declare.mli", 588, 19752, 19794), 0), 0, Tag1 ("Declare", 121)), 0); (("kind", 2234), ((Tag1 (0, (Tag3 ((("t", 2232)), 0, (0)), 100000000, 0, -688), (Tag3 (Tag1 ((Tag2 ("Decls")), "logical_kind"), 0, (0)), 100000000, 0, -687), 0), 100000000, 0, -686), 0, (("vernac/declare.mli", 589, 19795, 19799), ("vernac/declare.mli", 589, 19795, 19833), 0), 0, Tag1 ("Declare", 122)), 0)]), 0, (("vernac/declare.mli", 586, 19717, 19719), ("vernac/declare.mli", 590, 19834, 19839), 0), Tag1 ("Declare", 123)), 0, 0); (("objVariable", 2230), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Libobject")), "Dyn"), "tag"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -685)], (0)), 100000000, 0, -684), 0, (("vernac/declare.mli", 592, 19841, 19843), ("vernac/declare.mli", 592, 19841, 19883), 0), 0, Tag1 ("Declare", 124)), 0); (("export_side_effects", 2231), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "side_effects"), 0, (0)), 100000000, 0, -683), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -682), 0), 100000000, 0, -681), 0, (("vernac/declare.mli", 598, 20139, 20141), ("vernac/declare.mli", 598, 20139, 20191), 0), 0, Tag1 ("Declare", 125)), 0)]), 0, (("vernac/declare.mli", 583, 19669, 19669), ("vernac/declare.mli", 600, 20193, 20196), 0), Tag1 ("Declare", 126)), 0, 0)], "Declare", [("Declare", ("\ndh\139\180\185\245\190\133\240\127A\190b\197\023")); ("Z", ("\253\196\2168\027\199O\134\220\218\031'\1484\233o")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Vernacexpr", ("Lu|g\028\024j\193\000\234\175\209&\211]\137")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Unix", (":B72R\011\005Sj\189)\011\239PH\254")); ("UnivSubst", ("\190qu\031mc\130\181\003G]\132\"\219m)")); ("UnivProblem", ("6'\161\018\181\001.\253\000\141a6\171\1727\155")); ("UnivNames", ("%\151_\209%+JM$n\001\232\194n\178N")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Unification", ("\017\027\157=\255\1914L\020\213h\154.\219\005\170")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UState", ("SD\203\215|\136\n\251\239\208\148\215C\n\167\005")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("Typeclasses", ("KO\1297x\192\210\231\001\1824l\135\192\160|")); ("Type_errors", ("7\157\162-\214M\206\196\228\191\005v\134\177\144\134")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Tactypes", ("\143E\135*\195\151\144H\151M\011($\017\159\203")); ("Tacred", ("\133d\143\1310z\030\237\232\002\001\025\147\140\215:")); ("Summary", ("\148G\135\226\024L3\246\021\028U\146\164`\253\250")); ("Store", ("/dT\252\145\179pq\216{\181\206\190K+U")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Random", ("\020\005Xq\171\026\218\152X\135\254\023\133zK\200")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Stateid", ("\183\165\247\166~\005\017.\179f.\178n\255(\137")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Section", ("\245\207\b\021\142v=\155#w\246}\"4b\006")); ("Safe_typing", (")\250?\164\145\132\241\127\186\152h+\145\"\237l")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("RetrieveObl", ("\181(\0225\214z\024#d\246.M\015.i\210")); ("Reductionops", ("\179\023P\218\146Uh\014IS\196C\031q~#")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Proofview_monad", ("\218\196\189S\147\216\129\221\231\224v\228O\024*\239")); ("Proofview", ("\245\140U\027\236\199\199&\242\156\199YG\250tA")); ("Proof_using", ("\015\162\022\031Y\152\208\231;\015\140;\163\177\251\196")); ("Proof_bullet", ("\249\179=\253g\211\149\212\t\217_0\179\197k\179")); ("Proof", ("\249\030\200g\248\164o&\tS\132\rTl\1736")); ("Primred", ("\158G\192\182\224\196\144*\174y_E\165\012\137C")); ("Pretyping", ("\151\160\191\149\149Ff\195\171g\189\156\r\166n\189")); ("Pretype_errors", ("\155\229\201\176\163\234\203C\127\227\141\174j\199\200H")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Pattern", ("\195C\140Wb=\022\222\208\227^K\003\020\215X")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("NumTok", ("vd\023^\251\244B\166\145'\156\196-0\027\169")); ("Notationextern", ("\000\022b5`t\134]\192f4\131\187\192\152\160")); ("Notation_term", ("5\002\017\217b\193nc>\239\239\237\244\031\173?")); ("Notation", ("\243\219),\220\160v\230\t$\246\188\252\172\152\147")); ("Nativevalues", ("8:\007\025e\226c,\001\171\146#l\210\171\152")); ("Nativelib", ("V\239\205Y1\147E:,\176\196Hy\1483|")); ("Nativecode", ("\190\185\255\006m\012\210\163\138Rz\247\15283\183")); ("Nametab", ("1\018\163\254\225\2178\025DI\0271Q\198\134\140")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Namegen", ("\187\222\224T\255\020\1808-\212*\164\131\177\157x")); ("Monad", ("\244\171T\157\194p\187\160\149\195{\132\222\020\253\148")); ("Modintern", ("F\222V\246R\143{\n\240\004;;;\011\026\223")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Metasyntax", ("\177D\147\n?i\139\193\238 \018\030)\\\244\\")); ("Ltac_pretype", ("\224\"\167\018i:U\172>\188\128$\r\252\020T")); ("Logic_monad", ("\130\157\160Q\163vQ\137\184\2242\209\128\024\220i")); ("Locus", ("_\002\003W\246\181\225\242Uf\139\226\176\174\192I")); ("Locality", ("\204\134r\227\235'\016\197\215r\210\133\242\226U%")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Libobject", ("\132}t\226hl\213L\210\172\167pc\012~\129")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Lib", ("8\018\021\210\020\136$\149\164=\007\002\218\026RX")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Impargs", ("\021\197\1992>\rm\185\141\"iHY\133\138/")); ("Hook", ("\183\194\223\003\155\169',\187\240a;E\b\1396")); ("Hints", ("\007\130]H\\t(\131\000}\205\137H\148\250\166")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Gramlib__Stream", ("\248\\H\205_76\253\136\146\200\031\165\021=t")); ("Gramlib__Gramext", ("B\171oA\172\212\187>\175\233Q\145\"\176TM")); ("Gramlib", ("\154\143\210e\021i\246\176\224\194\220\217\007\145\139A")); ("Goptions", ("i>Rt=\183g\153\190\144\235u\248\247*e")); ("Goal_select", ("\235$\175\023t\178\194.Ivlz\005\211\173\n")); ("Globnames", ("W\004\172T\214\181H\220\232\160LSW\006\130\226")); ("Glob_term", ("\165=a\227\160\153.\021_$\232\209T\236\153O")); ("GlobEnv", ("(\152\019ok\006R\183\193\145\137\133<\171\005\231")); ("Genredexpr", ("rz\204\143\007`VgI\195P\168sO\198\012")); ("Genlambda", ("\170}\024\241\141\222\136S\169\219\2212i\134KI")); ("Geninterp", ("2S\151\191\189\159\004\188;\224d\199|U\004\028")); ("Genintern", ("\152Ac\019=n\235\197\141\224T\162\192\148eg")); ("Genarg", ("\1434\015\001\152\196\005s\156\136\195\185\247\b3\t")); ("Future", ("\158b\028\190\203\016U\128\195O\140\249\240\129\252s")); ("Ftactic", ("K\172\205\128\241\162\160\201\202\1561o\180L\206:")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Extend", ("\179&!W\163V\006\245\018\168\021\001\224s\168\234")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evd", ("\211\205p\193\216\129r\006\239oN\142ar\196\175")); ("Evarutil", ("\005\175\132e\164O\223svi \252\232\138\022\137")); ("Evarsolve", ("\000&\228\016}j\199\t\229\173\127\024\219\199\184\178")); ("Evardefine", ("\178\167R\199\158\242\001Y\215<\151\020\206\153\227\019")); ("Evar_kinds", ("\023L\186\132\218}\254\221\185\198\220\200h\003{\021")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Entries", ("\172\201\198\221Ap\027_{\174\141C\021\";p")); ("EConstr", ("\201aW\156\157;N\004\201V\208\006L\166\211)")); ("Dyn", ("\131z`\205v\2306\007x\027&K.?;\169")); ("Deprecation", ("\226:\146\245\190;\1929\254@\247a\218\244\134\189")); ("Decls", ("\140C{$\142?\215\153\180\186h;\153\139\187\129")); ("Declaremods", ("\019d|\168<\144\239o\017\222\248K^\157\198\179")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("DAst", ("\224/\200)\007\184ni\134\b\139\204\241\005w\212")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conversion", ("\158\150&\195M\tv\127|\029\158RRK\211A")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constrintern", ("\221\031i\248\218\212\161/UQA\147\1348GM")); ("Constrexpr", ("p'r\245\184chL\183\249\"\213]\1741\237")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("Coercionops", ("\238\240\220\191\201\bMazv\159\227\236?\147>")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CWarnings", ("\132\220\150\227\215\239t\217\132\220'JX\188\246c")); ("CUnix", ("\140Zl\153\167\011J\015\005|th\247OTu")); ("CString", ("\243~4C\023~\169\148x\206\165\207\195\177Q\184")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CDebug", ("^4\210p7\239!3\138\138\213?\239`\250\157")); ("CClosure", ("\167\b\022\241V-\r\253\b\002\000j]\223%\142")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("Attributes", ("\2145\146P\224\163B1\135\232\204SD\129^\141")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])

  end

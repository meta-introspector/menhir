type context = Signature of Module.signature | In_namespace of Module.dict
type module_provider =
    Uloc.t -> Name.t -> Module.t Transforms.query_result option
module Core :
  sig
    type t
    val eq : t -> t -> bool
    val find :
      Uloc.t ->
      ?edge:Deps.Edge.t ->
      Module.level ->
      Paths.Simple.t -> t -> Transforms.answer Transforms.query_result
    val find_within :
      Module.signature ->
      Uloc.t ->
      ?edge:Deps.Edge.t ->
      Module.level ->
      Paths.Simple.t -> t -> Transforms.answer Transforms.query_result
    val extend : t -> Summary.t -> t
    val is_exterior : Paths.Simple.t -> t -> bool
    val resolve_alias : Paths.Simple.t -> t -> Namespaced.t option
    val expand_path : Paths.Simple.t -> t -> Paths.Simple.t
    val add_unit : t -> ?namespace:Paths.S.t -> Name.t -> Module.t -> t
    val add_namespace : t -> Namespaced.t -> t
    val pp : Format.formatter -> t -> unit
    val empty : t
    val start : Module.definition -> t
  end
val libs : Name.t list -> module_provider
val open_world : unit -> module_provider
val start :
  ?open_approximation:bool ->
  libs:Paths.S.t ->
  namespace:Namespaced.t list ->
  ("DEBUG:rule", [Tag1 (("context", 489), (0, 0, Tag1 ([(("Signature", 270), ([(Tag3 (Tag1 ((Tag2 ("Module")), "signature"), 0, (0)), 100000000, 0, -32)]), 0, (("lib/envt.mli", 2, 15, 17), ("lib/envt.mli", 2, 15, 48), 0), 0, Tag1 ("Envt", 3)); (("In_namespace", 314), ([(Tag3 (Tag1 ((Tag2 ("Module")), "dict"), 0, (0)), 100000000, 0, -33)]), 0, (("lib/envt.mli", 3, 49, 51), ("lib/envt.mli", 3, 49, 80), 0), 0, Tag1 ("Envt", 4))], 0), 1, 0, 0, 0, 0, 0, (("lib/envt.mli", 1, 0, 0), ("lib/envt.mli", 3, 49, 80), 0), 0, 0, 0, Tag1 ("Envt", 0)), 1, 0); Tag1 (("module_provider", 490), (0, 0, 0, 1, ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Uloc")), "t"), 0, (0)), 100000000, 0, -31), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Name")), "t"), 0, (0)), 100000000, 0, -30), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Transforms")), "query_result"), [(Tag3 (Tag1 ((Tag2 ("Module")), "t"), 0, (0)), 100000000, 0, -29)], (0)), 100000000, 0, -28)], (0)), 100000000, 0, -27), 0), 100000000, 0, -26), 0), 100000000, 0, -25)), 0, 0, 0, 0, (("lib/envt.mli", 5, 82, 82), ("lib/envt.mli", 5, 82, 164), 0), 0, 0, 0, Tag1 ("Envt", 5)), 1, 0); Tag3 (("Core", 491), 0, (Tag1 ([Tag1 (("t", 495), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("lib/envt.mli", 9, 184, 186), ("lib/envt.mli", 9, 184, 192), 0), 0, 0, 0, Tag1 ("Envt", 6)), 1, 0); (("eq", 496), ((Tag1 (0, (Tag3 ((("t", 495)), 0, (0)), 100000000, 0, -111), (Tag1 (0, (Tag3 ((("t", 495)), 0, (0)), 100000000, 0, -110), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -109), 0), 100000000, 0, -108), 0), 100000000, 0, -107), 0, (("lib/envt.mli", 10, 193, 203), ("lib/envt.mli", 10, 193, 230), 0), 0, Tag1 ("Stage", 1)), 0); (("find", 497), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Uloc")), "t"), 0, (0)), 100000000, 0, -106), (Tag1 (Tag1 ("edge"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Deps")), "Edge"), "t"), 0, (0)), 100000000, 0, -105)], (0)), 100000000, 0, -104), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Module")), "level"), 0, (0)), 100000000, 0, -103), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Paths")), "Simple"), "t"), 0, (0)), 100000000, 0, -102), (Tag1 (0, (Tag3 ((("t", 495)), 0, (0)), 100000000, 0, -101), (Tag3 (Tag1 ((Tag2 ("Transforms")), "query_result"), [(Tag3 (Tag1 ((Tag2 ("Transforms")), "answer"), 0, (0)), 100000000, 0, -100)], (0)), 100000000, 0, -99), 0), 100000000, 0, -98), 0), 100000000, 0, -97), 0), 100000000, 0, -96), 0), 100000000, 0, -95), 0), 100000000, 0, -94), 0, (("lib/envt.mli", 10, 193, 203), ("lib/envt.mli", 10, 193, 230), 0), 0, Tag1 ("Stage", 4)), 0); (("find_within", 498), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Module")), "signature"), 0, (0)), 100000000, 0, -93), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Uloc")), "t"), 0, (0)), 100000000, 0, -92), (Tag1 (Tag1 ("edge"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Deps")), "Edge"), "t"), 0, (0)), 100000000, 0, -91)], (0)), 100000000, 0, -90), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Module")), "level"), 0, (0)), 100000000, 0, -89), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Paths")), "Simple"), "t"), 0, (0)), 100000000, 0, -88), (Tag1 (0, (Tag3 ((("t", 495)), 0, (0)), 100000000, 0, -87), (Tag3 (Tag1 ((Tag2 ("Transforms")), "query_result"), [(Tag3 (Tag1 ((Tag2 ("Transforms")), "answer"), 0, (0)), 100000000, 0, -86)], (0)), 100000000, 0, -85), 0), 100000000, 0, -84), 0), 100000000, 0, -83), 0), 100000000, 0, -82), 0), 100000000, 0, -81), 0), 100000000, 0, -80), 0), 100000000, 0, -79), 0, (("lib/envt.mli", 10, 193, 203), ("lib/envt.mli", 10, 193, 230), 0), 0, Tag1 ("Stage", 5)), 0); (("extend", 499), ((Tag1 (0, (Tag3 ((("t", 495)), 0, (0)), 100000000, 0, -78), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Summary")), "t"), 0, (0)), 100000000, 0, -77), (Tag3 ((("t", 495)), 0, (0)), 100000000, 0, -76), 0), 100000000, 0, -75), 0), 100000000, 0, -74), 0, (("lib/envt.mli", 10, 193, 203), ("lib/envt.mli", 10, 193, 230), 0), 0, Tag1 ("Stage", 6)), 0); (("is_exterior", 500), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Paths")), "Simple"), "t"), 0, (0)), 100000000, 0, -73), (Tag1 (0, (Tag3 ((("t", 495)), 0, (0)), 100000000, 0, -72), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -71), 0), 100000000, 0, -70), 0), 100000000, 0, -69), 0, (("lib/envt.mli", 10, 193, 203), ("lib/envt.mli", 10, 193, 230), 0), 0, Tag1 ("Stage", 7)), 0); (("resolve_alias", 501), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Paths")), "Simple"), "t"), 0, (0)), 100000000, 0, -68), (Tag1 (0, (Tag3 ((("t", 495)), 0, (0)), 100000000, 0, -67), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Namespaced")), "t"), 0, (0)), 100000000, 0, -66)], (0)), 100000000, 0, -65), 0), 100000000, 0, -64), 0), 100000000, 0, -63), 0, (("lib/envt.mli", 10, 193, 203), ("lib/envt.mli", 10, 193, 230), 0), 0, Tag1 ("Stage", 8)), 0); (("expand_path", 502), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Paths")), "Simple"), "t"), 0, (0)), 100000000, 0, -62), (Tag1 (0, (Tag3 ((("t", 495)), 0, (0)), 100000000, 0, -61), (Tag3 (Tag1 (Tag1 ((Tag2 ("Paths")), "Simple"), "t"), 0, (0)), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0, (("lib/envt.mli", 10, 193, 203), ("lib/envt.mli", 10, 193, 230), 0), 0, Tag1 ("Stage", 9)), 0); (("add_unit", 503), ((Tag1 (0, (Tag3 ((("t", 495)), 0, (0)), 100000000, 0, -57), (Tag1 (Tag1 ("namespace"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Paths")), "S"), "t"), 0, (0)), 100000000, 0, -56)], (0)), 100000000, 0, -55), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Name")), "t"), 0, (0)), 100000000, 0, -54), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Module")), "t"), 0, (0)), 100000000, 0, -53), (Tag3 ((("t", 495)), 0, (0)), 100000000, 0, -52), 0), 100000000, 0, -51), 0), 100000000, 0, -50), 0), 100000000, 0, -49), 0), 100000000, 0, -48), 0, (("lib/envt.mli", 10, 193, 203), ("lib/envt.mli", 10, 193, 230), 0), 0, Tag1 ("Stage", 10)), 0); (("add_namespace", 504), ((Tag1 (0, (Tag3 ((("t", 495)), 0, (0)), 100000000, 0, -47), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Namespaced")), "t"), 0, (0)), 100000000, 0, -46), (Tag3 ((("t", 495)), 0, (0)), 100000000, 0, -45), 0), 100000000, 0, -44), 0), 100000000, 0, -43), 0, (("lib/envt.mli", 10, 193, 203), ("lib/envt.mli", 10, 193, 230), 0), 0, Tag1 ("Stage", 11)), 0); (("pp", 505), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -42), (Tag1 (0, (Tag3 ((("t", 495)), 0, (0)), 100000000, 0, -41), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -40), 0), 100000000, 0, -39), 0), 100000000, 0, -38), 0, (("lib/envt.mli", 10, 193, 203), ("lib/envt.mli", 10, 193, 230), 0), 0, Tag1 ("Stage", 12)), 0); (("empty", 506), ((Tag3 ((("t", 495)), 0, (0)), 100000000, 0, -37), 0, (("lib/envt.mli", 11, 231, 233), ("lib/envt.mli", 11, 231, 245), 0), 0, Tag1 ("Envt", 8)), 0); (("start", 507), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Module")), "definition"), 0, (0)), 100000000, 0, -36), (Tag3 ((("t", 495)), 0, (0)), 100000000, 0, -35), 0), 100000000, 0, -34), 0, (("lib/envt.mli", 12, 246, 248), ("lib/envt.mli", 12, 246, 281), 0), 0, Tag1 ("Envt", 9)), 0)]), 0, (("lib/envt.mli", 7, 166, 166), ("lib/envt.mli", 13, 282, 285), 0), Tag1 ("Envt", 10)), 0, 0); (("libs", 492), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Name")), "t"), 0, (0)), 100000000, 0, -24)], (0)), 100000000, 0, -23), (Tag3 ((("module_provider", 490)), 0, (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("lib/envt.mli", 15, 287, 287), ("lib/envt.mli", 15, 287, 327), 0), 0, Tag1 ("Envt", 11)), 0); (("open_world", 493), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -20), (Tag3 ((("module_provider", 490)), 0, (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0, (("lib/envt.mli", 16, 328, 328), ("lib/envt.mli", 16, 328, 367), 0), 0, Tag1 ("Envt", 12)), 0); (("start", 494), ((Tag1 (Tag1 ("open_approximation"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -17)], (0)), 100000000, 0, -16), (Tag1 (("libs"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Paths")), "S"), "t"), 0, (0)), 100000000, 0, -15), (Tag1 (("namespace"), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Namespaced")), "t"), 0, (0)), 100000000, 0, -14)], (0)), 100000000, 0, -13), (Tag1 (("implicits"), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Paths")), "S"), "t"), 0, (0)), 100000000, 0, -11); (Tag3 (Tag1 (Tag1 ((Tag2 ("Module")), "Dict"), "t"), 0, (0)), 100000000, 0, -12)]), 100000000, 0, -10)], (0)), 100000000, 0, -9), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Module")), "Dict"), "t"), 0, (0)), 100000000, 0, -8), (Tag3 (Tag1 ((("Core", 491)), "t"), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("lib/envt.mli", 18, 369, 369), ("lib/envt.mli", 23, 509, 537), 0), 0, Tag1 ("Envt", 13)), 0)], "Envt", [("Envt", ("\183T\138'\2216\160\255\178\197\172\129\208\203\029\018")); ("Unitname", ("\155n\201\211\249\229\028$\220J\172\018<\249\171\158")); ("Uloc", ("\172\208h 6@\178[\156\249\206\172%\133\167\239")); ("Transforms", ("\247\177\132M&\202\192\164\018Ng6Wu\007\018")); ("Support", ("YA;\029\006a\255\202R\137\181\133\184\209)\005")); ("Summary", ("\243\022s.\187>\205\012\161)\1369wh\247p")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Stage", ("\224\018\196\1757\168\209wr\235\232\015z\144\206V")); ("Schematic", ("\180\179\011\178\017I\241^\235\149h\161k\b\209\142")); ("Pp", ("\167zCQ\134\167\215\2517\247\158\219\250\223.\197")); ("Pkg", ("SneaP\023\210\210\240\218\128bA\te\239")); ("Paths", ("\000\152\242H\139l\222\245\245Ndb\202P^\175")); ("Namespaced", ("%\208\253;3\161W$\236\1838K\195z\1493")); ("Name", ("4? \167\131n\184\000\214\031\017\027\153\002]^")); ("Module", ("2_s\200\188\137\247\158>\168\195\023\195\n\011V")); ("Modname", ("v\160\183\003\212\232\177\007\228-\002\145i\230\255\248")); ("M2l", ("\208\241\201a\199\212\172v;\135t\185\027\196~\029")); ("Loc", ("ax\213\152\006\175?\212%\0014\238\021S\218=")); ("Id", ("w\207`(\179n\181\161\155\252\243\195\006\139NO")); ("Fault", ("\232\144\144(K\139\181-h!\017\212@?\127\199")); ("Deps", ("%\164\252&\165z\218\221\023\182\235\223+\147\145\195")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
implicits:(Paths.S.t * Module.Dict.t) list -> Module.Dict.t -> Core.t

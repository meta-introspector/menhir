module Line :
  sig
    type 'a not_blank = {
      trailing_blanks : Base.string;
      orig : Base.string;
      data : 'a;
    }
    val sexp_of_not_blank :
      ('a -> Sexplib0.Sexp.t) -> 'a not_blank -> Sexplib0.Sexp.t
    val compare_not_blank :
      ('a -> 'a -> Base.int) -> 'a not_blank -> 'a not_blank -> Base.int
    val equal_not_blank :
      ('a -> 'a -> Base.bool) -> 'a not_blank -> 'a not_blank -> Base.bool
    type 'a t =
        Blank of Base.string
      | Conflict_marker of Base.string
      | Not_blank of 'a not_blank
    val sexp_of_t : ('a -> Sexplib0.Sexp.t) -> 'a t -> Sexplib0.Sexp.t
    val compare :
      'a Base__Ppx_compare_lib.compare -> 'a t Base__Ppx_compare_lib.compare
    val equal :
      'a Base__Ppx_compare_lib.equal -> 'a t Base__Ppx_compare_lib.equal
    val invariant : ('a -> Base.unit) -> 'a t -> Base.unit
    val map : 'a t -> f:(Base.string -> 'a -> 'b) -> 'b t
    val strip : 'a t -> 'a t
    val data : 'a t -> blank:'a -> conflict_marker:(Base.string -> 'a) -> 'a
  end
type 'a single_line = {
  leading_blanks : Base.string;
  trailing_spaces : Base.string;
  orig : Base.string;
  data : 'a;
}
val sexp_of_single_line :
  ('a -> Sexplib0.Sexp.t) -> 'a single_line -> Sexplib0.Sexp.t
val compare_single_line :
  ('a -> 'a -> Base.int) -> 'a single_line -> 'a single_line -> Base.int
val equal_single_line :
  ('a -> 'a -> Base.bool) -> 'a single_line -> 'a single_line -> Base.bool
type 'a multi_lines = {
  leading_spaces : Base.string;
  trailing_spaces : Base.string;
  indentation : Base.string;
  lines : 'a Line.t Base.list;
}
val sexp_of_multi_lines :
  ('a -> Sexplib0.Sexp.t) -> 'a multi_lines -> Sexplib0.Sexp.t
val compare_multi_lines :
  ('a -> 'a -> Base.int) -> 'a multi_lines -> 'a multi_lines -> Base.int
val equal_multi_lines :
  ('a -> 'a -> Base.bool) -> 'a multi_lines -> 'a multi_lines -> Base.bool
type 'a t =
    Empty of Base.string
  | Single_line of 'a single_line
  | Multi_lines of 'a multi_lines
val sexp_of_t : ('a -> Sexplib0.Sexp.t) -> 'a t -> Sexplib0.Sexp.t
val compare :
  'a Base__Ppx_compare_lib.compare -> 'a t Base__Ppx_compare_lib.compare
val equal :
  'a Base__Ppx_compare_lib.equal -> 'a t Base__Ppx_compare_lib.equal
val invariant : ('a -> Base.unit) -> 'a t -> Base.unit
val empty : 'a t
val map : 'a t -> f:(Base.string -> 'a -> 'b) -> 'b t
val data :
  'a t -> blank:'a -> conflict_marker:(Base.string -> 'a) -> 'a Base.list
val strip : 'a t -> 'a t
val to_string : 'a t -> Base.string
val to_lines : 'a t -> 'a Line.t Base.list
val trim_lines : 'a Line.t Base.list -> 'a Line.t Base.list
val reconcile :
  'a t ->
  lines:'a Line.t Base.list ->
  default_indentation:Base.int -> pad_single_line:Base.bool -> 'a t
val extract_indentation :
  'a Line.t Base.list -> Base.string * 'a Line.t Base.list
("DEBUG:rule", [Tag3 (("Line", 1308), 0, (Tag1 ([Tag1 (("not_blank", 1332), ([((("a")), 100000000, 0, -233)], 1, [[(("trailing_blanks", 729), 0, (Tag3 (Tag1 ((Tag2 ("Base")), "string"), 0, (0)), 100000000, 0, -231), (("matcher/cst.mli", 15, 497, 503), ("matcher/cst.mli", 16, 552, 557), 0), 0, Tag1 ("Expect_test_matcher__Cst", 1)); (("orig", 730), 0, (Tag3 (Tag1 ((Tag2 ("Base")), "string"), 0, (0)), 100000000, 0, -232), (("matcher/cst.mli", 16, 552, 558), ("matcher/cst.mli", 19, 690, 695), 0), 0, Tag1 ("Expect_test_matcher__Cst", 2)); (("data", 731), 0, ((("a")), 100000000, 0, -233), (("matcher/cst.mli", 19, 690, 696), ("matcher/cst.mli", 19, 690, 705), 0), 0, Tag1 ("Expect_test_matcher__Cst", 3))]], 1, 0, [25], [0], 0, 0, (("matcher/cst.mli", 14, 475, 477), ("matcher/cst.mli", 22, 752, 797), 0), [(("deriving_inline", (("matcher/cst.mli", 22, 752, 757), ("matcher/cst.mli", 22, 752, 772), 0)), ([([(Tag8 ([(((("sexp_of"), (("matcher/cst.mli", 22, 752, 773), ("matcher/cst.mli", 22, 752, 780), 0))), (("matcher/cst.mli", 22, 752, 773), ("matcher/cst.mli", 22, 752, 780), 0), 0, 0); (((("compare"), (("matcher/cst.mli", 22, 752, 782), ("matcher/cst.mli", 22, 752, 789), 0))), (("matcher/cst.mli", 22, 752, 782), ("matcher/cst.mli", 22, 752, 789), 0), 0, 0); (((("equal"), (("matcher/cst.mli", 22, 752, 791), ("matcher/cst.mli", 22, 752, 796), 0))), (("matcher/cst.mli", 22, 752, 791), ("matcher/cst.mli", 22, 752, 796), 0), 0, 0)]), (("matcher/cst.mli", 22, 752, 773), ("matcher/cst.mli", 22, 752, 796), 0), 0, 0)], (("matcher/cst.mli", 22, 752, 773), ("matcher/cst.mli", 22, 752, 796), 0))]), (("matcher/cst.mli", 22, 752, 754), ("matcher/cst.mli", 22, 752, 797), 0))], 0, 0, Tag1 ("Expect_test_matcher__Cst", 0)), 1, 0); (("sexp_of_not_blank", 1333), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -228), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -230), 0), 100000000, 0, -229), (Tag1 (0, (Tag3 ((("not_blank", 1332)), [((("a")), 100000000, 0, -228)], (0)), 100000000, 0, -227), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -226), 0), 100000000, 0, -225), 0), 100000000, 0, -224), 0, (("matcher/cst.mli", 27, 848, 854), ("matcher/cst.mli", 28, 878, 944), 0), 0, Tag1 ("Expect_test_matcher__Cst", 4)), 0); (("compare_not_blank", 1334), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -219), (Tag1 (0, ((("a")), 100000000, 0, -219), (Tag3 (Tag1 ((Tag2 ("Base")), "int"), 0, (0)), 100000000, 0, -223), 0), 100000000, 0, -222), 0), 100000000, 0, -221), (Tag1 (0, (Tag3 ((("not_blank", 1332)), [((("a")), 100000000, 0, -219)], (0)), 100000000, 0, -220), (Tag1 (0, (Tag3 ((("not_blank", 1332)), [((("a")), 100000000, 0, -219)], (0)), 100000000, 0, -218), (Tag3 (Tag1 ((Tag2 ("Base")), "int"), 0, (0)), 100000000, 0, -217), 0), 100000000, 0, -216), 0), 100000000, 0, -215), 0), 100000000, 0, -214), 0, (("matcher/cst.mli", 29, 945, 951), ("matcher/cst.mli", 30, 975, 1039), 0), 0, Tag1 ("Expect_test_matcher__Cst", 5)), 0); (("equal_not_blank", 1335), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -209), (Tag1 (0, ((("a")), 100000000, 0, -209), (Tag3 (Tag1 ((Tag2 ("Base")), "bool"), 0, (0)), 100000000, 0, -213), 0), 100000000, 0, -212), 0), 100000000, 0, -211), (Tag1 (0, (Tag3 ((("not_blank", 1332)), [((("a")), 100000000, 0, -209)], (0)), 100000000, 0, -210), (Tag1 (0, (Tag3 ((("not_blank", 1332)), [((("a")), 100000000, 0, -209)], (0)), 100000000, 0, -208), (Tag3 (Tag1 ((Tag2 ("Base")), "bool"), 0, (0)), 100000000, 0, -207), 0), 100000000, 0, -206), 0), 100000000, 0, -205), 0), 100000000, 0, -204), 0, (("matcher/cst.mli", 31, 1040, 1046), ("matcher/cst.mli", 32, 1068, 1134), 0), 0, Tag1 ("Expect_test_matcher__Cst", 6)), 0); Tag1 (("t", 1336), ([((("a")), 100000000, 0, -203)], 1, Tag1 ([(("Blank", 1049), ([(Tag3 (Tag1 ((Tag2 ("Base")), "string"), 0, (0)), 100000000, 0, -200)]), 0, (("matcher/cst.mli", 37, 1192, 1196), ("matcher/cst.mli", 37, 1192, 1223), 0), 0, Tag1 ("Expect_test_matcher__Cst", 8)); (("Conflict_marker", 1050), ([(Tag3 (Tag1 ((Tag2 ("Base")), "string"), 0, (0)), 100000000, 0, -201)]), 0, (("matcher/cst.mli", 38, 1248, 1252), ("matcher/cst.mli", 38, 1248, 1279), 0), 0, Tag1 ("Expect_test_matcher__Cst", 9)); (("Not_blank", 1051), ([(Tag3 ((("not_blank", 1332)), [((("a")), 100000000, 0, -203)], (0)), 100000000, 0, -202)]), 0, (("matcher/cst.mli", 39, 1325, 1329), ("matcher/cst.mli", 39, 1325, 1362), 0), 0, Tag1 ("Expect_test_matcher__Cst", 10))], 0), 1, 0, [25], [0], 0, 0, (("matcher/cst.mli", 36, 1178, 1180), ("matcher/cst.mli", 40, 1363, 1408), 0), [(("deriving_inline", (("matcher/cst.mli", 40, 1363, 1368), ("matcher/cst.mli", 40, 1363, 1383), 0)), ([([(Tag8 ([(((("sexp_of"), (("matcher/cst.mli", 40, 1363, 1384), ("matcher/cst.mli", 40, 1363, 1391), 0))), (("matcher/cst.mli", 40, 1363, 1384), ("matcher/cst.mli", 40, 1363, 1391), 0), 0, 0); (((("compare"), (("matcher/cst.mli", 40, 1363, 1393), ("matcher/cst.mli", 40, 1363, 1400), 0))), (("matcher/cst.mli", 40, 1363, 1393), ("matcher/cst.mli", 40, 1363, 1400), 0), 0, 0); (((("equal"), (("matcher/cst.mli", 40, 1363, 1402), ("matcher/cst.mli", 40, 1363, 1407), 0))), (("matcher/cst.mli", 40, 1363, 1402), ("matcher/cst.mli", 40, 1363, 1407), 0), 0, 0)]), (("matcher/cst.mli", 40, 1363, 1384), ("matcher/cst.mli", 40, 1363, 1407), 0), 0, 0)], (("matcher/cst.mli", 40, 1363, 1384), ("matcher/cst.mli", 40, 1363, 1407), 0))]), (("matcher/cst.mli", 40, 1363, 1365), ("matcher/cst.mli", 40, 1363, 1408), 0))], 0, 0, Tag1 ("Expect_test_matcher__Cst", 7)), 1, 0); (("sexp_of_t", 1337), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -197), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -199), 0), 100000000, 0, -198), (Tag1 (0, (Tag3 ((("t", 1336)), [((("a")), 100000000, 0, -197)], (0)), 100000000, 0, -196), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -195), 0), 100000000, 0, -194), 0), 100000000, 0, -193), 0, (("matcher/cst.mli", 46, 1460, 1466), ("matcher/cst.mli", 46, 1460, 1532), 0), 0, Tag1 ("Expect_test_matcher__Cst", 11)), 0); (("compare", 1338), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [((("a")), 100000000, 0, -191)], (0)), 100000000, 0, -192), (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [(Tag3 ((("t", 1336)), [((("a")), 100000000, 0, -191)], (0)), 100000000, 0, -190)], (0)), 100000000, 0, -189), 0), 100000000, 0, -188), 0, (("matcher/cst.mli", 47, 1533, 1547), ("matcher/cst.mli", 47, 1533, 1600), 0), 0, Tag1 ("Base__Ppx_compare_lib", 8)), 0); (("equal", 1339), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "equal"), [((("a")), 100000000, 0, -186)], (0)), 100000000, 0, -187), (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "equal"), [(Tag3 ((("t", 1336)), [((("a")), 100000000, 0, -186)], (0)), 100000000, 0, -185)], (0)), 100000000, 0, -184), 0), 100000000, 0, -183), 0, (("matcher/cst.mli", 48, 1601, 1615), ("matcher/cst.mli", 48, 1601, 1663), 0), 0, Tag1 ("Base__Ppx_compare_lib", 21)), 0); (("invariant", 1340), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -180), (Tag3 (Tag1 ((Tag2 ("Base")), "unit"), 0, (0)), 100000000, 0, -182), 0), 100000000, 0, -181), (Tag1 (0, (Tag3 ((("t", 1336)), [((("a")), 100000000, 0, -180)], (0)), 100000000, 0, -179), (Tag3 (Tag1 ((Tag2 ("Base")), "unit"), 0, (0)), 100000000, 0, -178), 0), 100000000, 0, -177), 0), 100000000, 0, -176), 0, (("matcher/cst.mli", 52, 1707, 1709), ("matcher/cst.mli", 52, 1707, 1753), 0), 0, Tag1 ("Expect_test_matcher__Cst", 14)), 0); (("map", 1341), ((Tag1 (0, (Tag3 ((("t", 1336)), [((("a")), 100000000, 0, -173)], (0)), 100000000, 0, -175), (Tag1 (("f"), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base")), "string"), 0, (0)), 100000000, 0, -174), (Tag1 (0, ((("a")), 100000000, 0, -173), ((("b")), 100000000, 0, -170), 0), 100000000, 0, -172), 0), 100000000, 0, -171), (Tag3 ((("t", 1336)), [((("b")), 100000000, 0, -170)], (0)), 100000000, 0, -169), 0), 100000000, 0, -168), 0), 100000000, 0, -167), 0, (("matcher/cst.mli", 55, 1814, 1816), ("matcher/cst.mli", 55, 1814, 1864), 0), 0, Tag1 ("Expect_test_matcher__Cst", 15)), 0); (("strip", 1342), ((Tag1 (0, (Tag3 ((("t", 1336)), [((("a")), 100000000, 0, -165)], (0)), 100000000, 0, -166), (Tag3 ((("t", 1336)), [((("a")), 100000000, 0, -165)], (0)), 100000000, 0, -164), 0), 100000000, 0, -163), 0, (("matcher/cst.mli", 58, 1927, 1929), ("matcher/cst.mli", 58, 1927, 1953), 0), 0, Tag1 ("Expect_test_matcher__Cst", 16)), 0); (("data", 1343), ((Tag1 (0, (Tag3 ((("t", 1336)), [((("a")), 100000000, 0, -159)], (0)), 100000000, 0, -162), (Tag1 (("blank"), ((("a")), 100000000, 0, -159), (Tag1 (("conflict_marker"), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base")), "string"), 0, (0)), 100000000, 0, -161), ((("a")), 100000000, 0, -159), 0), 100000000, 0, -160), ((("a")), 100000000, 0, -159), 0), 100000000, 0, -158), 0), 100000000, 0, -157), 0), 100000000, 0, -156), 0, (("matcher/cst.mli", 60, 1955, 1957), ("matcher/cst.mli", 60, 1955, 2024), 0), 0, Tag1 ("Expect_test_matcher__Cst", 17)), 0)]), 0, (("matcher/cst.mli", 13, 457, 457), ("matcher/cst.mli", 61, 2025, 2028), 0), Tag1 ("Expect_test_matcher__Cst", 18)), 0, 0); Tag1 (("single_line", 1309), ([((("a")), 100000000, 0, -155)], 1, [[(("leading_blanks", 1104), 0, (Tag3 (Tag1 ((Tag2 ("Base")), "string"), 0, (0)), 100000000, 0, -152), (("matcher/cst.mli", 75, 2265, 2269), ("matcher/cst.mli", 76, 2321, 2324), 0), 0, Tag1 ("Expect_test_matcher__Cst", 20)); (("trailing_spaces", 1105), 0, (Tag3 (Tag1 ((Tag2 ("Base")), "string"), 0, (0)), 100000000, 0, -153), (("matcher/cst.mli", 76, 2321, 2325), ("matcher/cst.mli", 77, 2376, 2379), 0), 0, Tag1 ("Expect_test_matcher__Cst", 21)); (("orig", 1106), 0, (Tag3 (Tag1 ((Tag2 ("Base")), "string"), 0, (0)), 100000000, 0, -154), (("matcher/cst.mli", 77, 2376, 2380), ("matcher/cst.mli", 78, 2448, 2451), 0), 0, Tag1 ("Expect_test_matcher__Cst", 22)); (("data", 1107), 0, ((("a")), 100000000, 0, -155), (("matcher/cst.mli", 78, 2448, 2452), ("matcher/cst.mli", 78, 2448, 2472), 0), 0, Tag1 ("Expect_test_matcher__Cst", 23))]], 1, 0, [25], [0], 0, 0, (("matcher/cst.mli", 74, 2243, 2243), ("matcher/cst.mli", 80, 2477, 2520), 0), [(("deriving_inline", (("matcher/cst.mli", 80, 2477, 2480), ("matcher/cst.mli", 80, 2477, 2495), 0)), ([([(Tag8 ([(((("sexp_of"), (("matcher/cst.mli", 80, 2477, 2496), ("matcher/cst.mli", 80, 2477, 2503), 0))), (("matcher/cst.mli", 80, 2477, 2496), ("matcher/cst.mli", 80, 2477, 2503), 0), 0, 0); (((("compare"), (("matcher/cst.mli", 80, 2477, 2505), ("matcher/cst.mli", 80, 2477, 2512), 0))), (("matcher/cst.mli", 80, 2477, 2505), ("matcher/cst.mli", 80, 2477, 2512), 0), 0, 0); (((("equal"), (("matcher/cst.mli", 80, 2477, 2514), ("matcher/cst.mli", 80, 2477, 2519), 0))), (("matcher/cst.mli", 80, 2477, 2514), ("matcher/cst.mli", 80, 2477, 2519), 0), 0, 0)]), (("matcher/cst.mli", 80, 2477, 2496), ("matcher/cst.mli", 80, 2477, 2519), 0), 0, 0)], (("matcher/cst.mli", 80, 2477, 2496), ("matcher/cst.mli", 80, 2477, 2519), 0))]), (("matcher/cst.mli", 80, 2477, 2477), ("matcher/cst.mli", 80, 2477, 2520), 0))], 0, 0, Tag1 ("Expect_test_matcher__Cst", 19)), 1, 0); (("sexp_of_single_line", 1310), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -149), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -151), 0), 100000000, 0, -150), (Tag1 (0, (Tag3 ((("single_line", 1309)), [((("a")), 100000000, 0, -149)], (0)), 100000000, 0, -148), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -147), 0), 100000000, 0, -146), 0), 100000000, 0, -145), 0, (("matcher/cst.mli", 84, 2564, 2568), ("matcher/cst.mli", 85, 2594, 2660), 0), 0, Tag1 ("Expect_test_matcher__Cst", 24)), 0); (("compare_single_line", 1311), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -140), (Tag1 (0, ((("a")), 100000000, 0, -140), (Tag3 (Tag1 ((Tag2 ("Base")), "int"), 0, (0)), 100000000, 0, -144), 0), 100000000, 0, -143), 0), 100000000, 0, -142), (Tag1 (0, (Tag3 ((("single_line", 1309)), [((("a")), 100000000, 0, -140)], (0)), 100000000, 0, -141), (Tag1 (0, (Tag3 ((("single_line", 1309)), [((("a")), 100000000, 0, -140)], (0)), 100000000, 0, -139), (Tag3 (Tag1 ((Tag2 ("Base")), "int"), 0, (0)), 100000000, 0, -138), 0), 100000000, 0, -137), 0), 100000000, 0, -136), 0), 100000000, 0, -135), 0, (("matcher/cst.mli", 86, 2661, 2665), ("matcher/cst.mli", 87, 2691, 2757), 0), 0, Tag1 ("Expect_test_matcher__Cst", 25)), 0); (("equal_single_line", 1312), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -130), (Tag1 (0, ((("a")), 100000000, 0, -130), (Tag3 (Tag1 ((Tag2 ("Base")), "bool"), 0, (0)), 100000000, 0, -134), 0), 100000000, 0, -133), 0), 100000000, 0, -132), (Tag1 (0, (Tag3 ((("single_line", 1309)), [((("a")), 100000000, 0, -130)], (0)), 100000000, 0, -131), (Tag1 (0, (Tag3 ((("single_line", 1309)), [((("a")), 100000000, 0, -130)], (0)), 100000000, 0, -129), (Tag3 (Tag1 ((Tag2 ("Base")), "bool"), 0, (0)), 100000000, 0, -128), 0), 100000000, 0, -127), 0), 100000000, 0, -126), 0), 100000000, 0, -125), 0, (("matcher/cst.mli", 88, 2758, 2762), ("matcher/cst.mli", 89, 2786, 2854), 0), 0, Tag1 ("Expect_test_matcher__Cst", 26)), 0); Tag1 (("multi_lines", 1313), ([((("a")), 100000000, 0, -124)], 1, [[(("leading_spaces", 1115), 0, (Tag3 (Tag1 ((Tag2 ("Base")), "string"), 0, (0)), 100000000, 0, -119), (("matcher/cst.mli", 127, 3668, 3672), ("matcher/cst.mli", 128, 3728, 3731), 0), 0, Tag1 ("Expect_test_matcher__Cst", 28)); (("trailing_spaces", 1116), 0, (Tag3 (Tag1 ((Tag2 ("Base")), "string"), 0, (0)), 100000000, 0, -120), (("matcher/cst.mli", 128, 3728, 3732), ("matcher/cst.mli", 129, 3800, 3803), 0), 0, Tag1 ("Expect_test_matcher__Cst", 29)); (("indentation", 1117), 0, (Tag3 (Tag1 ((Tag2 ("Base")), "string"), 0, (0)), 100000000, 0, -121), (("matcher/cst.mli", 129, 3800, 3804), ("matcher/cst.mli", 130, 3853, 3856), 0), 0, Tag1 ("Expect_test_matcher__Cst", 30)); (("lines", 1118), 0, (Tag3 (Tag1 ((Tag2 ("Base")), "list"), [(Tag3 (Tag1 ((("Line", 1308)), "t"), [((("a")), 100000000, 0, -124)], (0)), 100000000, 0, -123)], (0)), 100000000, 0, -122), (("matcher/cst.mli", 130, 3853, 3857), ("matcher/cst.mli", 130, 3853, 3889), 0), 0, Tag1 ("Expect_test_matcher__Cst", 31))]], 1, 0, [25], [0], 0, 0, (("matcher/cst.mli", 126, 3646, 3646), ("matcher/cst.mli", 132, 3935, 3978), 0), [(("deriving_inline", (("matcher/cst.mli", 132, 3935, 3938), ("matcher/cst.mli", 132, 3935, 3953), 0)), ([([(Tag8 ([(((("sexp_of"), (("matcher/cst.mli", 132, 3935, 3954), ("matcher/cst.mli", 132, 3935, 3961), 0))), (("matcher/cst.mli", 132, 3935, 3954), ("matcher/cst.mli", 132, 3935, 3961), 0), 0, 0); (((("compare"), (("matcher/cst.mli", 132, 3935, 3963), ("matcher/cst.mli", 132, 3935, 3970), 0))), (("matcher/cst.mli", 132, 3935, 3963), ("matcher/cst.mli", 132, 3935, 3970), 0), 0, 0); (((("equal"), (("matcher/cst.mli", 132, 3935, 3972), ("matcher/cst.mli", 132, 3935, 3977), 0))), (("matcher/cst.mli", 132, 3935, 3972), ("matcher/cst.mli", 132, 3935, 3977), 0), 0, 0)]), (("matcher/cst.mli", 132, 3935, 3954), ("matcher/cst.mli", 132, 3935, 3977), 0), 0, 0)], (("matcher/cst.mli", 132, 3935, 3954), ("matcher/cst.mli", 132, 3935, 3977), 0))]), (("matcher/cst.mli", 132, 3935, 3935), ("matcher/cst.mli", 132, 3935, 3978), 0))], 0, 0, Tag1 ("Expect_test_matcher__Cst", 27)), 1, 0); (("sexp_of_multi_lines", 1314), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -116), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -118), 0), 100000000, 0, -117), (Tag1 (0, (Tag3 ((("multi_lines", 1313)), [((("a")), 100000000, 0, -116)], (0)), 100000000, 0, -115), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -114), 0), 100000000, 0, -113), 0), 100000000, 0, -112), 0, (("matcher/cst.mli", 136, 4022, 4026), ("matcher/cst.mli", 137, 4052, 4118), 0), 0, Tag1 ("Expect_test_matcher__Cst", 32)), 0); (("compare_multi_lines", 1315), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -107), (Tag1 (0, ((("a")), 100000000, 0, -107), (Tag3 (Tag1 ((Tag2 ("Base")), "int"), 0, (0)), 100000000, 0, -111), 0), 100000000, 0, -110), 0), 100000000, 0, -109), (Tag1 (0, (Tag3 ((("multi_lines", 1313)), [((("a")), 100000000, 0, -107)], (0)), 100000000, 0, -108), (Tag1 (0, (Tag3 ((("multi_lines", 1313)), [((("a")), 100000000, 0, -107)], (0)), 100000000, 0, -106), (Tag3 (Tag1 ((Tag2 ("Base")), "int"), 0, (0)), 100000000, 0, -105), 0), 100000000, 0, -104), 0), 100000000, 0, -103), 0), 100000000, 0, -102), 0, (("matcher/cst.mli", 138, 4119, 4123), ("matcher/cst.mli", 139, 4149, 4215), 0), 0, Tag1 ("Expect_test_matcher__Cst", 33)), 0); (("equal_multi_lines", 1316), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -97), (Tag1 (0, ((("a")), 100000000, 0, -97), (Tag3 (Tag1 ((Tag2 ("Base")), "bool"), 0, (0)), 100000000, 0, -101), 0), 100000000, 0, -100), 0), 100000000, 0, -99), (Tag1 (0, (Tag3 ((("multi_lines", 1313)), [((("a")), 100000000, 0, -97)], (0)), 100000000, 0, -98), (Tag1 (0, (Tag3 ((("multi_lines", 1313)), [((("a")), 100000000, 0, -97)], (0)), 100000000, 0, -96), (Tag3 (Tag1 ((Tag2 ("Base")), "bool"), 0, (0)), 100000000, 0, -95), 0), 100000000, 0, -94), 0), 100000000, 0, -93), 0), 100000000, 0, -92), 0, (("matcher/cst.mli", 140, 4216, 4220), ("matcher/cst.mli", 141, 4244, 4312), 0), 0, Tag1 ("Expect_test_matcher__Cst", 34)), 0); Tag1 (("t", 1317), ([((("a")), 100000000, 0, -90)], 1, Tag1 ([(("Empty", 1282), ([(Tag3 (Tag1 ((Tag2 ("Base")), "string"), 0, (0)), 100000000, 0, -88)]), 0, (("matcher/cst.mli", 146, 4364, 4366), ("matcher/cst.mli", 146, 4364, 4389), 0), 0, Tag1 ("Expect_test_matcher__Cst", 36)); (("Single_line", 1283), ([(Tag3 ((("single_line", 1309)), [((("a")), 100000000, 0, -90)], (0)), 100000000, 0, -89)]), 0, (("matcher/cst.mli", 147, 4416, 4418), ("matcher/cst.mli", 147, 4416, 4449), 0), 0, Tag1 ("Expect_test_matcher__Cst", 37)); (("Multi_lines", 1284), ([(Tag3 ((("multi_lines", 1313)), [((("a")), 100000000, 0, -90)], (0)), 100000000, 0, -91)]), 0, (("matcher/cst.mli", 148, 4450, 4452), ("matcher/cst.mli", 148, 4450, 4483), 0), 0, Tag1 ("Expect_test_matcher__Cst", 38))], 0), 1, 0, [25], [0], 0, 0, (("matcher/cst.mli", 145, 4352, 4352), ("matcher/cst.mli", 149, 4484, 4527), 0), [(("deriving_inline", (("matcher/cst.mli", 149, 4484, 4487), ("matcher/cst.mli", 149, 4484, 4502), 0)), ([([(Tag8 ([(((("sexp_of"), (("matcher/cst.mli", 149, 4484, 4503), ("matcher/cst.mli", 149, 4484, 4510), 0))), (("matcher/cst.mli", 149, 4484, 4503), ("matcher/cst.mli", 149, 4484, 4510), 0), 0, 0); (((("compare"), (("matcher/cst.mli", 149, 4484, 4512), ("matcher/cst.mli", 149, 4484, 4519), 0))), (("matcher/cst.mli", 149, 4484, 4512), ("matcher/cst.mli", 149, 4484, 4519), 0), 0, 0); (((("equal"), (("matcher/cst.mli", 149, 4484, 4521), ("matcher/cst.mli", 149, 4484, 4526), 0))), (("matcher/cst.mli", 149, 4484, 4521), ("matcher/cst.mli", 149, 4484, 4526), 0), 0, 0)]), (("matcher/cst.mli", 149, 4484, 4503), ("matcher/cst.mli", 149, 4484, 4526), 0), 0, 0)], (("matcher/cst.mli", 149, 4484, 4503), ("matcher/cst.mli", 149, 4484, 4526), 0))]), (("matcher/cst.mli", 149, 4484, 4484), ("matcher/cst.mli", 149, 4484, 4527), 0))], 0, 0, Tag1 ("Expect_test_matcher__Cst", 35)), 1, 0); (("sexp_of_t", 1318), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -85), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -87), 0), 100000000, 0, -86), (Tag1 (0, (Tag3 ((("t", 1317)), [((("a")), 100000000, 0, -85)], (0)), 100000000, 0, -84), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -83), 0), 100000000, 0, -82), 0), 100000000, 0, -81), 0, (("matcher/cst.mli", 153, 4571, 4575), ("matcher/cst.mli", 153, 4571, 4641), 0), 0, Tag1 ("Expect_test_matcher__Cst", 39)), 0); (("compare", 1319), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [((("a")), 100000000, 0, -79)], (0)), 100000000, 0, -80), (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [(Tag3 ((("t", 1317)), [((("a")), 100000000, 0, -79)], (0)), 100000000, 0, -78)], (0)), 100000000, 0, -77), 0), 100000000, 0, -76), 0, (("matcher/cst.mli", 154, 4642, 4654), ("matcher/cst.mli", 154, 4642, 4707), 0), 0, Tag1 ("Base__Ppx_compare_lib", 8)), 0); (("equal", 1320), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "equal"), [((("a")), 100000000, 0, -74)], (0)), 100000000, 0, -75), (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "equal"), [(Tag3 ((("t", 1317)), [((("a")), 100000000, 0, -74)], (0)), 100000000, 0, -73)], (0)), 100000000, 0, -72), 0), 100000000, 0, -71), 0, (("matcher/cst.mli", 155, 4708, 4720), ("matcher/cst.mli", 155, 4708, 4768), 0), 0, Tag1 ("Base__Ppx_compare_lib", 21)), 0); (("invariant", 1321), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -68), (Tag3 (Tag1 ((Tag2 ("Base")), "unit"), 0, (0)), 100000000, 0, -70), 0), 100000000, 0, -69), (Tag1 (0, (Tag3 ((("t", 1317)), [((("a")), 100000000, 0, -68)], (0)), 100000000, 0, -67), (Tag3 (Tag1 ((Tag2 ("Base")), "unit"), 0, (0)), 100000000, 0, -66), 0), 100000000, 0, -65), 0), 100000000, 0, -64), 0, (("matcher/cst.mli", 159, 4808, 4808), ("matcher/cst.mli", 159, 4808, 4852), 0), 0, Tag1 ("Expect_test_matcher__Cst", 42)), 0); (("empty", 1322), ((Tag3 ((("t", 1317)), [((("a")), 100000000, 0, -63)], (0)), 100000000, 0, -62), 0, (("matcher/cst.mli", 161, 4854, 4854), ("matcher/cst.mli", 161, 4854, 4870), 0), 0, Tag1 ("Expect_test_matcher__Cst", 43)), 0); (("map", 1323), ((Tag1 (0, (Tag3 ((("t", 1317)), [((("a")), 100000000, 0, -59)], (0)), 100000000, 0, -61), (Tag1 (("f"), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base")), "string"), 0, (0)), 100000000, 0, -60), (Tag1 (0, ((("a")), 100000000, 0, -59), ((("b")), 100000000, 0, -56), 0), 100000000, 0, -58), 0), 100000000, 0, -57), (Tag3 ((("t", 1317)), [((("b")), 100000000, 0, -56)], (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0, (("matcher/cst.mli", 163, 4872, 4872), ("matcher/cst.mli", 163, 4872, 4920), 0), 0, Tag1 ("Expect_test_matcher__Cst", 44)), 0); (("data", 1324), ((Tag1 (0, (Tag3 ((("t", 1317)), [((("a")), 100000000, 0, -49)], (0)), 100000000, 0, -52), (Tag1 (("blank"), ((("a")), 100000000, 0, -49), (Tag1 (("conflict_marker"), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base")), "string"), 0, (0)), 100000000, 0, -51), ((("a")), 100000000, 0, -49), 0), 100000000, 0, -50), (Tag3 (Tag1 ((Tag2 ("Base")), "list"), [((("a")), 100000000, 0, -49)], (0)), 100000000, 0, -48), 0), 100000000, 0, -47), 0), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("matcher/cst.mli", 165, 4922, 4922), ("matcher/cst.mli", 165, 4922, 4994), 0), 0, Tag1 ("Expect_test_matcher__Cst", 45)), 0); (("strip", 1325), ((Tag1 (0, (Tag3 ((("t", 1317)), [((("a")), 100000000, 0, -43)], (0)), 100000000, 0, -44), (Tag3 ((("t", 1317)), [((("a")), 100000000, 0, -43)], (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0, (("matcher/cst.mli", 167, 4996, 4996), ("matcher/cst.mli", 167, 4996, 5020), 0), 0, Tag1 ("Expect_test_matcher__Cst", 46)), 0); (("to_string", 1326), ((Tag1 (0, (Tag3 ((("t", 1317)), [((0), 100000000, 0, -40)], (0)), 100000000, 0, -39), (Tag3 (Tag1 ((Tag2 ("Base")), "string"), 0, (0)), 100000000, 0, -38), 0), 100000000, 0, -37), 0, (("matcher/cst.mli", 169, 5022, 5022), ("matcher/cst.mli", 169, 5022, 5051), 0), 0, Tag1 ("Expect_test_matcher__Cst", 47)), 0); (("to_lines", 1327), ((Tag1 (0, (Tag3 ((("t", 1317)), [((("a")), 100000000, 0, -35)], (0)), 100000000, 0, -36), (Tag3 (Tag1 ((Tag2 ("Base")), "list"), [(Tag3 (Tag1 ((("Line", 1308)), "t"), [((("a")), 100000000, 0, -35)], (0)), 100000000, 0, -34)], (0)), 100000000, 0, -33), 0), 100000000, 0, -32), 0, (("matcher/cst.mli", 172, 5137, 5137), ("matcher/cst.mli", 172, 5137, 5174), 0), 0, Tag1 ("Expect_test_matcher__Cst", 48)), 0); (("trim_lines", 1328), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base")), "list"), [(Tag3 (Tag1 ((("Line", 1308)), "t"), [((("a")), 100000000, 0, -29)], (0)), 100000000, 0, -31)], (0)), 100000000, 0, -30), (Tag3 (Tag1 ((Tag2 ("Base")), "list"), [(Tag3 (Tag1 ((("Line", 1308)), "t"), [((("a")), 100000000, 0, -29)], (0)), 100000000, 0, -28)], (0)), 100000000, 0, -27), 0), 100000000, 0, -26), 0, (("matcher/cst.mli", 175, 5240, 5240), ("matcher/cst.mli", 175, 5240, 5289), 0), 0, Tag1 ("Expect_test_matcher__Cst", 49)), 0); (("reconcile", 1329), ((Tag1 (0, (Tag3 ((("t", 1317)), [((("a")), 100000000, 0, -20)], (0)), 100000000, 0, -25), (Tag1 (("lines"), (Tag3 (Tag1 ((Tag2 ("Base")), "list"), [(Tag3 (Tag1 ((("Line", 1308)), "t"), [((("a")), 100000000, 0, -20)], (0)), 100000000, 0, -24)], (0)), 100000000, 0, -23), (Tag1 (("default_indentation"), (Tag3 (Tag1 ((Tag2 ("Base")), "int"), 0, (0)), 100000000, 0, -22), (Tag1 (("pad_single_line"), (Tag3 (Tag1 ((Tag2 ("Base")), "bool"), 0, (0)), 100000000, 0, -21), (Tag3 ((("t", 1317)), [((("a")), 100000000, 0, -20)], (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0), 100000000, 0, -15), 0, (("matcher/cst.mli", 182, 5576, 5576), ("matcher/cst.mli", 187, 5705, 5714), 0), 0, Tag1 ("Expect_test_matcher__Cst", 50)), 0); (("extract_indentation", 1330), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base")), "list"), [(Tag3 (Tag1 ((("Line", 1308)), "t"), [((("a")), 100000000, 0, -12)], (0)), 100000000, 0, -14)], (0)), 100000000, 0, -13), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Base")), "string"), 0, (0)), 100000000, 0, -9); (Tag3 (Tag1 ((Tag2 ("Base")), "list"), [(Tag3 (Tag1 ((("Line", 1308)), "t"), [((("a")), 100000000, 0, -12)], (0)), 100000000, 0, -11)], (0)), 100000000, 0, -10)]), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("matcher/cst.mli", 191, 5871, 5871), ("matcher/cst.mli", 191, 5871, 5938), 0), 0, Tag1 ("Expect_test_matcher__Cst", 51)), 0); (("stripped_original_lines", 1331), ((Tag1 (0, (Tag3 ((("t", 1317)), [((0), 100000000, 0, -6)], (0)), 100000000, 0, -5), (Tag3 (Tag1 ((Tag2 ("Base")), "list"), [(Tag3 (Tag1 ((Tag2 ("Base")), "string"), 0, (0)), 100000000, 0, -4)], (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("matcher/cst.mli", 195, 6039, 6039), ("matcher/cst.mli", 195, 6039, 6087), 0), 0, Tag1 ("Expect_test_matcher__Cst", 52)), 0)], "Expect_test_matcher__Cst", [("Expect_test_matcher__Cst", ("\245@\194\186F\248?\171\205\176\163K-l\197\030")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__StringLabels", ("\134F\024\226\216Is#\223\230\234\169Z\206Gc")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Printexc", ("\217u\168\235\179oi\167\235\255\025\017%d\192s")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__ListLabels", ("*\194\012\191\020%\170\249m\002\180\178hk\205\220")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("Sexplib0__Sexpable", ("\251${\207(\249/z\242\255\250^\141\156\210e")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv_error", ("kzv!\151~\198P\000\165\176d\007\251p\232")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("Expect_test_matcher__", ("\023\189+K\163r\2336\196\t\221\027\174\r\160\227")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Base__Unit", ("\247\n\178\171]m\169\231\139\171\148\189\254\236l'")); ("Base__T", ("+t\159\169\027\152\205\235\003\237\133\177\024\n6'")); ("Base__Sys0", ("\206z\231\154s\\\136\2364\131\005\014\031\152m3")); ("Base__Stringable", ("\170\025\162\136\234\162\n\161\1491>\145\210@\237t")); ("Base__String0", ("\212\221L\220\245\255\162P\228\224\189\216\135H\149O")); ("Base__String", ("|q\181\r\14787\130\127\191\025\137\203\217\250\196")); ("Base__Staged", ("\203J\011+\249\0115\1338\023\209\142\159\240V.")); ("Base__Source_code_position0", ("_\003P6\254\029\206\005\130\136\180\019\145\230\000M")); ("Base__Sign_or_nan", ("\2287\251,\197\017qf\179Y\025h\190\131W%")); ("Base__Sign0", ("\152\138\204\175\244\128J\165\221\165\160\150y\1305i")); ("Base__Sign", ("^\255.Q;\215fi\134\192\182\241Z\2425l")); ("Base__Sexpable", ("\155?\169\178\246\242*\232\206\018Y\174\203h\217i")); ("Base__Sexp_with_comparable", ("\171\173\137y\1855\006y\146\248\141@@\191[W")); ("Base__Sexp", ("\154\187\171&\209=\153[\236\250!U\174`\190T")); ("Base__Sequence", ("{L\140\211\223\183\000\030\151\247FnY\196\210\201")); ("Base__Result", ("\204|\215\173FMa\2511<&\215T\194$\228")); ("Base__Ref", ("\250\254R\158s\203c\0025\029I6\149\179s\158")); ("Base__Random", (" \216\153fc\243\1430\155\211\169?\022\\\231\011")); ("Base__Printf", ("\000\196c,\214\127\226\174\220\190\253z!\242\028\250")); ("Base__Pretty_printer", ("\175\005\031\018\015a\159\220\154c'(a\239j\233")); ("Base__Ppx_hash_lib", ("\199\141\178\193\006\209L\007^\020(\131\224sn8")); ("Base__Ppx_enumerate_lib", ("G\171\178\012Em\142\235@\152fg\020\140~(")); ("Base__Ppx_compare_lib", ("\243\186~\233\228\199Ah\181.\223\004e\231\129S")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Or_error", ("\193\133)\bO\210\2517\168*\203\148\143\200\127\177")); ("Base__Option", ("\242!\176\142\168\247\163Jg\0254\180\224\\A\210")); ("Base__Nativeint", ("\252/\181U\214\229\029?.\130\145\237\"qFj")); ("Base__Monad_intf", ("\208\203\163\152\184O\130?\012:\168\247}\018\253\155")); ("Base__Monad", ("!\244\168\2352=\137Lm\219\129K\216\199\145\\")); ("Base__List", ("}\029h\158/\153\229\161]0\224Y\003Z\250\210")); ("Base__Lazy", ("@`\165\196 \235)\136ANe:p\169$\185")); ("Base__Invariant_intf", ("\213\204\238\235\236[\198\145\028\2392\015\243\177S\249")); ("Base__Invariant", ("\135\153\136\\\129SD\228\202l\255\152\139\253\015\201")); ("Base__Intable", ("\028\249=Y\003]\231qd\238\172\004b\170\142\255")); ("Base__Int_intf", ("\238Q\2457\239\156\018\183J\015\240\178\193b\166@")); ("Base__Int64", ("\252B\186\239\245\155\209\227\136CIX@\189\003\029")); ("Base__Int63_emul", ("'\210s\232\177\204\254\024C\215\014\231\210\227n\235")); ("Base__Int63", ("\165\016\236\214m\014a\226A{\191\235@O\1695")); ("Base__Int32", ("\244*\172\133\227\025$@\180\027\024\132\195yO\027")); ("Base__Int0", ("N\1310\012\227\254\000\255_\222!\018\016\003\1779")); ("Base__Int", ("\165Z\179\140\230$\131\175\209\172\214\"\170\214{\250")); ("Base__Info_intf", ("\184\209'\173\251\219\167X|v\188]\190o5X")); ("Base__Info", ("-\011\149\203\248\030\2301\1907\1630\189\128\209\170")); ("Base__Indexed_container_intf", ("\179\2213\145j\\\136\tl2\240\006\188j$r")); ("Base__Indexed_container", ("\196\246\213\141\196d\130\002\232\162\144y\149\236\145\218")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Import", ("\014\187\247\141\187\181\142g\176:s_,\181\219\209")); ("Base__Identifiable_intf", ("hK7}\187\129\022-r\233\241\192Q\161=j")); ("Base__Identifiable", ("L\020\162\189\228\217^\171\158H_\157\164c\130\242")); ("Base__Hashable_intf", ("\128\015G\244\135R\026\202\128F?)\193\004\195\181")); ("Base__Hashable", ("\027\187\158\245r}\018\193dbq\196\005\170g\252")); ("Base__Hash_intf", ("h\004P\218\1531G\127\212\208A\024\140\164iq")); ("Base__Hash", ("\206Rc\194\234{s3\248\165\024\162\203{\206\206")); ("Base__Globalize", ("<\243w~.\180\196t\159\193\174[\227\139\215G")); ("Base__Formatter", ("\193\149\030\140\154\1505b\162a`%\243\185'%")); ("Base__Floatable", ("\239\176\151\139\173ft(q\190\205\030C\170\197\177")); ("Base__Float", ("tR$\252\165\134g\024>\127\254\245\212-\018\141")); ("Base__Field", ("8In\234X\202\188G\186\208$\192\175\136\214v")); ("Base__Exn", ("?\191\202\221\228\185\154\127\240\191o\134\020\186b\173")); ("Base__Error", ("\199\218\231n\155/\159\156\146\247\148t\237\003\t\153")); ("Base__Equal", ("\193\217Z\127he\141N\000\1447\030\236%\131\b")); ("Base__Either0", ("!9-\011n\2077eZ\212\031c\227\029\206\t")); ("Base__Container_intf", ("\170vo*\208\209\141\219\196\168\236l\016\246\012c")); ("Base__Container", ("\191|>_\153W\235M\180uKz\214w`q")); ("Base__Comparisons", ("\196\196Y\"{\163~)\\G/\155:\004\141;")); ("Base__Comparator", ("\002\135z7b\025&\207\t\188\239&U3R\167")); ("Base__Comparable_intf", ("\252n\002\221\246\143r\235oJ\240\151\202\211\161\254")); ("Base__Comparable", (":\134'\156u#\215\225\129\191\162\229\200\185l\012")); ("Base__Char", ("\206\224\186\000'\157$\023\023\190\198{\250\141a\216")); ("Base__Bytes", ("\028\001\232X(\240\139\227s\152\156\138\023\030\r\188")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__Bool", ("\162+\012Rx\183c\226\131\190@Z\016q\138@")); ("Base__Blit_intf", ("\171\129\t\214\130\131O\210\251F\228.\168\004Vo")); ("Base__Blit", ("}g\242\161\000\216\132\220\195\230C\002jg\234j")); ("Base__Binary_searchable_intf", ("/\213\237\209\200\192$w\158\234\169\148\012\221W\019")); ("Base__Binary_searchable", ("V\022B_\233\194\145K\248\233\025\175U\155i\197")); ("Base__Backtrace", ("\212~\253E\024|\228\141\015\169\012\006\022\0065\181")); ("Base__Array", ("P\252F\172\242{\241\226#uu\207\2068\218\015")); ("Base__Applicative_intf", ("J\176\203\159\235N(\235\027\232\198+\224\205*A")); ("Base__Applicative", ("\157\024\176\241a\165\204\133\003s3\214\007\131\244\n")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158")); ("Base", ("\167SY\027Q9E\005r,\198\164\161\023\170\151"))], [(0)])
val stripped_original_lines : 'a t -> Base.string Base.list

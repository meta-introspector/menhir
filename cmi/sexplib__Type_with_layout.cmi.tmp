module Make :
  functor (Pos : sig type t val sexp_of_t : t -> Sexplib.Type.t end) ->
    sig
      module type S =
        sig
          type t =
              Atom of Pos.t * string * string option
            | List of Pos.t * t_or_comment list * Pos.t
          and t_or_comment = Sexp of t | Comment of comment
          and comment =
              Plain_comment of Pos.t * string
            | Sexp_comment of Pos.t * comment list * t
          val sexp_of_t : t -> Sexplib.Type.t
          val sexp_of_comment : comment -> Sexplib.Type.t
          val sexp_of_t_or_comment : t_or_comment -> Sexplib.Type.t
        end
    end
module Parsed : Make(Sexplib.Src_pos.Absolute).S
type t =
    Atom of Sexplib.Src_pos.Relative.t * string * string option
  | List of Sexplib.Src_pos.Relative.t * t_or_comment list *
      Sexplib.Src_pos.Relative.t
and t_or_comment = Sexp of t | Comment of comment
and comment =
    Plain_comment of Sexplib.Src_pos.Relative.t * string
  | Sexp_comment of Sexplib.Src_pos.Relative.t * comment list * t
val sexp_of_t : t -> Sexplib.Type.t
val sexp_of_comment : comment -> Sexplib.Type.t
val sexp_of_t_or_comment : t_or_comment -> Sexplib.Type.t
("DEBUG:rule", [Tag3 (("Make", 373), 0, (Tag2 (((("Pos", 382)), Tag1 ([Tag1 (("t", 383), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/type_with_layout.mli", 4, 99, 103), ("src/type_with_layout.mli", 4, 99, 109), 0), 0, 0, 0, Tag1 ("Sexplib__Type_with_layout", 0)), 1, 0); (("sexp_of_t", 384), ((Tag1 (0, (Tag3 ((("t", 383)), 0, (0)), 100000000, 0, -32), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Type"), "t"), 0, (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0, (("src/type_with_layout.mli", 6, 111, 115), ("src/type_with_layout.mli", 6, 111, 142), 0), 0, Tag1 ("Sexplib__Type_with_layout", 1)), 0)])), Tag1 ([Tag4 (("S", 385), ((Tag1 ([Tag1 (("t", 386), (0, 0, Tag1 ([(("Atom", 293), ([(Tag3 (Tag1 ((("Pos", 382)), "t"), 0, (0)), 100000000, 0, -50); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -51); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -53)], (0)), 100000000, 0, -52)]), 0, (("src/type_with_layout.mli", 11, 270, 276), ("src/type_with_layout.mli", 11, 270, 316), 0), 0, Tag1 ("Sexplib__Type_with_layout", 6)); (("List", 294), ([(Tag3 (Tag1 ((("Pos", 382)), "t"), 0, (0)), 100000000, 0, -54); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t_or_comment", 387)), 0, (0)), 100000000, 0, -56)], (0)), 100000000, 0, -55); (Tag3 (Tag1 ((("Pos", 382)), "t"), 0, (0)), 100000000, 0, -57)]), 0, (("src/type_with_layout.mli", 12, 354, 360), ("src/type_with_layout.mli", 12, 354, 403), 0), 0, Tag1 ("Sexplib__Type_with_layout", 7))], 0), 1, 0, 0, 0, 0, 0, (("src/type_with_layout.mli", 10, 257, 261), ("src/type_with_layout.mli", 12, 354, 403), 0), 0, 0, 0, Tag1 ("Sexplib__Type_with_layout", 3)), 1, 0); Tag1 (("t_or_comment", 387), (0, 0, Tag1 ([(("Sexp", 295), ([(Tag3 ((("t", 386)), 0, (0)), 100000000, 0, -48)]), 0, (("src/type_with_layout.mli", 16, 467, 473), ("src/type_with_layout.mli", 16, 467, 484), 0), 0, Tag1 ("Sexplib__Type_with_layout", 8)); (("Comment", 296), ([(Tag3 ((("comment", 388)), 0, (0)), 100000000, 0, -49)]), 0, (("src/type_with_layout.mli", 17, 485, 491), ("src/type_with_layout.mli", 17, 485, 511), 0), 0, Tag1 ("Sexplib__Type_with_layout", 9))], 0), 1, 0, 0, 0, 0, 0, (("src/type_with_layout.mli", 15, 444, 448), ("src/type_with_layout.mli", 17, 485, 511), 0), 0, 0, 0, Tag1 ("Sexplib__Type_with_layout", 4)), 2, 0); Tag1 (("comment", 388), (0, 0, Tag1 ([(("Plain_comment", 297), ([(Tag3 (Tag1 ((("Pos", 382)), "t"), 0, (0)), 100000000, 0, -42); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -43)]), 0, (("src/type_with_layout.mli", 20, 531, 537), ("src/type_with_layout.mli", 20, 531, 570), 0), 0, Tag1 ("Sexplib__Type_with_layout", 10)); (("Sexp_comment", 298), ([(Tag3 (Tag1 ((("Pos", 382)), "t"), 0, (0)), 100000000, 0, -44); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("comment", 388)), 0, (0)), 100000000, 0, -46)], (0)), 100000000, 0, -45); (Tag3 ((("t", 386)), 0, (0)), 100000000, 0, -47)]), 0, (("src/type_with_layout.mli", 21, 599, 605), ("src/type_with_layout.mli", 21, 599, 647), 0), 0, Tag1 ("Sexplib__Type_with_layout", 11))], 0), 1, 0, 0, 0, 0, 0, (("src/type_with_layout.mli", 19, 513, 517), ("src/type_with_layout.mli", 21, 599, 647), 0), 0, 0, 0, Tag1 ("Sexplib__Type_with_layout", 5)), 2, 0); (("sexp_of_t", 389), ((Tag1 (0, (Tag3 ((("t", 386)), 0, (0)), 100000000, 0, -41), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Type"), "t"), 0, (0)), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("src/type_with_layout.mli", 25, 672, 676), ("src/type_with_layout.mli", 25, 672, 703), 0), 0, Tag1 ("Sexplib__Type_with_layout", 12)), 0); (("sexp_of_comment", 390), ((Tag1 (0, (Tag3 ((("comment", 388)), 0, (0)), 100000000, 0, -38), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Type"), "t"), 0, (0)), 100000000, 0, -37), 0), 100000000, 0, -36), 0, (("src/type_with_layout.mli", 26, 704, 708), ("src/type_with_layout.mli", 26, 704, 747), 0), 0, Tag1 ("Sexplib__Type_with_layout", 13)), 0); (("sexp_of_t_or_comment", 391), ((Tag1 (0, (Tag3 ((("t_or_comment", 387)), 0, (0)), 100000000, 0, -35), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Type"), "t"), 0, (0)), 100000000, 0, -34), 0), 100000000, 0, -33), 0, (("src/type_with_layout.mli", 27, 748, 752), ("src/type_with_layout.mli", 27, 748, 801), 0), 0, Tag1 ("Sexplib__Type_with_layout", 14)), 0)])), 0, (("src/type_with_layout.mli", 8, 156, 158), ("src/type_with_layout.mli", 28, 802, 807), 0), Tag1 ("Sexplib__Type_with_layout", 15)), 0)])), 0, (("src/type_with_layout.mli", 3, 76, 76), ("src/type_with_layout.mli", 29, 808, 811), 0), Tag1 ("Sexplib__Type_with_layout", 16)), 0, 0); Tag3 (("Parsed", 374), 0, ((Tag1 (Tag2 ((("Make", 373)), Tag1 (Tag1 ((Tag2 ("Sexplib")), "Src_pos"), "Absolute")), "S")), 0, (("src/type_with_layout.mli", 32, 856, 856), ("src/type_with_layout.mli", 32, 856, 896), 0), Tag1 ("Sexplib__Type_with_layout", 17)), 0, 0); Tag1 (("t", 375), (0, 0, Tag1 ([(("Atom", 293), ([(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Src_pos"), "Relative"), "t"), 0, (0)), 100000000, 0, -22); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -23); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -25)], (0)), 100000000, 0, -24)]), 0, (("src/type_with_layout.mli", 11, 270, 276), ("src/type_with_layout.mli", 11, 270, 316), 0), 0, Tag1 ("Sexplib__Type_with_layout", 6)); (("List", 294), ([(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Src_pos"), "Relative"), "t"), 0, (0)), 100000000, 0, -26); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t_or_comment", 376)), 0, (0)), 100000000, 0, -28)], (0)), 100000000, 0, -27); (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Src_pos"), "Relative"), "t"), 0, (0)), 100000000, 0, -29)]), 0, (("src/type_with_layout.mli", 12, 354, 360), ("src/type_with_layout.mli", 12, 354, 403), 0), 0, Tag1 ("Sexplib__Type_with_layout", 7))], 0), 1, 0, 0, 0, 0, 0, (("src/type_with_layout.mli", 10, 257, 261), ("src/type_with_layout.mli", 12, 354, 403), 0), 0, 0, 0, Tag1 ("Sexplib__Type_with_layout", 3)), 1, 0); Tag1 (("t_or_comment", 376), (0, 0, Tag1 ([(("Sexp", 295), ([(Tag3 ((("t", 375)), 0, (0)), 100000000, 0, -20)]), 0, (("src/type_with_layout.mli", 16, 467, 473), ("src/type_with_layout.mli", 16, 467, 484), 0), 0, Tag1 ("Sexplib__Type_with_layout", 8)); (("Comment", 296), ([(Tag3 ((("comment", 377)), 0, (0)), 100000000, 0, -21)]), 0, (("src/type_with_layout.mli", 17, 485, 491), ("src/type_with_layout.mli", 17, 485, 511), 0), 0, Tag1 ("Sexplib__Type_with_layout", 9))], 0), 1, 0, 0, 0, 0, 0, (("src/type_with_layout.mli", 15, 444, 448), ("src/type_with_layout.mli", 17, 485, 511), 0), 0, 0, 0, Tag1 ("Sexplib__Type_with_layout", 4)), 2, 0); Tag1 (("comment", 377), (0, 0, Tag1 ([(("Plain_comment", 297), ([(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Src_pos"), "Relative"), "t"), 0, (0)), 100000000, 0, -14); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -15)]), 0, (("src/type_with_layout.mli", 20, 531, 537), ("src/type_with_layout.mli", 20, 531, 570), 0), 0, Tag1 ("Sexplib__Type_with_layout", 10)); (("Sexp_comment", 298), ([(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Src_pos"), "Relative"), "t"), 0, (0)), 100000000, 0, -16); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("comment", 377)), 0, (0)), 100000000, 0, -18)], (0)), 100000000, 0, -17); (Tag3 ((("t", 375)), 0, (0)), 100000000, 0, -19)]), 0, (("src/type_with_layout.mli", 21, 599, 605), ("src/type_with_layout.mli", 21, 599, 647), 0), 0, Tag1 ("Sexplib__Type_with_layout", 11))], 0), 1, 0, 0, 0, 0, 0, (("src/type_with_layout.mli", 19, 513, 517), ("src/type_with_layout.mli", 21, 599, 647), 0), 0, 0, 0, Tag1 ("Sexplib__Type_with_layout", 5)), 2, 0); (("sexp_of_t", 378), ((Tag1 (0, (Tag3 ((("t", 375)), 0, (0)), 100000000, 0, -13), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Type"), "t"), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("src/type_with_layout.mli", 25, 672, 676), ("src/type_with_layout.mli", 25, 672, 703), 0), 0, Tag1 ("Sexplib__Type_with_layout", 12)), 0); (("sexp_of_comment", 379), ((Tag1 (0, (Tag3 ((("comment", 377)), 0, (0)), 100000000, 0, -10), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Type"), "t"), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("src/type_with_layout.mli", 26, 704, 708), ("src/type_with_layout.mli", 26, 704, 747), 0), 0, Tag1 ("Sexplib__Type_with_layout", 13)), 0); (("sexp_of_t_or_comment", 380), ((Tag1 (0, (Tag3 ((("t_or_comment", 376)), 0, (0)), 100000000, 0, -7), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Type"), "t"), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("src/type_with_layout.mli", 27, 748, 752), ("src/type_with_layout.mli", 27, 748, 801), 0), 0, Tag1 ("Sexplib__Type_with_layout", 14)), 0); (("relativize", 381), ((Tag1 (0, (Tag3 (Tag1 ((("Parsed", 374)), "t_or_comment"), 0, (0)), 100000000, 0, -4), (Tag3 ((("t_or_comment", 376)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/type_with_layout.mli", 36, 983, 983), ("src/type_with_layout.mli", 36, 983, 1035), 0), 0, Tag1 ("Sexplib__Type_with_layout", 18)), 0)], "Sexplib__Type_with_layout", [("Sexplib__Type_with_layout", ("Q\170\019\238\156\246\192\156\b`\250o[6g\024")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sexplib__Type", ("\147\252\252\167_\149\137\235\001d\241\255`\173Cs")); ("Sexplib__Src_pos", ("\157\022\246\144K\127\174bk\214\128&E\nh\213")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("Sexplib", ("\249\031\145\178\014\020\n\209\129\143\012\015<K\177\189")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
val relativize : Parsed.t_or_comment -> t_or_comment

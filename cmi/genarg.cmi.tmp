module ArgT :
  sig
    type ('a, 'b, 'c) tag
    val eq :
      ('a1, 'b1, 'c1) tag ->
      ('a2, 'b2, 'c2) tag ->
      ('a1 * 'b1 * 'c1, 'a2 * 'b2 * 'c2) CSig.eq option
    val repr : ('a, 'b, 'c) tag -> string
    type any = Any : ('a, 'b, 'c) tag -> any
    val name : string -> any option
    val dump : unit -> (int * string) list
  end
type (_, _, _) genarg_type =
    ExtraArg : ('a, 'b, 'c) ArgT.tag -> ('a, 'b, 'c) genarg_type
  | ListArg :
      ('a, 'b, 'c) genarg_type -> ('a list, 'b list, 'c list) genarg_type
  | OptArg :
      ('a, 'b, 'c) genarg_type -> ('a option, 'b option, 'c option)
                                  genarg_type
  | PairArg : ('a1, 'b1, 'c1) genarg_type *
      ('a2, 'b2, 'c2) genarg_type -> ('a1 * 'a2, 'b1 * 'b2, 'c1 * 'c2)
                                     genarg_type
type 'a uniform_genarg_type = ('a, 'a, 'a) genarg_type
val make0 : string -> ('raw, 'glob, 'top) genarg_type
val create_arg : string -> ('raw, 'glob, 'top) genarg_type
type rlevel = [ `rlevel ]
type glevel = [ `glevel ]
type tlevel = [ `tlevel ]
type (_, _) abstract_argument_type =
    Rawwit : ('a, 'b, 'c) genarg_type -> ('a, rlevel) abstract_argument_type
  | Glbwit : ('a, 'b, 'c) genarg_type -> ('b, glevel) abstract_argument_type
  | Topwit : ('a, 'b, 'c) genarg_type -> ('c, tlevel) abstract_argument_type
type 'a raw_abstract_argument_type = ('a, rlevel) abstract_argument_type
type 'a glob_abstract_argument_type = ('a, glevel) abstract_argument_type
type 'a typed_abstract_argument_type = ('a, tlevel) abstract_argument_type
val rawwit : ('a, 'b, 'c) genarg_type -> ('a, rlevel) abstract_argument_type
val glbwit : ('a, 'b, 'c) genarg_type -> ('b, glevel) abstract_argument_type
val topwit : ('a, 'b, 'c) genarg_type -> ('c, tlevel) abstract_argument_type
type 'l generic_argument =
    GenArg : ('a, 'l) abstract_argument_type * 'a -> 'l generic_argument
type raw_generic_argument = rlevel generic_argument
type glob_generic_argument = glevel generic_argument
type typed_generic_argument = tlevel generic_argument
val in_gen : ('a, 'co) abstract_argument_type -> 'a -> 'co generic_argument
val out_gen : ('a, 'co) abstract_argument_type -> 'co generic_argument -> 'a
val has_type :
  'co generic_argument -> ('a, 'co) abstract_argument_type -> bool
type argument_type = ArgumentType : ('a, 'b, 'c) genarg_type -> argument_type
val argument_type_eq : argument_type -> argument_type -> bool
val genarg_type_eq :
  ('a1, 'b1, 'c1) genarg_type ->
  ('a2, 'b2, 'c2) genarg_type ->
  ('a1 * 'b1 * 'c1, 'a2 * 'b2 * 'c2) CSig.eq option
val abstract_argument_type_eq :
  ('a, 'l) abstract_argument_type ->
  ('b, 'l) abstract_argument_type -> ('a, 'b) CSig.eq option
val pr_argument_type : argument_type -> Pp.t
val genarg_tag : 'a generic_argument -> argument_type
val unquote : ('a, 'co) abstract_argument_type -> argument_type
val get_arg_tag : ('a, 'b, 'c) genarg_type -> ('a, 'b, 'c) ArgT.tag
module type GenObj =
  sig
    type ('raw, 'glb, 'top) obj
    val name : string
    val default :
      ('raw, 'glb, 'top) genarg_type -> ('raw, 'glb, 'top) obj option
  end
module Register :
  functor (M : GenObj) ->
    sig
      val register0 :
        ('raw, 'glb, 'top) genarg_type -> ('raw, 'glb, 'top) M.obj -> unit
      val obj : ('raw, 'glb, 'top) genarg_type -> ('raw, 'glb, 'top) M.obj
      val fold_keys : (ArgT.any -> 'acc -> 'acc) -> 'acc -> 'acc
    end
val wit_list :
  ('a, 'b, 'c) genarg_type -> ('a list, 'b list, 'c list) genarg_type
val wit_opt :
  ('a, 'b, 'c) genarg_type -> ('a option, 'b option, 'c option) genarg_type
val wit_pair :
  ('a1, 'b1, 'c1) genarg_type ->
  ('a2, 'b2, 'c2) genarg_type ->
  ("DEBUG:rule", [Tag3 (("ArgT", 398), 0, (Tag1 ([Tag1 (("tag", 434), ([((("a")), 100000000, 0, -256); ((("b")), 100000000, 0, -257); ((("c")), 100000000, 0, -258)], 3, 0, 1, 0, [7; 7; 7], [2; 2; 2], 0, 0, (("pretyping/genarg.mli", 51, 2574, 2576), ("pretyping/genarg.mli", 51, 2574, 2597), 0), 0, 0, 0, Tag1 ("Genarg", 0)), 1, 0); (("eq", 435), ((Tag1 (0, (Tag3 ((("tag", 434)), [((("a1")), 100000000, 0, -247); ((("b1")), 100000000, 0, -248); ((("c1")), 100000000, 0, -249)], (0)), 100000000, 0, -255), (Tag1 (0, (Tag3 ((("tag", 434)), [((("a2")), 100000000, 0, -251); ((("b2")), 100000000, 0, -252); ((("c2")), 100000000, 0, -253)], (0)), 100000000, 0, -254), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("CSig")), "eq"), [(Tag2 ([((("a1")), 100000000, 0, -247); ((("b1")), 100000000, 0, -248); ((("c1")), 100000000, 0, -249)]), 100000000, 0, -246); (Tag2 ([((("a2")), 100000000, 0, -251); ((("b2")), 100000000, 0, -252); ((("c2")), 100000000, 0, -253)]), 100000000, 0, -250)], (0)), 100000000, 0, -245)], (0)), 100000000, 0, -244), 0), 100000000, 0, -243), 0), 100000000, 0, -242), 0, (("pretyping/genarg.mli", 52, 2598, 2600), ("pretyping/genarg.mli", 52, 2598, 2704), 0), 0, Tag1 ("Genarg", 1)), 0); (("repr", 436), ((Tag1 (0, (Tag3 ((("tag", 434)), [((("a")), 100000000, 0, -239); ((("b")), 100000000, 0, -240); ((("c")), 100000000, 0, -241)], (0)), 100000000, 0, -238), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -237), 0), 100000000, 0, -236), 0, (("pretyping/genarg.mli", 53, 2705, 2707), ("pretyping/genarg.mli", 53, 2705, 2744), 0), 0, Tag1 ("Genarg", 2)), 0); Tag1 (("any", 437), (0, 0, Tag1 ([(("Any", 278), ([(Tag3 ((("tag", 434)), [((("a")), 100000000, 0, -233); ((("b")), 100000000, 0, -234); ((("c")), 100000000, 0, -235)], (0)), 100000000, 0, -232)]), ((Tag3 ((("any", 437)), 0, (0)), 100000000, 0, -231)), (("pretyping/genarg.mli", 54, 2745, 2758), ("pretyping/genarg.mli", 54, 2745, 2787), 0), 0, Tag1 ("Genarg", 4))], 0), 1, 0, 0, 0, 0, 0, (("pretyping/genarg.mli", 54, 2745, 2747), ("pretyping/genarg.mli", 54, 2745, 2787), 0), 0, 0, 1, Tag1 ("Genarg", 3)), 1, 0); (("name", 438), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -230), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("any", 437)), 0, (0)), 100000000, 0, -229)], (0)), 100000000, 0, -228), 0), 100000000, 0, -227), 0, (("pretyping/genarg.mli", 55, 2788, 2790), ("pretyping/genarg.mli", 55, 2788, 2821), 0), 0, Tag1 ("Genarg", 5)), 0); (("dump", 439), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -226), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -224); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -225)]), 100000000, 0, -223)], (0)), 100000000, 0, -222), 0), 100000000, 0, -221), 0, (("pretyping/genarg.mli", 56, 2822, 2824), ("pretyping/genarg.mli", 56, 2822, 2862), 0), 0, Tag1 ("Genarg", 6)), 0)]), 0, (("pretyping/genarg.mli", 49, 2556, 2556), ("pretyping/genarg.mli", 57, 2863, 2866), 0), Tag1 ("Genarg", 7)), 0, 0); Tag1 (("genarg_type", 399), ([((("_")), 100000000, 0, -218); ((("_")), 100000000, 0, -219); ((("_")), 100000000, 0, -220)], 3, Tag1 ([(("ExtraArg", 283), ([(Tag3 (Tag1 ((("ArgT", 398)), "tag"), [((("a")), 100000000, 0, -186); ((("b")), 100000000, 0, -187); ((("c")), 100000000, 0, -188)], (0)), 100000000, 0, -189)]), ((Tag3 ((("genarg_type", 399)), [((("a")), 100000000, 0, -186); ((("b")), 100000000, 0, -187); ((("c")), 100000000, 0, -188)], (0)), 100000000, 0, -185)), (("pretyping/genarg.mli", 62, 3048, 3048), ("pretyping/genarg.mli", 62, 3048, 3110), 0), 0, Tag1 ("Genarg", 9)); (("ListArg", 284), ([(Tag3 ((("genarg_type", 399)), [((("a")), 100000000, 0, -192); ((("b")), 100000000, 0, -194); ((("c")), 100000000, 0, -196)], (0)), 100000000, 0, -197)]), ((Tag3 ((("genarg_type", 399)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -192)], (0)), 100000000, 0, -191); (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -194)], (0)), 100000000, 0, -193); (Tag3 ((Tag3 ("list", 9)), [((("c")), 100000000, 0, -196)], (0)), 100000000, 0, -195)], (0)), 100000000, 0, -190)), (("pretyping/genarg.mli", 63, 3111, 3111), ("pretyping/genarg.mli", 63, 3111, 3190), 0), 0, Tag1 ("Genarg", 10)); (("OptArg", 285), ([(Tag3 ((("genarg_type", 399)), [((("a")), 100000000, 0, -200); ((("b")), 100000000, 0, -202); ((("c")), 100000000, 0, -204)], (0)), 100000000, 0, -205)]), ((Tag3 ((("genarg_type", 399)), [(Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -200)], (0)), 100000000, 0, -199); (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -202)], (0)), 100000000, 0, -201); (Tag3 ((Tag3 ("option", 10)), [((("c")), 100000000, 0, -204)], (0)), 100000000, 0, -203)], (0)), 100000000, 0, -198)), (("pretyping/genarg.mli", 64, 3191, 3191), ("pretyping/genarg.mli", 64, 3191, 3275), 0), 0, Tag1 ("Genarg", 11)); (("PairArg", 286), ([(Tag3 ((("genarg_type", 399)), [((("a1")), 100000000, 0, -208); ((("b1")), 100000000, 0, -211); ((("c1")), 100000000, 0, -214)], (0)), 100000000, 0, -216); (Tag3 ((("genarg_type", 399)), [((("a2")), 100000000, 0, -209); ((("b2")), 100000000, 0, -212); ((("c2")), 100000000, 0, -215)], (0)), 100000000, 0, -217)]), ((Tag3 ((("genarg_type", 399)), [(Tag2 ([((("a1")), 100000000, 0, -208); ((("a2")), 100000000, 0, -209)]), 100000000, 0, -207); (Tag2 ([((("b1")), 100000000, 0, -211); ((("b2")), 100000000, 0, -212)]), 100000000, 0, -210); (Tag2 ([((("c1")), 100000000, 0, -214); ((("c2")), 100000000, 0, -215)]), 100000000, 0, -213)], (0)), 100000000, 0, -206)), (("pretyping/genarg.mli", 65, 3276, 3276), ("pretyping/genarg.mli", 66, 3349, 3396), 0), 0, Tag1 ("Genarg", 12))], 0), 1, 0, [63; 63; 63], [0; 0; 0], 0, 0, (("pretyping/genarg.mli", 61, 3019, 3019), ("pretyping/genarg.mli", 66, 3349, 3396), 0), 0, 0, 0, Tag1 ("Genarg", 8)), 1, 0); Tag1 (("uniform_genarg_type", 400), ([((("a")), 100000000, 0, -184)], 1, 0, 1, ((Tag3 ((("genarg_type", 399)), [((("a")), 100000000, 0, -184); ((("a")), 100000000, 0, -184); ((("a")), 100000000, 0, -184)], (0)), 100000000, 0, -183)), [63], [0], 0, 0, (("pretyping/genarg.mli", 68, 3398, 3398), ("pretyping/genarg.mli", 68, 3398, 3452), 0), 0, 0, 0, Tag1 ("Genarg", 13)), 1, 0); (("make0", 401), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -182), (Tag3 ((("genarg_type", 399)), [((("raw")), 100000000, 0, -179); ((("glob")), 100000000, 0, -180); ((("top")), 100000000, 0, -181)], (0)), 100000000, 0, -178), 0), 100000000, 0, -177), 0, (("pretyping/genarg.mli", 71, 3509, 3509), ("pretyping/genarg.mli", 71, 3509, 3562), 0), 0, Tag1 ("Genarg", 14)), 0); (("create_arg", 402), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -176), (Tag3 ((("genarg_type", 399)), [((("raw")), 100000000, 0, -173); ((("glob")), 100000000, 0, -174); ((("top")), 100000000, 0, -175)], (0)), 100000000, 0, -172), 0), 100000000, 0, -171), 0, (("pretyping/genarg.mli", 75, 3678, 3678), ("pretyping/genarg.mli", 75, 3678, 3736), 0), 0, Tag1 ("Genarg", 15)), 0); Tag1 (("rlevel", 403), (0, 0, 0, 1, ((Tag8 (([("rlevel", (0))], (0, 100000000, 0, -170), 1, 0, 0)), 100000000, 0, -169)), 0, 0, 0, 0, (("pretyping/genarg.mli", 83, 3923, 3923), ("pretyping/genarg.mli", 83, 3923, 3948), 0), 0, 1, 0, Tag1 ("Genarg", 16)), 1, 0); Tag1 (("glevel", 404), (0, 0, 0, 1, ((Tag8 (([("glevel", (0))], (0, 100000000, 0, -168), 1, 0, 0)), 100000000, 0, -167)), 0, 0, 0, 0, (("pretyping/genarg.mli", 84, 3949, 3949), ("pretyping/genarg.mli", 84, 3949, 3974), 0), 0, 1, 0, Tag1 ("Genarg", 17)), 1, 0); Tag1 (("tlevel", 405), (0, 0, 0, 1, ((Tag8 (([("tlevel", (0))], (0, 100000000, 0, -166), 1, 0, 0)), 100000000, 0, -165)), 0, 0, 0, 0, (("pretyping/genarg.mli", 85, 3975, 3975), ("pretyping/genarg.mli", 85, 3975, 4000), 0), 0, 1, 0, Tag1 ("Genarg", 18)), 1, 0); Tag1 (("abstract_argument_type", 406), ([((("_")), 100000000, 0, -163); ((("_")), 100000000, 0, -164)], 2, Tag1 ([(("Rawwit", 294), ([(Tag3 ((("genarg_type", 399)), [((("a")), 100000000, 0, -146); ((("b")), 100000000, 0, -149); ((("c")), 100000000, 0, -150)], (0)), 100000000, 0, -148)]), ((Tag3 ((("abstract_argument_type", 406)), [((("a")), 100000000, 0, -146); (Tag3 ((("rlevel", 403)), 0, (0)), 100000000, 0, -147)], (0)), 100000000, 0, -145)), (("pretyping/genarg.mli", 90, 4154, 4154), ("pretyping/genarg.mli", 90, 4154, 4228), 0), 0, Tag1 ("Genarg", 20)); (("Glbwit", 295), ([(Tag3 ((("genarg_type", 399)), [((("a")), 100000000, 0, -155); ((("b")), 100000000, 0, -152); ((("c")), 100000000, 0, -156)], (0)), 100000000, 0, -154)]), ((Tag3 ((("abstract_argument_type", 406)), [((("b")), 100000000, 0, -152); (Tag3 ((("glevel", 404)), 0, (0)), 100000000, 0, -153)], (0)), 100000000, 0, -151)), (("pretyping/genarg.mli", 91, 4229, 4229), ("pretyping/genarg.mli", 91, 4229, 4303), 0), 0, Tag1 ("Genarg", 21)); (("Topwit", 296), ([(Tag3 ((("genarg_type", 399)), [((("a")), 100000000, 0, -161); ((("b")), 100000000, 0, -162); ((("c")), 100000000, 0, -158)], (0)), 100000000, 0, -160)]), ((Tag3 ((("abstract_argument_type", 406)), [((("c")), 100000000, 0, -158); (Tag3 ((("tlevel", 405)), 0, (0)), 100000000, 0, -159)], (0)), 100000000, 0, -157)), (("pretyping/genarg.mli", 92, 4304, 4304), ("pretyping/genarg.mli", 92, 4304, 4378), 0), 0, Tag1 ("Genarg", 22))], 0), 1, 0, [63; 63], [0; 0], 0, 0, (("pretyping/genarg.mli", 89, 4117, 4117), ("pretyping/genarg.mli", 92, 4304, 4378), 0), 0, 0, 0, Tag1 ("Genarg", 19)), 1, 0); Tag1 (("raw_abstract_argument_type", 407), ([((("a")), 100000000, 0, -143)], 1, 0, 1, ((Tag3 ((("abstract_argument_type", 406)), [((("a")), 100000000, 0, -143); (Tag3 ((("rlevel", 403)), 0, (0)), 100000000, 0, -144)], (0)), 100000000, 0, -142)), [63], [0], 0, 0, (("pretyping/genarg.mli", 94, 4380, 4380), ("pretyping/genarg.mli", 94, 4380, 4452), 0), 0, 0, 0, Tag1 ("Genarg", 23)), 1, 0); Tag1 (("glob_abstract_argument_type", 408), ([((("a")), 100000000, 0, -140)], 1, 0, 1, ((Tag3 ((("abstract_argument_type", 406)), [((("a")), 100000000, 0, -140); (Tag3 ((("glevel", 404)), 0, (0)), 100000000, 0, -141)], (0)), 100000000, 0, -139)), [63], [0], 0, 0, (("pretyping/genarg.mli", 97, 4492, 4492), ("pretyping/genarg.mli", 97, 4492, 4565), 0), 0, 0, 0, Tag1 ("Genarg", 24)), 1, 0); Tag1 (("typed_abstract_argument_type", 409), ([((("a")), 100000000, 0, -137)], 1, 0, 1, ((Tag3 ((("abstract_argument_type", 406)), [((("a")), 100000000, 0, -137); (Tag3 ((("tlevel", 405)), 0, (0)), 100000000, 0, -138)], (0)), 100000000, 0, -136)), [63], [0], 0, 0, (("pretyping/genarg.mli", 100, 4612, 4612), ("pretyping/genarg.mli", 100, 4612, 4686), 0), 0, 0, 0, Tag1 ("Genarg", 25)), 1, 0); (("rawwit", 410), ((Tag1 (0, (Tag3 ((("genarg_type", 399)), [((("a")), 100000000, 0, -131); ((("b")), 100000000, 0, -134); ((("c")), 100000000, 0, -135)], (0)), 100000000, 0, -133), (Tag3 ((("abstract_argument_type", 406)), [((("a")), 100000000, 0, -131); (Tag3 ((("rlevel", 403)), 0, (0)), 100000000, 0, -132)], (0)), 100000000, 0, -130), 0), 100000000, 0, -129), 0, (("pretyping/genarg.mli", 105, 4759, 4759), ("pretyping/genarg.mli", 105, 4759, 4835), 0), 0, Tag1 ("Genarg", 26)), 0); (("glbwit", 411), ((Tag1 (0, (Tag3 ((("genarg_type", 399)), [((("a")), 100000000, 0, -127); ((("b")), 100000000, 0, -124); ((("c")), 100000000, 0, -128)], (0)), 100000000, 0, -126), (Tag3 ((("abstract_argument_type", 406)), [((("b")), 100000000, 0, -124); (Tag3 ((("glevel", 404)), 0, (0)), 100000000, 0, -125)], (0)), 100000000, 0, -123), 0), 100000000, 0, -122), 0, (("pretyping/genarg.mli", 108, 4884, 4884), ("pretyping/genarg.mli", 108, 4884, 4960), 0), 0, Tag1 ("Genarg", 27)), 0); (("topwit", 412), ((Tag1 (0, (Tag3 ((("genarg_type", 399)), [((("a")), 100000000, 0, -120); ((("b")), 100000000, 0, -121); ((("c")), 100000000, 0, -117)], (0)), 100000000, 0, -119), (Tag3 ((("abstract_argument_type", 406)), [((("c")), 100000000, 0, -117); (Tag3 ((("tlevel", 405)), 0, (0)), 100000000, 0, -118)], (0)), 100000000, 0, -116), 0), 100000000, 0, -115), 0, (("pretyping/genarg.mli", 111, 5016, 5016), ("pretyping/genarg.mli", 111, 5016, 5092), 0), 0, Tag1 ("Genarg", 28)), 0); Tag1 (("generic_argument", 413), ([((("l")), 100000000, 0, -114)], 1, Tag1 ([(("GenArg", 304), ([(Tag3 ((("abstract_argument_type", 406)), [((("a")), 100000000, 0, -113); ((("l")), 100000000, 0, -111)], (0)), 100000000, 0, -112); ((("a")), 100000000, 0, -113)]), ((Tag3 ((("generic_argument", 413)), [((("l")), 100000000, 0, -111)], (0)), 100000000, 0, -110)), (("pretyping/genarg.mli", 116, 5180, 5207), ("pretyping/genarg.mli", 116, 5180, 5275), 0), 0, Tag1 ("Genarg", 30))], 0), 1, 0, [63], [0], 0, 0, (("pretyping/genarg.mli", 116, 5180, 5180), ("pretyping/genarg.mli", 116, 5180, 5275), 0), 0, 0, 0, Tag1 ("Genarg", 29)), 1, 0); Tag1 (("raw_generic_argument", 414), (0, 0, 0, 1, ((Tag3 ((("generic_argument", 413)), [(Tag3 ((("rlevel", 403)), 0, (0)), 100000000, 0, -109)], (0)), 100000000, 0, -108)), 0, 0, 0, 0, (("pretyping/genarg.mli", 120, 5425, 5425), ("pretyping/genarg.mli", 120, 5425, 5476), 0), 0, 0, 0, Tag1 ("Genarg", 31)), 1, 0); Tag1 (("glob_generic_argument", 415), (0, 0, 0, 1, ((Tag3 ((("generic_argument", 413)), [(Tag3 ((("glevel", 404)), 0, (0)), 100000000, 0, -107)], (0)), 100000000, 0, -106)), 0, 0, 0, 0, (("pretyping/genarg.mli", 121, 5477, 5477), ("pretyping/genarg.mli", 121, 5477, 5529), 0), 0, 0, 0, Tag1 ("Genarg", 32)), 1, 0); Tag1 (("typed_generic_argument", 416), (0, 0, 0, 1, ((Tag3 ((("generic_argument", 413)), [(Tag3 ((("tlevel", 405)), 0, (0)), 100000000, 0, -105)], (0)), 100000000, 0, -104)), 0, 0, 0, 0, (("pretyping/genarg.mli", 122, 5530, 5530), ("pretyping/genarg.mli", 122, 5530, 5583), 0), 0, 0, 0, Tag1 ("Genarg", 33)), 1, 0); (("in_gen", 417), ((Tag1 (0, (Tag3 ((("abstract_argument_type", 406)), [((("a")), 100000000, 0, -102); ((("co")), 100000000, 0, -101)], (0)), 100000000, 0, -103), (Tag1 (0, ((("a")), 100000000, 0, -102), (Tag3 ((("generic_argument", 413)), [((("co")), 100000000, 0, -101)], (0)), 100000000, 0, -100), 0), 100000000, 0, -99), 0), 100000000, 0, -98), 0, (("pretyping/genarg.mli", 126, 5610, 5610), ("pretyping/genarg.mli", 126, 5610, 5685), 0), 0, Tag1 ("Genarg", 34)), 0); (("out_gen", 418), ((Tag1 (0, (Tag3 ((("abstract_argument_type", 406)), [((("a")), 100000000, 0, -94); ((("co")), 100000000, 0, -96)], (0)), 100000000, 0, -97), (Tag1 (0, (Tag3 ((("generic_argument", 413)), [((("co")), 100000000, 0, -96)], (0)), 100000000, 0, -95), ((("a")), 100000000, 0, -94), 0), 100000000, 0, -93), 0), 100000000, 0, -92), 0, (("pretyping/genarg.mli", 129, 5763, 5763), ("pretyping/genarg.mli", 129, 5763, 5839), 0), 0, Tag1 ("Genarg", 35)), 0); (("has_type", 419), ((Tag1 (0, (Tag3 ((("generic_argument", 413)), [((("co")), 100000000, 0, -90)], (0)), 100000000, 0, -91), (Tag1 (0, (Tag3 ((("abstract_argument_type", 406)), [((("a")), 100000000, 0, -89); ((("co")), 100000000, 0, -90)], (0)), 100000000, 0, -88), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -87), 0), 100000000, 0, -86), 0), 100000000, 0, -85), 0, (("pretyping/genarg.mli", 133, 5972, 5972), ("pretyping/genarg.mli", 133, 5972, 6051), 0), 0, Tag1 ("Genarg", 36)), 0); Tag1 (("argument_type", 420), (0, 0, Tag1 ([(("ArgumentType", 312), ([(Tag3 ((("genarg_type", 399)), [((("a")), 100000000, 0, -82); ((("b")), 100000000, 0, -83); ((("c")), 100000000, 0, -84)], (0)), 100000000, 0, -81)]), ((Tag3 ((("argument_type", 420)), 0, (0)), 100000000, 0, -80)), (("pretyping/genarg.mli", 139, 6220, 6241), ("pretyping/genarg.mli", 139, 6220, 6297), 0), 0, Tag1 ("Genarg", 38))], 0), 1, 0, 0, 0, 0, 0, (("pretyping/genarg.mli", 139, 6220, 6220), ("pretyping/genarg.mli", 139, 6220, 6297), 0), 0, 0, 1, Tag1 ("Genarg", 37)), 1, 0); (("argument_type_eq", 421), ((Tag1 (0, (Tag3 ((("argument_type", 420)), 0, (0)), 100000000, 0, -79), (Tag1 (0, (Tag3 ((("argument_type", 420)), 0, (0)), 100000000, 0, -78), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -77), 0), 100000000, 0, -76), 0), 100000000, 0, -75), 0, (("pretyping/genarg.mli", 143, 6322, 6322), ("pretyping/genarg.mli", 143, 6322, 6383), 0), 0, Tag1 ("Genarg", 39)), 0); (("genarg_type_eq", 422), ((Tag1 (0, (Tag3 ((("genarg_type", 399)), [((("a1")), 100000000, 0, -66); ((("b1")), 100000000, 0, -67); ((("c1")), 100000000, 0, -68)], (0)), 100000000, 0, -74), (Tag1 (0, (Tag3 ((("genarg_type", 399)), [((("a2")), 100000000, 0, -70); ((("b2")), 100000000, 0, -71); ((("c2")), 100000000, 0, -72)], (0)), 100000000, 0, -73), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("CSig")), "eq"), [(Tag2 ([((("a1")), 100000000, 0, -66); ((("b1")), 100000000, 0, -67); ((("c1")), 100000000, 0, -68)]), 100000000, 0, -65); (Tag2 ([((("a2")), 100000000, 0, -70); ((("b2")), 100000000, 0, -71); ((("c2")), 100000000, 0, -72)]), 100000000, 0, -69)], (0)), 100000000, 0, -64)], (0)), 100000000, 0, -63), 0), 100000000, 0, -62), 0), 100000000, 0, -61), 0, (("pretyping/genarg.mli", 144, 6384, 6384), ("pretyping/genarg.mli", 147, 6471, 6522), 0), 0, Tag1 ("Genarg", 40)), 0); (("abstract_argument_type_eq", 423), ((Tag1 (0, (Tag3 ((("abstract_argument_type", 406)), [((("a")), 100000000, 0, -56); ((("l")), 100000000, 0, -59)], (0)), 100000000, 0, -60), (Tag1 (0, (Tag3 ((("abstract_argument_type", 406)), [((("b")), 100000000, 0, -57); ((("l")), 100000000, 0, -59)], (0)), 100000000, 0, -58), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("CSig")), "eq"), [((("a")), 100000000, 0, -56); ((("b")), 100000000, 0, -57)], (0)), 100000000, 0, -55)], (0)), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52), 0, (("pretyping/genarg.mli", 148, 6523, 6523), ("pretyping/genarg.mli", 150, 6627, 6652), 0), 0, Tag1 ("Genarg", 41)), 0); (("pr_argument_type", 424), ((Tag1 (0, (Tag3 ((("argument_type", 420)), 0, (0)), 100000000, 0, -51), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -50), 0), 100000000, 0, -49), 0, (("pretyping/genarg.mli", 152, 6654, 6654), ("pretyping/genarg.mli", 152, 6654, 6698), 0), 0, Tag1 ("Genarg", 42)), 0); (("genarg_tag", 425), ((Tag1 (0, (Tag3 ((("generic_argument", 413)), [((("a")), 100000000, 0, -48)], (0)), 100000000, 0, -47), (Tag3 ((("argument_type", 420)), 0, (0)), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("pretyping/genarg.mli", 155, 6763, 6763), ("pretyping/genarg.mli", 155, 6763, 6816), 0), 0, Tag1 ("Genarg", 43)), 0); (("unquote", 426), ((Tag1 (0, (Tag3 ((("abstract_argument_type", 406)), [((("a")), 100000000, 0, -43); ((("co")), 100000000, 0, -44)], (0)), 100000000, 0, -42), (Tag3 ((("argument_type", 420)), 0, (0)), 100000000, 0, -41), 0), 100000000, 0, -40), 0, (("pretyping/genarg.mli", 157, 6818, 6818), ("pretyping/genarg.mli", 157, 6818, 6881), 0), 0, Tag1 ("Genarg", 44)), 0); (("get_arg_tag", 427), ((Tag1 (0, (Tag3 ((("genarg_type", 399)), [((("a")), 100000000, 0, -36); ((("b")), 100000000, 0, -37); ((("c")), 100000000, 0, -38)], (0)), 100000000, 0, -39), (Tag3 (Tag1 ((("ArgT", 398)), "tag"), [((("a")), 100000000, 0, -36); ((("b")), 100000000, 0, -37); ((("c")), 100000000, 0, -38)], (0)), 100000000, 0, -35), 0), 100000000, 0, -34), 0, (("pretyping/genarg.mli", 163, 7005, 7005), ("pretyping/genarg.mli", 163, 7005, 7072), 0), 0, Tag1 ("Genarg", 45)), 0); Tag4 (("GenObj", 428), ((Tag1 ([Tag1 (("obj", 440), ([((("raw")), 100000000, 0, -267); ((("glb")), 100000000, 0, -268); ((("top")), 100000000, 0, -269)], 3, 0, 1, 0, [7; 7; 7], [2; 2; 2], 0, 0, (("pretyping/genarg.mli", 168, 7168, 7170), ("pretyping/genarg.mli", 168, 7168, 7197), 0), 0, 0, 0, Tag1 ("Genarg", 46)), 1, 0); (("name", 441), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -266), 0, (("pretyping/genarg.mli", 171, 7250, 7252), ("pretyping/genarg.mli", 171, 7250, 7269), 0), 0, Tag1 ("Genarg", 47)), 0); (("default", 442), ((Tag1 (0, (Tag3 ((("genarg_type", 399)), [((("raw")), 100000000, 0, -262); ((("glb")), 100000000, 0, -263); ((("top")), 100000000, 0, -264)], (0)), 100000000, 0, -265), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("obj", 440)), [((("raw")), 100000000, 0, -262); ((("glb")), 100000000, 0, -263); ((("top")), 100000000, 0, -264)], (0)), 100000000, 0, -261)], (0)), 100000000, 0, -260), 0), 100000000, 0, -259), 0, (("pretyping/genarg.mli", 174, 7333, 7335), ("pretyping/genarg.mli", 174, 7333, 7412), 0), 0, Tag1 ("Genarg", 48)), 0)])), 0, (("pretyping/genarg.mli", 166, 7143, 7143), ("pretyping/genarg.mli", 176, 7489, 7492), 0), Tag1 ("Genarg", 49)), 0); Tag3 (("Register", 429), 0, (Tag2 (((("M", 433)), ((("GenObj", 428)))), Tag1 ([(("register0", 443), ((Tag1 (0, (Tag3 ((("genarg_type", 399)), [((("raw")), 100000000, 0, -286); ((("glb")), 100000000, 0, -287); ((("top")), 100000000, 0, -288)], (0)), 100000000, 0, -289), (Tag1 (0, (Tag3 (Tag1 ((("M", 433)), "obj"), [((("raw")), 100000000, 0, -286); ((("glb")), 100000000, 0, -287); ((("top")), 100000000, 0, -288)], (0)), 100000000, 0, -285), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -284), 0), 100000000, 0, -283), 0), 100000000, 0, -282), 0, (("pretyping/genarg.mli", 183, 7647, 7649), ("pretyping/genarg.mli", 184, 7699, 7735), 0), 0, Tag1 ("Genarg", 51)), 0); (("obj", 444), ((Tag1 (0, (Tag3 ((("genarg_type", 399)), [((("raw")), 100000000, 0, -278); ((("glb")), 100000000, 0, -279); ((("top")), 100000000, 0, -280)], (0)), 100000000, 0, -281), (Tag3 (Tag1 ((("M", 433)), "obj"), [((("raw")), 100000000, 0, -278); ((("glb")), 100000000, 0, -279); ((("top")), 100000000, 0, -280)], (0)), 100000000, 0, -277), 0), 100000000, 0, -276), 0, (("pretyping/genarg.mli", 187, 7792, 7794), ("pretyping/genarg.mli", 187, 7792, 7862), 0), 0, Tag1 ("Genarg", 52)), 0); (("fold_keys", 445), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((("ArgT", 398)), "any"), 0, (0)), 100000000, 0, -275), (Tag1 (0, ((("acc")), 100000000, 0, -272), ((("acc")), 100000000, 0, -272), 0), 100000000, 0, -274), 0), 100000000, 0, -273), (Tag1 (0, ((("acc")), 100000000, 0, -272), ((("acc")), 100000000, 0, -272), 0), 100000000, 0, -271), 0), 100000000, 0, -270), 0, (("pretyping/genarg.mli", 190, 7922, 7924), ("pretyping/genarg.mli", 190, 7922, 7982), 0), 0, Tag1 ("Genarg", 53)), 0)])), 0, (("pretyping/genarg.mli", 178, 7494, 7494), ("pretyping/genarg.mli", 193, 8024, 8027), 0), Tag1 ("Genarg", 54)), 0, 0); (("wit_list", 430), ((Tag1 (0, (Tag3 ((("genarg_type", 399)), [((("a")), 100000000, 0, -28); ((("b")), 100000000, 0, -30); ((("c")), 100000000, 0, -32)], (0)), 100000000, 0, -33), (Tag3 ((("genarg_type", 399)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -28)], (0)), 100000000, 0, -27); (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -30)], (0)), 100000000, 0, -29); (Tag3 ((Tag3 ("list", 9)), [((("c")), 100000000, 0, -32)], (0)), 100000000, 0, -31)], (0)), 100000000, 0, -26), 0), 100000000, 0, -25), 0, (("pretyping/genarg.mli", 201, 8126, 8126), ("pretyping/genarg.mli", 201, 8126, 8208), 0), 0, Tag1 ("Genarg", 55)), 0); (("wit_opt", 431), ((Tag1 (0, (Tag3 ((("genarg_type", 399)), [((("a")), 100000000, 0, -19); ((("b")), 100000000, 0, -21); ((("c")), 100000000, 0, -23)], (0)), 100000000, 0, -24), (Tag3 ((("genarg_type", 399)), [(Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -19)], (0)), 100000000, 0, -18); (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -21)], (0)), 100000000, 0, -20); (Tag3 ((Tag3 ("option", 10)), [((("c")), 100000000, 0, -23)], (0)), 100000000, 0, -22)], (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("pretyping/genarg.mli", 202, 8209, 8209), ("pretyping/genarg.mli", 202, 8209, 8296), 0), 0, Tag1 ("Genarg", 56)), 0); (("wit_pair", 432), ((Tag1 (0, (Tag3 ((("genarg_type", 399)), [((("a1")), 100000000, 0, -6); ((("b1")), 100000000, 0, -9); ((("c1")), 100000000, 0, -12)], (0)), 100000000, 0, -15), (Tag1 (0, (Tag3 ((("genarg_type", 399)), [((("a2")), 100000000, 0, -7); ((("b2")), 100000000, 0, -10); ((("c2")), 100000000, 0, -13)], (0)), 100000000, 0, -14), (Tag3 ((("genarg_type", 399)), [(Tag2 ([((("a1")), 100000000, 0, -6); ((("a2")), 100000000, 0, -7)]), 100000000, 0, -5); (Tag2 ([((("b1")), 100000000, 0, -9); ((("b2")), 100000000, 0, -10)]), 100000000, 0, -8); (Tag2 ([((("c1")), 100000000, 0, -12); ((("c2")), 100000000, 0, -13)]), 100000000, 0, -11)], (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("pretyping/genarg.mli", 203, 8297, 8297), ("pretyping/genarg.mli", 204, 8374, 8421), 0), 0, Tag1 ("Genarg", 57)), 0)], "Genarg", [("Genarg", ("\1434\015\001\152\196\005s\156\136\195\185\247\b3\t")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t"))], [(0)])
('a1 * 'a2, 'b1 * 'b2, 'c1 * 'c2) genarg_type

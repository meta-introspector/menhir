val string_of_char_ptr : (char, [ `C ]) Ctypes_static.pointer -> string
val char_ptr_of_string : string -> (char, [ `C ]) Ctypes_static.pointer
val string : string Ctypes_static.typ
val read_nullable :
  'a Ctypes_static.typ ->
  'b Ctypes_static.typ -> 'b Ctypes_static.ptr -> 'a option
val write_nullable :
  'a Ctypes_static.typ ->
  'b Ctypes_static.typ -> 'a option -> 'b Ctypes_static.ptr
val nullable_view :
  ?format_typ:((Format.formatter -> unit) -> Format.formatter -> unit) ->
  ?format:(Format.formatter -> 'a option -> unit) ->
  'a Ctypes_static.typ -> 'b Ctypes_static.typ -> 'a option Ctypes_static.typ
val read_nullable_funptr :
  'a Ctypes_static.typ ->
  'b Ctypes_static.fn -> 'b Ctypes_static.static_funptr -> 'a option
val write_nullable_funptr :
  'a Ctypes_static.typ ->
  'b Ctypes_static.fn -> 'a option -> 'b Ctypes_static.static_funptr
val nullable_funptr_view :
  ?format_typ:((Format.formatter -> unit) -> Format.formatter -> unit) ->
  ?format:(Format.formatter -> 'a option -> unit) ->
  'a Ctypes_static.typ -> 'b Ctypes_static.fn -> 'a option Ctypes_static.typ
val ptr_opt :
  'a Ctypes_static.typ -> 'a Ctypes_static.ptr option Ctypes_static.typ
val string_opt : string option Ctypes_static.typ
module type Signed_type =
  sig
    type t
    module Infix :
      sig
        val ( + ) : t -> t -> t
        val ( - ) : t -> t -> t
        val ( * ) : t -> t -> t
        val ( / ) : t -> t -> t
        val ( mod ) : t -> t -> t
        val ( land ) : t -> t -> t
        val ( lor ) : t -> t -> t
        val ( lxor ) : t -> t -> t
        val ( lsl ) : t -> int -> t
        val ( lsr ) : t -> int -> t
        val ( asr ) : t -> int -> t
      end
    val add : t -> t -> t
    val sub : t -> t -> t
    val mul : t -> t -> t
    val div : t -> t -> t
    val rem : t -> t -> t
    val max_int : t
    val logand : t -> t -> t
    val logor : t -> t -> t
    val logxor : t -> t -> t
    val shift_left : t -> int -> t
    val shift_right : t -> int -> t
    val of_int : int -> t
    val to_int : t -> int
    val of_string : string -> t
    val to_string : t -> string
    val to_hexstring : t -> string
    val zero : t
    val one : t
    val lognot : t -> t
    val succ : t -> t
    val pred : t -> t
    val compare : t -> t -> int
    val equal : t -> t -> bool
    val max : t -> t -> t
    val min : t -> t -> t
    val of_string_opt : string -> t option
    val pp : Format.formatter -> t -> unit
    val pp_hex : Format.formatter -> t -> unit
    val neg : t -> t
    val abs : t -> t
    val minus_one : t
    val min_int : t
    val shift_right_logical : t -> int -> t
    val of_nativeint : nativeint -> t
    val to_nativeint : t -> nativeint
    val of_int64 : int64 -> t
    val to_int64 : t -> int64
    val t : t Ctypes_static.typ
  end
module type Unsigned_type =
  sig
    type t
    val add : t -> t -> t
    val sub : t -> t -> t
    val mul : t -> t -> t
    val div : t -> t -> t
    val rem : t -> t -> t
    val max_int : t
    val logand : t -> t -> t
    val logor : t -> t -> t
    val logxor : t -> t -> t
    val shift_left : t -> int -> t
    val shift_right : t -> int -> t
    val of_int : int -> t
    val to_int : t -> int
    val of_int64 : int64 -> t
    val to_int64 : t -> int64
    val of_string : string -> t
    val to_string : t -> string
    val to_hexstring : t -> string
    val zero : t
    val one : t
    val lognot : t -> t
    val succ : t -> t
    val pred : t -> t
    val compare : t -> t -> int
    val equal : t -> t -> bool
    val max : t -> t -> t
    val min : t -> t -> t
    val of_string_opt : string -> t option
    val pp : Format.formatter -> t -> unit
    val pp_hex : Format.formatter -> t -> unit
    module Infix :
      sig
        val ( + ) : t -> t -> t
        val ( - ) : t -> t -> t
        val ( * ) : t -> t -> t
        val ( / ) : t -> t -> t
        val ( mod ) : t -> t -> t
        val ( land ) : t -> t -> t
        val ( lor ) : t -> t -> t
        val ( lxor ) : t -> t -> t
        val ( lsl ) : t -> int -> t
        val ( lsr ) : t -> int -> t
      end
    val t : t Ctypes_static.typ
  end
val signed_typedef : string -> size:int -> (module Signed_type)
val unsigned_typedef : string -> size:int -> (module Unsigned_type)
module Intptr : Signed_type
module Uintptr : Unsigned_type
val intptr_t : Intptr.t Ctypes_static.typ
val uintptr_t : Uintptr.t Ctypes_static.typ
module Ptrdiff : Signed_type("DEBUG:rule", [(("string_of_char_ptr", 2171), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "pointer"), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -120); (Tag8 (([("C", (0))], (0, 100000000, 0, -122), 1, 0, 0)), 100000000, 0, -121)], (0)), 100000000, 0, -119), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -118), 0), 100000000, 0, -117), 0, (("src/ctypes/ctypes_std_views.ml", 8, 149, 153), ("src/ctypes/ctypes_std_views.ml", 8, 149, 171), 0), 0, Tag1 ("Ctypes_std_views", 0)), 0); (("char_ptr_of_string", 2172), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -116), (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "pointer"), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -113); (Tag8 (([("C", (0))], (0, 100000000, 0, -115), 1, 0, 0)), 100000000, 0, -114)], (0)), 100000000, 0, -112), 0), 100000000, 0, -111), 0, (("src/ctypes/ctypes_std_views.ml", 11, 246, 250), ("src/ctypes/ctypes_std_views.ml", 11, 246, 268), 0), 0, Tag1 ("Ctypes_std_views", 2)), 0); (("string", 2173), ((Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "typ"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -110)], (0)), 100000000, 0, -109), 0, (("src/ctypes/ctypes_std_views.ml", 17, 519, 523), ("src/ctypes/ctypes_std_views.ml", 17, 519, 529), 0), 0, Tag1 ("Ctypes_std_views", 5)), 0); (("read_nullable", 2174), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "typ"), [((0), 100000000, 0, -104)], (0)), 100000000, 0, -108), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "typ"), [((0), 100000000, 0, -106)], (0)), 100000000, 0, -107), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "ptr"), [((0), 100000000, 0, -106)], (0)), 100000000, 0, -105), (Tag3 ((Tag3 ("option", 10)), [((0), 100000000, 0, -104)], (0)), 100000000, 0, -103), 0), 100000000, 0, -102), 0), 100000000, 0, -101), 0), 100000000, 0, -100), 0, (("src/ctypes/ctypes_std_views.ml", 20, 618, 622), ("src/ctypes/ctypes_std_views.ml", 20, 618, 635), 0), 0, Tag1 ("Ctypes_std_views", 6)), 0); (("write_nullable", 2175), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "typ"), [((0), 100000000, 0, -97)], (0)), 100000000, 0, -99), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "typ"), [((0), 100000000, 0, -95)], (0)), 100000000, 0, -98), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((0), 100000000, 0, -97)], (0)), 100000000, 0, -96), (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "ptr"), [((0), 100000000, 0, -95)], (0)), 100000000, 0, -94), 0), 100000000, 0, -93), 0), 100000000, 0, -92), 0), 100000000, 0, -91), 0, (("src/ctypes/ctypes_std_views.ml", 24, 785, 789), ("src/ctypes/ctypes_std_views.ml", 24, 785, 803), 0), 0, Tag1 ("Ctypes_std_views", 11)), 0); (("nullable_view", 2176), ((Tag1 (Tag1 ("format_typ"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -90), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -89), 0), 100000000, 0, -88), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -87), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -86), 0), 100000000, 0, -85), 0), 100000000, 0, -84)], (0)), 100000000, 0, -83), (Tag1 (Tag1 ("format"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -82), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((0), 100000000, 0, -74)], (0)), 100000000, 0, -73), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -81), 0), 100000000, 0, -80), 0), 100000000, 0, -79)], (0)), 100000000, 0, -78), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "typ"), [((0), 100000000, 0, -74)], (0)), 100000000, 0, -77), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "typ"), [((0), 100000000, 0, -76)], (0)), 100000000, 0, -75), (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "typ"), [(Tag3 ((Tag3 ("option", 10)), [((0), 100000000, 0, -74)], (0)), 100000000, 0, -73)], (0)), 100000000, 0, -72), 0), 100000000, 0, -71), 0), 100000000, 0, -70), 0), 100000000, 0, -69), 0), 100000000, 0, -68), 0, (("src/ctypes/ctypes_std_views.ml", 28, 963, 967), ("src/ctypes/ctypes_std_views.ml", 28, 963, 980), 0), 0, Tag1 ("Ctypes_std_views", 16)), 0); (("read_nullable_funptr", 2177), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "typ"), [((0), 100000000, 0, -63)], (0)), 100000000, 0, -67), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "fn"), [((0), 100000000, 0, -65)], (0)), 100000000, 0, -66), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "static_funptr"), [((0), 100000000, 0, -65)], (0)), 100000000, 0, -64), (Tag3 ((Tag3 ("option", 10)), [((0), 100000000, 0, -63)], (0)), 100000000, 0, -62), 0), 100000000, 0, -61), 0), 100000000, 0, -60), 0), 100000000, 0, -59), 0, (("src/ctypes/ctypes_std_views.ml", 33, 1159, 1163), ("src/ctypes/ctypes_std_views.ml", 33, 1159, 1183), 0), 0, Tag1 ("Ctypes_std_views", 23)), 0); (("write_nullable_funptr", 2178), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "typ"), [((0), 100000000, 0, -56)], (0)), 100000000, 0, -58), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "fn"), [((0), 100000000, 0, -54)], (0)), 100000000, 0, -57), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((0), 100000000, 0, -56)], (0)), 100000000, 0, -55), (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "static_funptr"), [((0), 100000000, 0, -54)], (0)), 100000000, 0, -53), 0), 100000000, 0, -52), 0), 100000000, 0, -51), 0), 100000000, 0, -50), 0, (("src/ctypes/ctypes_std_views.ml", 40, 1395, 1399), ("src/ctypes/ctypes_std_views.ml", 40, 1395, 1420), 0), 0, Tag1 ("Ctypes_std_views", 29)), 0); (("nullable_funptr_view", 2179), ((Tag1 (Tag1 ("format_typ"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -49), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -48), 0), 100000000, 0, -47), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -46), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -45), 0), 100000000, 0, -44), 0), 100000000, 0, -43)], (0)), 100000000, 0, -42), (Tag1 (Tag1 ("format"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -41), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((0), 100000000, 0, -33)], (0)), 100000000, 0, -32), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -40), 0), 100000000, 0, -39), 0), 100000000, 0, -38)], (0)), 100000000, 0, -37), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "typ"), [((0), 100000000, 0, -33)], (0)), 100000000, 0, -36), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "fn"), [((0), 100000000, 0, -35)], (0)), 100000000, 0, -34), (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "typ"), [(Tag3 ((Tag3 ("option", 10)), [((0), 100000000, 0, -33)], (0)), 100000000, 0, -32)], (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), 0), 100000000, 0, -27), 0, (("src/ctypes/ctypes_std_views.ml", 46, 1673, 1677), ("src/ctypes/ctypes_std_views.ml", 46, 1673, 1697), 0), 0, Tag1 ("Ctypes_std_views", 34)), 0); (("ptr_opt", 2180), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "typ"), [((0), 100000000, 0, -25)], (0)), 100000000, 0, -26), (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "typ"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "ptr"), [((0), 100000000, 0, -25)], (0)), 100000000, 0, -24)], (0)), 100000000, 0, -23)], (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("src/ctypes/ctypes_std_views.ml", 51, 1900, 1904), ("src/ctypes/ctypes_std_views.ml", 51, 1900, 1911), 0), 0, Tag1 ("Ctypes_std_views", 41)), 0); (("string_opt", 2181), ((Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "typ"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -20)], (0)), 100000000, 0, -19)], (0)), 100000000, 0, -18), 0, (("src/ctypes/ctypes_std_views.ml", 53, 1955, 1959), ("src/ctypes/ctypes_std_views.ml", 53, 1955, 1969), 0), 0, Tag1 ("Ctypes_std_views", 43)), 0); Tag4 (("Signed_type", 2182), ((Tag1 ([Tag1 (("t", 2192), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/signed.mli", 22, 442, 444), ("src/signed.mli", 22, 442, 450), 0), 0, 0, 0, Tag1 ("Signed", 4)), 1, 0); Tag3 (("Infix", 2193), 0, (Tag1 ([(("+", 2232), ((Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -315), (Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -314), (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -313), 0), 100000000, 0, -312), 0), 100000000, 0, -311), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 1)), 0); (("-", 2233), ((Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -310), (Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -309), (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -308), 0), 100000000, 0, -307), 0), 100000000, 0, -306), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 2)), 0); (("*", 2234), ((Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -305), (Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -304), (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -303), 0), 100000000, 0, -302), 0), 100000000, 0, -301), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 3)), 0); (("/", 2235), ((Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -300), (Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -299), (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -298), 0), 100000000, 0, -297), 0), 100000000, 0, -296), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 4)), 0); (("mod", 2236), ((Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -295), (Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -294), (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -293), 0), 100000000, 0, -292), 0), 100000000, 0, -291), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 5)), 0); (("land", 2237), ((Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -290), (Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -289), (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -288), 0), 100000000, 0, -287), 0), 100000000, 0, -286), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 6)), 0); (("lor", 2238), ((Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -285), (Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -284), (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -283), 0), 100000000, 0, -282), 0), 100000000, 0, -281), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 7)), 0); (("lxor", 2239), ((Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -280), (Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -279), (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -278), 0), 100000000, 0, -277), 0), 100000000, 0, -276), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 8)), 0); (("lsl", 2240), ((Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -275), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -274), (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -273), 0), 100000000, 0, -272), 0), 100000000, 0, -271), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 9)), 0); (("lsr", 2241), ((Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -270), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -269), (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -268), 0), 100000000, 0, -267), 0), 100000000, 0, -266), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 10)), 0); (("asr", 2242), ((Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -265), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -264), (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -263), 0), 100000000, 0, -262), 0), 100000000, 0, -261), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Signed", 2)), 0)]), 0, (("src/signed.mli", 24, 452, 454), ("src/signed.mli", 24, 452, 491), 0), Tag1 ("Signed", 6)), 0, 0); (("add", 2194), ((Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -260), (Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -259), (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -258), 0), 100000000, 0, -257), 0), 100000000, 0, -256), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 13)), 0); (("sub", 2195), ((Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -255), (Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -254), (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -253), 0), 100000000, 0, -252), 0), 100000000, 0, -251), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 14)), 0); (("mul", 2196), ((Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -250), (Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -249), (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -248), 0), 100000000, 0, -247), 0), 100000000, 0, -246), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 15)), 0); (("div", 2197), ((Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -245), (Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -244), (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -243), 0), 100000000, 0, -242), 0), 100000000, 0, -241), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 16)), 0); (("rem", 2198), ((Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -240), (Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -239), (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -238), 0), 100000000, 0, -237), 0), 100000000, 0, -236), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 17)), 0); (("max_int", 2199), ((Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -235), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 18)), 0); (("logand", 2200), ((Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -234), (Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -233), (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -232), 0), 100000000, 0, -231), 0), 100000000, 0, -230), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 19)), 0); (("logor", 2201), ((Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -229), (Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -228), (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -227), 0), 100000000, 0, -226), 0), 100000000, 0, -225), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 20)), 0); (("logxor", 2202), ((Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -224), (Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -223), (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -222), 0), 100000000, 0, -221), 0), 100000000, 0, -220), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 21)), 0); (("shift_left", 2203), ((Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -219), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -218), (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -217), 0), 100000000, 0, -216), 0), 100000000, 0, -215), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 22)), 0); (("shift_right", 2204), ((Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -214), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -213), (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -212), 0), 100000000, 0, -211), 0), 100000000, 0, -210), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 23)), 0); (("of_int", 2205), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -209), (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -208), 0), 100000000, 0, -207), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 24)), 0); (("to_int", 2206), ((Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -206), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -205), 0), 100000000, 0, -204), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 25)), 0); (("of_string", 2207), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -203), (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -202), 0), 100000000, 0, -201), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 28)), 0); (("to_string", 2208), ((Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -200), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -199), 0), 100000000, 0, -198), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 29)), 0); (("to_hexstring", 2209), ((Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -197), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -196), 0), 100000000, 0, -195), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 30)), 0); (("zero", 2210), ((Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -194), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 31)), 0); (("one", 2211), ((Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -193), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 32)), 0); (("lognot", 2212), ((Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -192), (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -191), 0), 100000000, 0, -190), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 33)), 0); (("succ", 2213), ((Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -189), (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -188), 0), 100000000, 0, -187), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 34)), 0); (("pred", 2214), ((Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -186), (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -185), 0), 100000000, 0, -184), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 35)), 0); (("compare", 2215), ((Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -183), (Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -182), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -181), 0), 100000000, 0, -180), 0), 100000000, 0, -179), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 36)), 0); (("equal", 2216), ((Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -178), (Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -177), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -176), 0), 100000000, 0, -175), 0), 100000000, 0, -174), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 37)), 0); (("max", 2217), ((Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -173), (Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -172), (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -171), 0), 100000000, 0, -170), 0), 100000000, 0, -169), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 38)), 0); (("min", 2218), ((Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -168), (Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -167), (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -166), 0), 100000000, 0, -165), 0), 100000000, 0, -164), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 39)), 0); (("of_string_opt", 2219), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -163), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -162)], (0)), 100000000, 0, -161), 0), 100000000, 0, -160), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 40)), 0); (("pp", 2220), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -159), (Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -158), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -157), 0), 100000000, 0, -156), 0), 100000000, 0, -155), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 41)), 0); (("pp_hex", 2221), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -154), (Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -153), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -152), 0), 100000000, 0, -151), 0), 100000000, 0, -150), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 42)), 0); (("neg", 2222), ((Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -149), (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -148), 0), 100000000, 0, -147), 0, (("src/signed.mli", 29, 580, 582), ("src/signed.mli", 29, 580, 598), 0), 0, Tag1 ("Signed", 8)), 0); (("abs", 2223), ((Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -146), (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -145), 0), 100000000, 0, -144), 0, (("src/signed.mli", 32, 625, 627), ("src/signed.mli", 32, 625, 643), 0), 0, Tag1 ("Signed", 9)), 0); (("minus_one", 2224), ((Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -143), 0, (("src/signed.mli", 35, 697, 699), ("src/signed.mli", 35, 697, 716), 0), 0, Tag1 ("Signed", 10)), 0); (("min_int", 2225), ((Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -142), 0, (("src/signed.mli", 38, 740, 742), ("src/signed.mli", 38, 740, 757), 0), 0, Tag1 ("Signed", 11)), 0); (("shift_right_logical", 2226), ((Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -141), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -140), (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -139), 0), 100000000, 0, -138), 0), 100000000, 0, -137), 0, (("src/signed.mli", 41, 804, 806), ("src/signed.mli", 41, 804, 845), 0), 0, Tag1 ("Signed", 12)), 0); (("of_nativeint", 2227), ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -136), (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -135), 0), 100000000, 0, -134), 0, (("src/signed.mli", 45, 965, 967), ("src/signed.mli", 45, 965, 1000), 0), 0, Tag1 ("Signed", 13)), 0); (("to_nativeint", 2228), ((Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -133), (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -132), 0), 100000000, 0, -131), 0, (("src/signed.mli", 48, 1066, 1068), ("src/signed.mli", 48, 1066, 1101), 0), 0, Tag1 ("Signed", 14)), 0); (("of_int64", 2229), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -130), (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -129), 0), 100000000, 0, -128), 0, (("src/signed.mli", 51, 1167, 1169), ("src/signed.mli", 51, 1167, 1194), 0), 0, Tag1 ("Signed", 15)), 0); (("to_int64", 2230), ((Tag1 (0, (Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -127), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -126), 0), 100000000, 0, -125), 0, (("src/signed.mli", 54, 1256, 1258), ("src/signed.mli", 54, 1256, 1283), 0), 0, Tag1 ("Signed", 16)), 0); (("t", 2231), ((Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "typ"), [(Tag3 ((("t", 2192)), 0, (0)), 100000000, 0, -124)], (0)), 100000000, 0, -123), 0, (("src/ctypes/ctypes_std_views.ml", 58, 2062, 2064), ("src/ctypes/ctypes_std_views.ml", 58, 2062, 2091), 0), 0, Tag1 ("Ctypes_std_views", 44)), 0)])), 0, (("src/ctypes/ctypes_std_views.ml", 55, 2013, 2013), ("src/ctypes/ctypes_std_views.ml", 59, 2092, 2095), 0), Tag1 ("Ctypes_std_views", 45)), 0); Tag4 (("Unsigned_type", 2183), ((Tag1 ([Tag1 (("t", 2243), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/unsigned.mli", 48, 1093, 1095), ("src/unsigned.mli", 48, 1093, 1101), 0), 0, 0, 0, Tag1 ("Unsigned", 12)), 1, 0); (("add", 2244), ((Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -434), (Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -433), (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -432), 0), 100000000, 0, -431), 0), 100000000, 0, -430), 0, (("src/unsigned.mli", 50, 1103, 1105), ("src/unsigned.mli", 50, 1103, 1126), 0), 0, Tag1 ("Unsigned", 13)), 0); (("sub", 2245), ((Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -429), (Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -428), (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -427), 0), 100000000, 0, -426), 0), 100000000, 0, -425), 0, (("src/unsigned.mli", 53, 1147, 1149), ("src/unsigned.mli", 53, 1147, 1170), 0), 0, Tag1 ("Unsigned", 14)), 0); (("mul", 2246), ((Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -424), (Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -423), (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -422), 0), 100000000, 0, -421), 0), 100000000, 0, -420), 0, (("src/unsigned.mli", 56, 1194, 1196), ("src/unsigned.mli", 56, 1194, 1217), 0), 0, Tag1 ("Unsigned", 15)), 0); (("div", 2247), ((Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -419), (Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -418), (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -417), 0), 100000000, 0, -416), 0), 100000000, 0, -415), 0, (("src/unsigned.mli", 59, 1244, 1246), ("src/unsigned.mli", 59, 1244, 1267), 0), 0, Tag1 ("Unsigned", 16)), 0); (("rem", 2248), ((Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -414), (Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -413), (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -412), 0), 100000000, 0, -411), 0), 100000000, 0, -410), 0, (("src/unsigned.mli", 62, 1347, 1349), ("src/unsigned.mli", 62, 1347, 1370), 0), 0, Tag1 ("Unsigned", 17)), 0); (("max_int", 2249), ((Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -409), 0, (("src/unsigned.mli", 66, 1465, 1467), ("src/unsigned.mli", 66, 1465, 1482), 0), 0, Tag1 ("Unsigned", 18)), 0); (("logand", 2250), ((Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -408), (Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -407), (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -406), 0), 100000000, 0, -405), 0), 100000000, 0, -404), 0, (("src/unsigned.mli", 69, 1529, 1531), ("src/unsigned.mli", 69, 1529, 1555), 0), 0, Tag1 ("Unsigned", 19)), 0); (("logor", 2251), ((Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -403), (Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -402), (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -401), 0), 100000000, 0, -400), 0), 100000000, 0, -399), 0, (("src/unsigned.mli", 72, 1587, 1589), ("src/unsigned.mli", 72, 1587, 1612), 0), 0, Tag1 ("Unsigned", 20)), 0); (("logxor", 2252), ((Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -398), (Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -397), (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -396), 0), 100000000, 0, -395), 0), 100000000, 0, -394), 0, (("src/unsigned.mli", 75, 1643, 1645), ("src/unsigned.mli", 75, 1643, 1669), 0), 0, Tag1 ("Unsigned", 21)), 0); (("shift_left", 2253), ((Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -393), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -392), (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -391), 0), 100000000, 0, -390), 0), 100000000, 0, -389), 0, (("src/unsigned.mli", 78, 1710, 1712), ("src/unsigned.mli", 78, 1710, 1742), 0), 0, Tag1 ("Unsigned", 22)), 0); (("shift_right", 2254), ((Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -388), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -387), (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -386), 0), 100000000, 0, -385), 0), 100000000, 0, -384), 0, (("src/unsigned.mli", 81, 1811, 1813), ("src/unsigned.mli", 81, 1811, 1844), 0), 0, Tag1 ("Unsigned", 23)), 0); (("of_int", 2255), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -383), (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -382), 0), 100000000, 0, -381), 0, (("src/unsigned.mli", 84, 1915, 1917), ("src/unsigned.mli", 84, 1915, 1938), 0), 0, Tag1 ("Unsigned", 24)), 0); (("to_int", 2256), ((Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -380), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -379), 0), 100000000, 0, -378), 0, (("src/unsigned.mli", 87, 2001, 2003), ("src/unsigned.mli", 87, 2001, 2024), 0), 0, Tag1 ("Unsigned", 25)), 0); (("of_int64", 2257), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -377), (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -376), 0), 100000000, 0, -375), 0, (("src/unsigned.mli", 90, 2087, 2089), ("src/unsigned.mli", 90, 2087, 2114), 0), 0, Tag1 ("Unsigned", 26)), 0); (("to_int64", 2258), ((Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -374), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -373), 0), 100000000, 0, -372), 0, (("src/unsigned.mli", 93, 2179, 2181), ("src/unsigned.mli", 93, 2179, 2206), 0), 0, Tag1 ("Unsigned", 27)), 0); (("of_string", 2259), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -371), (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -370), 0), 100000000, 0, -369), 0, (("src/unsigned.mli", 96, 2271, 2273), ("src/unsigned.mli", 96, 2271, 2300), 0), 0, Tag1 ("Unsigned", 28)), 0); (("to_string", 2260), ((Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -368), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -367), 0), 100000000, 0, -366), 0, (("src/unsigned.mli", 101, 2464, 2466), ("src/unsigned.mli", 101, 2464, 2493), 0), 0, Tag1 ("Unsigned", 29)), 0); (("to_hexstring", 2261), ((Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -365), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -364), 0), 100000000, 0, -363), 0, (("src/unsigned.mli", 104, 2554, 2556), ("src/unsigned.mli", 104, 2554, 2586), 0), 0, Tag1 ("Unsigned", 30)), 0); (("zero", 2262), ((Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -362), 0, (("src/unsigned.mli", 107, 2659, 2661), ("src/unsigned.mli", 107, 2659, 2673), 0), 0, Tag1 ("Unsigned", 31)), 0); (("one", 2263), ((Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -361), 0, (("src/unsigned.mli", 110, 2699, 2701), ("src/unsigned.mli", 110, 2699, 2712), 0), 0, Tag1 ("Unsigned", 32)), 0); (("lognot", 2264), ((Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -360), (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -359), 0), 100000000, 0, -358), 0, (("src/unsigned.mli", 113, 2738, 2740), ("src/unsigned.mli", 113, 2738, 2759), 0), 0, Tag1 ("Unsigned", 33)), 0); (("succ", 2265), ((Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -357), (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -356), 0), 100000000, 0, -355), 0, (("src/unsigned.mli", 116, 2796, 2798), ("src/unsigned.mli", 116, 2796, 2815), 0), 0, Tag1 ("Unsigned", 34)), 0); (("pred", 2266), ((Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -354), (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -353), 0), 100000000, 0, -352), 0, (("src/unsigned.mli", 119, 2837, 2839), ("src/unsigned.mli", 119, 2837, 2856), 0), 0, Tag1 ("Unsigned", 35)), 0); (("compare", 2267), ((Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -351), (Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -350), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -349), 0), 100000000, 0, -348), 0), 100000000, 0, -347), 0, (("src/unsigned.mli", 122, 2880, 2882), ("src/unsigned.mli", 122, 2880, 2909), 0), 0, Tag1 ("Unsigned", 36)), 0); (("equal", 2268), ((Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -346), (Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -345), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -344), 0), 100000000, 0, -343), 0), 100000000, 0, -342), 0, (("src/unsigned.mli", 126, 3023, 3025), ("src/unsigned.mli", 126, 3023, 3051), 0), 0, Tag1 ("Unsigned", 37)), 0); (("max", 2269), ((Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -341), (Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -340), (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -339), 0), 100000000, 0, -338), 0), 100000000, 0, -337), 0, (("src/unsigned.mli", 129, 3128, 3130), ("src/unsigned.mli", 129, 3128, 3151), 0), 0, Tag1 ("Unsigned", 38)), 0); (("min", 2270), ((Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -336), (Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -335), (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -334), 0), 100000000, 0, -333), 0), 100000000, 0, -332), 0, (("src/unsigned.mli", 132, 3202, 3204), ("src/unsigned.mli", 132, 3202, 3225), 0), 0, Tag1 ("Unsigned", 39)), 0); (("of_string_opt", 2271), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -331), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -330)], (0)), 100000000, 0, -329), 0), 100000000, 0, -328), 0, (("src/unsigned.mli", 135, 3275, 3277), ("src/unsigned.mli", 135, 3275, 3315), 0), 0, Tag1 ("Unsigned", 40)), 0); (("pp", 2272), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -327), (Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -326), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -325), 0), 100000000, 0, -324), 0), 100000000, 0, -323), 0, (("src/unsigned.mli", 139, 3470, 3472), ("src/unsigned.mli", 139, 3470, 3510), 0), 0, Tag1 ("Unsigned", 41)), 0); (("pp_hex", 2273), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -322), (Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -321), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -320), 0), 100000000, 0, -319), 0), 100000000, 0, -318), 0, (("src/unsigned.mli", 142, 3571, 3573), ("src/unsigned.mli", 142, 3571, 3615), 0), 0, Tag1 ("Unsigned", 42)), 0); Tag3 (("Infix", 2274), 0, (Tag1 ([(("+", 2276), ((Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -484), (Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -483), (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -482), 0), 100000000, 0, -481), 0), 100000000, 0, -480), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 1)), 0); (("-", 2277), ((Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -479), (Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -478), (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -477), 0), 100000000, 0, -476), 0), 100000000, 0, -475), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 2)), 0); (("*", 2278), ((Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -474), (Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -473), (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -472), 0), 100000000, 0, -471), 0), 100000000, 0, -470), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 3)), 0); (("/", 2279), ((Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -469), (Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -468), (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -467), 0), 100000000, 0, -466), 0), 100000000, 0, -465), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 4)), 0); (("mod", 2280), ((Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -464), (Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -463), (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -462), 0), 100000000, 0, -461), 0), 100000000, 0, -460), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 5)), 0); (("land", 2281), ((Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -459), (Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -458), (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -457), 0), 100000000, 0, -456), 0), 100000000, 0, -455), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 6)), 0); (("lor", 2282), ((Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -454), (Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -453), (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -452), 0), 100000000, 0, -451), 0), 100000000, 0, -450), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 7)), 0); (("lxor", 2283), ((Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -449), (Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -448), (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -447), 0), 100000000, 0, -446), 0), 100000000, 0, -445), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 8)), 0); (("lsl", 2284), ((Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -444), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -443), (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -442), 0), 100000000, 0, -441), 0), 100000000, 0, -440), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 9)), 0); (("lsr", 2285), ((Tag1 (0, (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -439), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -438), (Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -437), 0), 100000000, 0, -436), 0), 100000000, 0, -435), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 10)), 0)]), 0, (("src/unsigned.mli", 145, 3679, 3681), ("src/unsigned.mli", 145, 3679, 3718), 0), Tag1 ("Unsigned", 44)), 0, 0); (("t", 2275), ((Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "typ"), [(Tag3 ((("t", 2243)), 0, (0)), 100000000, 0, -317)], (0)), 100000000, 0, -316), 0, (("src/ctypes/ctypes_std_views.ml", 64, 2150, 2152), ("src/ctypes/ctypes_std_views.ml", 64, 2150, 2179), 0), 0, Tag1 ("Ctypes_std_views", 46)), 0)])), 0, (("src/ctypes/ctypes_std_views.ml", 61, 2097, 2097), ("src/ctypes/ctypes_std_views.ml", 65, 2180, 2183), 0), Tag1 ("Ctypes_std_views", 47)), 0); (("signed_typedef", 2184), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -17), (Tag1 (("size"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -16), (Tag11 ((("Signed_type", 2182)), 0), 100000000, 0, -15), 0), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("src/ctypes/ctypes_std_views.ml", 67, 2185, 2189), ("src/ctypes/ctypes_std_views.ml", 67, 2185, 2203), 0), 0, Tag1 ("Ctypes_std_views", 48)), 0); (("unsigned_typedef", 2185), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12), (Tag1 (("size"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11), (Tag11 ((("Unsigned_type", 2183)), 0), 100000000, 0, -10), 0), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("src/ctypes/ctypes_std_views.ml", 79, 2752, 2756), ("src/ctypes/ctypes_std_views.ml", 79, 2752, 2772), 0), 0, Tag1 ("Ctypes_std_views", 56)), 0); Tag3 (("Intptr", 2186), 0, (((("Signed_type", 2182))), 0, (("src/ctypes/ctypes_std_views.ml", 91, 3342, 3342), ("src/ctypes/ctypes_std_views.ml", 92, 3389, 3456), 0), Tag1 ("Ctypes_std_views", 64)), 0, 0); Tag3 (("Uintptr", 2187), 0, (((("Unsigned_type", 2183))), 0, (("src/ctypes/ctypes_std_views.ml", 93, 3457, 3457), ("src/ctypes/ctypes_std_views.ml", 94, 3508, 3576), 0), Tag1 ("Ctypes_std_views", 65)), 0, 0); (("intptr_t", 2188), ((Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "typ"), [(Tag3 (Tag1 ((("Intptr", 2186)), "t"), 0, (0)), 100000000, 0, -7)], (0)), 100000000, 0, -6), 0, (("src/ctypes/ctypes_std_views.ml", 95, 3577, 3581), ("src/ctypes/ctypes_std_views.ml", 95, 3577, 3589), 0), 0, Tag1 ("Ctypes_std_views", 66)), 0); (("uintptr_t", 2189), ((Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "typ"), [(Tag3 (Tag1 ((("Uintptr", 2187)), "t"), 0, (0)), 100000000, 0, -5)], (0)), 100000000, 0, -4), 0, (("src/ctypes/ctypes_std_views.ml", 96, 3601, 3605), ("src/ctypes/ctypes_std_views.ml", 96, 3601, 3614), 0), 0, Tag1 ("Ctypes_std_views", 67)), 0); Tag3 (("Ptrdiff", 2190), 0, (((("Signed_type", 2182))), 0, (("src/ctypes/ctypes_std_views.ml", 98, 3628, 3628), ("src/ctypes/ctypes_std_views.ml", 99, 3677, 3746), 0), Tag1 ("Ctypes_std_views", 68)), 0, 0); (("ptrdiff_t", 2191), ((Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "typ"), [(Tag3 (Tag1 ((("Ptrdiff", 2190)), "t"), 0, (0)), 100000000, 0, -3)], (0)), 100000000, 0, -2), 0, (("src/ctypes/ctypes_std_views.ml", 100, 3747, 3751), ("src/ctypes/ctypes_std_views.ml", 100, 3747, 3760), 0), 0, Tag1 ("Ctypes_std_views", 69)), 0)], "Ctypes_std_views", [("Ctypes_std_views", ("|\189\023\152\133E*\019t\142\2134\217\192q\157")); ("Unsigned", ("cd\205\030\181\167\151\005!\134;\177\228\249\168+")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Printexc", ("\217u\168\235\179oi\167\235\255\025\017%d\192s")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Gc", ("^\181<\145\206\015)\224\028\247\003\188\b\241\246\239")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Signed", ("R\017i\"\030\024\134f\143\198\192\180>t\175\225")); ("LDouble", ("j\251\140\230^u\251\210\143\236T\207\022\147\011\211")); ("Ctypes_std_view_stubs", ("\023h\252\212\194\130\218\024E\208\219p\206\165\138f")); ("Ctypes_static", ("U\030\169\129GB\138P\158'd\012\131\157\202\018")); ("Ctypes_roots_stubs", ("XeR\135^\252E:\255\233=P\186\018D-")); ("Ctypes_ptr", ("V\021o\161\007\161\245R\242\222:e\151\189\175\207")); ("Ctypes_primitive_types", ("\147\237\001\150\136\017Z\2308\137C\245\023\133\161\158")); ("Ctypes_memory_stubs", ("\016\229\020F\227\153LZ\166P\204(\249\139u\191")); ("Ctypes_memory", ("\181\196{\165\177\131ex\255\202>\249\214\244z\209")); ("Ctypes_coerce", ("\183~2\232\183\177\194\138\000\205\151\245\191\028?\"")); ("Ctypes_bigarray", ("\146\0055mmn\243\187gd\185P\208J\254l")); ("ComplexL", ("\n\230\139\192\213\0226\203\176\242\200\205c\155ag")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Bigarray_compat", ("\150\219\208\188w\237\216\005\r[\152q'\006x\217"))], [(0)])

val ptrdiff_t : Ptrdiff.t Ctypes_static.typ

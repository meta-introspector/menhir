type ('ok, 'err) t =
  ('ok, 'err) Base__.Import.Stdlib.result =
    Ok of 'ok
  | Error of 'err
val t_of_sexp :
  (Sexplib0__.Sexp.t -> 'a) ->
  (Sexplib0__.Sexp.t -> 'b) -> Sexplib0__.Sexp.t -> ('a, 'b) t
val sexp_of_t :
  ('a -> Sexplib0__.Sexp.t) ->
  ('b -> Sexplib0__.Sexp.t) -> ('a, 'b) t -> Sexplib0__.Sexp.t
val t_sexp_grammar :
  'ok Sexplib0.Sexp_grammar.t ->
  'err Sexplib0.Sexp_grammar.t -> ('ok, 'err) t Sexplib0.Sexp_grammar.t
val compare :
  'a Base__Ppx_compare_lib.compare ->
  'b Base__Ppx_compare_lib.compare ->
  ('a, 'b) t Base__Ppx_compare_lib.compare
val equal :
  'a Base__Ppx_compare_lib.equal ->
  'b Base__Ppx_compare_lib.equal -> ('a, 'b) t Base__Ppx_compare_lib.equal
val globalize :
  ('ok -> 'ok) -> ('err -> 'err) -> ('ok, 'err) t -> ('ok, 'err) t
val hash_fold_t :
  'a Base__Ppx_hash_lib.hash_fold ->
  'b Base__Ppx_hash_lib.hash_fold -> ('a, 'b) t Base__Ppx_hash_lib.hash_fold
val ( >>= ) : ('a, 'e) t -> ('a -> ('b, 'e) t) -> ('b, 'e) t
val ( >>| ) : ('a, 'e) t -> ('a -> 'b) -> ('b, 'e) t
module Let_syntax :
  sig
    val return : 'a -> ('a, 'b) t
    val ( >>= ) : ('a, 'e) t -> ('a -> ('b, 'e) t) -> ('b, 'e) t
    val ( >>| ) : ('a, 'e) t -> ('a -> 'b) -> ('b, 'e) t
    module Let_syntax :
      sig
        val return : 'a -> ('a, 'b) t
        val bind : ('a, 'e) t -> f:('a -> ('b, 'e) t) -> ('b, 'e) t
        val map : ('a, 'e) t -> f:('a -> 'b) -> ('b, 'e) t
        val both : ('a, 'e) t -> ('b, 'e) t -> ('a * 'b, 'e) t
        module Open_on_rhs : sig end
      end
  end
module Monad_infix :
  sig
    val ( >>= ) : ('a, 'e) t -> ('a -> ('b, 'e) t) -> ('b, 'e) t
    val ( >>| ) : ('a, 'e) t -> ('a -> 'b) -> ('b, 'e) t
  end
val bind : ('a, 'e) t -> f:('a -> ('b, 'e) t) -> ('b, 'e) t
val return : 'a -> ('a, 'b) t
val join : (('a, 'e) t, 'e) t -> ('a, 'e) t
val ignore_m : ('a, 'e) t -> (unit, 'e) t
val all : ('a, 'e) t list -> ('a list, 'e) t
val all_unit : (unit, 'e) t list -> (unit, 'e) t
module Error :
  sig
    val ( >>= ) : ('e, 'a) t -> ('a -> ('e, 'b) t) -> ('e, 'b) t
    val ( >>| ) : ('e, 'a) t -> ('a -> 'b) -> ('e, 'b) t
    module Let_syntax :
      sig
        val return : 'a -> ('b, 'a) t
        val ( >>= ) : ('e, 'a) t -> ('a -> ('e, 'b) t) -> ('e, 'b) t
        val ( >>| ) : ('e, 'a) t -> ('a -> 'b) -> ('e, 'b) t
        module Let_syntax :
          sig
            val return : 'a -> ('b, 'a) t
            val bind : ('e, 'a) t -> f:('a -> ('e, 'b) t) -> ('e, 'b) t
            val map : ('e, 'a) t -> f:('a -> 'b) -> ('e, 'b) t
            val both : ('e, 'a) t -> ('e, 'b) t -> ('e, 'a * 'b) t
            module Open_on_rhs : sig end
          end
      end
    module Monad_infix :
      sig
        val ( >>= ) : ('e, 'a) t -> ('a -> ('e, 'b) t) -> ('e, 'b) t
        val ( >>| ) : ('e, 'a) t -> ('a -> 'b) -> ('e, 'b) t
      end
    val bind : ('e, 'a) t -> f:('a -> ('e, 'b) t) -> ('e, 'b) t
    val return : 'a -> ('b, 'a) t
    val map : ('e, 'a) t -> f:('a -> 'b) -> ('e, 'b) t
    val join : ('e, ('e, 'a) t) t -> ('e, 'a) t
    val ignore_m : ('e, 'a) t -> ('e, unit) t
    val all : ('e, 'a) t list -> ('e, 'a list) t
    val all_unit : ('e, unit) t list -> ('e, unit) t
  end
val invariant :
  'a Base__Invariant_intf.inv ->
  'b Base__Invariant_intf.inv -> ('a, 'b) t Base__Invariant_intf.inv
val fail : 'err -> ('a, 'err) t
val failf : ('a, unit, string, ('b, string) t) format4 -> 'a
val is_ok : ('a, 'b) t -> bool
val is_error : ('a, 'b) t -> bool
val ok : ('ok, 'a) t -> 'ok option
val ok_exn : ('ok, exn) t -> 'ok
val ok_or_failwith : ('ok, string) t -> 'ok
val error : ('a, 'err) t -> 'err option
val of_option : 'ok option -> error:'err -> ('ok, 'err) t
val iter : ('ok, 'a) t -> f:('ok -> unit) -> unit
val iter_error : ('a, 'err) t -> f:('err -> unit) -> unit
val map : ('ok, 'err) t -> f:('ok -> 'c) -> ('c, 'err) t
val map_error : ('ok, 'err) t -> f:('err -> 'c) -> ('ok, 'c) t
val combine :
  ('ok1, 'err) t ->
  ('ok2, 'err) t ->
  ok:('ok1 -> 'ok2 -> 'ok3) -> err:('err -> 'err -> 'err) -> ('ok3, 'err) t
val combine_errors : ('ok, 'err) t list -> ('ok list, 'err list) t
val combine_errors_unit : (unit, 'err) t list -> (unit, 'err list) t
val to_either : ('ok, 'err) t -> ('ok, 'err) Base__.Either0.t
val of_either : ('ok, 'err) Base__.Either0.t -> ('ok, 'err) t
val ok_fst : ('ok, 'err) t -> ('ok, 'err) Base__.Either0.t
val ok_if_true : bool -> error:'err -> (unit, 'err) t
val try_with : (unit -> 'a) -> ('a, exn) t
module Export :
  sig
    type ('ok, 'err) _result = ('ok, 'err) t = Ok of 'ok | Error of 'err
    val is_ok : ('a, 'b) t -> bool
    val is_error : ('a, 'b) t -> bool("DEBUG:rule", [Tag1 (("t", 1856), ([((("ok")), 100000000, 0, -266); ((("err")), 100000000, 0, -267)], 2, Tag1 ([(("Ok", 783), ([((("ok")), 100000000, 0, -266)]), 0, (("src/result.mli", 18, 490, 492), ("src/result.mli", 18, 490, 503), 0), 0, Tag1 ("Base__Result", 1)); (("Error", 784), ([((("err")), 100000000, 0, -267)]), 0, (("src/result.mli", 19, 504, 506), ("src/result.mli", 19, 504, 521), 0), 0, Tag1 ("Base__Result", 2))], 0), 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Import"), "Stdlib"), "result"), [((("ok")), 100000000, 0, -266); ((("err")), 100000000, 0, -267)], (0)), 100000000, 0, -265)), [25; 25], [0; 0], 0, 0, (("src/result.mli", 17, 441, 441), ("src/result.mli", 20, 522, 593), 0), [(("deriving_inline", (("src/result.mli", 20, 522, 525), ("src/result.mli", 20, 522, 540), 0)), ([([(Tag8 ([(((("sexp"), (("src/result.mli", 20, 522, 541), ("src/result.mli", 20, 522, 545), 0))), (("src/result.mli", 20, 522, 541), ("src/result.mli", 20, 522, 545), 0), 0, 0); (((("sexp_grammar"), (("src/result.mli", 20, 522, 547), ("src/result.mli", 20, 522, 559), 0))), (("src/result.mli", 20, 522, 547), ("src/result.mli", 20, 522, 559), 0), 0, 0); (((("compare"), (("src/result.mli", 20, 522, 561), ("src/result.mli", 20, 522, 568), 0))), (("src/result.mli", 20, 522, 561), ("src/result.mli", 20, 522, 568), 0), 0, 0); (((("equal"), (("src/result.mli", 20, 522, 570), ("src/result.mli", 20, 522, 575), 0))), (("src/result.mli", 20, 522, 570), ("src/result.mli", 20, 522, 575), 0), 0, 0); (((("globalize"), (("src/result.mli", 20, 522, 577), ("src/result.mli", 20, 522, 586), 0))), (("src/result.mli", 20, 522, 577), ("src/result.mli", 20, 522, 586), 0), 0, 0); (((("hash"), (("src/result.mli", 20, 522, 588), ("src/result.mli", 20, 522, 592), 0))), (("src/result.mli", 20, 522, 588), ("src/result.mli", 20, 522, 592), 0), 0, 0)]), (("src/result.mli", 20, 522, 541), ("src/result.mli", 20, 522, 592), 0), 0, 0)], (("src/result.mli", 20, 522, 541), ("src/result.mli", 20, 522, 592), 0))]), (("src/result.mli", 20, 522, 522), ("src/result.mli", 20, 522, 593), 0))], 0, 0, Tag1 ("Base__Result", 0)), 1, 0); (("t_of_sexp", 1857), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -264), ((("a")), 100000000, 0, -258), 0), 100000000, 0, -263), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -262), ((("b")), 100000000, 0, -259), 0), 100000000, 0, -261), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -260), (Tag3 ((("t", 1856)), [((("a")), 100000000, 0, -258); ((("b")), 100000000, 0, -259)], (0)), 100000000, 0, -257), 0), 100000000, 0, -256), 0), 100000000, 0, -255), 0), 100000000, 0, -254), 0, (("src/result.mli", 22, 595, 603), ("src/result.mli", 22, 595, 664), 0), 0, Tag1 ("Sexplib0__Sexpable", 9)), 0); (("sexp_of_t", 1858), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -248), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -253), 0), 100000000, 0, -252), (Tag1 (0, (Tag1 (0, ((("b")), 100000000, 0, -249), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -251), 0), 100000000, 0, -250), (Tag1 (0, (Tag3 ((("t", 1856)), [((("a")), 100000000, 0, -248); ((("b")), 100000000, 0, -249)], (0)), 100000000, 0, -247), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -246), 0), 100000000, 0, -245), 0), 100000000, 0, -244), 0), 100000000, 0, -243), 0, (("src/result.mli", 22, 595, 603), ("src/result.mli", 22, 595, 664), 0), 0, Tag1 ("Sexplib0__Sexpable", 10)), 0); (("t_sexp_grammar", 1859), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [((("ok")), 100000000, 0, -239)], (0)), 100000000, 0, -242), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [((("err")), 100000000, 0, -240)], (0)), 100000000, 0, -241), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("t", 1856)), [((("ok")), 100000000, 0, -239); ((("err")), 100000000, 0, -240)], (0)), 100000000, 0, -238)], (0)), 100000000, 0, -237), 0), 100000000, 0, -236), 0), 100000000, 0, -235), 0, (("src/result.mli", 24, 666, 666), ("src/result.mli", 27, 752, 794), 0), 0, Tag1 ("Base__Result", 5)), 0); (("compare", 1860), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [((("a")), 100000000, 0, -231)], (0)), 100000000, 0, -234), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [((("b")), 100000000, 0, -232)], (0)), 100000000, 0, -233), (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [(Tag3 ((("t", 1856)), [((("a")), 100000000, 0, -231); ((("b")), 100000000, 0, -232)], (0)), 100000000, 0, -230)], (0)), 100000000, 0, -229), 0), 100000000, 0, -228), 0), 100000000, 0, -227), 0, (("src/result.mli", 29, 796, 804), ("src/result.mli", 29, 796, 874), 0), 0, Tag1 ("Base__Ppx_compare_lib", 11)), 0); (("equal", 1861), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "equal"), [((("a")), 100000000, 0, -223)], (0)), 100000000, 0, -226), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "equal"), [((("b")), 100000000, 0, -224)], (0)), 100000000, 0, -225), (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "equal"), [(Tag3 ((("t", 1856)), [((("a")), 100000000, 0, -223); ((("b")), 100000000, 0, -224)], (0)), 100000000, 0, -222)], (0)), 100000000, 0, -221), 0), 100000000, 0, -220), 0), 100000000, 0, -219), 0, (("src/result.mli", 30, 875, 883), ("src/result.mli", 30, 875, 948), 0), 0, Tag1 ("Base__Ppx_compare_lib", 24)), 0); (("globalize", 1862), ((Tag1 (0, (Tag1 (0, ((("ok")), 100000000, 0, -214), ((("ok")), 100000000, 0, -214), 0), 100000000, 0, -218), (Tag1 (0, (Tag1 (0, ((("err")), 100000000, 0, -215), ((("err")), 100000000, 0, -215), 0), 100000000, 0, -217), (Tag1 (0, (Tag3 ((("t", 1856)), [((("ok")), 100000000, 0, -214); ((("err")), 100000000, 0, -215)], (0)), 100000000, 0, -216), (Tag3 ((("t", 1856)), [((("ok")), 100000000, 0, -214); ((("err")), 100000000, 0, -215)], (0)), 100000000, 0, -213), 0), 100000000, 0, -212), 0), 100000000, 0, -211), 0), 100000000, 0, -210), 0, (("src/result.mli", 32, 950, 950), ("src/result.mli", 36, 1069, 1087), 0), 0, Tag1 ("Base__Result", 8)), 0); (("hash_fold_t", 1863), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Ppx_hash_lib")), "hash_fold"), [((("a")), 100000000, 0, -206)], (0)), 100000000, 0, -209), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Ppx_hash_lib")), "hash_fold"), [((("b")), 100000000, 0, -207)], (0)), 100000000, 0, -208), (Tag3 (Tag1 ((Tag2 ("Base__Ppx_hash_lib")), "hash_fold"), [(Tag3 ((("t", 1856)), [((("a")), 100000000, 0, -206); ((("b")), 100000000, 0, -207)], (0)), 100000000, 0, -205)], (0)), 100000000, 0, -204), 0), 100000000, 0, -203), 0), 100000000, 0, -202), 0, (("src/result.mli", 38, 1089, 1097), ("src/result.mli", 38, 1089, 1162), 0), 0, Tag1 ("Base__Ppx_hash_lib", 11)), 0); ((">>=", 1864), ((Tag1 (0, (Tag3 ((("t", 1856)), [((("a")), 100000000, 0, -200); ((("e")), 100000000, 0, -197)], (0)), 100000000, 0, -201), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -200), (Tag3 ((("t", 1856)), [((("b")), 100000000, 0, -196); ((("e")), 100000000, 0, -197)], (0)), 100000000, 0, -199), 0), 100000000, 0, -198), (Tag3 ((("t", 1856)), [((("b")), 100000000, 0, -196); ((("e")), 100000000, 0, -197)], (0)), 100000000, 0, -195), 0), 100000000, 0, -194), 0), 100000000, 0, -193), 0, (("src/result.mli", 42, 1174, 1182), ("src/result.mli", 42, 1174, 1235), 0), 0, Tag1 ("Base__Monad_intf", 81)), 0); ((">>|", 1865), ((Tag1 (0, (Tag3 ((("t", 1856)), [((("a")), 100000000, 0, -191); ((("e")), 100000000, 0, -189)], (0)), 100000000, 0, -192), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -191), ((("b")), 100000000, 0, -188), 0), 100000000, 0, -190), (Tag3 ((("t", 1856)), [((("b")), 100000000, 0, -188); ((("e")), 100000000, 0, -189)], (0)), 100000000, 0, -187), 0), 100000000, 0, -186), 0), 100000000, 0, -185), 0, (("src/result.mli", 42, 1174, 1182), ("src/result.mli", 42, 1174, 1235), 0), 0, Tag1 ("Base__Monad_intf", 82)), 0); Tag3 (("Let_syntax", 1866), 0, (Tag1 ([(("return", 1898), ((Tag1 (0, ((("a")), 100000000, 0, -287), (Tag3 ((("t", 1856)), [((("a")), 100000000, 0, -287); ((0), 100000000, 0, -288)], (0)), 100000000, 0, -286), 0), 100000000, 0, -285), 0, (("src/result.mli", 42, 1174, 1182), ("src/result.mli", 42, 1174, 1235), 0), 0, Tag1 ("Base__Monad_intf", 91)), 0); ((">>=", 1899), ((Tag1 (0, (Tag3 ((("t", 1856)), [((("a")), 100000000, 0, -283); ((("e")), 100000000, 0, -280)], (0)), 100000000, 0, -284), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -283), (Tag3 ((("t", 1856)), [((("b")), 100000000, 0, -279); ((("e")), 100000000, 0, -280)], (0)), 100000000, 0, -282), 0), 100000000, 0, -281), (Tag3 ((("t", 1856)), [((("b")), 100000000, 0, -279); ((("e")), 100000000, 0, -280)], (0)), 100000000, 0, -278), 0), 100000000, 0, -277), 0), 100000000, 0, -276), 0, (("src/result.mli", 42, 1174, 1182), ("src/result.mli", 42, 1174, 1235), 0), 0, Tag1 ("Base__Monad_intf", 81)), 0); ((">>|", 1900), ((Tag1 (0, (Tag3 ((("t", 1856)), [((("a")), 100000000, 0, -274); ((("e")), 100000000, 0, -272)], (0)), 100000000, 0, -275), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -274), ((("b")), 100000000, 0, -271), 0), 100000000, 0, -273), (Tag3 ((("t", 1856)), [((("b")), 100000000, 0, -271); ((("e")), 100000000, 0, -272)], (0)), 100000000, 0, -270), 0), 100000000, 0, -269), 0), 100000000, 0, -268), 0, (("src/result.mli", 42, 1174, 1182), ("src/result.mli", 42, 1174, 1235), 0), 0, Tag1 ("Base__Monad_intf", 82)), 0); Tag3 (("Let_syntax", 1901), 0, (Tag1 ([(("return", 1902), ((Tag1 (0, ((("a")), 100000000, 0, -317), (Tag3 ((("t", 1856)), [((("a")), 100000000, 0, -317); ((0), 100000000, 0, -318)], (0)), 100000000, 0, -316), 0), 100000000, 0, -315), 0, (("src/result.mli", 42, 1174, 1182), ("src/result.mli", 42, 1174, 1235), 0), 0, Tag1 ("Base__Monad_intf", 94)), 0); (("bind", 1903), ((Tag1 (0, (Tag3 ((("t", 1856)), [((("a")), 100000000, 0, -313); ((("e")), 100000000, 0, -310)], (0)), 100000000, 0, -314), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -313), (Tag3 ((("t", 1856)), [((("b")), 100000000, 0, -309); ((("e")), 100000000, 0, -310)], (0)), 100000000, 0, -312), 0), 100000000, 0, -311), (Tag3 ((("t", 1856)), [((("b")), 100000000, 0, -309); ((("e")), 100000000, 0, -310)], (0)), 100000000, 0, -308), 0), 100000000, 0, -307), 0), 100000000, 0, -306), 0, (("src/result.mli", 42, 1174, 1182), ("src/result.mli", 42, 1174, 1235), 0), 0, Tag1 ("Base__Monad_intf", 95)), 0); (("map", 1904), ((Tag1 (0, (Tag3 ((("t", 1856)), [((("a")), 100000000, 0, -304); ((("e")), 100000000, 0, -302)], (0)), 100000000, 0, -305), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -304), ((("b")), 100000000, 0, -301), 0), 100000000, 0, -303), (Tag3 ((("t", 1856)), [((("b")), 100000000, 0, -301); ((("e")), 100000000, 0, -302)], (0)), 100000000, 0, -300), 0), 100000000, 0, -299), 0), 100000000, 0, -298), 0, (("src/result.mli", 42, 1174, 1182), ("src/result.mli", 42, 1174, 1235), 0), 0, Tag1 ("Base__Monad_intf", 96)), 0); (("both", 1905), ((Tag1 (0, (Tag3 ((("t", 1856)), [((("a")), 100000000, 0, -293); ((("e")), 100000000, 0, -295)], (0)), 100000000, 0, -297), (Tag1 (0, (Tag3 ((("t", 1856)), [((("b")), 100000000, 0, -294); ((("e")), 100000000, 0, -295)], (0)), 100000000, 0, -296), (Tag3 ((("t", 1856)), [(Tag2 ([((("a")), 100000000, 0, -293); ((("b")), 100000000, 0, -294)]), 100000000, 0, -292); ((("e")), 100000000, 0, -295)], (0)), 100000000, 0, -291), 0), 100000000, 0, -290), 0), 100000000, 0, -289), 0, (("src/result.mli", 42, 1174, 1182), ("src/result.mli", 42, 1174, 1235), 0), 0, Tag1 ("Base__Monad_intf", 97)), 0); Tag3 (("Open_on_rhs", 1906), 0, (Tag1 (0), 0, (("src/result.mli", 42, 1174, 1182), ("src/result.mli", 42, 1174, 1235), 0), Tag1 ("Base__Monad_intf", 98)), 0, 0)]), 0, (("src/result.mli", 42, 1174, 1182), ("src/result.mli", 42, 1174, 1235), 0), Tag1 ("Base__Monad_intf", 99)), 0, 0)]), 0, (("src/result.mli", 42, 1174, 1182), ("src/result.mli", 42, 1174, 1235), 0), Tag1 ("Base__Monad_intf", 100)), 0, 0); Tag3 (("Monad_infix", 1867), 0, (Tag1 ([((">>=", 1907), ((Tag1 (0, (Tag3 ((("t", 1856)), [((("a")), 100000000, 0, -334); ((("e")), 100000000, 0, -331)], (0)), 100000000, 0, -335), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -334), (Tag3 ((("t", 1856)), [((("b")), 100000000, 0, -330); ((("e")), 100000000, 0, -331)], (0)), 100000000, 0, -333), 0), 100000000, 0, -332), (Tag3 ((("t", 1856)), [((("b")), 100000000, 0, -330); ((("e")), 100000000, 0, -331)], (0)), 100000000, 0, -329), 0), 100000000, 0, -328), 0), 100000000, 0, -327), 0, (("src/result.mli", 42, 1174, 1182), ("src/result.mli", 42, 1174, 1235), 0), 0, Tag1 ("Base__Monad_intf", 81)), 0); ((">>|", 1908), ((Tag1 (0, (Tag3 ((("t", 1856)), [((("a")), 100000000, 0, -325); ((("e")), 100000000, 0, -323)], (0)), 100000000, 0, -326), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -325), ((("b")), 100000000, 0, -322), 0), 100000000, 0, -324), (Tag3 ((("t", 1856)), [((("b")), 100000000, 0, -322); ((("e")), 100000000, 0, -323)], (0)), 100000000, 0, -321), 0), 100000000, 0, -320), 0), 100000000, 0, -319), 0, (("src/result.mli", 42, 1174, 1182), ("src/result.mli", 42, 1174, 1235), 0), 0, Tag1 ("Base__Monad_intf", 82)), 0)]), 0, (("src/result.mli", 42, 1174, 1182), ("src/result.mli", 42, 1174, 1235), 0), Tag1 ("Base__Monad_intf", 118)), 0, 0); (("bind", 1868), ((Tag1 (0, (Tag3 ((("t", 1856)), [((("a")), 100000000, 0, -183); ((("e")), 100000000, 0, -180)], (0)), 100000000, 0, -184), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -183), (Tag3 ((("t", 1856)), [((("b")), 100000000, 0, -179); ((("e")), 100000000, 0, -180)], (0)), 100000000, 0, -182), 0), 100000000, 0, -181), (Tag3 ((("t", 1856)), [((("b")), 100000000, 0, -179); ((("e")), 100000000, 0, -180)], (0)), 100000000, 0, -178), 0), 100000000, 0, -177), 0), 100000000, 0, -176), 0, (("src/result.mli", 42, 1174, 1182), ("src/result.mli", 42, 1174, 1235), 0), 0, Tag1 ("Base__Monad_intf", 119)), 0); (("return", 1869), ((Tag1 (0, ((("a")), 100000000, 0, -174), (Tag3 ((("t", 1856)), [((("a")), 100000000, 0, -174); ((0), 100000000, 0, -175)], (0)), 100000000, 0, -173), 0), 100000000, 0, -172), 0, (("src/result.mli", 42, 1174, 1182), ("src/result.mli", 42, 1174, 1235), 0), 0, Tag1 ("Base__Monad_intf", 120)), 0); (("join", 1870), ((Tag1 (0, (Tag3 ((("t", 1856)), [(Tag3 ((("t", 1856)), [((("a")), 100000000, 0, -168); ((("e")), 100000000, 0, -169)], (0)), 100000000, 0, -171); ((("e")), 100000000, 0, -169)], (0)), 100000000, 0, -170), (Tag3 ((("t", 1856)), [((("a")), 100000000, 0, -168); ((("e")), 100000000, 0, -169)], (0)), 100000000, 0, -167), 0), 100000000, 0, -166), 0, (("src/result.mli", 42, 1174, 1182), ("src/result.mli", 42, 1174, 1235), 0), 0, Tag1 ("Base__Monad_intf", 122)), 0); (("ignore_m", 1871), ((Tag1 (0, (Tag3 ((("t", 1856)), [((0), 100000000, 0, -165); ((("e")), 100000000, 0, -163)], (0)), 100000000, 0, -164), (Tag3 ((("t", 1856)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -162); ((("e")), 100000000, 0, -163)], (0)), 100000000, 0, -161), 0), 100000000, 0, -160), 0, (("src/result.mli", 42, 1174, 1182), ("src/result.mli", 42, 1174, 1235), 0), 0, Tag1 ("Base__Monad_intf", 123)), 0); (("all", 1872), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 1856)), [((("a")), 100000000, 0, -156); ((("e")), 100000000, 0, -157)], (0)), 100000000, 0, -159)], (0)), 100000000, 0, -158), (Tag3 ((("t", 1856)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -156)], (0)), 100000000, 0, -155); ((("e")), 100000000, 0, -157)], (0)), 100000000, 0, -154), 0), 100000000, 0, -153), 0, (("src/result.mli", 42, 1174, 1182), ("src/result.mli", 42, 1174, 1235), 0), 0, Tag1 ("Base__Monad_intf", 124)), 0); (("all_unit", 1873), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 1856)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -152); ((("e")), 100000000, 0, -149)], (0)), 100000000, 0, -151)], (0)), 100000000, 0, -150), (Tag3 ((("t", 1856)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -148); ((("e")), 100000000, 0, -149)], (0)), 100000000, 0, -147), 0), 100000000, 0, -146), 0, (("src/result.mli", 42, 1174, 1182), ("src/result.mli", 42, 1174, 1235), 0), 0, Tag1 ("Base__Monad_intf", 125)), 0); Tag3 (("Error", 1874), 0, (Tag1 ([((">>=", 1909), ((Tag1 (0, (Tag3 ((("t", 1856)), [((("e")), 100000000, 0, -394); ((("a")), 100000000, 0, -398)], (0)), 100000000, 0, -399), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -398), (Tag3 ((("t", 1856)), [((("e")), 100000000, 0, -394); ((("b")), 100000000, 0, -395)], (0)), 100000000, 0, -397), 0), 100000000, 0, -396), (Tag3 ((("t", 1856)), [((("e")), 100000000, 0, -394); ((("b")), 100000000, 0, -395)], (0)), 100000000, 0, -393), 0), 100000000, 0, -392), 0), 100000000, 0, -391), 0, (("src/result.mli", 43, 1236, 1251), ("src/result.mli", 43, 1236, 1304), 0), 0, Tag1 ("Base__Monad_intf", 81)), 0); ((">>|", 1910), ((Tag1 (0, (Tag3 ((("t", 1856)), [((("e")), 100000000, 0, -386); ((("a")), 100000000, 0, -389)], (0)), 100000000, 0, -390), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -389), ((("b")), 100000000, 0, -387), 0), 100000000, 0, -388), (Tag3 ((("t", 1856)), [((("e")), 100000000, 0, -386); ((("b")), 100000000, 0, -387)], (0)), 100000000, 0, -385), 0), 100000000, 0, -384), 0), 100000000, 0, -383), 0, (("src/result.mli", 43, 1236, 1251), ("src/result.mli", 43, 1236, 1304), 0), 0, Tag1 ("Base__Monad_intf", 82)), 0); Tag3 (("Let_syntax", 1911), 0, (Tag1 ([(("return", 1920), ((Tag1 (0, ((("a")), 100000000, 0, -420), (Tag3 ((("t", 1856)), [((0), 100000000, 0, -419); ((("a")), 100000000, 0, -420)], (0)), 100000000, 0, -418), 0), 100000000, 0, -417), 0, (("src/result.mli", 43, 1236, 1251), ("src/result.mli", 43, 1236, 1304), 0), 0, Tag1 ("Base__Monad_intf", 91)), 0); ((">>=", 1921), ((Tag1 (0, (Tag3 ((("t", 1856)), [((("e")), 100000000, 0, -411); ((("a")), 100000000, 0, -415)], (0)), 100000000, 0, -416), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -415), (Tag3 ((("t", 1856)), [((("e")), 100000000, 0, -411); ((("b")), 100000000, 0, -412)], (0)), 100000000, 0, -414), 0), 100000000, 0, -413), (Tag3 ((("t", 1856)), [((("e")), 100000000, 0, -411); ((("b")), 100000000, 0, -412)], (0)), 100000000, 0, -410), 0), 100000000, 0, -409), 0), 100000000, 0, -408), 0, (("src/result.mli", 43, 1236, 1251), ("src/result.mli", 43, 1236, 1304), 0), 0, Tag1 ("Base__Monad_intf", 81)), 0); ((">>|", 1922), ((Tag1 (0, (Tag3 ((("t", 1856)), [((("e")), 100000000, 0, -403); ((("a")), 100000000, 0, -406)], (0)), 100000000, 0, -407), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -406), ((("b")), 100000000, 0, -404), 0), 100000000, 0, -405), (Tag3 ((("t", 1856)), [((("e")), 100000000, 0, -403); ((("b")), 100000000, 0, -404)], (0)), 100000000, 0, -402), 0), 100000000, 0, -401), 0), 100000000, 0, -400), 0, (("src/result.mli", 43, 1236, 1251), ("src/result.mli", 43, 1236, 1304), 0), 0, Tag1 ("Base__Monad_intf", 82)), 0); Tag3 (("Let_syntax", 1923), 0, (Tag1 ([(("return", 1924), ((Tag1 (0, ((("a")), 100000000, 0, -450), (Tag3 ((("t", 1856)), [((0), 100000000, 0, -449); ((("a")), 100000000, 0, -450)], (0)), 100000000, 0, -448), 0), 100000000, 0, -447), 0, (("src/result.mli", 43, 1236, 1251), ("src/result.mli", 43, 1236, 1304), 0), 0, Tag1 ("Base__Monad_intf", 94)), 0); (("bind", 1925), ((Tag1 (0, (Tag3 ((("t", 1856)), [((("e")), 100000000, 0, -441); ((("a")), 100000000, 0, -445)], (0)), 100000000, 0, -446), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -445), (Tag3 ((("t", 1856)), [((("e")), 100000000, 0, -441); ((("b")), 100000000, 0, -442)], (0)), 100000000, 0, -444), 0), 100000000, 0, -443), (Tag3 ((("t", 1856)), [((("e")), 100000000, 0, -441); ((("b")), 100000000, 0, -442)], (0)), 100000000, 0, -440), 0), 100000000, 0, -439), 0), 100000000, 0, -438), 0, (("src/result.mli", 43, 1236, 1251), ("src/result.mli", 43, 1236, 1304), 0), 0, Tag1 ("Base__Monad_intf", 95)), 0); (("map", 1926), ((Tag1 (0, (Tag3 ((("t", 1856)), [((("e")), 100000000, 0, -433); ((("a")), 100000000, 0, -436)], (0)), 100000000, 0, -437), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -436), ((("b")), 100000000, 0, -434), 0), 100000000, 0, -435), (Tag3 ((("t", 1856)), [((("e")), 100000000, 0, -433); ((("b")), 100000000, 0, -434)], (0)), 100000000, 0, -432), 0), 100000000, 0, -431), 0), 100000000, 0, -430), 0, (("src/result.mli", 43, 1236, 1251), ("src/result.mli", 43, 1236, 1304), 0), 0, Tag1 ("Base__Monad_intf", 96)), 0); (("both", 1927), ((Tag1 (0, (Tag3 ((("t", 1856)), [((("e")), 100000000, 0, -424); ((("a")), 100000000, 0, -426)], (0)), 100000000, 0, -429), (Tag1 (0, (Tag3 ((("t", 1856)), [((("e")), 100000000, 0, -424); ((("b")), 100000000, 0, -427)], (0)), 100000000, 0, -428), (Tag3 ((("t", 1856)), [((("e")), 100000000, 0, -424); (Tag2 ([((("a")), 100000000, 0, -426); ((("b")), 100000000, 0, -427)]), 100000000, 0, -425)], (0)), 100000000, 0, -423), 0), 100000000, 0, -422), 0), 100000000, 0, -421), 0, (("src/result.mli", 43, 1236, 1251), ("src/result.mli", 43, 1236, 1304), 0), 0, Tag1 ("Base__Monad_intf", 97)), 0); Tag3 (("Open_on_rhs", 1928), 0, (Tag1 (0), 0, (("src/result.mli", 43, 1236, 1251), ("src/result.mli", 43, 1236, 1304), 0), Tag1 ("Base__Monad_intf", 98)), 0, 0)]), 0, (("src/result.mli", 43, 1236, 1251), ("src/result.mli", 43, 1236, 1304), 0), Tag1 ("Base__Monad_intf", 99)), 0, 0)]), 0, (("src/result.mli", 43, 1236, 1251), ("src/result.mli", 43, 1236, 1304), 0), Tag1 ("Base__Monad_intf", 100)), 0, 0); Tag3 (("Monad_infix", 1912), 0, (Tag1 ([((">>=", 1929), ((Tag1 (0, (Tag3 ((("t", 1856)), [((("e")), 100000000, 0, -462); ((("a")), 100000000, 0, -466)], (0)), 100000000, 0, -467), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -466), (Tag3 ((("t", 1856)), [((("e")), 100000000, 0, -462); ((("b")), 100000000, 0, -463)], (0)), 100000000, 0, -465), 0), 100000000, 0, -464), (Tag3 ((("t", 1856)), [((("e")), 100000000, 0, -462); ((("b")), 100000000, 0, -463)], (0)), 100000000, 0, -461), 0), 100000000, 0, -460), 0), 100000000, 0, -459), 0, (("src/result.mli", 43, 1236, 1251), ("src/result.mli", 43, 1236, 1304), 0), 0, Tag1 ("Base__Monad_intf", 81)), 0); ((">>|", 1930), ((Tag1 (0, (Tag3 ((("t", 1856)), [((("e")), 100000000, 0, -454); ((("a")), 100000000, 0, -457)], (0)), 100000000, 0, -458), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -457), ((("b")), 100000000, 0, -455), 0), 100000000, 0, -456), (Tag3 ((("t", 1856)), [((("e")), 100000000, 0, -454); ((("b")), 100000000, 0, -455)], (0)), 100000000, 0, -453), 0), 100000000, 0, -452), 0), 100000000, 0, -451), 0, (("src/result.mli", 43, 1236, 1251), ("src/result.mli", 43, 1236, 1304), 0), 0, Tag1 ("Base__Monad_intf", 82)), 0)]), 0, (("src/result.mli", 43, 1236, 1251), ("src/result.mli", 43, 1236, 1304), 0), Tag1 ("Base__Monad_intf", 118)), 0, 0); (("bind", 1913), ((Tag1 (0, (Tag3 ((("t", 1856)), [((("e")), 100000000, 0, -377); ((("a")), 100000000, 0, -381)], (0)), 100000000, 0, -382), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -381), (Tag3 ((("t", 1856)), [((("e")), 100000000, 0, -377); ((("b")), 100000000, 0, -378)], (0)), 100000000, 0, -380), 0), 100000000, 0, -379), (Tag3 ((("t", 1856)), [((("e")), 100000000, 0, -377); ((("b")), 100000000, 0, -378)], (0)), 100000000, 0, -376), 0), 100000000, 0, -375), 0), 100000000, 0, -374), 0, (("src/result.mli", 43, 1236, 1251), ("src/result.mli", 43, 1236, 1304), 0), 0, Tag1 ("Base__Monad_intf", 119)), 0); (("return", 1914), ((Tag1 (0, ((("a")), 100000000, 0, -373), (Tag3 ((("t", 1856)), [((0), 100000000, 0, -372); ((("a")), 100000000, 0, -373)], (0)), 100000000, 0, -371), 0), 100000000, 0, -370), 0, (("src/result.mli", 43, 1236, 1251), ("src/result.mli", 43, 1236, 1304), 0), 0, Tag1 ("Base__Monad_intf", 120)), 0); (("map", 1915), ((Tag1 (0, (Tag3 ((("t", 1856)), [((("e")), 100000000, 0, -365); ((("a")), 100000000, 0, -368)], (0)), 100000000, 0, -369), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -368), ((("b")), 100000000, 0, -366), 0), 100000000, 0, -367), (Tag3 ((("t", 1856)), [((("e")), 100000000, 0, -365); ((("b")), 100000000, 0, -366)], (0)), 100000000, 0, -364), 0), 100000000, 0, -363), 0), 100000000, 0, -362), 0, (("src/result.mli", 43, 1236, 1251), ("src/result.mli", 43, 1236, 1304), 0), 0, Tag1 ("Base__Monad_intf", 121)), 0); (("join", 1916), ((Tag1 (0, (Tag3 ((("t", 1856)), [((("e")), 100000000, 0, -358); (Tag3 ((("t", 1856)), [((("e")), 100000000, 0, -358); ((("a")), 100000000, 0, -359)], (0)), 100000000, 0, -361)], (0)), 100000000, 0, -360), (Tag3 ((("t", 1856)), [((("e")), 100000000, 0, -358); ((("a")), 100000000, 0, -359)], (0)), 100000000, 0, -357), 0), 100000000, 0, -356), 0, (("src/result.mli", 43, 1236, 1251), ("src/result.mli", 43, 1236, 1304), 0), 0, Tag1 ("Base__Monad_intf", 122)), 0); (("ignore_m", 1917), ((Tag1 (0, (Tag3 ((("t", 1856)), [((("e")), 100000000, 0, -352); ((0), 100000000, 0, -355)], (0)), 100000000, 0, -354), (Tag3 ((("t", 1856)), [((("e")), 100000000, 0, -352); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -353)], (0)), 100000000, 0, -351), 0), 100000000, 0, -350), 0, (("src/result.mli", 43, 1236, 1251), ("src/result.mli", 43, 1236, 1304), 0), 0, Tag1 ("Base__Monad_intf", 123)), 0); (("all", 1918), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 1856)), [((("e")), 100000000, 0, -345); ((("a")), 100000000, 0, -347)], (0)), 100000000, 0, -349)], (0)), 100000000, 0, -348), (Tag3 ((("t", 1856)), [((("e")), 100000000, 0, -345); (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -347)], (0)), 100000000, 0, -346)], (0)), 100000000, 0, -344), 0), 100000000, 0, -343), 0, (("src/result.mli", 43, 1236, 1251), ("src/result.mli", 43, 1236, 1304), 0), 0, Tag1 ("Base__Monad_intf", 124)), 0); (("all_unit", 1919), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 1856)), [((("e")), 100000000, 0, -338); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -342)], (0)), 100000000, 0, -341)], (0)), 100000000, 0, -340), (Tag3 ((("t", 1856)), [((("e")), 100000000, 0, -338); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -339)], (0)), 100000000, 0, -337), 0), 100000000, 0, -336), 0, (("src/result.mli", 43, 1236, 1251), ("src/result.mli", 43, 1236, 1304), 0), 0, Tag1 ("Base__Monad_intf", 125)), 0)]), 0, (("src/result.mli", 43, 1236, 1236), ("src/result.mli", 43, 1236, 1304), 0), Tag1 ("Base__Result", 12)), 0, 0); (("invariant", 1875), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Invariant_intf")), "inv"), [((("a")), 100000000, 0, -142)], (0)), 100000000, 0, -145), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Invariant_intf")), "inv"), [((("b")), 100000000, 0, -143)], (0)), 100000000, 0, -144), (Tag3 (Tag1 ((Tag2 ("Base__Invariant_intf")), "inv"), [(Tag3 ((("t", 1856)), [((("a")), 100000000, 0, -142); ((("b")), 100000000, 0, -143)], (0)), 100000000, 0, -141)], (0)), 100000000, 0, -140), 0), 100000000, 0, -139), 0), 100000000, 0, -138), 0, (("src/result.mli", 45, 1306, 1314), ("src/result.mli", 45, 1306, 1372), 0), 0, Tag1 ("Base__Invariant_intf", 9)), 0); (("fail", 1876), ((Tag1 (0, ((("err")), 100000000, 0, -137), (Tag3 ((("t", 1856)), [((0), 100000000, 0, -136); ((("err")), 100000000, 0, -137)], (0)), 100000000, 0, -135), 0), 100000000, 0, -134), 0, (("src/result.mli", 48, 1375, 1375), ("src/result.mli", 48, 1375, 1405), 0), 0, Tag1 ("Base__Result", 14)), 0); (("failf", 1877), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format4"), [((("a")), 100000000, 0, -127); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -129); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -130); (Tag3 ((("t", 1856)), [((0), 100000000, 0, -132); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -133)], (0)), 100000000, 0, -131)], (0)), 100000000, 0, -128), ((("a")), 100000000, 0, -127), 0), 100000000, 0, -126), 0, (("src/result.mli", 51, 1478, 1478), ("src/result.mli", 51, 1478, 1537), 0), 0, Tag1 ("Base__Result", 15)), 0); (("is_ok", 1878), ((Tag1 (0, (Tag3 ((("t", 1856)), [((0), 100000000, 0, -124); ((0), 100000000, 0, -125)], (0)), 100000000, 0, -123), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -122), 0), 100000000, 0, -121), 0, (("src/result.mli", 53, 1539, 1539), ("src/result.mli", 53, 1539, 1567), 0), 0, Tag1 ("Base__Result", 16)), 0); (("is_error", 1879), ((Tag1 (0, (Tag3 ((("t", 1856)), [((0), 100000000, 0, -119); ((0), 100000000, 0, -120)], (0)), 100000000, 0, -118), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -117), 0), 100000000, 0, -116), 0, (("src/result.mli", 54, 1568, 1568), ("src/result.mli", 54, 1568, 1599), 0), 0, Tag1 ("Base__Result", 17)), 0); (("ok", 1880), ((Tag1 (0, (Tag3 ((("t", 1856)), [((("ok")), 100000000, 0, -113); ((0), 100000000, 0, -115)], (0)), 100000000, 0, -114), (Tag3 ((Tag3 ("option", 10)), [((("ok")), 100000000, 0, -113)], (0)), 100000000, 0, -112), 0), 100000000, 0, -111), 0, (("src/result.mli", 55, 1600, 1600), ("src/result.mli", 55, 1600, 1633), 0), 0, Tag1 ("Base__Result", 18)), 0); (("ok_exn", 1881), ((Tag1 (0, (Tag3 ((("t", 1856)), [((("ok")), 100000000, 0, -108); (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -110)], (0)), 100000000, 0, -109), ((("ok")), 100000000, 0, -108), 0), 100000000, 0, -107), 0, (("src/result.mli", 56, 1634, 1634), ("src/result.mli", 56, 1634, 1666), 0), 0, Tag1 ("Base__Result", 19)), 0); (("ok_or_failwith", 1882), ((Tag1 (0, (Tag3 ((("t", 1856)), [((("ok")), 100000000, 0, -104); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -106)], (0)), 100000000, 0, -105), ((("ok")), 100000000, 0, -104), 0), 100000000, 0, -103), 0, (("src/result.mli", 57, 1667, 1667), ("src/result.mli", 57, 1667, 1710), 0), 0, Tag1 ("Base__Result", 20)), 0); (("error", 1883), ((Tag1 (0, (Tag3 ((("t", 1856)), [((0), 100000000, 0, -102); ((("err")), 100000000, 0, -100)], (0)), 100000000, 0, -101), (Tag3 ((Tag3 ("option", 10)), [((("err")), 100000000, 0, -100)], (0)), 100000000, 0, -99), 0), 100000000, 0, -98), 0, (("src/result.mli", 58, 1711, 1711), ("src/result.mli", 58, 1711, 1749), 0), 0, Tag1 ("Base__Result", 21)), 0); (("of_option", 1884), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("ok")), 100000000, 0, -95)], (0)), 100000000, 0, -97), (Tag1 (("error"), ((("err")), 100000000, 0, -96), (Tag3 ((("t", 1856)), [((("ok")), 100000000, 0, -95); ((("err")), 100000000, 0, -96)], (0)), 100000000, 0, -94), 0), 100000000, 0, -93), 0), 100000000, 0, -92), 0, (("src/result.mli", 59, 1750, 1750), ("src/result.mli", 59, 1750, 1807), 0), 0, Tag1 ("Base__Result", 22)), 0); (("iter", 1885), ((Tag1 (0, (Tag3 ((("t", 1856)), [((("ok")), 100000000, 0, -89); ((0), 100000000, 0, -91)], (0)), 100000000, 0, -90), (Tag1 (("f"), (Tag1 (0, ((("ok")), 100000000, 0, -89), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -88), 0), 100000000, 0, -87), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -86), 0), 100000000, 0, -85), 0), 100000000, 0, -84), 0, (("src/result.mli", 60, 1808, 1808), ("src/result.mli", 60, 1808, 1866), 0), 0, Tag1 ("Base__Result", 23)), 0); (("iter_error", 1886), ((Tag1 (0, (Tag3 ((("t", 1856)), [((0), 100000000, 0, -83); ((("err")), 100000000, 0, -81)], (0)), 100000000, 0, -82), (Tag1 (("f"), (Tag1 (0, ((("err")), 100000000, 0, -81), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -80), 0), 100000000, 0, -79), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -78), 0), 100000000, 0, -77), 0), 100000000, 0, -76), 0, (("src/result.mli", 61, 1867, 1867), ("src/result.mli", 61, 1867, 1933), 0), 0, Tag1 ("Base__Result", 24)), 0); (("map", 1887), ((Tag1 (0, (Tag3 ((("t", 1856)), [((("ok")), 100000000, 0, -74); ((("err")), 100000000, 0, -72)], (0)), 100000000, 0, -75), (Tag1 (("f"), (Tag1 (0, ((("ok")), 100000000, 0, -74), ((("c")), 100000000, 0, -71), 0), 100000000, 0, -73), (Tag3 ((("t", 1856)), [((("c")), 100000000, 0, -71); ((("err")), 100000000, 0, -72)], (0)), 100000000, 0, -70), 0), 100000000, 0, -69), 0), 100000000, 0, -68), 0, (("src/result.mli", 62, 1934, 1934), ("src/result.mli", 62, 1934, 2000), 0), 0, Tag1 ("Base__Result", 25)), 0); (("map_error", 1888), ((Tag1 (0, (Tag3 ((("t", 1856)), [((("ok")), 100000000, 0, -63); ((("err")), 100000000, 0, -66)], (0)), 100000000, 0, -67), (Tag1 (("f"), (Tag1 (0, ((("err")), 100000000, 0, -66), ((("c")), 100000000, 0, -64), 0), 100000000, 0, -65), (Tag3 ((("t", 1856)), [((("ok")), 100000000, 0, -63); ((("c")), 100000000, 0, -64)], (0)), 100000000, 0, -62), 0), 100000000, 0, -61), 0), 100000000, 0, -60), 0, (("src/result.mli", 63, 2001, 2001), ("src/result.mli", 63, 2001, 2073), 0), 0, Tag1 ("Base__Result", 26)), 0); (("combine", 1889), ((Tag1 (0, (Tag3 ((("t", 1856)), [((("ok1")), 100000000, 0, -57); ((("err")), 100000000, 0, -51)], (0)), 100000000, 0, -59), (Tag1 (0, (Tag3 ((("t", 1856)), [((("ok2")), 100000000, 0, -56); ((("err")), 100000000, 0, -51)], (0)), 100000000, 0, -58), (Tag1 (("ok"), (Tag1 (0, ((("ok1")), 100000000, 0, -57), (Tag1 (0, ((("ok2")), 100000000, 0, -56), ((("ok3")), 100000000, 0, -50), 0), 100000000, 0, -55), 0), 100000000, 0, -54), (Tag1 (("err"), (Tag1 (0, ((("err")), 100000000, 0, -51), (Tag1 (0, ((("err")), 100000000, 0, -51), ((("err")), 100000000, 0, -51), 0), 100000000, 0, -53), 0), 100000000, 0, -52), (Tag3 ((("t", 1856)), [((("ok3")), 100000000, 0, -50); ((("err")), 100000000, 0, -51)], (0)), 100000000, 0, -49), 0), 100000000, 0, -48), 0), 100000000, 0, -47), 0), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("src/result.mli", 66, 2135, 2135), ("src/result.mli", 71, 2270, 2289), 0), 0, Tag1 ("Base__Result", 27)), 0); (("combine_errors", 1890), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 1856)), [((("ok")), 100000000, 0, -40); ((("err")), 100000000, 0, -42)], (0)), 100000000, 0, -44)], (0)), 100000000, 0, -43), (Tag3 ((("t", 1856)), [(Tag3 ((Tag3 ("list", 9)), [((("ok")), 100000000, 0, -40)], (0)), 100000000, 0, -39); (Tag3 ((Tag3 ("list", 9)), [((("err")), 100000000, 0, -42)], (0)), 100000000, 0, -41)], (0)), 100000000, 0, -38), 0), 100000000, 0, -37), 0, (("src/result.mli", 78, 2534, 2534), ("src/result.mli", 78, 2534, 2600), 0), 0, Tag1 ("Base__Result", 28)), 0); (("combine_errors_unit", 1891), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 1856)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -36); ((("err")), 100000000, 0, -33)], (0)), 100000000, 0, -35)], (0)), 100000000, 0, -34), (Tag3 ((("t", 1856)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -31); (Tag3 ((Tag3 ("list", 9)), [((("err")), 100000000, 0, -33)], (0)), 100000000, 0, -32)], (0)), 100000000, 0, -30), 0), 100000000, 0, -29), 0, (("src/result.mli", 82, 2761, 2761), ("src/result.mli", 82, 2761, 2829), 0), 0, Tag1 ("Base__Result", 29)), 0); (("to_either", 1892), ((Tag1 (0, (Tag3 ((("t", 1856)), [((("ok")), 100000000, 0, -26); ((("err")), 100000000, 0, -27)], (0)), 100000000, 0, -28), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Either0"), "t"), [((("ok")), 100000000, 0, -26); ((("err")), 100000000, 0, -27)], (0)), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("src/result.mli", 91, 3090, 3090), ("src/result.mli", 91, 3090, 3144), 0), 0, Tag1 ("Base__Result", 30)), 0); (("of_either", 1893), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Either0"), "t"), [((("ok")), 100000000, 0, -21); ((("err")), 100000000, 0, -22)], (0)), 100000000, 0, -23), (Tag3 ((("t", 1856)), [((("ok")), 100000000, 0, -21); ((("err")), 100000000, 0, -22)], (0)), 100000000, 0, -20), 0), 100000000, 0, -19), 0, (("src/result.mli", 93, 3146, 3146), ("src/result.mli", 93, 3146, 3200), 0), 0, Tag1 ("Base__Result", 31)), 0); (("ok_fst", 1894), ((Tag1 (0, (Tag3 ((("t", 1856)), [((("ok")), 100000000, 0, -16); ((("err")), 100000000, 0, -17)], (0)), 100000000, 0, -18), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Either0"), "t"), [((("ok")), 100000000, 0, -16); ((("err")), 100000000, 0, -17)], (0)), 100000000, 0, -15), 0), 100000000, 0, -14), 0, (("src/result.mli", 95, 3202, 3202), ("src/result.mli", 96, 3254, 3311), 0), [(("deprecated", (("src/result.mli", 96, 3254, 3257), ("src/result.mli", 96, 3254, 3267), 0)), ([([(Tag1 (Tag2 ("[since 2020-01] Use [to_either] instead.", (("src/result.mli", 96, 3254, 3269), ("src/result.mli", 96, 3254, 3309), 0), 0)), (("src/result.mli", 96, 3254, 3268), ("src/result.mli", 96, 3254, 3310), 0), 0, 0)], (("src/result.mli", 96, 3254, 3268), ("src/result.mli", 96, 3254, 3310), 0))]), (("src/result.mli", 96, 3254, 3254), ("src/result.mli", 96, 3254, 3311), 0))], Tag1 ("Base__Result", 32)), 0); (("ok_if_true", 1895), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -13), (Tag1 (("error"), ((("err")), 100000000, 0, -12), (Tag3 ((("t", 1856)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11); ((("err")), 100000000, 0, -12)], (0)), 100000000, 0, -10), 0), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("src/result.mli", 99, 3402, 3402), ("src/result.mli", 99, 3402, 3455), 0), 0, Tag1 ("Base__Result", 33)), 0); (("try_with", 1896), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7), ((("a")), 100000000, 0, -4), 0), 100000000, 0, -6), (Tag3 ((("t", 1856)), [((("a")), 100000000, 0, -4); (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -5)], (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/result.mli", 101, 3457, 3457), ("src/result.mli", 101, 3457, 3509), 0), 0, Tag1 ("Base__Result", 34)), 0); Tag3 (("Export", 1897), 0, (Tag1 ([Tag1 (("_result", 1931), ([((("ok")), 100000000, 0, -479); ((("err")), 100000000, 0, -480)], 2, Tag1 ([(("Ok", 1781), ([((("ok")), 100000000, 0, -479)]), 0, (("src/result.mli", 105, 3576, 3580), ("src/result.mli", 105, 3576, 3591), 0), 0, Tag1 ("Base__Result", 36)); (("Error", 1782), ([((("err")), 100000000, 0, -480)]), 0, (("src/result.mli", 106, 3592, 3596), ("src/result.mli", 106, 3592, 3611), 0), 0, Tag1 ("Base__Result", 37))], 0), 1, ((Tag3 ((("t", 1856)), [((("ok")), 100000000, 0, -479); ((("err")), 100000000, 0, -480)], (0)), 100000000, 0, -478)), [25; 25], [0; 0], 0, 0, (("src/result.mli", 104, 3531, 3533), ("src/result.mli", 106, 3592, 3611), 0), 0, 0, 0, Tag1 ("Base__Result", 35)), 1, 0); (("is_ok", 1932), ((Tag1 (0, (Tag3 ((("t", 1856)), [((0), 100000000, 0, -476); ((0), 100000000, 0, -477)], (0)), 100000000, 0, -475), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -474), 0), 100000000, 0, -473), 0, (("src/result.mli", 108, 3613, 3615), ("src/result.mli", 108, 3613, 3643), 0), 0, Tag1 ("Base__Result", 38)), 0); (("is_error", 1933), ((Tag1 (0, (Tag3 ((("t", 1856)), [((0), 100000000, 0, -471); ((0), 100000000, 0, -472)], (0)), 100000000, 0, -470), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -469), 0), 100000000, 0, -468), 0, (("src/result.mli", 109, 3644, 3646), ("src/result.mli", 109, 3644, 3677), 0), 0, Tag1 ("Base__Result", 39)), 0)]), 0, (("src/result.mli", 103, 3511, 3511), ("src/result.mli", 110, 3678, 3681), 0), Tag1 ("Base__Result", 40)), 0, 0)], "Base__Result", [("Base__Result", ("\204|\215\173FMa\2511<&\215T\194$\228")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__StringLabels", ("\134F\024\226\216Is#\223\230\234\169Z\206Gc")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__ListLabels", ("*\194\012\191\020%\170\249m\002\180\178hk\205\220")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("Sexplib0__Sexpable", ("\251${\207(\249/z\242\255\250^\141\156\210e")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv_error", ("kzv!\151~\198P\000\165\176d\007\251p\232")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Base__Sys0", ("\206z\231\154s\\\136\2364\131\005\014\031\152m3")); ("Base__String0", ("\212\221L\220\245\255\162P\228\224\189\216\135H\149O")); ("Base__Source_code_position0", ("_\003P6\254\029\206\005\130\136\180\019\145\230\000M")); ("Base__Sexp", ("\154\187\171&\209=\153[\236\250!U\174`\190T")); ("Base__Printf", ("\000\196c,\214\127\226\174\220\190\253z!\242\028\250")); ("Base__Ppx_hash_lib", ("\199\141\178\193\006\209L\007^\020(\131\224sn8")); ("Base__Ppx_compare_lib", ("\243\186~\233\228\199Ah\181.\223\004e\231\129S")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Monad_intf", ("\208\203\163\152\184O\130?\012:\168\247}\018\253\155")); ("Base__Monad", ("!\244\168\2352=\137Lm\219\129K\216\199\145\\")); ("Base__Invariant_intf", ("\213\204\238\235\236[\198\145\028\2392\015\243\177S\249")); ("Base__Int0", ("N\1310\012\227\254\000\255_\222!\018\016\003\1779")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Import", ("\014\187\247\141\187\181\142g\176:s_,\181\219\209")); ("Base__Hash_intf", ("h\004P\218\1531G\127\212\208A\024\140\164iq")); ("Base__Hash", ("\206Rc\194\234{s3\248\165\024\162\203{\206\206")); ("Base__Globalize", ("<\243w~.\180\196t\159\193\174[\227\139\215G")); ("Base__Field", ("8In\234X\202\188G\186\208$\192\175\136\214v")); ("Base__Either0", ("!9-\011n\2077eZ\212\031c\227\029\206\t")); ("Base__Comparator", ("\002\135z7b\025&\207\t\188\239&U3R\167")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158"))], [(0)])

  end

type sort_name_expr =
    CSProp
  | CProp
  | CSet
  | CType of Libnames.qualid
  | CRawType of Univ.Level.t
type univ_level_expr = sort_name_expr Glob_term.glob_sort_gen
type sort_expr =
    (Sorts.QVar.t option * (sort_name_expr * int) list)
    Glob_term.glob_sort_gen
type instance_expr = univ_level_expr list
type univ_constraint_expr =
    sort_name_expr * Univ.constraint_type * sort_name_expr
type universe_decl_expr =
    (Names.lident list, univ_constraint_expr list) UState.gen_universe_decl
type cumul_univ_decl_expr =
    ((Names.lident * Univ.Variance.t option) list, univ_constraint_expr list)
    UState.gen_universe_decl
type ident_decl = Names.lident * universe_decl_expr option
type cumul_ident_decl = Names.lident * cumul_univ_decl_expr option
type name_decl = Names.lname * universe_decl_expr option
type notation_with_optional_scope =
    LastLonelyNotation
  | NotationInScope of string
type side = Left | Right
type entry_level = int
type entry_relative_level =
    LevelLt of entry_level
  | LevelLe of entry_level
  | LevelSome
type notation_entry = InConstrEntry | InCustomEntry of string
type notation_entry_level = notation_entry * entry_level
type notation_entry_relative_level =
    notation_entry * (entry_relative_level * side option)
type notation_key = string
type notation = notation_entry * notation_key
type specific_notation =
    notation_with_optional_scope * (notation_entry * notation_key)
type 'a or_by_notation_r = AN of 'a | ByNotation of (string * string option)
type 'a or_by_notation = 'a or_by_notation_r CAst.t
type explicitation = ExplByName of Names.Id.t | ExplByPos of int
type binder_kind =
    Default of Glob_term.binding_kind
  | Generalized of Glob_term.binding_kind * bool
type explicit_flag = bool
type prim_token = Number of NumTok.Signed.t | String of string
type cases_pattern_expr_r =
    CPatAlias of cases_pattern_expr * Names.lname
  | CPatCstr of Libnames.qualid * cases_pattern_expr list option *
      cases_pattern_expr list
  | CPatAtom of Libnames.qualid option
  | CPatOr of cases_pattern_expr list
  | CPatNotation of notation_with_optional_scope option * notation *
      cases_pattern_notation_substitution * cases_pattern_expr list
  | CPatPrim of prim_token
  | CPatRecord of (Libnames.qualid * cases_pattern_expr) list
  | CPatDelimiters of string * cases_pattern_expr
  | CPatCast of cases_pattern_expr * constr_expr
and cases_pattern_expr = cases_pattern_expr_r CAst.t
and kinded_cases_pattern_expr = cases_pattern_expr * Glob_term.binding_kind
and cases_pattern_notation_substitution =
    cases_pattern_expr list * cases_pattern_expr list list
and constr_expr_r =
    CRef of Libnames.qualid * instance_expr option
  | CFix of Names.lident * fix_expr list
  | CCoFix of Names.lident * cofix_expr list
  | CProdN of local_binder_expr list * constr_expr
  | CLambdaN of local_binder_expr list * constr_expr
  | CLetIn of Names.lname * constr_expr * constr_expr option * constr_expr
  | CAppExpl of (Libnames.qualid * instance_expr option) * constr_expr list
  | CApp of constr_expr * (constr_expr * explicitation CAst.t option) list
  | CProj of explicit_flag * (Libnames.qualid * instance_expr option) *
      (constr_expr * explicitation CAst.t option) list * constr_expr
  | CRecord of (Libnames.qualid * constr_expr) list
  | CCases of Constr.case_style * constr_expr option * case_expr list *
      branch_expr list
  | CLetTuple of Names.lname list *
      (Names.lname option * constr_expr option) * constr_expr * constr_expr
  | CIf of constr_expr * (Names.lname option * constr_expr option) *
      constr_expr * constr_expr
  | CHole of Evar_kinds.t option * Namegen.intro_pattern_naming_expr
  | CGenarg of Genarg.raw_generic_argument
  | CGenargGlob of Genarg.glob_generic_argument
  | CPatVar of Pattern.patvar
  | CEvar of Glob_term.existential_name CAst.t *
      (Names.lident * constr_expr) list
  | CSort of sort_expr
  | CCast of constr_expr * Constr.cast_kind option * constr_expr
  | CNotation of notation_with_optional_scope option * notation *
      constr_notation_substitution
  | CGeneralization of Glob_term.binding_kind * constr_expr
  | CPrim of prim_token
  | CDelimiters of string * constr_expr
  | CArray of instance_expr option * constr_expr array * constr_expr *
      constr_expr
and constr_expr = constr_expr_r CAst.t
and case_expr = constr_expr * Names.lname option * cases_pattern_expr option
and branch_expr = (cases_pattern_expr list list * constr_expr) CAst.t
and fix_expr =
    Names.lident * recursion_order_expr option * local_binder_expr list *
    constr_expr * constr_expr
and cofix_expr =
    Names.lident * local_binder_expr list * constr_expr * constr_expr
and recursion_order_expr_r =
    CStructRec of Names.lident
  | CWfRec of Names.lident * constr_expr
  | CMeasureRec of Names.lident option * constr_expr * constr_expr option
and recursion_order_expr = recursion_order_expr_r CAst.t
and local_binder_expr =
    CLocalAssum of Names.lname list * binder_kind * constr_expr
  | CLocalDef of Names.lname * constr_expr * constr_expr option
  | CLocalPattern of cases_pattern_expr
and constr_notation_substitution =
    constr_expr list * constr_expr list list *
    kinded_cases_pattern_expr list * local_binder_expr list list
type constr_pattern_expr = constr_expr
type with_declaration_ast =
    CWith_Module of Names.Id.t list CAst.t * Libnames.qualid
  | CWith_Definition of Names.Id.t list CAst.t * universe_decl_expr option *
      constr_expr
type module_ast_r =
    CMident of Libnames.qualid
  | CMapply of module_ast * Libnames.qualid
  | CMwith of module_ast * with_declaration_ast
("DEBUG:rule", [Tag1 (("sort_name_expr", 1045), (0, 0, Tag1 ([(("CSProp", 396), (0), 0, (("interp/constrexpr.mli", 18, 780, 782), ("interp/constrexpr.mli", 18, 780, 790), 0), 0, Tag1 ("Constrexpr", 1)); (("CProp", 397), (0), 0, (("interp/constrexpr.mli", 18, 780, 791), ("interp/constrexpr.mli", 18, 780, 798), 0), 0, Tag1 ("Constrexpr", 2)); (("CSet", 398), (0), 0, (("interp/constrexpr.mli", 18, 780, 799), ("interp/constrexpr.mli", 18, 780, 805), 0), 0, Tag1 ("Constrexpr", 3)); (("CType", 399), ([(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -301)]), 0, (("interp/constrexpr.mli", 19, 806, 808), ("interp/constrexpr.mli", 19, 806, 825), 0), 0, Tag1 ("Constrexpr", 4)); (("CRawType", 400), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Level"), "t"), 0, (0)), 100000000, 0, -302)]), 0, (("interp/constrexpr.mli", 20, 826, 828), ("interp/constrexpr.mli", 20, 826, 854), 0), 0, Tag1 ("Constrexpr", 5))], 0), 1, 0, 0, 0, 0, 0, (("interp/constrexpr.mli", 17, 758, 758), ("interp/constrexpr.mli", 20, 826, 854), 0), 0, 0, 0, Tag1 ("Constrexpr", 0)), 1, 0); Tag1 (("univ_level_expr", 1046), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_sort_gen"), [(Tag3 ((("sort_name_expr", 1045)), 0, (0)), 100000000, 0, -300)], (0)), 100000000, 0, -299)), 0, 0, 0, 0, (("interp/constrexpr.mli", 22, 906, 906), ("interp/constrexpr.mli", 22, 906, 968), 0), 0, 0, 0, Tag1 ("Constrexpr", 6)), 1, 0); Tag1 (("sort_expr", 1047), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_sort_gen"), [(Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Sorts")), "QVar"), "t"), 0, (0)), 100000000, 0, -294)], (0)), 100000000, 0, -293); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("sort_name_expr", 1045)), 0, (0)), 100000000, 0, -297); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -298)]), 100000000, 0, -296)], (0)), 100000000, 0, -295)]), 100000000, 0, -292)], (0)), 100000000, 0, -291)), 0, 0, 0, 0, (("interp/constrexpr.mli", 23, 969, 969), ("interp/constrexpr.mli", 23, 969, 1061), 0), 0, 0, 0, Tag1 ("Constrexpr", 8)), 1, 0); Tag1 (("instance_expr", 1048), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("univ_level_expr", 1046)), 0, (0)), 100000000, 0, -290)], (0)), 100000000, 0, -289)), 0, 0, 0, 0, (("interp/constrexpr.mli", 25, 1063, 1063), ("interp/constrexpr.mli", 25, 1063, 1104), 0), 0, 0, 0, Tag1 ("Constrexpr", 9)), 1, 0); Tag1 (("univ_constraint_expr", 1049), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((("sort_name_expr", 1045)), 0, (0)), 100000000, 0, -286); (Tag3 (Tag1 ((Tag2 ("Univ")), "constraint_type"), 0, (0)), 100000000, 0, -287); (Tag3 ((("sort_name_expr", 1045)), 0, (0)), 100000000, 0, -288)]), 100000000, 0, -285)), 0, 0, 0, 0, (("interp/constrexpr.mli", 28, 1156, 1156), ("interp/constrexpr.mli", 28, 1156, 1238), 0), 0, 0, 0, Tag1 ("Constrexpr", 10)), 1, 0); Tag1 (("universe_decl_expr", 1050), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("UState")), "gen_universe_decl"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -282)], (0)), 100000000, 0, -281); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("univ_constraint_expr", 1049)), 0, (0)), 100000000, 0, -284)], (0)), 100000000, 0, -283)], (0)), 100000000, 0, -280)), 0, 0, 0, 0, (("interp/constrexpr.mli", 30, 1240, 1240), ("interp/constrexpr.mli", 30, 1240, 1331), 0), 0, 0, 0, Tag1 ("Constrexpr", 11)), 1, 0); Tag1 (("cumul_univ_decl_expr", 1051), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("UState")), "gen_universe_decl"), [(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -275); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Variance"), "t"), 0, (0)), 100000000, 0, -277)], (0)), 100000000, 0, -276)]), 100000000, 0, -274)], (0)), 100000000, 0, -273); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("univ_constraint_expr", 1049)), 0, (0)), 100000000, 0, -279)], (0)), 100000000, 0, -278)], (0)), 100000000, 0, -272)), 0, 0, 0, 0, (("interp/constrexpr.mli", 31, 1332, 1332), ("interp/constrexpr.mli", 32, 1360, 1454), 0), 0, 0, 0, Tag1 ("Constrexpr", 12)), 1, 0); Tag1 (("ident_decl", 1052), (0, 0, 0, 1, ((Tag2 ([(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -269); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("universe_decl_expr", 1050)), 0, (0)), 100000000, 0, -271)], (0)), 100000000, 0, -270)]), 100000000, 0, -268)), 0, 0, 0, 0, (("interp/constrexpr.mli", 34, 1456, 1456), ("interp/constrexpr.mli", 34, 1456, 1508), 0), 0, 0, 0, Tag1 ("Constrexpr", 13)), 1, 0); Tag1 (("cumul_ident_decl", 1053), (0, 0, 0, 1, ((Tag2 ([(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -265); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("cumul_univ_decl_expr", 1051)), 0, (0)), 100000000, 0, -267)], (0)), 100000000, 0, -266)]), 100000000, 0, -264)), 0, 0, 0, 0, (("interp/constrexpr.mli", 35, 1509, 1509), ("interp/constrexpr.mli", 35, 1509, 1569), 0), 0, 0, 0, Tag1 ("Constrexpr", 14)), 1, 0); Tag1 (("name_decl", 1054), (0, 0, 0, 1, ((Tag2 ([(Tag3 (Tag1 ((Tag2 ("Names")), "lname"), 0, (0)), 100000000, 0, -261); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("universe_decl_expr", 1050)), 0, (0)), 100000000, 0, -263)], (0)), 100000000, 0, -262)]), 100000000, 0, -260)), 0, 0, 0, 0, (("interp/constrexpr.mli", 36, 1570, 1570), ("interp/constrexpr.mli", 36, 1570, 1620), 0), 0, 0, 0, Tag1 ("Constrexpr", 15)), 1, 0); Tag1 (("notation_with_optional_scope", 1055), (0, 0, Tag1 ([(("LastLonelyNotation", 670), (0), 0, (("interp/constrexpr.mli", 38, 1622, 1658), ("interp/constrexpr.mli", 38, 1622, 1676), 0), 0, Tag1 ("Constrexpr", 17)); (("NotationInScope", 671), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -259)]), 0, (("interp/constrexpr.mli", 38, 1622, 1677), ("interp/constrexpr.mli", 38, 1622, 1704), 0), 0, Tag1 ("Constrexpr", 18))], 0), 1, 0, 0, 0, 0, 0, (("interp/constrexpr.mli", 38, 1622, 1622), ("interp/constrexpr.mli", 38, 1622, 1704), 0), 0, 0, 0, Tag1 ("Constrexpr", 16)), 1, 0); Tag1 (("side", 1056), (0, 0, Tag1 ([(("Left", 673), (0), 0, (("interp/constrexpr.mli", 40, 1706, 1718), ("interp/constrexpr.mli", 40, 1706, 1722), 0), 0, Tag1 ("Constrexpr", 20)); (("Right", 674), (0), 0, (("interp/constrexpr.mli", 40, 1706, 1723), ("interp/constrexpr.mli", 40, 1706, 1730), 0), 0, Tag1 ("Constrexpr", 21))], 0), 1, 0, 0, 0, 0, 0, (("interp/constrexpr.mli", 40, 1706, 1706), ("interp/constrexpr.mli", 40, 1706, 1730), 0), 0, 1, 0, Tag1 ("Constrexpr", 19)), 1, 0); Tag1 (("entry_level", 1057), (0, 0, 0, 1, ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -258)), 0, 0, 0, 0, (("interp/constrexpr.mli", 41, 1731, 1731), ("interp/constrexpr.mli", 41, 1731, 1753), 0), 0, 1, 0, Tag1 ("Constrexpr", 22)), 1, 0); Tag1 (("entry_relative_level", 1058), (0, 0, Tag1 ([(("LevelLt", 677), ([(Tag3 ((("entry_level", 1057)), 0, (0)), 100000000, 0, -256)]), 0, (("interp/constrexpr.mli", 42, 1754, 1782), ("interp/constrexpr.mli", 42, 1754, 1804), 0), 0, Tag1 ("Constrexpr", 24)); (("LevelLe", 678), ([(Tag3 ((("entry_level", 1057)), 0, (0)), 100000000, 0, -257)]), 0, (("interp/constrexpr.mli", 42, 1754, 1805), ("interp/constrexpr.mli", 42, 1754, 1829), 0), 0, Tag1 ("Constrexpr", 25)); (("LevelSome", 679), (0), 0, (("interp/constrexpr.mli", 42, 1754, 1830), ("interp/constrexpr.mli", 42, 1754, 1841), 0), 0, Tag1 ("Constrexpr", 26))], 0), 1, 0, 0, 0, 0, 0, (("interp/constrexpr.mli", 42, 1754, 1754), ("interp/constrexpr.mli", 42, 1754, 1841), 0), 0, 0, 0, Tag1 ("Constrexpr", 23)), 1, 0); Tag1 (("notation_entry", 1059), (0, 0, Tag1 ([(("InConstrEntry", 681), (0), 0, (("interp/constrexpr.mli", 45, 1891, 1913), ("interp/constrexpr.mli", 45, 1891, 1926), 0), 0, Tag1 ("Constrexpr", 28)); (("InCustomEntry", 682), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -255)]), 0, (("interp/constrexpr.mli", 45, 1891, 1927), ("interp/constrexpr.mli", 45, 1891, 1952), 0), 0, Tag1 ("Constrexpr", 29))], 0), 1, 0, 0, 0, 0, 0, (("interp/constrexpr.mli", 45, 1891, 1891), ("interp/constrexpr.mli", 45, 1891, 1952), 0), 0, 0, 0, Tag1 ("Constrexpr", 27)), 1, 0); Tag1 (("notation_entry_level", 1060), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((("notation_entry", 1059)), 0, (0)), 100000000, 0, -253); (Tag3 ((("entry_level", 1057)), 0, (0)), 100000000, 0, -254)]), 100000000, 0, -252)), 0, 0, 0, 0, (("interp/constrexpr.mli", 48, 2017, 2017), ("interp/constrexpr.mli", 48, 2017, 2073), 0), 0, 0, 0, Tag1 ("Constrexpr", 30)), 1, 0); Tag1 (("notation_entry_relative_level", 1061), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((("notation_entry", 1059)), 0, (0)), 100000000, 0, -247); (Tag2 ([(Tag3 ((("entry_relative_level", 1058)), 0, (0)), 100000000, 0, -249); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("side", 1056)), 0, (0)), 100000000, 0, -251)], (0)), 100000000, 0, -250)]), 100000000, 0, -248)]), 100000000, 0, -246)), 0, 0, 0, 0, (("interp/constrexpr.mli", 51, 2152, 2152), ("interp/constrexpr.mli", 51, 2152, 2242), 0), 0, 0, 0, Tag1 ("Constrexpr", 31)), 1, 0); Tag1 (("notation_key", 1062), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -245)), 0, 0, 0, 0, (("interp/constrexpr.mli", 53, 2244, 2244), ("interp/constrexpr.mli", 53, 2244, 2270), 0), 0, 0, 0, Tag1 ("Constrexpr", 32)), 1, 0); Tag1 (("notation", 1063), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((("notation_entry", 1059)), 0, (0)), 100000000, 0, -243); (Tag3 ((("notation_key", 1062)), 0, (0)), 100000000, 0, -244)]), 100000000, 0, -242)), 0, 0, 0, 0, (("interp/constrexpr.mli", 56, 2324, 2324), ("interp/constrexpr.mli", 56, 2324, 2369), 0), 0, 0, 0, Tag1 ("Constrexpr", 33)), 1, 0); Tag1 (("specific_notation", 1064), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((("notation_with_optional_scope", 1055)), 0, (0)), 100000000, 0, -238); (Tag2 ([(Tag3 ((("notation_entry", 1059)), 0, (0)), 100000000, 0, -240); (Tag3 ((("notation_key", 1062)), 0, (0)), 100000000, 0, -241)]), 100000000, 0, -239)]), 100000000, 0, -237)), 0, 0, 0, 0, (("interp/constrexpr.mli", 59, 2425, 2425), ("interp/constrexpr.mli", 59, 2425, 2512), 0), 0, 0, 0, Tag1 ("Constrexpr", 34)), 1, 0); Tag1 (("or_by_notation_r", 1065), ([((("a")), 100000000, 0, -232)], 1, Tag1 ([(("AN", 689), ([((("a")), 100000000, 0, -232)]), 0, (("interp/constrexpr.mli", 62, 2541, 2543), ("interp/constrexpr.mli", 62, 2541, 2553), 0), 0, Tag1 ("Constrexpr", 36)); (("ByNotation", 690), ([(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -234); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -236)], (0)), 100000000, 0, -235)]), 100000000, 0, -233)]), 0, (("interp/constrexpr.mli", 63, 2554, 2556), ("interp/constrexpr.mli", 63, 2554, 2596), 0), 0, Tag1 ("Constrexpr", 37))], 0), 1, 0, [25], [0], 0, 0, (("interp/constrexpr.mli", 61, 2514, 2514), ("interp/constrexpr.mli", 63, 2554, 2596), 0), 0, 0, 0, Tag1 ("Constrexpr", 35)), 1, 0); Tag1 (("or_by_notation", 1066), ([((("a")), 100000000, 0, -231)], 1, 0, 1, ((Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((("or_by_notation_r", 1065)), [((("a")), 100000000, 0, -231)], (0)), 100000000, 0, -230)], (0)), 100000000, 0, -229)), [31], [0], 0, 0, (("interp/constrexpr.mli", 65, 2598, 2598), ("interp/constrexpr.mli", 65, 2598, 2649), 0), 0, 0, 0, Tag1 ("Constrexpr", 38)), 1, 0); Tag1 (("explicitation", 1067), (0, 0, Tag1 ([(("ExplByName", 693), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -227)]), 0, (("interp/constrexpr.mli", 71, 2805, 2807), ("interp/constrexpr.mli", 71, 2805, 2827), 0), 0, Tag1 ("Constrexpr", 40)); (("ExplByPos", 694), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -228)]), 0, (("interp/constrexpr.mli", 72, 2828, 2830), ("interp/constrexpr.mli", 72, 2828, 2848), 0), 0, Tag1 ("Constrexpr", 41))], 0), 1, 0, 0, 0, 0, 0, (("interp/constrexpr.mli", 70, 2784, 2784), ("interp/constrexpr.mli", 72, 2828, 2848), 0), 0, 0, 0, Tag1 ("Constrexpr", 39)), 1, 0); Tag1 (("binder_kind", 1068), (0, 0, Tag1 ([(("Default", 696), ([(Tag3 (Tag1 ((Tag2 ("Glob_term")), "binding_kind"), 0, (0)), 100000000, 0, -224)]), 0, (("interp/constrexpr.mli", 75, 2941, 2943), ("interp/constrexpr.mli", 75, 2941, 2978), 0), 0, Tag1 ("Constrexpr", 43)); (("Generalized", 697), ([(Tag3 (Tag1 ((Tag2 ("Glob_term")), "binding_kind"), 0, (0)), 100000000, 0, -225); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -226)]), 0, (("interp/constrexpr.mli", 76, 2979, 2981), ("interp/constrexpr.mli", 76, 2979, 3027), 0), 0, Tag1 ("Constrexpr", 44))], 0), 1, 0, 0, 0, 0, 0, (("interp/constrexpr.mli", 74, 2922, 2922), ("interp/constrexpr.mli", 76, 2979, 3027), 0), 0, 0, 0, Tag1 ("Constrexpr", 42)), 1, 0); Tag1 (("explicit_flag", 1069), (0, 0, 0, 1, ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -223)), 0, 0, 0, 0, (("interp/constrexpr.mli", 80, 3167, 3167), ("interp/constrexpr.mli", 80, 3167, 3192), 0), 0, 1, 0, Tag1 ("Constrexpr", 45)), 1, 0); Tag1 (("prim_token", 1070), (0, 0, Tag1 ([(("Number", 700), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("NumTok")), "Signed"), "t"), 0, (0)), 100000000, 0, -221)]), 0, (("interp/constrexpr.mli", 83, 3235, 3237), ("interp/constrexpr.mli", 83, 3235, 3264), 0), 0, Tag1 ("Constrexpr", 47)); (("String", 729), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -222)]), 0, (("interp/constrexpr.mli", 84, 3265, 3267), ("interp/constrexpr.mli", 84, 3265, 3285), 0), 0, Tag1 ("Constrexpr", 48))], 0), 1, 0, 0, 0, 0, 0, (("interp/constrexpr.mli", 82, 3217, 3217), ("interp/constrexpr.mli", 84, 3265, 3285), 0), 0, 0, 0, Tag1 ("Constrexpr", 46)), 1, 0); Tag1 (("cases_pattern_expr_r", 1071), (0, 0, Tag1 ([(("CPatAlias", 753), ([(Tag3 ((("cases_pattern_expr", 1072)), 0, (0)), 100000000, 0, -194); (Tag3 (Tag1 ((Tag2 ("Names")), "lname"), 0, (0)), 100000000, 0, -195)]), 0, (("interp/constrexpr.mli", 88, 3387, 3389), ("interp/constrexpr.mli", 88, 3387, 3430), 0), 0, Tag1 ("Constrexpr", 63)); (("CPatCstr", 754), ([(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -196); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("cases_pattern_expr", 1072)), 0, (0)), 100000000, 0, -199)], (0)), 100000000, 0, -198)], (0)), 100000000, 0, -197); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("cases_pattern_expr", 1072)), 0, (0)), 100000000, 0, -201)], (0)), 100000000, 0, -200)]), 0, (("interp/constrexpr.mli", 89, 3431, 3433), ("interp/constrexpr.mli", 90, 3455, 3517), 0), 0, Tag1 ("Constrexpr", 64)); (("CPatAtom", 755), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -203)], (0)), 100000000, 0, -202)]), 0, (("interp/constrexpr.mli", 92, 3583, 3585), ("interp/constrexpr.mli", 92, 3583, 3612), 0), 0, Tag1 ("Constrexpr", 65)); (("CPatOr", 756), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("cases_pattern_expr", 1072)), 0, (0)), 100000000, 0, -205)], (0)), 100000000, 0, -204)]), 0, (("interp/constrexpr.mli", 93, 3613, 3615), ("interp/constrexpr.mli", 93, 3613, 3652), 0), 0, Tag1 ("Constrexpr", 66)); (("CPatNotation", 757), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("notation_with_optional_scope", 1055)), 0, (0)), 100000000, 0, -207)], (0)), 100000000, 0, -206); (Tag3 ((("notation", 1063)), 0, (0)), 100000000, 0, -208); (Tag3 ((("cases_pattern_notation_substitution", 1074)), 0, (0)), 100000000, 0, -209); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("cases_pattern_expr", 1072)), 0, (0)), 100000000, 0, -211)], (0)), 100000000, 0, -210)]), 0, (("interp/constrexpr.mli", 94, 3653, 3655), ("interp/constrexpr.mli", 95, 3758, 3787), 0), 0, Tag1 ("Constrexpr", 67)); (("CPatPrim", 758), ([(Tag3 ((("prim_token", 1070)), 0, (0)), 100000000, 0, -212)]), 0, (("interp/constrexpr.mli", 98, 3968, 3970), ("interp/constrexpr.mli", 98, 3968, 3996), 0), 0, Tag1 ("Constrexpr", 68)); (("CPatRecord", 759), ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -215); (Tag3 ((("cases_pattern_expr", 1072)), 0, (0)), 100000000, 0, -216)]), 100000000, 0, -214)], (0)), 100000000, 0, -213)]), 0, (("interp/constrexpr.mli", 99, 3997, 3999), ("interp/constrexpr.mli", 99, 3997, 4049), 0), 0, Tag1 ("Constrexpr", 69)); (("CPatDelimiters", 760), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -217); (Tag3 ((("cases_pattern_expr", 1072)), 0, (0)), 100000000, 0, -218)]), 0, (("interp/constrexpr.mli", 100, 4050, 4052), ("interp/constrexpr.mli", 100, 4050, 4099), 0), 0, Tag1 ("Constrexpr", 70)); (("CPatCast", 761), ([(Tag3 ((("cases_pattern_expr", 1072)), 0, (0)), 100000000, 0, -219); (Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -220)]), 0, (("interp/constrexpr.mli", 101, 4100, 4102), ("interp/constrexpr.mli", 101, 4100, 4150), 0), 0, Tag1 ("Constrexpr", 71))], 0), 1, 0, 0, 0, 0, 0, (("interp/constrexpr.mli", 87, 3359, 3359), ("interp/constrexpr.mli", 101, 4100, 4150), 0), 0, 0, 0, Tag1 ("Constrexpr", 49)), 1, 0); Tag1 (("cases_pattern_expr", 1072), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((("cases_pattern_expr_r", 1071)), 0, (0)), 100000000, 0, -193)], (0)), 100000000, 0, -192)), 0, 0, 0, 0, (("interp/constrexpr.mli", 102, 4151, 4151), ("interp/constrexpr.mli", 102, 4151, 4203), 0), 0, 0, 0, Tag1 ("Constrexpr", 50)), 2, 0); Tag1 (("kinded_cases_pattern_expr", 1073), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((("cases_pattern_expr", 1072)), 0, (0)), 100000000, 0, -190); (Tag3 (Tag1 ((Tag2 ("Glob_term")), "binding_kind"), 0, (0)), 100000000, 0, -191)]), 100000000, 0, -189)), 0, 0, 0, 0, (("interp/constrexpr.mli", 104, 4205, 4205), ("interp/constrexpr.mli", 104, 4205, 4280), 0), 0, 0, 0, Tag1 ("Constrexpr", 51)), 2, 0); Tag1 (("cases_pattern_notation_substitution", 1074), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("cases_pattern_expr", 1072)), 0, (0)), 100000000, 0, -185)], (0)), 100000000, 0, -184); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("cases_pattern_expr", 1072)), 0, (0)), 100000000, 0, -188)], (0)), 100000000, 0, -187)], (0)), 100000000, 0, -186)]), 100000000, 0, -183)), 0, 0, 0, 0, (("interp/constrexpr.mli", 106, 4282, 4282), ("interp/constrexpr.mli", 108, 4384, 4416), 0), 0, 0, 0, Tag1 ("Constrexpr", 52)), 2, 0); Tag1 (("constr_expr_r", 1075), (0, 0, Tag1 ([(("CRef", 762), ([(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -78); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("instance_expr", 1048)), 0, (0)), 100000000, 0, -80)], (0)), 100000000, 0, -79)]), 0, (("interp/constrexpr.mli", 111, 4469, 4471), ("interp/constrexpr.mli", 111, 4469, 4514), 0), 0, Tag1 ("Constrexpr", 72)); (("CFix", 763), ([(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -81); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("fix_expr", 1079)), 0, (0)), 100000000, 0, -83)], (0)), 100000000, 0, -82)]), 0, (("interp/constrexpr.mli", 112, 4515, 4517), ("interp/constrexpr.mli", 112, 4515, 4553), 0), 0, Tag1 ("Constrexpr", 73)); (("CCoFix", 764), ([(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -84); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("cofix_expr", 1080)), 0, (0)), 100000000, 0, -86)], (0)), 100000000, 0, -85)]), 0, (("interp/constrexpr.mli", 113, 4554, 4556), ("interp/constrexpr.mli", 113, 4554, 4594), 0), 0, Tag1 ("Constrexpr", 74)); (("CProdN", 765), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("local_binder_expr", 1083)), 0, (0)), 100000000, 0, -88)], (0)), 100000000, 0, -87); (Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -89)]), 0, (("interp/constrexpr.mli", 114, 4595, 4597), ("interp/constrexpr.mli", 114, 4595, 4647), 0), 0, Tag1 ("Constrexpr", 75)); (("CLambdaN", 766), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("local_binder_expr", 1083)), 0, (0)), 100000000, 0, -91)], (0)), 100000000, 0, -90); (Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -92)]), 0, (("interp/constrexpr.mli", 115, 4648, 4650), ("interp/constrexpr.mli", 115, 4648, 4700), 0), 0, Tag1 ("Constrexpr", 76)); (("CLetIn", 767), ([(Tag3 (Tag1 ((Tag2 ("Names")), "lname"), 0, (0)), 100000000, 0, -93); (Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -94); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -96)], (0)), 100000000, 0, -95); (Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -97)]), 0, (("interp/constrexpr.mli", 116, 4701, 4703), ("interp/constrexpr.mli", 116, 4701, 4771), 0), 0, Tag1 ("Constrexpr", 77)); (("CAppExpl", 768), ([(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -99); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("instance_expr", 1048)), 0, (0)), 100000000, 0, -101)], (0)), 100000000, 0, -100)]), 100000000, 0, -98); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -103)], (0)), 100000000, 0, -102)]), 0, (("interp/constrexpr.mli", 117, 4772, 4774), ("interp/constrexpr.mli", 117, 4772, 4838), 0), 0, Tag1 ("Constrexpr", 78)); (("CApp", 769), ([(Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -104); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -107); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((("explicitation", 1067)), 0, (0)), 100000000, 0, -110)], (0)), 100000000, 0, -109)], (0)), 100000000, 0, -108)]), 100000000, 0, -106)], (0)), 100000000, 0, -105)]), 0, (("interp/constrexpr.mli", 118, 4839, 4841), ("interp/constrexpr.mli", 118, 4839, 4917), 0), 0, Tag1 ("Constrexpr", 79)); (("CProj", 770), ([(Tag3 ((("explicit_flag", 1069)), 0, (0)), 100000000, 0, -111); (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -113); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("instance_expr", 1048)), 0, (0)), 100000000, 0, -115)], (0)), 100000000, 0, -114)]), 100000000, 0, -112); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -118); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((("explicitation", 1067)), 0, (0)), 100000000, 0, -121)], (0)), 100000000, 0, -120)], (0)), 100000000, 0, -119)]), 100000000, 0, -117)], (0)), 100000000, 0, -116); (Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -122)]), 0, (("interp/constrexpr.mli", 119, 4918, 4920), ("interp/constrexpr.mli", 120, 4982, 5060), 0), 0, Tag1 ("Constrexpr", 80)); (("CRecord", 771), ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -125); (Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -126)]), 100000000, 0, -124)], (0)), 100000000, 0, -123)]), 0, (("interp/constrexpr.mli", 121, 5061, 5063), ("interp/constrexpr.mli", 121, 5061, 5104), 0), 0, Tag1 ("Constrexpr", 81)); (("CCases", 772), ([(Tag3 (Tag1 ((Tag2 ("Constr")), "case_style"), 0, (0)), 100000000, 0, -127); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -129)], (0)), 100000000, 0, -128); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("case_expr", 1077)), 0, (0)), 100000000, 0, -131)], (0)), 100000000, 0, -130); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("branch_expr", 1078)), 0, (0)), 100000000, 0, -133)], (0)), 100000000, 0, -132)]), 0, (("interp/constrexpr.mli", 124, 5165, 5167), ("interp/constrexpr.mli", 127, 5356, 5386), 0), 0, Tag1 ("Constrexpr", 83)); (("CLetTuple", 930), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Names")), "lname"), 0, (0)), 100000000, 0, -135)], (0)), 100000000, 0, -134); (Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Names")), "lname"), 0, (0)), 100000000, 0, -138)], (0)), 100000000, 0, -137); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -140)], (0)), 100000000, 0, -139)]), 100000000, 0, -136); (Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -141); (Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -142)]), 0, (("interp/constrexpr.mli", 129, 5406, 5408), ("interp/constrexpr.mli", 130, 5474, 5516), 0), 0, Tag1 ("Constrexpr", 84)); (("CIf", 931), ([(Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -143); (Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Names")), "lname"), 0, (0)), 100000000, 0, -146)], (0)), 100000000, 0, -145); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -148)], (0)), 100000000, 0, -147)]), 100000000, 0, -144); (Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -149); (Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -150)]), 0, (("interp/constrexpr.mli", 131, 5517, 5519), ("interp/constrexpr.mli", 132, 5578, 5614), 0), 0, Tag1 ("Constrexpr", 85)); (("CHole", 932), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Evar_kinds")), "t"), 0, (0)), 100000000, 0, -152)], (0)), 100000000, 0, -151); (Tag3 (Tag1 ((Tag2 ("Namegen")), "intro_pattern_naming_expr"), 0, (0)), 100000000, 0, -153)]), 0, (("interp/constrexpr.mli", 133, 5615, 5617), ("interp/constrexpr.mli", 133, 5615, 5685), 0), 0, Tag1 ("Constrexpr", 86)); (("CGenarg", 979), ([(Tag3 (Tag1 ((Tag2 ("Genarg")), "raw_generic_argument"), 0, (0)), 100000000, 0, -154)]), 0, (("interp/constrexpr.mli", 134, 5686, 5688), ("interp/constrexpr.mli", 134, 5686, 5728), 0), 0, Tag1 ("Constrexpr", 87)); (("CGenargGlob", 1017), ([(Tag3 (Tag1 ((Tag2 ("Genarg")), "glob_generic_argument"), 0, (0)), 100000000, 0, -155)]), 0, (("interp/constrexpr.mli", 137, 5826, 5828), ("interp/constrexpr.mli", 137, 5826, 5873), 0), 0, Tag1 ("Constrexpr", 88)); (("CPatVar", 1018), ([(Tag3 (Tag1 ((Tag2 ("Pattern")), "patvar"), 0, (0)), 100000000, 0, -156)]), 0, (("interp/constrexpr.mli", 139, 5875, 5877), ("interp/constrexpr.mli", 139, 5875, 5904), 0), 0, Tag1 ("Constrexpr", 89)); (("CEvar", 1022), ([(Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 (Tag1 ((Tag2 ("Glob_term")), "existential_name"), 0, (0)), 100000000, 0, -158)], (0)), 100000000, 0, -157); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -161); (Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -162)]), 100000000, 0, -160)], (0)), 100000000, 0, -159)]), 0, (("interp/constrexpr.mli", 140, 5905, 5907), ("interp/constrexpr.mli", 140, 5905, 5983), 0), 0, Tag1 ("Constrexpr", 90)); (("CSort", 1023), ([(Tag3 ((("sort_expr", 1047)), 0, (0)), 100000000, 0, -163)]), 0, (("interp/constrexpr.mli", 141, 5984, 5986), ("interp/constrexpr.mli", 141, 5984, 6008), 0), 0, Tag1 ("Constrexpr", 91)); (("CCast", 1024), ([(Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -164); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "cast_kind"), 0, (0)), 100000000, 0, -166)], (0)), 100000000, 0, -165); (Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -167)]), 0, (("interp/constrexpr.mli", 142, 6009, 6011), ("interp/constrexpr.mli", 142, 6009, 6075), 0), 0, Tag1 ("Constrexpr", 92)); (("CNotation", 1025), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("notation_with_optional_scope", 1055)), 0, (0)), 100000000, 0, -169)], (0)), 100000000, 0, -168); (Tag3 ((("notation", 1063)), 0, (0)), 100000000, 0, -170); (Tag3 ((("constr_notation_substitution", 1084)), 0, (0)), 100000000, 0, -171)]), 0, (("interp/constrexpr.mli", 143, 6076, 6078), ("interp/constrexpr.mli", 143, 6076, 6170), 0), 0, Tag1 ("Constrexpr", 93)); (("CGeneralization", 1026), ([(Tag3 (Tag1 ((Tag2 ("Glob_term")), "binding_kind"), 0, (0)), 100000000, 0, -172); (Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -173)]), 0, (("interp/constrexpr.mli", 144, 6171, 6173), ("interp/constrexpr.mli", 144, 6171, 6230), 0), 0, Tag1 ("Constrexpr", 94)); (("CPrim", 1027), ([(Tag3 ((("prim_token", 1070)), 0, (0)), 100000000, 0, -174)]), 0, (("interp/constrexpr.mli", 145, 6231, 6233), ("interp/constrexpr.mli", 145, 6231, 6254), 0), 0, Tag1 ("Constrexpr", 95)); (("CDelimiters", 1028), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -175); (Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -176)]), 0, (("interp/constrexpr.mli", 146, 6255, 6257), ("interp/constrexpr.mli", 146, 6255, 6294), 0), 0, Tag1 ("Constrexpr", 96)); (("CArray", 1029), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("instance_expr", 1048)), 0, (0)), 100000000, 0, -178)], (0)), 100000000, 0, -177); (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -180)], (0)), 100000000, 0, -179); (Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -181); (Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -182)]), 0, (("interp/constrexpr.mli", 147, 6295, 6297), ("interp/constrexpr.mli", 147, 6295, 6377), 0), 0, Tag1 ("Constrexpr", 97))], 0), 1, 0, 0, 0, 0, 0, (("interp/constrexpr.mli", 110, 4449, 4449), ("interp/constrexpr.mli", 147, 6295, 6377), 0), 0, 0, 0, Tag1 ("Constrexpr", 53)), 2, 0); Tag1 (("constr_expr", 1076), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((("constr_expr_r", 1075)), 0, (0)), 100000000, 0, -77)], (0)), 100000000, 0, -76)), 0, 0, 0, 0, (("interp/constrexpr.mli", 148, 6378, 6378), ("interp/constrexpr.mli", 148, 6378, 6416), 0), 0, 0, 0, Tag1 ("Constrexpr", 54)), 2, 0); Tag1 (("case_expr", 1077), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -71); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Names")), "lname"), 0, (0)), 100000000, 0, -73)], (0)), 100000000, 0, -72); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("cases_pattern_expr", 1072)), 0, (0)), 100000000, 0, -75)], (0)), 100000000, 0, -74)]), 100000000, 0, -70)), 0, 0, 0, 0, (("interp/constrexpr.mli", 150, 6418, 6418), ("interp/constrexpr.mli", 152, 6561, 6602), 0), 0, 0, 0, Tag1 ("Constrexpr", 55)), 2, 0); Tag1 (("branch_expr", 1078), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("cases_pattern_expr", 1072)), 0, (0)), 100000000, 0, -68)], (0)), 100000000, 0, -67)], (0)), 100000000, 0, -66); (Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -69)]), 100000000, 0, -65)], (0)), 100000000, 0, -64)), 0, 0, 0, 0, (("interp/constrexpr.mli", 154, 6622, 6622), ("interp/constrexpr.mli", 155, 6640, 6693), 0), 0, 0, 0, Tag1 ("Constrexpr", 56)), 2, 0); Tag1 (("fix_expr", 1079), (0, 0, 0, 1, ((Tag2 ([(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -57); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("recursion_order_expr", 1082)), 0, (0)), 100000000, 0, -59)], (0)), 100000000, 0, -58); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("local_binder_expr", 1083)), 0, (0)), 100000000, 0, -61)], (0)), 100000000, 0, -60); (Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -62); (Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -63)]), 100000000, 0, -56)), 0, 0, 0, 0, (("interp/constrexpr.mli", 157, 6695, 6695), ("interp/constrexpr.mli", 159, 6753, 6809), 0), 0, 0, 0, Tag1 ("Constrexpr", 57)), 2, 0); Tag1 (("cofix_expr", 1080), (0, 0, 0, 1, ((Tag2 ([(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -51); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("local_binder_expr", 1083)), 0, (0)), 100000000, 0, -53)], (0)), 100000000, 0, -52); (Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -54); (Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -55)]), 100000000, 0, -50)), 0, 0, 0, 0, (("interp/constrexpr.mli", 161, 6811, 6811), ("interp/constrexpr.mli", 162, 6828, 6891), 0), 0, 0, 0, Tag1 ("Constrexpr", 58)), 2, 0); Tag1 (("recursion_order_expr_r", 1081), (0, 0, Tag1 ([(("CStructRec", 1030), ([(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -42)]), 0, (("interp/constrexpr.mli", 165, 6922, 6924), ("interp/constrexpr.mli", 165, 6922, 6946), 0), 0, Tag1 ("Constrexpr", 98)); (("CWfRec", 1031), ([(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -43); (Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -44)]), 0, (("interp/constrexpr.mli", 166, 6947, 6949), ("interp/constrexpr.mli", 166, 6947, 6981), 0), 0, Tag1 ("Constrexpr", 99)); (("CMeasureRec", 1032), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -46)], (0)), 100000000, 0, -45); (Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -47); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -49)], (0)), 100000000, 0, -48)]), 0, (("interp/constrexpr.mli", 167, 6982, 6984), ("interp/constrexpr.mli", 167, 6982, 7049), 0), 0, Tag1 ("Constrexpr", 100))], 0), 1, 0, 0, 0, 0, 0, (("interp/constrexpr.mli", 164, 6893, 6893), ("interp/constrexpr.mli", 167, 6982, 7049), 0), 0, 0, 0, Tag1 ("Constrexpr", 59)), 2, 0); Tag1 (("recursion_order_expr", 1082), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((("recursion_order_expr_r", 1081)), 0, (0)), 100000000, 0, -41)], (0)), 100000000, 0, -40)), 0, 0, 0, 0, (("interp/constrexpr.mli", 168, 7085, 7085), ("interp/constrexpr.mli", 168, 7085, 7141), 0), 0, 0, 0, Tag1 ("Constrexpr", 60)), 2, 0); Tag1 (("local_binder_expr", 1083), (0, 0, Tag1 ([(("CLocalAssum", 1033), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Names")), "lname"), 0, (0)), 100000000, 0, -32)], (0)), 100000000, 0, -31); (Tag3 ((("binder_kind", 1068)), 0, (0)), 100000000, 0, -33); (Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -34)]), 0, (("interp/constrexpr.mli", 172, 7199, 7201), ("interp/constrexpr.mli", 172, 7199, 7258), 0), 0, Tag1 ("Constrexpr", 101)); (("CLocalDef", 1034), ([(Tag3 (Tag1 ((Tag2 ("Names")), "lname"), 0, (0)), 100000000, 0, -35); (Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -36); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -38)], (0)), 100000000, 0, -37)]), 0, (("interp/constrexpr.mli", 173, 7259, 7261), ("interp/constrexpr.mli", 173, 7259, 7320), 0), 0, Tag1 ("Constrexpr", 102)); (("CLocalPattern", 1035), ([(Tag3 ((("cases_pattern_expr", 1072)), 0, (0)), 100000000, 0, -39)]), 0, (("interp/constrexpr.mli", 174, 7321, 7323), ("interp/constrexpr.mli", 174, 7321, 7360), 0), 0, Tag1 ("Constrexpr", 103))], 0), 1, 0, 0, 0, 0, 0, (("interp/constrexpr.mli", 171, 7175, 7175), ("interp/constrexpr.mli", 174, 7321, 7360), 0), 0, 0, 0, Tag1 ("Constrexpr", 61)), 2, 0); Tag1 (("constr_notation_substitution", 1084), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -22)], (0)), 100000000, 0, -21); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -25)], (0)), 100000000, 0, -24)], (0)), 100000000, 0, -23); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("kinded_cases_pattern_expr", 1073)), 0, (0)), 100000000, 0, -27)], (0)), 100000000, 0, -26); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("local_binder_expr", 1083)), 0, (0)), 100000000, 0, -30)], (0)), 100000000, 0, -29)], (0)), 100000000, 0, -28)]), 100000000, 0, -20)), 0, 0, 0, 0, (("interp/constrexpr.mli", 176, 7362, 7362), ("interp/constrexpr.mli", 180, 7566, 7597), 0), 0, 0, 0, Tag1 ("Constrexpr", 62)), 2, 0); Tag1 (("constr_pattern_expr", 1085), (0, 0, 0, 1, ((Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -19)), 0, 0, 0, 0, (("interp/constrexpr.mli", 182, 7644, 7644), ("interp/constrexpr.mli", 182, 7644, 7682), 0), 0, 0, 0, Tag1 ("Constrexpr", 104)), 1, 0); Tag1 (("with_declaration_ast", 1086), (0, 0, Tag1 ([(("CWith_Module", 1038), ([(Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -11)], (0)), 100000000, 0, -10)], (0)), 100000000, 0, -9); (Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -12)]), 0, (("interp/constrexpr.mli", 187, 7765, 7767), ("interp/constrexpr.mli", 187, 7765, 7810), 0), 0, Tag1 ("Constrexpr", 106)); (("CWith_Definition", 1039), ([(Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -15)], (0)), 100000000, 0, -14)], (0)), 100000000, 0, -13); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("universe_decl_expr", 1050)), 0, (0)), 100000000, 0, -17)], (0)), 100000000, 0, -16); (Tag3 ((("constr_expr", 1076)), 0, (0)), 100000000, 0, -18)]), 0, (("interp/constrexpr.mli", 188, 7811, 7813), ("interp/constrexpr.mli", 188, 7811, 7893), 0), 0, Tag1 ("Constrexpr", 107))], 0), 1, 0, 0, 0, 0, 0, (("interp/constrexpr.mli", 186, 7737, 7737), ("interp/constrexpr.mli", 188, 7811, 7893), 0), 0, 0, 0, Tag1 ("Constrexpr", 105)), 1, 0); Tag1 (("module_ast_r", 1087), (0, 0, Tag1 ([(("CMident", 1042), ([(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -4)]), 0, (("interp/constrexpr.mli", 191, 7915, 7917), ("interp/constrexpr.mli", 191, 7915, 7936), 0), 0, Tag1 ("Constrexpr", 110)); (("CMapply", 1043), ([(Tag3 ((("module_ast", 1088)), 0, (0)), 100000000, 0, -5); (Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -6)]), 0, (("interp/constrexpr.mli", 192, 7937, 7939), ("interp/constrexpr.mli", 192, 7937, 7971), 0), 0, Tag1 ("Constrexpr", 111)); (("CMwith", 1044), ([(Tag3 ((("module_ast", 1088)), 0, (0)), 100000000, 0, -7); (Tag3 ((("with_declaration_ast", 1086)), 0, (0)), 100000000, 0, -8)]), 0, (("interp/constrexpr.mli", 193, 7972, 7974), ("interp/constrexpr.mli", 193, 7972, 8020), 0), 0, Tag1 ("Constrexpr", 112))], 0), 1, 0, 0, 0, 0, 0, (("interp/constrexpr.mli", 190, 7895, 7895), ("interp/constrexpr.mli", 193, 7972, 8020), 0), 0, 0, 0, Tag1 ("Constrexpr", 108)), 1, 0); Tag1 (("module_ast", 1088), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((("module_ast_r", 1087)), 0, (0)), 100000000, 0, -3)], (0)), 100000000, 0, -2)), 0, 0, 0, 0, (("interp/constrexpr.mli", 194, 8021, 8021), ("interp/constrexpr.mli", 194, 8021, 8057), 0), 0, 0, 0, Tag1 ("Constrexpr", 109)), 2, 0)], "Constrexpr", [("Constrexpr", ("p'r\245\184chL\183\249\"\213]\1741\237")); ("Z", ("\253\196\2168\027\199O\134\220\218\031'\1484\233o")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Unix", (":B72R\011\005Sj\189)\011\239PH\254")); ("UnivSubst", ("\190qu\031mc\130\181\003G]\132\"\219m)")); ("UnivProblem", ("6'\161\018\181\001.\253\000\141a6\171\1727\155")); ("UnivNames", ("%\151_\209%+JM$n\001\232\194n\178N")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UState", ("SD\203\215|\136\n\251\239\208\148\215C\n\167\005")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Summary", ("\148G\135\226\024L3\246\021\028U\146\164`\253\250")); ("Store", ("/dT\252\145\179pq\216{\181\206\190K+U")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Random", ("\020\005Xq\171\026\218\152X\135\254\023\133zK\200")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Section", ("\245\207\b\021\142v=\155#w\246}\"4b\006")); ("Safe_typing", (")\250?\164\145\132\241\127\186\152h+\145\"\237l")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Pattern", ("\195C\140Wb=\022\222\208\227^K\003\020\215X")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("NumTok", ("vd\023^\251\244B\166\145'\156\196-0\027\169")); ("Nativevalues", ("8:\007\025e\226c,\001\171\146#l\210\171\152")); ("Nativelib", ("V\239\205Y1\147E:,\176\196Hy\1483|")); ("Nativecode", ("\190\185\255\006m\012\210\163\138Rz\247\15283\183")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Namegen", ("\187\222\224T\255\020\1808-\212*\164\131\177\157x")); ("Monad", ("\244\171T\157\194p\187\160\149\195{\132\222\020\253\148")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hook", ("\183\194\223\003\155\169',\187\240a;E\b\1396")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Gramlib__Stream", ("\248\\H\205_76\253\136\146\200\031\165\021=t")); ("Gramlib", ("\154\143\210e\021i\246\176\224\194\220\217\007\145\139A")); ("Glob_term", ("\165=a\227\160\153.\021_$\232\209T\236\153O")); ("Genlambda", ("\170}\024\241\141\222\136S\169\219\2212i\134KI")); ("Genarg", ("\1434\015\001\152\196\005s\156\136\195\185\247\b3\t")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evd", ("\211\205p\193\216\129r\006\239oN\142ar\196\175")); ("Evar_kinds", ("\023L\186\132\218}\254\221\185\198\220\200h\003{\021")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Entries", ("\172\201\198\221Ap\027_{\174\141C\021\";p")); ("EConstr", ("\201aW\156\157;N\004\201V\208\006L\166\211)")); ("Dyn", ("\131z`\205v\2306\007x\027&K.?;\169")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("DAst", ("\224/\200)\007\184ni\134\b\139\204\241\005w\212")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conversion", ("\158\150&\195M\tv\127|\029\158RRK\211A")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CUnix", ("\140Zl\153\167\011J\015\005|th\247OTu")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CDebug", ("^4\210p7\239!3\138\138\213?\239`\250\157")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [1; (0)])
and module_ast = module_ast_r CAst.t

type node = int
val n : int
val entry : node Dune__exe.Grammar.ProductionMap.t
val items : node -> Dune__exe.Item.Set.t
val incoming_symbol : node -> Dune__exe.Grammar.Symbol.t option
val incoming_edges : node -> node list
val outgoing_edges : node -> node Dune__exe.Grammar.SymbolMap.t
val outgoing_symbols : node -> Dune__exe.Grammar.Symbol.t list
module ImperativeNodeMap :
  sig
    type key = node
    type 'data t
    val create : unit -> 'data t
    val add : key -> 'data -> 'data t -> unit
    val find : key -> 'data t -> 'data
  end
type lr1state
module Lr1StateAsOrderedType :
  sig type t = lr1state val compare : t -> t -> int end
type concretelr1state = Dune__exe.Grammar.TerminalSet.t Dune__exe.Item.Map.t
val export : lr1state -> concretelr1state
val closure : concretelr1state -> concretelr1state
val core : lr1state -> node
val start : node -> lr1state
val transitions : lr1state -> lr1state Dune__exe.Grammar.SymbolMap.t
val transition : Dune__exe.Grammar.Symbol.t -> lr1state -> lr1state
val transition_tokens :
  'target Dune__exe.Grammar.SymbolMap.t -> Dune__exe.Grammar.TerminalSet.t
val reductions :
  lr1state ->
  (Dune__exe.Grammar.TerminalSet.t * Dune__exe.Grammar.Production.index) list
val equal : lr1state -> lr1state -> bool
val subsume : lr1state -> lr1state -> bool
val compatible : lr1state -> lr1state -> bool
val eos_compatible : lr1state -> lr1state -> bool
val error_compatible : lr1state -> lr1state -> bool
val union : lr1state -> lr1state -> lr1state
val restrict : Dune__exe.Grammar.TerminalSet.t -> lr1state -> lr1state
val print_concrete : string -> concretelr1state -> string
val print : string -> lr1state -> string
val print_closure : string -> lr1state -> string
type reductions =
    Dune__exe.Grammar.Production.index list Dune__exe.Grammar.TerminalMap.t
val add_reduction :
  Dune__exe.Grammar.Production.index ->
  Dune__exe.Grammar.Terminal.t -> reductions -> reductions
val add_reductions :
  Dune__exe.Grammar.Production.index ->
  Dune__exe.Grammar.TerminalSet.t -> reductions -> reductions
val reductions_table : lr1state -> reductions
val invert :
  reductions ->
  Dune__exe.Grammar.TerminalSet.t Dune__exe.Grammar.ProductionMap.t
val reduction_tokens : reductions -> Dune__exe.Grammar.TerminalSet.t
val has_eos_conflict :
  'target Dune__exe.Grammar.SymbolMap.t -> reductions -> bool
("DEBUG:rule", [Tag1 (("node", 1095), (0, 0, 0, 1, ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -143)), 0, 0, 0, 0, (("src/lr0.mli", 25, 1354, 1354), ("src/lr0.mli", 26, 1366, 1373), 0), 0, 1, 0, Tag1 ("Dune__exe__Lr0", 0)), 1, 0); (("n", 1096), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -142), 0, (("src/lr0.mli", 30, 1434, 1434), ("src/lr0.mli", 30, 1434, 1444), 0), 0, Tag1 ("Dune__exe__Lr0", 1)), 0); (("entry", 1097), ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Grammar"), "ProductionMap"), "t"), [(Tag3 ((("node", 1095)), 0, (0)), 100000000, 0, -141)], (0)), 100000000, 0, -140), 0, (("src/lr0.mli", 34, 1527, 1527), ("src/lr0.mli", 34, 1527, 1558), 0), 0, Tag1 ("Dune__exe__Lr0", 2)), 0); (("items", 1098), ((Tag1 (0, (Tag3 ((("node", 1095)), 0, (0)), 100000000, 0, -139), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Item"), "Set"), "t"), 0, (0)), 100000000, 0, -138), 0), 100000000, 0, -137), 0, (("src/lr0.mli", 39, 1656, 1656), ("src/lr0.mli", 39, 1656, 1685), 0), 0, Tag1 ("Dune__exe__Lr0", 3)), 0); (("incoming_symbol", 1099), ((Tag1 (0, (Tag3 ((("node", 1095)), 0, (0)), 100000000, 0, -136), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Grammar"), "Symbol"), "t"), 0, (0)), 100000000, 0, -135)], (0)), 100000000, 0, -134), 0), 100000000, 0, -133), 0, (("src/lr0.mli", 45, 1899, 1899), ("src/lr0.mli", 45, 1899, 1943), 0), 0, Tag1 ("Dune__exe__Lr0", 4)), 0); (("incoming_edges", 1100), ((Tag1 (0, (Tag3 ((("node", 1095)), 0, (0)), 100000000, 0, -132), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("node", 1095)), 0, (0)), 100000000, 0, -131)], (0)), 100000000, 0, -130), 0), 100000000, 0, -129), 0, (("src/lr0.mli", 46, 1944, 1944), ("src/lr0.mli", 46, 1944, 1981), 0), 0, Tag1 ("Dune__exe__Lr0", 5)), 0); (("outgoing_edges", 1101), ((Tag1 (0, (Tag3 ((("node", 1095)), 0, (0)), 100000000, 0, -128), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Grammar"), "SymbolMap"), "t"), [(Tag3 ((("node", 1095)), 0, (0)), 100000000, 0, -127)], (0)), 100000000, 0, -126), 0), 100000000, 0, -125), 0, (("src/lr0.mli", 50, 2020, 2020), ("src/lr0.mli", 50, 2020, 2064), 0), 0, Tag1 ("Dune__exe__Lr0", 6)), 0); (("outgoing_symbols", 1102), ((Tag1 (0, (Tag3 ((("node", 1095)), 0, (0)), 100000000, 0, -124), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Grammar"), "Symbol"), "t"), 0, (0)), 100000000, 0, -123)], (0)), 100000000, 0, -122), 0), 100000000, 0, -121), 0, (("src/lr0.mli", 51, 2065, 2065), ("src/lr0.mli", 51, 2065, 2108), 0), 0, Tag1 ("Dune__exe__Lr0", 7)), 0); Tag3 (("ImperativeNodeMap", 1103), 0, (Tag1 ([Tag1 (("key", 1133), (0, 0, 0, 1, ((Tag3 ((("node", 1095)), 0, (0)), 100000000, 0, -161)), 0, 0, 0, 0, (("src/lr0.mli", 56, 2171, 2206), ("src/lr0.mli", 56, 2171, 2221), 0), 0, 1, 0, Tag1 ("Dune__exe__Lr0", 8)), 1, 0); Tag1 (("t", 1134), ([((("data")), 100000000, 0, -160)], 1, 0, 1, 0, [7], [2], 0, 0, (("fix/src/Sigs.ml", 71, 2534, 2536), ("fix/src/Sigs.ml", 71, 2534, 2548), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 15)), 1, 0); (("create", 1135), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -159), (Tag3 ((("t", 1134)), [((("data")), 100000000, 0, -158)], (0)), 100000000, 0, -157), 0), 100000000, 0, -156), 0, (("fix/src/Sigs.ml", 72, 2549, 2551), ("fix/src/Sigs.ml", 72, 2549, 2578), 0), 0, Tag1 ("Vendored_fix__Sigs", 16)), 0); (("add", 1136), ((Tag1 (0, (Tag3 ((("key", 1133)), 0, (0)), 100000000, 0, -155), (Tag1 (0, ((("data")), 100000000, 0, -154), (Tag1 (0, (Tag3 ((("t", 1134)), [((("data")), 100000000, 0, -154)], (0)), 100000000, 0, -153), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -152), 0), 100000000, 0, -151), 0), 100000000, 0, -150), 0), 100000000, 0, -149), 0, (("fix/src/Sigs.ml", 73, 2579, 2581), ("fix/src/Sigs.ml", 73, 2579, 2621), 0), 0, Tag1 ("Vendored_fix__Sigs", 17)), 0); (("find", 1137), ((Tag1 (0, (Tag3 ((("key", 1133)), 0, (0)), 100000000, 0, -148), (Tag1 (0, (Tag3 ((("t", 1134)), [((("data")), 100000000, 0, -146)], (0)), 100000000, 0, -147), ((("data")), 100000000, 0, -146), 0), 100000000, 0, -145), 0), 100000000, 0, -144), 0, (("fix/src/Sigs.ml", 74, 2622, 2624), ("fix/src/Sigs.ml", 74, 2622, 2657), 0), 0, Tag1 ("Vendored_fix__Sigs", 18)), 0)]), 0, (("src/lr0.mli", 55, 2144, 2144), ("src/lr0.mli", 56, 2171, 2221), 0), Tag1 ("Dune__exe__Lr0", 9)), 0, 0); Tag1 (("lr1state", 1104), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/lr0.mli", 65, 2520, 2520), ("src/lr0.mli", 65, 2520, 2533), 0), 0, 0, 0, Tag1 ("Dune__exe__Lr0", 10)), 1, 0); Tag3 (("Lr1StateAsOrderedType", 1105), 0, (Tag1 ([Tag1 (("t", 1138), (0, 0, 0, 1, ((Tag3 ((("lr1state", 1104)), 0, (0)), 100000000, 0, -167)), 0, 0, 0, 0, (("src/lr0.mli", 70, 2627, 2629), ("src/lr0.mli", 70, 2627, 2646), 0), 0, 0, 0, Tag1 ("Dune__exe__Lr0", 11)), 1, 0); (("compare", 1139), ((Tag1 (0, (Tag3 ((("t", 1138)), 0, (0)), 100000000, 0, -166), (Tag1 (0, (Tag3 ((("t", 1138)), 0, (0)), 100000000, 0, -165), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -164), 0), 100000000, 0, -163), 0), 100000000, 0, -162), 0, (("src/lr0.mli", 71, 2647, 2649), ("src/lr0.mli", 71, 2647, 2675), 0), 0, Tag1 ("Dune__exe__Lr0", 12)), 0)]), 0, (("src/lr0.mli", 69, 2592, 2592), ("src/lr0.mli", 72, 2676, 2679), 0), Tag1 ("Dune__exe__Lr0", 13)), 0, 0); Tag1 (("concretelr1state", 1106), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Item"), "Map"), "t"), [(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Grammar"), "TerminalSet"), "t"), 0, (0)), 100000000, 0, -120)], (0)), 100000000, 0, -119)), 0, 0, 0, 0, (("src/lr0.mli", 77, 2816, 2816), ("src/lr0.mli", 78, 2840, 2868), 0), 0, 0, 0, Tag1 ("Dune__exe__Lr0", 14)), 1, 0); (("export", 1107), ((Tag1 (0, (Tag3 ((("lr1state", 1104)), 0, (0)), 100000000, 0, -118), (Tag3 ((("concretelr1state", 1106)), 0, (0)), 100000000, 0, -117), 0), 100000000, 0, -116), 0, (("src/lr0.mli", 80, 2870, 2870), ("src/lr0.mli", 80, 2870, 2910), 0), 0, Tag1 ("Dune__exe__Lr0", 15)), 0); (("closure", 1108), ((Tag1 (0, (Tag3 ((("concretelr1state", 1106)), 0, (0)), 100000000, 0, -115), (Tag3 ((("concretelr1state", 1106)), 0, (0)), 100000000, 0, -114), 0), 100000000, 0, -113), 0, (("src/lr0.mli", 84, 2971, 2971), ("src/lr0.mli", 84, 2971, 3020), 0), 0, Tag1 ("Dune__exe__Lr0", 16)), 0); (("core", 1109), ((Tag1 (0, (Tag3 ((("lr1state", 1104)), 0, (0)), 100000000, 0, -112), (Tag3 ((("node", 1095)), 0, (0)), 100000000, 0, -111), 0), 100000000, 0, -110), 0, (("src/lr0.mli", 88, 3087, 3087), ("src/lr0.mli", 88, 3087, 3113), 0), 0, Tag1 ("Dune__exe__Lr0", 17)), 0); (("start", 1110), ((Tag1 (0, (Tag3 ((("node", 1095)), 0, (0)), 100000000, 0, -109), (Tag3 ((("lr1state", 1104)), 0, (0)), 100000000, 0, -108), 0), 100000000, 0, -107), 0, (("src/lr0.mli", 93, 3189, 3189), ("src/lr0.mli", 93, 3189, 3216), 0), 0, Tag1 ("Dune__exe__Lr0", 18)), 0); (("transitions", 1111), ((Tag1 (0, (Tag3 ((("lr1state", 1104)), 0, (0)), 100000000, 0, -106), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Grammar"), "SymbolMap"), "t"), [(Tag3 ((("lr1state", 1104)), 0, (0)), 100000000, 0, -105)], (0)), 100000000, 0, -104), 0), 100000000, 0, -103), 0, (("src/lr0.mli", 97, 3271, 3271), ("src/lr0.mli", 97, 3271, 3320), 0), 0, Tag1 ("Dune__exe__Lr0", 19)), 0); (("transition", 1112), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Grammar"), "Symbol"), "t"), 0, (0)), 100000000, 0, -102), (Tag1 (0, (Tag3 ((("lr1state", 1104)), 0, (0)), 100000000, 0, -101), (Tag3 ((("lr1state", 1104)), 0, (0)), 100000000, 0, -100), 0), 100000000, 0, -99), 0), 100000000, 0, -98), 0, (("src/lr0.mli", 98, 3321, 3321), ("src/lr0.mli", 98, 3321, 3369), 0), 0, Tag1 ("Dune__exe__Lr0", 20)), 0); (("transition_tokens", 1113), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Grammar"), "SymbolMap"), "t"), [((("target")), 100000000, 0, -97)], (0)), 100000000, 0, -96), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Grammar"), "TerminalSet"), "t"), 0, (0)), 100000000, 0, -95), 0), 100000000, 0, -94), 0, (("src/lr0.mli", 103, 3526, 3526), ("src/lr0.mli", 103, 3526, 3585), 0), 0, Tag1 ("Dune__exe__Lr0", 21)), 0); (("reductions", 1114), ((Tag1 (0, (Tag3 ((("lr1state", 1104)), 0, (0)), 100000000, 0, -93), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Grammar"), "TerminalSet"), "t"), 0, (0)), 100000000, 0, -91); (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Grammar"), "Production"), "index"), 0, (0)), 100000000, 0, -92)]), 100000000, 0, -90)], (0)), 100000000, 0, -89), 0), 100000000, 0, -88), 0, (("src/lr0.mli", 109, 3686, 3686), ("src/lr0.mli", 109, 3686, 3753), 0), 0, Tag1 ("Dune__exe__Lr0", 22)), 0); (("equal", 1115), ((Tag1 (0, (Tag3 ((("lr1state", 1104)), 0, (0)), 100000000, 0, -87), (Tag1 (0, (Tag3 ((("lr1state", 1104)), 0, (0)), 100000000, 0, -86), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -85), 0), 100000000, 0, -84), 0), 100000000, 0, -83), 0, (("src/lr0.mli", 115, 3906, 3906), ("src/lr0.mli", 115, 3906, 3945), 0), 0, Tag1 ("Dune__exe__Lr0", 23)), 0); (("subsume", 1116), ((Tag1 (0, (Tag3 ((("lr1state", 1104)), 0, (0)), 100000000, 0, -82), (Tag1 (0, (Tag3 ((("lr1state", 1104)), 0, (0)), 100000000, 0, -81), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -80), 0), 100000000, 0, -79), 0), 100000000, 0, -78), 0, (("src/lr0.mli", 121, 4133, 4133), ("src/lr0.mli", 121, 4133, 4174), 0), 0, Tag1 ("Dune__exe__Lr0", 24)), 0); (("compatible", 1117), ((Tag1 (0, (Tag3 ((("lr1state", 1104)), 0, (0)), 100000000, 0, -77), (Tag1 (0, (Tag3 ((("lr1state", 1104)), 0, (0)), 100000000, 0, -76), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -75), 0), 100000000, 0, -74), 0), 100000000, 0, -73), 0, (("src/lr0.mli", 126, 4295, 4295), ("src/lr0.mli", 126, 4295, 4339), 0), 0, Tag1 ("Dune__exe__Lr0", 25)), 0); (("eos_compatible", 1118), ((Tag1 (0, (Tag3 ((("lr1state", 1104)), 0, (0)), 100000000, 0, -72), (Tag1 (0, (Tag3 ((("lr1state", 1104)), 0, (0)), 100000000, 0, -71), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -70), 0), 100000000, 0, -69), 0), 100000000, 0, -68), 0, (("src/lr0.mli", 131, 4471, 4471), ("src/lr0.mli", 131, 4471, 4519), 0), 0, Tag1 ("Dune__exe__Lr0", 26)), 0); (("error_compatible", 1119), ((Tag1 (0, (Tag3 ((("lr1state", 1104)), 0, (0)), 100000000, 0, -67), (Tag1 (0, (Tag3 ((("lr1state", 1104)), 0, (0)), 100000000, 0, -66), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -65), 0), 100000000, 0, -64), 0), 100000000, 0, -63), 0, (("src/lr0.mli", 137, 4669, 4669), ("src/lr0.mli", 137, 4669, 4719), 0), 0, Tag1 ("Dune__exe__Lr0", 27)), 0); (("union", 1120), ((Tag1 (0, (Tag3 ((("lr1state", 1104)), 0, (0)), 100000000, 0, -62), (Tag1 (0, (Tag3 ((("lr1state", 1104)), 0, (0)), 100000000, 0, -61), (Tag3 ((("lr1state", 1104)), 0, (0)), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0, (("src/lr0.mli", 145, 4944, 4944), ("src/lr0.mli", 145, 4944, 4987), 0), 0, Tag1 ("Dune__exe__Lr0", 28)), 0); (("restrict", 1121), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Grammar"), "TerminalSet"), "t"), 0, (0)), 100000000, 0, -57), (Tag1 (0, (Tag3 ((("lr1state", 1104)), 0, (0)), 100000000, 0, -56), (Tag3 ((("lr1state", 1104)), 0, (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0, (("src/lr0.mli", 150, 5104, 5104), ("src/lr0.mli", 150, 5104, 5155), 0), 0, Tag1 ("Dune__exe__Lr0", 29)), 0); (("print_concrete", 1122), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -52), (Tag1 (0, (Tag3 ((("concretelr1state", 1106)), 0, (0)), 100000000, 0, -51), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -50), 0), 100000000, 0, -49), 0), 100000000, 0, -48), 0, (("src/lr0.mli", 157, 5385, 5385), ("src/lr0.mli", 157, 5385, 5441), 0), 0, Tag1 ("Dune__exe__Lr0", 30)), 0); (("print", 1123), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -47), (Tag1 (0, (Tag3 ((("lr1state", 1104)), 0, (0)), 100000000, 0, -46), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -45), 0), 100000000, 0, -44), 0), 100000000, 0, -43), 0, (("src/lr0.mli", 158, 5442, 5442), ("src/lr0.mli", 158, 5442, 5498), 0), 0, Tag1 ("Dune__exe__Lr0", 31)), 0); (("print_closure", 1124), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -42), (Tag1 (0, (Tag3 ((("lr1state", 1104)), 0, (0)), 100000000, 0, -41), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -40), 0), 100000000, 0, -39), 0), 100000000, 0, -38), 0, (("src/lr0.mli", 159, 5499, 5499), ("src/lr0.mli", 159, 5499, 5555), 0), 0, Tag1 ("Dune__exe__Lr0", 32)), 0); Tag1 (("reductions", 1125), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Grammar"), "TerminalMap"), "t"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Grammar"), "Production"), "index"), 0, (0)), 100000000, 0, -37)], (0)), 100000000, 0, -36)], (0)), 100000000, 0, -35)), 0, 0, 0, 0, (("src/lr0.mli", 164, 5673, 5673), ("src/lr0.mli", 165, 5691, 5728), 0), 0, 0, 0, Tag1 ("Dune__exe__Lr0", 33)), 1, 0); (("add_reduction", 1126), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Grammar"), "Production"), "index"), 0, (0)), 100000000, 0, -34), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Grammar"), "Terminal"), "t"), 0, (0)), 100000000, 0, -33), (Tag1 (0, (Tag3 ((("reductions", 1125)), 0, (0)), 100000000, 0, -32), (Tag3 ((("reductions", 1125)), 0, (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("src/lr0.mli", 170, 5839, 5839), ("src/lr0.mli", 170, 5839, 5916), 0), 0, Tag1 ("Dune__exe__Lr0", 34)), 0); (("add_reductions", 1127), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Grammar"), "Production"), "index"), 0, (0)), 100000000, 0, -27), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Grammar"), "TerminalSet"), "t"), 0, (0)), 100000000, 0, -26), (Tag1 (0, (Tag3 ((("reductions", 1125)), 0, (0)), 100000000, 0, -25), (Tag3 ((("reductions", 1125)), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("src/lr0.mli", 175, 6053, 6053), ("src/lr0.mli", 175, 6053, 6134), 0), 0, Tag1 ("Dune__exe__Lr0", 35)), 0); (("reductions_table", 1128), ((Tag1 (0, (Tag3 ((("lr1state", 1104)), 0, (0)), 100000000, 0, -20), (Tag3 ((("reductions", 1125)), 0, (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0, (("src/lr0.mli", 179, 6181, 6181), ("src/lr0.mli", 179, 6181, 6225), 0), 0, Tag1 ("Dune__exe__Lr0", 36)), 0); (("invert", 1129), ((Tag1 (0, (Tag3 ((("reductions", 1125)), 0, (0)), 100000000, 0, -17), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Grammar"), "ProductionMap"), "t"), [(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Grammar"), "TerminalSet"), "t"), 0, (0)), 100000000, 0, -16)], (0)), 100000000, 0, -15), 0), 100000000, 0, -14), 0, (("src/lr0.mli", 184, 6382, 6382), ("src/lr0.mli", 184, 6382, 6438), 0), 0, Tag1 ("Dune__exe__Lr0", 37)), 0); (("reduction_tokens", 1130), ((Tag1 (0, (Tag3 ((("reductions", 1125)), 0, (0)), 100000000, 0, -13), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Grammar"), "TerminalSet"), "t"), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("src/lr0.mli", 189, 6564, 6564), ("src/lr0.mli", 189, 6564, 6613), 0), 0, Tag1 ("Dune__exe__Lr0", 38)), 0); (("has_eos_conflict", 1131), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Grammar"), "SymbolMap"), "t"), [((("target")), 100000000, 0, -10)], (0)), 100000000, 0, -9), (Tag1 (0, (Tag3 ((("reductions", 1125)), 0, (0)), 100000000, 0, -8), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("src/lr0.mli", 195, 6807, 6807), ("src/lr0.mli", 195, 6807, 6870), 0), 0, Tag1 ("Dune__exe__Lr0", 39)), 0); (("has_eos_conflict_lr1state", 1132), ((Tag1 (0, (Tag3 ((("lr1state", 1104)), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/lr0.mli", 196, 6871, 6871), ("src/lr0.mli", 196, 6871, 6918), 0), 0, Tag1 ("Dune__exe__Lr0", 40)), 0)], "Dune__exe__Lr0", [("Dune__exe__Lr0", ("<)\002'>\186\242Mu\230\244\006\235=\163q")); ("Vendored_fix__Sigs", ("a{\193\210\184\138\163\252\132\135.\2156meu")); ("Vendored_fix__Set", ("#\017\234a}\187\202\206\012\134\207\129$\021\139\204")); ("Vendored_fix__Option", ("\185\131\152+\006QZ\148\188/\198#\220M\188\016")); ("Vendored_fix__Core", ("\214\127\018A\245\025\b\249\146\254pi\185\243\149\133")); ("Vendored_fix__", ("\r\196g\002\180\221\139\252\200\240t\184\171.K\020")); ("Vendored_fix", ("\012!\239\029\209\204\252\027\214>p\249;\128\184\191")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__StringLabels", ("\134F\024\226\216Is#\223\230\234\169Z\206Gc")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Printexc", ("\217u\168\235\179oi\167\235\255\025\017%d\192s")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__ListLabels", ("*\194\012\191\020%\170\249m\002\180\178hk\205\220")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("Sexplib0__Sexpable", ("\251${\207(\249/z\242\255\250^\141\156\210e")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv_error", ("kzv!\151~\198P\000\165\176d\007\251p\232")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("Ppx_module_timer_runtime", ("\255\014\002\221+\150\189o\025\158\233y\t7\000\001")); ("MenhirSdk__Keyword", ("\140\184mC\002M1\250_J\005'\254\253\198\158")); ("MenhirSdk", ("F\232\012\196l\143\145[\255\2193U\197\027\176\139")); ("Dune__exe__Syntax", ("\169\210\177ImC\167\1826I\176k\156\243`\229")); ("Dune__exe__StringSet", ("uB\206\020%\219\199\135&\196,\015\190\015^\230")); ("Dune__exe__StringMap", ("\157\157\161k*M\030\254|\006>\144X\147j\222")); ("Dune__exe__Stretch", ("`1\021p\160\rm\2294\182\183\018!\r\150N")); ("Dune__exe__Settings", ("M\162\137\147^\213\201 \247\137>q\024\145j\029")); ("Dune__exe__Positions", ("\137nS\236\011\187\r[\024:\162/\201\139\237}")); ("Dune__exe__Lookahead", ("\130\131iH\147\"\006\015\225\193\150c\16031v")); ("Dune__exe__Item", ("\030=\205\252\201#n\"\185\234[0\001\237\n\n")); ("Dune__exe__InputFile", (",\0246\029z@\127T\235\227k~\t\138\213%")); ("Dune__exe__IL", ("Y\233a\233\211\171OQ\195\015\017\030j\226.\186")); ("Dune__exe__GrammarFunctor", ("s\224U2\207\159\162\231\199\026\199\222\177\242\131>")); ("Dune__exe__Grammar", ("\146[\158\004\028M\015O\183*F\022\237.\167\014")); ("Dune__exe__GSet", ("\181\135&\173\210O\1582\199YB\160\136%qR")); ("Dune__exe__GMap", ("\022}Iu\136\176\1619&\246tOogY9")); ("Dune__exe__Front", ("\148\176\180\242\232x\020\016\239\205>I\021\\n*")); ("Dune__exe__Fix", ("\166\250\213\"\157(Ls\031\019\196`\150g\217\209")); ("Dune__exe__BasicSyntax", ("\134\162e\223\188\\N\160\170\206\182\158\218\030\195\250")); ("Dune__exe__Action", ("c\225H \249\179\190\007`[X\019\132@\208\193")); ("Dune__exe", ("\137\000\197\175$\007]\218\141\248\172\212\146c\153\212")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Base__Unit", ("\247\n\178\171]m\169\231\139\171\148\189\254\236l'")); ("Base__T", ("+t\159\169\027\152\205\235\003\237\133\177\024\n6'")); ("Base__Sys0", ("\206z\231\154s\\\136\2364\131\005\014\031\152m3")); ("Base__Stringable", ("\170\025\162\136\234\162\n\161\1491>\145\210@\237t")); ("Base__String0", ("\212\221L\220\245\255\162P\228\224\189\216\135H\149O")); ("Base__String", ("|q\181\r\14787\130\127\191\025\137\203\217\250\196")); ("Base__Staged", ("\203J\011+\249\0115\1338\023\209\142\159\240V.")); ("Base__Source_code_position0", ("_\003P6\254\029\206\005\130\136\180\019\145\230\000M")); ("Base__Sign_or_nan", ("\2287\251,\197\017qf\179Y\025h\190\131W%")); ("Base__Sign0", ("\152\138\204\175\244\128J\165\221\165\160\150y\1305i")); ("Base__Sign", ("^\255.Q;\215fi\134\192\182\241Z\2425l")); ("Base__Sexpable", ("\155?\169\178\246\242*\232\206\018Y\174\203h\217i")); ("Base__Sexp_with_comparable", ("\171\173\137y\1855\006y\146\248\141@@\191[W")); ("Base__Sexp", ("\154\187\171&\209=\153[\236\250!U\174`\190T")); ("Base__Sequence", ("{L\140\211\223\183\000\030\151\247FnY\196\210\201")); ("Base__Result", ("\204|\215\173FMa\2511<&\215T\194$\228")); ("Base__Ref", ("\250\254R\158s\203c\0025\029I6\149\179s\158")); ("Base__Random", (" \216\153fc\243\1430\155\211\169?\022\\\231\011")); ("Base__Printf", ("\000\196c,\214\127\226\174\220\190\253z!\242\028\250")); ("Base__Pretty_printer", ("\175\005\031\018\015a\159\220\154c'(a\239j\233")); ("Base__Ppx_hash_lib", ("\199\141\178\193\006\209L\007^\020(\131\224sn8")); ("Base__Ppx_enumerate_lib", ("G\171\178\012Em\142\235@\152fg\020\140~(")); ("Base__Ppx_compare_lib", ("\243\186~\233\228\199Ah\181.\223\004e\231\129S")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Or_error", ("\193\133)\bO\210\2517\168*\203\148\143\200\127\177")); ("Base__Option", ("\242!\176\142\168\247\163Jg\0254\180\224\\A\210")); ("Base__Nativeint", ("\252/\181U\214\229\029?.\130\145\237\"qFj")); ("Base__Monad_intf", ("\208\203\163\152\184O\130?\012:\168\247}\018\253\155")); ("Base__Monad", ("!\244\168\2352=\137Lm\219\129K\216\199\145\\")); ("Base__List", ("}\029h\158/\153\229\161]0\224Y\003Z\250\210")); ("Base__Lazy", ("@`\165\196 \235)\136ANe:p\169$\185")); ("Base__Invariant_intf", ("\213\204\238\235\236[\198\145\028\2392\015\243\177S\249")); ("Base__Invariant", ("\135\153\136\\\129SD\228\202l\255\152\139\253\015\201")); ("Base__Intable", ("\028\249=Y\003]\231qd\238\172\004b\170\142\255")); ("Base__Int_intf", ("\238Q\2457\239\156\018\183J\015\240\178\193b\166@")); ("Base__Int64", ("\252B\186\239\245\155\209\227\136CIX@\189\003\029")); ("Base__Int63_emul", ("'\210s\232\177\204\254\024C\215\014\231\210\227n\235")); ("Base__Int63", ("\165\016\236\214m\014a\226A{\191\235@O\1695")); ("Base__Int32", ("\244*\172\133\227\025$@\180\027\024\132\195yO\027")); ("Base__Int0", ("N\1310\012\227\254\000\255_\222!\018\016\003\1779")); ("Base__Int", ("\165Z\179\140\230$\131\175\209\172\214\"\170\214{\250")); ("Base__Info_intf", ("\184\209'\173\251\219\167X|v\188]\190o5X")); ("Base__Info", ("-\011\149\203\248\030\2301\1907\1630\189\128\209\170")); ("Base__Indexed_container_intf", ("\179\2213\145j\\\136\tl2\240\006\188j$r")); ("Base__Indexed_container", ("\196\246\213\141\196d\130\002\232\162\144y\149\236\145\218")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Import", ("\014\187\247\141\187\181\142g\176:s_,\181\219\209")); ("Base__Identifiable_intf", ("hK7}\187\129\022-r\233\241\192Q\161=j")); ("Base__Identifiable", ("L\020\162\189\228\217^\171\158H_\157\164c\130\242")); ("Base__Hashable_intf", ("\128\015G\244\135R\026\202\128F?)\193\004\195\181")); ("Base__Hashable", ("\027\187\158\245r}\018\193dbq\196\005\170g\252")); ("Base__Hash_intf", ("h\004P\218\1531G\127\212\208A\024\140\164iq")); ("Base__Hash", ("\206Rc\194\234{s3\248\165\024\162\203{\206\206")); ("Base__Globalize", ("<\243w~.\180\196t\159\193\174[\227\139\215G")); ("Base__Formatter", ("\193\149\030\140\154\1505b\162a`%\243\185'%")); ("Base__Floatable", ("\239\176\151\139\173ft(q\190\205\030C\170\197\177")); ("Base__Float", ("tR$\252\165\134g\024>\127\254\245\212-\018\141")); ("Base__Field", ("8In\234X\202\188G\186\208$\192\175\136\214v")); ("Base__Exn", ("?\191\202\221\228\185\154\127\240\191o\134\020\186b\173")); ("Base__Error", ("\199\218\231n\155/\159\156\146\247\148t\237\003\t\153")); ("Base__Equal", ("\193\217Z\127he\141N\000\1447\030\236%\131\b")); ("Base__Either0", ("!9-\011n\2077eZ\212\031c\227\029\206\t")); ("Base__Container_intf", ("\170vo*\208\209\141\219\196\168\236l\016\246\012c")); ("Base__Container", ("\191|>_\153W\235M\180uKz\214w`q")); ("Base__Comparisons", ("\196\196Y\"{\163~)\\G/\155:\004\141;")); ("Base__Comparator", ("\002\135z7b\025&\207\t\188\239&U3R\167")); ("Base__Comparable_intf", ("\252n\002\221\246\143r\235oJ\240\151\202\211\161\254")); ("Base__Comparable", (":\134'\156u#\215\225\129\191\162\229\200\185l\012")); ("Base__Char", ("\206\224\186\000'\157$\023\023\190\198{\250\141a\216")); ("Base__Bytes", ("\028\001\232X(\240\139\227s\152\156\138\023\030\r\188")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__Bool", ("\162+\012Rx\183c\226\131\190@Z\016q\138@")); ("Base__Blit_intf", ("\171\129\t\214\130\131O\210\251F\228.\168\004Vo")); ("Base__Blit", ("}g\242\161\000\216\132\220\195\230C\002jg\234j")); ("Base__Binary_searchable_intf", ("/\213\237\209\200\192$w\158\234\169\148\012\221W\019")); ("Base__Binary_searchable", ("V\022B_\233\194\145K\248\233\025\175U\155i\197")); ("Base__Backtrace", ("\212~\253E\024|\228\141\015\169\012\006\022\0065\181")); ("Base__Array", ("P\252F\172\242{\241\226#uu\207\2068\218\015")); ("Base__Applicative_intf", ("J\176\203\159\235N(\235\027\232\198+\224\205*A")); ("Base__Applicative", ("\157\024\176\241a\165\204\133\003s3\214\007\131\244\n")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158")); ("Base", ("\167SY\027Q9E\005r,\198\164\161\023\170\151"))], [1; (0)])
val has_eos_conflict_lr1state : lr1state -> bool

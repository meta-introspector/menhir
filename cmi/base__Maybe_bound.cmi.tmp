type 'a t = Incl of 'a | Excl of 'a | Unbounded
val all : 'a list -> 'a t list
val t_of_sexp : (Sexplib0__.Sexp.t -> 'a) -> Sexplib0__.Sexp.t -> 'a t
val sexp_of_t : ('a -> Sexplib0__.Sexp.t) -> 'a t -> Sexplib0__.Sexp.t
val t_sexp_grammar :
  'a Sexplib0.Sexp_grammar.t -> 'a t Sexplib0.Sexp_grammar.t
val map : 'a t -> f:('a -> 'b) -> 'b t
val is_lower_bound : 'a t -> of_:'a -> compare:('a -> 'a -> int) -> bool
val is_upper_bound : 'a t -> of_:'a -> compare:('a -> 'a -> int) -> bool
val interval_contains_exn :
  lower:'a t -> upper:'a t -> 'a -> compare:('a -> 'a -> int) -> bool
val bounds_crossed :
  lower:'a t -> upper:'a t -> compare:('a -> 'a -> int) -> bool
type interval_comparison = Below_lower_bound | In_range | Above_upper_bound
val sexp_of_interval_comparison : interval_comparison -> Sexplib0.Sexp.t
val interval_comparison_of_sexp : Sexplib0.Sexp.t -> interval_comparison
val interval_comparison_sexp_grammar :
  interval_comparison Sexplib0.Sexp_grammar.t
val compare_interval_comparison :
  interval_comparison -> interval_comparison -> int
val hash_fold_interval_comparison :
  Base__.Ppx_hash_lib.Std.Hash.state ->
  interval_comparison -> Base__.Ppx_hash_lib.Std.Hash.state
val hash_interval_comparison :
  interval_comparison -> Base__.Ppx_hash_lib.Std.Hash.hash_value
val compare_to_interval_exn :
  lower:'a t ->
  ("DEBUG:rule", [Tag1 (("t", 939), ([((("a")), 100000000, 0, -104)], 1, Tag1 ([(("Incl", 783), ([((("a")), 100000000, 0, -104)]), 0, (("src/maybe_bound.mli", 7, 129, 131), ("src/maybe_bound.mli", 7, 129, 143), 0), 0, Tag1 ("Base__Maybe_bound", 1)); (("Excl", 784), ([((("a")), 100000000, 0, -104)]), 0, (("src/maybe_bound.mli", 8, 144, 146), ("src/maybe_bound.mli", 8, 144, 158), 0), 0, Tag1 ("Base__Maybe_bound", 2)); (("Unbounded", 785), (0), 0, (("src/maybe_bound.mli", 9, 159, 161), ("src/maybe_bound.mli", 9, 159, 172), 0), 0, Tag1 ("Base__Maybe_bound", 3))], 0), 1, 0, [25], [0], 0, 0, (("src/maybe_bound.mli", 6, 117, 117), ("src/maybe_bound.mli", 10, 173, 222), 0), [(("deriving_inline", (("src/maybe_bound.mli", 10, 173, 176), ("src/maybe_bound.mli", 10, 173, 191), 0)), ([([(Tag8 ([(((("enumerate"), (("src/maybe_bound.mli", 10, 173, 192), ("src/maybe_bound.mli", 10, 173, 201), 0))), (("src/maybe_bound.mli", 10, 173, 192), ("src/maybe_bound.mli", 10, 173, 201), 0), 0, 0); (((("sexp"), (("src/maybe_bound.mli", 10, 173, 203), ("src/maybe_bound.mli", 10, 173, 207), 0))), (("src/maybe_bound.mli", 10, 173, 203), ("src/maybe_bound.mli", 10, 173, 207), 0), 0, 0); (((("sexp_grammar"), (("src/maybe_bound.mli", 10, 173, 209), ("src/maybe_bound.mli", 10, 173, 221), 0))), (("src/maybe_bound.mli", 10, 173, 209), ("src/maybe_bound.mli", 10, 173, 221), 0), 0, 0)]), (("src/maybe_bound.mli", 10, 173, 192), ("src/maybe_bound.mli", 10, 173, 221), 0), 0, 0)], (("src/maybe_bound.mli", 10, 173, 192), ("src/maybe_bound.mli", 10, 173, 221), 0))]), (("src/maybe_bound.mli", 10, 173, 173), ("src/maybe_bound.mli", 10, 173, 222), 0))], 0, 0, Tag1 ("Base__Maybe_bound", 0)), 1, 0); (("all", 940), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -102)], (0)), 100000000, 0, -103), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 939)), [((("a")), 100000000, 0, -102)], (0)), 100000000, 0, -101)], (0)), 100000000, 0, -100), 0), 100000000, 0, -99), 0, (("src/maybe_bound.mli", 12, 224, 232), ("src/maybe_bound.mli", 12, 224, 286), 0), 0, Tag1 ("Base__Ppx_enumerate_lib", 5)), 0); (("t_of_sexp", 941), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -98), ((("a")), 100000000, 0, -95), 0), 100000000, 0, -97), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -96), (Tag3 ((("t", 939)), [((("a")), 100000000, 0, -95)], (0)), 100000000, 0, -94), 0), 100000000, 0, -93), 0), 100000000, 0, -92), 0, (("src/maybe_bound.mli", 13, 287, 295), ("src/maybe_bound.mli", 13, 287, 338), 0), 0, Tag1 ("Sexplib0__Sexpable", 5)), 0); (("sexp_of_t", 942), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -89), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -91), 0), 100000000, 0, -90), (Tag1 (0, (Tag3 ((("t", 939)), [((("a")), 100000000, 0, -89)], (0)), 100000000, 0, -88), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -87), 0), 100000000, 0, -86), 0), 100000000, 0, -85), 0, (("src/maybe_bound.mli", 13, 287, 295), ("src/maybe_bound.mli", 13, 287, 338), 0), 0, Tag1 ("Sexplib0__Sexpable", 6)), 0); (("t_sexp_grammar", 943), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [((("a")), 100000000, 0, -83)], (0)), 100000000, 0, -84), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("t", 939)), [((("a")), 100000000, 0, -83)], (0)), 100000000, 0, -82)], (0)), 100000000, 0, -81), 0), 100000000, 0, -80), 0, (("src/maybe_bound.mli", 15, 340, 340), ("src/maybe_bound.mli", 15, 340, 419), 0), 0, Tag1 ("Base__Maybe_bound", 7)), 0); (("map", 944), ((Tag1 (0, (Tag3 ((("t", 939)), [((("a")), 100000000, 0, -78)], (0)), 100000000, 0, -79), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -78), ((("b")), 100000000, 0, -76), 0), 100000000, 0, -77), (Tag3 ((("t", 939)), [((("b")), 100000000, 0, -76)], (0)), 100000000, 0, -75), 0), 100000000, 0, -74), 0), 100000000, 0, -73), 0, (("src/maybe_bound.mli", 19, 431, 431), ("src/maybe_bound.mli", 19, 431, 479), 0), 0, Tag1 ("Base__Maybe_bound", 8)), 0); (("is_lower_bound", 945), ((Tag1 (0, (Tag3 ((("t", 939)), [((("a")), 100000000, 0, -71)], (0)), 100000000, 0, -72), (Tag1 (("of_"), ((("a")), 100000000, 0, -71), (Tag1 (("compare"), (Tag1 (0, ((("a")), 100000000, 0, -71), (Tag1 (0, ((("a")), 100000000, 0, -71), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -70), 0), 100000000, 0, -69), 0), 100000000, 0, -68), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -67), 0), 100000000, 0, -66), 0), 100000000, 0, -65), 0), 100000000, 0, -64), 0, (("src/maybe_bound.mli", 20, 480, 480), ("src/maybe_bound.mli", 20, 480, 562), 0), 0, Tag1 ("Base__Maybe_bound", 9)), 0); (("is_upper_bound", 946), ((Tag1 (0, (Tag3 ((("t", 939)), [((("a")), 100000000, 0, -62)], (0)), 100000000, 0, -63), (Tag1 (("of_"), ((("a")), 100000000, 0, -62), (Tag1 (("compare"), (Tag1 (0, ((("a")), 100000000, 0, -62), (Tag1 (0, ((("a")), 100000000, 0, -62), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -61), 0), 100000000, 0, -60), 0), 100000000, 0, -59), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -58), 0), 100000000, 0, -57), 0), 100000000, 0, -56), 0), 100000000, 0, -55), 0, (("src/maybe_bound.mli", 21, 563, 563), ("src/maybe_bound.mli", 21, 563, 645), 0), 0, Tag1 ("Base__Maybe_bound", 10)), 0); (("interval_contains_exn", 947), ((Tag1 (("lower"), (Tag3 ((("t", 939)), [((("a")), 100000000, 0, -52)], (0)), 100000000, 0, -54), (Tag1 (("upper"), (Tag3 ((("t", 939)), [((("a")), 100000000, 0, -52)], (0)), 100000000, 0, -53), (Tag1 (0, ((("a")), 100000000, 0, -52), (Tag1 (("compare"), (Tag1 (0, ((("a")), 100000000, 0, -52), (Tag1 (0, ((("a")), 100000000, 0, -52), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -51), 0), 100000000, 0, -50), 0), 100000000, 0, -49), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -48), 0), 100000000, 0, -47), 0), 100000000, 0, -46), 0), 100000000, 0, -45), 0), 100000000, 0, -44), 0, (("src/maybe_bound.mli", 25, 750, 750), ("src/maybe_bound.mli", 30, 857, 866), 0), 0, Tag1 ("Base__Maybe_bound", 11)), 0); (("bounds_crossed", 948), ((Tag1 (("lower"), (Tag3 ((("t", 939)), [((("a")), 100000000, 0, -41)], (0)), 100000000, 0, -43), (Tag1 (("upper"), (Tag3 ((("t", 939)), [((("a")), 100000000, 0, -41)], (0)), 100000000, 0, -42), (Tag1 (("compare"), (Tag1 (0, ((("a")), 100000000, 0, -41), (Tag1 (0, ((("a")), 100000000, 0, -41), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -40), 0), 100000000, 0, -39), 0), 100000000, 0, -38), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -37), 0), 100000000, 0, -36), 0), 100000000, 0, -35), 0), 100000000, 0, -34), 0, (("src/maybe_bound.mli", 35, 1005, 1005), ("src/maybe_bound.mli", 39, 1097, 1106), 0), 0, Tag1 ("Base__Maybe_bound", 12)), 0); Tag1 (("interval_comparison", 949), (0, 0, Tag1 ([(("Below_lower_bound", 862), (0), 0, (("src/maybe_bound.mli", 42, 1135, 1137), ("src/maybe_bound.mli", 42, 1135, 1156), 0), 0, Tag1 ("Base__Maybe_bound", 14)); (("In_range", 863), (0), 0, (("src/maybe_bound.mli", 43, 1157, 1159), ("src/maybe_bound.mli", 43, 1157, 1169), 0), 0, Tag1 ("Base__Maybe_bound", 15)); (("Above_upper_bound", 864), (0), 0, (("src/maybe_bound.mli", 44, 1170, 1172), ("src/maybe_bound.mli", 44, 1170, 1191), 0), 0, Tag1 ("Base__Maybe_bound", 16))], 0), 1, 0, 0, 0, 0, 0, (("src/maybe_bound.mli", 41, 1108, 1108), ("src/maybe_bound.mli", 45, 1192, 1245), 0), [(("deriving_inline", (("src/maybe_bound.mli", 45, 1192, 1195), ("src/maybe_bound.mli", 45, 1192, 1210), 0)), ([([(Tag8 ([(((("sexp"), (("src/maybe_bound.mli", 45, 1192, 1211), ("src/maybe_bound.mli", 45, 1192, 1215), 0))), (("src/maybe_bound.mli", 45, 1192, 1211), ("src/maybe_bound.mli", 45, 1192, 1215), 0), 0, 0); (((("sexp_grammar"), (("src/maybe_bound.mli", 45, 1192, 1217), ("src/maybe_bound.mli", 45, 1192, 1229), 0))), (("src/maybe_bound.mli", 45, 1192, 1217), ("src/maybe_bound.mli", 45, 1192, 1229), 0), 0, 0); (((("compare"), (("src/maybe_bound.mli", 45, 1192, 1231), ("src/maybe_bound.mli", 45, 1192, 1238), 0))), (("src/maybe_bound.mli", 45, 1192, 1231), ("src/maybe_bound.mli", 45, 1192, 1238), 0), 0, 0); (((("hash"), (("src/maybe_bound.mli", 45, 1192, 1240), ("src/maybe_bound.mli", 45, 1192, 1244), 0))), (("src/maybe_bound.mli", 45, 1192, 1240), ("src/maybe_bound.mli", 45, 1192, 1244), 0), 0, 0)]), (("src/maybe_bound.mli", 45, 1192, 1211), ("src/maybe_bound.mli", 45, 1192, 1244), 0), 0, 0)], (("src/maybe_bound.mli", 45, 1192, 1211), ("src/maybe_bound.mli", 45, 1192, 1244), 0))]), (("src/maybe_bound.mli", 45, 1192, 1192), ("src/maybe_bound.mli", 45, 1192, 1245), 0))], 1, 0, Tag1 ("Base__Maybe_bound", 13)), 1, 0); (("sexp_of_interval_comparison", 950), ((Tag1 (0, (Tag3 ((("interval_comparison", 949)), 0, (0)), 100000000, 0, -33), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("src/maybe_bound.mli", 47, 1247, 1247), ("src/maybe_bound.mli", 47, 1247, 1319), 0), 0, Tag1 ("Base__Maybe_bound", 17)), 0); (("interval_comparison_of_sexp", 951), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -30), (Tag3 ((("interval_comparison", 949)), 0, (0)), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("src/maybe_bound.mli", 48, 1320, 1320), ("src/maybe_bound.mli", 48, 1320, 1392), 0), 0, Tag1 ("Base__Maybe_bound", 18)), 0); (("interval_comparison_sexp_grammar", 952), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("interval_comparison", 949)), 0, (0)), 100000000, 0, -27)], (0)), 100000000, 0, -26), 0, (("src/maybe_bound.mli", 49, 1393, 1393), ("src/maybe_bound.mli", 49, 1393, 1475), 0), 0, Tag1 ("Base__Maybe_bound", 19)), 0); (("compare_interval_comparison", 953), ((Tag1 (0, (Tag3 ((("interval_comparison", 949)), 0, (0)), 100000000, 0, -25), (Tag1 (0, (Tag3 ((("interval_comparison", 949)), 0, (0)), 100000000, 0, -24), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -23), 0), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("src/maybe_bound.mli", 50, 1476, 1476), ("src/maybe_bound.mli", 50, 1476, 1559), 0), 0, Tag1 ("Base__Maybe_bound", 20)), 0); (("hash_fold_interval_comparison", 954), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -20), (Tag1 (0, (Tag3 ((("interval_comparison", 949)), 0, (0)), 100000000, 0, -19), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("src/maybe_bound.mli", 52, 1561, 1561), ("src/maybe_bound.mli", 55, 1653, 1685), 0), 0, Tag1 ("Base__Maybe_bound", 21)), 0); (("hash_interval_comparison", 955), ((Tag1 (0, (Tag3 ((("interval_comparison", 949)), 0, (0)), 100000000, 0, -15), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "hash_value"), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("src/maybe_bound.mli", 57, 1687, 1687), ("src/maybe_bound.mli", 57, 1687, 1773), 0), 0, Tag1 ("Base__Maybe_bound", 22)), 0); (("compare_to_interval_exn", 956), ((Tag1 (("lower"), (Tag3 ((("t", 939)), [((("a")), 100000000, 0, -10)], (0)), 100000000, 0, -12), (Tag1 (("upper"), (Tag3 ((("t", 939)), [((("a")), 100000000, 0, -10)], (0)), 100000000, 0, -11), (Tag1 (0, ((("a")), 100000000, 0, -10), (Tag1 (("compare"), (Tag1 (0, ((("a")), 100000000, 0, -10), (Tag1 (0, ((("a")), 100000000, 0, -10), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0), 100000000, 0, -7), (Tag3 ((("interval_comparison", 949)), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/maybe_bound.mli", 63, 1890, 1890), ("src/maybe_bound.mli", 68, 1999, 2023), 0), 0, Tag1 ("Base__Maybe_bound", 23)), 0)], "Base__Maybe_bound", [("Base__Maybe_bound", ("\211{0\211\222\218\143\007\232\138\213\212\228f\247C")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("Sexplib0__Sexpable", ("\251${\207(\249/z\242\255\250^\141\156\210e")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Base__Sexp", ("\154\187\171&\209=\153[\236\250!U\174`\190T")); ("Base__Ppx_hash_lib", ("\199\141\178\193\006\209L\007^\020(\131\224sn8")); ("Base__Ppx_enumerate_lib", ("G\171\178\012Em\142\235@\152fg\020\140~(")); ("Base__Ppx_compare_lib", ("\243\186~\233\228\199Ah\181.\223\004e\231\129S")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Import", ("\014\187\247\141\187\181\142g\176:s_,\181\219\209")); ("Base__Hash_intf", ("h\004P\218\1531G\127\212\208A\024\140\164iq")); ("Base__Hash", ("\206Rc\194\234{s3\248\165\024\162\203{\206\206")); ("Base__Globalize", ("<\243w~.\180\196t\159\193\174[\227\139\215G")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158"))], [(0)])
upper:'a t -> 'a -> compare:('a -> 'a -> int) -> interval_comparison

external raise_notrace : exn -> 'a = "%raise_notrace"
exception Exit
exception Not_found
external ( == ) : 'a -> 'a -> bool = "%eq"
external ( != ) : 'a -> 'a -> bool = "%noteq"
external __LOC__ : string = "%loc_LOC"
external __FILE__ : string = "%loc_FILE"
external __LINE__ : int = "%loc_LINE"
external __MODULE__ : string = "%loc_MODULE"
external __POS__ : string * int * int * int = "%loc_POS"
external __FUNCTION__ : string = "%loc_FUNCTION"
external __LOC_OF__ : 'a -> string * 'a = "%loc_LOC"
external __LINE_OF__ : 'a -> int * 'a = "%loc_LINE"
external __POS_OF__ : 'a -> (string * int * int * int) * 'a = "%loc_POS"
external ( ~+ ) : int -> int = "%identity"
external succ : int -> int = "%succint"
external pred : int -> int = "%predint"
external ( mod ) : int -> int -> int = "%modint"
val max_int : int
val min_int : int
external ( ~+. ) : float -> float = "%identity"
external sqrt : float -> float = "caml_sqrt_float" "sqrt" [@@unboxed]
  [@@noalloc]
external exp : float -> float = "caml_exp_float" "exp" [@@unboxed]
  [@@noalloc]
external log : float -> float = "caml_log_float" "log" [@@unboxed]
  [@@noalloc]
external log10 : float -> float = "caml_log10_float" "log10" [@@unboxed]
  [@@noalloc]
external expm1 : float -> float = "caml_expm1_float" "caml_expm1" [@@unboxed]
  [@@noalloc]
external log1p : float -> float = "caml_log1p_float" "caml_log1p" [@@unboxed]
  [@@noalloc]
external cos : float -> float = "caml_cos_float" "cos" [@@unboxed]
  [@@noalloc]
external sin : float -> float = "caml_sin_float" "sin" [@@unboxed]
  [@@noalloc]
external tan : float -> float = "caml_tan_float" "tan" [@@unboxed]
  [@@noalloc]
external acos : float -> float = "caml_acos_float" "acos" [@@unboxed]
  [@@noalloc]
external asin : float -> float = "caml_asin_float" "asin" [@@unboxed]
  [@@noalloc]
external atan : float -> float = "caml_atan_float" "atan" [@@unboxed]
  [@@noalloc]
external atan2 : float -> float -> float = "caml_atan2_float" "atan2"
  [@@unboxed] [@@noalloc]
external hypot : float -> float -> float = "caml_hypot_float" "caml_hypot"
  [@@unboxed] [@@noalloc]
external cosh : float -> float = "caml_cosh_float" "cosh" [@@unboxed]
  [@@noalloc]
external sinh : float -> float = "caml_sinh_float" "sinh" [@@unboxed]
  [@@noalloc]
external tanh : float -> float = "caml_tanh_float" "tanh" [@@unboxed]
  [@@noalloc]
external acosh : float -> float = "caml_acosh_float" "caml_acosh" [@@unboxed]
  [@@noalloc]
external asinh : float -> float = "caml_asinh_float" "caml_asinh" [@@unboxed]
  [@@noalloc]
external atanh : float -> float = "caml_atanh_float" "caml_atanh" [@@unboxed]
  [@@noalloc]
external ceil : float -> float = "caml_ceil_float" "ceil" [@@unboxed]
  [@@noalloc]
external floor : float -> float = "caml_floor_float" "floor" [@@unboxed]
  [@@noalloc]
external abs_float : float -> float = "%absfloat"
external copysign : float -> float -> float = "caml_copysign_float"
  "caml_copysign" [@@unboxed] [@@noalloc]
external mod_float : float -> float -> float = "caml_fmod_float" "fmod"
  [@@unboxed] [@@noalloc]
external frexp : float -> float * int = "caml_frexp_float"
external ldexp :
  (float [@unboxed]) -> (int [@untagged]) -> (float [@unboxed])
  = "caml_ldexp_float" "caml_ldexp_float_unboxed" [@@noalloc]
external modf : float -> float * float = "caml_modf_float"
external float : int -> float = "%floatofint"
external float_of_int : int -> float = "%floatofint"
external truncate : float -> int = "%intoffloat"
external int_of_float : float -> int = "%intoffloat"
val infinity : float
val neg_infinity : float
val nan : float
val max_float : float
val min_float : float
val epsilon_float : float
type nonrec fpclass =
  fpclass =
    FP_normal
  | FP_subnormal
  | FP_zero
  | FP_infinite
  | FP_nan
external classify_float : (float [@unboxed]) -> fpclass
  = "caml_classify_float" "caml_classify_float_unboxed" [@@noalloc]
external int_of_char : char -> int = "%identity"
val char_of_int : int -> char
val string_of_bool : bool -> string
val bool_of_string_opt : string -> bool option
val bool_of_string : string -> bool
val string_of_int : int -> string
val int_of_string_opt : string -> int option
external int_of_string : string -> int = "caml_int_of_string"
val string_of_float : float -> string
val float_of_string_opt : string -> float option
external float_of_string : string -> float = "caml_float_of_string"
type nonrec in_channel = in_channel
type nonrec out_channel = out_channel
val stdin : in_channel
val stdout : out_channel
val stderr : out_channel
val print_char : char -> unit
val print_string : string -> unit
val print_bytes : bytes -> unit
val print_int : int -> unit
val print_float : float -> unit
val print_endline : string -> unit
val print_newline : unit -> unit
val prerr_char : char -> unit
val prerr_string : string -> unit
val prerr_bytes : bytes -> unit
val prerr_int : int -> unit
val prerr_float : float -> unit
val prerr_endline : string -> unit
val prerr_newline : unit -> unit
val read_line : unit -> string
val read_int_opt : unit -> int option
val read_int : unit -> int
val read_float_opt : unit -> float option
val read_float : unit -> float
type nonrec open_flag =
  open_flag =
    Open_rdonly
  | Open_wronly
  | Open_append
  | Open_creat
  | Open_trunc
  | Open_excl
  | Open_binary
  | Open_text
  | Open_nonblock
val open_out : string -> out_channel
val open_out_bin : string -> out_channel
val open_out_gen : open_flag list -> int -> string -> out_channel
val flush : out_channel -> unit
val flush_all : unit -> unit
val output_char : out_channel -> char -> unit
val output_string : out_channel -> string -> unit
val output_bytes : out_channel -> bytes -> unit
val output : out_channel -> bytes -> int -> int -> unit
val output_substring : out_channel -> string -> int -> int -> unit
val output_byte : out_channel -> int -> unit
val output_binary_int : out_channel -> int -> unit
val output_value : out_channel -> 'a -> unit
val seek_out : out_channel -> int -> unit
val pos_out : out_channel -> int
val out_channel_length : out_channel -> int
val close_out : out_channel -> unit
val close_out_noerr : out_channel -> unit
val set_binary_mode_out : out_channel -> bool -> unit
val open_in : string -> in_channel
val open_in_bin : string -> in_channel
val open_in_gen : open_flag list -> int -> string -> in_channel
val input_char : in_channel -> char
val input_line : in_channel -> string
val input : in_channel -> bytes -> int -> int -> int
val really_input : in_channel -> bytes -> int -> int -> unit
val really_input_string : in_channel -> int -> string
val input_byte : in_channel -> int
val input_binary_int : in_channel -> int
val input_value : in_channel -> 'a
val seek_in : in_channel -> int -> unit
val pos_in : in_channel -> int
val in_channel_length : in_channel -> int
val close_in : in_channel -> unit
val close_in_noerr : in_channel -> unit
val set_binary_mode_in : in_channel -> bool -> unit
module LargeFile = LargeFile
external incr : int ref -> unit = "%incr"
external decr : int ref -> unit = "%decr"
type nonrec ('a, 'b) result = ('a, 'b) result = Ok of 'a | Error of 'b
val string_of_format : ('a, 'b, 'c, 'd, 'e, 'f) format6 -> string
external format_of_string :
  ('a, 'b, 'c, 'd, 'e, 'f) format6 -> ('a, 'b, 'c, 'd, 'e, 'f) format6
  = "%identity"
val exit : int -> 'a
val at_exit : (unit -> unit) -> unit
val valid_float_lexem : string -> string
val unsafe_really_input : in_channel -> bytes -> int -> int -> unit
val do_at_exit : unit -> unit
val do_domain_local_at_exit : (unit -> unit) ref
module Arg = Arg
module ArrayLabels = ArrayLabels
module BytesLabels = BytesLabels
module Callback = Callback
module Complex = Complex
module Condition = Condition
module Digest = Digest
module Domain = Domain
module Effect = Effect
module Ephemeron = Ephemeron
module Filename = Filename
module Format = Format
module Fun = Fun
module Gc = Gc
module ListLabels = ListLabels
module Marshal = Marshal
module MoreLabels = MoreLabels
module Mutex = Mutex
module Obj = Obj
module Oo = Oo
module Parsing = Parsing
module Printexc = Printexc
module Scanf = Scanf
module Semaphore = Semaphore
module Seq = Seq
module StdLabels = StdLabels
module StringLabels = StringLabels
module Type = Type
module Weak = Weak
module Applicative = Base__.Applicative
module Array = Base__.Array
module Avltree = Base__.Avltree
module Backtrace = Base__.Backtrace
module Binary_search = Base__.Binary_search
module Binary_searchable = Base__.Binary_searchable
module Blit = Base__.Blit
module Bool = Base__.Bool
module Buffer = Base__.Buffer
module Bytes = Base__.Bytes
module Char = Base__.Char
module Comparable = Base__.Comparable
module Comparator = Base__.Comparator
module Comparisons = Base__.Comparisons
module Container = Base__.Container
module Either = Base__.Either
module Equal = Base__.Equal
module Error = Base__.Error
module Exn = Base__.Exn
module Field = Base__.Field
module Float = Base__.Float
module Floatable = Base__.Floatable
module Fn = Base__.Fn
module Formatter = Base__.Formatter
module Hash = Base__.Hash
module Hash_set = Base__.Hash_set
module Hashable = Base__.Hashable
module Hasher = Base__.Hasher
module Hashtbl = Base__.Hashtbl
module Identifiable = Base__.Identifiable
module Indexed_container = Base__.Indexed_container
module Info = Base__.Info
module Int = Base__.Int
module Int_conversions = Base__.Int_conversions
module Int32 = Base__.Int32
module Int63 = Base__.Int63
module Int64 = Base__.Int64
module Intable = Base__.Intable
module Int_math = Base__.Int_math
module Invariant = Base__.Invariant
module Lazy = Base__.Lazy
module List = Base__.List
module Map = Base__.Map
module Maybe_bound = Base__.Maybe_bound
module Monad = Base__.Monad
module Nativeint = Base__.Nativeint
module Nothing = Base__.Nothing
module Option = Base__.Option
module Option_array = Base__.Option_array
module Or_error = Base__.Or_error
module Ordered_collection_common = Base__.Ordered_collection_common
module Ordering = Base__.Ordering
module Poly = Base__.Import.Poly
module Popcount = Base__.Popcount
module Pretty_printer = Base__.Pretty_printer
module Printf = Base__.Printf
module Linked_queue = Base__.Linked_queue
module Queue = Base__.Queue
module Random = Base__.Random
module Ref = Base__.Ref
module Result = Base__.Result
module Sequence = Base__.Sequence
module Set = Base__.Set
module Sexpable = Base__.Sexpable
module Sign = Base__.Sign
module Sign_or_nan = Base__.Sign_or_nan
module Source_code_position = Base__.Source_code_position
module Stack = Base__.Stack
module Staged = Base__.Staged
module String = Base__.String
module Stringable = Base__.Stringable
module Sys = Base__.Sys
module T = Base__.T
module Type_equal = Base__.Type_equal
module Uniform_array = Base__.Uniform_array
module Unit = Base__.Unit
module Uchar = Base__.Uchar
module Variant = Base__.Variant
module With_return = Base__.With_return
module Word_size = Base__.Word_size
module type T = Base.T
module type T1 = Base.T1
module type T2 = Base.T2
module type T3 = Base.T3
module Sexp = Base.Sexp
module Exported_for_specific_uses = Base.Exported_for_specific_uses
module Export = Base.Export
type 'a array = 'a Array.t
val compare_array : ('a -> 'a -> int) -> 'a array -> 'a array -> int
val equal_array : ('a -> 'a -> bool) -> 'a array -> 'a array -> bool
val globalize_array : ('a -> 'a) -> 'a array -> 'a array
val array_of_sexp : (Sexplib0.Sexp.t -> 'a) -> Sexplib0.Sexp.t -> 'a array
val sexp_of_array : ('a -> Sexplib0.Sexp.t) -> 'a array -> Sexplib0.Sexp.t
val array_sexp_grammar :
  'a Sexplib0.Sexp_grammar.t -> 'a array Sexplib0.Sexp_grammar.t
type bool = Bool.t
val compare_bool : bool -> bool -> int
val equal_bool : bool -> bool -> bool
val globalize_bool : bool -> bool
val hash_fold_bool :
  Base__.Ppx_hash_lib.Std.Hash.state ->
  bool -> Base__.Ppx_hash_lib.Std.Hash.state
val hash_bool : bool -> Base__.Ppx_hash_lib.Std.Hash.hash_value
val bool_of_sexp : Sexplib0.Sexp.t -> bool
val sexp_of_bool : bool -> Sexplib0.Sexp.t
val bool_sexp_grammar : bool Sexplib0.Sexp_grammar.t
type char = Char.t
val compare_char : char -> char -> int
val equal_char : char -> char -> bool
val globalize_char : char -> char
val hash_fold_char :
  Base__.Ppx_hash_lib.Std.Hash.state ->
  char -> Base__.Ppx_hash_lib.Std.Hash.state
val hash_char : char -> Base__.Ppx_hash_lib.Std.Hash.hash_value
val char_of_sexp : Sexplib0.Sexp.t -> char
val sexp_of_char : char -> Sexplib0.Sexp.t
val char_sexp_grammar : char Sexplib0.Sexp_grammar.t
type exn = Exn.t
val sexp_of_exn : exn -> Sexplib0.Sexp.t
type float = Float.t
val compare_float : float -> float -> int
val equal_float : float -> float -> bool
val globalize_float : float -> float
val hash_fold_float :
  Base__.Ppx_hash_lib.Std.Hash.state ->
  float -> Base__.Ppx_hash_lib.Std.Hash.state
val hash_float : float -> Base__.Ppx_hash_lib.Std.Hash.hash_value
val float_of_sexp : Sexplib0.Sexp.t -> float
val sexp_of_float : float -> Sexplib0.Sexp.t
val float_sexp_grammar : float Sexplib0.Sexp_grammar.t
type int = Int.t
val compare_int : int -> int -> int
val equal_int : int -> int -> bool
val globalize_int : int -> int
val hash_fold_int :
  Base__.Ppx_hash_lib.Std.Hash.state ->
  int -> Base__.Ppx_hash_lib.Std.Hash.state
val hash_int : int -> Base__.Ppx_hash_lib.Std.Hash.hash_value
val int_of_sexp : Sexplib0.Sexp.t -> int
val sexp_of_int : int -> Sexplib0.Sexp.t
val int_sexp_grammar : int Sexplib0.Sexp_grammar.t
type int32 = Int32.t
val compare_int32 : int32 -> int32 -> int
val equal_int32 : int32 -> int32 -> bool
val globalize_int32 : int32 -> int32
val hash_fold_int32 :
  Base__.Ppx_hash_lib.Std.Hash.state ->
  int32 -> Base__.Ppx_hash_lib.Std.Hash.state
val hash_int32 : int32 -> Base__.Ppx_hash_lib.Std.Hash.hash_value
val int32_of_sexp : Sexplib0.Sexp.t -> int32
val sexp_of_int32 : int32 -> Sexplib0.Sexp.t
val int32_sexp_grammar : int32 Sexplib0.Sexp_grammar.t
type int64 = Int64.t
val compare_int64 : int64 -> int64 -> int
val equal_int64 : int64 -> int64 -> bool
val globalize_int64 : int64 -> int64
val hash_fold_int64 :
  Base__.Ppx_hash_lib.Std.Hash.state ->
  int64 -> Base__.Ppx_hash_lib.Std.Hash.state
val hash_int64 : int64 -> Base__.Ppx_hash_lib.Std.Hash.hash_value
val int64_of_sexp : Sexplib0.Sexp.t -> int64
val sexp_of_int64 : int64 -> Sexplib0.Sexp.t
val int64_sexp_grammar : int64 Sexplib0.Sexp_grammar.t
type 'a list = 'a List.t
val compare_list : ('a -> 'a -> int) -> 'a list -> 'a list -> int
val equal_list : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool
val globalize_list : ('a -> 'a) -> 'a list -> 'a list
val hash_fold_list :
  (Base__.Ppx_hash_lib.Std.Hash.state ->
   'a -> Base__.Ppx_hash_lib.Std.Hash.state) ->
  Base__.Ppx_hash_lib.Std.Hash.state ->
  'a list -> Base__.Ppx_hash_lib.Std.Hash.state
val list_of_sexp : (Sexplib0.Sexp.t -> 'a) -> Sexplib0.Sexp.t -> 'a list
val sexp_of_list : ('a -> Sexplib0.Sexp.t) -> 'a list -> Sexplib0.Sexp.t
val list_sexp_grammar :
  'a Sexplib0.Sexp_grammar.t -> 'a list Sexplib0.Sexp_grammar.t
type nativeint = Nativeint.t
val compare_nativeint : nativeint -> nativeint -> int
val equal_nativeint : nativeint -> nativeint -> bool
val globalize_nativeint : nativeint -> nativeint
val hash_fold_nativeint :
  Base__.Ppx_hash_lib.Std.Hash.state ->
  nativeint -> Base__.Ppx_hash_lib.Std.Hash.state
val hash_nativeint : nativeint -> Base__.Ppx_hash_lib.Std.Hash.hash_value
val nativeint_of_sexp : Sexplib0.Sexp.t -> nativeint
val sexp_of_nativeint : nativeint -> Sexplib0.Sexp.t
val nativeint_sexp_grammar : nativeint Sexplib0.Sexp_grammar.t
type 'a option = 'a Option.t
val compare_option : ('a -> 'a -> int) -> 'a option -> 'a option -> int
val equal_option : ('a -> 'a -> bool) -> 'a option -> 'a option -> bool
val globalize_option : ('a -> 'a) -> 'a option -> 'a option
val hash_fold_option :
  (Base__.Ppx_hash_lib.Std.Hash.state ->
   'a -> Base__.Ppx_hash_lib.Std.Hash.state) ->
  Base__.Ppx_hash_lib.Std.Hash.state ->
  'a option -> Base__.Ppx_hash_lib.Std.Hash.state
val option_of_sexp : (Sexplib0.Sexp.t -> 'a) -> Sexplib0.Sexp.t -> 'a option
val sexp_of_option : ('a -> Sexplib0.Sexp.t) -> 'a option -> Sexplib0.Sexp.t
val option_sexp_grammar :
  'a Sexplib0.Sexp_grammar.t -> 'a option Sexplib0.Sexp_grammar.t
type 'a ref = 'a Ref.t
val compare_ref : ('a -> 'a -> int) -> 'a ref -> 'a ref -> int
val equal_ref : ('a -> 'a -> bool) -> 'a ref -> 'a ref -> bool
val globalize_ref : ('a -> 'a) -> 'a ref -> 'a ref
val ref_of_sexp : (Sexplib0.Sexp.t -> 'a) -> Sexplib0.Sexp.t -> 'a ref
val sexp_of_ref : ('a -> Sexplib0.Sexp.t) -> 'a ref -> Sexplib0.Sexp.t
val ref_sexp_grammar :
  'a Sexplib0.Sexp_grammar.t -> 'a ref Sexplib0.Sexp_grammar.t
type string = String.t
val compare_string : string -> string -> int
val equal_string : string -> string -> bool
val globalize_string : string -> string
val hash_fold_string :
  Base__.Ppx_hash_lib.Std.Hash.state ->
  string -> Base__.Ppx_hash_lib.Std.Hash.state
val hash_string : string -> Base__.Ppx_hash_lib.Std.Hash.hash_value
val string_of_sexp : Sexplib0.Sexp.t -> string
val sexp_of_string : string -> Sexplib0.Sexp.t
val string_sexp_grammar : string Sexplib0.Sexp_grammar.t
type bytes = Bytes.t
val compare_bytes : bytes -> bytes -> int
val equal_bytes : bytes -> bytes -> bool
val globalize_bytes : bytes -> bytes
val bytes_of_sexp : Sexplib0.Sexp.t -> bytes
val sexp_of_bytes : bytes -> Sexplib0.Sexp.t
val bytes_sexp_grammar : bytes Sexplib0.Sexp_grammar.t
type unit = Unit.t
val compare_unit : unit -> unit -> int
val equal_unit : unit -> unit -> bool
val globalize_unit : unit -> unit
val hash_fold_unit :
  Base__.Ppx_hash_lib.Std.Hash.state ->
  unit -> Base__.Ppx_hash_lib.Std.Hash.state
val hash_unit : unit -> Base__.Ppx_hash_lib.Std.Hash.hash_value
val unit_of_sexp : Sexplib0.Sexp.t -> unit
val sexp_of_unit : unit -> Sexplib0.Sexp.t
val unit_sexp_grammar : unit Sexplib0.Sexp_grammar.t
type nonrec ('a, 'b, 'c) format = ('a, 'b, 'c) format
type nonrec ('a, 'b, 'c, 'd) format4 = ('a, 'b, 'c, 'd) format4
type nonrec ('a, 'b, 'c, 'd, 'e, 'f) format6 =
    ('a, 'b, 'c, 'd, 'e, 'f) format6
val ( @ ) : 'a Base__List.t -> 'a Base__List.t -> 'a Base__List.t
external ( + ) : Base__Int.t -> Base__Int.t -> Base__Int.t = "%addint"
external ( - ) : Base__Int.t -> Base__Int.t -> Base__Int.t = "%subint"
external ( * ) : Base__Int.t -> Base__Int.t -> Base__Int.t = "%mulint"
external ( / ) : Base__Int.t -> Base__Int.t -> Base__Int.t = "%divint"
external ( ~- ) : Base__Int.t -> Base__Int.t = "%negint"
val ( ** ) : Base__Int.t -> Base__Int.t -> Base__Int.t
external ( land ) : Base__Int.t -> Base__Int.t -> Base__Int.t = "%andint"
external ( lor ) : Base__Int.t -> Base__Int.t -> Base__Int.t = "%orint"
external ( lxor ) : Base__Int.t -> Base__Int.t -> Base__Int.t = "%xorint"
val lnot : Base__Int.t -> Base__Int.t
val abs : Base__Int.t -> Base__Int.t
external neg : Base__Int.t -> Base__Int.t = "%negint"
val zero : Base__Int.t
val ( % ) : Base__Int.t -> Base__Int.t -> Base__Int.t
val ( /% ) : Base__Int.t -> Base__Int.t -> Base__Int.t
val ( // ) : Base__Int.t -> Base__Int.t -> float
external ( lsl ) : Base__Int.t -> int -> Base__Int.t = "%lslint"
external ( asr ) : Base__Int.t -> int -> Base__Int.t = "%asrint"
external ( lsr ) : Base__Int.t -> int -> Base__Int.t = "%lsrint"
external ( = ) : int -> int -> bool = "%equal"
external ( <> ) : int -> int -> bool = "%notequal"
external ( < ) : int -> int -> bool = "%lessthan"
external ( > ) : int -> int -> bool = "%greaterthan"
external ( <= ) : int -> int -> bool = "%lessequal"
external ( >= ) : int -> int -> bool = "%greaterequal"
external compare : int -> int -> int = "%compare"
external equal : int -> int -> bool = "%equal"
val ascending : int -> int -> int
val descending : int -> int -> int
val max : int -> int -> int
val min : int -> int -> int
val ( +. ) : Base__Float.t -> Base__Float.t -> Base__Float.t
val ( -. ) : Base__Float.t -> Base__Float.t -> Base__Float.t
val ( *. ) : Base__Float.t -> Base__Float.t -> Base__Float.t
val ( /. ) : Base__Float.t -> Base__Float.t -> Base__Float.t
val ( %. ) : Base__Float.t -> Base__Float.t -> Base__Float.t
val ( **. ) : Base__Float.t -> Base__Float.t -> Base__Float.t
val ( ~-. ) : Base__Float.t -> Base__Float.t
external ( |> ) : 'a -> ('a -> 'b) -> 'b = "%revapply"
external ( @@ ) : ('a -> 'b) -> 'a -> 'b = "%apply"
external ( && ) : bool -> bool -> bool = "%sequand"
external ( || ) : bool -> bool -> bool = "%sequor"
external not : bool -> bool = "%boolnot"
external ignore : 'a -> unit = "%ignore"
val ( ^ ) : String.t -> String.t -> String.t
external ( ! ) : 'a ref -> 'a = "%field0"
external ref : 'a -> 'a ref = "%makemutable"
external ( := ) : 'a ref -> 'a -> unit = "%setfield0"
val fst : 'a * 'b -> 'a
val snd : 'a * 'b -> 'b
external raise : exn -> 'a = "%raise"
val failwith : string -> 'a
val invalid_arg : string -> 'a
val raise_s : Base__.Sexp.t -> 'a
external phys_equal : 'a -> 'a -> bool = "%eq"
external force : 'a Lazy.t -> 'a = "%lazy_force"
module Continue_or_stop = Base__Container_intf.Export.Continue_or_stop
exception Not_found_s of Sexplib0.Sexp.t
module Ast_builder = Ppxlib__.Ast_builder
module Ast_pattern = Ppxlib__.Ast_pattern
module Ast_traverse = Ppxlib__.Ast_traverse
module Context_free = Ppxlib__.Context_free
module Deriving = Ppxlib__.Deriving
module Extension = Ppxlib__.Extension
module Expansion_context = Ppxlib__.Expansion_context
module Code_path = Ppxlib__.Code_path
module Expansion_helpers = Ppxlib__.Expansion_helpers
module Merlin_helpers = Ppxlib__.Merlin_helpers
module Spellcheck = Ppxlib__.Spellcheck
module Keyword = Ppxlib__.Keyword
module Driver = Ppxlib__.Driver
module Caller_id = Ppxlib__.Caller_id
module Ast_io = Ppxlib__.Utils.Ast_io.Read_bin
module Attribute = Ppxlib__.Attribute
module Reserved_namespaces = Ppxlib__.Name.Reserved_namespaces
val lident : string -> Ppxlib__.Longident.t
val core_type_of_type_declaration :
  Ppxlib__.Import.type_declaration -> Ppxlib__.Import.core_type
val name_type_params_in_td_res :
  Ppxlib__.Import.type_declaration ->
  (Ppxlib__.Import.type_declaration,
   Ppxlib__.Location.Error.t Ppxlib__.Import.NonEmptyList.t)
  Stdlib.result
val name_type_params_in_td :
  Ppxlib__.Import.type_declaration -> Ppxlib__.Import.type_declaration
val combinator_type_of_type_declaration :
  Ppxlib__.Import.type_declaration ->
  f:(loc:Ppxlib__.Location.t ->
     Ppxlib__.Import.core_type -> Ppxlib__.Import.core_type) ->
  Ppxlib__.Import.core_type
val gen_symbol : ?prefix:string -> unit -> string
val string_of_core_type : Ppxlib__.Import.core_type -> string
val assert_no_attributes : Ppxlib__.Import.attributes -> unit
val assert_no_attributes_in : Ppxlib__.Ast_traverse0.iter
val attributes_errors :
  Ppxlib__.Import.attributes -> Ppxlib__.Location.Error.t list
val collect_attributes_errors :
  Ppxlib__.Location.Error.t list Ppxlib__.Ast_traverse0.fold
val get_type_param_name_res :
  Ppxlib__.Import.core_type *
  (Ppxlib__.Import.variance * Ppxlib__.Import.injectivity) ->
  (string Ppxlib__.Loc.t,
   Ppxlib__.Location.Error.t Ppxlib__.Import.NonEmptyList.t)
  Stdlib.result
val get_type_param_name :
  Ppxlib__.Import.core_type *
  (Ppxlib__.Import.variance * Ppxlib__.Import.injectivity) ->
  string Ppxlib__.Loc.t
class type_is_recursive :
  Ppxlib__.Import.rec_flag ->
  Ppxlib__.Import.type_declaration list ->
  object
    val type_names : string list
    method arg_label : Ppxlib__.Import.Ast.arg_label -> unit
    method array :
      'a Ppxlib_traverse_builtins.T.iter ->
      'a array Ppxlib_traverse_builtins.T.iter
    method attribute : Ppxlib__.Import.Ast.attribute -> unit
    method attributes : Ppxlib__.Import.Ast.attributes -> unit
    method binding_op : Ppxlib__.Import.Ast.binding_op -> unit
    method bool : bool Ppxlib_traverse_builtins.T.iter
    method case : Ppxlib__.Import.Ast.case -> unit
    method cases : Ppxlib__.Import.Ast.cases -> unit
    method char : char Ppxlib_traverse_builtins.T.iter
    method class_declaration : Ppxlib__.Import.Ast.class_declaration -> unit
    method class_description : Ppxlib__.Import.Ast.class_description -> unit
    method class_expr : Ppxlib__.Import.Ast.class_expr -> unit
    method class_expr_desc : Ppxlib__.Import.Ast.class_expr_desc -> unit
    method class_field : Ppxlib__.Import.Ast.class_field -> unit
    method class_field_desc : Ppxlib__.Import.Ast.class_field_desc -> unit
    method class_field_kind : Ppxlib__.Import.Ast.class_field_kind -> unit
    method class_infos :
      ('a -> unit) -> 'a Ppxlib__.Import.Ast.class_infos -> unit
    method class_signature : Ppxlib__.Import.Ast.class_signature -> unit
    method class_structure : Ppxlib__.Import.Ast.class_structure -> unit
    method class_type : Ppxlib__.Import.Ast.class_type -> unit
    method class_type_declaration :
      Ppxlib__.Import.Ast.class_type_declaration -> unit
    method class_type_desc : Ppxlib__.Import.Ast.class_type_desc -> unit
    method class_type_field : Ppxlib__.Import.Ast.class_type_field -> unit
    method class_type_field_desc :
      Ppxlib__.Import.Ast.class_type_field_desc -> unit
    method closed_flag : Ppxlib__.Import.Ast.closed_flag -> unit
    method constant : Ppxlib__.Import.Ast.constant -> unit
    method constructor_arguments :
      Ppxlib__.Import.Ast.constructor_arguments -> unit
    method constructor_declaration :
      Ppxlib__.Import.Ast.constructor_declaration -> unit
    method core_type : Ppxlib__.Import.Ast.core_type -> unit
    method core_type_desc : Ppxlib__.Import.Ast.core_type_desc -> unit
    method direction_flag : Ppxlib__.Import.Ast.direction_flag -> unit
    method directive_argument :
      Ppxlib__.Import.Ast.directive_argument -> unit
    method directive_argument_desc :
      Ppxlib__.Import.Ast.directive_argument_desc -> unit
    method expression : Ppxlib__.Import.Ast.expression -> unit
    method expression_desc : Ppxlib__.Import.Ast.expression_desc -> unit
    method extension : Ppxlib__.Import.Ast.extension -> unit
    method extension_constructor :
      Ppxlib__.Import.Ast.extension_constructor -> unit
    method extension_constructor_kind :
      Ppxlib__.Import.Ast.extension_constructor_kind -> unit
    method functor_parameter : Ppxlib__.Import.Ast.functor_parameter -> unit
    method go : unit -> Ppxlib__.Import.rec_flag
    method include_declaration :
      Ppxlib__.Import.Ast.include_declaration -> unit
    method include_description :
      Ppxlib__.Import.Ast.include_description -> unit
    method include_infos :
      ('a -> unit) -> 'a Ppxlib__.Import.Ast.include_infos -> unit
    method injectivity : Ppxlib__.Import.Ast.injectivity -> unit
    method int : int Ppxlib_traverse_builtins.T.iter
    method label : Ppxlib__.Import.Ast.label -> unit
    method label_declaration : Ppxlib__.Import.Ast.label_declaration -> unit
    method letop : Ppxlib__.Import.Ast.letop -> unit
    method list :
      'a Ppxlib_traverse_builtins.T.iter ->
      'a list Ppxlib_traverse_builtins.T.iter
    method loc : ('a -> unit) -> 'a Ppxlib__.Import.Ast.loc -> unit
    method location : Ppxlib__.Import.Ast.location -> unit
    method location_stack : Ppxlib__.Import.Ast.location_stack -> unit
    method longident : Ppxlib__.Import.Ast.longident -> unit
    method longident_loc : Ppxlib__.Import.Ast.longident_loc -> unit
    method module_binding : Ppxlib__.Import.Ast.module_binding -> unit
    method module_declaration :
      Ppxlib__.Import.Ast.module_declaration -> unit
    method module_expr : Ppxlib__.Import.Ast.module_expr -> unit
    method module_expr_desc : Ppxlib__.Import.Ast.module_expr_desc -> unit
    method module_substitution :
      Ppxlib__.Import.Ast.module_substitution -> unit
    method module_type : Ppxlib__.Import.Ast.module_type -> unit
    method module_type_declaration :
      Ppxlib__.Import.Ast.module_type_declaration -> unit
    method module_type_desc : Ppxlib__.Import.Ast.module_type_desc -> unit
    method mutable_flag : Ppxlib__.Import.Ast.mutable_flag -> unit
    method object_field : Ppxlib__.Import.Ast.object_field -> unit
    method object_field_desc : Ppxlib__.Import.Ast.object_field_desc -> unit
    method open_declaration : Ppxlib__.Import.Ast.open_declaration -> unit
    method open_description : Ppxlib__.Import.Ast.open_description -> unit
    method open_infos :
      ('a -> unit) -> 'a Ppxlib__.Import.Ast.open_infos -> unit
    method option :
      'a Ppxlib_traverse_builtins.T.iter ->
      'a option Ppxlib_traverse_builtins.T.iter
    method override_flag : Ppxlib__.Import.Ast.override_flag -> unit
    method package_type : Ppxlib__.Import.Ast.package_type -> unit
    method pattern : Ppxlib__.Import.Ast.pattern -> unit
    method pattern_desc : Ppxlib__.Import.Ast.pattern_desc -> unit
    method payload : Ppxlib__.Import.Ast.payload -> unit
    method position : Ppxlib__.Import.Ast.position -> unit
    method private_flag : Ppxlib__.Import.Ast.private_flag -> unit
    method rec_flag : Ppxlib__.Import.Ast.rec_flag -> unit
    method return_true : unit -> unit
    method row_field : Ppxlib__.Import.Ast.row_field -> unit
    method row_field_desc : Ppxlib__.Import.Ast.row_field_desc -> unit
    method signature : Ppxlib__.Import.Ast.signature -> unit
    method signature_item : Ppxlib__.Import.Ast.signature_item -> unit
    method signature_item_desc :
      Ppxlib__.Import.Ast.signature_item_desc -> unit
    method string : string Ppxlib_traverse_builtins.T.iter
    method structure : Ppxlib__.Import.Ast.structure -> unit
    method structure_item : Ppxlib__.Import.Ast.structure_item -> unit
    method structure_item_desc :
      Ppxlib__.Import.Ast.structure_item_desc -> unit
    method toplevel_directive :
      Ppxlib__.Import.Ast.toplevel_directive -> unit
    method toplevel_phrase : Ppxlib__.Import.Ast.toplevel_phrase -> unit
    method type_declaration : Ppxlib__.Import.Ast.type_declaration -> unit
    method type_exception : Ppxlib__.Import.Ast.type_exception -> unit
    method type_extension : Ppxlib__.Import.Ast.type_extension -> unit
    method type_kind : Ppxlib__.Import.Ast.type_kind -> unit
    method value_binding : Ppxlib__.Import.Ast.value_binding -> unit
    method value_description : Ppxlib__.Import.Ast.value_description -> unit
    method variance : Ppxlib__.Import.Ast.variance -> unit
    method virtual_flag : Ppxlib__.Import.Ast.virtual_flag -> unit
    method with_constraint : Ppxlib__.Import.Ast.with_constraint -> unit
  end
val really_recursive :
  Ppxlib__.Import.rec_flag ->
  Ppxlib__.Import.type_declaration list -> Ppxlib__.Import.rec_flag
val loc_of_payload : Ppxlib__.Import.attribute -> Ppxlib__.Location.t
val loc_of_attribute : Ppxlib__.Import.attribute -> Ppxlib__.Location.t
val loc_of_extension : Ppxlib__.Import.extension -> Ppxlib__.Location.t
val curry_applications :
  Ppxlib__.Import.expression -> Ppxlib__.Import.expression
val attribute_of_warning :
  Ppxlib__.Location.t -> string -> Ppxlib__.Import.attribute
val is_polymorphic_variant :
  Ppxlib__.Import.type_declaration ->
  sig_:bool -> [> `Definitely | `Maybe | `Surely_not ]
val mk_named_sig :
  loc:Ppxlib__.Location.t ->
  sg_name:string ->
  handle_polymorphic_variant:bool ->
  Ppxlib__.Import.type_declaration list ->
  Ppxlib__.Import.include_description option
module With_errors = Ppxlib__Common.With_errors
module Ast = Ppxlib_ast.Ast
module Ast_helper = Ppxlib_ast.Ast_helper
module Asttypes = Ppxlib_ast.Asttypes
module Parse = Ppxlib_ast.Parse
module Parsetree = Ppxlib_ast.Parsetree
module Pprintast = Ppxlib_ast.Pprintast
module Selected_ast = Ppxlib_ast.Selected_ast
module Location = Ppxlib__.Location
module Longident = Ppxlib__.Longident
module Loc = Ppxlib__.Loc
type position =
  Lexing.position = {
  pos_fname : string;
  pos_lnum : int;
  pos_bol : int;
  pos_cnum : int;
}
and location =
  Ppxlib_ast__.Import.Location.t = {
  loc_start : position;
  loc_end : position;
  loc_ghost : bool;
}
and location_stack = location list
and 'a loc =
  'a Ppxlib_ast__.Import.Location.loc = {
  txt : 'a;
  loc : location;
}
and longident =
  Ppxlib_ast__.Import.Longident.t =
    Lident of string
  | Ldot of longident * string
  | Lapply of longident * longident
and longident_loc = longident loc
and rec_flag =
  Ppxlib_ast__.Import.Asttypes.rec_flag =
    Nonrecursive
  | Recursive
and direction_flag =
  Ppxlib_ast__.Import.Asttypes.direction_flag =
    Upto
  | Downto
and private_flag =
  Ppxlib_ast__.Import.Asttypes.private_flag =
    Private
  | Public
and mutable_flag =
  Ppxlib_ast__.Import.Asttypes.mutable_flag =
    Immutable
  | Mutable
and virtual_flag =
  Ppxlib_ast__.Import.Asttypes.virtual_flag =
    Virtual
  | Concrete
and override_flag =
  Ppxlib_ast__.Import.Asttypes.override_flag =
    Override
  | Fresh
and closed_flag = Ppxlib_ast__.Import.Asttypes.closed_flag = Closed | Open
and label = string
and arg_label =
  Ppxlib_ast__.Import.Asttypes.arg_label =
    Nolabel
  | Labelled of string
  | Optional of string
and variance =
  Ppxlib_ast__.Import.Asttypes.variance =
    Covariant
  | Contravariant
  | NoVariance
and injectivity =
  Ppxlib_ast__.Import.Asttypes.injectivity =
    Injective
  | NoInjectivity
and constant =
  Ppxlib_ast__.Import.Parsetree.constant =
    Pconst_integer of string * char option
  | Pconst_char of char
  | Pconst_string of string * location * string option
  | Pconst_float of string * char option
and attribute =
  Ppxlib_ast__.Import.Parsetree.attribute = {
  attr_name : string loc;
  attr_payload : payload;
  attr_loc : location;
}
and extension = string loc * payload
and attributes = attribute list
and payload =
  Ppxlib_ast__.Import.Parsetree.payload =
    PStr of structure
  | PSig of signature
  | PTyp of core_type
  | PPat of pattern * expression option
and core_type =
  Ppxlib_ast__.Import.Parsetree.core_type = {
  ptyp_desc : core_type_desc;
  ptyp_loc : location;
  ptyp_loc_stack : location_stack;
  ptyp_attributes : attributes;
}
and core_type_desc =
  Ppxlib_ast__.Import.Parsetree.core_type_desc =
    Ptyp_any
  | Ptyp_var of string
  | Ptyp_arrow of arg_label * core_type * core_type
  | Ptyp_tuple of core_type list
  | Ptyp_constr of longident_loc * core_type list
  | Ptyp_object of object_field list * closed_flag
  | Ptyp_class of longident_loc * core_type list
  | Ptyp_alias of core_type * string
  | Ptyp_variant of row_field list * closed_flag * label list option
  | Ptyp_poly of string loc list * core_type
  | Ptyp_package of package_type
  | Ptyp_extension of extension
and package_type = longident_loc * (longident_loc * core_type) list
and row_field =
  Ppxlib_ast__.Import.Parsetree.row_field = {
  prf_desc : row_field_desc;
  prf_loc : location;
  prf_attributes : attributes;
}
and row_field_desc =
  Ppxlib_ast__.Import.Parsetree.row_field_desc =
    Rtag of label loc * bool * core_type list
  | Rinherit of core_type
and object_field =
  Ppxlib_ast__.Import.Parsetree.object_field = {
  pof_desc : object_field_desc;
  pof_loc : location;
  pof_attributes : attributes;
}
and object_field_desc =
  Ppxlib_ast__.Import.Parsetree.object_field_desc =
    Otag of label loc * core_type
  | Oinherit of core_type
and pattern =
  Ppxlib_ast__.Import.Parsetree.pattern = {
  ppat_desc : pattern_desc;
  ppat_loc : location;
  ppat_loc_stack : location_stack;
  ppat_attributes : attributes;
}
and pattern_desc =
  Ppxlib_ast__.Import.Parsetree.pattern_desc =
    Ppat_any
  | Ppat_var of string loc
  | Ppat_alias of pattern * string loc
  | Ppat_constant of constant
  | Ppat_interval of constant * constant
  | Ppat_tuple of pattern list
  | Ppat_construct of longident_loc * (string loc list * pattern) option
  | Ppat_variant of label * pattern option
  | Ppat_record of (longident_loc * pattern) list * closed_flag
  | Ppat_array of pattern list
  | Ppat_or of pattern * pattern
  | Ppat_constraint of pattern * core_type
  | Ppat_type of longident_loc
  | Ppat_lazy of pattern
  | Ppat_unpack of string option loc
  | Ppat_exception of pattern
  | Ppat_extension of extension
  | Ppat_open of longident_loc * pattern
and expression =
  Ppxlib_ast__.Import.Parsetree.expression = {
  pexp_desc : expression_desc;
  pexp_loc : location;
  pexp_loc_stack : location_stack;
  pexp_attributes : attributes;
}
and expression_desc =
  Ppxlib_ast__.Import.Parsetree.expression_desc =
    Pexp_ident of longident_loc
  | Pexp_constant of constant
  | Pexp_let of rec_flag * value_binding list * expression
  | Pexp_function of cases
  | Pexp_fun of arg_label * expression option * pattern * expression
  | Pexp_apply of expression * (arg_label * expression) list
  | Pexp_match of expression * cases
  | Pexp_try of expression * cases
  | Pexp_tuple of expression list
  | Pexp_construct of longident_loc * expression option
  | Pexp_variant of label * expression option
  | Pexp_record of (longident_loc * expression) list * expression option
  | Pexp_field of expression * longident_loc
  | Pexp_setfield of expression * longident_loc * expression
  | Pexp_array of expression list
  | Pexp_ifthenelse of expression * expression * expression option
  | Pexp_sequence of expression * expression
  | Pexp_while of expression * expression
  | Pexp_for of pattern * expression * expression * direction_flag *
      expression
  | Pexp_constraint of expression * core_type
  | Pexp_coerce of expression * core_type option * core_type
  | Pexp_send of expression * label loc
  | Pexp_new of longident_loc
  | Pexp_setinstvar of label loc * expression
  | Pexp_override of (label loc * expression) list
  | Pexp_letmodule of string option loc * module_expr * expression
  | Pexp_letexception of extension_constructor * expression
  | Pexp_assert of expression
  | Pexp_lazy of expression
  | Pexp_poly of expression * core_type option
  | Pexp_object of class_structure
  | Pexp_newtype of string loc * expression
  | Pexp_pack of module_expr
  | Pexp_open of open_declaration * expression
  | Pexp_letop of letop
  | Pexp_extension of extension
  | Pexp_unreachable
and case =
  Ppxlib_ast__.Import.Parsetree.case = {
  pc_lhs : pattern;
  pc_guard : expression option;
  pc_rhs : expression;
}
and letop =
  Ppxlib_ast__.Import.Parsetree.letop = {
  let_ : binding_op;
  ands : binding_op list;
  body : expression;
}
and binding_op =
  Ppxlib_ast__.Import.Parsetree.binding_op = {
  pbop_op : string loc;
  pbop_pat : pattern;
  pbop_exp : expression;
  pbop_loc : location;
}
and value_description =
  Ppxlib_ast__.Import.Parsetree.value_description = {
  pval_name : string loc;
  pval_type : core_type;
  pval_prim : string list;
  pval_attributes : attributes;
  pval_loc : location;
}
and type_declaration =
  Ppxlib_ast__.Import.Parsetree.type_declaration = {
  ptype_name : string loc;
  ptype_params : (core_type * (variance * injectivity)) list;
  ptype_cstrs : (core_type * core_type * location) list;
  ptype_kind : type_kind;
  ptype_private : private_flag;
  ptype_manifest : core_type option;
  ptype_attributes : attributes;
  ptype_loc : location;
}
and type_kind =
  Ppxlib_ast__.Import.Parsetree.type_kind =
    Ptype_abstract
  | Ptype_variant of constructor_declaration list
  | Ptype_record of label_declaration list
  | Ptype_open
and label_declaration =
  Ppxlib_ast__.Import.Parsetree.label_declaration = {
  pld_name : string loc;
  pld_mutable : mutable_flag;
  pld_type : core_type;
  pld_loc : location;
  pld_attributes : attributes;
}
and constructor_declaration =
  Ppxlib_ast__.Import.Parsetree.constructor_declaration = {
  pcd_name : string loc;
  pcd_vars : string loc list;
  pcd_args : constructor_arguments;
  pcd_res : core_type option;
  pcd_loc : location;
  pcd_attributes : attributes;
}
and constructor_arguments =
  Ppxlib_ast__.Import.Parsetree.constructor_arguments =
    Pcstr_tuple of core_type list
  | Pcstr_record of label_declaration list
and type_extension =
  Ppxlib_ast__.Import.Parsetree.type_extension = {
  ptyext_path : longident_loc;
  ptyext_params : (core_type * (variance * injectivity)) list;
  ptyext_constructors : extension_constructor list;
  ptyext_private : private_flag;
  ptyext_loc : location;
  ptyext_attributes : attributes;
}
and extension_constructor =
  Ppxlib_ast__.Import.Parsetree.extension_constructor = {
  pext_name : string loc;
  pext_kind : extension_constructor_kind;
  pext_loc : location;
  pext_attributes : attributes;
}
and type_exception =
  Ppxlib_ast__.Import.Parsetree.type_exception = {
  ptyexn_constructor : extension_constructor;
  ptyexn_loc : location;
  ptyexn_attributes : attributes;
}
and extension_constructor_kind =
  Ppxlib_ast__.Import.Parsetree.extension_constructor_kind =
    Pext_decl of string loc list * constructor_arguments * core_type option
  | Pext_rebind of longident_loc
and class_type =
  Ppxlib_ast__.Import.Parsetree.class_type = {
  pcty_desc : class_type_desc;
  pcty_loc : location;
  pcty_attributes : attributes;
}
and class_type_desc =
  Ppxlib_ast__.Import.Parsetree.class_type_desc =
    Pcty_constr of longident_loc * core_type list
  | Pcty_signature of class_signature
  | Pcty_arrow of arg_label * core_type * class_type
  | Pcty_extension of extension
  | Pcty_open of open_description * class_type
and class_signature =
  Ppxlib_ast__.Import.Parsetree.class_signature = {
  pcsig_self : core_type;
  pcsig_fields : class_type_field list;
}
and class_type_field =
  Ppxlib_ast__.Import.Parsetree.class_type_field = {
  pctf_desc : class_type_field_desc;
  pctf_loc : location;
  pctf_attributes : attributes;
}
and class_type_field_desc =
  Ppxlib_ast__.Import.Parsetree.class_type_field_desc =
    Pctf_inherit of class_type
  | Pctf_val of (label loc * mutable_flag * virtual_flag * core_type)
  | Pctf_method of (label loc * private_flag * virtual_flag * core_type)
  | Pctf_constraint of (core_type * core_type)
  | Pctf_attribute of attribute
  | Pctf_extension of extension
and 'a class_infos =
  'a Ppxlib_ast__.Import.Parsetree.class_infos = {
  pci_virt : virtual_flag;
  pci_params : (core_type * (variance * injectivity)) list;
  pci_name : string loc;
  pci_expr : 'a;
  pci_loc : location;
  pci_attributes : attributes;
}
and class_description = class_type class_infos
and class_type_declaration = class_type class_infos
and class_expr =
  Ppxlib_ast__.Import.Parsetree.class_expr = {
  pcl_desc : class_expr_desc;
  pcl_loc : location;
  pcl_attributes : attributes;
}
and class_expr_desc =
  Ppxlib_ast__.Import.Parsetree.class_expr_desc =
    Pcl_constr of longident_loc * core_type list
  | Pcl_structure of class_structure
  | Pcl_fun of arg_label * expression option * pattern * class_expr
  | Pcl_apply of class_expr * (arg_label * expression) list
  | Pcl_let of rec_flag * value_binding list * class_expr
  | Pcl_constraint of class_expr * class_type
  | Pcl_extension of extension
  | Pcl_open of open_description * class_expr
and class_structure =
  Ppxlib_ast__.Import.Parsetree.class_structure = {
  pcstr_self : pattern;
  pcstr_fields : class_field list;
}
and class_field =
  Ppxlib_ast__.Import.Parsetree.class_field = {
  pcf_desc : class_field_desc;
  pcf_loc : location;
  pcf_attributes : attributes;
}
and class_field_desc =
  Ppxlib_ast__.Import.Parsetree.class_field_desc =
    Pcf_inherit of override_flag * class_expr * string loc option
  | Pcf_val of (label loc * mutable_flag * class_field_kind)
  | Pcf_method of (label loc * private_flag * class_field_kind)
  | Pcf_constraint of (core_type * core_type)
  | Pcf_initializer of expression
  | Pcf_attribute of attribute
  | Pcf_extension of extension
and class_field_kind =
  Ppxlib_ast__.Import.Parsetree.class_field_kind =
    Cfk_virtual of core_type
  | Cfk_concrete of override_flag * expression
and class_declaration = class_expr class_infos
and module_type =
  Ppxlib_ast__.Import.Parsetree.module_type = {
  pmty_desc : module_type_desc;
  pmty_loc : location;
  pmty_attributes : attributes;
}
and module_type_desc =
  Ppxlib_ast__.Import.Parsetree.module_type_desc =
    Pmty_ident of longident_loc
  | Pmty_signature of signature
  | Pmty_functor of functor_parameter * module_type
  | Pmty_with of module_type * with_constraint list
  | Pmty_typeof of module_expr
  | Pmty_extension of extension
  | Pmty_alias of longident_loc
and functor_parameter =
  Ppxlib_ast__.Import.Parsetree.functor_parameter =
    Unit
  | Named of string option loc * module_type
and signature = signature_item list
and signature_item =
  Ppxlib_ast__.Import.Parsetree.signature_item = {
  psig_desc : signature_item_desc;
  psig_loc : location;
}
and signature_item_desc =
  Ppxlib_ast__.Import.Parsetree.signature_item_desc =
    Psig_value of value_description
  | Psig_type of rec_flag * type_declaration list
  | Psig_typesubst of type_declaration list
  | Psig_typext of type_extension
  | Psig_exception of type_exception
  | Psig_module of module_declaration
  | Psig_modsubst of module_substitution
  | Psig_recmodule of module_declaration list
  | Psig_modtype of module_type_declaration
  | Psig_modtypesubst of module_type_declaration
  | Psig_open of open_description
  | Psig_include of include_description
  | Psig_class of class_description list
  | Psig_class_type of class_type_declaration list
  | Psig_attribute of attribute
  | Psig_extension of extension * attributes
and module_declaration =
  Ppxlib_ast__.Import.Parsetree.module_declaration = {
  pmd_name : string option loc;
  pmd_type : module_type;
  pmd_attributes : attributes;
  pmd_loc : location;
}
and module_substitution =
  Ppxlib_ast__.Import.Parsetree.module_substitution = {
  pms_name : string loc;
  pms_manifest : longident_loc;
  pms_attributes : attributes;
  pms_loc : location;
}
and module_type_declaration =
  Ppxlib_ast__.Import.Parsetree.module_type_declaration = {
  pmtd_name : string loc;
  pmtd_type : module_type option;
  pmtd_attributes : attributes;
  pmtd_loc : location;
}
and 'a open_infos =
  'a Ppxlib_ast__.Import.Parsetree.open_infos = {
  popen_expr : 'a;
  popen_override : override_flag;
  popen_loc : location;
  popen_attributes : attributes;
}
and open_description = longident_loc open_infos
and open_declaration = module_expr open_infos
and 'a include_infos =
  'a Ppxlib_ast__.Import.Parsetree.include_infos = {
  pincl_mod : 'a;
  pincl_loc : location;
  pincl_attributes : attributes;
}
and include_description = module_type include_infos
and include_declaration = module_expr include_infos
and with_constraint =
  Ppxlib_ast__.Import.Parsetree.with_constraint =
    Pwith_type of longident_loc * type_declaration
  | Pwith_module of longident_loc * longident_loc
  | Pwith_modtype of longident_loc * module_type
  | Pwith_modtypesubst of longident_loc * module_type
  | Pwith_typesubst of longident_loc * type_declaration
  | Pwith_modsubst of longident_loc * longident_loc
and module_expr =
  Ppxlib_ast__.Import.Parsetree.module_expr = {
  pmod_desc : module_expr_desc;
  pmod_loc : location;
  pmod_attributes : attributes;
}
and module_expr_desc =
  Ppxlib_ast__.Import.Parsetree.module_expr_desc =
    Pmod_ident of longident_loc
  | Pmod_structure of structure
  | Pmod_functor of functor_parameter * module_expr
  | Pmod_apply of module_expr * module_expr
  | Pmod_constraint of module_expr * module_type
  | Pmod_unpack of expression
  | Pmod_extension of extension
and structure = structure_item list
and structure_item =
  Ppxlib_ast__.Import.Parsetree.structure_item = {
  pstr_desc : structure_item_desc;
  pstr_loc : location;
}
and structure_item_desc =
  Ppxlib_ast__.Import.Parsetree.structure_item_desc =
    Pstr_eval of expression * attributes
  | Pstr_value of rec_flag * value_binding list
  | Pstr_primitive of value_description
  | Pstr_type of rec_flag * type_declaration list
  | Pstr_typext of type_extension
  | Pstr_exception of type_exception
  | Pstr_module of module_binding
  | Pstr_recmodule of module_binding list
  | Pstr_modtype of module_type_declaration
  | Pstr_open of open_declaration
  | Pstr_class of class_declaration list
  | Pstr_class_type of class_type_declaration list
  | Pstr_include of include_declaration
  | Pstr_attribute of attribute
  | Pstr_extension of extension * attributes
and value_binding =
  Ppxlib_ast__.Import.Parsetree.value_binding = {
  pvb_pat : pattern;
  pvb_expr : expression;
  pvb_attributes : attributes;
  pvb_loc : location;
}
and module_binding =
  Ppxlib_ast__.Import.Parsetree.module_binding = {
  pmb_name : string option loc;
  pmb_expr : module_expr;
  pmb_attributes : attributes;
  pmb_loc : location;
}
and toplevel_phrase =
  Ppxlib_ast__.Import.Parsetree.toplevel_phrase =
    Ptop_def of structure
  | Ptop_dir of toplevel_directive
and toplevel_directive =
  Ppxlib_ast__.Import.Parsetree.toplevel_directive = {
  pdir_name : string loc;
  pdir_arg : directive_argument option;
  pdir_loc : location;
}
and directive_argument =
  Ppxlib_ast__.Import.Parsetree.directive_argument = {
  pdira_desc : directive_argument_desc;
  pdira_loc : location;
}
and directive_argument_desc =
  Ppxlib_ast__.Import.Parsetree.directive_argument_desc =
    Pdir_string of string
  | Pdir_int of string * char option
  | Pdir_ident of longident
  | Pdir_bool of bool
and cases = case list
class virtual map :
  object
    method arg_label : arg_label -> arg_label
    method attribute : attribute -> attribute
    method attributes : attributes -> attributes
    method binding_op : binding_op -> binding_op
    method virtual bool : bool -> bool
    method case : case -> case
    method cases : cases -> cases
    method virtual char : char -> char
    method class_declaration : class_declaration -> class_declaration
    method class_description : class_description -> class_description
    method class_expr : class_expr -> class_expr
    method class_expr_desc : class_expr_desc -> class_expr_desc
    method class_field : class_field -> class_field
    method class_field_desc : class_field_desc -> class_field_desc
    method class_field_kind : class_field_kind -> class_field_kind
    method class_infos : ('a -> 'a) -> 'a class_infos -> 'a class_infos
    method class_signature : class_signature -> class_signature
    method class_structure : class_structure -> class_structure
    method class_type : class_type -> class_type
    method class_type_declaration :
      class_type_declaration -> class_type_declaration
    method class_type_desc : class_type_desc -> class_type_desc
    method class_type_field : class_type_field -> class_type_field
    method class_type_field_desc :
      class_type_field_desc -> class_type_field_desc
    method closed_flag : closed_flag -> closed_flag
    method constant : constant -> constant
    method constructor_arguments :
      constructor_arguments -> constructor_arguments
    method constructor_declaration :
      constructor_declaration -> constructor_declaration
    method core_type : core_type -> core_type
    method core_type_desc : core_type_desc -> core_type_desc
    method direction_flag : direction_flag -> direction_flag
    method directive_argument : directive_argument -> directive_argument
    method directive_argument_desc :
      directive_argument_desc -> directive_argument_desc
    method expression : expression -> expression
    method expression_desc : expression_desc -> expression_desc
    method extension : extension -> extension
    method extension_constructor :
      extension_constructor -> extension_constructor
    method extension_constructor_kind :
      extension_constructor_kind -> extension_constructor_kind
    method functor_parameter : functor_parameter -> functor_parameter
    method include_declaration : include_declaration -> include_declaration
    method include_description : include_description -> include_description
    method include_infos : ('a -> 'a) -> 'a include_infos -> 'a include_infos
    method injectivity : injectivity -> injectivity
    method virtual int : int -> int
    method label : label -> label
    method label_declaration : label_declaration -> label_declaration
    method letop : letop -> letop
    method virtual list : ('a -> 'a) -> 'a list -> 'a list
    method loc : ('a -> 'a) -> 'a loc -> 'a loc
    method location : location -> location
    method location_stack : location_stack -> location_stack
    method longident : longident -> longident
    method longident_loc : longident_loc -> longident_loc
    method module_binding : module_binding -> module_binding
    method module_declaration : module_declaration -> module_declaration
    method module_expr : module_expr -> module_expr
    method module_expr_desc : module_expr_desc -> module_expr_desc
    method module_substitution : module_substitution -> module_substitution
    method module_type : module_type -> module_type
    method module_type_declaration :
      module_type_declaration -> module_type_declaration
    method module_type_desc : module_type_desc -> module_type_desc
    method mutable_flag : mutable_flag -> mutable_flag
    method object_field : object_field -> object_field
    method object_field_desc : object_field_desc -> object_field_desc
    method open_declaration : open_declaration -> open_declaration
    method open_description : open_description -> open_description
    method open_infos : ('a -> 'a) -> 'a open_infos -> 'a open_infos
    method virtual option : ('a -> 'a) -> 'a option -> 'a option
    method override_flag : override_flag -> override_flag
    method package_type : package_type -> package_type
    method pattern : pattern -> pattern
    method pattern_desc : pattern_desc -> pattern_desc
    method payload : payload -> payload
    method position : position -> position
    method private_flag : private_flag -> private_flag
    method rec_flag : rec_flag -> rec_flag
    method row_field : row_field -> row_field
    method row_field_desc : row_field_desc -> row_field_desc
    method signature : signature -> signature
    method signature_item : signature_item -> signature_item
    method signature_item_desc : signature_item_desc -> signature_item_desc
    method virtual string : string -> string
    method structure : structure -> structure
    method structure_item : structure_item -> structure_item
    method structure_item_desc : structure_item_desc -> structure_item_desc
    method toplevel_directive : toplevel_directive -> toplevel_directive
    method toplevel_phrase : toplevel_phrase -> toplevel_phrase
    method type_declaration : type_declaration -> type_declaration
    method type_exception : type_exception -> type_exception
    method type_extension : type_extension -> type_extension
    method type_kind : type_kind -> type_kind
    method value_binding : value_binding -> value_binding
    method value_description : value_description -> value_description
    method variance : variance -> variance
    method virtual_flag : virtual_flag -> virtual_flag
    method with_constraint : with_constraint -> with_constraint
  end
class virtual iter :
  object
    method arg_label : arg_label -> unit
    method attribute : attribute -> unit
    method attributes : attributes -> unit
    method binding_op : binding_op -> unit
    method virtual bool : bool -> unit
    method case : case -> unit
    method cases : cases -> unit
    method virtual char : char -> unit
    method class_declaration : class_declaration -> unit
    method class_description : class_description -> unit
    method class_expr : class_expr -> unit
    method class_expr_desc : class_expr_desc -> unit
    method class_field : class_field -> unit
    method class_field_desc : class_field_desc -> unit
    method class_field_kind : class_field_kind -> unit
    method class_infos : ('a -> unit) -> 'a class_infos -> unit
    method class_signature : class_signature -> unit
    method class_structure : class_structure -> unit
    method class_type : class_type -> unit
    method class_type_declaration : class_type_declaration -> unit
    method class_type_desc : class_type_desc -> unit
    method class_type_field : class_type_field -> unit
    method class_type_field_desc : class_type_field_desc -> unit
    method closed_flag : closed_flag -> unit
    method constant : constant -> unit
    method constructor_arguments : constructor_arguments -> unit
    method constructor_declaration : constructor_declaration -> unit
    method core_type : core_type -> unit
    method core_type_desc : core_type_desc -> unit
    method direction_flag : direction_flag -> unit
    method directive_argument : directive_argument -> unit
    method directive_argument_desc : directive_argument_desc -> unit
    method expression : expression -> unit
    method expression_desc : expression_desc -> unit
    method extension : extension -> unit
    method extension_constructor : extension_constructor -> unit
    method extension_constructor_kind : extension_constructor_kind -> unit
    method functor_parameter : functor_parameter -> unit
    method include_declaration : include_declaration -> unit
    method include_description : include_description -> unit
    method include_infos : ('a -> unit) -> 'a include_infos -> unit
    method injectivity : injectivity -> unit
    method virtual int : int -> unit
    method label : label -> unit
    method label_declaration : label_declaration -> unit
    method letop : letop -> unit
    method virtual list : ('a -> unit) -> 'a list -> unit
    method loc : ('a -> unit) -> 'a loc -> unit
    method location : location -> unit
    method location_stack : location_stack -> unit
    method longident : longident -> unit
    method longident_loc : longident_loc -> unit
    method module_binding : module_binding -> unit
    method module_declaration : module_declaration -> unit
    method module_expr : module_expr -> unit
    method module_expr_desc : module_expr_desc -> unit
    method module_substitution : module_substitution -> unit
    method module_type : module_type -> unit
    method module_type_declaration : module_type_declaration -> unit
    method module_type_desc : module_type_desc -> unit
    method mutable_flag : mutable_flag -> unit
    method object_field : object_field -> unit
    method object_field_desc : object_field_desc -> unit
    method open_declaration : open_declaration -> unit
    method open_description : open_description -> unit
    method open_infos : ('a -> unit) -> 'a open_infos -> unit
    method virtual option : ('a -> unit) -> 'a option -> unit
    method override_flag : override_flag -> unit
    method package_type : package_type -> unit
    method pattern : pattern -> unit
    method pattern_desc : pattern_desc -> unit
    method payload : payload -> unit
    method position : position -> unit
    method private_flag : private_flag -> unit
    method rec_flag : rec_flag -> unit
    method row_field : row_field -> unit
    method row_field_desc : row_field_desc -> unit
    method signature : signature -> unit
    method signature_item : signature_item -> unit
    method signature_item_desc : signature_item_desc -> unit
    method virtual string : string -> unit
    method structure : structure -> unit
    method structure_item : structure_item -> unit
    method structure_item_desc : structure_item_desc -> unit
    method toplevel_directive : toplevel_directive -> unit
    method toplevel_phrase : toplevel_phrase -> unit
    method type_declaration : type_declaration -> unit
    method type_exception : type_exception -> unit
    method type_extension : type_extension -> unit
    method type_kind : type_kind -> unit
    method value_binding : value_binding -> unit
    method value_description : value_description -> unit
    method variance : variance -> unit
    method virtual_flag : virtual_flag -> unit
    method with_constraint : with_constraint -> unit
  end
class virtual ['acc] fold :
  object
    method arg_label : arg_label -> 'acc -> 'acc
    method attribute : attribute -> 'acc -> 'acc
    method attributes : attributes -> 'acc -> 'acc
    method binding_op : binding_op -> 'acc -> 'acc
    method virtual bool : bool -> 'acc -> 'acc
    method case : case -> 'acc -> 'acc
    method cases : cases -> 'acc -> 'acc
    method virtual char : char -> 'acc -> 'acc
    method class_declaration : class_declaration -> 'acc -> 'acc
    method class_description : class_description -> 'acc -> 'acc
    method class_expr : class_expr -> 'acc -> 'acc
    method class_expr_desc : class_expr_desc -> 'acc -> 'acc
    method class_field : class_field -> 'acc -> 'acc
    method class_field_desc : class_field_desc -> 'acc -> 'acc
    method class_field_kind : class_field_kind -> 'acc -> 'acc
    method class_infos :
      ('a -> 'acc -> 'acc) -> 'a class_infos -> 'acc -> 'acc
    method class_signature : class_signature -> 'acc -> 'acc
    method class_structure : class_structure -> 'acc -> 'acc
    method class_type : class_type -> 'acc -> 'acc
    method class_type_declaration : class_type_declaration -> 'acc -> 'acc
    method class_type_desc : class_type_desc -> 'acc -> 'acc
    method class_type_field : class_type_field -> 'acc -> 'acc
    method class_type_field_desc : class_type_field_desc -> 'acc -> 'acc
    method closed_flag : closed_flag -> 'acc -> 'acc
    method constant : constant -> 'acc -> 'acc
    method constructor_arguments : constructor_arguments -> 'acc -> 'acc
    method constructor_declaration : constructor_declaration -> 'acc -> 'acc
    method core_type : core_type -> 'acc -> 'acc
    method core_type_desc : core_type_desc -> 'acc -> 'acc
    method direction_flag : direction_flag -> 'acc -> 'acc
    method directive_argument : directive_argument -> 'acc -> 'acc
    method directive_argument_desc : directive_argument_desc -> 'acc -> 'acc
    method expression : expression -> 'acc -> 'acc
    method expression_desc : expression_desc -> 'acc -> 'acc
    method extension : extension -> 'acc -> 'acc
    method extension_constructor : extension_constructor -> 'acc -> 'acc
    method extension_constructor_kind :
      extension_constructor_kind -> 'acc -> 'acc
    method functor_parameter : functor_parameter -> 'acc -> 'acc
    method include_declaration : include_declaration -> 'acc -> 'acc
    method include_description : include_description -> 'acc -> 'acc
    method include_infos :
      ('a -> 'acc -> 'acc) -> 'a include_infos -> 'acc -> 'acc
    method injectivity : injectivity -> 'acc -> 'acc
    method virtual int : int -> 'acc -> 'acc
    method label : label -> 'acc -> 'acc
    method label_declaration : label_declaration -> 'acc -> 'acc
    method letop : letop -> 'acc -> 'acc
    method virtual list : ('a -> 'acc -> 'acc) -> 'a list -> 'acc -> 'acc
    method loc : ('a -> 'acc -> 'acc) -> 'a loc -> 'acc -> 'acc
    method location : location -> 'acc -> 'acc
    method location_stack : location_stack -> 'acc -> 'acc
    method longident : longident -> 'acc -> 'acc
    method longident_loc : longident_loc -> 'acc -> 'acc
    method module_binding : module_binding -> 'acc -> 'acc
    method module_declaration : module_declaration -> 'acc -> 'acc
    method module_expr : module_expr -> 'acc -> 'acc
    method module_expr_desc : module_expr_desc -> 'acc -> 'acc
    method module_substitution : module_substitution -> 'acc -> 'acc
    method module_type : module_type -> 'acc -> 'acc
    method module_type_declaration : module_type_declaration -> 'acc -> 'acc
    method module_type_desc : module_type_desc -> 'acc -> 'acc
    method mutable_flag : mutable_flag -> 'acc -> 'acc
    method object_field : object_field -> 'acc -> 'acc
    method object_field_desc : object_field_desc -> 'acc -> 'acc
    method open_declaration : open_declaration -> 'acc -> 'acc
    method open_description : open_description -> 'acc -> 'acc
    method open_infos : ('a -> 'acc -> 'acc) -> 'a open_infos -> 'acc -> 'acc
    method virtual option : ('a -> 'acc -> 'acc) -> 'a option -> 'acc -> 'acc
    method override_flag : override_flag -> 'acc -> 'acc
    method package_type : package_type -> 'acc -> 'acc
    method pattern : pattern -> 'acc -> 'acc
    method pattern_desc : pattern_desc -> 'acc -> 'acc
    method payload : payload -> 'acc -> 'acc
    method position : position -> 'acc -> 'acc
    method private_flag : private_flag -> 'acc -> 'acc
    method rec_flag : rec_flag -> 'acc -> 'acc
    method row_field : row_field -> 'acc -> 'acc
    method row_field_desc : row_field_desc -> 'acc -> 'acc
    method signature : signature -> 'acc -> 'acc
    method signature_item : signature_item -> 'acc -> 'acc
    method signature_item_desc : signature_item_desc -> 'acc -> 'acc
    method virtual string : string -> 'acc -> 'acc
    method structure : structure -> 'acc -> 'acc
    method structure_item : structure_item -> 'acc -> 'acc
    method structure_item_desc : structure_item_desc -> 'acc -> 'acc
    method toplevel_directive : toplevel_directive -> 'acc -> 'acc
    method toplevel_phrase : toplevel_phrase -> 'acc -> 'acc
    method type_declaration : type_declaration -> 'acc -> 'acc
    method type_exception : type_exception -> 'acc -> 'acc
    method type_extension : type_extension -> 'acc -> 'acc
    method type_kind : type_kind -> 'acc -> 'acc
    method value_binding : value_binding -> 'acc -> 'acc
    method value_description : value_description -> 'acc -> 'acc
    method variance : variance -> 'acc -> 'acc
    method virtual_flag : virtual_flag -> 'acc -> 'acc
    method with_constraint : with_constraint -> 'acc -> 'acc
  end
class virtual ['acc] fold_map :
  object
    method arg_label : arg_label -> 'acc -> arg_label * 'acc
    method attribute : attribute -> 'acc -> attribute * 'acc
    method attributes : attributes -> 'acc -> attributes * 'acc
    method binding_op : binding_op -> 'acc -> binding_op * 'acc
    method virtual bool : bool -> 'acc -> bool * 'acc
    method case : case -> 'acc -> case * 'acc
    method cases : cases -> 'acc -> cases * 'acc
    method virtual char : char -> 'acc -> char * 'acc
    method class_declaration :
      class_declaration -> 'acc -> class_declaration * 'acc
    method class_description :
      class_description -> 'acc -> class_description * 'acc
    method class_expr : class_expr -> 'acc -> class_expr * 'acc
    method class_expr_desc :
      class_expr_desc -> 'acc -> class_expr_desc * 'acc
    method class_field : class_field -> 'acc -> class_field * 'acc
    method class_field_desc :
      class_field_desc -> 'acc -> class_field_desc * 'acc
    method class_field_kind :
      class_field_kind -> 'acc -> class_field_kind * 'acc
    method class_infos :
      ('a -> 'acc -> 'a * 'acc) ->
      'a class_infos -> 'acc -> 'a class_infos * 'acc
    method class_signature :
      class_signature -> 'acc -> class_signature * 'acc
    method class_structure :
      class_structure -> 'acc -> class_structure * 'acc
    method class_type : class_type -> 'acc -> class_type * 'acc
    method class_type_declaration :
      class_type_declaration -> 'acc -> class_type_declaration * 'acc
    method class_type_desc :
      class_type_desc -> 'acc -> class_type_desc * 'acc
    method class_type_field :
      class_type_field -> 'acc -> class_type_field * 'acc
    method class_type_field_desc :
      class_type_field_desc -> 'acc -> class_type_field_desc * 'acc
    method closed_flag : closed_flag -> 'acc -> closed_flag * 'acc
    method constant : constant -> 'acc -> constant * 'acc
    method constructor_arguments :
      constructor_arguments -> 'acc -> constructor_arguments * 'acc
    method constructor_declaration :
      constructor_declaration -> 'acc -> constructor_declaration * 'acc
    method core_type : core_type -> 'acc -> core_type * 'acc
    method core_type_desc : core_type_desc -> 'acc -> core_type_desc * 'acc
    method direction_flag : direction_flag -> 'acc -> direction_flag * 'acc
    method directive_argument :
      directive_argument -> 'acc -> directive_argument * 'acc
    method directive_argument_desc :
      directive_argument_desc -> 'acc -> directive_argument_desc * 'acc
    method expression : expression -> 'acc -> expression * 'acc
    method expression_desc :
      expression_desc -> 'acc -> expression_desc * 'acc
    method extension : extension -> 'acc -> extension * 'acc
    method extension_constructor :
      extension_constructor -> 'acc -> extension_constructor * 'acc
    method extension_constructor_kind :
      extension_constructor_kind -> 'acc -> extension_constructor_kind * 'acc
    method functor_parameter :
      functor_parameter -> 'acc -> functor_parameter * 'acc
    method include_declaration :
      include_declaration -> 'acc -> include_declaration * 'acc
    method include_description :
      include_description -> 'acc -> include_description * 'acc
    method include_infos :
      ('a -> 'acc -> 'a * 'acc) ->
      'a include_infos -> 'acc -> 'a include_infos * 'acc
    method injectivity : injectivity -> 'acc -> injectivity * 'acc
    method virtual int : int -> 'acc -> int * 'acc
    method label : label -> 'acc -> label * 'acc
    method label_declaration :
      label_declaration -> 'acc -> label_declaration * 'acc
    method letop : letop -> 'acc -> letop * 'acc
    method virtual list :
      ('a -> 'acc -> 'a * 'acc) -> 'a list -> 'acc -> 'a list * 'acc
    method loc : ('a -> 'acc -> 'a * 'acc) -> 'a loc -> 'acc -> 'a loc * 'acc
    method location : location -> 'acc -> location * 'acc
    method location_stack : location_stack -> 'acc -> location_stack * 'acc
    method longident : longident -> 'acc -> longident * 'acc
    method longident_loc : longident_loc -> 'acc -> longident_loc * 'acc
    method module_binding : module_binding -> 'acc -> module_binding * 'acc
    method module_declaration :
      module_declaration -> 'acc -> module_declaration * 'acc
    method module_expr : module_expr -> 'acc -> module_expr * 'acc
    method module_expr_desc :
      module_expr_desc -> 'acc -> module_expr_desc * 'acc
    method module_substitution :
      module_substitution -> 'acc -> module_substitution * 'acc
    method module_type : module_type -> 'acc -> module_type * 'acc
    method module_type_declaration :
      module_type_declaration -> 'acc -> module_type_declaration * 'acc
    method module_type_desc :
      module_type_desc -> 'acc -> module_type_desc * 'acc
    method mutable_flag : mutable_flag -> 'acc -> mutable_flag * 'acc
    method object_field : object_field -> 'acc -> object_field * 'acc
    method object_field_desc :
      object_field_desc -> 'acc -> object_field_desc * 'acc
    method open_declaration :
      open_declaration -> 'acc -> open_declaration * 'acc
    method open_description :
      open_description -> 'acc -> open_description * 'acc
    method open_infos :
      ('a -> 'acc -> 'a * 'acc) ->
      'a open_infos -> 'acc -> 'a open_infos * 'acc
    method virtual option :
      ('a -> 'acc -> 'a * 'acc) -> 'a option -> 'acc -> 'a option * 'acc
    method override_flag : override_flag -> 'acc -> override_flag * 'acc
    method package_type : package_type -> 'acc -> package_type * 'acc
    method pattern : pattern -> 'acc -> pattern * 'acc
    method pattern_desc : pattern_desc -> 'acc -> pattern_desc * 'acc
    method payload : payload -> 'acc -> payload * 'acc
    method position : position -> 'acc -> position * 'acc
    method private_flag : private_flag -> 'acc -> private_flag * 'acc
    method rec_flag : rec_flag -> 'acc -> rec_flag * 'acc
    method row_field : row_field -> 'acc -> row_field * 'acc
    method row_field_desc : row_field_desc -> 'acc -> row_field_desc * 'acc
    method signature : signature -> 'acc -> signature * 'acc
    method signature_item : signature_item -> 'acc -> signature_item * 'acc
    method signature_item_desc :
      signature_item_desc -> 'acc -> signature_item_desc * 'acc
    method virtual string : string -> 'acc -> string * 'acc
    method structure : structure -> 'acc -> structure * 'acc
    method structure_item : structure_item -> 'acc -> structure_item * 'acc
    method structure_item_desc :
      structure_item_desc -> 'acc -> structure_item_desc * 'acc
    method toplevel_directive :
      toplevel_directive -> 'acc -> toplevel_directive * 'acc
    method toplevel_phrase :
      toplevel_phrase -> 'acc -> toplevel_phrase * 'acc
    method type_declaration :
      type_declaration -> 'acc -> type_declaration * 'acc
    method type_exception : type_exception -> 'acc -> type_exception * 'acc
    method type_extension : type_extension -> 'acc -> type_extension * 'acc
    method type_kind : type_kind -> 'acc -> type_kind * 'acc
    method value_binding : value_binding -> 'acc -> value_binding * 'acc
    method value_description :
      value_description -> 'acc -> value_description * 'acc
    method variance : variance -> 'acc -> variance * 'acc
    method virtual_flag : virtual_flag -> 'acc -> virtual_flag * 'acc
    method with_constraint :
      with_constraint -> 'acc -> with_constraint * 'acc
  end
class virtual ['ctx] map_with_context :
  object
    method arg_label : 'ctx -> arg_label -> arg_label
    method attribute : 'ctx -> attribute -> attribute
    method attributes : 'ctx -> attributes -> attributes
    method binding_op : 'ctx -> binding_op -> binding_op
    method virtual bool : 'ctx -> bool -> bool
    method case : 'ctx -> case -> case
    method cases : 'ctx -> cases -> cases
    method virtual char : 'ctx -> char -> char
    method class_declaration : 'ctx -> class_declaration -> class_declaration
    method class_description : 'ctx -> class_description -> class_description
    method class_expr : 'ctx -> class_expr -> class_expr
    method class_expr_desc : 'ctx -> class_expr_desc -> class_expr_desc
    method class_field : 'ctx -> class_field -> class_field
    method class_field_desc : 'ctx -> class_field_desc -> class_field_desc
    method class_field_kind : 'ctx -> class_field_kind -> class_field_kind
    method class_infos :
      ('ctx -> 'a -> 'a) -> 'ctx -> 'a class_infos -> 'a class_infos
    method class_signature : 'ctx -> class_signature -> class_signature
    method class_structure : 'ctx -> class_structure -> class_structure
    method class_type : 'ctx -> class_type -> class_type
    method class_type_declaration :
      'ctx -> class_type_declaration -> class_type_declaration
    method class_type_desc : 'ctx -> class_type_desc -> class_type_desc
    method class_type_field : 'ctx -> class_type_field -> class_type_field
    method class_type_field_desc :
      'ctx -> class_type_field_desc -> class_type_field_desc
    method closed_flag : 'ctx -> closed_flag -> closed_flag
    method constant : 'ctx -> constant -> constant
    method constructor_arguments :
      'ctx -> constructor_arguments -> constructor_arguments
    method constructor_declaration :
      'ctx -> constructor_declaration -> constructor_declaration
    method core_type : 'ctx -> core_type -> core_type
    method core_type_desc : 'ctx -> core_type_desc -> core_type_desc
    method direction_flag : 'ctx -> direction_flag -> direction_flag
    method directive_argument :
      'ctx -> directive_argument -> directive_argument
    method directive_argument_desc :
      'ctx -> directive_argument_desc -> directive_argument_desc
    method expression : 'ctx -> expression -> expression
    method expression_desc : 'ctx -> expression_desc -> expression_desc
    method extension : 'ctx -> extension -> extension
    method extension_constructor :
      'ctx -> extension_constructor -> extension_constructor
    method extension_constructor_kind :
      'ctx -> extension_constructor_kind -> extension_constructor_kind
    method functor_parameter : 'ctx -> functor_parameter -> functor_parameter
    method include_declaration :
      'ctx -> include_declaration -> include_declaration
    method include_description :
      'ctx -> include_description -> include_description
    method include_infos :
      ('ctx -> 'a -> 'a) -> 'ctx -> 'a include_infos -> 'a include_infos
    method injectivity : 'ctx -> injectivity -> injectivity
    method virtual int : 'ctx -> int -> int
    method label : 'ctx -> label -> label
    method label_declaration : 'ctx -> label_declaration -> label_declaration
    method letop : 'ctx -> letop -> letop
    method virtual list : ('ctx -> 'a -> 'a) -> 'ctx -> 'a list -> 'a list
    method loc : ('ctx -> 'a -> 'a) -> 'ctx -> 'a loc -> 'a loc
    method location : 'ctx -> location -> location
    method location_stack : 'ctx -> location_stack -> location_stack
    method longident : 'ctx -> longident -> longident
    method longident_loc : 'ctx -> longident_loc -> longident_loc
    method module_binding : 'ctx -> module_binding -> module_binding
    method module_declaration :
      'ctx -> module_declaration -> module_declaration
    method module_expr : 'ctx -> module_expr -> module_expr
    method module_expr_desc : 'ctx -> module_expr_desc -> module_expr_desc
    method module_substitution :
      'ctx -> module_substitution -> module_substitution
    method module_type : 'ctx -> module_type -> module_type
    method module_type_declaration :
      'ctx -> module_type_declaration -> module_type_declaration
    method module_type_desc : 'ctx -> module_type_desc -> module_type_desc
    method mutable_flag : 'ctx -> mutable_flag -> mutable_flag
    method object_field : 'ctx -> object_field -> object_field
    method object_field_desc : 'ctx -> object_field_desc -> object_field_desc
    method open_declaration : 'ctx -> open_declaration -> open_declaration
    method open_description : 'ctx -> open_description -> open_description
    method open_infos :
      ('ctx -> 'a -> 'a) -> 'ctx -> 'a open_infos -> 'a open_infos
    method virtual option :
      ('ctx -> 'a -> 'a) -> 'ctx -> 'a option -> 'a option
    method override_flag : 'ctx -> override_flag -> override_flag
    method package_type : 'ctx -> package_type -> package_type
    method pattern : 'ctx -> pattern -> pattern
    method pattern_desc : 'ctx -> pattern_desc -> pattern_desc
    method payload : 'ctx -> payload -> payload
    method position : 'ctx -> position -> position
    method private_flag : 'ctx -> private_flag -> private_flag
    method rec_flag : 'ctx -> rec_flag -> rec_flag
    method row_field : 'ctx -> row_field -> row_field
    method row_field_desc : 'ctx -> row_field_desc -> row_field_desc
    method signature : 'ctx -> signature -> signature
    method signature_item : 'ctx -> signature_item -> signature_item
    method signature_item_desc :
      'ctx -> signature_item_desc -> signature_item_desc
    method virtual string : 'ctx -> string -> string
    method structure : 'ctx -> structure -> structure
    method structure_item : 'ctx -> structure_item -> structure_item
    method structure_item_desc :
      'ctx -> structure_item_desc -> structure_item_desc
    method toplevel_directive :
      'ctx -> toplevel_directive -> toplevel_directive
    method toplevel_phrase : 'ctx -> toplevel_phrase -> toplevel_phrase
    method type_declaration : 'ctx -> type_declaration -> type_declaration
    method type_exception : 'ctx -> type_exception -> type_exception
    method type_extension : 'ctx -> type_extension -> type_extension
    method type_kind : 'ctx -> type_kind -> type_kind
    method value_binding : 'ctx -> value_binding -> value_binding
    method value_description : 'ctx -> value_description -> value_description
    method variance : 'ctx -> variance -> variance
    method virtual_flag : 'ctx -> virtual_flag -> virtual_flag
    method with_constraint : 'ctx -> with_constraint -> with_constraint
  end
class virtual ['res] lift :
  object
    method arg_label : arg_label -> 'res
    method attribute : attribute -> 'res
    method attributes : attributes -> 'res
    method binding_op : binding_op -> 'res
    method virtual bool : bool -> 'res
    method case : case -> 'res
    method cases : cases -> 'res
    method virtual char : char -> 'res
    method class_declaration : class_declaration -> 'res
    method class_description : class_description -> 'res
    method class_expr : class_expr -> 'res
    method class_expr_desc : class_expr_desc -> 'res
    method class_field : class_field -> 'res
    method class_field_desc : class_field_desc -> 'res
    method class_field_kind : class_field_kind -> 'res
    method class_infos : ('a -> 'res) -> 'a class_infos -> 'res
    method class_signature : class_signature -> 'res
    method class_structure : class_structure -> 'res
    method class_type : class_type -> 'res
    method class_type_declaration : class_type_declaration -> 'res
    method class_type_desc : class_type_desc -> 'res
    method class_type_field : class_type_field -> 'res
    method class_type_field_desc : class_type_field_desc -> 'res
    method closed_flag : closed_flag -> 'res
    method constant : constant -> 'res
    method virtual constr : string -> 'res list -> 'res
    method constructor_arguments : constructor_arguments -> 'res
    method constructor_declaration : constructor_declaration -> 'res
    method core_type : core_type -> 'res
    method core_type_desc : core_type_desc -> 'res
    method direction_flag : direction_flag -> 'res
    method directive_argument : directive_argument -> 'res
    method directive_argument_desc : directive_argument_desc -> 'res
    method expression : expression -> 'res
    method expression_desc : expression_desc -> 'res
    method extension : extension -> 'res
    method extension_constructor : extension_constructor -> 'res
    method extension_constructor_kind : extension_constructor_kind -> 'res
    method functor_parameter : functor_parameter -> 'res
    method include_declaration : include_declaration -> 'res
    method include_description : include_description -> 'res
    method include_infos : ('a -> 'res) -> 'a include_infos -> 'res
    method injectivity : injectivity -> 'res
    method virtual int : int -> 'res
    method label : label -> 'res
    method label_declaration : label_declaration -> 'res
    method letop : letop -> 'res
    method virtual list : ('a -> 'res) -> 'a list -> 'res
    method loc : ('a -> 'res) -> 'a loc -> 'res
    method location : location -> 'res
    method location_stack : location_stack -> 'res
    method longident : longident -> 'res
    method longident_loc : longident_loc -> 'res
    method module_binding : module_binding -> 'res
    method module_declaration : module_declaration -> 'res
    method module_expr : module_expr -> 'res
    method module_expr_desc : module_expr_desc -> 'res
    method module_substitution : module_substitution -> 'res
    method module_type : module_type -> 'res
    method module_type_declaration : module_type_declaration -> 'res
    method module_type_desc : module_type_desc -> 'res
    method mutable_flag : mutable_flag -> 'res
    method object_field : object_field -> 'res
    method object_field_desc : object_field_desc -> 'res
    method open_declaration : open_declaration -> 'res
    method open_description : open_description -> 'res
    method open_infos : ('a -> 'res) -> 'a open_infos -> 'res
    method virtual option : ('a -> 'res) -> 'a option -> 'res
    method override_flag : override_flag -> 'res
    method package_type : package_type -> 'res
    method pattern : pattern -> 'res
    method pattern_desc : pattern_desc -> 'res
    method payload : payload -> 'res
    method position : position -> 'res
    method private_flag : private_flag -> 'res
    method rec_flag : rec_flag -> 'res
    method virtual record : (string * 'res) list -> 'res
    method row_field : row_field -> 'res
    method row_field_desc : row_field_desc -> 'res
    method signature : signature -> 'res
    method signature_item : signature_item -> 'res
    method signature_item_desc : signature_item_desc -> 'res
    method virtual string : string -> 'res
    method structure : structure -> 'res
    method structure_item : structure_item -> 'res
    method structure_item_desc : structure_item_desc -> 'res
    method toplevel_directive : toplevel_directive -> 'res
    method toplevel_phrase : toplevel_phrase -> 'res
    method virtual tuple : 'res list -> 'res
    method type_declaration : type_declaration -> 'res
    method type_exception : type_exception -> 'res
    method type_extension : type_extension -> 'res
    method type_kind : type_kind -> 'res
    method value_binding : value_binding -> 'res
    method value_description : value_description -> 'res
    method variance : variance -> 'res
    method virtual_flag : virtual_flag -> 'res
    method with_constraint : with_constraint -> 'res
  end
class virtual ['ctx, 'res] lift_map_with_context :
  object
    method arg_label : 'ctx -> arg_label -> arg_label * 'res
    method attribute : 'ctx -> attribute -> attribute * 'res
    method attributes : 'ctx -> attributes -> attributes * 'res
    method binding_op : 'ctx -> binding_op -> binding_op * 'res
    method virtual bool : 'ctx -> bool -> bool * 'res
    method case : 'ctx -> case -> case * 'res
    method cases : 'ctx -> cases -> cases * 'res
    method virtual char : 'ctx -> char -> char * 'res
    method class_declaration :
      'ctx -> class_declaration -> class_declaration * 'res
    method class_description :
      'ctx -> class_description -> class_description * 'res
    method class_expr : 'ctx -> class_expr -> class_expr * 'res
    method class_expr_desc :
      'ctx -> class_expr_desc -> class_expr_desc * 'res
    method class_field : 'ctx -> class_field -> class_field * 'res
    method class_field_desc :
      'ctx -> class_field_desc -> class_field_desc * 'res
    method class_field_kind :
      'ctx -> class_field_kind -> class_field_kind * 'res
    method class_infos :
      ('ctx -> 'a -> 'a * 'res) ->
      'ctx -> 'a class_infos -> 'a class_infos * 'res
    method class_signature :
      'ctx -> class_signature -> class_signature * 'res
    method class_structure :
      'ctx -> class_structure -> class_structure * 'res
    method class_type : 'ctx -> class_type -> class_type * 'res
    method class_type_declaration :
      'ctx -> class_type_declaration -> class_type_declaration * 'res
    method class_type_desc :
      'ctx -> class_type_desc -> class_type_desc * 'res
    method class_type_field :
      'ctx -> class_type_field -> class_type_field * 'res
    method class_type_field_desc :
      'ctx -> class_type_field_desc -> class_type_field_desc * 'res
    method closed_flag : 'ctx -> closed_flag -> closed_flag * 'res
    method constant : 'ctx -> constant -> constant * 'res
    method virtual constr : 'ctx -> string -> 'res list -> 'res
    method constructor_arguments :
      'ctx -> constructor_arguments -> constructor_arguments * 'res
    method constructor_declaration :
      'ctx -> constructor_declaration -> constructor_declaration * 'res
    method core_type : 'ctx -> core_type -> core_type * 'res
    method core_type_desc : 'ctx -> core_type_desc -> core_type_desc * 'res
    method direction_flag : 'ctx -> direction_flag -> direction_flag * 'res
    method directive_argument :
      'ctx -> directive_argument -> directive_argument * 'res
    method directive_argument_desc :
      'ctx -> directive_argument_desc -> directive_argument_desc * 'res
    method expression : 'ctx -> expression -> expression * 'res
    method expression_desc :
      'ctx -> expression_desc -> expression_desc * 'res
    method extension : 'ctx -> extension -> extension * 'res
    method extension_constructor :
      'ctx -> extension_constructor -> extension_constructor * 'res
    method extension_constructor_kind :
      'ctx -> extension_constructor_kind -> extension_constructor_kind * 'res
    method functor_parameter :
      'ctx -> functor_parameter -> functor_parameter * 'res
    method include_declaration :
      'ctx -> include_declaration -> include_declaration * 'res
    method include_description :
      'ctx -> include_description -> include_description * 'res
    method include_infos :
      ('ctx -> 'a -> 'a * 'res) ->
      'ctx -> 'a include_infos -> 'a include_infos * 'res
    method injectivity : 'ctx -> injectivity -> injectivity * 'res
    method virtual int : 'ctx -> int -> int * 'res
    method label : 'ctx -> label -> label * 'res
    method label_declaration :
      'ctx -> label_declaration -> label_declaration * 'res
    method letop : 'ctx -> letop -> letop * 'res
    method virtual list :
      ('ctx -> 'a -> 'a * 'res) -> 'ctx -> 'a list -> 'a list * 'res
    method loc : ('ctx -> 'a -> 'a * 'res) -> 'ctx -> 'a loc -> 'a loc * 'res
    method location : 'ctx -> location -> location * 'res
    method location_stack : 'ctx -> location_stack -> location_stack * 'res
    method longident : 'ctx -> longident -> longident * 'res
    method longident_loc : 'ctx -> longident_loc -> longident_loc * 'res
    method module_binding : 'ctx -> module_binding -> module_binding * 'res
    method module_declaration :
      'ctx -> module_declaration -> module_declaration * 'res
    method module_expr : 'ctx -> module_expr -> module_expr * 'res
    method module_expr_desc :
      'ctx -> module_expr_desc -> module_expr_desc * 'res
    method module_substitution :
      'ctx -> module_substitution -> module_substitution * 'res
    method module_type : 'ctx -> module_type -> module_type * 'res
    method module_type_declaration :
      'ctx -> module_type_declaration -> module_type_declaration * 'res
    method module_type_desc :
      'ctx -> module_type_desc -> module_type_desc * 'res
    method mutable_flag : 'ctx -> mutable_flag -> mutable_flag * 'res
    method object_field : 'ctx -> object_field -> object_field * 'res
    method object_field_desc :
      'ctx -> object_field_desc -> object_field_desc * 'res
    method open_declaration :
      'ctx -> open_declaration -> open_declaration * 'res
    method open_description :
      'ctx -> open_description -> open_description * 'res
    method open_infos :
      ('ctx -> 'a -> 'a * 'res) ->
      'ctx -> 'a open_infos -> 'a open_infos * 'res
    method virtual option :
      ('ctx -> 'a -> 'a * 'res) -> 'ctx -> 'a option -> 'a option * 'res
    method virtual other : 'ctx -> 'a -> 'res
    method override_flag : 'ctx -> override_flag -> override_flag * 'res
    method package_type : 'ctx -> package_type -> package_type * 'res
    method pattern : 'ctx -> pattern -> pattern * 'res
    method pattern_desc : 'ctx -> pattern_desc -> pattern_desc * 'res
    method payload : 'ctx -> payload -> payload * 'res
    method position : 'ctx -> position -> position * 'res
    method private_flag : 'ctx -> private_flag -> private_flag * 'res
    method rec_flag : 'ctx -> rec_flag -> rec_flag * 'res
    method virtual record : 'ctx -> (string * 'res) list -> 'res
    method row_field : 'ctx -> row_field -> row_field * 'res
    method row_field_desc : 'ctx -> row_field_desc -> row_field_desc * 'res
    method signature : 'ctx -> signature -> signature * 'res
    method signature_item : 'ctx -> signature_item -> signature_item * 'res
    method signature_item_desc :
      'ctx -> signature_item_desc -> signature_item_desc * 'res
    method virtual string : 'ctx -> string -> string * 'res
    method structure : 'ctx -> structure -> structure * 'res
    method structure_item : 'ctx -> structure_item -> structure_item * 'res
    method structure_item_desc :
      'ctx -> structure_item_desc -> structure_item_desc * 'res
    method toplevel_directive :
      'ctx -> toplevel_directive -> toplevel_directive * 'res
    method toplevel_phrase :
      'ctx -> toplevel_phrase -> toplevel_phrase * 'res
    method virtual tuple : 'ctx -> 'res list -> 'res
    method type_declaration :
      'ctx -> type_declaration -> type_declaration * 'res
    method type_exception : 'ctx -> type_exception -> type_exception * 'res
    method type_extension : 'ctx -> type_extension -> type_extension * 'res
    method type_kind : 'ctx -> type_kind -> type_kind * 'res
    method value_binding : 'ctx -> value_binding -> value_binding * 'res
    method value_description :
      'ctx -> value_description -> value_description * 'res
    method variance : 'ctx -> variance -> variance * 'res
    method virtual_flag : 'ctx -> virtual_flag -> virtual_flag * 'res
    method with_constraint :
      'ctx -> with_constraint -> with_constraint * 'res
  end
module Do_not_use_directly = Ocaml_shadow.Do_not_use_directly
module Afl_instrument = Do_not_use_directly
module Alias_analysis = Do_not_use_directly
module Allocated_const = Do_not_use_directly
module Annot = Do_not_use_directly
module Arch = Do_not_use_directly
module Arg_helper = Do_not_use_directly
module Asmgen = Do_not_use_directly
module Asmlibrarian = Do_not_use_directly
module Asmlink = Do_not_use_directly
module Asmpackager = Do_not_use_directly
module Ast_invariants = Do_not_use_directly
module Ast_iterator = Do_not_use_directly
module Ast_mapper = Do_not_use_directly
module Attr_helper = Do_not_use_directly
module Augment_specialised_args = Do_not_use_directly
module Backend_intf = Do_not_use_directly
module Backend_var = Do_not_use_directly
module Binutils = Do_not_use_directly
module Branch_relaxation = Do_not_use_directly
module Branch_relaxation_intf = Do_not_use_directly
module Btype = Do_not_use_directly
module Build_export_info = Do_not_use_directly
module Build_path_prefix_map = Do_not_use_directly
module Builtin_attributes = Do_not_use_directly
module Bytegen = Do_not_use_directly
module Bytelibrarian = Do_not_use_directly
module Bytelink = Do_not_use_directly
module Bytepackager = Do_not_use_directly
module Bytesections = Do_not_use_directly
module CSE = Do_not_use_directly
module CSEgen = Do_not_use_directly
module CamlinternalMenhirLib = Do_not_use_directly
module Ccomp = Do_not_use_directly
module Clambda = Do_not_use_directly
module Clambda_primitives = Do_not_use_directly
module Clflags = Do_not_use_directly
module Closure = Do_not_use_directly
module Closure_conversion = Do_not_use_directly
module Closure_conversion_aux = Do_not_use_directly
module Closure_element = Do_not_use_directly
module Closure_id = Do_not_use_directly
module Closure_middle_end = Do_not_use_directly
module Closure_offsets = Do_not_use_directly
module Closure_origin = Do_not_use_directly
module Cmi_format = Do_not_use_directly
module Cmm = Do_not_use_directly
module Cmm_helpers = Do_not_use_directly
module Cmm_invariants = Do_not_use_directly
module Cmmgen = Do_not_use_directly
module Cmmgen_state = Do_not_use_directly
module Cmo_format = Do_not_use_directly
module Cmt2annot = Do_not_use_directly
module Cmt_format = Do_not_use_directly
module Cmx_format = Do_not_use_directly
module Cmxs_format = Do_not_use_directly
module Coloring = Do_not_use_directly
module Comballoc = Do_not_use_directly
module Compenv = Do_not_use_directly
module Compilation_unit = Do_not_use_directly
module Compile = Do_not_use_directly
module Compile_common = Do_not_use_directly
module Compilenv = Do_not_use_directly
module Compmisc = Do_not_use_directly
module Compression = Do_not_use_directly
module Config = Do_not_use_directly
module Config_boot = Do_not_use_directly
module Config_main = Do_not_use_directly
module Consistbl = Do_not_use_directly
module Convert_primitives = Do_not_use_directly
module Ctype = Do_not_use_directly
module Dataflow = Do_not_use_directly
module Datarepr = Do_not_use_directly
module Deadcode = Do_not_use_directly
module Debuginfo = Do_not_use_directly
module Depend = Do_not_use_directly
module Diffing = Do_not_use_directly
module Diffing_with_keys = Do_not_use_directly
module Dll = Do_not_use_directly
module Domainstate = Do_not_use_directly
module Effect_analysis = Do_not_use_directly
module Emit = Do_not_use_directly
module Emitaux = Do_not_use_directly
module Emitcode = Do_not_use_directly
module Emitenv = Do_not_use_directly
module Env = Do_not_use_directly
module Envaux = Do_not_use_directly
module Errors = Do_not_use_directly
module Errortrace = Do_not_use_directly
module Export_id = Do_not_use_directly
module Export_info = Do_not_use_directly
module Export_info_for_pack = Do_not_use_directly
module Expunge = Do_not_use_directly
module Extract_projections = Do_not_use_directly
module Find_recursive_functions = Do_not_use_directly
module Flambda = Do_not_use_directly
module Flambda_invariants = Do_not_use_directly
module Flambda_iterators = Do_not_use_directly
module Flambda_middle_end = Do_not_use_directly
module Flambda_to_clambda = Do_not_use_directly
module Flambda_utils = Do_not_use_directly
module Freshening = Do_not_use_directly
module Genprintval = Do_not_use_directly
module Id_types = Do_not_use_directly
module Ident = Do_not_use_directly
module Import_approx = Do_not_use_directly
module Includeclass = Do_not_use_directly
module Includecore = Do_not_use_directly
module Includemod = Do_not_use_directly
module Includemod_errorprinter = Do_not_use_directly
module Inconstant_idents = Do_not_use_directly
module Initialize_symbol_to_let_symbol = Do_not_use_directly
module Inline_and_simplify = Do_not_use_directly
module Inline_and_simplify_aux = Do_not_use_directly
module Inlining_cost = Do_not_use_directly
module Inlining_decision = Do_not_use_directly
module Inlining_decision_intf = Do_not_use_directly
module Inlining_stats = Do_not_use_directly
module Inlining_stats_types = Do_not_use_directly
module Inlining_transforms = Do_not_use_directly
module Instruct = Do_not_use_directly
module Int_replace_polymorphic_compare = Do_not_use_directly
module Interf = Do_not_use_directly
module Internal_variable_names = Do_not_use_directly
module Interval = Do_not_use_directly
module Invariant_params = Do_not_use_directly
module Lambda = Do_not_use_directly
module Lazy_backtrack = Do_not_use_directly
module Lift_code = Do_not_use_directly
module Lift_constants = Do_not_use_directly
module Lift_let_to_initialize_symbol = Do_not_use_directly
module Linear = Do_not_use_directly
module Linear_format = Do_not_use_directly
module Linearize = Do_not_use_directly
module Linkage_name = Do_not_use_directly
module Linscan = Do_not_use_directly
module Liveness = Do_not_use_directly
module Load_path = Do_not_use_directly
module Local_store = Do_not_use_directly
module Mach = Do_not_use_directly
module Main = Do_not_use_directly
module Main_args = Do_not_use_directly
module Maindriver = Do_not_use_directly
module Makedepend = Do_not_use_directly
module Matching = Do_not_use_directly
module Meta = Do_not_use_directly
module Misc = Do_not_use_directly
module Mtype = Do_not_use_directly
module Mutable_variable = Do_not_use_directly
module Numbers = Do_not_use_directly
module Opcodes = Do_not_use_directly
module Oprint = Do_not_use_directly
module Optcompile = Do_not_use_directly
module Opterrors = Do_not_use_directly
module Optmain = Do_not_use_directly
module Optmaindriver = Do_not_use_directly
module Outcometree = Do_not_use_directly
module Parameter = Do_not_use_directly
module Parmatch = Do_not_use_directly
module Parser = Do_not_use_directly
module Pass_wrapper = Do_not_use_directly
module Path = Do_not_use_directly
module Patterns = Do_not_use_directly
module Persistent_env = Do_not_use_directly
module Polling = Do_not_use_directly
module Pparse = Do_not_use_directly
module Predef = Do_not_use_directly
module Primitive = Do_not_use_directly
module Printast = Do_not_use_directly
module Printclambda = Do_not_use_directly
module Printclambda_primitives = Do_not_use_directly
module Printcmm = Do_not_use_directly
module Printinstr = Do_not_use_directly
module Printlambda = Do_not_use_directly
module Printlinear = Do_not_use_directly
module Printmach = Do_not_use_directly
module Printpat = Do_not_use_directly
module Printtyp = Do_not_use_directly
module Printtyped = Do_not_use_directly
module Proc = Do_not_use_directly
module Profile = Do_not_use_directly
module Projection = Do_not_use_directly
module Rec_check = Do_not_use_directly
module Ref_to_variables = Do_not_use_directly
module Reg = Do_not_use_directly
module Reload = Do_not_use_directly
module Reloadgen = Do_not_use_directly
module Remove_free_vars_equal_to_args = Do_not_use_directly
module Remove_unused_arguments = Do_not_use_directly
module Remove_unused_closure_vars = Do_not_use_directly
module Remove_unused_program_constructs = Do_not_use_directly
module Runtimedef = Do_not_use_directly
module Schedgen = Do_not_use_directly
module Scheduling = Do_not_use_directly
module Selectgen = Do_not_use_directly
module Selection = Do_not_use_directly
module Semantics_of_primitives = Do_not_use_directly
module Set_of_closures_id = Do_not_use_directly
module Set_of_closures_origin = Do_not_use_directly
module Shape = Do_not_use_directly
module Share_constants = Do_not_use_directly
module Signature_group = Do_not_use_directly
module Simple_value_approx = Do_not_use_directly
module Simplif = Do_not_use_directly
module Simplify_boxed_integer_ops = Do_not_use_directly
module Simplify_boxed_integer_ops_intf = Do_not_use_directly
module Simplify_common = Do_not_use_directly
module Simplify_primitives = Do_not_use_directly
module Spill = Do_not_use_directly
module Split = Do_not_use_directly
module Static_exception = Do_not_use_directly
module Strmatch = Do_not_use_directly
module Strongly_connected_components = Do_not_use_directly
module Stypes = Do_not_use_directly
module Subst = Do_not_use_directly
module Switch = Do_not_use_directly
module Symbol = Do_not_use_directly
module Symtable = Do_not_use_directly
module Tag = Do_not_use_directly
module Targetint = Do_not_use_directly
module Tast_iterator = Do_not_use_directly
module Tast_mapper = Do_not_use_directly
module Terminfo = Do_not_use_directly
module Tmc = Do_not_use_directly
module Topcommon = Do_not_use_directly
module Topdirs = Do_not_use_directly
module Topeval = Do_not_use_directly
module Tophooks = Do_not_use_directly
module Toploop = Do_not_use_directly
module Topmain = Do_not_use_directly
module Topprinters = Do_not_use_directly
module Topstart = Do_not_use_directly
module Trace = Do_not_use_directly
module Translattribute = Do_not_use_directly
module Translclass = Do_not_use_directly
module Translcore = Do_not_use_directly
module Translmod = Do_not_use_directly
module Translobj = Do_not_use_directly
module Translprim = Do_not_use_directly
module Traverse_for_exported_symbols = Do_not_use_directly
module Type_immediacy = Do_not_use_directly
module Typeclass = Do_not_use_directly
module Typecore = Do_not_use_directly
module Typedecl = Do_not_use_directly
module Typedecl_immediacy = Do_not_use_directly
module Typedecl_properties = Do_not_use_directly
module Typedecl_separability = Do_not_use_directly
module Typedecl_unboxed = Do_not_use_directly
module Typedecl_variance = Do_not_use_directly
module Typedtree = Do_not_use_directly
module Typemod = Do_not_use_directly
module Typeopt = Do_not_use_directly
module Types = Do_not_use_directly
module Typetexp = Do_not_use_directly
module Un_anf = Do_not_use_directly
module Unbox_closures = Do_not_use_directly
module Unbox_free_vars_of_closures = Do_not_use_directly
module Unbox_specialised_args = Do_not_use_directly
module Untypeast = Do_not_use_directly
module Var_within_closure = Do_not_use_directly
module Variable = Do_not_use_directly
module Warnings = Do_not_use_directly
module X86_ast = Do_not_use_directly
module X86_dsl = Do_not_use_directly
module X86_gas = Do_not_use_directly
module X86_masm = Do_not_use_directly
module X86_proc = Do_not_use_directly
module Ppxlib_private = Ppxlib.Ppxlib_private
module Located = Ppxlib__Ast_builder.Default.Located
val attribute :
  loc:Ppxlib__.Import.location ->
  name:string Ppxlib__.Import.loc ->
  payload:Ppxlib__.Import.payload -> Ppxlib__.Import.attribute
val binding_op :
  loc:Ppxlib__.Import.location ->
  op:string Ppxlib__.Import.loc ->
  pat:Ppxlib__.Import.pattern ->
  exp:Ppxlib__.Import.expression -> Ppxlib__.Import.binding_op
val case :
  lhs:Ppxlib__.Import.pattern ->
  guard:Ppxlib__.Import.expression option ->
  rhs:Ppxlib__.Import.expression -> Ppxlib__.Import.case
val pcl_constr :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.longident_loc ->
  Ppxlib__.Import.core_type list -> Ppxlib__.Import.class_expr
val pcl_structure :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.class_structure -> Ppxlib__.Import.class_expr
val pcl_fun :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.arg_label ->
  Ppxlib__.Import.expression option ->
  Ppxlib__.Import.pattern ->
  Ppxlib__.Import.class_expr -> Ppxlib__.Import.class_expr
val pcl_apply :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.class_expr ->
  (Ppxlib__.Import.arg_label * Ppxlib__.Import.expression) list ->
  Ppxlib__.Import.class_expr
val pcl_let :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.rec_flag ->
  Ppxlib__.Import.value_binding list ->
  Ppxlib__.Import.class_expr -> Ppxlib__.Import.class_expr
val pcl_constraint :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.class_expr ->
  Ppxlib__.Import.class_type -> Ppxlib__.Import.class_expr
val pcl_extension :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.extension -> Ppxlib__.Import.class_expr
val pcl_open :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.open_description ->
  Ppxlib__.Import.class_expr -> Ppxlib__.Import.class_expr
val pcf_inherit :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.override_flag ->
  Ppxlib__.Import.class_expr ->
  string Ppxlib__.Import.loc option -> Ppxlib__.Import.class_field
val pcf_val :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.label Ppxlib__.Import.loc * Ppxlib__.Import.mutable_flag *
  Ppxlib__.Import.class_field_kind -> Ppxlib__.Import.class_field
val pcf_method :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.label Ppxlib__.Import.loc * Ppxlib__.Import.private_flag *
  Ppxlib__.Import.class_field_kind -> Ppxlib__.Import.class_field
val pcf_constraint :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.core_type * Ppxlib__.Import.core_type ->
  Ppxlib__.Import.class_field
val pcf_initializer :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.expression -> Ppxlib__.Import.class_field
val pcf_attribute :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.attribute -> Ppxlib__.Import.class_field
val pcf_extension :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.extension -> Ppxlib__.Import.class_field
val class_infos :
  loc:Ppxlib__.Import.location ->
  virt:Ppxlib__.Import.virtual_flag ->
  params:(Ppxlib__.Import.core_type *
          (Ppxlib__.Import.variance * Ppxlib__.Import.injectivity))
         list ->
  name:string Ppxlib__.Import.loc ->
  expr:'a -> 'a Ppxlib__.Import.class_infos
val class_signature :
  self:Ppxlib__.Import.core_type ->
  fields:Ppxlib__.Import.class_type_field list ->
  Ppxlib__.Import.class_signature
val class_structure :
  self:Ppxlib__.Import.pattern ->
  fields:Ppxlib__.Import.class_field list -> Ppxlib__.Import.class_structure
val pcty_constr :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.longident_loc ->
  Ppxlib__.Import.core_type list -> Ppxlib__.Import.class_type
val pcty_signature :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.class_signature -> Ppxlib__.Import.class_type
val pcty_arrow :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.arg_label ->
  Ppxlib__.Import.core_type ->
  Ppxlib__.Import.class_type -> Ppxlib__.Import.class_type
val pcty_extension :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.extension -> Ppxlib__.Import.class_type
val pcty_open :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.open_description ->
  Ppxlib__.Import.class_type -> Ppxlib__.Import.class_type
val pctf_inherit :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.class_type -> Ppxlib__.Import.class_type_field
val pctf_val :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.label Ppxlib__.Import.loc * Ppxlib__.Import.mutable_flag *
  Ppxlib__.Import.virtual_flag * Ppxlib__.Import.core_type ->
  Ppxlib__.Import.class_type_field
val pctf_method :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.label Ppxlib__.Import.loc * Ppxlib__.Import.private_flag *
  Ppxlib__.Import.virtual_flag * Ppxlib__.Import.core_type ->
  Ppxlib__.Import.class_type_field
val pctf_constraint :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.core_type * Ppxlib__.Import.core_type ->
  Ppxlib__.Import.class_type_field
val pctf_attribute :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.attribute -> Ppxlib__.Import.class_type_field
val pctf_extension :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.extension -> Ppxlib__.Import.class_type_field
val ptyp_any : loc:Ppxlib__.Import.location -> Ppxlib__.Import.core_type
val ptyp_var :
  loc:Ppxlib__.Import.location -> string -> Ppxlib__.Import.core_type
val ptyp_arrow :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.arg_label ->
  Ppxlib__.Import.core_type ->
  Ppxlib__.Import.core_type -> Ppxlib__.Import.core_type
val ptyp_tuple :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.core_type list -> Ppxlib__.Import.core_type
val ptyp_constr :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.longident_loc ->
  Ppxlib__.Import.core_type list -> Ppxlib__.Import.core_type
val ptyp_object :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.object_field list ->
  Ppxlib__.Import.closed_flag -> Ppxlib__.Import.core_type
val ptyp_class :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.longident_loc ->
  Ppxlib__.Import.core_type list -> Ppxlib__.Import.core_type
val ptyp_alias :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.core_type -> string -> Ppxlib__.Import.core_type
val ptyp_variant :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.row_field list ->
  Ppxlib__.Import.closed_flag ->
  Ppxlib__.Import.label list option -> Ppxlib__.Import.core_type
val ptyp_poly :
  loc:Ppxlib__.Import.location ->
  string Ppxlib__.Import.loc list ->
  Ppxlib__.Import.core_type -> Ppxlib__.Import.core_type
val ptyp_package :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.package_type -> Ppxlib__.Import.core_type
val ptyp_extension :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.extension -> Ppxlib__.Import.core_type
val pdir_string :
  loc:Ppxlib__.Import.location ->
  string -> Ppxlib__.Import.directive_argument
val pdir_int :
  loc:Ppxlib__.Import.location ->
  string -> char option -> Ppxlib__.Import.directive_argument
val pdir_ident :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.longident -> Ppxlib__.Import.directive_argument
val pdir_bool :
  loc:Ppxlib__.Import.location -> bool -> Ppxlib__.Import.directive_argument
val pexp_ident :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.longident_loc -> Ppxlib__.Import.expression
val pexp_constant :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.constant -> Ppxlib__.Import.expression
val pexp_let :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.rec_flag ->
  Ppxlib__.Import.value_binding list ->
  Ppxlib__.Import.expression -> Ppxlib__.Import.expression
val pexp_function :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.cases -> Ppxlib__.Import.expression
val pexp_fun :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.arg_label ->
  Ppxlib__.Import.expression option ->
  Ppxlib__.Import.pattern ->
  Ppxlib__.Import.expression -> Ppxlib__.Import.expression
val pexp_apply :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.expression ->
  (Ppxlib__.Import.arg_label * Ppxlib__.Import.expression) list ->
  Ppxlib__.Import.expression
val pexp_match :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.expression ->
  Ppxlib__.Import.cases -> Ppxlib__.Import.expression
val pexp_try :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.expression ->
  Ppxlib__.Import.cases -> Ppxlib__.Import.expression
val pexp_tuple :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.expression list -> Ppxlib__.Import.expression
val pexp_construct :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.longident_loc ->
  Ppxlib__.Import.expression option -> Ppxlib__.Import.expression
val pexp_variant :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.label ->
  Ppxlib__.Import.expression option -> Ppxlib__.Import.expression
val pexp_record :
  loc:Ppxlib__.Import.location ->
  (Ppxlib__.Import.longident_loc * Ppxlib__.Import.expression) list ->
  Ppxlib__.Import.expression option -> Ppxlib__.Import.expression
val pexp_field :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.expression ->
  Ppxlib__.Import.longident_loc -> Ppxlib__.Import.expression
val pexp_setfield :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.expression ->
  Ppxlib__.Import.longident_loc ->
  Ppxlib__.Import.expression -> Ppxlib__.Import.expression
val pexp_array :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.expression list -> Ppxlib__.Import.expression
val pexp_ifthenelse :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.expression ->
  Ppxlib__.Import.expression ->
  Ppxlib__.Import.expression option -> Ppxlib__.Import.expression
val pexp_sequence :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.expression ->
  Ppxlib__.Import.expression -> Ppxlib__.Import.expression
val pexp_while :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.expression ->
  Ppxlib__.Import.expression -> Ppxlib__.Import.expression
val pexp_for :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.pattern ->
  Ppxlib__.Import.expression ->
  Ppxlib__.Import.expression ->
  Ppxlib__.Import.direction_flag ->
  Ppxlib__.Import.expression -> Ppxlib__.Import.expression
val pexp_constraint :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.expression ->
  Ppxlib__.Import.core_type -> Ppxlib__.Import.expression
val pexp_coerce :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.expression ->
  Ppxlib__.Import.core_type option ->
  Ppxlib__.Import.core_type -> Ppxlib__.Import.expression
val pexp_send :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.expression ->
  Ppxlib__.Import.label Ppxlib__.Import.loc -> Ppxlib__.Import.expression
val pexp_new :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.longident_loc -> Ppxlib__.Import.expression
val pexp_setinstvar :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.label Ppxlib__.Import.loc ->
  Ppxlib__.Import.expression -> Ppxlib__.Import.expression
val pexp_override :
  loc:Ppxlib__.Import.location ->
  (Ppxlib__.Import.label Ppxlib__.Import.loc * Ppxlib__.Import.expression)
  list -> Ppxlib__.Import.expression
val pexp_letmodule :
  loc:Ppxlib__.Import.location ->
  string option Ppxlib__.Import.loc ->
  Ppxlib__.Import.module_expr ->
  Ppxlib__.Import.expression -> Ppxlib__.Import.expression
val pexp_letexception :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.extension_constructor ->
  Ppxlib__.Import.expression -> Ppxlib__.Import.expression
val pexp_assert :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.expression -> Ppxlib__.Import.expression
val pexp_lazy :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.expression -> Ppxlib__.Import.expression
val pexp_poly :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.expression ->
  Ppxlib__.Import.core_type option -> Ppxlib__.Import.expression
val pexp_object :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.class_structure -> Ppxlib__.Import.expression
val pexp_newtype :
  loc:Ppxlib__.Import.location ->
  string Ppxlib__.Import.loc ->
  Ppxlib__.Import.expression -> Ppxlib__.Import.expression
val pexp_pack :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.module_expr -> Ppxlib__.Import.expression
val pexp_open :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.open_declaration ->
  Ppxlib__.Import.expression -> Ppxlib__.Import.expression
val pexp_letop :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.letop -> Ppxlib__.Import.expression
val pexp_extension :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.extension -> Ppxlib__.Import.expression
val pexp_unreachable :
  loc:Ppxlib__.Import.location -> Ppxlib__.Import.expression
val extension_constructor :
  loc:Ppxlib__.Import.location ->
  name:string Ppxlib__.Import.loc ->
  kind:Ppxlib__.Import.extension_constructor_kind ->
  Ppxlib__.Import.extension_constructor
val include_infos :
  loc:Ppxlib__.Import.location -> 'a -> 'a Ppxlib__.Import.include_infos
val label_declaration :
  loc:Ppxlib__.Import.location ->
  name:string Ppxlib__.Import.loc ->
  mutable_:Ppxlib__.Import.mutable_flag ->
  type_:Ppxlib__.Import.core_type -> Ppxlib__.Import.label_declaration
val letop :
  let_:Ppxlib__.Import.binding_op ->
  ands:Ppxlib__.Import.binding_op list ->
  body:Ppxlib__.Import.expression -> Ppxlib__.Import.letop
val location :
  start:Ppxlib__.Import.position ->
  end_:Ppxlib__.Import.position -> ghost:bool -> Ppxlib__.Import.location
val module_binding :
  loc:Ppxlib__.Import.location ->
  name:string option Ppxlib__.Import.loc ->
  expr:Ppxlib__.Import.module_expr -> Ppxlib__.Import.module_binding
val module_declaration :
  loc:Ppxlib__.Import.location ->
  name:string option Ppxlib__.Import.loc ->
  type_:Ppxlib__.Import.module_type -> Ppxlib__.Import.module_declaration
val pmod_ident :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.longident_loc -> Ppxlib__.Import.module_expr
val pmod_structure :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.structure -> Ppxlib__.Import.module_expr
val pmod_functor :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.functor_parameter ->
  Ppxlib__.Import.module_expr -> Ppxlib__.Import.module_expr
val pmod_apply :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.module_expr ->
  Ppxlib__.Import.module_expr -> Ppxlib__.Import.module_expr
val pmod_constraint :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.module_expr ->
  Ppxlib__.Import.module_type -> Ppxlib__.Import.module_expr
val pmod_unpack :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.expression -> Ppxlib__.Import.module_expr
val pmod_extension :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.extension -> Ppxlib__.Import.module_expr
val module_substitution :
  loc:Ppxlib__.Import.location ->
  name:string Ppxlib__.Import.loc ->
  manifest:Ppxlib__.Import.longident_loc ->
  Ppxlib__.Import.module_substitution
val pmty_ident :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.longident_loc -> Ppxlib__.Import.module_type
val pmty_signature :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.signature -> Ppxlib__.Import.module_type
val pmty_functor :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.functor_parameter ->
  Ppxlib__.Import.module_type -> Ppxlib__.Import.module_type
val pmty_with :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.module_type ->
  Ppxlib__.Import.with_constraint list -> Ppxlib__.Import.module_type
val pmty_typeof :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.module_expr -> Ppxlib__.Import.module_type
val pmty_extension :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.extension -> Ppxlib__.Import.module_type
val pmty_alias :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.longident_loc -> Ppxlib__.Import.module_type
val module_type_declaration :
  loc:Ppxlib__.Import.location ->
  name:string Ppxlib__.Import.loc ->
  type_:Ppxlib__.Import.module_type option ->
  Ppxlib__.Import.module_type_declaration
val otag :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.label Ppxlib__.Import.loc ->
  Ppxlib__.Import.core_type -> Ppxlib__.Import.object_field
val oinherit :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.core_type -> Ppxlib__.Import.object_field
val open_infos :
  loc:Ppxlib__.Import.location ->
  expr:'a ->
  override:Ppxlib__.Import.override_flag -> 'a Ppxlib__.Import.open_infos
val ppat_any : loc:Ppxlib__.Import.location -> Ppxlib__.Import.pattern
val ppat_var :
  loc:Ppxlib__.Import.location ->
  string Ppxlib__.Import.loc -> Ppxlib__.Import.pattern
val ppat_alias :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.pattern ->
  string Ppxlib__.Import.loc -> Ppxlib__.Import.pattern
val ppat_constant :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.constant -> Ppxlib__.Import.pattern
val ppat_interval :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.constant ->
  Ppxlib__.Import.constant -> Ppxlib__.Import.pattern
val ppat_tuple :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.pattern list -> Ppxlib__.Import.pattern
val ppat_variant :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.label ->
  Ppxlib__.Import.pattern option -> Ppxlib__.Import.pattern
val ppat_record :
  loc:Ppxlib__.Import.location ->
  (Ppxlib__.Import.longident_loc * Ppxlib__.Import.pattern) list ->
  Ppxlib__.Import.closed_flag -> Ppxlib__.Import.pattern
val ppat_array :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.pattern list -> Ppxlib__.Import.pattern
val ppat_or :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.pattern ->
  Ppxlib__.Import.pattern -> Ppxlib__.Import.pattern
val ppat_constraint :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.pattern ->
  Ppxlib__.Import.core_type -> Ppxlib__.Import.pattern
val ppat_type :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.longident_loc -> Ppxlib__.Import.pattern
val ppat_lazy :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.pattern -> Ppxlib__.Import.pattern
val ppat_unpack :
  loc:Ppxlib__.Import.location ->
  string option Ppxlib__.Import.loc -> Ppxlib__.Import.pattern
val ppat_exception :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.pattern -> Ppxlib__.Import.pattern
val ppat_extension :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.extension -> Ppxlib__.Import.pattern
val ppat_open :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.longident_loc ->
  Ppxlib__.Import.pattern -> Ppxlib__.Import.pattern
val position :
  fname:string -> lnum:int -> bol:int -> cnum:int -> Ppxlib__.Import.position
val rtag :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.label Ppxlib__.Import.loc ->
  bool -> Ppxlib__.Import.core_type list -> Ppxlib__.Import.row_field
val rinherit :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.core_type -> Ppxlib__.Import.row_field
val psig_value :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.value_description -> Ppxlib__.Import.signature_item
val psig_type :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.rec_flag ->
  Ppxlib__.Import.type_declaration list -> Ppxlib__.Import.signature_item
val psig_typesubst :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.type_declaration list -> Ppxlib__.Import.signature_item
val psig_typext :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.type_extension -> Ppxlib__.Import.signature_item
val psig_exception :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.type_exception -> Ppxlib__.Import.signature_item
val psig_module :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.module_declaration -> Ppxlib__.Import.signature_item
val psig_modsubst :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.module_substitution -> Ppxlib__.Import.signature_item
val psig_recmodule :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.module_declaration list -> Ppxlib__.Import.signature_item
val psig_modtype :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.module_type_declaration -> Ppxlib__.Import.signature_item
val psig_modtypesubst :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.module_type_declaration -> Ppxlib__.Import.signature_item
val psig_open :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.open_description -> Ppxlib__.Import.signature_item
val psig_include :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.include_description -> Ppxlib__.Import.signature_item
val psig_class :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.class_description list -> Ppxlib__.Import.signature_item
val psig_class_type :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.class_type_declaration list ->
  Ppxlib__.Import.signature_item
val psig_attribute :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.attribute -> Ppxlib__.Import.signature_item
val psig_extension :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.extension ->
  Ppxlib__.Import.attributes -> Ppxlib__.Import.signature_item
val pstr_eval :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.expression ->
  Ppxlib__.Import.attributes -> Ppxlib__.Import.structure_item
val pstr_value :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.rec_flag ->
  Ppxlib__.Import.value_binding list -> Ppxlib__.Import.structure_item
val pstr_primitive :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.value_description -> Ppxlib__.Import.structure_item
val pstr_type :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.rec_flag ->
  Ppxlib__.Import.type_declaration list -> Ppxlib__.Import.structure_item
val pstr_typext :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.type_extension -> Ppxlib__.Import.structure_item
val pstr_exception :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.type_exception -> Ppxlib__.Import.structure_item
val pstr_module :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.module_binding -> Ppxlib__.Import.structure_item
val pstr_recmodule :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.module_binding list -> Ppxlib__.Import.structure_item
val pstr_modtype :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.module_type_declaration -> Ppxlib__.Import.structure_item
val pstr_open :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.open_declaration -> Ppxlib__.Import.structure_item
val pstr_class :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.class_declaration list -> Ppxlib__.Import.structure_item
val pstr_class_type :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.class_type_declaration list ->
  Ppxlib__.Import.structure_item
val pstr_include :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.include_declaration -> Ppxlib__.Import.structure_item
val pstr_attribute :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.attribute -> Ppxlib__.Import.structure_item
val pstr_extension :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.extension ->
  Ppxlib__.Import.attributes -> Ppxlib__.Import.structure_item
val toplevel_directive :
  loc:Ppxlib__.Import.location ->
  name:string Ppxlib__.Import.loc ->
  arg:Ppxlib__.Import.directive_argument option ->
  Ppxlib__.Import.toplevel_directive
val type_declaration :
  loc:Ppxlib__.Import.location ->
  name:string Ppxlib__.Import.loc ->
  params:(Ppxlib__.Import.core_type *
          (Ppxlib__.Import.variance * Ppxlib__.Import.injectivity))
         list ->
  cstrs:(Ppxlib__.Import.core_type * Ppxlib__.Import.core_type *
         Ppxlib__.Import.location)
        list ->
  kind:Ppxlib__.Import.type_kind ->
  private_:Ppxlib__.Import.private_flag ->
  manifest:Ppxlib__.Import.core_type option ->
  Ppxlib__.Import.type_declaration
val type_exception :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.extension_constructor -> Ppxlib__.Import.type_exception
val type_extension :
  loc:Ppxlib__.Import.location ->
  path:Ppxlib__.Import.longident_loc ->
  params:(Ppxlib__.Import.core_type *
          (Ppxlib__.Import.variance * Ppxlib__.Import.injectivity))
         list ->
  constructors:Ppxlib__.Import.extension_constructor list ->
  private_:Ppxlib__.Import.private_flag -> Ppxlib__.Import.type_extension
val value_binding :
  loc:Ppxlib__.Import.location ->
  pat:Ppxlib__.Import.pattern ->
  expr:Ppxlib__.Import.expression -> Ppxlib__.Import.value_binding
val value_description :
  loc:Ppxlib__.Import.location ->
  name:string Ppxlib__.Import.loc ->
  type_:Ppxlib__.Import.core_type ->
  prim:string list -> Ppxlib__.Import.value_description
module Latest = Ppxlib__Ast_builder.Default.Latest
val ppat_construct :
  loc:Ppxlib__.Import.location ->
  Ppxlib__.Import.longident Ppxlib__.Import.loc ->
  Ppxlib__.Import.pattern option -> Ppxlib__.Import.pattern
val constructor_declaration :
  loc:Ppxlib__.Import.location ->
  name:Ppxlib__.Import.label Ppxlib__.Import.loc ->
  args:Ppxlib__.Import.constructor_arguments ->
  res:Ppxlib__.Import.core_type option ->
  Ppxlib__.Import.constructor_declaration
val eint :
  (int -> Ppxlib__.Import.expression) Ppxlib__.Ast_builder_intf.with_location
val echar :
  (char -> Ppxlib__.Import.expression)
  Ppxlib__.Ast_builder_intf.with_location
val estring :
  (string -> Ppxlib__.Import.expression)
  Ppxlib__.Ast_builder_intf.with_location
val efloat :
  (string -> Ppxlib__.Import.expression)
  Ppxlib__.Ast_builder_intf.with_location
val eint32 :
  (int32 -> Ppxlib__.Import.expression)
  Ppxlib__.Ast_builder_intf.with_location
val eint64 :
  (int64 -> Ppxlib__.Import.expression)
  Ppxlib__.Ast_builder_intf.with_location
val enativeint :
  (nativeint -> Ppxlib__.Import.expression)
  Ppxlib__.Ast_builder_intf.with_location
val ebool :
  (bool -> Ppxlib__.Import.expression)
  Ppxlib__.Ast_builder_intf.with_location
val pint :
  (int -> Ppxlib__.Import.pattern) Ppxlib__.Ast_builder_intf.with_location
val pchar :
  (char -> Ppxlib__.Import.pattern) Ppxlib__.Ast_builder_intf.with_location
val pstring :
  (string -> Ppxlib__.Import.pattern) Ppxlib__.Ast_builder_intf.with_location
val pfloat :
  (string -> Ppxlib__.Import.pattern) Ppxlib__.Ast_builder_intf.with_location
val pint32 :
  (int32 -> Ppxlib__.Import.pattern) Ppxlib__.Ast_builder_intf.with_location
val pint64 :
  (int64 -> Ppxlib__.Import.pattern) Ppxlib__.Ast_builder_intf.with_location
val pnativeint :
  (nativeint -> Ppxlib__.Import.pattern)
  Ppxlib__.Ast_builder_intf.with_location
val pbool :
  (bool -> Ppxlib__.Import.pattern) Ppxlib__.Ast_builder_intf.with_location
val eunit :
  Ppxlib__.Import.expression Ppxlib__.Ast_builder_intf.with_location
val punit : Ppxlib__.Import.pattern Ppxlib__.Ast_builder_intf.with_location
val evar :
  (string -> Ppxlib__.Import.expression)
  Ppxlib__.Ast_builder_intf.with_location
val pvar :
  (string -> Ppxlib__.Import.pattern) Ppxlib__.Ast_builder_intf.with_location
val eapply :
  (Ppxlib__.Import.expression ->
   Ppxlib__.Import.expression list -> Ppxlib__.Import.expression)
  Ppxlib__.Ast_builder_intf.with_location
val eabstract :
  (Ppxlib__.Import.pattern list ->
   Ppxlib__.Import.expression -> Ppxlib__.Import.expression)
  Ppxlib__.Ast_builder_intf.with_location
val esequence :
  (Ppxlib__.Import.expression list -> Ppxlib__.Import.expression)
  Ppxlib__.Ast_builder_intf.with_location
val ppat_tuple_opt :
  (Ppxlib__.Import.pattern list -> Ppxlib__.Import.pattern option)
  Ppxlib__.Ast_builder_intf.with_location
val pexp_tuple_opt :
  (Ppxlib__.Import.expression list -> Ppxlib__.Import.expression option)
  Ppxlib__.Ast_builder_intf.with_location
val pconstruct :
  Ppxlib__.Import.constructor_declaration ->
  Ppxlib__.Import.pattern option -> Ppxlib__.Import.pattern
val econstruct :
  Ppxlib__.Import.constructor_declaration ->
  Ppxlib__.Import.expression option -> Ppxlib__.Import.expression
val elist :
  (Ppxlib__.Import.expression list -> Ppxlib__.Import.expression)
  Ppxlib__.Ast_builder_intf.with_location
val plist :
  (Ppxlib__.Import.pattern list -> Ppxlib__.Import.pattern)
  Ppxlib__.Ast_builder_intf.with_location
val pstr_value_list :
  loc:Ppxlib__.Location.t ->
  Ppxlib__.Import.Asttypes.rec_flag ->
  Ppxlib__.Import.value_binding list -> Ppxlib__.Import.structure_item list
val nonrec_type_declaration :
  (name:string Ppxlib__.Loc.t ->
   params:(Ppxlib__.Import.core_type * Ppxlib__.Import.Asttypes.variance)
          list ->
   cstrs:(Ppxlib__.Import.core_type * Ppxlib__.Import.core_type *
          Ppxlib__.Location.t)
         list ->
   kind:Ppxlib__.Import.type_kind ->
   private_:Ppxlib__.Import.Asttypes.private_flag ->
   manifest:Ppxlib__.Import.core_type option ->
   Ppxlib__.Import.type_declaration)
  Ppxlib__.Ast_builder_intf.with_location
val unapplied_type_constr_conv :
  (Ppxlib__.Longident.t Ppxlib__.Loc.t ->
   f:(string -> string) -> Ppxlib__.Import.expression)
  Ppxlib__.Ast_builder_intf.with_location
val type_constr_conv :
  (Ppxlib__.Longident.t Ppxlib__.Loc.t ->
   f:(string -> string) ->
   Ppxlib__.Import.expression list -> Ppxlib__.Import.expression)
  Ppxlib__.Ast_builder_intf.with_location
val eta_reduce :
  Ppxlib__.Import.expression -> Ppxlib__.Import.expression option
val eta_reduce_if_possible :
  Ppxlib__.Import.expression -> Ppxlib__.Import.expression
val eta_reduce_if_possible_and_nonrec :
  Ppxlib__.Import.expression ->
  rec_flag:Ppxlib__.Import.rec_flag -> Ppxlib__.Import.expression
val ( ^^ ) :
  ('a, 'b, 'c, 'd, 'e, 'f) Stdlib.format6 ->
  ('f, 'b, 'c, 'e, 'g, 'h) Stdlib.format6 ->
  ('a, 'b, 'c, 'd, 'g, 'h) Stdlib.format6
val error :
  loc:Location.t ->
  ('a, Ppxlib__.Import.Caml.Format.formatter, unit, unit, unit, 'b)
  Stdlib.format6 -> 'a
val invalid :
  loc:Location.t ->
  ('a, Ppxlib__.Import.Caml.Format.formatter, unit, unit, unit, 'b)
  Stdlib.format6 -> 'a
val unsupported :
  loc:Location.t ->
  ('a, Ppxlib__.Import.Caml.Format.formatter, unit, unit, unit, 'b)
  Stdlib.format6 -> 'a
val internal_error :
  loc:Location.t ->
  ('a, Ppxlib__.Import.Caml.Format.formatter, unit, unit, unit, 'b)
  Stdlib.format6 -> 'a
val short_string_of_core_type : core_type -> string
val loc_map : 'a loc -> f:('a -> 'b) -> 'b loc
val lident_loc : string loc -> Ppxlib__.Longident.t loc
val prefixed_type_name : String.t -> String.t -> String.t
val generator_name : String.t -> String.t
val observer_name : String.t -> String.t
val shrinker_name : String.t -> String.t
val pname : 'a loc -> f:('a -> string) -> Ppxlib__.Import.pattern
val ename : 'a loc -> f:('a -> string) -> Ppxlib__.Import.expression
val pgenerator : String.t loc -> Ppxlib__.Import.pattern
val pobserver : String.t loc -> Ppxlib__.Import.pattern
val pshrinker : String.t loc -> Ppxlib__.Import.pattern
val egenerator : String.t loc -> Ppxlib__.Import.expression
val eobserver : String.t loc -> Ppxlib__.Import.expression
val eshrinker : String.t loc -> Ppxlib__.Import.expression
val ptuple :
  loc:location -> Ppxlib__.Import.pattern list -> Ppxlib_ast.Ast.pattern
val gensym :
  String.t ->
  location -> Ppxlib__.Import.pattern * Ppxlib__.Import.expression
val gensyms :
  String.t ->
  location List.t ->
  Ppxlib__.Import.pattern List.t * Ppxlib__.Import.expression List.t
val gensymss :
  String.t ->
  location List.t List.t ->
  Ppxlib__.Import.pattern List.t List.t *
  Ppxlib__.Import.expression List.t List.t
val fn_map_label :
  loc:location ->
  from:Ppxlib__.Import.arg_label ->
  ("DEBUG:rule", [(("raise_notrace", 6858), ((Tag1 (0, (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -12773), ((("a")), 100000000, 0, -12772), 0), 100000000, 0, -12771), (("%raise_notrace", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 10, 312, 315), ("shadow-stdlib/src/shadow_stdlib.mli", 10, 312, 325), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.raise_notrace] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 10, 312, 327), ("shadow-stdlib/src/shadow_stdlib.mli", 13, 468, 517), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 10, 312, 326), ("shadow-stdlib/src/shadow_stdlib.mli", 13, 468, 518), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 10, 312, 326), ("shadow-stdlib/src/shadow_stdlib.mli", 13, 468, 518), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 10, 312, 312), ("shadow-stdlib/src/shadow_stdlib.mli", 13, 468, 519), 0))], Tag1 ("Shadow_stdlib", 1)), 0); Tag2 (("Exit", 6859), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 28, 1006, 1008), ("shadow-stdlib/src/shadow_stdlib.mli", 28, 1006, 1018), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.Exit instead", (("shadow-stdlib/src/shadow_stdlib.mli", 28, 1006, 1020), ("shadow-stdlib/src/shadow_stdlib.mli", 32, 1241, 1285), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 28, 1006, 1019), ("shadow-stdlib/src/shadow_stdlib.mli", 32, 1241, 1286), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 28, 1006, 1019), ("shadow-stdlib/src/shadow_stdlib.mli", 32, 1241, 1286), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 28, 1006, 1006), ("shadow-stdlib/src/shadow_stdlib.mli", 32, 1241, 1287), 0))], Tag1 ("Shadow_stdlib", 4)), 2, 0); Tag2 (("Not_found", 6860), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 35, 1309, 1311), ("shadow-stdlib/src/shadow_stdlib.mli", 35, 1309, 1321), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nInstead of raising [Not_found], consider using [raise_s] with an informative error\nmessage.  If code needs to distinguish [Not_found] from other exceptions, please change\nit to handle both [Not_found] and [Not_found_s].  Then, instead of raising [Not_found],\nraise [Not_found_s] with an informative error message.", (("shadow-stdlib/src/shadow_stdlib.mli", 35, 1309, 1323), ("shadow-stdlib/src/shadow_stdlib.mli", 40, 1653, 1707), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 35, 1309, 1322), ("shadow-stdlib/src/shadow_stdlib.mli", 40, 1653, 1708), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 35, 1309, 1322), ("shadow-stdlib/src/shadow_stdlib.mli", 40, 1653, 1708), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 35, 1309, 1309), ("shadow-stdlib/src/shadow_stdlib.mli", 40, 1653, 1709), 0))], Tag1 ("Shadow_stdlib", 5)), 2, 0); (("==", 6861), ((Tag1 (0, ((("a")), 100000000, 0, -12770), (Tag1 (0, ((("a")), 100000000, 0, -12770), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -12769), 0), 100000000, 0, -12768), 0), 100000000, 0, -12767), (("%eq", 2, 1, "", [0; 0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 97, 3958, 3961), ("shadow-stdlib/src/shadow_stdlib.mli", 97, 3958, 3971), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [phys_equal] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 97, 3958, 3973), ("shadow-stdlib/src/shadow_stdlib.mli", 99, 4044, 4069), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 97, 3958, 3972), ("shadow-stdlib/src/shadow_stdlib.mli", 99, 4044, 4070), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 97, 3958, 3972), ("shadow-stdlib/src/shadow_stdlib.mli", 99, 4044, 4070), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 97, 3958, 3958), ("shadow-stdlib/src/shadow_stdlib.mli", 99, 4044, 4071), 0))], Tag1 ("Shadow_stdlib", 15)), 0); (("!=", 6862), ((Tag1 (0, ((("a")), 100000000, 0, -12766), (Tag1 (0, ((("a")), 100000000, 0, -12766), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -12765), 0), 100000000, 0, -12764), 0), 100000000, 0, -12763), (("%noteq", 2, 1, "", [0; 0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 102, 4119, 4122), ("shadow-stdlib/src/shadow_stdlib.mli", 102, 4119, 4132), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [not (phys_equal ...)] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 102, 4119, 4134), ("shadow-stdlib/src/shadow_stdlib.mli", 104, 4205, 4240), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 102, 4119, 4133), ("shadow-stdlib/src/shadow_stdlib.mli", 104, 4205, 4241), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 102, 4119, 4133), ("shadow-stdlib/src/shadow_stdlib.mli", 104, 4205, 4241), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 102, 4119, 4119), ("shadow-stdlib/src/shadow_stdlib.mli", 104, 4205, 4242), 0))], Tag1 ("Shadow_stdlib", 16)), 0); (("__LOC__", 6863), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12762), (("%loc_LOC", 0, 1, "", 0, 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 125, 5030, 5033), ("shadow-stdlib/src/shadow_stdlib.mli", 125, 5030, 5043), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.__LOC__] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 125, 5030, 5045), ("shadow-stdlib/src/shadow_stdlib.mli", 128, 5186, 5229), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 125, 5030, 5044), ("shadow-stdlib/src/shadow_stdlib.mli", 128, 5186, 5230), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 125, 5030, 5044), ("shadow-stdlib/src/shadow_stdlib.mli", 128, 5186, 5230), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 125, 5030, 5030), ("shadow-stdlib/src/shadow_stdlib.mli", 128, 5186, 5231), 0))], Tag1 ("Shadow_stdlib", 20)), 0); (("__FILE__", 6864), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12761), (("%loc_FILE", 0, 1, "", 0, 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 131, 5274, 5277), ("shadow-stdlib/src/shadow_stdlib.mli", 131, 5274, 5287), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.__FILE__] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 131, 5274, 5289), ("shadow-stdlib/src/shadow_stdlib.mli", 134, 5430, 5474), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 131, 5274, 5288), ("shadow-stdlib/src/shadow_stdlib.mli", 134, 5430, 5475), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 131, 5274, 5288), ("shadow-stdlib/src/shadow_stdlib.mli", 134, 5430, 5475), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 131, 5274, 5274), ("shadow-stdlib/src/shadow_stdlib.mli", 134, 5430, 5476), 0))], Tag1 ("Shadow_stdlib", 21)), 0); (("__LINE__", 6865), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12760), (("%loc_LINE", 0, 1, "", 0, 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 137, 5516, 5519), ("shadow-stdlib/src/shadow_stdlib.mli", 137, 5516, 5529), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.__LINE__] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 137, 5516, 5531), ("shadow-stdlib/src/shadow_stdlib.mli", 140, 5672, 5716), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 137, 5516, 5530), ("shadow-stdlib/src/shadow_stdlib.mli", 140, 5672, 5717), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 137, 5516, 5530), ("shadow-stdlib/src/shadow_stdlib.mli", 140, 5672, 5717), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 137, 5516, 5516), ("shadow-stdlib/src/shadow_stdlib.mli", 140, 5672, 5718), 0))], Tag1 ("Shadow_stdlib", 22)), 0); (("__MODULE__", 6866), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12759), (("%loc_MODULE", 0, 1, "", 0, 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 143, 5765, 5768), ("shadow-stdlib/src/shadow_stdlib.mli", 143, 5765, 5778), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.__MODULE__] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 143, 5765, 5780), ("shadow-stdlib/src/shadow_stdlib.mli", 146, 5921, 5967), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 143, 5765, 5779), ("shadow-stdlib/src/shadow_stdlib.mli", 146, 5921, 5968), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 143, 5765, 5779), ("shadow-stdlib/src/shadow_stdlib.mli", 146, 5921, 5968), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 143, 5765, 5765), ("shadow-stdlib/src/shadow_stdlib.mli", 146, 5921, 5969), 0))], Tag1 ("Shadow_stdlib", 23)), 0); (("__POS__", 6867), ((Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12755); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12756); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12757); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12758)]), 100000000, 0, -12754), (("%loc_POS", 0, 1, "", 0, 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 149, 6028, 6031), ("shadow-stdlib/src/shadow_stdlib.mli", 149, 6028, 6041), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.__POS__] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 149, 6028, 6043), ("shadow-stdlib/src/shadow_stdlib.mli", 152, 6184, 6227), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 149, 6028, 6042), ("shadow-stdlib/src/shadow_stdlib.mli", 152, 6184, 6228), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 149, 6028, 6042), ("shadow-stdlib/src/shadow_stdlib.mli", 152, 6184, 6228), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 149, 6028, 6028), ("shadow-stdlib/src/shadow_stdlib.mli", 152, 6184, 6229), 0))], Tag1 ("Shadow_stdlib", 24)), 0); (("__FUNCTION__", 6868), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12753), (("%loc_FUNCTION", 0, 1, "", 0, 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 155, 6280, 6283), ("shadow-stdlib/src/shadow_stdlib.mli", 155, 6280, 6293), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.__FUNCTION__] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 155, 6280, 6295), ("shadow-stdlib/src/shadow_stdlib.mli", 158, 6436, 6484), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 155, 6280, 6294), ("shadow-stdlib/src/shadow_stdlib.mli", 158, 6436, 6485), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 155, 6280, 6294), ("shadow-stdlib/src/shadow_stdlib.mli", 158, 6436, 6485), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 155, 6280, 6280), ("shadow-stdlib/src/shadow_stdlib.mli", 158, 6436, 6486), 0))], Tag1 ("Shadow_stdlib", 25)), 0); (("__LOC_OF__", 6869), ((Tag1 (0, ((("a")), 100000000, 0, -12752), (Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12751); ((("a")), 100000000, 0, -12752)]), 100000000, 0, -12750), 0), 100000000, 0, -12749), (("%loc_LOC", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 161, 6541, 6544), ("shadow-stdlib/src/shadow_stdlib.mli", 161, 6541, 6554), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.__LOC_OF__] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 161, 6541, 6556), ("shadow-stdlib/src/shadow_stdlib.mli", 164, 6697, 6743), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 161, 6541, 6555), ("shadow-stdlib/src/shadow_stdlib.mli", 164, 6697, 6744), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 161, 6541, 6555), ("shadow-stdlib/src/shadow_stdlib.mli", 164, 6697, 6744), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 161, 6541, 6541), ("shadow-stdlib/src/shadow_stdlib.mli", 164, 6697, 6745), 0))], Tag1 ("Shadow_stdlib", 26)), 0); (("__LINE_OF__", 6870), ((Tag1 (0, ((("a")), 100000000, 0, -12748), (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12747); ((("a")), 100000000, 0, -12748)]), 100000000, 0, -12746), 0), 100000000, 0, -12745), (("%loc_LINE", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 167, 6799, 6802), ("shadow-stdlib/src/shadow_stdlib.mli", 167, 6799, 6812), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.__LINE_OF__] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 167, 6799, 6814), ("shadow-stdlib/src/shadow_stdlib.mli", 170, 6955, 7002), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 167, 6799, 6813), ("shadow-stdlib/src/shadow_stdlib.mli", 170, 6955, 7003), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 167, 6799, 6813), ("shadow-stdlib/src/shadow_stdlib.mli", 170, 6955, 7003), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 167, 6799, 6799), ("shadow-stdlib/src/shadow_stdlib.mli", 170, 6955, 7004), 0))], Tag1 ("Shadow_stdlib", 27)), 0); (("__POS_OF__", 6871), ((Tag1 (0, ((("a")), 100000000, 0, -12744), (Tag2 ([(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12740); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12741); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12742); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12743)]), 100000000, 0, -12739); ((("a")), 100000000, 0, -12744)]), 100000000, 0, -12738), 0), 100000000, 0, -12737), (("%loc_POS", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 173, 7079, 7082), ("shadow-stdlib/src/shadow_stdlib.mli", 173, 7079, 7092), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.__POS_OF__] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 173, 7079, 7094), ("shadow-stdlib/src/shadow_stdlib.mli", 176, 7235, 7281), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 173, 7079, 7093), ("shadow-stdlib/src/shadow_stdlib.mli", 176, 7235, 7282), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 173, 7079, 7093), ("shadow-stdlib/src/shadow_stdlib.mli", 176, 7235, 7282), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 173, 7079, 7079), ("shadow-stdlib/src/shadow_stdlib.mli", 176, 7235, 7283), 0))], Tag1 ("Shadow_stdlib", 28)), 0); (("~+", 6872), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12736), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12735), 0), 100000000, 0, -12734), (("%identity", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 197, 8082, 8085), ("shadow-stdlib/src/shadow_stdlib.mli", 197, 8082, 8095), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.( ~+ )] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 197, 8082, 8097), ("shadow-stdlib/src/shadow_stdlib.mli", 200, 8238, 8280), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 197, 8082, 8096), ("shadow-stdlib/src/shadow_stdlib.mli", 200, 8238, 8281), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 197, 8082, 8096), ("shadow-stdlib/src/shadow_stdlib.mli", 200, 8238, 8281), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 197, 8082, 8082), ("shadow-stdlib/src/shadow_stdlib.mli", 200, 8238, 8282), 0))], Tag1 ("Shadow_stdlib", 32)), 0); (("succ", 6873), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12733), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12732), 0), 100000000, 0, -12731), (("%succint", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 203, 8324, 8327), ("shadow-stdlib/src/shadow_stdlib.mli", 203, 8324, 8337), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Int.succ] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 203, 8324, 8339), ("shadow-stdlib/src/shadow_stdlib.mli", 205, 8410, 8433), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 203, 8324, 8338), ("shadow-stdlib/src/shadow_stdlib.mli", 205, 8410, 8434), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 203, 8324, 8338), ("shadow-stdlib/src/shadow_stdlib.mli", 205, 8410, 8434), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 203, 8324, 8324), ("shadow-stdlib/src/shadow_stdlib.mli", 205, 8410, 8435), 0))], Tag1 ("Shadow_stdlib", 33)), 0); (("pred", 6874), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12730), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12729), 0), 100000000, 0, -12728), (("%predint", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 208, 8477, 8480), ("shadow-stdlib/src/shadow_stdlib.mli", 208, 8477, 8490), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Int.pred] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 208, 8477, 8492), ("shadow-stdlib/src/shadow_stdlib.mli", 210, 8563, 8586), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 208, 8477, 8491), ("shadow-stdlib/src/shadow_stdlib.mli", 210, 8563, 8587), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 208, 8477, 8491), ("shadow-stdlib/src/shadow_stdlib.mli", 210, 8563, 8587), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 208, 8477, 8477), ("shadow-stdlib/src/shadow_stdlib.mli", 210, 8563, 8588), 0))], Tag1 ("Shadow_stdlib", 34)), 0); (("mod", 6875), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12727), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12726), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12725), 0), 100000000, 0, -12724), 0), 100000000, 0, -12723), (("%modint", 2, 1, "", [0; 0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 237, 9631, 9634), ("shadow-stdlib/src/shadow_stdlib.mli", 237, 9631, 9644), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse (%), which has slightly different semantics, or Int.rem which is equivalent.", (("shadow-stdlib/src/shadow_stdlib.mli", 237, 9631, 9646), ("shadow-stdlib/src/shadow_stdlib.mli", 239, 9717, 9797), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 237, 9631, 9645), ("shadow-stdlib/src/shadow_stdlib.mli", 239, 9717, 9798), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 237, 9631, 9645), ("shadow-stdlib/src/shadow_stdlib.mli", 239, 9717, 9798), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 237, 9631, 9631), ("shadow-stdlib/src/shadow_stdlib.mli", 239, 9717, 9799), 0))], Tag1 ("Shadow_stdlib", 39)), 0); (("max_int", 6876), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12722), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 248, 10039, 10042), ("shadow-stdlib/src/shadow_stdlib.mli", 248, 10039, 10052), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Int.max_value] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 248, 10039, 10054), ("shadow-stdlib/src/shadow_stdlib.mli", 250, 10125, 10153), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 248, 10039, 10053), ("shadow-stdlib/src/shadow_stdlib.mli", 250, 10125, 10154), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 248, 10039, 10053), ("shadow-stdlib/src/shadow_stdlib.mli", 250, 10125, 10154), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 248, 10039, 10039), ("shadow-stdlib/src/shadow_stdlib.mli", 250, 10125, 10155), 0))], Tag1 ("Shadow_stdlib", 41)), 0); (("min_int", 6877), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12721), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 253, 10175, 10178), ("shadow-stdlib/src/shadow_stdlib.mli", 253, 10175, 10188), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Int.min_value] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 253, 10175, 10190), ("shadow-stdlib/src/shadow_stdlib.mli", 255, 10261, 10289), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 253, 10175, 10189), ("shadow-stdlib/src/shadow_stdlib.mli", 255, 10261, 10290), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 253, 10175, 10189), ("shadow-stdlib/src/shadow_stdlib.mli", 255, 10261, 10290), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 253, 10175, 10175), ("shadow-stdlib/src/shadow_stdlib.mli", 255, 10261, 10291), 0))], Tag1 ("Shadow_stdlib", 42)), 0); (("~+.", 6878), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12720), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12719), 0), 100000000, 0, -12718), (("%identity", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 306, 12329, 12332), ("shadow-stdlib/src/shadow_stdlib.mli", 306, 12329, 12342), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.( ~+. )] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 306, 12329, 12344), ("shadow-stdlib/src/shadow_stdlib.mli", 309, 12485, 12528), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 306, 12329, 12343), ("shadow-stdlib/src/shadow_stdlib.mli", 309, 12485, 12529), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 306, 12329, 12343), ("shadow-stdlib/src/shadow_stdlib.mli", 309, 12485, 12529), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 306, 12329, 12329), ("shadow-stdlib/src/shadow_stdlib.mli", 309, 12485, 12530), 0))], Tag1 ("Shadow_stdlib", 51)), 0); (("sqrt", 6879), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12717), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12716), 0), 100000000, 0, -12715), (("caml_sqrt_float", 1, 0, "sqrt", [1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 340, 13765, 13826), ("shadow-stdlib/src/shadow_stdlib.mli", 340, 13765, 13833), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 340, 13765, 13823), ("shadow-stdlib/src/shadow_stdlib.mli", 340, 13765, 13834), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 340, 13765, 13838), ("shadow-stdlib/src/shadow_stdlib.mli", 340, 13765, 13845), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 340, 13765, 13835), ("shadow-stdlib/src/shadow_stdlib.mli", 340, 13765, 13846), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 341, 13847, 13850), ("shadow-stdlib/src/shadow_stdlib.mli", 341, 13847, 13860), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.sqrt] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 341, 13847, 13862), ("shadow-stdlib/src/shadow_stdlib.mli", 343, 13933, 13958), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 341, 13847, 13861), ("shadow-stdlib/src/shadow_stdlib.mli", 343, 13933, 13959), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 341, 13847, 13861), ("shadow-stdlib/src/shadow_stdlib.mli", 343, 13933, 13959), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 341, 13847, 13847), ("shadow-stdlib/src/shadow_stdlib.mli", 343, 13933, 13960), 0))], Tag1 ("Shadow_stdlib", 57)), 0); (("exp", 6880), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12714), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12713), 0), 100000000, 0, -12712), (("caml_exp_float", 1, 0, "exp", [1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 345, 13962, 14020), ("shadow-stdlib/src/shadow_stdlib.mli", 345, 13962, 14027), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 345, 13962, 14017), ("shadow-stdlib/src/shadow_stdlib.mli", 345, 13962, 14028), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 345, 13962, 14032), ("shadow-stdlib/src/shadow_stdlib.mli", 345, 13962, 14039), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 345, 13962, 14029), ("shadow-stdlib/src/shadow_stdlib.mli", 345, 13962, 14040), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 346, 14041, 14044), ("shadow-stdlib/src/shadow_stdlib.mli", 346, 14041, 14054), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.exp] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 346, 14041, 14056), ("shadow-stdlib/src/shadow_stdlib.mli", 348, 14127, 14151), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 346, 14041, 14055), ("shadow-stdlib/src/shadow_stdlib.mli", 348, 14127, 14152), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 346, 14041, 14055), ("shadow-stdlib/src/shadow_stdlib.mli", 348, 14127, 14152), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 346, 14041, 14041), ("shadow-stdlib/src/shadow_stdlib.mli", 348, 14127, 14153), 0))], Tag1 ("Shadow_stdlib", 58)), 0); (("log", 6881), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12711), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12710), 0), 100000000, 0, -12709), (("caml_log_float", 1, 0, "log", [1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 350, 14155, 14213), ("shadow-stdlib/src/shadow_stdlib.mli", 350, 14155, 14220), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 350, 14155, 14210), ("shadow-stdlib/src/shadow_stdlib.mli", 350, 14155, 14221), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 350, 14155, 14225), ("shadow-stdlib/src/shadow_stdlib.mli", 350, 14155, 14232), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 350, 14155, 14222), ("shadow-stdlib/src/shadow_stdlib.mli", 350, 14155, 14233), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 351, 14234, 14237), ("shadow-stdlib/src/shadow_stdlib.mli", 351, 14234, 14247), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.log] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 351, 14234, 14249), ("shadow-stdlib/src/shadow_stdlib.mli", 353, 14320, 14344), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 351, 14234, 14248), ("shadow-stdlib/src/shadow_stdlib.mli", 353, 14320, 14345), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 351, 14234, 14248), ("shadow-stdlib/src/shadow_stdlib.mli", 353, 14320, 14345), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 351, 14234, 14234), ("shadow-stdlib/src/shadow_stdlib.mli", 353, 14320, 14346), 0))], Tag1 ("Shadow_stdlib", 59)), 0); (("log10", 6882), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12708), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12707), 0), 100000000, 0, -12706), (("caml_log10_float", 1, 0, "log10", [1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 355, 14348, 14412), ("shadow-stdlib/src/shadow_stdlib.mli", 355, 14348, 14419), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 355, 14348, 14409), ("shadow-stdlib/src/shadow_stdlib.mli", 355, 14348, 14420), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 355, 14348, 14424), ("shadow-stdlib/src/shadow_stdlib.mli", 355, 14348, 14431), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 355, 14348, 14421), ("shadow-stdlib/src/shadow_stdlib.mli", 355, 14348, 14432), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 356, 14433, 14436), ("shadow-stdlib/src/shadow_stdlib.mli", 356, 14433, 14446), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.log10] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 356, 14433, 14448), ("shadow-stdlib/src/shadow_stdlib.mli", 358, 14519, 14545), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 356, 14433, 14447), ("shadow-stdlib/src/shadow_stdlib.mli", 358, 14519, 14546), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 356, 14433, 14447), ("shadow-stdlib/src/shadow_stdlib.mli", 358, 14519, 14546), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 356, 14433, 14433), ("shadow-stdlib/src/shadow_stdlib.mli", 358, 14519, 14547), 0))], Tag1 ("Shadow_stdlib", 60)), 0); (("expm1", 6883), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12705), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12704), 0), 100000000, 0, -12703), (("caml_expm1_float", 1, 0, "caml_expm1", [1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 360, 14549, 14618), ("shadow-stdlib/src/shadow_stdlib.mli", 360, 14549, 14625), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 360, 14549, 14615), ("shadow-stdlib/src/shadow_stdlib.mli", 360, 14549, 14626), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 360, 14549, 14630), ("shadow-stdlib/src/shadow_stdlib.mli", 360, 14549, 14637), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 360, 14549, 14627), ("shadow-stdlib/src/shadow_stdlib.mli", 360, 14549, 14638), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 361, 14639, 14642), ("shadow-stdlib/src/shadow_stdlib.mli", 361, 14639, 14652), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.expm1] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 361, 14639, 14654), ("shadow-stdlib/src/shadow_stdlib.mli", 363, 14725, 14751), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 361, 14639, 14653), ("shadow-stdlib/src/shadow_stdlib.mli", 363, 14725, 14752), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 361, 14639, 14653), ("shadow-stdlib/src/shadow_stdlib.mli", 363, 14725, 14752), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 361, 14639, 14639), ("shadow-stdlib/src/shadow_stdlib.mli", 363, 14725, 14753), 0))], Tag1 ("Shadow_stdlib", 61)), 0); (("log1p", 6884), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12702), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12701), 0), 100000000, 0, -12700), (("caml_log1p_float", 1, 0, "caml_log1p", [1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 365, 14755, 14824), ("shadow-stdlib/src/shadow_stdlib.mli", 365, 14755, 14831), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 365, 14755, 14821), ("shadow-stdlib/src/shadow_stdlib.mli", 365, 14755, 14832), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 365, 14755, 14836), ("shadow-stdlib/src/shadow_stdlib.mli", 365, 14755, 14843), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 365, 14755, 14833), ("shadow-stdlib/src/shadow_stdlib.mli", 365, 14755, 14844), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 366, 14845, 14848), ("shadow-stdlib/src/shadow_stdlib.mli", 366, 14845, 14858), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.log1p] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 366, 14845, 14860), ("shadow-stdlib/src/shadow_stdlib.mli", 368, 14931, 14957), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 366, 14845, 14859), ("shadow-stdlib/src/shadow_stdlib.mli", 368, 14931, 14958), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 366, 14845, 14859), ("shadow-stdlib/src/shadow_stdlib.mli", 368, 14931, 14958), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 366, 14845, 14845), ("shadow-stdlib/src/shadow_stdlib.mli", 368, 14931, 14959), 0))], Tag1 ("Shadow_stdlib", 62)), 0); (("cos", 6885), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12699), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12698), 0), 100000000, 0, -12697), (("caml_cos_float", 1, 0, "cos", [1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 370, 14961, 15019), ("shadow-stdlib/src/shadow_stdlib.mli", 370, 14961, 15026), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 370, 14961, 15016), ("shadow-stdlib/src/shadow_stdlib.mli", 370, 14961, 15027), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 370, 14961, 15031), ("shadow-stdlib/src/shadow_stdlib.mli", 370, 14961, 15038), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 370, 14961, 15028), ("shadow-stdlib/src/shadow_stdlib.mli", 370, 14961, 15039), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 371, 15040, 15043), ("shadow-stdlib/src/shadow_stdlib.mli", 371, 15040, 15053), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.cos] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 371, 15040, 15055), ("shadow-stdlib/src/shadow_stdlib.mli", 373, 15126, 15150), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 371, 15040, 15054), ("shadow-stdlib/src/shadow_stdlib.mli", 373, 15126, 15151), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 371, 15040, 15054), ("shadow-stdlib/src/shadow_stdlib.mli", 373, 15126, 15151), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 371, 15040, 15040), ("shadow-stdlib/src/shadow_stdlib.mli", 373, 15126, 15152), 0))], Tag1 ("Shadow_stdlib", 63)), 0); (("sin", 6886), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12696), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12695), 0), 100000000, 0, -12694), (("caml_sin_float", 1, 0, "sin", [1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 375, 15154, 15212), ("shadow-stdlib/src/shadow_stdlib.mli", 375, 15154, 15219), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 375, 15154, 15209), ("shadow-stdlib/src/shadow_stdlib.mli", 375, 15154, 15220), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 375, 15154, 15224), ("shadow-stdlib/src/shadow_stdlib.mli", 375, 15154, 15231), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 375, 15154, 15221), ("shadow-stdlib/src/shadow_stdlib.mli", 375, 15154, 15232), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 376, 15233, 15236), ("shadow-stdlib/src/shadow_stdlib.mli", 376, 15233, 15246), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.sin] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 376, 15233, 15248), ("shadow-stdlib/src/shadow_stdlib.mli", 378, 15319, 15343), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 376, 15233, 15247), ("shadow-stdlib/src/shadow_stdlib.mli", 378, 15319, 15344), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 376, 15233, 15247), ("shadow-stdlib/src/shadow_stdlib.mli", 378, 15319, 15344), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 376, 15233, 15233), ("shadow-stdlib/src/shadow_stdlib.mli", 378, 15319, 15345), 0))], Tag1 ("Shadow_stdlib", 64)), 0); (("tan", 6887), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12693), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12692), 0), 100000000, 0, -12691), (("caml_tan_float", 1, 0, "tan", [1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 380, 15347, 15405), ("shadow-stdlib/src/shadow_stdlib.mli", 380, 15347, 15412), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 380, 15347, 15402), ("shadow-stdlib/src/shadow_stdlib.mli", 380, 15347, 15413), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 380, 15347, 15417), ("shadow-stdlib/src/shadow_stdlib.mli", 380, 15347, 15424), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 380, 15347, 15414), ("shadow-stdlib/src/shadow_stdlib.mli", 380, 15347, 15425), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 381, 15426, 15429), ("shadow-stdlib/src/shadow_stdlib.mli", 381, 15426, 15439), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.tan] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 381, 15426, 15441), ("shadow-stdlib/src/shadow_stdlib.mli", 383, 15512, 15536), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 381, 15426, 15440), ("shadow-stdlib/src/shadow_stdlib.mli", 383, 15512, 15537), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 381, 15426, 15440), ("shadow-stdlib/src/shadow_stdlib.mli", 383, 15512, 15537), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 381, 15426, 15426), ("shadow-stdlib/src/shadow_stdlib.mli", 383, 15512, 15538), 0))], Tag1 ("Shadow_stdlib", 65)), 0); (("acos", 6888), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12690), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12689), 0), 100000000, 0, -12688), (("caml_acos_float", 1, 0, "acos", [1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 385, 15540, 15601), ("shadow-stdlib/src/shadow_stdlib.mli", 385, 15540, 15608), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 385, 15540, 15598), ("shadow-stdlib/src/shadow_stdlib.mli", 385, 15540, 15609), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 385, 15540, 15613), ("shadow-stdlib/src/shadow_stdlib.mli", 385, 15540, 15620), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 385, 15540, 15610), ("shadow-stdlib/src/shadow_stdlib.mli", 385, 15540, 15621), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 386, 15622, 15625), ("shadow-stdlib/src/shadow_stdlib.mli", 386, 15622, 15635), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.acos] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 386, 15622, 15637), ("shadow-stdlib/src/shadow_stdlib.mli", 388, 15708, 15733), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 386, 15622, 15636), ("shadow-stdlib/src/shadow_stdlib.mli", 388, 15708, 15734), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 386, 15622, 15636), ("shadow-stdlib/src/shadow_stdlib.mli", 388, 15708, 15734), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 386, 15622, 15622), ("shadow-stdlib/src/shadow_stdlib.mli", 388, 15708, 15735), 0))], Tag1 ("Shadow_stdlib", 66)), 0); (("asin", 6889), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12687), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12686), 0), 100000000, 0, -12685), (("caml_asin_float", 1, 0, "asin", [1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 390, 15737, 15798), ("shadow-stdlib/src/shadow_stdlib.mli", 390, 15737, 15805), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 390, 15737, 15795), ("shadow-stdlib/src/shadow_stdlib.mli", 390, 15737, 15806), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 390, 15737, 15810), ("shadow-stdlib/src/shadow_stdlib.mli", 390, 15737, 15817), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 390, 15737, 15807), ("shadow-stdlib/src/shadow_stdlib.mli", 390, 15737, 15818), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 391, 15819, 15822), ("shadow-stdlib/src/shadow_stdlib.mli", 391, 15819, 15832), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.asin] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 391, 15819, 15834), ("shadow-stdlib/src/shadow_stdlib.mli", 393, 15905, 15930), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 391, 15819, 15833), ("shadow-stdlib/src/shadow_stdlib.mli", 393, 15905, 15931), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 391, 15819, 15833), ("shadow-stdlib/src/shadow_stdlib.mli", 393, 15905, 15931), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 391, 15819, 15819), ("shadow-stdlib/src/shadow_stdlib.mli", 393, 15905, 15932), 0))], Tag1 ("Shadow_stdlib", 67)), 0); (("atan", 6890), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12684), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12683), 0), 100000000, 0, -12682), (("caml_atan_float", 1, 0, "atan", [1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 395, 15934, 15995), ("shadow-stdlib/src/shadow_stdlib.mli", 395, 15934, 16002), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 395, 15934, 15992), ("shadow-stdlib/src/shadow_stdlib.mli", 395, 15934, 16003), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 395, 15934, 16007), ("shadow-stdlib/src/shadow_stdlib.mli", 395, 15934, 16014), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 395, 15934, 16004), ("shadow-stdlib/src/shadow_stdlib.mli", 395, 15934, 16015), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 396, 16016, 16019), ("shadow-stdlib/src/shadow_stdlib.mli", 396, 16016, 16029), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.atan] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 396, 16016, 16031), ("shadow-stdlib/src/shadow_stdlib.mli", 398, 16102, 16127), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 396, 16016, 16030), ("shadow-stdlib/src/shadow_stdlib.mli", 398, 16102, 16128), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 396, 16016, 16030), ("shadow-stdlib/src/shadow_stdlib.mli", 398, 16102, 16128), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 396, 16016, 16016), ("shadow-stdlib/src/shadow_stdlib.mli", 398, 16102, 16129), 0))], Tag1 ("Shadow_stdlib", 68)), 0); (("atan2", 6891), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12681), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12680), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12679), 0), 100000000, 0, -12678), 0), 100000000, 0, -12677), (("caml_atan2_float", 2, 0, "atan2", [1; 1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 400, 16131, 16204), ("shadow-stdlib/src/shadow_stdlib.mli", 400, 16131, 16211), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 400, 16131, 16201), ("shadow-stdlib/src/shadow_stdlib.mli", 400, 16131, 16212), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 400, 16131, 16216), ("shadow-stdlib/src/shadow_stdlib.mli", 400, 16131, 16223), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 400, 16131, 16213), ("shadow-stdlib/src/shadow_stdlib.mli", 400, 16131, 16224), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 401, 16225, 16228), ("shadow-stdlib/src/shadow_stdlib.mli", 401, 16225, 16238), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.atan2] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 401, 16225, 16240), ("shadow-stdlib/src/shadow_stdlib.mli", 403, 16311, 16337), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 401, 16225, 16239), ("shadow-stdlib/src/shadow_stdlib.mli", 403, 16311, 16338), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 401, 16225, 16239), ("shadow-stdlib/src/shadow_stdlib.mli", 403, 16311, 16338), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 401, 16225, 16225), ("shadow-stdlib/src/shadow_stdlib.mli", 403, 16311, 16339), 0))], Tag1 ("Shadow_stdlib", 69)), 0); (("hypot", 6892), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12676), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12675), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12674), 0), 100000000, 0, -12673), 0), 100000000, 0, -12672), (("caml_hypot_float", 2, 0, "caml_hypot", [1; 1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 405, 16341, 16419), ("shadow-stdlib/src/shadow_stdlib.mli", 405, 16341, 16426), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 405, 16341, 16416), ("shadow-stdlib/src/shadow_stdlib.mli", 405, 16341, 16427), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 405, 16341, 16431), ("shadow-stdlib/src/shadow_stdlib.mli", 405, 16341, 16438), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 405, 16341, 16428), ("shadow-stdlib/src/shadow_stdlib.mli", 405, 16341, 16439), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 406, 16440, 16443), ("shadow-stdlib/src/shadow_stdlib.mli", 406, 16440, 16453), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.hypot] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 406, 16440, 16455), ("shadow-stdlib/src/shadow_stdlib.mli", 408, 16526, 16552), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 406, 16440, 16454), ("shadow-stdlib/src/shadow_stdlib.mli", 408, 16526, 16553), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 406, 16440, 16454), ("shadow-stdlib/src/shadow_stdlib.mli", 408, 16526, 16553), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 406, 16440, 16440), ("shadow-stdlib/src/shadow_stdlib.mli", 408, 16526, 16554), 0))], Tag1 ("Shadow_stdlib", 70)), 0); (("cosh", 6893), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12671), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12670), 0), 100000000, 0, -12669), (("caml_cosh_float", 1, 0, "cosh", [1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 410, 16556, 16617), ("shadow-stdlib/src/shadow_stdlib.mli", 410, 16556, 16624), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 410, 16556, 16614), ("shadow-stdlib/src/shadow_stdlib.mli", 410, 16556, 16625), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 410, 16556, 16629), ("shadow-stdlib/src/shadow_stdlib.mli", 410, 16556, 16636), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 410, 16556, 16626), ("shadow-stdlib/src/shadow_stdlib.mli", 410, 16556, 16637), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 411, 16638, 16641), ("shadow-stdlib/src/shadow_stdlib.mli", 411, 16638, 16651), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.cosh] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 411, 16638, 16653), ("shadow-stdlib/src/shadow_stdlib.mli", 413, 16724, 16749), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 411, 16638, 16652), ("shadow-stdlib/src/shadow_stdlib.mli", 413, 16724, 16750), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 411, 16638, 16652), ("shadow-stdlib/src/shadow_stdlib.mli", 413, 16724, 16750), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 411, 16638, 16638), ("shadow-stdlib/src/shadow_stdlib.mli", 413, 16724, 16751), 0))], Tag1 ("Shadow_stdlib", 71)), 0); (("sinh", 6894), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12668), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12667), 0), 100000000, 0, -12666), (("caml_sinh_float", 1, 0, "sinh", [1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 415, 16753, 16814), ("shadow-stdlib/src/shadow_stdlib.mli", 415, 16753, 16821), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 415, 16753, 16811), ("shadow-stdlib/src/shadow_stdlib.mli", 415, 16753, 16822), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 415, 16753, 16826), ("shadow-stdlib/src/shadow_stdlib.mli", 415, 16753, 16833), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 415, 16753, 16823), ("shadow-stdlib/src/shadow_stdlib.mli", 415, 16753, 16834), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 416, 16835, 16838), ("shadow-stdlib/src/shadow_stdlib.mli", 416, 16835, 16848), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.sinh] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 416, 16835, 16850), ("shadow-stdlib/src/shadow_stdlib.mli", 418, 16921, 16946), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 416, 16835, 16849), ("shadow-stdlib/src/shadow_stdlib.mli", 418, 16921, 16947), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 416, 16835, 16849), ("shadow-stdlib/src/shadow_stdlib.mli", 418, 16921, 16947), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 416, 16835, 16835), ("shadow-stdlib/src/shadow_stdlib.mli", 418, 16921, 16948), 0))], Tag1 ("Shadow_stdlib", 72)), 0); (("tanh", 6895), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12665), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12664), 0), 100000000, 0, -12663), (("caml_tanh_float", 1, 0, "tanh", [1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 420, 16950, 17011), ("shadow-stdlib/src/shadow_stdlib.mli", 420, 16950, 17018), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 420, 16950, 17008), ("shadow-stdlib/src/shadow_stdlib.mli", 420, 16950, 17019), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 420, 16950, 17023), ("shadow-stdlib/src/shadow_stdlib.mli", 420, 16950, 17030), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 420, 16950, 17020), ("shadow-stdlib/src/shadow_stdlib.mli", 420, 16950, 17031), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 421, 17032, 17035), ("shadow-stdlib/src/shadow_stdlib.mli", 421, 17032, 17045), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.tanh] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 421, 17032, 17047), ("shadow-stdlib/src/shadow_stdlib.mli", 423, 17118, 17143), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 421, 17032, 17046), ("shadow-stdlib/src/shadow_stdlib.mli", 423, 17118, 17144), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 421, 17032, 17046), ("shadow-stdlib/src/shadow_stdlib.mli", 423, 17118, 17144), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 421, 17032, 17032), ("shadow-stdlib/src/shadow_stdlib.mli", 423, 17118, 17145), 0))], Tag1 ("Shadow_stdlib", 73)), 0); (("acosh", 6896), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12662), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12661), 0), 100000000, 0, -12660), (("caml_acosh_float", 1, 0, "caml_acosh", [1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 425, 17147, 17216), ("shadow-stdlib/src/shadow_stdlib.mli", 425, 17147, 17223), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 425, 17147, 17213), ("shadow-stdlib/src/shadow_stdlib.mli", 425, 17147, 17224), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 425, 17147, 17228), ("shadow-stdlib/src/shadow_stdlib.mli", 425, 17147, 17235), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 425, 17147, 17225), ("shadow-stdlib/src/shadow_stdlib.mli", 425, 17147, 17236), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 426, 17237, 17240), ("shadow-stdlib/src/shadow_stdlib.mli", 426, 17237, 17250), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.acosh] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 426, 17237, 17252), ("shadow-stdlib/src/shadow_stdlib.mli", 428, 17323, 17349), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 426, 17237, 17251), ("shadow-stdlib/src/shadow_stdlib.mli", 428, 17323, 17350), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 426, 17237, 17251), ("shadow-stdlib/src/shadow_stdlib.mli", 428, 17323, 17350), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 426, 17237, 17237), ("shadow-stdlib/src/shadow_stdlib.mli", 428, 17323, 17351), 0))], Tag1 ("Shadow_stdlib", 74)), 0); (("asinh", 6897), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12659), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12658), 0), 100000000, 0, -12657), (("caml_asinh_float", 1, 0, "caml_asinh", [1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 430, 17353, 17422), ("shadow-stdlib/src/shadow_stdlib.mli", 430, 17353, 17429), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 430, 17353, 17419), ("shadow-stdlib/src/shadow_stdlib.mli", 430, 17353, 17430), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 430, 17353, 17434), ("shadow-stdlib/src/shadow_stdlib.mli", 430, 17353, 17441), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 430, 17353, 17431), ("shadow-stdlib/src/shadow_stdlib.mli", 430, 17353, 17442), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 431, 17443, 17446), ("shadow-stdlib/src/shadow_stdlib.mli", 431, 17443, 17456), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.asinh] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 431, 17443, 17458), ("shadow-stdlib/src/shadow_stdlib.mli", 433, 17529, 17555), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 431, 17443, 17457), ("shadow-stdlib/src/shadow_stdlib.mli", 433, 17529, 17556), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 431, 17443, 17457), ("shadow-stdlib/src/shadow_stdlib.mli", 433, 17529, 17556), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 431, 17443, 17443), ("shadow-stdlib/src/shadow_stdlib.mli", 433, 17529, 17557), 0))], Tag1 ("Shadow_stdlib", 75)), 0); (("atanh", 6898), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12656), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12655), 0), 100000000, 0, -12654), (("caml_atanh_float", 1, 0, "caml_atanh", [1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 435, 17559, 17628), ("shadow-stdlib/src/shadow_stdlib.mli", 435, 17559, 17635), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 435, 17559, 17625), ("shadow-stdlib/src/shadow_stdlib.mli", 435, 17559, 17636), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 435, 17559, 17640), ("shadow-stdlib/src/shadow_stdlib.mli", 435, 17559, 17647), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 435, 17559, 17637), ("shadow-stdlib/src/shadow_stdlib.mli", 435, 17559, 17648), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 436, 17649, 17652), ("shadow-stdlib/src/shadow_stdlib.mli", 436, 17649, 17662), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.atanh] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 436, 17649, 17664), ("shadow-stdlib/src/shadow_stdlib.mli", 438, 17735, 17761), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 436, 17649, 17663), ("shadow-stdlib/src/shadow_stdlib.mli", 438, 17735, 17762), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 436, 17649, 17663), ("shadow-stdlib/src/shadow_stdlib.mli", 438, 17735, 17762), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 436, 17649, 17649), ("shadow-stdlib/src/shadow_stdlib.mli", 438, 17735, 17763), 0))], Tag1 ("Shadow_stdlib", 76)), 0); (("ceil", 6899), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12653), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12652), 0), 100000000, 0, -12651), (("caml_ceil_float", 1, 0, "ceil", [1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 440, 17765, 17826), ("shadow-stdlib/src/shadow_stdlib.mli", 440, 17765, 17833), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 440, 17765, 17823), ("shadow-stdlib/src/shadow_stdlib.mli", 440, 17765, 17834), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 440, 17765, 17838), ("shadow-stdlib/src/shadow_stdlib.mli", 440, 17765, 17845), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 440, 17765, 17835), ("shadow-stdlib/src/shadow_stdlib.mli", 440, 17765, 17846), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 441, 17847, 17850), ("shadow-stdlib/src/shadow_stdlib.mli", 441, 17847, 17860), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.round_up] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 441, 17847, 17862), ("shadow-stdlib/src/shadow_stdlib.mli", 443, 17933, 17962), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 441, 17847, 17861), ("shadow-stdlib/src/shadow_stdlib.mli", 443, 17933, 17963), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 441, 17847, 17861), ("shadow-stdlib/src/shadow_stdlib.mli", 443, 17933, 17963), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 441, 17847, 17847), ("shadow-stdlib/src/shadow_stdlib.mli", 443, 17933, 17964), 0))], Tag1 ("Shadow_stdlib", 77)), 0); (("floor", 6900), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12650), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12649), 0), 100000000, 0, -12648), (("caml_floor_float", 1, 0, "floor", [1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 445, 17966, 18030), ("shadow-stdlib/src/shadow_stdlib.mli", 445, 17966, 18037), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 445, 17966, 18027), ("shadow-stdlib/src/shadow_stdlib.mli", 445, 17966, 18038), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 445, 17966, 18042), ("shadow-stdlib/src/shadow_stdlib.mli", 445, 17966, 18049), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 445, 17966, 18039), ("shadow-stdlib/src/shadow_stdlib.mli", 445, 17966, 18050), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 446, 18051, 18054), ("shadow-stdlib/src/shadow_stdlib.mli", 446, 18051, 18064), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.round_down] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 446, 18051, 18066), ("shadow-stdlib/src/shadow_stdlib.mli", 448, 18137, 18168), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 446, 18051, 18065), ("shadow-stdlib/src/shadow_stdlib.mli", 448, 18137, 18169), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 446, 18051, 18065), ("shadow-stdlib/src/shadow_stdlib.mli", 448, 18137, 18169), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 446, 18051, 18051), ("shadow-stdlib/src/shadow_stdlib.mli", 448, 18137, 18170), 0))], Tag1 ("Shadow_stdlib", 78)), 0); (("abs_float", 6901), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12647), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12646), 0), 100000000, 0, -12645), (("%absfloat", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 451, 18222, 18225), ("shadow-stdlib/src/shadow_stdlib.mli", 451, 18222, 18235), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.abs_float] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 451, 18222, 18237), ("shadow-stdlib/src/shadow_stdlib.mli", 454, 18378, 18423), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 451, 18222, 18236), ("shadow-stdlib/src/shadow_stdlib.mli", 454, 18378, 18424), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 451, 18222, 18236), ("shadow-stdlib/src/shadow_stdlib.mli", 454, 18378, 18424), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 451, 18222, 18222), ("shadow-stdlib/src/shadow_stdlib.mli", 454, 18378, 18425), 0))], Tag1 ("Shadow_stdlib", 79)), 0); (("copysign", 6902), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12644), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12643), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12642), 0), 100000000, 0, -12641), 0), 100000000, 0, -12640), (("caml_copysign_float", 2, 0, "caml_copysign", [1; 1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 456, 18427, 18514), ("shadow-stdlib/src/shadow_stdlib.mli", 456, 18427, 18521), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 456, 18427, 18511), ("shadow-stdlib/src/shadow_stdlib.mli", 456, 18427, 18522), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 456, 18427, 18526), ("shadow-stdlib/src/shadow_stdlib.mli", 456, 18427, 18533), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 456, 18427, 18523), ("shadow-stdlib/src/shadow_stdlib.mli", 456, 18427, 18534), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 457, 18535, 18538), ("shadow-stdlib/src/shadow_stdlib.mli", 457, 18535, 18548), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.copysign] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 457, 18535, 18550), ("shadow-stdlib/src/shadow_stdlib.mli", 459, 18621, 18650), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 457, 18535, 18549), ("shadow-stdlib/src/shadow_stdlib.mli", 459, 18621, 18651), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 457, 18535, 18549), ("shadow-stdlib/src/shadow_stdlib.mli", 459, 18621, 18651), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 457, 18535, 18535), ("shadow-stdlib/src/shadow_stdlib.mli", 459, 18621, 18652), 0))], Tag1 ("Shadow_stdlib", 80)), 0); (("mod_float", 6903), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12639), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12638), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12637), 0), 100000000, 0, -12636), 0), 100000000, 0, -12635), (("caml_fmod_float", 2, 0, "fmod", [1; 1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 461, 18654, 18729), ("shadow-stdlib/src/shadow_stdlib.mli", 461, 18654, 18736), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 461, 18654, 18726), ("shadow-stdlib/src/shadow_stdlib.mli", 461, 18654, 18737), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 461, 18654, 18741), ("shadow-stdlib/src/shadow_stdlib.mli", 461, 18654, 18748), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 461, 18654, 18738), ("shadow-stdlib/src/shadow_stdlib.mli", 461, 18654, 18749), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 462, 18750, 18753), ("shadow-stdlib/src/shadow_stdlib.mli", 462, 18750, 18763), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.mod_float] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 462, 18750, 18765), ("shadow-stdlib/src/shadow_stdlib.mli", 464, 18836, 18866), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 462, 18750, 18764), ("shadow-stdlib/src/shadow_stdlib.mli", 464, 18836, 18867), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 462, 18750, 18764), ("shadow-stdlib/src/shadow_stdlib.mli", 464, 18836, 18867), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 462, 18750, 18750), ("shadow-stdlib/src/shadow_stdlib.mli", 464, 18836, 18868), 0))], Tag1 ("Shadow_stdlib", 81)), 0); (("frexp", 6904), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12634), (Tag2 ([(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12632); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12633)]), 100000000, 0, -12631), 0), 100000000, 0, -12630), (("caml_frexp_float", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 467, 18929, 18932), ("shadow-stdlib/src/shadow_stdlib.mli", 467, 18929, 18942), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.frexp] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 467, 18929, 18944), ("shadow-stdlib/src/shadow_stdlib.mli", 469, 19015, 19041), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 467, 18929, 18943), ("shadow-stdlib/src/shadow_stdlib.mli", 469, 19015, 19042), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 467, 18929, 18943), ("shadow-stdlib/src/shadow_stdlib.mli", 469, 19015, 19042), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 467, 18929, 18929), ("shadow-stdlib/src/shadow_stdlib.mli", 469, 19015, 19043), 0))], Tag1 ("Shadow_stdlib", 82)), 0); (("ldexp", 6905), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12629), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12628), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12627), 0), 100000000, 0, -12626), 0), 100000000, 0, -12625), (("caml_ldexp_float", 2, 0, "caml_ldexp_float_unboxed", [1; 2], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 471, 19045, 19175), ("shadow-stdlib/src/shadow_stdlib.mli", 471, 19045, 19182), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 471, 19045, 19172), ("shadow-stdlib/src/shadow_stdlib.mli", 471, 19045, 19183), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 472, 19184, 19187), ("shadow-stdlib/src/shadow_stdlib.mli", 472, 19184, 19197), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.ldexp] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 472, 19184, 19199), ("shadow-stdlib/src/shadow_stdlib.mli", 474, 19270, 19296), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 472, 19184, 19198), ("shadow-stdlib/src/shadow_stdlib.mli", 474, 19270, 19297), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 472, 19184, 19198), ("shadow-stdlib/src/shadow_stdlib.mli", 474, 19270, 19297), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 472, 19184, 19184), ("shadow-stdlib/src/shadow_stdlib.mli", 474, 19270, 19298), 0))], Tag1 ("Shadow_stdlib", 83)), 0); (("modf", 6906), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12624), (Tag2 ([(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12622); (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12623)]), 100000000, 0, -12621), 0), 100000000, 0, -12620), (("caml_modf_float", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 477, 19359, 19362), ("shadow-stdlib/src/shadow_stdlib.mli", 477, 19359, 19372), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.modf] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 477, 19359, 19374), ("shadow-stdlib/src/shadow_stdlib.mli", 479, 19445, 19470), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 477, 19359, 19373), ("shadow-stdlib/src/shadow_stdlib.mli", 479, 19445, 19471), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 477, 19359, 19373), ("shadow-stdlib/src/shadow_stdlib.mli", 479, 19445, 19471), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 477, 19359, 19359), ("shadow-stdlib/src/shadow_stdlib.mli", 479, 19445, 19472), 0))], Tag1 ("Shadow_stdlib", 84)), 0); (("float", 6907), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12619), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12618), 0), 100000000, 0, -12617), (("%floatofint", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 482, 19520, 19523), ("shadow-stdlib/src/shadow_stdlib.mli", 482, 19520, 19533), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.of_int] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 482, 19520, 19535), ("shadow-stdlib/src/shadow_stdlib.mli", 484, 19606, 19633), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 482, 19520, 19534), ("shadow-stdlib/src/shadow_stdlib.mli", 484, 19606, 19634), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 482, 19520, 19534), ("shadow-stdlib/src/shadow_stdlib.mli", 484, 19606, 19634), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 482, 19520, 19520), ("shadow-stdlib/src/shadow_stdlib.mli", 484, 19606, 19635), 0))], Tag1 ("Shadow_stdlib", 85)), 0); (("float_of_int", 6908), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12616), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12615), 0), 100000000, 0, -12614), (("%floatofint", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 487, 19690, 19693), ("shadow-stdlib/src/shadow_stdlib.mli", 487, 19690, 19703), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.of_int] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 487, 19690, 19705), ("shadow-stdlib/src/shadow_stdlib.mli", 489, 19776, 19803), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 487, 19690, 19704), ("shadow-stdlib/src/shadow_stdlib.mli", 489, 19776, 19804), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 487, 19690, 19704), ("shadow-stdlib/src/shadow_stdlib.mli", 489, 19776, 19804), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 487, 19690, 19690), ("shadow-stdlib/src/shadow_stdlib.mli", 489, 19776, 19805), 0))], Tag1 ("Shadow_stdlib", 86)), 0); (("truncate", 6909), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12613), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12612), 0), 100000000, 0, -12611), (("%intoffloat", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 492, 19856, 19859), ("shadow-stdlib/src/shadow_stdlib.mli", 492, 19856, 19869), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Int.of_float] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 492, 19856, 19871), ("shadow-stdlib/src/shadow_stdlib.mli", 494, 19942, 19969), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 492, 19856, 19870), ("shadow-stdlib/src/shadow_stdlib.mli", 494, 19942, 19970), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 492, 19856, 19870), ("shadow-stdlib/src/shadow_stdlib.mli", 494, 19942, 19970), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 492, 19856, 19856), ("shadow-stdlib/src/shadow_stdlib.mli", 494, 19942, 19971), 0))], Tag1 ("Shadow_stdlib", 87)), 0); (("int_of_float", 6910), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12610), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12609), 0), 100000000, 0, -12608), (("%intoffloat", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 497, 20026, 20029), ("shadow-stdlib/src/shadow_stdlib.mli", 497, 20026, 20039), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Int.of_float] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 497, 20026, 20041), ("shadow-stdlib/src/shadow_stdlib.mli", 499, 20112, 20139), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 497, 20026, 20040), ("shadow-stdlib/src/shadow_stdlib.mli", 499, 20112, 20140), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 497, 20026, 20040), ("shadow-stdlib/src/shadow_stdlib.mli", 499, 20112, 20140), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 497, 20026, 20026), ("shadow-stdlib/src/shadow_stdlib.mli", 499, 20112, 20141), 0))], Tag1 ("Shadow_stdlib", 88)), 0); (("infinity", 6911), ((Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12607), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 502, 20164, 20167), ("shadow-stdlib/src/shadow_stdlib.mli", 502, 20164, 20177), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.infinity] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 502, 20164, 20179), ("shadow-stdlib/src/shadow_stdlib.mli", 504, 20250, 20279), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 502, 20164, 20178), ("shadow-stdlib/src/shadow_stdlib.mli", 504, 20250, 20280), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 502, 20164, 20178), ("shadow-stdlib/src/shadow_stdlib.mli", 504, 20250, 20280), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 502, 20164, 20164), ("shadow-stdlib/src/shadow_stdlib.mli", 504, 20250, 20281), 0))], Tag1 ("Shadow_stdlib", 89)), 0); (("neg_infinity", 6912), ((Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12606), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 507, 20308, 20311), ("shadow-stdlib/src/shadow_stdlib.mli", 507, 20308, 20321), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.neg_infinity] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 507, 20308, 20323), ("shadow-stdlib/src/shadow_stdlib.mli", 509, 20394, 20427), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 507, 20308, 20322), ("shadow-stdlib/src/shadow_stdlib.mli", 509, 20394, 20428), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 507, 20308, 20322), ("shadow-stdlib/src/shadow_stdlib.mli", 509, 20394, 20428), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 507, 20308, 20308), ("shadow-stdlib/src/shadow_stdlib.mli", 509, 20394, 20429), 0))], Tag1 ("Shadow_stdlib", 90)), 0); (("nan", 6913), ((Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12605), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 512, 20447, 20450), ("shadow-stdlib/src/shadow_stdlib.mli", 512, 20447, 20460), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.nan] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 512, 20447, 20462), ("shadow-stdlib/src/shadow_stdlib.mli", 514, 20533, 20557), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 512, 20447, 20461), ("shadow-stdlib/src/shadow_stdlib.mli", 514, 20533, 20558), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 512, 20447, 20461), ("shadow-stdlib/src/shadow_stdlib.mli", 514, 20533, 20558), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 512, 20447, 20447), ("shadow-stdlib/src/shadow_stdlib.mli", 514, 20533, 20559), 0))], Tag1 ("Shadow_stdlib", 91)), 0); (("max_float", 6914), ((Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12604), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 517, 20583, 20586), ("shadow-stdlib/src/shadow_stdlib.mli", 517, 20583, 20596), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.max_finite_value] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 517, 20583, 20598), ("shadow-stdlib/src/shadow_stdlib.mli", 519, 20669, 20706), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 517, 20583, 20597), ("shadow-stdlib/src/shadow_stdlib.mli", 519, 20669, 20707), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 517, 20583, 20597), ("shadow-stdlib/src/shadow_stdlib.mli", 519, 20669, 20707), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 517, 20583, 20583), ("shadow-stdlib/src/shadow_stdlib.mli", 519, 20669, 20708), 0))], Tag1 ("Shadow_stdlib", 92)), 0); (("min_float", 6915), ((Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12603), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 522, 20732, 20735), ("shadow-stdlib/src/shadow_stdlib.mli", 522, 20732, 20745), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.min_positive_normal_value] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 522, 20732, 20747), ("shadow-stdlib/src/shadow_stdlib.mli", 524, 20818, 20864), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 522, 20732, 20746), ("shadow-stdlib/src/shadow_stdlib.mli", 524, 20818, 20865), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 522, 20732, 20746), ("shadow-stdlib/src/shadow_stdlib.mli", 524, 20818, 20865), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 522, 20732, 20732), ("shadow-stdlib/src/shadow_stdlib.mli", 524, 20818, 20866), 0))], Tag1 ("Shadow_stdlib", 93)), 0); (("epsilon_float", 6916), ((Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12602), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 527, 20894, 20897), ("shadow-stdlib/src/shadow_stdlib.mli", 527, 20894, 20907), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.epsilon_float] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 527, 20894, 20909), ("shadow-stdlib/src/shadow_stdlib.mli", 529, 20980, 21014), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 527, 20894, 20908), ("shadow-stdlib/src/shadow_stdlib.mli", 529, 20980, 21015), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 527, 20894, 20908), ("shadow-stdlib/src/shadow_stdlib.mli", 529, 20980, 21015), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 527, 20894, 20894), ("shadow-stdlib/src/shadow_stdlib.mli", 529, 20980, 21016), 0))], Tag1 ("Shadow_stdlib", 94)), 0); Tag1 (("fpclass", 6917), (0, 0, Tag1 ([(("FP_normal", 365), (0), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), 0, Tag1 ("Shadow_stdlib", 96)); (("FP_subnormal", 366), (0), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), 0, Tag1 ("Shadow_stdlib", 97)); (("FP_zero", 367), (0), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), 0, Tag1 ("Shadow_stdlib", 98)); (("FP_infinite", 368), (0), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), 0, Tag1 ("Shadow_stdlib", 99)); (("FP_nan", 369), (0), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), 0, Tag1 ("Shadow_stdlib", 100))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "fpclass"), 0, (0)), 100000000, 0, -12601)), 0, 0, 0, 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 532, 21115, 21118), ("shadow-stdlib/src/shadow_stdlib.mli", 532, 21115, 21128), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.fpclass instead", (("shadow-stdlib/src/shadow_stdlib.mli", 532, 21115, 21130), ("shadow-stdlib/src/shadow_stdlib.mli", 536, 21351, 21398), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 532, 21115, 21129), ("shadow-stdlib/src/shadow_stdlib.mli", 536, 21351, 21399), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 532, 21115, 21129), ("shadow-stdlib/src/shadow_stdlib.mli", 536, 21351, 21399), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 532, 21115, 21115), ("shadow-stdlib/src/shadow_stdlib.mli", 536, 21351, 21400), 0))], 1, 0, Tag1 ("Shadow_stdlib", 95)), 0, 0); (("classify_float", 6918), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12600), (Tag3 ((("fpclass", 6917)), 0, (0)), 100000000, 0, -12599), 0), 100000000, 0, -12598), (("caml_classify_float", 1, 0, "caml_classify_float_unboxed", [1], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 538, 21402, 21515), ("shadow-stdlib/src/shadow_stdlib.mli", 538, 21402, 21522), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 538, 21402, 21512), ("shadow-stdlib/src/shadow_stdlib.mli", 538, 21402, 21523), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 539, 21524, 21527), ("shadow-stdlib/src/shadow_stdlib.mli", 539, 21524, 21537), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.classify] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 539, 21524, 21539), ("shadow-stdlib/src/shadow_stdlib.mli", 541, 21610, 21639), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 539, 21524, 21538), ("shadow-stdlib/src/shadow_stdlib.mli", 541, 21610, 21640), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 539, 21524, 21538), ("shadow-stdlib/src/shadow_stdlib.mli", 541, 21610, 21640), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 539, 21524, 21524), ("shadow-stdlib/src/shadow_stdlib.mli", 541, 21610, 21641), 0))], Tag1 ("Shadow_stdlib", 101)), 0); (("int_of_char", 6919), ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -12597), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12596), 0), 100000000, 0, -12595), (("%identity", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 550, 21932, 21935), ("shadow-stdlib/src/shadow_stdlib.mli", 550, 21932, 21945), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Char.to_int] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 550, 21932, 21947), ("shadow-stdlib/src/shadow_stdlib.mli", 552, 22018, 22044), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 550, 21932, 21946), ("shadow-stdlib/src/shadow_stdlib.mli", 552, 22018, 22045), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 550, 21932, 21946), ("shadow-stdlib/src/shadow_stdlib.mli", 552, 22018, 22045), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 550, 21932, 21932), ("shadow-stdlib/src/shadow_stdlib.mli", 552, 22018, 22046), 0))], Tag1 ("Shadow_stdlib", 103)), 0); (("char_of_int", 6920), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12594), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -12593), 0), 100000000, 0, -12592), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 555, 22078, 22081), ("shadow-stdlib/src/shadow_stdlib.mli", 555, 22078, 22091), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Char.of_int_exn] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 555, 22078, 22093), ("shadow-stdlib/src/shadow_stdlib.mli", 557, 22164, 22194), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 555, 22078, 22092), ("shadow-stdlib/src/shadow_stdlib.mli", 557, 22164, 22195), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 555, 22078, 22092), ("shadow-stdlib/src/shadow_stdlib.mli", 557, 22164, 22195), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 555, 22078, 22078), ("shadow-stdlib/src/shadow_stdlib.mli", 557, 22164, 22196), 0))], Tag1 ("Shadow_stdlib", 104)), 0); (("string_of_bool", 6921), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -12591), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12590), 0), 100000000, 0, -12589), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 566, 22477, 22480), ("shadow-stdlib/src/shadow_stdlib.mli", 566, 22477, 22490), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Bool.to_string] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 566, 22477, 22492), ("shadow-stdlib/src/shadow_stdlib.mli", 568, 22563, 22592), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 566, 22477, 22491), ("shadow-stdlib/src/shadow_stdlib.mli", 568, 22563, 22593), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 566, 22477, 22491), ("shadow-stdlib/src/shadow_stdlib.mli", 568, 22563, 22593), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 566, 22477, 22477), ("shadow-stdlib/src/shadow_stdlib.mli", 568, 22563, 22594), 0))], Tag1 ("Shadow_stdlib", 106)), 0); (("bool_of_string_opt", 6922), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12588), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -12587)], (0)), 100000000, 0, -12586), 0), 100000000, 0, -12585), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 571, 22643, 22646), ("shadow-stdlib/src/shadow_stdlib.mli", 571, 22643, 22656), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.bool_of_string_opt] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 571, 22643, 22658), ("shadow-stdlib/src/shadow_stdlib.mli", 574, 22799, 22853), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 571, 22643, 22657), ("shadow-stdlib/src/shadow_stdlib.mli", 574, 22799, 22854), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 571, 22643, 22657), ("shadow-stdlib/src/shadow_stdlib.mli", 574, 22799, 22854), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 571, 22643, 22643), ("shadow-stdlib/src/shadow_stdlib.mli", 574, 22799, 22855), 0))], Tag1 ("Shadow_stdlib", 107)), 0); (("bool_of_string", 6923), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12584), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -12583), 0), 100000000, 0, -12582), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 577, 22893, 22896), ("shadow-stdlib/src/shadow_stdlib.mli", 577, 22893, 22906), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Bool.of_string] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 577, 22893, 22908), ("shadow-stdlib/src/shadow_stdlib.mli", 579, 22979, 23008), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 577, 22893, 22907), ("shadow-stdlib/src/shadow_stdlib.mli", 579, 22979, 23009), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 577, 22893, 22907), ("shadow-stdlib/src/shadow_stdlib.mli", 579, 22979, 23009), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 577, 22893, 22893), ("shadow-stdlib/src/shadow_stdlib.mli", 579, 22979, 23010), 0))], Tag1 ("Shadow_stdlib", 108)), 0); (("string_of_int", 6924), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12581), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12580), 0), 100000000, 0, -12579), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 582, 23046, 23049), ("shadow-stdlib/src/shadow_stdlib.mli", 582, 23046, 23059), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Int.to_string] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 582, 23046, 23061), ("shadow-stdlib/src/shadow_stdlib.mli", 584, 23132, 23160), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 582, 23046, 23060), ("shadow-stdlib/src/shadow_stdlib.mli", 584, 23132, 23161), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 582, 23046, 23060), ("shadow-stdlib/src/shadow_stdlib.mli", 584, 23132, 23161), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 582, 23046, 23046), ("shadow-stdlib/src/shadow_stdlib.mli", 584, 23132, 23162), 0))], Tag1 ("Shadow_stdlib", 109)), 0); (("int_of_string_opt", 6925), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12578), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12577)], (0)), 100000000, 0, -12576), 0), 100000000, 0, -12575), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 587, 23209, 23212), ("shadow-stdlib/src/shadow_stdlib.mli", 587, 23209, 23222), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.int_of_string_opt] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 587, 23209, 23224), ("shadow-stdlib/src/shadow_stdlib.mli", 590, 23365, 23418), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 587, 23209, 23223), ("shadow-stdlib/src/shadow_stdlib.mli", 590, 23365, 23419), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 587, 23209, 23223), ("shadow-stdlib/src/shadow_stdlib.mli", 590, 23365, 23419), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 587, 23209, 23209), ("shadow-stdlib/src/shadow_stdlib.mli", 590, 23365, 23420), 0))], Tag1 ("Shadow_stdlib", 110)), 0); (("int_of_string", 6926), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12574), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12573), 0), 100000000, 0, -12572), (("caml_int_of_string", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 593, 23484, 23487), ("shadow-stdlib/src/shadow_stdlib.mli", 593, 23484, 23497), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Int.of_string] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 593, 23484, 23499), ("shadow-stdlib/src/shadow_stdlib.mli", 595, 23570, 23598), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 593, 23484, 23498), ("shadow-stdlib/src/shadow_stdlib.mli", 595, 23570, 23599), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 593, 23484, 23498), ("shadow-stdlib/src/shadow_stdlib.mli", 595, 23570, 23599), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 593, 23484, 23484), ("shadow-stdlib/src/shadow_stdlib.mli", 595, 23570, 23600), 0))], Tag1 ("Shadow_stdlib", 111)), 0); (("string_of_float", 6927), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12571), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12570), 0), 100000000, 0, -12569), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 598, 23640, 23643), ("shadow-stdlib/src/shadow_stdlib.mli", 598, 23640, 23653), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.to_string] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 598, 23640, 23655), ("shadow-stdlib/src/shadow_stdlib.mli", 600, 23726, 23756), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 598, 23640, 23654), ("shadow-stdlib/src/shadow_stdlib.mli", 600, 23726, 23757), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 598, 23640, 23654), ("shadow-stdlib/src/shadow_stdlib.mli", 600, 23726, 23757), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 598, 23640, 23640), ("shadow-stdlib/src/shadow_stdlib.mli", 600, 23726, 23758), 0))], Tag1 ("Shadow_stdlib", 112)), 0); (("float_of_string_opt", 6928), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12568), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12567)], (0)), 100000000, 0, -12566), 0), 100000000, 0, -12565), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 603, 23809, 23812), ("shadow-stdlib/src/shadow_stdlib.mli", 603, 23809, 23822), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.float_of_string_opt] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 603, 23809, 23824), ("shadow-stdlib/src/shadow_stdlib.mli", 606, 23965, 24020), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 603, 23809, 23823), ("shadow-stdlib/src/shadow_stdlib.mli", 606, 23965, 24021), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 603, 23809, 23823), ("shadow-stdlib/src/shadow_stdlib.mli", 606, 23965, 24021), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 603, 23809, 23809), ("shadow-stdlib/src/shadow_stdlib.mli", 606, 23965, 24022), 0))], Tag1 ("Shadow_stdlib", 113)), 0); (("float_of_string", 6929), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12564), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12563), 0), 100000000, 0, -12562), (("caml_float_of_string", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 609, 24092, 24095), ("shadow-stdlib/src/shadow_stdlib.mli", 609, 24092, 24105), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.of_string] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 609, 24092, 24107), ("shadow-stdlib/src/shadow_stdlib.mli", 611, 24178, 24208), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 609, 24092, 24106), ("shadow-stdlib/src/shadow_stdlib.mli", 611, 24178, 24209), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 609, 24092, 24106), ("shadow-stdlib/src/shadow_stdlib.mli", 611, 24178, 24209), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 609, 24092, 24092), ("shadow-stdlib/src/shadow_stdlib.mli", 611, 24178, 24210), 0))], Tag1 ("Shadow_stdlib", 114)), 0); Tag1 (("in_channel", 6930), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "in_channel"), 0, (0)), 100000000, 0, -12561)), 0, 0, 0, 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 632, 24978, 24981), ("shadow-stdlib/src/shadow_stdlib.mli", 632, 24978, 24991), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.In_channel.t] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 632, 24978, 24993), ("shadow-stdlib/src/shadow_stdlib.mli", 634, 25064, 25097), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 632, 24978, 24992), ("shadow-stdlib/src/shadow_stdlib.mli", 634, 25064, 25098), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 632, 24978, 24992), ("shadow-stdlib/src/shadow_stdlib.mli", 634, 25064, 25098), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 632, 24978, 24978), ("shadow-stdlib/src/shadow_stdlib.mli", 634, 25064, 25099), 0))], 0, 0, Tag1 ("Shadow_stdlib", 118)), 0, 0); Tag1 (("out_channel", 6931), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -12560)), 0, 0, 0, 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 637, 25146, 25149), ("shadow-stdlib/src/shadow_stdlib.mli", 637, 25146, 25159), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.t] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 637, 25146, 25161), ("shadow-stdlib/src/shadow_stdlib.mli", 639, 25232, 25266), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 637, 25146, 25160), ("shadow-stdlib/src/shadow_stdlib.mli", 639, 25232, 25267), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 637, 25146, 25160), ("shadow-stdlib/src/shadow_stdlib.mli", 639, 25232, 25267), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 637, 25146, 25146), ("shadow-stdlib/src/shadow_stdlib.mli", 639, 25232, 25268), 0))], 0, 0, Tag1 ("Shadow_stdlib", 119)), 0, 0); (("stdin", 6932), ((Tag3 ((("in_channel", 6930)), 0, (0)), 100000000, 0, -12559), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 642, 25293, 25296), ("shadow-stdlib/src/shadow_stdlib.mli", 642, 25293, 25306), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.stdin] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 642, 25293, 25308), ("shadow-stdlib/src/shadow_stdlib.mli", 644, 25379, 25405), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 642, 25293, 25307), ("shadow-stdlib/src/shadow_stdlib.mli", 644, 25379, 25406), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 642, 25293, 25307), ("shadow-stdlib/src/shadow_stdlib.mli", 644, 25379, 25406), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 642, 25293, 25293), ("shadow-stdlib/src/shadow_stdlib.mli", 644, 25379, 25407), 0))], Tag1 ("Shadow_stdlib", 120)), 0); (("stdout", 6933), ((Tag3 ((("out_channel", 6931)), 0, (0)), 100000000, 0, -12558), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 647, 25434, 25437), ("shadow-stdlib/src/shadow_stdlib.mli", 647, 25434, 25447), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.stdout] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 647, 25434, 25449), ("shadow-stdlib/src/shadow_stdlib.mli", 649, 25520, 25547), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 647, 25434, 25448), ("shadow-stdlib/src/shadow_stdlib.mli", 649, 25520, 25548), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 647, 25434, 25448), ("shadow-stdlib/src/shadow_stdlib.mli", 649, 25520, 25548), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 647, 25434, 25434), ("shadow-stdlib/src/shadow_stdlib.mli", 649, 25520, 25549), 0))], Tag1 ("Shadow_stdlib", 121)), 0); (("stderr", 6934), ((Tag3 ((("out_channel", 6931)), 0, (0)), 100000000, 0, -12557), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 652, 25576, 25579), ("shadow-stdlib/src/shadow_stdlib.mli", 652, 25576, 25589), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.stderr] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 652, 25576, 25591), ("shadow-stdlib/src/shadow_stdlib.mli", 654, 25662, 25689), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 652, 25576, 25590), ("shadow-stdlib/src/shadow_stdlib.mli", 654, 25662, 25690), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 652, 25576, 25590), ("shadow-stdlib/src/shadow_stdlib.mli", 654, 25662, 25690), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 652, 25576, 25576), ("shadow-stdlib/src/shadow_stdlib.mli", 654, 25662, 25691), 0))], Tag1 ("Shadow_stdlib", 122)), 0); (("print_char", 6935), ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -12556), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12555), 0), 100000000, 0, -12554), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 657, 25723, 25726), ("shadow-stdlib/src/shadow_stdlib.mli", 657, 25723, 25736), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.output_char Stdio.stdout] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 657, 25723, 25738), ("shadow-stdlib/src/shadow_stdlib.mli", 659, 25809, 25866), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 657, 25723, 25737), ("shadow-stdlib/src/shadow_stdlib.mli", 659, 25809, 25867), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 657, 25723, 25737), ("shadow-stdlib/src/shadow_stdlib.mli", 659, 25809, 25867), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 657, 25723, 25723), ("shadow-stdlib/src/shadow_stdlib.mli", 659, 25809, 25868), 0))], Tag1 ("Shadow_stdlib", 123)), 0); (("print_string", 6936), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12553), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12552), 0), 100000000, 0, -12551), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 662, 25904, 25907), ("shadow-stdlib/src/shadow_stdlib.mli", 662, 25904, 25917), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.output_string Stdio.stdout] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 662, 25904, 25919), ("shadow-stdlib/src/shadow_stdlib.mli", 664, 25990, 26049), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 662, 25904, 25918), ("shadow-stdlib/src/shadow_stdlib.mli", 664, 25990, 26050), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 662, 25904, 25918), ("shadow-stdlib/src/shadow_stdlib.mli", 664, 25990, 26050), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 662, 25904, 25904), ("shadow-stdlib/src/shadow_stdlib.mli", 664, 25990, 26051), 0))], Tag1 ("Shadow_stdlib", 124)), 0); (("print_bytes", 6937), ((Tag1 (0, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -12550), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12549), 0), 100000000, 0, -12548), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 667, 26085, 26088), ("shadow-stdlib/src/shadow_stdlib.mli", 667, 26085, 26098), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.output_bytes Stdio.stdout] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 667, 26085, 26100), ("shadow-stdlib/src/shadow_stdlib.mli", 669, 26171, 26229), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 667, 26085, 26099), ("shadow-stdlib/src/shadow_stdlib.mli", 669, 26171, 26230), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 667, 26085, 26099), ("shadow-stdlib/src/shadow_stdlib.mli", 669, 26171, 26230), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 667, 26085, 26085), ("shadow-stdlib/src/shadow_stdlib.mli", 669, 26171, 26231), 0))], Tag1 ("Shadow_stdlib", 125)), 0); (("print_int", 6938), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12547), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12546), 0), 100000000, 0, -12545), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 672, 26261, 26264), ("shadow-stdlib/src/shadow_stdlib.mli", 672, 26261, 26274), 0)), ([([(Tag5 ((((("%"), (("shadow-stdlib/src/shadow_stdlib.mli", 674, 26347, 26367), ("shadow-stdlib/src/shadow_stdlib.mli", 674, 26347, 26368), 0))), (("shadow-stdlib/src/shadow_stdlib.mli", 674, 26347, 26367), ("shadow-stdlib/src/shadow_stdlib.mli", 674, 26347, 26368), 0), 0, 0), [(0, (Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.eprintf ", (("shadow-stdlib/src/shadow_stdlib.mli", 672, 26261, 26276), ("shadow-stdlib/src/shadow_stdlib.mli", 674, 26347, 26366), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 672, 26261, 26275), ("shadow-stdlib/src/shadow_stdlib.mli", 674, 26347, 26367), 0), 0, 0)); (0, (Tag5 ((((("d"), (("shadow-stdlib/src/shadow_stdlib.mli", 674, 26347, 26368), ("shadow-stdlib/src/shadow_stdlib.mli", 674, 26347, 26369), 0))), (("shadow-stdlib/src/shadow_stdlib.mli", 674, 26347, 26368), ("shadow-stdlib/src/shadow_stdlib.mli", 674, 26347, 26369), 0), 0, 0), [(0, (Tag1 (Tag2 ("] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 674, 26347, 26370), ("shadow-stdlib/src/shadow_stdlib.mli", 674, 26347, 26380), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 674, 26347, 26369), ("shadow-stdlib/src/shadow_stdlib.mli", 674, 26347, 26381), 0), 0, 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 674, 26347, 26368), ("shadow-stdlib/src/shadow_stdlib.mli", 674, 26347, 26381), 0), 0, 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 672, 26261, 26275), ("shadow-stdlib/src/shadow_stdlib.mli", 674, 26347, 26381), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 672, 26261, 26275), ("shadow-stdlib/src/shadow_stdlib.mli", 674, 26347, 26381), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 672, 26261, 26261), ("shadow-stdlib/src/shadow_stdlib.mli", 674, 26347, 26382), 0))], Tag1 ("Shadow_stdlib", 126)), 0); (("print_float", 6939), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12544), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12543), 0), 100000000, 0, -12542), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 677, 26416, 26419), ("shadow-stdlib/src/shadow_stdlib.mli", 677, 26416, 26429), 0)), ([([(Tag5 ((((("%"), (("shadow-stdlib/src/shadow_stdlib.mli", 679, 26502, 26522), ("shadow-stdlib/src/shadow_stdlib.mli", 679, 26502, 26523), 0))), (("shadow-stdlib/src/shadow_stdlib.mli", 679, 26502, 26522), ("shadow-stdlib/src/shadow_stdlib.mli", 679, 26502, 26523), 0), 0, 0), [(0, (Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.eprintf ", (("shadow-stdlib/src/shadow_stdlib.mli", 677, 26416, 26431), ("shadow-stdlib/src/shadow_stdlib.mli", 679, 26502, 26521), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 677, 26416, 26430), ("shadow-stdlib/src/shadow_stdlib.mli", 679, 26502, 26522), 0), 0, 0)); (0, (Tag5 ((((("f"), (("shadow-stdlib/src/shadow_stdlib.mli", 679, 26502, 26523), ("shadow-stdlib/src/shadow_stdlib.mli", 679, 26502, 26524), 0))), (("shadow-stdlib/src/shadow_stdlib.mli", 679, 26502, 26523), ("shadow-stdlib/src/shadow_stdlib.mli", 679, 26502, 26524), 0), 0, 0), [(0, (Tag1 (Tag2 ("] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 679, 26502, 26525), ("shadow-stdlib/src/shadow_stdlib.mli", 679, 26502, 26535), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 679, 26502, 26524), ("shadow-stdlib/src/shadow_stdlib.mli", 679, 26502, 26536), 0), 0, 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 679, 26502, 26523), ("shadow-stdlib/src/shadow_stdlib.mli", 679, 26502, 26536), 0), 0, 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 677, 26416, 26430), ("shadow-stdlib/src/shadow_stdlib.mli", 679, 26502, 26536), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 677, 26416, 26430), ("shadow-stdlib/src/shadow_stdlib.mli", 679, 26502, 26536), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 677, 26416, 26416), ("shadow-stdlib/src/shadow_stdlib.mli", 679, 26502, 26537), 0))], Tag1 ("Shadow_stdlib", 127)), 0); (("print_endline", 6940), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12541), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12540), 0), 100000000, 0, -12539), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 682, 26574, 26577), ("shadow-stdlib/src/shadow_stdlib.mli", 682, 26574, 26587), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.print_endline] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 682, 26574, 26589), ("shadow-stdlib/src/shadow_stdlib.mli", 684, 26660, 26694), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 682, 26574, 26588), ("shadow-stdlib/src/shadow_stdlib.mli", 684, 26660, 26695), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 682, 26574, 26588), ("shadow-stdlib/src/shadow_stdlib.mli", 684, 26660, 26695), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 682, 26574, 26574), ("shadow-stdlib/src/shadow_stdlib.mli", 684, 26660, 26696), 0))], Tag1 ("Shadow_stdlib", 128)), 0); (("print_newline", 6941), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12538), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12537), 0), 100000000, 0, -12536), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 687, 26731, 26734), ("shadow-stdlib/src/shadow_stdlib.mli", 687, 26731, 26744), 0)), ([([(Tag5 ((((("%!"), (("shadow-stdlib/src/shadow_stdlib.mli", 690, 26838, 26838), ("shadow-stdlib/src/shadow_stdlib.mli", 690, 26838, 26840), 0))), (("shadow-stdlib/src/shadow_stdlib.mli", 690, 26838, 26838), ("shadow-stdlib/src/shadow_stdlib.mli", 690, 26838, 26840), 0), 0, 0), [(0, (Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.eprintf ", (("shadow-stdlib/src/shadow_stdlib.mli", 687, 26731, 26746), ("shadow-stdlib/src/shadow_stdlib.mli", 689, 26817, 26836), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 687, 26731, 26745), ("shadow-stdlib/src/shadow_stdlib.mli", 689, 26817, 26837), 0), 0, 0)); (0, (Tag1 (Tag2 ("] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 690, 26838, 26841), ("shadow-stdlib/src/shadow_stdlib.mli", 690, 26838, 26851), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 690, 26838, 26840), ("shadow-stdlib/src/shadow_stdlib.mli", 690, 26838, 26852), 0), 0, 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 687, 26731, 26745), ("shadow-stdlib/src/shadow_stdlib.mli", 690, 26838, 26852), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 687, 26731, 26745), ("shadow-stdlib/src/shadow_stdlib.mli", 690, 26838, 26852), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 687, 26731, 26731), ("shadow-stdlib/src/shadow_stdlib.mli", 690, 26838, 26853), 0))], Tag1 ("Shadow_stdlib", 129)), 0); (("prerr_char", 6942), ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -12535), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12534), 0), 100000000, 0, -12533), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 693, 26885, 26888), ("shadow-stdlib/src/shadow_stdlib.mli", 693, 26885, 26898), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.output_char Stdio.stderr] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 693, 26885, 26900), ("shadow-stdlib/src/shadow_stdlib.mli", 695, 26971, 27028), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 693, 26885, 26899), ("shadow-stdlib/src/shadow_stdlib.mli", 695, 26971, 27029), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 693, 26885, 26899), ("shadow-stdlib/src/shadow_stdlib.mli", 695, 26971, 27029), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 693, 26885, 26885), ("shadow-stdlib/src/shadow_stdlib.mli", 695, 26971, 27030), 0))], Tag1 ("Shadow_stdlib", 130)), 0); (("prerr_string", 6943), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12532), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12531), 0), 100000000, 0, -12530), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 698, 27066, 27069), ("shadow-stdlib/src/shadow_stdlib.mli", 698, 27066, 27079), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.output_string Stdio.stderr] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 698, 27066, 27081), ("shadow-stdlib/src/shadow_stdlib.mli", 700, 27152, 27211), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 698, 27066, 27080), ("shadow-stdlib/src/shadow_stdlib.mli", 700, 27152, 27212), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 698, 27066, 27080), ("shadow-stdlib/src/shadow_stdlib.mli", 700, 27152, 27212), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 698, 27066, 27066), ("shadow-stdlib/src/shadow_stdlib.mli", 700, 27152, 27213), 0))], Tag1 ("Shadow_stdlib", 131)), 0); (("prerr_bytes", 6944), ((Tag1 (0, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -12529), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12528), 0), 100000000, 0, -12527), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 703, 27247, 27250), ("shadow-stdlib/src/shadow_stdlib.mli", 703, 27247, 27260), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.output_bytes Stdio.stderr] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 703, 27247, 27262), ("shadow-stdlib/src/shadow_stdlib.mli", 705, 27333, 27391), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 703, 27247, 27261), ("shadow-stdlib/src/shadow_stdlib.mli", 705, 27333, 27392), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 703, 27247, 27261), ("shadow-stdlib/src/shadow_stdlib.mli", 705, 27333, 27392), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 703, 27247, 27247), ("shadow-stdlib/src/shadow_stdlib.mli", 705, 27333, 27393), 0))], Tag1 ("Shadow_stdlib", 132)), 0); (("prerr_int", 6945), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12526), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12525), 0), 100000000, 0, -12524), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 708, 27423, 27426), ("shadow-stdlib/src/shadow_stdlib.mli", 708, 27423, 27436), 0)), ([([(Tag5 ((((("%"), (("shadow-stdlib/src/shadow_stdlib.mli", 710, 27509, 27529), ("shadow-stdlib/src/shadow_stdlib.mli", 710, 27509, 27530), 0))), (("shadow-stdlib/src/shadow_stdlib.mli", 710, 27509, 27529), ("shadow-stdlib/src/shadow_stdlib.mli", 710, 27509, 27530), 0), 0, 0), [(0, (Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.eprintf ", (("shadow-stdlib/src/shadow_stdlib.mli", 708, 27423, 27438), ("shadow-stdlib/src/shadow_stdlib.mli", 710, 27509, 27528), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 708, 27423, 27437), ("shadow-stdlib/src/shadow_stdlib.mli", 710, 27509, 27529), 0), 0, 0)); (0, (Tag5 ((((("d"), (("shadow-stdlib/src/shadow_stdlib.mli", 710, 27509, 27530), ("shadow-stdlib/src/shadow_stdlib.mli", 710, 27509, 27531), 0))), (("shadow-stdlib/src/shadow_stdlib.mli", 710, 27509, 27530), ("shadow-stdlib/src/shadow_stdlib.mli", 710, 27509, 27531), 0), 0, 0), [(0, (Tag1 (Tag2 ("] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 710, 27509, 27532), ("shadow-stdlib/src/shadow_stdlib.mli", 710, 27509, 27542), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 710, 27509, 27531), ("shadow-stdlib/src/shadow_stdlib.mli", 710, 27509, 27543), 0), 0, 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 710, 27509, 27530), ("shadow-stdlib/src/shadow_stdlib.mli", 710, 27509, 27543), 0), 0, 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 708, 27423, 27437), ("shadow-stdlib/src/shadow_stdlib.mli", 710, 27509, 27543), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 708, 27423, 27437), ("shadow-stdlib/src/shadow_stdlib.mli", 710, 27509, 27543), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 708, 27423, 27423), ("shadow-stdlib/src/shadow_stdlib.mli", 710, 27509, 27544), 0))], Tag1 ("Shadow_stdlib", 133)), 0); (("prerr_float", 6946), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12523), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12522), 0), 100000000, 0, -12521), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 713, 27578, 27581), ("shadow-stdlib/src/shadow_stdlib.mli", 713, 27578, 27591), 0)), ([([(Tag5 ((((("%"), (("shadow-stdlib/src/shadow_stdlib.mli", 715, 27664, 27684), ("shadow-stdlib/src/shadow_stdlib.mli", 715, 27664, 27685), 0))), (("shadow-stdlib/src/shadow_stdlib.mli", 715, 27664, 27684), ("shadow-stdlib/src/shadow_stdlib.mli", 715, 27664, 27685), 0), 0, 0), [(0, (Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.eprintf ", (("shadow-stdlib/src/shadow_stdlib.mli", 713, 27578, 27593), ("shadow-stdlib/src/shadow_stdlib.mli", 715, 27664, 27683), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 713, 27578, 27592), ("shadow-stdlib/src/shadow_stdlib.mli", 715, 27664, 27684), 0), 0, 0)); (0, (Tag5 ((((("f"), (("shadow-stdlib/src/shadow_stdlib.mli", 715, 27664, 27685), ("shadow-stdlib/src/shadow_stdlib.mli", 715, 27664, 27686), 0))), (("shadow-stdlib/src/shadow_stdlib.mli", 715, 27664, 27685), ("shadow-stdlib/src/shadow_stdlib.mli", 715, 27664, 27686), 0), 0, 0), [(0, (Tag1 (Tag2 ("] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 715, 27664, 27687), ("shadow-stdlib/src/shadow_stdlib.mli", 715, 27664, 27697), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 715, 27664, 27686), ("shadow-stdlib/src/shadow_stdlib.mli", 715, 27664, 27698), 0), 0, 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 715, 27664, 27685), ("shadow-stdlib/src/shadow_stdlib.mli", 715, 27664, 27698), 0), 0, 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 713, 27578, 27592), ("shadow-stdlib/src/shadow_stdlib.mli", 715, 27664, 27698), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 713, 27578, 27592), ("shadow-stdlib/src/shadow_stdlib.mli", 715, 27664, 27698), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 713, 27578, 27578), ("shadow-stdlib/src/shadow_stdlib.mli", 715, 27664, 27699), 0))], Tag1 ("Shadow_stdlib", 134)), 0); (("prerr_endline", 6947), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12520), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12519), 0), 100000000, 0, -12518), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 718, 27736, 27739), ("shadow-stdlib/src/shadow_stdlib.mli", 718, 27736, 27749), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.prerr_endline] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 718, 27736, 27751), ("shadow-stdlib/src/shadow_stdlib.mli", 720, 27822, 27856), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 718, 27736, 27750), ("shadow-stdlib/src/shadow_stdlib.mli", 720, 27822, 27857), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 718, 27736, 27750), ("shadow-stdlib/src/shadow_stdlib.mli", 720, 27822, 27857), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 718, 27736, 27736), ("shadow-stdlib/src/shadow_stdlib.mli", 720, 27822, 27858), 0))], Tag1 ("Shadow_stdlib", 135)), 0); (("prerr_newline", 6948), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12517), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12516), 0), 100000000, 0, -12515), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 723, 27893, 27896), ("shadow-stdlib/src/shadow_stdlib.mli", 723, 27893, 27906), 0)), ([([(Tag5 ((((("%!"), (("shadow-stdlib/src/shadow_stdlib.mli", 726, 28000, 28000), ("shadow-stdlib/src/shadow_stdlib.mli", 726, 28000, 28002), 0))), (("shadow-stdlib/src/shadow_stdlib.mli", 726, 28000, 28000), ("shadow-stdlib/src/shadow_stdlib.mli", 726, 28000, 28002), 0), 0, 0), [(0, (Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.eprintf ", (("shadow-stdlib/src/shadow_stdlib.mli", 723, 27893, 27908), ("shadow-stdlib/src/shadow_stdlib.mli", 725, 27979, 27998), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 723, 27893, 27907), ("shadow-stdlib/src/shadow_stdlib.mli", 725, 27979, 27999), 0), 0, 0)); (0, (Tag1 (Tag2 ("] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 726, 28000, 28003), ("shadow-stdlib/src/shadow_stdlib.mli", 726, 28000, 28013), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 726, 28000, 28002), ("shadow-stdlib/src/shadow_stdlib.mli", 726, 28000, 28014), 0), 0, 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 723, 27893, 27907), ("shadow-stdlib/src/shadow_stdlib.mli", 726, 28000, 28014), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 723, 27893, 27907), ("shadow-stdlib/src/shadow_stdlib.mli", 726, 28000, 28014), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 723, 27893, 27893), ("shadow-stdlib/src/shadow_stdlib.mli", 726, 28000, 28015), 0))], Tag1 ("Shadow_stdlib", 136)), 0); (("read_line", 6949), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12514), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12513), 0), 100000000, 0, -12512), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 729, 28048, 28051), ("shadow-stdlib/src/shadow_stdlib.mli", 729, 28048, 28061), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.In_channel.input_line] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 729, 28048, 28063), ("shadow-stdlib/src/shadow_stdlib.mli", 731, 28134, 28176), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 729, 28048, 28062), ("shadow-stdlib/src/shadow_stdlib.mli", 731, 28134, 28177), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 729, 28048, 28062), ("shadow-stdlib/src/shadow_stdlib.mli", 731, 28134, 28177), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 729, 28048, 28048), ("shadow-stdlib/src/shadow_stdlib.mli", 731, 28134, 28178), 0))], Tag1 ("Shadow_stdlib", 137)), 0); (("read_int_opt", 6950), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12511), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12510)], (0)), 100000000, 0, -12509), 0), 100000000, 0, -12508), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 734, 28218, 28221), ("shadow-stdlib/src/shadow_stdlib.mli", 734, 28218, 28231), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.read_int_opt] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 734, 28218, 28233), ("shadow-stdlib/src/shadow_stdlib.mli", 737, 28374, 28422), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 734, 28218, 28232), ("shadow-stdlib/src/shadow_stdlib.mli", 737, 28374, 28423), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 734, 28218, 28232), ("shadow-stdlib/src/shadow_stdlib.mli", 737, 28374, 28423), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 734, 28218, 28218), ("shadow-stdlib/src/shadow_stdlib.mli", 737, 28374, 28424), 0))], Tag1 ("Shadow_stdlib", 138)), 0); (("read_int", 6951), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12507), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12506), 0), 100000000, 0, -12505), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 740, 28453, 28456), ("shadow-stdlib/src/shadow_stdlib.mli", 740, 28453, 28466), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.read_int] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 740, 28453, 28468), ("shadow-stdlib/src/shadow_stdlib.mli", 743, 28609, 28653), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 740, 28453, 28467), ("shadow-stdlib/src/shadow_stdlib.mli", 743, 28609, 28654), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 740, 28453, 28467), ("shadow-stdlib/src/shadow_stdlib.mli", 743, 28609, 28654), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 740, 28453, 28453), ("shadow-stdlib/src/shadow_stdlib.mli", 743, 28609, 28655), 0))], Tag1 ("Shadow_stdlib", 139)), 0); (("read_float_opt", 6952), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12504), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12503)], (0)), 100000000, 0, -12502), 0), 100000000, 0, -12501), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 746, 28699, 28702), ("shadow-stdlib/src/shadow_stdlib.mli", 746, 28699, 28712), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.read_float_opt] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 746, 28699, 28714), ("shadow-stdlib/src/shadow_stdlib.mli", 749, 28855, 28905), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 746, 28699, 28713), ("shadow-stdlib/src/shadow_stdlib.mli", 749, 28855, 28906), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 746, 28699, 28713), ("shadow-stdlib/src/shadow_stdlib.mli", 749, 28855, 28906), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 746, 28699, 28699), ("shadow-stdlib/src/shadow_stdlib.mli", 749, 28855, 28907), 0))], Tag1 ("Shadow_stdlib", 140)), 0); (("read_float", 6953), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12500), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -12499), 0), 100000000, 0, -12498), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 752, 28940, 28943), ("shadow-stdlib/src/shadow_stdlib.mli", 752, 28940, 28953), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.read_float] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 752, 28940, 28955), ("shadow-stdlib/src/shadow_stdlib.mli", 755, 29096, 29142), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 752, 28940, 28954), ("shadow-stdlib/src/shadow_stdlib.mli", 755, 29096, 29143), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 752, 28940, 28954), ("shadow-stdlib/src/shadow_stdlib.mli", 755, 29096, 29143), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 752, 28940, 28940), ("shadow-stdlib/src/shadow_stdlib.mli", 755, 29096, 29144), 0))], Tag1 ("Shadow_stdlib", 141)), 0); Tag1 (("open_flag", 6954), (0, 0, Tag1 ([(("Open_rdonly", 412), (0), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), 0, Tag1 ("Shadow_stdlib", 143)); (("Open_wronly", 413), (0), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), 0, Tag1 ("Shadow_stdlib", 144)); (("Open_append", 414), (0), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), 0, Tag1 ("Shadow_stdlib", 145)); (("Open_creat", 415), (0), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), 0, Tag1 ("Shadow_stdlib", 146)); (("Open_trunc", 416), (0), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), 0, Tag1 ("Shadow_stdlib", 147)); (("Open_excl", 417), (0), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), 0, Tag1 ("Shadow_stdlib", 148)); (("Open_binary", 418), (0), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), 0, Tag1 ("Shadow_stdlib", 149)); (("Open_text", 419), (0), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), 0, Tag1 ("Shadow_stdlib", 150)); (("Open_nonblock", 420), (0), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), 0, Tag1 ("Shadow_stdlib", 151))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "open_flag"), 0, (0)), 100000000, 0, -12497)), 0, 0, 0, 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 758, 29309, 29312), ("shadow-stdlib/src/shadow_stdlib.mli", 758, 29309, 29322), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.open_flag instead", (("shadow-stdlib/src/shadow_stdlib.mli", 758, 29309, 29324), ("shadow-stdlib/src/shadow_stdlib.mli", 762, 29545, 29594), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 758, 29309, 29323), ("shadow-stdlib/src/shadow_stdlib.mli", 762, 29545, 29595), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 758, 29309, 29323), ("shadow-stdlib/src/shadow_stdlib.mli", 762, 29545, 29595), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 758, 29309, 29309), ("shadow-stdlib/src/shadow_stdlib.mli", 762, 29545, 29596), 0))], 1, 0, Tag1 ("Shadow_stdlib", 142)), 0, 0); (("open_out", 6955), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12496), (Tag3 ((("out_channel", 6931)), 0, (0)), 100000000, 0, -12495), 0), 100000000, 0, -12494), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 765, 29635, 29638), ("shadow-stdlib/src/shadow_stdlib.mli", 765, 29635, 29648), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.create] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 765, 29635, 29650), ("shadow-stdlib/src/shadow_stdlib.mli", 767, 29721, 29760), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 765, 29635, 29649), ("shadow-stdlib/src/shadow_stdlib.mli", 767, 29721, 29761), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 765, 29635, 29649), ("shadow-stdlib/src/shadow_stdlib.mli", 767, 29721, 29761), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 765, 29635, 29635), ("shadow-stdlib/src/shadow_stdlib.mli", 767, 29721, 29762), 0))], Tag1 ("Shadow_stdlib", 152)), 0); (("open_out_bin", 6956), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12493), (Tag3 ((("out_channel", 6931)), 0, (0)), 100000000, 0, -12492), 0), 100000000, 0, -12491), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 770, 29805, 29808), ("shadow-stdlib/src/shadow_stdlib.mli", 770, 29805, 29818), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.create] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 770, 29805, 29820), ("shadow-stdlib/src/shadow_stdlib.mli", 772, 29891, 29930), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 770, 29805, 29819), ("shadow-stdlib/src/shadow_stdlib.mli", 772, 29891, 29931), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 770, 29805, 29819), ("shadow-stdlib/src/shadow_stdlib.mli", 772, 29891, 29931), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 770, 29805, 29805), ("shadow-stdlib/src/shadow_stdlib.mli", 772, 29891, 29932), 0))], Tag1 ("Shadow_stdlib", 153)), 0); (("open_out_gen", 6957), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("open_flag", 6954)), 0, (0)), 100000000, 0, -12490)], (0)), 100000000, 0, -12489), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12488), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12487), (Tag3 ((("out_channel", 6931)), 0, (0)), 100000000, 0, -12486), 0), 100000000, 0, -12485), 0), 100000000, 0, -12484), 0), 100000000, 0, -12483), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 775, 30000, 30003), ("shadow-stdlib/src/shadow_stdlib.mli", 775, 30000, 30013), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.open_out_gen] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 775, 30000, 30015), ("shadow-stdlib/src/shadow_stdlib.mli", 778, 30156, 30204), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 775, 30000, 30014), ("shadow-stdlib/src/shadow_stdlib.mli", 778, 30156, 30205), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 775, 30000, 30014), ("shadow-stdlib/src/shadow_stdlib.mli", 778, 30156, 30205), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 775, 30000, 30000), ("shadow-stdlib/src/shadow_stdlib.mli", 778, 30156, 30206), 0))], Tag1 ("Shadow_stdlib", 154)), 0); (("flush", 6958), ((Tag1 (0, (Tag3 ((("out_channel", 6931)), 0, (0)), 100000000, 0, -12482), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12481), 0), 100000000, 0, -12480), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 781, 30240, 30243), ("shadow-stdlib/src/shadow_stdlib.mli", 781, 30240, 30253), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.flush] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 781, 30240, 30255), ("shadow-stdlib/src/shadow_stdlib.mli", 783, 30326, 30364), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 781, 30240, 30254), ("shadow-stdlib/src/shadow_stdlib.mli", 783, 30326, 30365), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 781, 30240, 30254), ("shadow-stdlib/src/shadow_stdlib.mli", 783, 30326, 30365), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 781, 30240, 30240), ("shadow-stdlib/src/shadow_stdlib.mli", 783, 30326, 30366), 0))], Tag1 ("Shadow_stdlib", 155)), 0); (("flush_all", 6959), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12479), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12478), 0), 100000000, 0, -12477), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 786, 30397, 30400), ("shadow-stdlib/src/shadow_stdlib.mli", 786, 30397, 30410), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.flush_all] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 786, 30397, 30412), ("shadow-stdlib/src/shadow_stdlib.mli", 789, 30553, 30598), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 786, 30397, 30411), ("shadow-stdlib/src/shadow_stdlib.mli", 789, 30553, 30599), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 786, 30397, 30411), ("shadow-stdlib/src/shadow_stdlib.mli", 789, 30553, 30599), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 786, 30397, 30397), ("shadow-stdlib/src/shadow_stdlib.mli", 789, 30553, 30600), 0))], Tag1 ("Shadow_stdlib", 156)), 0); (("output_char", 6960), ((Tag1 (0, (Tag3 ((("out_channel", 6931)), 0, (0)), 100000000, 0, -12476), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -12475), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12474), 0), 100000000, 0, -12473), 0), 100000000, 0, -12472), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 792, 30648, 30651), ("shadow-stdlib/src/shadow_stdlib.mli", 792, 30648, 30661), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.output_char] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 792, 30648, 30663), ("shadow-stdlib/src/shadow_stdlib.mli", 794, 30734, 30778), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 792, 30648, 30662), ("shadow-stdlib/src/shadow_stdlib.mli", 794, 30734, 30779), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 792, 30648, 30662), ("shadow-stdlib/src/shadow_stdlib.mli", 794, 30734, 30779), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 792, 30648, 30648), ("shadow-stdlib/src/shadow_stdlib.mli", 794, 30734, 30780), 0))], Tag1 ("Shadow_stdlib", 157)), 0); (("output_string", 6961), ((Tag1 (0, (Tag3 ((("out_channel", 6931)), 0, (0)), 100000000, 0, -12471), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12470), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12469), 0), 100000000, 0, -12468), 0), 100000000, 0, -12467), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 797, 30832, 30835), ("shadow-stdlib/src/shadow_stdlib.mli", 797, 30832, 30845), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.output_string] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 797, 30832, 30847), ("shadow-stdlib/src/shadow_stdlib.mli", 799, 30918, 30964), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 797, 30832, 30846), ("shadow-stdlib/src/shadow_stdlib.mli", 799, 30918, 30965), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 797, 30832, 30846), ("shadow-stdlib/src/shadow_stdlib.mli", 799, 30918, 30965), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 797, 30832, 30832), ("shadow-stdlib/src/shadow_stdlib.mli", 799, 30918, 30966), 0))], Tag1 ("Shadow_stdlib", 158)), 0); (("output_bytes", 6962), ((Tag1 (0, (Tag3 ((("out_channel", 6931)), 0, (0)), 100000000, 0, -12466), (Tag1 (0, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -12465), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12464), 0), 100000000, 0, -12463), 0), 100000000, 0, -12462), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 802, 31016, 31019), ("shadow-stdlib/src/shadow_stdlib.mli", 802, 31016, 31029), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.output_bytes] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 802, 31016, 31031), ("shadow-stdlib/src/shadow_stdlib.mli", 804, 31102, 31147), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 802, 31016, 31030), ("shadow-stdlib/src/shadow_stdlib.mli", 804, 31102, 31148), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 802, 31016, 31030), ("shadow-stdlib/src/shadow_stdlib.mli", 804, 31102, 31148), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 802, 31016, 31016), ("shadow-stdlib/src/shadow_stdlib.mli", 804, 31102, 31149), 0))], Tag1 ("Shadow_stdlib", 159)), 0); (("output", 6963), ((Tag1 (0, (Tag3 ((("out_channel", 6931)), 0, (0)), 100000000, 0, -12461), (Tag1 (0, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -12460), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12459), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12458), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12457), 0), 100000000, 0, -12456), 0), 100000000, 0, -12455), 0), 100000000, 0, -12454), 0), 100000000, 0, -12453), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 807, 31207, 31210), ("shadow-stdlib/src/shadow_stdlib.mli", 807, 31207, 31220), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.output] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 807, 31207, 31222), ("shadow-stdlib/src/shadow_stdlib.mli", 809, 31293, 31332), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 807, 31207, 31221), ("shadow-stdlib/src/shadow_stdlib.mli", 809, 31293, 31333), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 807, 31207, 31221), ("shadow-stdlib/src/shadow_stdlib.mli", 809, 31293, 31333), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 807, 31207, 31207), ("shadow-stdlib/src/shadow_stdlib.mli", 809, 31293, 31334), 0))], Tag1 ("Shadow_stdlib", 160)), 0); (("output_substring", 6964), ((Tag1 (0, (Tag3 ((("out_channel", 6931)), 0, (0)), 100000000, 0, -12452), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12451), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12450), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12449), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12448), 0), 100000000, 0, -12447), 0), 100000000, 0, -12446), 0), 100000000, 0, -12445), 0), 100000000, 0, -12444), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 812, 31403, 31406), ("shadow-stdlib/src/shadow_stdlib.mli", 812, 31403, 31416), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.output] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 812, 31403, 31418), ("shadow-stdlib/src/shadow_stdlib.mli", 814, 31489, 31528), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 812, 31403, 31417), ("shadow-stdlib/src/shadow_stdlib.mli", 814, 31489, 31529), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 812, 31403, 31417), ("shadow-stdlib/src/shadow_stdlib.mli", 814, 31489, 31529), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 812, 31403, 31403), ("shadow-stdlib/src/shadow_stdlib.mli", 814, 31489, 31530), 0))], Tag1 ("Shadow_stdlib", 161)), 0); (("output_byte", 6965), ((Tag1 (0, (Tag3 ((("out_channel", 6931)), 0, (0)), 100000000, 0, -12443), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12442), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12441), 0), 100000000, 0, -12440), 0), 100000000, 0, -12439), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 817, 31577, 31580), ("shadow-stdlib/src/shadow_stdlib.mli", 817, 31577, 31590), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.output_byte] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 817, 31577, 31592), ("shadow-stdlib/src/shadow_stdlib.mli", 819, 31663, 31707), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 817, 31577, 31591), ("shadow-stdlib/src/shadow_stdlib.mli", 819, 31663, 31708), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 817, 31577, 31591), ("shadow-stdlib/src/shadow_stdlib.mli", 819, 31663, 31708), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 817, 31577, 31577), ("shadow-stdlib/src/shadow_stdlib.mli", 819, 31663, 31709), 0))], Tag1 ("Shadow_stdlib", 162)), 0); (("output_binary_int", 6966), ((Tag1 (0, (Tag3 ((("out_channel", 6931)), 0, (0)), 100000000, 0, -12438), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12437), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12436), 0), 100000000, 0, -12435), 0), 100000000, 0, -12434), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 822, 31762, 31765), ("shadow-stdlib/src/shadow_stdlib.mli", 822, 31762, 31775), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.output_binary_int] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 822, 31762, 31777), ("shadow-stdlib/src/shadow_stdlib.mli", 824, 31848, 31898), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 822, 31762, 31776), ("shadow-stdlib/src/shadow_stdlib.mli", 824, 31848, 31899), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 822, 31762, 31776), ("shadow-stdlib/src/shadow_stdlib.mli", 824, 31848, 31899), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 822, 31762, 31762), ("shadow-stdlib/src/shadow_stdlib.mli", 824, 31848, 31900), 0))], Tag1 ("Shadow_stdlib", 163)), 0); (("output_value", 6967), ((Tag1 (0, (Tag3 ((("out_channel", 6931)), 0, (0)), 100000000, 0, -12433), (Tag1 (0, ((("a")), 100000000, 0, -12432), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12431), 0), 100000000, 0, -12430), 0), 100000000, 0, -12429), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 827, 31947, 31950), ("shadow-stdlib/src/shadow_stdlib.mli", 827, 31947, 31960), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.output_value] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 827, 31947, 31962), ("shadow-stdlib/src/shadow_stdlib.mli", 829, 32033, 32078), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 827, 31947, 31961), ("shadow-stdlib/src/shadow_stdlib.mli", 829, 32033, 32079), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 827, 31947, 31961), ("shadow-stdlib/src/shadow_stdlib.mli", 829, 32033, 32079), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 827, 31947, 31947), ("shadow-stdlib/src/shadow_stdlib.mli", 829, 32033, 32080), 0))], Tag1 ("Shadow_stdlib", 164)), 0); (("seek_out", 6968), ((Tag1 (0, (Tag3 ((("out_channel", 6931)), 0, (0)), 100000000, 0, -12428), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12427), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12426), 0), 100000000, 0, -12425), 0), 100000000, 0, -12424), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 832, 32124, 32127), ("shadow-stdlib/src/shadow_stdlib.mli", 832, 32124, 32137), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.seek] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 832, 32124, 32139), ("shadow-stdlib/src/shadow_stdlib.mli", 834, 32210, 32247), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 832, 32124, 32138), ("shadow-stdlib/src/shadow_stdlib.mli", 834, 32210, 32248), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 832, 32124, 32138), ("shadow-stdlib/src/shadow_stdlib.mli", 834, 32210, 32248), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 832, 32124, 32124), ("shadow-stdlib/src/shadow_stdlib.mli", 834, 32210, 32249), 0))], Tag1 ("Shadow_stdlib", 165)), 0); (("pos_out", 6969), ((Tag1 (0, (Tag3 ((("out_channel", 6931)), 0, (0)), 100000000, 0, -12423), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12422), 0), 100000000, 0, -12421), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 837, 32284, 32287), ("shadow-stdlib/src/shadow_stdlib.mli", 837, 32284, 32297), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.pos] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 837, 32284, 32299), ("shadow-stdlib/src/shadow_stdlib.mli", 839, 32370, 32406), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 837, 32284, 32298), ("shadow-stdlib/src/shadow_stdlib.mli", 839, 32370, 32407), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 837, 32284, 32298), ("shadow-stdlib/src/shadow_stdlib.mli", 839, 32370, 32407), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 837, 32284, 32284), ("shadow-stdlib/src/shadow_stdlib.mli", 839, 32370, 32408), 0))], Tag1 ("Shadow_stdlib", 166)), 0); (("out_channel_length", 6970), ((Tag1 (0, (Tag3 ((("out_channel", 6931)), 0, (0)), 100000000, 0, -12420), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12419), 0), 100000000, 0, -12418), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 842, 32454, 32457), ("shadow-stdlib/src/shadow_stdlib.mli", 842, 32454, 32467), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.length] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 842, 32454, 32469), ("shadow-stdlib/src/shadow_stdlib.mli", 844, 32540, 32579), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 842, 32454, 32468), ("shadow-stdlib/src/shadow_stdlib.mli", 844, 32540, 32580), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 842, 32454, 32468), ("shadow-stdlib/src/shadow_stdlib.mli", 844, 32540, 32580), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 842, 32454, 32454), ("shadow-stdlib/src/shadow_stdlib.mli", 844, 32540, 32581), 0))], Tag1 ("Shadow_stdlib", 167)), 0); (("close_out", 6971), ((Tag1 (0, (Tag3 ((("out_channel", 6931)), 0, (0)), 100000000, 0, -12417), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12416), 0), 100000000, 0, -12415), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 847, 32619, 32622), ("shadow-stdlib/src/shadow_stdlib.mli", 847, 32619, 32632), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.close] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 847, 32619, 32634), ("shadow-stdlib/src/shadow_stdlib.mli", 849, 32705, 32743), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 847, 32619, 32633), ("shadow-stdlib/src/shadow_stdlib.mli", 849, 32705, 32744), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 847, 32619, 32633), ("shadow-stdlib/src/shadow_stdlib.mli", 849, 32705, 32744), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 847, 32619, 32619), ("shadow-stdlib/src/shadow_stdlib.mli", 849, 32705, 32745), 0))], Tag1 ("Shadow_stdlib", 168)), 0); (("close_out_noerr", 6972), ((Tag1 (0, (Tag3 ((("out_channel", 6931)), 0, (0)), 100000000, 0, -12414), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12413), 0), 100000000, 0, -12412), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 852, 32789, 32792), ("shadow-stdlib/src/shadow_stdlib.mli", 852, 32789, 32802), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.close] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 852, 32789, 32804), ("shadow-stdlib/src/shadow_stdlib.mli", 854, 32875, 32913), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 852, 32789, 32803), ("shadow-stdlib/src/shadow_stdlib.mli", 854, 32875, 32914), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 852, 32789, 32803), ("shadow-stdlib/src/shadow_stdlib.mli", 854, 32875, 32914), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 852, 32789, 32789), ("shadow-stdlib/src/shadow_stdlib.mli", 854, 32875, 32915), 0))], Tag1 ("Shadow_stdlib", 169)), 0); (("set_binary_mode_out", 6973), ((Tag1 (0, (Tag3 ((("out_channel", 6931)), 0, (0)), 100000000, 0, -12411), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -12410), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12409), 0), 100000000, 0, -12408), 0), 100000000, 0, -12407), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 857, 32971, 32974), ("shadow-stdlib/src/shadow_stdlib.mli", 857, 32971, 32984), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.set_binary_mode] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 857, 32971, 32986), ("shadow-stdlib/src/shadow_stdlib.mli", 859, 33057, 33105), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 857, 32971, 32985), ("shadow-stdlib/src/shadow_stdlib.mli", 859, 33057, 33106), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 857, 32971, 32985), ("shadow-stdlib/src/shadow_stdlib.mli", 859, 33057, 33106), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 857, 32971, 32971), ("shadow-stdlib/src/shadow_stdlib.mli", 859, 33057, 33107), 0))], Tag1 ("Shadow_stdlib", 170)), 0); (("open_in", 6974), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12406), (Tag3 ((("in_channel", 6930)), 0, (0)), 100000000, 0, -12405), 0), 100000000, 0, -12404), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 862, 33144, 33147), ("shadow-stdlib/src/shadow_stdlib.mli", 862, 33144, 33157), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.In_channel.create] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 862, 33144, 33159), ("shadow-stdlib/src/shadow_stdlib.mli", 864, 33230, 33268), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 862, 33144, 33158), ("shadow-stdlib/src/shadow_stdlib.mli", 864, 33230, 33269), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 862, 33144, 33158), ("shadow-stdlib/src/shadow_stdlib.mli", 864, 33230, 33269), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 862, 33144, 33144), ("shadow-stdlib/src/shadow_stdlib.mli", 864, 33230, 33270), 0))], Tag1 ("Shadow_stdlib", 171)), 0); (("open_in_bin", 6975), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12403), (Tag3 ((("in_channel", 6930)), 0, (0)), 100000000, 0, -12402), 0), 100000000, 0, -12401), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 867, 33311, 33314), ("shadow-stdlib/src/shadow_stdlib.mli", 867, 33311, 33324), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.In_channel.create] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 867, 33311, 33326), ("shadow-stdlib/src/shadow_stdlib.mli", 869, 33397, 33435), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 867, 33311, 33325), ("shadow-stdlib/src/shadow_stdlib.mli", 869, 33397, 33436), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 867, 33311, 33325), ("shadow-stdlib/src/shadow_stdlib.mli", 869, 33397, 33436), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 867, 33311, 33311), ("shadow-stdlib/src/shadow_stdlib.mli", 869, 33397, 33437), 0))], Tag1 ("Shadow_stdlib", 172)), 0); (("open_in_gen", 6976), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("open_flag", 6954)), 0, (0)), 100000000, 0, -12400)], (0)), 100000000, 0, -12399), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12398), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12397), (Tag3 ((("in_channel", 6930)), 0, (0)), 100000000, 0, -12396), 0), 100000000, 0, -12395), 0), 100000000, 0, -12394), 0), 100000000, 0, -12393), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 872, 33503, 33506), ("shadow-stdlib/src/shadow_stdlib.mli", 872, 33503, 33516), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.open_in_gen] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 872, 33503, 33518), ("shadow-stdlib/src/shadow_stdlib.mli", 875, 33659, 33706), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 872, 33503, 33517), ("shadow-stdlib/src/shadow_stdlib.mli", 875, 33659, 33707), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 872, 33503, 33517), ("shadow-stdlib/src/shadow_stdlib.mli", 875, 33659, 33707), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 872, 33503, 33503), ("shadow-stdlib/src/shadow_stdlib.mli", 875, 33659, 33708), 0))], Tag1 ("Shadow_stdlib", 173)), 0); (("input_char", 6977), ((Tag1 (0, (Tag3 ((("in_channel", 6930)), 0, (0)), 100000000, 0, -12392), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -12391), 0), 100000000, 0, -12390), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 878, 33746, 33749), ("shadow-stdlib/src/shadow_stdlib.mli", 878, 33746, 33759), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.In_channel.input_char] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 878, 33746, 33761), ("shadow-stdlib/src/shadow_stdlib.mli", 880, 33832, 33874), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 878, 33746, 33760), ("shadow-stdlib/src/shadow_stdlib.mli", 880, 33832, 33875), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 878, 33746, 33760), ("shadow-stdlib/src/shadow_stdlib.mli", 880, 33832, 33875), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 878, 33746, 33746), ("shadow-stdlib/src/shadow_stdlib.mli", 880, 33832, 33876), 0))], Tag1 ("Shadow_stdlib", 174)), 0); (("input_line", 6978), ((Tag1 (0, (Tag3 ((("in_channel", 6930)), 0, (0)), 100000000, 0, -12389), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12388), 0), 100000000, 0, -12387), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 883, 33916, 33919), ("shadow-stdlib/src/shadow_stdlib.mli", 883, 33916, 33929), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.In_channel.input_line] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 883, 33916, 33931), ("shadow-stdlib/src/shadow_stdlib.mli", 885, 34002, 34044), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 883, 33916, 33930), ("shadow-stdlib/src/shadow_stdlib.mli", 885, 34002, 34045), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 883, 33916, 33930), ("shadow-stdlib/src/shadow_stdlib.mli", 885, 34002, 34045), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 883, 33916, 33916), ("shadow-stdlib/src/shadow_stdlib.mli", 885, 34002, 34046), 0))], Tag1 ("Shadow_stdlib", 175)), 0); (("input", 6979), ((Tag1 (0, (Tag3 ((("in_channel", 6930)), 0, (0)), 100000000, 0, -12386), (Tag1 (0, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -12385), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12384), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12383), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12382), 0), 100000000, 0, -12381), 0), 100000000, 0, -12380), 0), 100000000, 0, -12379), 0), 100000000, 0, -12378), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 888, 34101, 34104), ("shadow-stdlib/src/shadow_stdlib.mli", 888, 34101, 34114), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.In_channel.input] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 888, 34101, 34116), ("shadow-stdlib/src/shadow_stdlib.mli", 890, 34187, 34224), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 888, 34101, 34115), ("shadow-stdlib/src/shadow_stdlib.mli", 890, 34187, 34225), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 888, 34101, 34115), ("shadow-stdlib/src/shadow_stdlib.mli", 890, 34187, 34225), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 888, 34101, 34101), ("shadow-stdlib/src/shadow_stdlib.mli", 890, 34187, 34226), 0))], Tag1 ("Shadow_stdlib", 176)), 0); (("really_input", 6980), ((Tag1 (0, (Tag3 ((("in_channel", 6930)), 0, (0)), 100000000, 0, -12377), (Tag1 (0, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -12376), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12375), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12374), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12373), 0), 100000000, 0, -12372), 0), 100000000, 0, -12371), 0), 100000000, 0, -12370), 0), 100000000, 0, -12369), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 893, 34289, 34292), ("shadow-stdlib/src/shadow_stdlib.mli", 893, 34289, 34302), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.In_channel.really_input] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 893, 34289, 34304), ("shadow-stdlib/src/shadow_stdlib.mli", 895, 34375, 34419), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 893, 34289, 34303), ("shadow-stdlib/src/shadow_stdlib.mli", 895, 34375, 34420), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 893, 34289, 34303), ("shadow-stdlib/src/shadow_stdlib.mli", 895, 34375, 34420), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 893, 34289, 34289), ("shadow-stdlib/src/shadow_stdlib.mli", 895, 34375, 34421), 0))], Tag1 ("Shadow_stdlib", 177)), 0); (("really_input_string", 6981), ((Tag1 (0, (Tag3 ((("in_channel", 6930)), 0, (0)), 100000000, 0, -12368), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12367), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12366), 0), 100000000, 0, -12365), 0), 100000000, 0, -12364), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 898, 34477, 34480), ("shadow-stdlib/src/shadow_stdlib.mli", 898, 34477, 34490), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is no equivalent functionality in Base or Stdio but you can use\n[Stdio.In_channel] instead.\nAlternatively, if you really want to refer the stdlib you can use\n[Stdlib.really_input_string].", (("shadow-stdlib/src/shadow_stdlib.mli", 898, 34477, 34492), ("shadow-stdlib/src/shadow_stdlib.mli", 903, 34727, 34756), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 898, 34477, 34491), ("shadow-stdlib/src/shadow_stdlib.mli", 903, 34727, 34757), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 898, 34477, 34491), ("shadow-stdlib/src/shadow_stdlib.mli", 903, 34727, 34757), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 898, 34477, 34477), ("shadow-stdlib/src/shadow_stdlib.mli", 903, 34727, 34758), 0))], Tag1 ("Shadow_stdlib", 178)), 0); (("input_byte", 6982), ((Tag1 (0, (Tag3 ((("in_channel", 6930)), 0, (0)), 100000000, 0, -12363), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12362), 0), 100000000, 0, -12361), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 906, 34795, 34798), ("shadow-stdlib/src/shadow_stdlib.mli", 906, 34795, 34808), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.In_channel.input_byte] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 906, 34795, 34810), ("shadow-stdlib/src/shadow_stdlib.mli", 908, 34881, 34923), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 906, 34795, 34809), ("shadow-stdlib/src/shadow_stdlib.mli", 908, 34881, 34924), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 906, 34795, 34809), ("shadow-stdlib/src/shadow_stdlib.mli", 908, 34881, 34924), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 906, 34795, 34795), ("shadow-stdlib/src/shadow_stdlib.mli", 908, 34881, 34925), 0))], Tag1 ("Shadow_stdlib", 179)), 0); (("input_binary_int", 6983), ((Tag1 (0, (Tag3 ((("in_channel", 6930)), 0, (0)), 100000000, 0, -12360), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12359), 0), 100000000, 0, -12358), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 911, 34968, 34971), ("shadow-stdlib/src/shadow_stdlib.mli", 911, 34968, 34981), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.In_channel.input_binary_int] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 911, 34968, 34983), ("shadow-stdlib/src/shadow_stdlib.mli", 913, 35054, 35102), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 911, 34968, 34982), ("shadow-stdlib/src/shadow_stdlib.mli", 913, 35054, 35103), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 911, 34968, 34982), ("shadow-stdlib/src/shadow_stdlib.mli", 913, 35054, 35103), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 911, 34968, 34968), ("shadow-stdlib/src/shadow_stdlib.mli", 913, 35054, 35104), 0))], Tag1 ("Shadow_stdlib", 180)), 0); (("input_value", 6984), ((Tag1 (0, (Tag3 ((("in_channel", 6930)), 0, (0)), 100000000, 0, -12357), ((("a")), 100000000, 0, -12356), 0), 100000000, 0, -12355), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 916, 35141, 35144), ("shadow-stdlib/src/shadow_stdlib.mli", 916, 35141, 35154), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.In_channel.unsafe_input_value] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 916, 35141, 35156), ("shadow-stdlib/src/shadow_stdlib.mli", 918, 35227, 35277), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 916, 35141, 35155), ("shadow-stdlib/src/shadow_stdlib.mli", 918, 35227, 35278), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 916, 35141, 35155), ("shadow-stdlib/src/shadow_stdlib.mli", 918, 35227, 35278), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 916, 35141, 35141), ("shadow-stdlib/src/shadow_stdlib.mli", 918, 35227, 35279), 0))], Tag1 ("Shadow_stdlib", 181)), 0); (("seek_in", 6985), ((Tag1 (0, (Tag3 ((("in_channel", 6930)), 0, (0)), 100000000, 0, -12354), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12353), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12352), 0), 100000000, 0, -12351), 0), 100000000, 0, -12350), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 921, 35321, 35324), ("shadow-stdlib/src/shadow_stdlib.mli", 921, 35321, 35334), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.In_channel.seek] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 921, 35321, 35336), ("shadow-stdlib/src/shadow_stdlib.mli", 923, 35407, 35443), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 921, 35321, 35335), ("shadow-stdlib/src/shadow_stdlib.mli", 923, 35407, 35444), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 921, 35321, 35335), ("shadow-stdlib/src/shadow_stdlib.mli", 923, 35407, 35444), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 921, 35321, 35321), ("shadow-stdlib/src/shadow_stdlib.mli", 923, 35407, 35445), 0))], Tag1 ("Shadow_stdlib", 182)), 0); (("pos_in", 6986), ((Tag1 (0, (Tag3 ((("in_channel", 6930)), 0, (0)), 100000000, 0, -12349), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12348), 0), 100000000, 0, -12347), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 926, 35478, 35481), ("shadow-stdlib/src/shadow_stdlib.mli", 926, 35478, 35491), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.In_channel.pos] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 926, 35478, 35493), ("shadow-stdlib/src/shadow_stdlib.mli", 928, 35564, 35599), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 926, 35478, 35492), ("shadow-stdlib/src/shadow_stdlib.mli", 928, 35564, 35600), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 926, 35478, 35492), ("shadow-stdlib/src/shadow_stdlib.mli", 928, 35564, 35600), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 926, 35478, 35478), ("shadow-stdlib/src/shadow_stdlib.mli", 928, 35564, 35601), 0))], Tag1 ("Shadow_stdlib", 183)), 0); (("in_channel_length", 6987), ((Tag1 (0, (Tag3 ((("in_channel", 6930)), 0, (0)), 100000000, 0, -12346), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12345), 0), 100000000, 0, -12344), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 931, 35645, 35648), ("shadow-stdlib/src/shadow_stdlib.mli", 931, 35645, 35658), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.In_channel.length] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 931, 35645, 35660), ("shadow-stdlib/src/shadow_stdlib.mli", 933, 35731, 35769), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 931, 35645, 35659), ("shadow-stdlib/src/shadow_stdlib.mli", 933, 35731, 35770), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 931, 35645, 35659), ("shadow-stdlib/src/shadow_stdlib.mli", 933, 35731, 35770), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 931, 35645, 35645), ("shadow-stdlib/src/shadow_stdlib.mli", 933, 35731, 35771), 0))], Tag1 ("Shadow_stdlib", 184)), 0); (("close_in", 6988), ((Tag1 (0, (Tag3 ((("in_channel", 6930)), 0, (0)), 100000000, 0, -12343), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12342), 0), 100000000, 0, -12341), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 936, 35807, 35810), ("shadow-stdlib/src/shadow_stdlib.mli", 936, 35807, 35820), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.In_channel.close] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 936, 35807, 35822), ("shadow-stdlib/src/shadow_stdlib.mli", 938, 35893, 35930), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 936, 35807, 35821), ("shadow-stdlib/src/shadow_stdlib.mli", 938, 35893, 35931), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 936, 35807, 35821), ("shadow-stdlib/src/shadow_stdlib.mli", 938, 35893, 35931), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 936, 35807, 35807), ("shadow-stdlib/src/shadow_stdlib.mli", 938, 35893, 35932), 0))], Tag1 ("Shadow_stdlib", 185)), 0); (("close_in_noerr", 6989), ((Tag1 (0, (Tag3 ((("in_channel", 6930)), 0, (0)), 100000000, 0, -12340), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12339), 0), 100000000, 0, -12338), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 941, 35974, 35977), ("shadow-stdlib/src/shadow_stdlib.mli", 941, 35974, 35987), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.In_channel.close] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 941, 35974, 35989), ("shadow-stdlib/src/shadow_stdlib.mli", 943, 36060, 36097), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 941, 35974, 35988), ("shadow-stdlib/src/shadow_stdlib.mli", 943, 36060, 36098), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 941, 35974, 35988), ("shadow-stdlib/src/shadow_stdlib.mli", 943, 36060, 36098), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 941, 35974, 35974), ("shadow-stdlib/src/shadow_stdlib.mli", 943, 36060, 36099), 0))], Tag1 ("Shadow_stdlib", 186)), 0); (("set_binary_mode_in", 6990), ((Tag1 (0, (Tag3 ((("in_channel", 6930)), 0, (0)), 100000000, 0, -12337), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -12336), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12335), 0), 100000000, 0, -12334), 0), 100000000, 0, -12333), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 946, 36153, 36156), ("shadow-stdlib/src/shadow_stdlib.mli", 946, 36153, 36166), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.In_channel.set_binary_mode] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 946, 36153, 36168), ("shadow-stdlib/src/shadow_stdlib.mli", 948, 36239, 36286), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 946, 36153, 36167), ("shadow-stdlib/src/shadow_stdlib.mli", 948, 36239, 36287), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 946, 36153, 36167), ("shadow-stdlib/src/shadow_stdlib.mli", 948, 36239, 36287), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 946, 36153, 36153), ("shadow-stdlib/src/shadow_stdlib.mli", 948, 36239, 36288), 0))], Tag1 ("Shadow_stdlib", 187)), 0); Tag3 (("LargeFile", 6991), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "LargeFile")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 951, 36326, 36329), ("shadow-stdlib/src/shadow_stdlib.mli", 951, 36326, 36339), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.LargeFile instead", (("shadow-stdlib/src/shadow_stdlib.mli", 951, 36326, 36341), ("shadow-stdlib/src/shadow_stdlib.mli", 955, 36562, 36611), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 951, 36326, 36340), ("shadow-stdlib/src/shadow_stdlib.mli", 955, 36562, 36612), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 951, 36326, 36340), ("shadow-stdlib/src/shadow_stdlib.mli", 955, 36562, 36612), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 951, 36326, 36326), ("shadow-stdlib/src/shadow_stdlib.mli", 955, 36562, 36613), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 188)), 0, 0); (("incr", 6992), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12332)], (0)), 100000000, 0, -12331), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12330), 0), 100000000, 0, -12329), (("%incr", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 983, 37747, 37750), ("shadow-stdlib/src/shadow_stdlib.mli", 983, 37747, 37760), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Int.incr] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 983, 37747, 37762), ("shadow-stdlib/src/shadow_stdlib.mli", 985, 37833, 37856), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 983, 37747, 37761), ("shadow-stdlib/src/shadow_stdlib.mli", 985, 37833, 37857), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 983, 37747, 37761), ("shadow-stdlib/src/shadow_stdlib.mli", 985, 37833, 37857), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 983, 37747, 37747), ("shadow-stdlib/src/shadow_stdlib.mli", 985, 37833, 37858), 0))], Tag1 ("Shadow_stdlib", 194)), 0); (("decr", 6993), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12328)], (0)), 100000000, 0, -12327), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12326), 0), 100000000, 0, -12325), (("%decr", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 988, 37902, 37905), ("shadow-stdlib/src/shadow_stdlib.mli", 988, 37902, 37915), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Int.decr] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 988, 37902, 37917), ("shadow-stdlib/src/shadow_stdlib.mli", 990, 37988, 38011), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 988, 37902, 37916), ("shadow-stdlib/src/shadow_stdlib.mli", 990, 37988, 38012), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 988, 37902, 37916), ("shadow-stdlib/src/shadow_stdlib.mli", 990, 37988, 38012), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 988, 37902, 37902), ("shadow-stdlib/src/shadow_stdlib.mli", 990, 37988, 38013), 0))], Tag1 ("Shadow_stdlib", 195)), 0); Tag1 (("result", 6994), ([((("a")), 100000000, 0, -12323); ((("b")), 100000000, 0, -12324)], 2, Tag1 ([(("Ok", 466), ([((("a")), 100000000, 0, -12323)]), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), 0, Tag1 ("Shadow_stdlib", 197)); (("Error", 467), ([((("b")), 100000000, 0, -12324)]), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), 0, Tag1 ("Shadow_stdlib", 198))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [((("a")), 100000000, 0, -12323); ((("b")), 100000000, 0, -12324)], (0)), 100000000, 0, -12322)), [25; 25], [0; 0], 0, 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 993, 38093, 38096), ("shadow-stdlib/src/shadow_stdlib.mli", 993, 38093, 38106), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Result.t] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 993, 38093, 38108), ("shadow-stdlib/src/shadow_stdlib.mli", 995, 38179, 38202), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 993, 38093, 38107), ("shadow-stdlib/src/shadow_stdlib.mli", 995, 38179, 38203), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 993, 38093, 38107), ("shadow-stdlib/src/shadow_stdlib.mli", 995, 38179, 38203), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 993, 38093, 38093), ("shadow-stdlib/src/shadow_stdlib.mli", 995, 38179, 38204), 0))], 0, 0, Tag1 ("Shadow_stdlib", 196)), 0, 0); (("string_of_format", 6995), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format6"), [((("a")), 100000000, 0, -12316); ((("b")), 100000000, 0, -12317); ((("c")), 100000000, 0, -12318); ((("d")), 100000000, 0, -12319); ((("e")), 100000000, 0, -12320); ((("f")), 100000000, 0, -12321)], (0)), 100000000, 0, -12315), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12314), 0), 100000000, 0, -12313), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1019, 39351, 39354), ("shadow-stdlib/src/shadow_stdlib.mli", 1019, 39351, 39364), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.string_of_format] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1019, 39351, 39366), ("shadow-stdlib/src/shadow_stdlib.mli", 1022, 39507, 39559), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1019, 39351, 39365), ("shadow-stdlib/src/shadow_stdlib.mli", 1022, 39507, 39560), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1019, 39351, 39365), ("shadow-stdlib/src/shadow_stdlib.mli", 1022, 39507, 39560), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1019, 39351, 39351), ("shadow-stdlib/src/shadow_stdlib.mli", 1022, 39507, 39561), 0))], Tag1 ("Shadow_stdlib", 202)), 0); (("format_of_string", 6996), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format6"), [((("a")), 100000000, 0, -12306); ((("b")), 100000000, 0, -12307); ((("c")), 100000000, 0, -12308); ((("d")), 100000000, 0, -12309); ((("e")), 100000000, 0, -12310); ((("f")), 100000000, 0, -12311)], (0)), 100000000, 0, -12312), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format6"), [((("a")), 100000000, 0, -12306); ((("b")), 100000000, 0, -12307); ((("c")), 100000000, 0, -12308); ((("d")), 100000000, 0, -12309); ((("e")), 100000000, 0, -12310); ((("f")), 100000000, 0, -12311)], (0)), 100000000, 0, -12305), 0), 100000000, 0, -12304), (("%identity", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1025, 39674, 39677), ("shadow-stdlib/src/shadow_stdlib.mli", 1025, 39674, 39687), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.format_of_string] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1025, 39674, 39689), ("shadow-stdlib/src/shadow_stdlib.mli", 1028, 39830, 39882), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1025, 39674, 39688), ("shadow-stdlib/src/shadow_stdlib.mli", 1028, 39830, 39883), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1025, 39674, 39688), ("shadow-stdlib/src/shadow_stdlib.mli", 1028, 39830, 39883), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1025, 39674, 39674), ("shadow-stdlib/src/shadow_stdlib.mli", 1028, 39830, 39884), 0))], Tag1 ("Shadow_stdlib", 203)), 0); (("exit", 6997), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12303), ((("a")), 100000000, 0, -12302), 0), 100000000, 0, -12301), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1037, 40227, 40230), ("shadow-stdlib/src/shadow_stdlib.mli", 1037, 40227, 40240), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.exit] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1037, 40227, 40242), ("shadow-stdlib/src/shadow_stdlib.mli", 1040, 40383, 40423), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1037, 40227, 40241), ("shadow-stdlib/src/shadow_stdlib.mli", 1040, 40383, 40424), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1037, 40227, 40241), ("shadow-stdlib/src/shadow_stdlib.mli", 1040, 40383, 40424), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1037, 40227, 40227), ("shadow-stdlib/src/shadow_stdlib.mli", 1040, 40383, 40425), 0))], Tag1 ("Shadow_stdlib", 205)), 0); (("at_exit", 6998), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12300), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12299), 0), 100000000, 0, -12298), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12297), 0), 100000000, 0, -12296), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1043, 40464, 40467), ("shadow-stdlib/src/shadow_stdlib.mli", 1043, 40464, 40477), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.at_exit] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1043, 40464, 40479), ("shadow-stdlib/src/shadow_stdlib.mli", 1046, 40620, 40663), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1043, 40464, 40478), ("shadow-stdlib/src/shadow_stdlib.mli", 1046, 40620, 40664), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1043, 40464, 40478), ("shadow-stdlib/src/shadow_stdlib.mli", 1046, 40620, 40664), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1043, 40464, 40464), ("shadow-stdlib/src/shadow_stdlib.mli", 1046, 40620, 40665), 0))], Tag1 ("Shadow_stdlib", 206)), 0); (("valid_float_lexem", 6999), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12295), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12294), 0), 100000000, 0, -12293), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1049, 40708, 40711), ("shadow-stdlib/src/shadow_stdlib.mli", 1049, 40708, 40721), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.valid_float_lexem] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1049, 40708, 40723), ("shadow-stdlib/src/shadow_stdlib.mli", 1052, 40864, 40917), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1049, 40708, 40722), ("shadow-stdlib/src/shadow_stdlib.mli", 1052, 40864, 40918), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1049, 40708, 40722), ("shadow-stdlib/src/shadow_stdlib.mli", 1052, 40864, 40918), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1049, 40708, 40708), ("shadow-stdlib/src/shadow_stdlib.mli", 1052, 40864, 40919), 0))], Tag1 ("Shadow_stdlib", 207)), 0); (("unsafe_really_input", 7000), ((Tag1 (0, (Tag3 ((("in_channel", 6930)), 0, (0)), 100000000, 0, -12292), (Tag1 (0, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -12291), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12290), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12289), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12288), 0), 100000000, 0, -12287), 0), 100000000, 0, -12286), 0), 100000000, 0, -12285), 0), 100000000, 0, -12284), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1055, 40989, 40992), ("shadow-stdlib/src/shadow_stdlib.mli", 1055, 40989, 41002), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.unsafe_really_input] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1055, 40989, 41004), ("shadow-stdlib/src/shadow_stdlib.mli", 1058, 41145, 41200), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1055, 40989, 41003), ("shadow-stdlib/src/shadow_stdlib.mli", 1058, 41145, 41201), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1055, 40989, 41003), ("shadow-stdlib/src/shadow_stdlib.mli", 1058, 41145, 41201), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1055, 40989, 40989), ("shadow-stdlib/src/shadow_stdlib.mli", 1058, 41145, 41202), 0))], Tag1 ("Shadow_stdlib", 208)), 0); (("do_at_exit", 7001), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12283), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12282), 0), 100000000, 0, -12281), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1061, 41234, 41237), ("shadow-stdlib/src/shadow_stdlib.mli", 1061, 41234, 41247), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.do_at_exit] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1061, 41234, 41249), ("shadow-stdlib/src/shadow_stdlib.mli", 1064, 41390, 41436), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1061, 41234, 41248), ("shadow-stdlib/src/shadow_stdlib.mli", 1064, 41390, 41437), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1061, 41234, 41248), ("shadow-stdlib/src/shadow_stdlib.mli", 1064, 41390, 41437), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1061, 41234, 41234), ("shadow-stdlib/src/shadow_stdlib.mli", 1064, 41390, 41438), 0))], Tag1 ("Shadow_stdlib", 209)), 0); (("do_domain_local_at_exit", 7002), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12280), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12279), 0), 100000000, 0, -12278)], (0)), 100000000, 0, -12277), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1067, 41489, 41492), ("shadow-stdlib/src/shadow_stdlib.mli", 1067, 41489, 41502), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.do_domain_local_at_exit] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1067, 41489, 41504), ("shadow-stdlib/src/shadow_stdlib.mli", 1070, 41645, 41704), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1067, 41489, 41503), ("shadow-stdlib/src/shadow_stdlib.mli", 1070, 41645, 41705), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1067, 41489, 41503), ("shadow-stdlib/src/shadow_stdlib.mli", 1070, 41645, 41705), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1067, 41489, 41489), ("shadow-stdlib/src/shadow_stdlib.mli", 1070, 41645, 41706), 0))], Tag1 ("Shadow_stdlib", 210)), 0); Tag3 (("Arg", 7003), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Arg")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1073, 41733, 41736), ("shadow-stdlib/src/shadow_stdlib.mli", 1073, 41733, 41746), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.Arg instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1073, 41733, 41748), ("shadow-stdlib/src/shadow_stdlib.mli", 1077, 41969, 42012), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1073, 41733, 41747), ("shadow-stdlib/src/shadow_stdlib.mli", 1077, 41969, 42013), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1073, 41733, 41747), ("shadow-stdlib/src/shadow_stdlib.mli", 1077, 41969, 42013), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1073, 41733, 41733), ("shadow-stdlib/src/shadow_stdlib.mli", 1077, 41969, 42014), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 211)), 0, 0); Tag3 (("ArrayLabels", 7004), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ArrayLabels")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1087, 42371, 42374), ("shadow-stdlib/src/shadow_stdlib.mli", 1087, 42371, 42384), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.ArrayLabels instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1087, 42371, 42386), ("shadow-stdlib/src/shadow_stdlib.mli", 1091, 42607, 42658), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1087, 42371, 42385), ("shadow-stdlib/src/shadow_stdlib.mli", 1091, 42607, 42659), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1087, 42371, 42385), ("shadow-stdlib/src/shadow_stdlib.mli", 1091, 42607, 42659), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1087, 42371, 42371), ("shadow-stdlib/src/shadow_stdlib.mli", 1091, 42607, 42660), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 213)), 0, 0); Tag3 (("BytesLabels", 7005), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "BytesLabels")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1122, 43962, 43965), ("shadow-stdlib/src/shadow_stdlib.mli", 1122, 43962, 43975), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.BytesLabels instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1122, 43962, 43977), ("shadow-stdlib/src/shadow_stdlib.mli", 1126, 44198, 44249), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1122, 43962, 43976), ("shadow-stdlib/src/shadow_stdlib.mli", 1126, 44198, 44250), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1122, 43962, 43976), ("shadow-stdlib/src/shadow_stdlib.mli", 1126, 44198, 44250), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1122, 43962, 43962), ("shadow-stdlib/src/shadow_stdlib.mli", 1126, 44198, 44251), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 218)), 0, 0); Tag3 (("Callback", 7006), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Callback")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1129, 44288, 44291), ("shadow-stdlib/src/shadow_stdlib.mli", 1129, 44288, 44301), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.Callback instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1129, 44288, 44303), ("shadow-stdlib/src/shadow_stdlib.mli", 1133, 44524, 44572), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1129, 44288, 44302), ("shadow-stdlib/src/shadow_stdlib.mli", 1133, 44524, 44573), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1129, 44288, 44302), ("shadow-stdlib/src/shadow_stdlib.mli", 1133, 44524, 44573), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1129, 44288, 44288), ("shadow-stdlib/src/shadow_stdlib.mli", 1133, 44524, 44574), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 219)), 0, 0); Tag3 (("Complex", 7007), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Complex")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1143, 44920, 44923), ("shadow-stdlib/src/shadow_stdlib.mli", 1143, 44920, 44933), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.Complex instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1143, 44920, 44935), ("shadow-stdlib/src/shadow_stdlib.mli", 1147, 45156, 45203), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1143, 44920, 44934), ("shadow-stdlib/src/shadow_stdlib.mli", 1147, 45156, 45204), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1143, 44920, 44934), ("shadow-stdlib/src/shadow_stdlib.mli", 1147, 45156, 45204), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1143, 44920, 44920), ("shadow-stdlib/src/shadow_stdlib.mli", 1147, 45156, 45205), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 221)), 0, 0); Tag3 (("Condition", 7008), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Condition")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1150, 45244, 45247), ("shadow-stdlib/src/shadow_stdlib.mli", 1150, 45244, 45257), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.Condition instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1150, 45244, 45259), ("shadow-stdlib/src/shadow_stdlib.mli", 1154, 45480, 45529), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1150, 45244, 45258), ("shadow-stdlib/src/shadow_stdlib.mli", 1154, 45480, 45530), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1150, 45244, 45258), ("shadow-stdlib/src/shadow_stdlib.mli", 1154, 45480, 45530), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1150, 45244, 45244), ("shadow-stdlib/src/shadow_stdlib.mli", 1154, 45480, 45531), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 222)), 0, 0); Tag3 (("Digest", 7009), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Digest")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1157, 45564, 45567), ("shadow-stdlib/src/shadow_stdlib.mli", 1157, 45564, 45577), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.Digest instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1157, 45564, 45579), ("shadow-stdlib/src/shadow_stdlib.mli", 1161, 45800, 45846), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1157, 45564, 45578), ("shadow-stdlib/src/shadow_stdlib.mli", 1161, 45800, 45847), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1157, 45564, 45578), ("shadow-stdlib/src/shadow_stdlib.mli", 1161, 45800, 45847), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1157, 45564, 45564), ("shadow-stdlib/src/shadow_stdlib.mli", 1161, 45800, 45848), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 223)), 0, 0); Tag3 (("Domain", 7010), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Domain")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1164, 45881, 45884), ("shadow-stdlib/src/shadow_stdlib.mli", 1164, 45881, 45894), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.Domain instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1164, 45881, 45896), ("shadow-stdlib/src/shadow_stdlib.mli", 1168, 46117, 46163), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1164, 45881, 45895), ("shadow-stdlib/src/shadow_stdlib.mli", 1168, 46117, 46164), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1164, 45881, 45895), ("shadow-stdlib/src/shadow_stdlib.mli", 1168, 46117, 46164), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1164, 45881, 45881), ("shadow-stdlib/src/shadow_stdlib.mli", 1168, 46117, 46165), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 224)), 0, 0); Tag3 (("Effect", 7011), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Effect")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1171, 46198, 46201), ("shadow-stdlib/src/shadow_stdlib.mli", 1171, 46198, 46211), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.Effect instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1171, 46198, 46213), ("shadow-stdlib/src/shadow_stdlib.mli", 1175, 46434, 46480), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1171, 46198, 46212), ("shadow-stdlib/src/shadow_stdlib.mli", 1175, 46434, 46481), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1171, 46198, 46212), ("shadow-stdlib/src/shadow_stdlib.mli", 1175, 46434, 46481), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1171, 46198, 46198), ("shadow-stdlib/src/shadow_stdlib.mli", 1175, 46434, 46482), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 225)), 0, 0); Tag3 (("Ephemeron", 7012), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Ephemeron")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1185, 46838, 46841), ("shadow-stdlib/src/shadow_stdlib.mli", 1185, 46838, 46851), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.Ephemeron instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1185, 46838, 46853), ("shadow-stdlib/src/shadow_stdlib.mli", 1189, 47074, 47123), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1185, 46838, 46852), ("shadow-stdlib/src/shadow_stdlib.mli", 1189, 47074, 47124), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1185, 46838, 46852), ("shadow-stdlib/src/shadow_stdlib.mli", 1189, 47074, 47124), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1185, 46838, 46838), ("shadow-stdlib/src/shadow_stdlib.mli", 1189, 47074, 47125), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 227)), 0, 0); Tag3 (("Filename", 7013), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Filename")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1192, 47162, 47165), ("shadow-stdlib/src/shadow_stdlib.mli", 1192, 47162, 47175), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.Filename instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1192, 47162, 47177), ("shadow-stdlib/src/shadow_stdlib.mli", 1196, 47398, 47446), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1192, 47162, 47176), ("shadow-stdlib/src/shadow_stdlib.mli", 1196, 47398, 47447), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1192, 47162, 47176), ("shadow-stdlib/src/shadow_stdlib.mli", 1196, 47398, 47447), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1192, 47162, 47162), ("shadow-stdlib/src/shadow_stdlib.mli", 1196, 47398, 47448), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 228)), 0, 0); Tag3 (("Format", 7014), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Format")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1206, 47795, 47798), ("shadow-stdlib/src/shadow_stdlib.mli", 1206, 47795, 47808), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\n[Base] doesn't export a [Format] module, although the \n[Stdlib.Format.formatter] type is available (as [Formatter.t])\nfor interaction with other libraries.", (("shadow-stdlib/src/shadow_stdlib.mli", 1206, 47795, 47810), ("shadow-stdlib/src/shadow_stdlib.mli", 1210, 47999, 48036), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1206, 47795, 47809), ("shadow-stdlib/src/shadow_stdlib.mli", 1210, 47999, 48037), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1206, 47795, 47809), ("shadow-stdlib/src/shadow_stdlib.mli", 1210, 47999, 48037), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1206, 47795, 47795), ("shadow-stdlib/src/shadow_stdlib.mli", 1210, 47999, 48038), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 230)), 0, 0); Tag3 (("Fun", 7015), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Fun")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1213, 48065, 48068), ("shadow-stdlib/src/shadow_stdlib.mli", 1213, 48065, 48078), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Fn] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 1213, 48065, 48080), ("shadow-stdlib/src/shadow_stdlib.mli", 1215, 48151, 48168), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1213, 48065, 48079), ("shadow-stdlib/src/shadow_stdlib.mli", 1215, 48151, 48169), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1213, 48065, 48079), ("shadow-stdlib/src/shadow_stdlib.mli", 1215, 48151, 48169), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1213, 48065, 48065), ("shadow-stdlib/src/shadow_stdlib.mli", 1215, 48151, 48170), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 231)), 0, 0); Tag3 (("Gc", 7016), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Gc")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1218, 48195, 48198), ("shadow-stdlib/src/shadow_stdlib.mli", 1218, 48195, 48208), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.Gc] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1218, 48195, 48210), ("shadow-stdlib/src/shadow_stdlib.mli", 1221, 48351, 48389), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1218, 48195, 48209), ("shadow-stdlib/src/shadow_stdlib.mli", 1221, 48351, 48390), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1218, 48195, 48209), ("shadow-stdlib/src/shadow_stdlib.mli", 1221, 48351, 48390), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1218, 48195, 48195), ("shadow-stdlib/src/shadow_stdlib.mli", 1221, 48351, 48391), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 232)), 0, 0); Tag3 (("ListLabels", 7017), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ListLabels")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1280, 50956, 50959), ("shadow-stdlib/src/shadow_stdlib.mli", 1280, 50956, 50969), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.ListLabels instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1280, 50956, 50971), ("shadow-stdlib/src/shadow_stdlib.mli", 1284, 51192, 51242), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1280, 50956, 50970), ("shadow-stdlib/src/shadow_stdlib.mli", 1284, 51192, 51243), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1280, 50956, 50970), ("shadow-stdlib/src/shadow_stdlib.mli", 1284, 51192, 51243), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1280, 50956, 50956), ("shadow-stdlib/src/shadow_stdlib.mli", 1284, 51192, 51244), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 241)), 0, 0); Tag3 (("Marshal", 7018), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Marshal")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1294, 51587, 51590), ("shadow-stdlib/src/shadow_stdlib.mli", 1294, 51587, 51600), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.Marshal instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1294, 51587, 51602), ("shadow-stdlib/src/shadow_stdlib.mli", 1298, 51823, 51870), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1294, 51587, 51601), ("shadow-stdlib/src/shadow_stdlib.mli", 1298, 51823, 51871), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1294, 51587, 51601), ("shadow-stdlib/src/shadow_stdlib.mli", 1298, 51823, 51871), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1294, 51587, 51587), ("shadow-stdlib/src/shadow_stdlib.mli", 1298, 51823, 51872), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 243)), 0, 0); Tag3 (("MoreLabels", 7019), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "MoreLabels")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1301, 51913, 51916), ("shadow-stdlib/src/shadow_stdlib.mli", 1301, 51913, 51926), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.MoreLabels instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1301, 51913, 51928), ("shadow-stdlib/src/shadow_stdlib.mli", 1305, 52149, 52199), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1301, 51913, 51927), ("shadow-stdlib/src/shadow_stdlib.mli", 1305, 52149, 52200), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1301, 51913, 51927), ("shadow-stdlib/src/shadow_stdlib.mli", 1305, 52149, 52200), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1301, 51913, 51913), ("shadow-stdlib/src/shadow_stdlib.mli", 1305, 52149, 52201), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 244)), 0, 0); Tag3 (("Mutex", 7020), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Mutex")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1308, 52232, 52235), ("shadow-stdlib/src/shadow_stdlib.mli", 1308, 52232, 52245), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.Mutex instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1308, 52232, 52247), ("shadow-stdlib/src/shadow_stdlib.mli", 1312, 52468, 52513), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1308, 52232, 52246), ("shadow-stdlib/src/shadow_stdlib.mli", 1312, 52468, 52514), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1308, 52232, 52246), ("shadow-stdlib/src/shadow_stdlib.mli", 1312, 52468, 52514), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1308, 52232, 52232), ("shadow-stdlib/src/shadow_stdlib.mli", 1312, 52468, 52515), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 245)), 0, 0); Tag3 (("Obj", 7021), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Obj")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1322, 52868, 52871), ("shadow-stdlib/src/shadow_stdlib.mli", 1322, 52868, 52881), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.Obj instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1322, 52868, 52883), ("shadow-stdlib/src/shadow_stdlib.mli", 1326, 53104, 53147), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1322, 52868, 52882), ("shadow-stdlib/src/shadow_stdlib.mli", 1326, 53104, 53148), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1322, 52868, 52882), ("shadow-stdlib/src/shadow_stdlib.mli", 1326, 53104, 53148), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1322, 52868, 52868), ("shadow-stdlib/src/shadow_stdlib.mli", 1326, 53104, 53149), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 247)), 0, 0); Tag3 (("Oo", 7022), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Oo")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1329, 53174, 53177), ("shadow-stdlib/src/shadow_stdlib.mli", 1329, 53174, 53187), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.Oo instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1329, 53174, 53189), ("shadow-stdlib/src/shadow_stdlib.mli", 1333, 53410, 53452), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1329, 53174, 53188), ("shadow-stdlib/src/shadow_stdlib.mli", 1333, 53410, 53453), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1329, 53174, 53188), ("shadow-stdlib/src/shadow_stdlib.mli", 1333, 53410, 53453), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1329, 53174, 53174), ("shadow-stdlib/src/shadow_stdlib.mli", 1333, 53410, 53454), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 248)), 0, 0); Tag3 (("Parsing", 7023), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Parsing")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1350, 54138, 54141), ("shadow-stdlib/src/shadow_stdlib.mli", 1350, 54138, 54151), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.Parsing instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1350, 54138, 54153), ("shadow-stdlib/src/shadow_stdlib.mli", 1354, 54374, 54421), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1350, 54138, 54152), ("shadow-stdlib/src/shadow_stdlib.mli", 1354, 54374, 54422), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1350, 54138, 54152), ("shadow-stdlib/src/shadow_stdlib.mli", 1354, 54374, 54422), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1350, 54138, 54138), ("shadow-stdlib/src/shadow_stdlib.mli", 1354, 54374, 54423), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 251)), 0, 0); Tag3 (("Printexc", 7024), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Printexc")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1357, 54460, 54463), ("shadow-stdlib/src/shadow_stdlib.mli", 1357, 54460, 54473), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Exn] or [Backtrace] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 1357, 54460, 54475), ("shadow-stdlib/src/shadow_stdlib.mli", 1359, 54546, 54579), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1357, 54460, 54474), ("shadow-stdlib/src/shadow_stdlib.mli", 1359, 54546, 54580), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1357, 54460, 54474), ("shadow-stdlib/src/shadow_stdlib.mli", 1359, 54546, 54580), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1357, 54460, 54460), ("shadow-stdlib/src/shadow_stdlib.mli", 1359, 54546, 54581), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 252)), 0, 0); Tag3 (("Scanf", 7025), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Scanf")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1390, 55877, 55880), ("shadow-stdlib/src/shadow_stdlib.mli", 1390, 55877, 55890), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.Scanf instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1390, 55877, 55892), ("shadow-stdlib/src/shadow_stdlib.mli", 1394, 56113, 56158), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1390, 55877, 55891), ("shadow-stdlib/src/shadow_stdlib.mli", 1394, 56113, 56159), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1390, 55877, 55891), ("shadow-stdlib/src/shadow_stdlib.mli", 1394, 56113, 56159), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1390, 55877, 55877), ("shadow-stdlib/src/shadow_stdlib.mli", 1394, 56113, 56160), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 257)), 0, 0); Tag3 (("Semaphore", 7026), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Semaphore")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1397, 56199, 56202), ("shadow-stdlib/src/shadow_stdlib.mli", 1397, 56199, 56212), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.Semaphore instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1397, 56199, 56214), ("shadow-stdlib/src/shadow_stdlib.mli", 1401, 56435, 56484), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1397, 56199, 56213), ("shadow-stdlib/src/shadow_stdlib.mli", 1401, 56435, 56485), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1397, 56199, 56213), ("shadow-stdlib/src/shadow_stdlib.mli", 1401, 56435, 56485), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1397, 56199, 56199), ("shadow-stdlib/src/shadow_stdlib.mli", 1401, 56435, 56486), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 258)), 0, 0); Tag3 (("Seq", 7027), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Seq")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1404, 56513, 56516), ("shadow-stdlib/src/shadow_stdlib.mli", 1404, 56513, 56526), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is no equivalent functionality in Base or Stdio but you can use\n[Sequence] instead.\nAlternatively, if you really want to refer the stdlib you can use\n[Stdlib.Seq].", (("shadow-stdlib/src/shadow_stdlib.mli", 1404, 56513, 56528), ("shadow-stdlib/src/shadow_stdlib.mli", 1409, 56755, 56768), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1404, 56513, 56527), ("shadow-stdlib/src/shadow_stdlib.mli", 1409, 56755, 56769), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1404, 56513, 56527), ("shadow-stdlib/src/shadow_stdlib.mli", 1409, 56755, 56769), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1404, 56513, 56513), ("shadow-stdlib/src/shadow_stdlib.mli", 1409, 56755, 56770), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 259)), 0, 0); Tag3 (("StdLabels", 7028), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "StdLabels")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1426, 57431, 57434), ("shadow-stdlib/src/shadow_stdlib.mli", 1426, 57431, 57444), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.StdLabels instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1426, 57431, 57446), ("shadow-stdlib/src/shadow_stdlib.mli", 1430, 57667, 57716), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1426, 57431, 57445), ("shadow-stdlib/src/shadow_stdlib.mli", 1430, 57667, 57717), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1426, 57431, 57445), ("shadow-stdlib/src/shadow_stdlib.mli", 1430, 57667, 57717), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1426, 57431, 57431), ("shadow-stdlib/src/shadow_stdlib.mli", 1430, 57667, 57718), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 262)), 0, 0); Tag3 (("StringLabels", 7029), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "StringLabels")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1440, 58080, 58083), ("shadow-stdlib/src/shadow_stdlib.mli", 1440, 58080, 58093), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.StringLabels instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1440, 58080, 58095), ("shadow-stdlib/src/shadow_stdlib.mli", 1444, 58316, 58368), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1440, 58080, 58094), ("shadow-stdlib/src/shadow_stdlib.mli", 1444, 58316, 58369), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1440, 58080, 58094), ("shadow-stdlib/src/shadow_stdlib.mli", 1444, 58316, 58369), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1440, 58080, 58080), ("shadow-stdlib/src/shadow_stdlib.mli", 1444, 58316, 58370), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 264)), 0, 0); Tag3 (("Type", 7030), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Type")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1454, 58707, 58710), ("shadow-stdlib/src/shadow_stdlib.mli", 1454, 58707, 58720), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.Type instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1454, 58707, 58722), ("shadow-stdlib/src/shadow_stdlib.mli", 1458, 58943, 58987), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1454, 58707, 58721), ("shadow-stdlib/src/shadow_stdlib.mli", 1458, 58943, 58988), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1454, 58707, 58721), ("shadow-stdlib/src/shadow_stdlib.mli", 1458, 58943, 58988), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1454, 58707, 58707), ("shadow-stdlib/src/shadow_stdlib.mli", 1458, 58943, 58989), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 266)), 0, 0); Tag3 (("Weak", 7031), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Weak")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1475, 59643, 59646), ("shadow-stdlib/src/shadow_stdlib.mli", 1475, 59643, 59656), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.Weak instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1475, 59643, 59658), ("shadow-stdlib/src/shadow_stdlib.mli", 1479, 59879, 59923), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1475, 59643, 59657), ("shadow-stdlib/src/shadow_stdlib.mli", 1479, 59879, 59924), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1475, 59643, 59657), ("shadow-stdlib/src/shadow_stdlib.mli", 1479, 59879, 59924), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1475, 59643, 59643), ("shadow-stdlib/src/shadow_stdlib.mli", 1479, 59879, 59925), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 269)), 0, 0); Tag3 (("Applicative", 7032), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Applicative")), 0, (("src/base.ml", 77, 3198, 3198), ("src/base.ml", 77, 3198, 3230), 0), Tag1 ("Base", 4)), 0, 0); Tag3 (("Array", 7033), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Array")), 0, (("src/base.ml", 78, 3231, 3231), ("src/base.ml", 78, 3231, 3251), 0), Tag1 ("Base", 5)), 0, 0); Tag3 (("Avltree", 7034), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Avltree")), 0, (("src/base.ml", 79, 3252, 3252), ("src/base.ml", 79, 3252, 3276), 0), Tag1 ("Base", 6)), 0, 0); Tag3 (("Backtrace", 7035), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Backtrace")), 0, (("src/base.ml", 80, 3277, 3277), ("src/base.ml", 80, 3277, 3305), 0), Tag1 ("Base", 7)), 0, 0); Tag3 (("Binary_search", 7036), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Binary_search")), 0, (("src/base.ml", 81, 3306, 3306), ("src/base.ml", 81, 3306, 3342), 0), Tag1 ("Base", 8)), 0, 0); Tag3 (("Binary_searchable", 7037), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Binary_searchable")), 0, (("src/base.ml", 82, 3343, 3343), ("src/base.ml", 82, 3343, 3387), 0), Tag1 ("Base", 9)), 0, 0); Tag3 (("Blit", 7038), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Blit")), 0, (("src/base.ml", 83, 3388, 3388), ("src/base.ml", 83, 3388, 3406), 0), Tag1 ("Base", 10)), 0, 0); Tag3 (("Bool", 7039), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Bool")), 0, (("src/base.ml", 84, 3407, 3407), ("src/base.ml", 84, 3407, 3425), 0), Tag1 ("Base", 11)), 0, 0); Tag3 (("Buffer", 7040), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Buffer")), 0, (("src/base.ml", 85, 3426, 3426), ("src/base.ml", 85, 3426, 3448), 0), Tag1 ("Base", 12)), 0, 0); Tag3 (("Bytes", 7041), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Bytes")), 0, (("src/base.ml", 86, 3449, 3449), ("src/base.ml", 86, 3449, 3469), 0), Tag1 ("Base", 13)), 0, 0); Tag3 (("Char", 7042), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Char")), 0, (("src/base.ml", 87, 3470, 3470), ("src/base.ml", 87, 3470, 3488), 0), Tag1 ("Base", 14)), 0, 0); Tag3 (("Comparable", 7043), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Comparable")), 0, (("src/base.ml", 88, 3489, 3489), ("src/base.ml", 88, 3489, 3519), 0), Tag1 ("Base", 15)), 0, 0); Tag3 (("Comparator", 7044), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Comparator")), 0, (("src/base.ml", 89, 3520, 3520), ("src/base.ml", 89, 3520, 3550), 0), Tag1 ("Base", 16)), 0, 0); Tag3 (("Comparisons", 7045), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Comparisons")), 0, (("src/base.ml", 90, 3551, 3551), ("src/base.ml", 90, 3551, 3583), 0), Tag1 ("Base", 17)), 0, 0); Tag3 (("Container", 7046), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Container")), 0, (("src/base.ml", 91, 3584, 3584), ("src/base.ml", 91, 3584, 3612), 0), Tag1 ("Base", 18)), 0, 0); Tag3 (("Either", 7047), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Either")), 0, (("src/base.ml", 92, 3613, 3613), ("src/base.ml", 92, 3613, 3635), 0), Tag1 ("Base", 19)), 0, 0); Tag3 (("Equal", 7048), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Equal")), 0, (("src/base.ml", 93, 3636, 3636), ("src/base.ml", 93, 3636, 3656), 0), Tag1 ("Base", 20)), 0, 0); Tag3 (("Error", 7049), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Error")), 0, (("src/base.ml", 94, 3657, 3657), ("src/base.ml", 94, 3657, 3677), 0), Tag1 ("Base", 21)), 0, 0); Tag3 (("Exn", 7050), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Exn")), 0, (("src/base.ml", 95, 3678, 3678), ("src/base.ml", 95, 3678, 3694), 0), Tag1 ("Base", 22)), 0, 0); Tag3 (("Field", 7051), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Field")), 0, (("src/base.ml", 96, 3695, 3695), ("src/base.ml", 96, 3695, 3715), 0), Tag1 ("Base", 23)), 0, 0); Tag3 (("Float", 7052), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Float")), 0, (("src/base.ml", 97, 3716, 3716), ("src/base.ml", 97, 3716, 3736), 0), Tag1 ("Base", 24)), 0, 0); Tag3 (("Floatable", 7053), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Floatable")), 0, (("src/base.ml", 98, 3737, 3737), ("src/base.ml", 98, 3737, 3765), 0), Tag1 ("Base", 25)), 0, 0); Tag3 (("Fn", 7054), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Fn")), 0, (("src/base.ml", 99, 3766, 3766), ("src/base.ml", 99, 3766, 3780), 0), Tag1 ("Base", 26)), 0, 0); Tag3 (("Formatter", 7055), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Formatter")), 0, (("src/base.ml", 100, 3781, 3781), ("src/base.ml", 100, 3781, 3809), 0), Tag1 ("Base", 27)), 0, 0); Tag3 (("Hash", 7056), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Hash")), 0, (("src/base.ml", 101, 3810, 3810), ("src/base.ml", 101, 3810, 3828), 0), Tag1 ("Base", 28)), 0, 0); Tag3 (("Hash_set", 7057), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Hash_set")), 0, (("src/base.ml", 102, 3829, 3829), ("src/base.ml", 102, 3829, 3855), 0), Tag1 ("Base", 29)), 0, 0); Tag3 (("Hashable", 7058), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Hashable")), 0, (("src/base.ml", 103, 3856, 3856), ("src/base.ml", 103, 3856, 3882), 0), Tag1 ("Base", 30)), 0, 0); Tag3 (("Hasher", 7059), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Hasher")), 0, (("src/base.ml", 104, 3883, 3883), ("src/base.ml", 104, 3883, 3905), 0), Tag1 ("Base", 31)), 0, 0); Tag3 (("Hashtbl", 7060), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Hashtbl")), 0, (("src/base.ml", 105, 3906, 3906), ("src/base.ml", 105, 3906, 3930), 0), Tag1 ("Base", 32)), 0, 0); Tag3 (("Identifiable", 7061), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Identifiable")), 0, (("src/base.ml", 106, 3931, 3931), ("src/base.ml", 106, 3931, 3965), 0), Tag1 ("Base", 33)), 0, 0); Tag3 (("Indexed_container", 7062), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Indexed_container")), 0, (("src/base.ml", 107, 3966, 3966), ("src/base.ml", 107, 3966, 4010), 0), Tag1 ("Base", 34)), 0, 0); Tag3 (("Info", 7063), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Info")), 0, (("src/base.ml", 108, 4011, 4011), ("src/base.ml", 108, 4011, 4029), 0), Tag1 ("Base", 35)), 0, 0); Tag3 (("Int", 7064), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Int")), 0, (("src/base.ml", 109, 4030, 4030), ("src/base.ml", 109, 4030, 4046), 0), Tag1 ("Base", 36)), 0, 0); Tag3 (("Int_conversions", 7065), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Int_conversions")), 0, (("src/base.ml", 110, 4047, 4047), ("src/base.ml", 110, 4047, 4087), 0), Tag1 ("Base", 37)), 0, 0); Tag3 (("Int32", 7066), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Int32")), 0, (("src/base.ml", 111, 4088, 4088), ("src/base.ml", 111, 4088, 4108), 0), Tag1 ("Base", 38)), 0, 0); Tag3 (("Int63", 7067), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Int63")), 0, (("src/base.ml", 112, 4109, 4109), ("src/base.ml", 112, 4109, 4129), 0), Tag1 ("Base", 39)), 0, 0); Tag3 (("Int64", 7068), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Int64")), 0, (("src/base.ml", 113, 4130, 4130), ("src/base.ml", 113, 4130, 4150), 0), Tag1 ("Base", 40)), 0, 0); Tag3 (("Intable", 7069), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Intable")), 0, (("src/base.ml", 114, 4151, 4151), ("src/base.ml", 114, 4151, 4175), 0), Tag1 ("Base", 41)), 0, 0); Tag3 (("Int_math", 7070), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Int_math")), 0, (("src/base.ml", 115, 4176, 4176), ("src/base.ml", 115, 4176, 4202), 0), Tag1 ("Base", 42)), 0, 0); Tag3 (("Invariant", 7071), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Invariant")), 0, (("src/base.ml", 116, 4203, 4203), ("src/base.ml", 116, 4203, 4231), 0), Tag1 ("Base", 43)), 0, 0); Tag3 (("Lazy", 7072), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Lazy")), 0, (("src/base.ml", 117, 4232, 4232), ("src/base.ml", 117, 4232, 4250), 0), Tag1 ("Base", 44)), 0, 0); Tag3 (("List", 7073), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "List")), 0, (("src/base.ml", 118, 4251, 4251), ("src/base.ml", 118, 4251, 4269), 0), Tag1 ("Base", 45)), 0, 0); Tag3 (("Map", 7074), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Map")), 0, (("src/base.ml", 119, 4270, 4270), ("src/base.ml", 119, 4270, 4286), 0), Tag1 ("Base", 46)), 0, 0); Tag3 (("Maybe_bound", 7075), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Maybe_bound")), 0, (("src/base.ml", 120, 4287, 4287), ("src/base.ml", 120, 4287, 4319), 0), Tag1 ("Base", 47)), 0, 0); Tag3 (("Monad", 7076), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Monad")), 0, (("src/base.ml", 121, 4320, 4320), ("src/base.ml", 121, 4320, 4340), 0), Tag1 ("Base", 48)), 0, 0); Tag3 (("Nativeint", 7077), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Nativeint")), 0, (("src/base.ml", 122, 4341, 4341), ("src/base.ml", 122, 4341, 4369), 0), Tag1 ("Base", 49)), 0, 0); Tag3 (("Nothing", 7078), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Nothing")), 0, (("src/base.ml", 123, 4370, 4370), ("src/base.ml", 123, 4370, 4394), 0), Tag1 ("Base", 50)), 0, 0); Tag3 (("Option", 7079), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Option")), 0, (("src/base.ml", 124, 4395, 4395), ("src/base.ml", 124, 4395, 4417), 0), Tag1 ("Base", 51)), 0, 0); Tag3 (("Option_array", 7080), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Option_array")), 0, (("src/base.ml", 125, 4418, 4418), ("src/base.ml", 125, 4418, 4452), 0), Tag1 ("Base", 52)), 0, 0); Tag3 (("Or_error", 7081), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Or_error")), 0, (("src/base.ml", 126, 4453, 4453), ("src/base.ml", 126, 4453, 4479), 0), Tag1 ("Base", 53)), 0, 0); Tag3 (("Ordered_collection_common", 7082), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Ordered_collection_common")), 0, (("src/base.ml", 127, 4480, 4480), ("src/base.ml", 127, 4480, 4540), 0), Tag1 ("Base", 54)), 0, 0); Tag3 (("Ordering", 7083), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Ordering")), 0, (("src/base.ml", 128, 4541, 4541), ("src/base.ml", 128, 4541, 4567), 0), Tag1 ("Base", 55)), 0, 0); Tag3 (("Poly", 7084), 1, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Import"), "Poly")), 0, (("src/base.ml", 129, 4568, 4568), ("src/base.ml", 129, 4568, 4586), 0), Tag1 ("Base", 56)), 0, 0); Tag3 (("Popcount", 7085), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Popcount")), [(("deprecated", (("src/base.ml", 132, 4615, 4618), ("src/base.ml", 132, 4615, 4628), 0)), ([([(Tag1 (Tag2 ("[since 2018-10] use [popcount] functions in the individual int modules", (("src/base.ml", 132, 4615, 4630), ("src/base.ml", 132, 4615, 4700), 0), 0)), (("src/base.ml", 132, 4615, 4629), ("src/base.ml", 132, 4615, 4701), 0), 0, 0)], (("src/base.ml", 132, 4615, 4629), ("src/base.ml", 132, 4615, 4701), 0))]), (("src/base.ml", 132, 4615, 4615), ("src/base.ml", 132, 4615, 4702), 0))], (("src/base.ml", 131, 4588, 4588), ("src/base.ml", 132, 4615, 4702), 0), Tag1 ("Base", 57)), 0, 0); Tag3 (("Pretty_printer", 7086), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Pretty_printer")), 0, (("src/base.ml", 134, 4704, 4704), ("src/base.ml", 134, 4704, 4742), 0), Tag1 ("Base", 58)), 0, 0); Tag3 (("Printf", 7087), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Printf")), 0, (("src/base.ml", 135, 4743, 4743), ("src/base.ml", 135, 4743, 4765), 0), Tag1 ("Base", 59)), 0, 0); Tag3 (("Linked_queue", 7088), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Linked_queue")), 0, (("src/base.ml", 136, 4766, 4766), ("src/base.ml", 136, 4766, 4800), 0), Tag1 ("Base", 60)), 0, 0); Tag3 (("Queue", 7089), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Queue")), 0, (("src/base.ml", 137, 4801, 4801), ("src/base.ml", 137, 4801, 4821), 0), Tag1 ("Base", 61)), 0, 0); Tag3 (("Random", 7090), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Random")), 0, (("src/base.ml", 138, 4822, 4822), ("src/base.ml", 138, 4822, 4844), 0), Tag1 ("Base", 62)), 0, 0); Tag3 (("Ref", 7091), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Ref")), 0, (("src/base.ml", 139, 4845, 4845), ("src/base.ml", 139, 4845, 4861), 0), Tag1 ("Base", 63)), 0, 0); Tag3 (("Result", 7092), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Result")), 0, (("src/base.ml", 140, 4862, 4862), ("src/base.ml", 140, 4862, 4884), 0), Tag1 ("Base", 64)), 0, 0); Tag3 (("Sequence", 7093), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Sequence")), 0, (("src/base.ml", 141, 4885, 4885), ("src/base.ml", 141, 4885, 4911), 0), Tag1 ("Base", 65)), 0, 0); Tag3 (("Set", 7094), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Set")), 0, (("src/base.ml", 142, 4912, 4912), ("src/base.ml", 142, 4912, 4928), 0), Tag1 ("Base", 66)), 0, 0); Tag3 (("Sexpable", 7095), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Sexpable")), 0, (("src/base.ml", 143, 4929, 4929), ("src/base.ml", 143, 4929, 4955), 0), Tag1 ("Base", 67)), 0, 0); Tag3 (("Sign", 7096), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Sign")), 0, (("src/base.ml", 144, 4956, 4956), ("src/base.ml", 144, 4956, 4974), 0), Tag1 ("Base", 68)), 0, 0); Tag3 (("Sign_or_nan", 7097), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Sign_or_nan")), 0, (("src/base.ml", 145, 4975, 4975), ("src/base.ml", 145, 4975, 5007), 0), Tag1 ("Base", 69)), 0, 0); Tag3 (("Source_code_position", 7098), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Source_code_position")), 0, (("src/base.ml", 146, 5008, 5008), ("src/base.ml", 146, 5008, 5058), 0), Tag1 ("Base", 70)), 0, 0); Tag3 (("Stack", 7099), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Stack")), 0, (("src/base.ml", 147, 5059, 5059), ("src/base.ml", 147, 5059, 5079), 0), Tag1 ("Base", 71)), 0, 0); Tag3 (("Staged", 7100), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Staged")), 0, (("src/base.ml", 148, 5080, 5080), ("src/base.ml", 148, 5080, 5102), 0), Tag1 ("Base", 72)), 0, 0); Tag3 (("String", 7101), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "String")), 0, (("src/base.ml", 149, 5103, 5103), ("src/base.ml", 149, 5103, 5125), 0), Tag1 ("Base", 73)), 0, 0); Tag3 (("Stringable", 7102), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Stringable")), 0, (("src/base.ml", 150, 5126, 5126), ("src/base.ml", 150, 5126, 5156), 0), Tag1 ("Base", 74)), 0, 0); Tag3 (("Sys", 7103), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Sys")), 0, (("src/base.ml", 151, 5157, 5157), ("src/base.ml", 151, 5157, 5173), 0), Tag1 ("Base", 75)), 0, 0); Tag3 (("T", 7104), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "T")), 0, (("src/base.ml", 152, 5174, 5174), ("src/base.ml", 152, 5174, 5186), 0), Tag1 ("Base", 76)), 0, 0); Tag3 (("Type_equal", 7105), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Type_equal")), 0, (("src/base.ml", 153, 5187, 5187), ("src/base.ml", 153, 5187, 5217), 0), Tag1 ("Base", 77)), 0, 0); Tag3 (("Uniform_array", 7106), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Uniform_array")), 0, (("src/base.ml", 154, 5218, 5218), ("src/base.ml", 154, 5218, 5254), 0), Tag1 ("Base", 78)), 0, 0); Tag3 (("Unit", 7107), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Unit")), 0, (("src/base.ml", 155, 5255, 5255), ("src/base.ml", 155, 5255, 5273), 0), Tag1 ("Base", 79)), 0, 0); Tag3 (("Uchar", 7108), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Uchar")), 0, (("src/base.ml", 156, 5274, 5274), ("src/base.ml", 156, 5274, 5294), 0), Tag1 ("Base", 80)), 0, 0); Tag3 (("Variant", 7109), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Variant")), 0, (("src/base.ml", 157, 5295, 5295), ("src/base.ml", 157, 5295, 5319), 0), Tag1 ("Base", 81)), 0, 0); Tag3 (("With_return", 7110), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "With_return")), 0, (("src/base.ml", 158, 5320, 5320), ("src/base.ml", 158, 5320, 5352), 0), Tag1 ("Base", 82)), 0, 0); Tag3 (("Word_size", 7111), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Word_size")), 0, (("src/base.ml", 159, 5353, 5353), ("src/base.ml", 159, 5353, 5381), 0), Tag1 ("Base", 83)), 0, 0); Tag4 (("T", 7112), (((Tag1 ((Tag2 ("Base")), "T"))), 0, (("src/t.ml", 7, 232, 232), ("src/t.ml", 9, 261, 264), 0), Tag1 ("Base__T", 1)), 0); Tag4 (("T1", 7113), (((Tag1 ((Tag2 ("Base")), "T1"))), 0, (("src/t.ml", 11, 266, 266), ("src/t.ml", 13, 299, 302), 0), Tag1 ("Base__T", 3)), 0); Tag4 (("T2", 7114), (((Tag1 ((Tag2 ("Base")), "T2"))), 0, (("src/t.ml", 15, 304, 304), ("src/t.ml", 17, 343, 346), 0), Tag1 ("Base__T", 5)), 0); Tag4 (("T3", 7115), (((Tag1 ((Tag2 ("Base")), "T3"))), 0, (("src/t.ml", 19, 348, 348), ("src/t.ml", 21, 391, 394), 0), Tag1 ("Base__T", 7)), 0); Tag3 (("Sexp", 7116), 0, (Tag3 (Tag1 ((Tag2 ("Base")), "Sexp")), 0, (("src/base.ml", 165, 5536, 5536), ("src/base.ml", 167, 5603, 5606), 0), Tag1 ("Base", 84)), 0, 0); Tag3 (("Exported_for_specific_uses", 7117), 0, (Tag3 (Tag1 ((Tag2 ("Base")), "Exported_for_specific_uses")), 0, (("src/base.ml", 171, 5617, 5617), ("src/base.ml", 181, 5946, 5949), 0), Tag1 ("Base", 93)), 0, 0); Tag3 (("Export", 7118), 0, (Tag3 (Tag1 ((Tag2 ("Base")), "Export")), 0, (("src/base.ml", 185, 5960, 5960), ("src/base.ml", 652, 20512, 20515), 0), Tag1 ("Base", 263)), 0, 0); Tag1 (("array", 7119), ([((("a")), 100000000, 0, -12276)], 1, 0, 1, ((Tag3 (Tag1 ((("Array", 7033)), "t"), [((("a")), 100000000, 0, -12276)], (0)), 100000000, 0, -12275)), [63], [0], 0, 0, (("src/base.ml", 187, 6071, 6073), ("src/base.ml", 188, 6100, 6167), 0), [(("deriving_inline", (("src/base.ml", 188, 6100, 6105), ("src/base.ml", 188, 6100, 6120), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 188, 6100, 6121), ("src/base.ml", 188, 6100, 6128), 0))), (("src/base.ml", 188, 6100, 6121), ("src/base.ml", 188, 6100, 6128), 0), 0, 0); (((("equal"), (("src/base.ml", 188, 6100, 6130), ("src/base.ml", 188, 6100, 6135), 0))), (("src/base.ml", 188, 6100, 6130), ("src/base.ml", 188, 6100, 6135), 0), 0, 0); (((("globalize"), (("src/base.ml", 188, 6100, 6137), ("src/base.ml", 188, 6100, 6146), 0))), (("src/base.ml", 188, 6100, 6137), ("src/base.ml", 188, 6100, 6146), 0), 0, 0); (((("sexp"), (("src/base.ml", 188, 6100, 6148), ("src/base.ml", 188, 6100, 6152), 0))), (("src/base.ml", 188, 6100, 6148), ("src/base.ml", 188, 6100, 6152), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 188, 6100, 6154), ("src/base.ml", 188, 6100, 6166), 0))), (("src/base.ml", 188, 6100, 6154), ("src/base.ml", 188, 6100, 6166), 0), 0, 0)]), (("src/base.ml", 188, 6100, 6121), ("src/base.ml", 188, 6100, 6166), 0), 0, 0)], (("src/base.ml", 188, 6100, 6121), ("src/base.ml", 188, 6100, 6166), 0))]), (("src/base.ml", 188, 6100, 6102), ("src/base.ml", 188, 6100, 6167), 0))], 0, 0, Tag1 ("Base", 94)), 1, 0); (("compare_array", 7120), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -12270), (Tag1 (0, ((("a")), 100000000, 0, -12270), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12274), 0), 100000000, 0, -12273), 0), 100000000, 0, -12272), (Tag1 (0, (Tag3 ((("array", 7119)), [((("a")), 100000000, 0, -12270)], (0)), 100000000, 0, -12271), (Tag1 (0, (Tag3 ((("array", 7119)), [((("a")), 100000000, 0, -12270)], (0)), 100000000, 0, -12269), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12268), 0), 100000000, 0, -12267), 0), 100000000, 0, -12266), 0), 100000000, 0, -12265), 0, (("src/base.ml", 190, 6169, 6175), ("src/base.ml", 190, 6169, 6188), 0), 0, Tag1 ("Base", 95)), 0); (("equal_array", 7121), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -12260), (Tag1 (0, ((("a")), 100000000, 0, -12260), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -12264), 0), 100000000, 0, -12263), 0), 100000000, 0, -12262), (Tag1 (0, (Tag3 ((("array", 7119)), [((("a")), 100000000, 0, -12260)], (0)), 100000000, 0, -12261), (Tag1 (0, (Tag3 ((("array", 7119)), [((("a")), 100000000, 0, -12260)], (0)), 100000000, 0, -12259), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -12258), 0), 100000000, 0, -12257), 0), 100000000, 0, -12256), 0), 100000000, 0, -12255), 0, (("src/base.ml", 191, 6260, 6266), ("src/base.ml", 191, 6260, 6277), 0), 0, Tag1 ("Base", 96)), 0); (("globalize_array", 7122), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -12252), ((("a")), 100000000, 0, -12252), 0), 100000000, 0, -12254), (Tag1 (0, (Tag3 ((("array", 7119)), [((("a")), 100000000, 0, -12252)], (0)), 100000000, 0, -12253), (Tag3 ((("array", 7119)), [((("a")), 100000000, 0, -12252)], (0)), 100000000, 0, -12251), 0), 100000000, 0, -12250), 0), 100000000, 0, -12249), 0, (("src/base.ml", 193, 6350, 6356), ("src/base.ml", 193, 6350, 6371), 0), 0, Tag1 ("Base", 97)), 0); (("array_of_sexp", 7123), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -12248), ((("a")), 100000000, 0, -12245), 0), 100000000, 0, -12247), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -12246), (Tag3 ((("array", 7119)), [((("a")), 100000000, 0, -12245)], (0)), 100000000, 0, -12244), 0), 100000000, 0, -12243), 0), 100000000, 0, -12242), 0, (("src/base.ml", 202, 6621, 6627), ("src/base.ml", 202, 6621, 6640), 0), 0, Tag1 ("Base", 99)), 0); (("sexp_of_array", 7124), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -12239), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -12241), 0), 100000000, 0, -12240), (Tag1 (0, (Tag3 ((("array", 7119)), [((("a")), 100000000, 0, -12239)], (0)), 100000000, 0, -12238), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -12237), 0), 100000000, 0, -12236), 0), 100000000, 0, -12235), 0, (("src/base.ml", 206, 6730, 6736), ("src/base.ml", 206, 6730, 6749), 0), 0, Tag1 ("Base", 100)), 0); (("array_sexp_grammar", 7125), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [((("a")), 100000000, 0, -12233)], (0)), 100000000, 0, -12234), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("array", 7119)), [((("a")), 100000000, 0, -12233)], (0)), 100000000, 0, -12232)], (0)), 100000000, 0, -12231), 0), 100000000, 0, -12230), 0, (("src/base.ml", 210, 6839, 6845), ("src/base.ml", 210, 6839, 6863), 0), 0, Tag1 ("Base", 102)), 0); Tag1 (("bool", 7126), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Bool", 7039)), "t"), 0, (0)), 100000000, 0, -12229)), 0, 0, 0, 0, (("src/base.ml", 218, 7027, 7029), ("src/base.ml", 219, 7048, 7121), 0), [(("deriving_inline", (("src/base.ml", 219, 7048, 7053), ("src/base.ml", 219, 7048, 7068), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 219, 7048, 7069), ("src/base.ml", 219, 7048, 7076), 0))), (("src/base.ml", 219, 7048, 7069), ("src/base.ml", 219, 7048, 7076), 0), 0, 0); (((("equal"), (("src/base.ml", 219, 7048, 7078), ("src/base.ml", 219, 7048, 7083), 0))), (("src/base.ml", 219, 7048, 7078), ("src/base.ml", 219, 7048, 7083), 0), 0, 0); (((("globalize"), (("src/base.ml", 219, 7048, 7085), ("src/base.ml", 219, 7048, 7094), 0))), (("src/base.ml", 219, 7048, 7085), ("src/base.ml", 219, 7048, 7094), 0), 0, 0); (((("hash"), (("src/base.ml", 219, 7048, 7096), ("src/base.ml", 219, 7048, 7100), 0))), (("src/base.ml", 219, 7048, 7096), ("src/base.ml", 219, 7048, 7100), 0), 0, 0); (((("sexp"), (("src/base.ml", 219, 7048, 7102), ("src/base.ml", 219, 7048, 7106), 0))), (("src/base.ml", 219, 7048, 7102), ("src/base.ml", 219, 7048, 7106), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 219, 7048, 7108), ("src/base.ml", 219, 7048, 7120), 0))), (("src/base.ml", 219, 7048, 7108), ("src/base.ml", 219, 7048, 7120), 0), 0, 0)]), (("src/base.ml", 219, 7048, 7069), ("src/base.ml", 219, 7048, 7120), 0), 0, 0)], (("src/base.ml", 219, 7048, 7069), ("src/base.ml", 219, 7048, 7120), 0))]), (("src/base.ml", 219, 7048, 7050), ("src/base.ml", 219, 7048, 7121), 0))], 1, 0, Tag1 ("Base", 105)), 1, 0); (("compare_bool", 7127), ((Tag1 (0, (Tag3 ((("bool", 7126)), 0, (0)), 100000000, 0, -12228), (Tag1 (0, (Tag3 ((("bool", 7126)), 0, (0)), 100000000, 0, -12227), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12226), 0), 100000000, 0, -12225), 0), 100000000, 0, -12224), 0, (("src/base.ml", 221, 7123, 7129), ("src/base.ml", 221, 7123, 7141), 0), 0, Tag1 ("Base", 106)), 0); (("equal_bool", 7128), ((Tag1 (0, (Tag3 ((("bool", 7126)), 0, (0)), 100000000, 0, -12223), (Tag1 (0, (Tag3 ((("bool", 7126)), 0, (0)), 100000000, 0, -12222), (Tag3 ((("bool", 7126)), 0, (0)), 100000000, 0, -12221), 0), 100000000, 0, -12220), 0), 100000000, 0, -12219), 0, (("src/base.ml", 222, 7181, 7187), ("src/base.ml", 222, 7181, 7197), 0), 0, Tag1 ("Base", 107)), 0); (("globalize_bool", 7129), ((Tag1 (0, (Tag3 ((("bool", 7126)), 0, (0)), 100000000, 0, -12218), (Tag3 ((("bool", 7126)), 0, (0)), 100000000, 0, -12217), 0), 100000000, 0, -12216), 0, (("src/base.ml", 224, 7237, 7244), ("src/base.ml", 224, 7237, 7258), 0), 0, Tag1 ("Base", 108)), 0); (("hash_fold_bool", 7130), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -12215), (Tag1 (0, (Tag3 ((("bool", 7126)), 0, (0)), 100000000, 0, -12214), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -12213), 0), 100000000, 0, -12212), 0), 100000000, 0, -12211), 0, (("src/base.ml", 228, 7351, 7358), ("src/base.ml", 228, 7351, 7372), 0), 0, Tag1 ("Base", 109)), 0); (("hash_bool", 7131), ((Tag1 (0, (Tag3 ((("bool", 7126)), 0, (0)), 100000000, 0, -12210), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "hash_value"), 0, (0)), 100000000, 0, -12209), 0), 100000000, 0, -12208), 0, (("src/base.ml", 233, 7480, 7487), ("src/base.ml", 233, 7480, 7496), 0), 0, Tag1 ("Base", 110)), 0); (("bool_of_sexp", 7132), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -12207), (Tag3 ((("bool", 7126)), 0, (0)), 100000000, 0, -12206), 0), 100000000, 0, -12205), 0, (("src/base.ml", 238, 7597, 7603), ("src/base.ml", 238, 7597, 7615), 0), 0, Tag1 ("Base", 113)), 0); (("sexp_of_bool", 7133), ((Tag1 (0, (Tag3 ((("bool", 7126)), 0, (0)), 100000000, 0, -12204), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -12203), 0), 100000000, 0, -12202), 0, (("src/base.ml", 239, 7661, 7667), ("src/base.ml", 239, 7661, 7679), 0), 0, Tag1 ("Base", 114)), 0); (("bool_sexp_grammar", 7134), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("bool", 7126)), 0, (0)), 100000000, 0, -12201)], (0)), 100000000, 0, -12200), 0, (("src/base.ml", 240, 7725, 7732), ("src/base.ml", 240, 7725, 7749), 0), 0, Tag1 ("Base", 115)), 0); Tag1 (("char", 7135), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Char", 7042)), "t"), 0, (0)), 100000000, 0, -12199)), 0, 0, 0, 0, (("src/base.ml", 244, 7817, 7819), ("src/base.ml", 245, 7838, 7911), 0), [(("deriving_inline", (("src/base.ml", 245, 7838, 7843), ("src/base.ml", 245, 7838, 7858), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 245, 7838, 7859), ("src/base.ml", 245, 7838, 7866), 0))), (("src/base.ml", 245, 7838, 7859), ("src/base.ml", 245, 7838, 7866), 0), 0, 0); (((("equal"), (("src/base.ml", 245, 7838, 7868), ("src/base.ml", 245, 7838, 7873), 0))), (("src/base.ml", 245, 7838, 7868), ("src/base.ml", 245, 7838, 7873), 0), 0, 0); (((("globalize"), (("src/base.ml", 245, 7838, 7875), ("src/base.ml", 245, 7838, 7884), 0))), (("src/base.ml", 245, 7838, 7875), ("src/base.ml", 245, 7838, 7884), 0), 0, 0); (((("hash"), (("src/base.ml", 245, 7838, 7886), ("src/base.ml", 245, 7838, 7890), 0))), (("src/base.ml", 245, 7838, 7886), ("src/base.ml", 245, 7838, 7890), 0), 0, 0); (((("sexp"), (("src/base.ml", 245, 7838, 7892), ("src/base.ml", 245, 7838, 7896), 0))), (("src/base.ml", 245, 7838, 7892), ("src/base.ml", 245, 7838, 7896), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 245, 7838, 7898), ("src/base.ml", 245, 7838, 7910), 0))), (("src/base.ml", 245, 7838, 7898), ("src/base.ml", 245, 7838, 7910), 0), 0, 0)]), (("src/base.ml", 245, 7838, 7859), ("src/base.ml", 245, 7838, 7910), 0), 0, 0)], (("src/base.ml", 245, 7838, 7859), ("src/base.ml", 245, 7838, 7910), 0))]), (("src/base.ml", 245, 7838, 7840), ("src/base.ml", 245, 7838, 7911), 0))], 1, 0, Tag1 ("Base", 116)), 1, 0); (("compare_char", 7136), ((Tag1 (0, (Tag3 ((("char", 7135)), 0, (0)), 100000000, 0, -12198), (Tag1 (0, (Tag3 ((("char", 7135)), 0, (0)), 100000000, 0, -12197), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12196), 0), 100000000, 0, -12195), 0), 100000000, 0, -12194), 0, (("src/base.ml", 247, 7913, 7919), ("src/base.ml", 247, 7913, 7931), 0), 0, Tag1 ("Base", 117)), 0); (("equal_char", 7137), ((Tag1 (0, (Tag3 ((("char", 7135)), 0, (0)), 100000000, 0, -12193), (Tag1 (0, (Tag3 ((("char", 7135)), 0, (0)), 100000000, 0, -12192), (Tag3 ((("bool", 7126)), 0, (0)), 100000000, 0, -12191), 0), 100000000, 0, -12190), 0), 100000000, 0, -12189), 0, (("src/base.ml", 248, 7971, 7977), ("src/base.ml", 248, 7971, 7987), 0), 0, Tag1 ("Base", 118)), 0); (("globalize_char", 7138), ((Tag1 (0, (Tag3 ((("char", 7135)), 0, (0)), 100000000, 0, -12188), (Tag3 ((("char", 7135)), 0, (0)), 100000000, 0, -12187), 0), 100000000, 0, -12186), 0, (("src/base.ml", 250, 8027, 8034), ("src/base.ml", 250, 8027, 8048), 0), 0, Tag1 ("Base", 119)), 0); (("hash_fold_char", 7139), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -12185), (Tag1 (0, (Tag3 ((("char", 7135)), 0, (0)), 100000000, 0, -12184), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -12183), 0), 100000000, 0, -12182), 0), 100000000, 0, -12181), 0, (("src/base.ml", 254, 8141, 8148), ("src/base.ml", 254, 8141, 8162), 0), 0, Tag1 ("Base", 120)), 0); (("hash_char", 7140), ((Tag1 (0, (Tag3 ((("char", 7135)), 0, (0)), 100000000, 0, -12180), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "hash_value"), 0, (0)), 100000000, 0, -12179), 0), 100000000, 0, -12178), 0, (("src/base.ml", 259, 8270, 8277), ("src/base.ml", 259, 8270, 8286), 0), 0, Tag1 ("Base", 121)), 0); (("char_of_sexp", 7141), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -12177), (Tag3 ((("char", 7135)), 0, (0)), 100000000, 0, -12176), 0), 100000000, 0, -12175), 0, (("src/base.ml", 264, 8387, 8393), ("src/base.ml", 264, 8387, 8405), 0), 0, Tag1 ("Base", 124)), 0); (("sexp_of_char", 7142), ((Tag1 (0, (Tag3 ((("char", 7135)), 0, (0)), 100000000, 0, -12174), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -12173), 0), 100000000, 0, -12172), 0, (("src/base.ml", 265, 8451, 8457), ("src/base.ml", 265, 8451, 8469), 0), 0, Tag1 ("Base", 125)), 0); (("char_sexp_grammar", 7143), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("char", 7135)), 0, (0)), 100000000, 0, -12171)], (0)), 100000000, 0, -12170), 0, (("src/base.ml", 266, 8515, 8522), ("src/base.ml", 266, 8515, 8539), 0), 0, Tag1 ("Base", 126)), 0); Tag1 (("exn", 7144), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Exn", 7050)), "t"), 0, (0)), 100000000, 0, -12169)), 0, 0, 0, 0, (("src/base.ml", 270, 8607, 8609), ("src/base.ml", 270, 8607, 8653), 0), [(("deriving_inline", (("src/base.ml", 270, 8607, 8629), ("src/base.ml", 270, 8607, 8644), 0)), ([([(((("sexp_of"), (("src/base.ml", 270, 8607, 8645), ("src/base.ml", 270, 8607, 8652), 0))), (("src/base.ml", 270, 8607, 8645), ("src/base.ml", 270, 8607, 8652), 0), 0, 0)], (("src/base.ml", 270, 8607, 8645), ("src/base.ml", 270, 8607, 8652), 0))]), (("src/base.ml", 270, 8607, 8626), ("src/base.ml", 270, 8607, 8653), 0))], 0, 0, Tag1 ("Base", 127)), 1, 0); (("sexp_of_exn", 7145), ((Tag1 (0, (Tag3 ((("exn", 7144)), 0, (0)), 100000000, 0, -12168), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -12167), 0), 100000000, 0, -12166), 0, (("src/base.ml", 272, 8655, 8661), ("src/base.ml", 272, 8655, 8672), 0), 0, Tag1 ("Base", 128)), 0); Tag1 (("float", 7146), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Float", 7052)), "t"), 0, (0)), 100000000, 0, -12165)), 0, 0, 0, 0, (("src/base.ml", 276, 8729, 8731), ("src/base.ml", 277, 8752, 8825), 0), [(("deriving_inline", (("src/base.ml", 277, 8752, 8757), ("src/base.ml", 277, 8752, 8772), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 277, 8752, 8773), ("src/base.ml", 277, 8752, 8780), 0))), (("src/base.ml", 277, 8752, 8773), ("src/base.ml", 277, 8752, 8780), 0), 0, 0); (((("equal"), (("src/base.ml", 277, 8752, 8782), ("src/base.ml", 277, 8752, 8787), 0))), (("src/base.ml", 277, 8752, 8782), ("src/base.ml", 277, 8752, 8787), 0), 0, 0); (((("globalize"), (("src/base.ml", 277, 8752, 8789), ("src/base.ml", 277, 8752, 8798), 0))), (("src/base.ml", 277, 8752, 8789), ("src/base.ml", 277, 8752, 8798), 0), 0, 0); (((("hash"), (("src/base.ml", 277, 8752, 8800), ("src/base.ml", 277, 8752, 8804), 0))), (("src/base.ml", 277, 8752, 8800), ("src/base.ml", 277, 8752, 8804), 0), 0, 0); (((("sexp"), (("src/base.ml", 277, 8752, 8806), ("src/base.ml", 277, 8752, 8810), 0))), (("src/base.ml", 277, 8752, 8806), ("src/base.ml", 277, 8752, 8810), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 277, 8752, 8812), ("src/base.ml", 277, 8752, 8824), 0))), (("src/base.ml", 277, 8752, 8812), ("src/base.ml", 277, 8752, 8824), 0), 0, 0)]), (("src/base.ml", 277, 8752, 8773), ("src/base.ml", 277, 8752, 8824), 0), 0, 0)], (("src/base.ml", 277, 8752, 8773), ("src/base.ml", 277, 8752, 8824), 0))]), (("src/base.ml", 277, 8752, 8754), ("src/base.ml", 277, 8752, 8825), 0))], 0, 0, Tag1 ("Base", 129)), 1, 0); (("compare_float", 7147), ((Tag1 (0, (Tag3 ((("float", 7146)), 0, (0)), 100000000, 0, -12164), (Tag1 (0, (Tag3 ((("float", 7146)), 0, (0)), 100000000, 0, -12163), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12162), 0), 100000000, 0, -12161), 0), 100000000, 0, -12160), 0, (("src/base.ml", 279, 8827, 8833), ("src/base.ml", 279, 8827, 8846), 0), 0, Tag1 ("Base", 130)), 0); (("equal_float", 7148), ((Tag1 (0, (Tag3 ((("float", 7146)), 0, (0)), 100000000, 0, -12159), (Tag1 (0, (Tag3 ((("float", 7146)), 0, (0)), 100000000, 0, -12158), (Tag3 ((("bool", 7126)), 0, (0)), 100000000, 0, -12157), 0), 100000000, 0, -12156), 0), 100000000, 0, -12155), 0, (("src/base.ml", 280, 8889, 8895), ("src/base.ml", 280, 8889, 8906), 0), 0, Tag1 ("Base", 131)), 0); (("globalize_float", 7149), ((Tag1 (0, (Tag3 ((("float", 7146)), 0, (0)), 100000000, 0, -12154), (Tag3 ((("float", 7146)), 0, (0)), 100000000, 0, -12153), 0), 100000000, 0, -12152), 0, (("src/base.ml", 282, 8949, 8956), ("src/base.ml", 282, 8949, 8971), 0), 0, Tag1 ("Base", 132)), 0); (("hash_fold_float", 7150), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -12151), (Tag1 (0, (Tag3 ((("float", 7146)), 0, (0)), 100000000, 0, -12150), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -12149), 0), 100000000, 0, -12148), 0), 100000000, 0, -12147), 0, (("src/base.ml", 286, 9069, 9076), ("src/base.ml", 286, 9069, 9091), 0), 0, Tag1 ("Base", 133)), 0); (("hash_float", 7151), ((Tag1 (0, (Tag3 ((("float", 7146)), 0, (0)), 100000000, 0, -12146), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "hash_value"), 0, (0)), 100000000, 0, -12145), 0), 100000000, 0, -12144), 0, (("src/base.ml", 291, 9201, 9208), ("src/base.ml", 291, 9201, 9218), 0), 0, Tag1 ("Base", 134)), 0); (("float_of_sexp", 7152), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -12143), (Tag3 ((("float", 7146)), 0, (0)), 100000000, 0, -12142), 0), 100000000, 0, -12141), 0, (("src/base.ml", 296, 9321, 9327), ("src/base.ml", 296, 9321, 9340), 0), 0, Tag1 ("Base", 137)), 0); (("sexp_of_float", 7153), ((Tag1 (0, (Tag3 ((("float", 7146)), 0, (0)), 100000000, 0, -12140), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -12139), 0), 100000000, 0, -12138), 0, (("src/base.ml", 297, 9388, 9394), ("src/base.ml", 297, 9388, 9407), 0), 0, Tag1 ("Base", 138)), 0); (("float_sexp_grammar", 7154), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("float", 7146)), 0, (0)), 100000000, 0, -12137)], (0)), 100000000, 0, -12136), 0, (("src/base.ml", 298, 9455, 9462), ("src/base.ml", 298, 9455, 9480), 0), 0, Tag1 ("Base", 139)), 0); Tag1 (("int", 7155), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Int", 7064)), "t"), 0, (0)), 100000000, 0, -12135)), 0, 0, 0, 0, (("src/base.ml", 302, 9550, 9552), ("src/base.ml", 302, 9550, 9640), 0), [(("deriving_inline", (("src/base.ml", 302, 9550, 9572), ("src/base.ml", 302, 9550, 9587), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 302, 9550, 9588), ("src/base.ml", 302, 9550, 9595), 0))), (("src/base.ml", 302, 9550, 9588), ("src/base.ml", 302, 9550, 9595), 0), 0, 0); (((("equal"), (("src/base.ml", 302, 9550, 9597), ("src/base.ml", 302, 9550, 9602), 0))), (("src/base.ml", 302, 9550, 9597), ("src/base.ml", 302, 9550, 9602), 0), 0, 0); (((("globalize"), (("src/base.ml", 302, 9550, 9604), ("src/base.ml", 302, 9550, 9613), 0))), (("src/base.ml", 302, 9550, 9604), ("src/base.ml", 302, 9550, 9613), 0), 0, 0); (((("hash"), (("src/base.ml", 302, 9550, 9615), ("src/base.ml", 302, 9550, 9619), 0))), (("src/base.ml", 302, 9550, 9615), ("src/base.ml", 302, 9550, 9619), 0), 0, 0); (((("sexp"), (("src/base.ml", 302, 9550, 9621), ("src/base.ml", 302, 9550, 9625), 0))), (("src/base.ml", 302, 9550, 9621), ("src/base.ml", 302, 9550, 9625), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 302, 9550, 9627), ("src/base.ml", 302, 9550, 9639), 0))), (("src/base.ml", 302, 9550, 9627), ("src/base.ml", 302, 9550, 9639), 0), 0, 0)]), (("src/base.ml", 302, 9550, 9588), ("src/base.ml", 302, 9550, 9639), 0), 0, 0)], (("src/base.ml", 302, 9550, 9588), ("src/base.ml", 302, 9550, 9639), 0))]), (("src/base.ml", 302, 9550, 9569), ("src/base.ml", 302, 9550, 9640), 0))], 1, 0, Tag1 ("Base", 140)), 1, 0); (("compare_int", 7156), ((Tag1 (0, (Tag3 ((("int", 7155)), 0, (0)), 100000000, 0, -12134), (Tag1 (0, (Tag3 ((("int", 7155)), 0, (0)), 100000000, 0, -12133), (Tag3 ((("int", 7155)), 0, (0)), 100000000, 0, -12132), 0), 100000000, 0, -12131), 0), 100000000, 0, -12130), 0, (("src/base.ml", 304, 9642, 9648), ("src/base.ml", 304, 9642, 9659), 0), 0, Tag1 ("Base", 141)), 0); (("equal_int", 7157), ((Tag1 (0, (Tag3 ((("int", 7155)), 0, (0)), 100000000, 0, -12129), (Tag1 (0, (Tag3 ((("int", 7155)), 0, (0)), 100000000, 0, -12128), (Tag3 ((("bool", 7126)), 0, (0)), 100000000, 0, -12127), 0), 100000000, 0, -12126), 0), 100000000, 0, -12125), 0, (("src/base.ml", 305, 9696, 9702), ("src/base.ml", 305, 9696, 9711), 0), 0, Tag1 ("Base", 142)), 0); (("globalize_int", 7158), ((Tag1 (0, (Tag3 ((("int", 7155)), 0, (0)), 100000000, 0, -12124), (Tag3 ((("int", 7155)), 0, (0)), 100000000, 0, -12123), 0), 100000000, 0, -12122), 0, (("src/base.ml", 307, 9748, 9755), ("src/base.ml", 307, 9748, 9768), 0), 0, Tag1 ("Base", 143)), 0); (("hash_fold_int", 7159), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -12121), (Tag1 (0, (Tag3 ((("int", 7155)), 0, (0)), 100000000, 0, -12120), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -12119), 0), 100000000, 0, -12118), 0), 100000000, 0, -12117), 0, (("src/base.ml", 311, 9856, 9863), ("src/base.ml", 311, 9856, 9876), 0), 0, Tag1 ("Base", 144)), 0); (("hash_int", 7160), ((Tag1 (0, (Tag3 ((("int", 7155)), 0, (0)), 100000000, 0, -12116), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "hash_value"), 0, (0)), 100000000, 0, -12115), 0), 100000000, 0, -12114), 0, (("src/base.ml", 314, 9969, 9976), ("src/base.ml", 314, 9969, 9984), 0), 0, Tag1 ("Base", 145)), 0); (("int_of_sexp", 7161), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -12113), (Tag3 ((("int", 7155)), 0, (0)), 100000000, 0, -12112), 0), 100000000, 0, -12111), 0, (("src/base.ml", 319, 10083, 10089), ("src/base.ml", 319, 10083, 10100), 0), 0, Tag1 ("Base", 148)), 0); (("sexp_of_int", 7162), ((Tag1 (0, (Tag3 ((("int", 7155)), 0, (0)), 100000000, 0, -12110), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -12109), 0), 100000000, 0, -12108), 0, (("src/base.ml", 320, 10144, 10150), ("src/base.ml", 320, 10144, 10161), 0), 0, Tag1 ("Base", 149)), 0); (("int_sexp_grammar", 7163), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("int", 7155)), 0, (0)), 100000000, 0, -12107)], (0)), 100000000, 0, -12106), 0, (("src/base.ml", 321, 10205, 10212), ("src/base.ml", 321, 10205, 10228), 0), 0, Tag1 ("Base", 150)), 0); Tag1 (("int32", 7164), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Int32", 7066)), "t"), 0, (0)), 100000000, 0, -12105)), 0, 0, 0, 0, (("src/base.ml", 325, 10294, 10296), ("src/base.ml", 326, 10317, 10390), 0), [(("deriving_inline", (("src/base.ml", 326, 10317, 10322), ("src/base.ml", 326, 10317, 10337), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 326, 10317, 10338), ("src/base.ml", 326, 10317, 10345), 0))), (("src/base.ml", 326, 10317, 10338), ("src/base.ml", 326, 10317, 10345), 0), 0, 0); (((("equal"), (("src/base.ml", 326, 10317, 10347), ("src/base.ml", 326, 10317, 10352), 0))), (("src/base.ml", 326, 10317, 10347), ("src/base.ml", 326, 10317, 10352), 0), 0, 0); (((("globalize"), (("src/base.ml", 326, 10317, 10354), ("src/base.ml", 326, 10317, 10363), 0))), (("src/base.ml", 326, 10317, 10354), ("src/base.ml", 326, 10317, 10363), 0), 0, 0); (((("hash"), (("src/base.ml", 326, 10317, 10365), ("src/base.ml", 326, 10317, 10369), 0))), (("src/base.ml", 326, 10317, 10365), ("src/base.ml", 326, 10317, 10369), 0), 0, 0); (((("sexp"), (("src/base.ml", 326, 10317, 10371), ("src/base.ml", 326, 10317, 10375), 0))), (("src/base.ml", 326, 10317, 10371), ("src/base.ml", 326, 10317, 10375), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 326, 10317, 10377), ("src/base.ml", 326, 10317, 10389), 0))), (("src/base.ml", 326, 10317, 10377), ("src/base.ml", 326, 10317, 10389), 0), 0, 0)]), (("src/base.ml", 326, 10317, 10338), ("src/base.ml", 326, 10317, 10389), 0), 0, 0)], (("src/base.ml", 326, 10317, 10338), ("src/base.ml", 326, 10317, 10389), 0))]), (("src/base.ml", 326, 10317, 10319), ("src/base.ml", 326, 10317, 10390), 0))], 0, 0, Tag1 ("Base", 151)), 1, 0); (("compare_int32", 7165), ((Tag1 (0, (Tag3 ((("int32", 7164)), 0, (0)), 100000000, 0, -12104), (Tag1 (0, (Tag3 ((("int32", 7164)), 0, (0)), 100000000, 0, -12103), (Tag3 ((("int", 7155)), 0, (0)), 100000000, 0, -12102), 0), 100000000, 0, -12101), 0), 100000000, 0, -12100), 0, (("src/base.ml", 328, 10392, 10398), ("src/base.ml", 328, 10392, 10411), 0), 0, Tag1 ("Base", 152)), 0); (("equal_int32", 7166), ((Tag1 (0, (Tag3 ((("int32", 7164)), 0, (0)), 100000000, 0, -12099), (Tag1 (0, (Tag3 ((("int32", 7164)), 0, (0)), 100000000, 0, -12098), (Tag3 ((("bool", 7126)), 0, (0)), 100000000, 0, -12097), 0), 100000000, 0, -12096), 0), 100000000, 0, -12095), 0, (("src/base.ml", 329, 10454, 10460), ("src/base.ml", 329, 10454, 10471), 0), 0, Tag1 ("Base", 153)), 0); (("globalize_int32", 7167), ((Tag1 (0, (Tag3 ((("int32", 7164)), 0, (0)), 100000000, 0, -12094), (Tag3 ((("int32", 7164)), 0, (0)), 100000000, 0, -12093), 0), 100000000, 0, -12092), 0, (("src/base.ml", 331, 10514, 10521), ("src/base.ml", 331, 10514, 10536), 0), 0, Tag1 ("Base", 154)), 0); (("hash_fold_int32", 7168), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -12091), (Tag1 (0, (Tag3 ((("int32", 7164)), 0, (0)), 100000000, 0, -12090), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -12089), 0), 100000000, 0, -12088), 0), 100000000, 0, -12087), 0, (("src/base.ml", 335, 10634, 10641), ("src/base.ml", 335, 10634, 10656), 0), 0, Tag1 ("Base", 155)), 0); (("hash_int32", 7169), ((Tag1 (0, (Tag3 ((("int32", 7164)), 0, (0)), 100000000, 0, -12086), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "hash_value"), 0, (0)), 100000000, 0, -12085), 0), 100000000, 0, -12084), 0, (("src/base.ml", 340, 10766, 10773), ("src/base.ml", 340, 10766, 10783), 0), 0, Tag1 ("Base", 156)), 0); (("int32_of_sexp", 7170), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -12083), (Tag3 ((("int32", 7164)), 0, (0)), 100000000, 0, -12082), 0), 100000000, 0, -12081), 0, (("src/base.ml", 345, 10886, 10892), ("src/base.ml", 345, 10886, 10905), 0), 0, Tag1 ("Base", 159)), 0); (("sexp_of_int32", 7171), ((Tag1 (0, (Tag3 ((("int32", 7164)), 0, (0)), 100000000, 0, -12080), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -12079), 0), 100000000, 0, -12078), 0, (("src/base.ml", 346, 10953, 10959), ("src/base.ml", 346, 10953, 10972), 0), 0, Tag1 ("Base", 160)), 0); (("int32_sexp_grammar", 7172), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("int32", 7164)), 0, (0)), 100000000, 0, -12077)], (0)), 100000000, 0, -12076), 0, (("src/base.ml", 347, 11020, 11027), ("src/base.ml", 347, 11020, 11045), 0), 0, Tag1 ("Base", 161)), 0); Tag1 (("int64", 7173), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Int64", 7068)), "t"), 0, (0)), 100000000, 0, -12075)), 0, 0, 0, 0, (("src/base.ml", 351, 11115, 11117), ("src/base.ml", 352, 11138, 11211), 0), [(("deriving_inline", (("src/base.ml", 352, 11138, 11143), ("src/base.ml", 352, 11138, 11158), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 352, 11138, 11159), ("src/base.ml", 352, 11138, 11166), 0))), (("src/base.ml", 352, 11138, 11159), ("src/base.ml", 352, 11138, 11166), 0), 0, 0); (((("equal"), (("src/base.ml", 352, 11138, 11168), ("src/base.ml", 352, 11138, 11173), 0))), (("src/base.ml", 352, 11138, 11168), ("src/base.ml", 352, 11138, 11173), 0), 0, 0); (((("globalize"), (("src/base.ml", 352, 11138, 11175), ("src/base.ml", 352, 11138, 11184), 0))), (("src/base.ml", 352, 11138, 11175), ("src/base.ml", 352, 11138, 11184), 0), 0, 0); (((("hash"), (("src/base.ml", 352, 11138, 11186), ("src/base.ml", 352, 11138, 11190), 0))), (("src/base.ml", 352, 11138, 11186), ("src/base.ml", 352, 11138, 11190), 0), 0, 0); (((("sexp"), (("src/base.ml", 352, 11138, 11192), ("src/base.ml", 352, 11138, 11196), 0))), (("src/base.ml", 352, 11138, 11192), ("src/base.ml", 352, 11138, 11196), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 352, 11138, 11198), ("src/base.ml", 352, 11138, 11210), 0))), (("src/base.ml", 352, 11138, 11198), ("src/base.ml", 352, 11138, 11210), 0), 0, 0)]), (("src/base.ml", 352, 11138, 11159), ("src/base.ml", 352, 11138, 11210), 0), 0, 0)], (("src/base.ml", 352, 11138, 11159), ("src/base.ml", 352, 11138, 11210), 0))]), (("src/base.ml", 352, 11138, 11140), ("src/base.ml", 352, 11138, 11211), 0))], 0, 0, Tag1 ("Base", 162)), 1, 0); (("compare_int64", 7174), ((Tag1 (0, (Tag3 ((("int64", 7173)), 0, (0)), 100000000, 0, -12074), (Tag1 (0, (Tag3 ((("int64", 7173)), 0, (0)), 100000000, 0, -12073), (Tag3 ((("int", 7155)), 0, (0)), 100000000, 0, -12072), 0), 100000000, 0, -12071), 0), 100000000, 0, -12070), 0, (("src/base.ml", 354, 11213, 11219), ("src/base.ml", 354, 11213, 11232), 0), 0, Tag1 ("Base", 163)), 0); (("equal_int64", 7175), ((Tag1 (0, (Tag3 ((("int64", 7173)), 0, (0)), 100000000, 0, -12069), (Tag1 (0, (Tag3 ((("int64", 7173)), 0, (0)), 100000000, 0, -12068), (Tag3 ((("bool", 7126)), 0, (0)), 100000000, 0, -12067), 0), 100000000, 0, -12066), 0), 100000000, 0, -12065), 0, (("src/base.ml", 355, 11275, 11281), ("src/base.ml", 355, 11275, 11292), 0), 0, Tag1 ("Base", 164)), 0); (("globalize_int64", 7176), ((Tag1 (0, (Tag3 ((("int64", 7173)), 0, (0)), 100000000, 0, -12064), (Tag3 ((("int64", 7173)), 0, (0)), 100000000, 0, -12063), 0), 100000000, 0, -12062), 0, (("src/base.ml", 357, 11335, 11342), ("src/base.ml", 357, 11335, 11357), 0), 0, Tag1 ("Base", 165)), 0); (("hash_fold_int64", 7177), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -12061), (Tag1 (0, (Tag3 ((("int64", 7173)), 0, (0)), 100000000, 0, -12060), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -12059), 0), 100000000, 0, -12058), 0), 100000000, 0, -12057), 0, (("src/base.ml", 361, 11455, 11462), ("src/base.ml", 361, 11455, 11477), 0), 0, Tag1 ("Base", 166)), 0); (("hash_int64", 7178), ((Tag1 (0, (Tag3 ((("int64", 7173)), 0, (0)), 100000000, 0, -12056), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "hash_value"), 0, (0)), 100000000, 0, -12055), 0), 100000000, 0, -12054), 0, (("src/base.ml", 366, 11587, 11594), ("src/base.ml", 366, 11587, 11604), 0), 0, Tag1 ("Base", 167)), 0); (("int64_of_sexp", 7179), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -12053), (Tag3 ((("int64", 7173)), 0, (0)), 100000000, 0, -12052), 0), 100000000, 0, -12051), 0, (("src/base.ml", 371, 11707, 11713), ("src/base.ml", 371, 11707, 11726), 0), 0, Tag1 ("Base", 170)), 0); (("sexp_of_int64", 7180), ((Tag1 (0, (Tag3 ((("int64", 7173)), 0, (0)), 100000000, 0, -12050), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -12049), 0), 100000000, 0, -12048), 0, (("src/base.ml", 372, 11774, 11780), ("src/base.ml", 372, 11774, 11793), 0), 0, Tag1 ("Base", 171)), 0); (("int64_sexp_grammar", 7181), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("int64", 7173)), 0, (0)), 100000000, 0, -12047)], (0)), 100000000, 0, -12046), 0, (("src/base.ml", 373, 11841, 11848), ("src/base.ml", 373, 11841, 11866), 0), 0, Tag1 ("Base", 172)), 0); Tag1 (("list", 7182), ([((("a")), 100000000, 0, -12045)], 1, 0, 1, ((Tag3 (Tag1 ((("List", 7073)), "t"), [((("a")), 100000000, 0, -12045)], (0)), 100000000, 0, -12044)), [25], [0], 0, 0, (("src/base.ml", 377, 11936, 11938), ("src/base.ml", 378, 11963, 12036), 0), [(("deriving_inline", (("src/base.ml", 378, 11963, 11968), ("src/base.ml", 378, 11963, 11983), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 378, 11963, 11984), ("src/base.ml", 378, 11963, 11991), 0))), (("src/base.ml", 378, 11963, 11984), ("src/base.ml", 378, 11963, 11991), 0), 0, 0); (((("equal"), (("src/base.ml", 378, 11963, 11993), ("src/base.ml", 378, 11963, 11998), 0))), (("src/base.ml", 378, 11963, 11993), ("src/base.ml", 378, 11963, 11998), 0), 0, 0); (((("globalize"), (("src/base.ml", 378, 11963, 12000), ("src/base.ml", 378, 11963, 12009), 0))), (("src/base.ml", 378, 11963, 12000), ("src/base.ml", 378, 11963, 12009), 0), 0, 0); (((("hash"), (("src/base.ml", 378, 11963, 12011), ("src/base.ml", 378, 11963, 12015), 0))), (("src/base.ml", 378, 11963, 12011), ("src/base.ml", 378, 11963, 12015), 0), 0, 0); (((("sexp"), (("src/base.ml", 378, 11963, 12017), ("src/base.ml", 378, 11963, 12021), 0))), (("src/base.ml", 378, 11963, 12017), ("src/base.ml", 378, 11963, 12021), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 378, 11963, 12023), ("src/base.ml", 378, 11963, 12035), 0))), (("src/base.ml", 378, 11963, 12023), ("src/base.ml", 378, 11963, 12035), 0), 0, 0)]), (("src/base.ml", 378, 11963, 11984), ("src/base.ml", 378, 11963, 12035), 0), 0, 0)], (("src/base.ml", 378, 11963, 11984), ("src/base.ml", 378, 11963, 12035), 0))]), (("src/base.ml", 378, 11963, 11965), ("src/base.ml", 378, 11963, 12036), 0))], 0, 0, Tag1 ("Base", 173)), 1, 0); (("compare_list", 7183), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -12039), (Tag1 (0, ((("a")), 100000000, 0, -12039), (Tag3 ((("int", 7155)), 0, (0)), 100000000, 0, -12043), 0), 100000000, 0, -12042), 0), 100000000, 0, -12041), (Tag1 (0, (Tag3 ((("list", 7182)), [((("a")), 100000000, 0, -12039)], (0)), 100000000, 0, -12040), (Tag1 (0, (Tag3 ((("list", 7182)), [((("a")), 100000000, 0, -12039)], (0)), 100000000, 0, -12038), (Tag3 ((("int", 7155)), 0, (0)), 100000000, 0, -12037), 0), 100000000, 0, -12036), 0), 100000000, 0, -12035), 0), 100000000, 0, -12034), 0, (("src/base.ml", 380, 12038, 12044), ("src/base.ml", 380, 12038, 12056), 0), 0, Tag1 ("Base", 174)), 0); (("equal_list", 7184), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -12029), (Tag1 (0, ((("a")), 100000000, 0, -12029), (Tag3 ((("bool", 7126)), 0, (0)), 100000000, 0, -12033), 0), 100000000, 0, -12032), 0), 100000000, 0, -12031), (Tag1 (0, (Tag3 ((("list", 7182)), [((("a")), 100000000, 0, -12029)], (0)), 100000000, 0, -12030), (Tag1 (0, (Tag3 ((("list", 7182)), [((("a")), 100000000, 0, -12029)], (0)), 100000000, 0, -12028), (Tag3 ((("bool", 7126)), 0, (0)), 100000000, 0, -12027), 0), 100000000, 0, -12026), 0), 100000000, 0, -12025), 0), 100000000, 0, -12024), 0, (("src/base.ml", 381, 12125, 12131), ("src/base.ml", 381, 12125, 12141), 0), 0, Tag1 ("Base", 175)), 0); (("globalize_list", 7185), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -12021), ((("a")), 100000000, 0, -12021), 0), 100000000, 0, -12023), (Tag1 (0, (Tag3 ((("list", 7182)), [((("a")), 100000000, 0, -12021)], (0)), 100000000, 0, -12022), (Tag3 ((("list", 7182)), [((("a")), 100000000, 0, -12021)], (0)), 100000000, 0, -12020), 0), 100000000, 0, -12019), 0), 100000000, 0, -12018), 0, (("src/base.ml", 383, 12211, 12217), ("src/base.ml", 383, 12211, 12231), 0), 0, Tag1 ("Base", 176)), 0); (("hash_fold_list", 7186), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -12017), (Tag1 (0, ((("a")), 100000000, 0, -12012), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -12016), 0), 100000000, 0, -12015), 0), 100000000, 0, -12014), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -12013), (Tag1 (0, (Tag3 ((("list", 7182)), [((("a")), 100000000, 0, -12012)], (0)), 100000000, 0, -12011), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -12010), 0), 100000000, 0, -12009), 0), 100000000, 0, -12008), 0), 100000000, 0, -12007), 0, (("src/base.ml", 392, 12476, 12482), ("src/base.ml", 392, 12476, 12496), 0), 0, Tag1 ("Base", 178)), 0); (("list_of_sexp", 7187), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -12006), ((("a")), 100000000, 0, -12003), 0), 100000000, 0, -12005), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -12004), (Tag3 ((("list", 7182)), [((("a")), 100000000, 0, -12003)], (0)), 100000000, 0, -12002), 0), 100000000, 0, -12001), 0), 100000000, 0, -12000), 0, (("src/base.ml", 402, 12696, 12702), ("src/base.ml", 402, 12696, 12714), 0), 0, Tag1 ("Base", 179)), 0); (("sexp_of_list", 7188), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -11997), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -11999), 0), 100000000, 0, -11998), (Tag1 (0, (Tag3 ((("list", 7182)), [((("a")), 100000000, 0, -11997)], (0)), 100000000, 0, -11996), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -11995), 0), 100000000, 0, -11994), 0), 100000000, 0, -11993), 0, (("src/base.ml", 406, 12802, 12808), ("src/base.ml", 406, 12802, 12820), 0), 0, Tag1 ("Base", 180)), 0); (("list_sexp_grammar", 7189), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [((("a")), 100000000, 0, -11991)], (0)), 100000000, 0, -11992), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("list", 7182)), [((("a")), 100000000, 0, -11991)], (0)), 100000000, 0, -11990)], (0)), 100000000, 0, -11989), 0), 100000000, 0, -11988), 0, (("src/base.ml", 410, 12908, 12914), ("src/base.ml", 410, 12908, 12931), 0), 0, Tag1 ("Base", 181)), 0); Tag1 (("nativeint", 7190), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Nativeint", 7077)), "t"), 0, (0)), 100000000, 0, -11987)), 0, 0, 0, 0, (("src/base.ml", 418, 13093, 13095), ("src/base.ml", 419, 13124, 13197), 0), [(("deriving_inline", (("src/base.ml", 419, 13124, 13129), ("src/base.ml", 419, 13124, 13144), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 419, 13124, 13145), ("src/base.ml", 419, 13124, 13152), 0))), (("src/base.ml", 419, 13124, 13145), ("src/base.ml", 419, 13124, 13152), 0), 0, 0); (((("equal"), (("src/base.ml", 419, 13124, 13154), ("src/base.ml", 419, 13124, 13159), 0))), (("src/base.ml", 419, 13124, 13154), ("src/base.ml", 419, 13124, 13159), 0), 0, 0); (((("globalize"), (("src/base.ml", 419, 13124, 13161), ("src/base.ml", 419, 13124, 13170), 0))), (("src/base.ml", 419, 13124, 13161), ("src/base.ml", 419, 13124, 13170), 0), 0, 0); (((("hash"), (("src/base.ml", 419, 13124, 13172), ("src/base.ml", 419, 13124, 13176), 0))), (("src/base.ml", 419, 13124, 13172), ("src/base.ml", 419, 13124, 13176), 0), 0, 0); (((("sexp"), (("src/base.ml", 419, 13124, 13178), ("src/base.ml", 419, 13124, 13182), 0))), (("src/base.ml", 419, 13124, 13178), ("src/base.ml", 419, 13124, 13182), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 419, 13124, 13184), ("src/base.ml", 419, 13124, 13196), 0))), (("src/base.ml", 419, 13124, 13184), ("src/base.ml", 419, 13124, 13196), 0), 0, 0)]), (("src/base.ml", 419, 13124, 13145), ("src/base.ml", 419, 13124, 13196), 0), 0, 0)], (("src/base.ml", 419, 13124, 13145), ("src/base.ml", 419, 13124, 13196), 0))]), (("src/base.ml", 419, 13124, 13126), ("src/base.ml", 419, 13124, 13197), 0))], 0, 0, Tag1 ("Base", 183)), 1, 0); (("compare_nativeint", 7191), ((Tag1 (0, (Tag3 ((("nativeint", 7190)), 0, (0)), 100000000, 0, -11986), (Tag1 (0, (Tag3 ((("nativeint", 7190)), 0, (0)), 100000000, 0, -11985), (Tag3 ((("int", 7155)), 0, (0)), 100000000, 0, -11984), 0), 100000000, 0, -11983), 0), 100000000, 0, -11982), 0, (("src/base.ml", 421, 13199, 13205), ("src/base.ml", 421, 13199, 13222), 0), 0, Tag1 ("Base", 184)), 0); (("equal_nativeint", 7192), ((Tag1 (0, (Tag3 ((("nativeint", 7190)), 0, (0)), 100000000, 0, -11981), (Tag1 (0, (Tag3 ((("nativeint", 7190)), 0, (0)), 100000000, 0, -11980), (Tag3 ((("bool", 7126)), 0, (0)), 100000000, 0, -11979), 0), 100000000, 0, -11978), 0), 100000000, 0, -11977), 0, (("src/base.ml", 422, 13277, 13283), ("src/base.ml", 422, 13277, 13298), 0), 0, Tag1 ("Base", 185)), 0); (("globalize_nativeint", 7193), ((Tag1 (0, (Tag3 ((("nativeint", 7190)), 0, (0)), 100000000, 0, -11976), (Tag3 ((("nativeint", 7190)), 0, (0)), 100000000, 0, -11975), 0), 100000000, 0, -11974), 0, (("src/base.ml", 424, 13353, 13360), ("src/base.ml", 424, 13353, 13379), 0), 0, Tag1 ("Base", 186)), 0); (("hash_fold_nativeint", 7194), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -11973), (Tag1 (0, (Tag3 ((("nativeint", 7190)), 0, (0)), 100000000, 0, -11972), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -11971), 0), 100000000, 0, -11970), 0), 100000000, 0, -11969), 0, (("src/base.ml", 428, 13497, 13504), ("src/base.ml", 428, 13497, 13523), 0), 0, Tag1 ("Base", 187)), 0); (("hash_nativeint", 7195), ((Tag1 (0, (Tag3 ((("nativeint", 7190)), 0, (0)), 100000000, 0, -11968), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "hash_value"), 0, (0)), 100000000, 0, -11967), 0), 100000000, 0, -11966), 0, (("src/base.ml", 433, 13641, 13648), ("src/base.ml", 433, 13641, 13662), 0), 0, Tag1 ("Base", 188)), 0); (("nativeint_of_sexp", 7196), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -11965), (Tag3 ((("nativeint", 7190)), 0, (0)), 100000000, 0, -11964), 0), 100000000, 0, -11963), 0, (("src/base.ml", 438, 13773, 13779), ("src/base.ml", 438, 13773, 13796), 0), 0, Tag1 ("Base", 191)), 0); (("sexp_of_nativeint", 7197), ((Tag1 (0, (Tag3 ((("nativeint", 7190)), 0, (0)), 100000000, 0, -11962), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -11961), 0), 100000000, 0, -11960), 0, (("src/base.ml", 439, 13852, 13858), ("src/base.ml", 439, 13852, 13875), 0), 0, Tag1 ("Base", 192)), 0); (("nativeint_sexp_grammar", 7198), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("nativeint", 7190)), 0, (0)), 100000000, 0, -11959)], (0)), 100000000, 0, -11958), 0, (("src/base.ml", 441, 13932, 13939), ("src/base.ml", 441, 13932, 13961), 0), 0, Tag1 ("Base", 193)), 0); Tag1 (("option", 7199), ([((("a")), 100000000, 0, -11957)], 1, 0, 1, ((Tag3 (Tag1 ((("Option", 7079)), "t"), [((("a")), 100000000, 0, -11957)], (0)), 100000000, 0, -11956)), [25], [0], 0, 0, (("src/base.ml", 447, 14048, 14050), ("src/base.ml", 448, 14079, 14152), 0), [(("deriving_inline", (("src/base.ml", 448, 14079, 14084), ("src/base.ml", 448, 14079, 14099), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 448, 14079, 14100), ("src/base.ml", 448, 14079, 14107), 0))), (("src/base.ml", 448, 14079, 14100), ("src/base.ml", 448, 14079, 14107), 0), 0, 0); (((("equal"), (("src/base.ml", 448, 14079, 14109), ("src/base.ml", 448, 14079, 14114), 0))), (("src/base.ml", 448, 14079, 14109), ("src/base.ml", 448, 14079, 14114), 0), 0, 0); (((("globalize"), (("src/base.ml", 448, 14079, 14116), ("src/base.ml", 448, 14079, 14125), 0))), (("src/base.ml", 448, 14079, 14116), ("src/base.ml", 448, 14079, 14125), 0), 0, 0); (((("hash"), (("src/base.ml", 448, 14079, 14127), ("src/base.ml", 448, 14079, 14131), 0))), (("src/base.ml", 448, 14079, 14127), ("src/base.ml", 448, 14079, 14131), 0), 0, 0); (((("sexp"), (("src/base.ml", 448, 14079, 14133), ("src/base.ml", 448, 14079, 14137), 0))), (("src/base.ml", 448, 14079, 14133), ("src/base.ml", 448, 14079, 14137), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 448, 14079, 14139), ("src/base.ml", 448, 14079, 14151), 0))), (("src/base.ml", 448, 14079, 14139), ("src/base.ml", 448, 14079, 14151), 0), 0, 0)]), (("src/base.ml", 448, 14079, 14100), ("src/base.ml", 448, 14079, 14151), 0), 0, 0)], (("src/base.ml", 448, 14079, 14100), ("src/base.ml", 448, 14079, 14151), 0))]), (("src/base.ml", 448, 14079, 14081), ("src/base.ml", 448, 14079, 14152), 0))], 0, 0, Tag1 ("Base", 194)), 1, 0); (("compare_option", 7200), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -11951), (Tag1 (0, ((("a")), 100000000, 0, -11951), (Tag3 ((("int", 7155)), 0, (0)), 100000000, 0, -11955), 0), 100000000, 0, -11954), 0), 100000000, 0, -11953), (Tag1 (0, (Tag3 ((("option", 7199)), [((("a")), 100000000, 0, -11951)], (0)), 100000000, 0, -11952), (Tag1 (0, (Tag3 ((("option", 7199)), [((("a")), 100000000, 0, -11951)], (0)), 100000000, 0, -11950), (Tag3 ((("int", 7155)), 0, (0)), 100000000, 0, -11949), 0), 100000000, 0, -11948), 0), 100000000, 0, -11947), 0), 100000000, 0, -11946), 0, (("src/base.ml", 450, 14154, 14160), ("src/base.ml", 450, 14154, 14174), 0), 0, Tag1 ("Base", 195)), 0); (("equal_option", 7201), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -11941), (Tag1 (0, ((("a")), 100000000, 0, -11941), (Tag3 ((("bool", 7126)), 0, (0)), 100000000, 0, -11945), 0), 100000000, 0, -11944), 0), 100000000, 0, -11943), (Tag1 (0, (Tag3 ((("option", 7199)), [((("a")), 100000000, 0, -11941)], (0)), 100000000, 0, -11942), (Tag1 (0, (Tag3 ((("option", 7199)), [((("a")), 100000000, 0, -11941)], (0)), 100000000, 0, -11940), (Tag3 ((("bool", 7126)), 0, (0)), 100000000, 0, -11939), 0), 100000000, 0, -11938), 0), 100000000, 0, -11937), 0), 100000000, 0, -11936), 0, (("src/base.ml", 454, 14259, 14265), ("src/base.ml", 454, 14259, 14277), 0), 0, Tag1 ("Base", 196)), 0); (("globalize_option", 7202), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -11933), ((("a")), 100000000, 0, -11933), 0), 100000000, 0, -11935), (Tag1 (0, (Tag3 ((("option", 7199)), [((("a")), 100000000, 0, -11933)], (0)), 100000000, 0, -11934), (Tag3 ((("option", 7199)), [((("a")), 100000000, 0, -11933)], (0)), 100000000, 0, -11932), 0), 100000000, 0, -11931), 0), 100000000, 0, -11930), 0, (("src/base.ml", 458, 14362, 14368), ("src/base.ml", 458, 14362, 14384), 0), 0, Tag1 ("Base", 197)), 0); (("hash_fold_option", 7203), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -11929), (Tag1 (0, ((("a")), 100000000, 0, -11924), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -11928), 0), 100000000, 0, -11927), 0), 100000000, 0, -11926), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -11925), (Tag1 (0, (Tag3 ((("option", 7199)), [((("a")), 100000000, 0, -11924)], (0)), 100000000, 0, -11923), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -11922), 0), 100000000, 0, -11921), 0), 100000000, 0, -11920), 0), 100000000, 0, -11919), 0, (("src/base.ml", 467, 14639, 14645), ("src/base.ml", 467, 14639, 14661), 0), 0, Tag1 ("Base", 199)), 0); (("option_of_sexp", 7204), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -11918), ((("a")), 100000000, 0, -11915), 0), 100000000, 0, -11917), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -11916), (Tag3 ((("option", 7199)), [((("a")), 100000000, 0, -11915)], (0)), 100000000, 0, -11914), 0), 100000000, 0, -11913), 0), 100000000, 0, -11912), 0, (("src/base.ml", 477, 14865, 14871), ("src/base.ml", 477, 14865, 14885), 0), 0, Tag1 ("Base", 200)), 0); (("sexp_of_option", 7205), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -11909), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -11911), 0), 100000000, 0, -11910), (Tag1 (0, (Tag3 ((("option", 7199)), [((("a")), 100000000, 0, -11909)], (0)), 100000000, 0, -11908), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -11907), 0), 100000000, 0, -11906), 0), 100000000, 0, -11905), 0, (("src/base.ml", 481, 14977, 14983), ("src/base.ml", 481, 14977, 14997), 0), 0, Tag1 ("Base", 201)), 0); (("option_sexp_grammar", 7206), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [((("a")), 100000000, 0, -11903)], (0)), 100000000, 0, -11904), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("option", 7199)), [((("a")), 100000000, 0, -11903)], (0)), 100000000, 0, -11902)], (0)), 100000000, 0, -11901), 0), 100000000, 0, -11900), 0, (("src/base.ml", 485, 15089, 15095), ("src/base.ml", 485, 15089, 15114), 0), 0, Tag1 ("Base", 202)), 0); Tag1 (("ref", 7207), ([((("a")), 100000000, 0, -11899)], 1, 0, 1, ((Tag3 (Tag1 ((("Ref", 7091)), "t"), [((("a")), 100000000, 0, -11899)], (0)), 100000000, 0, -11898)), [63], [0], 0, 0, (("src/base.ml", 493, 15280, 15282), ("src/base.ml", 493, 15280, 15370), 0), [(("deriving_inline", (("src/base.ml", 493, 15280, 15308), ("src/base.ml", 493, 15280, 15323), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 493, 15280, 15324), ("src/base.ml", 493, 15280, 15331), 0))), (("src/base.ml", 493, 15280, 15324), ("src/base.ml", 493, 15280, 15331), 0), 0, 0); (((("equal"), (("src/base.ml", 493, 15280, 15333), ("src/base.ml", 493, 15280, 15338), 0))), (("src/base.ml", 493, 15280, 15333), ("src/base.ml", 493, 15280, 15338), 0), 0, 0); (((("globalize"), (("src/base.ml", 493, 15280, 15340), ("src/base.ml", 493, 15280, 15349), 0))), (("src/base.ml", 493, 15280, 15340), ("src/base.ml", 493, 15280, 15349), 0), 0, 0); (((("sexp"), (("src/base.ml", 493, 15280, 15351), ("src/base.ml", 493, 15280, 15355), 0))), (("src/base.ml", 493, 15280, 15351), ("src/base.ml", 493, 15280, 15355), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 493, 15280, 15357), ("src/base.ml", 493, 15280, 15369), 0))), (("src/base.ml", 493, 15280, 15357), ("src/base.ml", 493, 15280, 15369), 0), 0, 0)]), (("src/base.ml", 493, 15280, 15324), ("src/base.ml", 493, 15280, 15369), 0), 0, 0)], (("src/base.ml", 493, 15280, 15324), ("src/base.ml", 493, 15280, 15369), 0))]), (("src/base.ml", 493, 15280, 15305), ("src/base.ml", 493, 15280, 15370), 0))], 0, 0, Tag1 ("Base", 204)), 1, 0); (("compare_ref", 7208), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -11893), (Tag1 (0, ((("a")), 100000000, 0, -11893), (Tag3 ((("int", 7155)), 0, (0)), 100000000, 0, -11897), 0), 100000000, 0, -11896), 0), 100000000, 0, -11895), (Tag1 (0, (Tag3 ((("ref", 7207)), [((("a")), 100000000, 0, -11893)], (0)), 100000000, 0, -11894), (Tag1 (0, (Tag3 ((("ref", 7207)), [((("a")), 100000000, 0, -11893)], (0)), 100000000, 0, -11892), (Tag3 ((("int", 7155)), 0, (0)), 100000000, 0, -11891), 0), 100000000, 0, -11890), 0), 100000000, 0, -11889), 0), 100000000, 0, -11888), 0, (("src/base.ml", 495, 15372, 15378), ("src/base.ml", 495, 15372, 15389), 0), 0, Tag1 ("Base", 205)), 0); (("equal_ref", 7209), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -11883), (Tag1 (0, ((("a")), 100000000, 0, -11883), (Tag3 ((("bool", 7126)), 0, (0)), 100000000, 0, -11887), 0), 100000000, 0, -11886), 0), 100000000, 0, -11885), (Tag1 (0, (Tag3 ((("ref", 7207)), [((("a")), 100000000, 0, -11883)], (0)), 100000000, 0, -11884), (Tag1 (0, (Tag3 ((("ref", 7207)), [((("a")), 100000000, 0, -11883)], (0)), 100000000, 0, -11882), (Tag3 ((("bool", 7126)), 0, (0)), 100000000, 0, -11881), 0), 100000000, 0, -11880), 0), 100000000, 0, -11879), 0), 100000000, 0, -11878), 0, (("src/base.ml", 496, 15455, 15461), ("src/base.ml", 496, 15455, 15470), 0), 0, Tag1 ("Base", 206)), 0); (("globalize_ref", 7210), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -11875), ((("a")), 100000000, 0, -11875), 0), 100000000, 0, -11877), (Tag1 (0, (Tag3 ((("ref", 7207)), [((("a")), 100000000, 0, -11875)], (0)), 100000000, 0, -11876), (Tag3 ((("ref", 7207)), [((("a")), 100000000, 0, -11875)], (0)), 100000000, 0, -11874), 0), 100000000, 0, -11873), 0), 100000000, 0, -11872), 0, (("src/base.ml", 498, 15537, 15543), ("src/base.ml", 498, 15537, 15556), 0), 0, Tag1 ("Base", 207)), 0); (("ref_of_sexp", 7211), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -11871), ((("a")), 100000000, 0, -11868), 0), 100000000, 0, -11870), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -11869), (Tag3 ((("ref", 7207)), [((("a")), 100000000, 0, -11868)], (0)), 100000000, 0, -11867), 0), 100000000, 0, -11866), 0), 100000000, 0, -11865), 0, (("src/base.ml", 505, 15788, 15794), ("src/base.ml", 505, 15788, 15805), 0), 0, Tag1 ("Base", 209)), 0); (("sexp_of_ref", 7212), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -11862), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -11864), 0), 100000000, 0, -11863), (Tag1 (0, (Tag3 ((("ref", 7207)), [((("a")), 100000000, 0, -11862)], (0)), 100000000, 0, -11861), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -11860), 0), 100000000, 0, -11859), 0), 100000000, 0, -11858), 0, (("src/base.ml", 509, 15891, 15897), ("src/base.ml", 509, 15891, 15908), 0), 0, Tag1 ("Base", 210)), 0); (("ref_sexp_grammar", 7213), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [((("a")), 100000000, 0, -11856)], (0)), 100000000, 0, -11857), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("ref", 7207)), [((("a")), 100000000, 0, -11856)], (0)), 100000000, 0, -11855)], (0)), 100000000, 0, -11854), 0), 100000000, 0, -11853), 0, (("src/base.ml", 513, 15994, 16000), ("src/base.ml", 513, 15994, 16016), 0), 0, Tag1 ("Base", 211)), 0); Tag1 (("string", 7214), (0, 0, 0, 1, ((Tag3 (Tag1 ((("String", 7101)), "t"), 0, (0)), 100000000, 0, -11852)), 0, 0, 0, 0, (("src/base.ml", 519, 16168, 16170), ("src/base.ml", 520, 16193, 16266), 0), [(("deriving_inline", (("src/base.ml", 520, 16193, 16198), ("src/base.ml", 520, 16193, 16213), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 520, 16193, 16214), ("src/base.ml", 520, 16193, 16221), 0))), (("src/base.ml", 520, 16193, 16214), ("src/base.ml", 520, 16193, 16221), 0), 0, 0); (((("equal"), (("src/base.ml", 520, 16193, 16223), ("src/base.ml", 520, 16193, 16228), 0))), (("src/base.ml", 520, 16193, 16223), ("src/base.ml", 520, 16193, 16228), 0), 0, 0); (((("globalize"), (("src/base.ml", 520, 16193, 16230), ("src/base.ml", 520, 16193, 16239), 0))), (("src/base.ml", 520, 16193, 16230), ("src/base.ml", 520, 16193, 16239), 0), 0, 0); (((("hash"), (("src/base.ml", 520, 16193, 16241), ("src/base.ml", 520, 16193, 16245), 0))), (("src/base.ml", 520, 16193, 16241), ("src/base.ml", 520, 16193, 16245), 0), 0, 0); (((("sexp"), (("src/base.ml", 520, 16193, 16247), ("src/base.ml", 520, 16193, 16251), 0))), (("src/base.ml", 520, 16193, 16247), ("src/base.ml", 520, 16193, 16251), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 520, 16193, 16253), ("src/base.ml", 520, 16193, 16265), 0))), (("src/base.ml", 520, 16193, 16253), ("src/base.ml", 520, 16193, 16265), 0), 0, 0)]), (("src/base.ml", 520, 16193, 16214), ("src/base.ml", 520, 16193, 16265), 0), 0, 0)], (("src/base.ml", 520, 16193, 16214), ("src/base.ml", 520, 16193, 16265), 0))]), (("src/base.ml", 520, 16193, 16195), ("src/base.ml", 520, 16193, 16266), 0))], 0, 0, Tag1 ("Base", 213)), 1, 0); (("compare_string", 7215), ((Tag1 (0, (Tag3 ((("string", 7214)), 0, (0)), 100000000, 0, -11851), (Tag1 (0, (Tag3 ((("string", 7214)), 0, (0)), 100000000, 0, -11850), (Tag3 ((("int", 7155)), 0, (0)), 100000000, 0, -11849), 0), 100000000, 0, -11848), 0), 100000000, 0, -11847), 0, (("src/base.ml", 522, 16268, 16274), ("src/base.ml", 522, 16268, 16288), 0), 0, Tag1 ("Base", 214)), 0); (("equal_string", 7216), ((Tag1 (0, (Tag3 ((("string", 7214)), 0, (0)), 100000000, 0, -11846), (Tag1 (0, (Tag3 ((("string", 7214)), 0, (0)), 100000000, 0, -11845), (Tag3 ((("bool", 7126)), 0, (0)), 100000000, 0, -11844), 0), 100000000, 0, -11843), 0), 100000000, 0, -11842), 0, (("src/base.ml", 523, 16334, 16340), ("src/base.ml", 523, 16334, 16352), 0), 0, Tag1 ("Base", 215)), 0); (("globalize_string", 7217), ((Tag1 (0, (Tag3 ((("string", 7214)), 0, (0)), 100000000, 0, -11841), (Tag3 ((("string", 7214)), 0, (0)), 100000000, 0, -11840), 0), 100000000, 0, -11839), 0, (("src/base.ml", 525, 16398, 16405), ("src/base.ml", 525, 16398, 16421), 0), 0, Tag1 ("Base", 216)), 0); (("hash_fold_string", 7218), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -11838), (Tag1 (0, (Tag3 ((("string", 7214)), 0, (0)), 100000000, 0, -11837), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -11836), 0), 100000000, 0, -11835), 0), 100000000, 0, -11834), 0, (("src/base.ml", 529, 16524, 16531), ("src/base.ml", 529, 16524, 16547), 0), 0, Tag1 ("Base", 217)), 0); (("hash_string", 7219), ((Tag1 (0, (Tag3 ((("string", 7214)), 0, (0)), 100000000, 0, -11833), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "hash_value"), 0, (0)), 100000000, 0, -11832), 0), 100000000, 0, -11831), 0, (("src/base.ml", 534, 16659, 16666), ("src/base.ml", 534, 16659, 16677), 0), 0, Tag1 ("Base", 218)), 0); (("string_of_sexp", 7220), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -11830), (Tag3 ((("string", 7214)), 0, (0)), 100000000, 0, -11829), 0), 100000000, 0, -11828), 0, (("src/base.ml", 539, 16782, 16788), ("src/base.ml", 539, 16782, 16802), 0), 0, Tag1 ("Base", 221)), 0); (("sexp_of_string", 7221), ((Tag1 (0, (Tag3 ((("string", 7214)), 0, (0)), 100000000, 0, -11827), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -11826), 0), 100000000, 0, -11825), 0, (("src/base.ml", 540, 16852, 16858), ("src/base.ml", 540, 16852, 16872), 0), 0, Tag1 ("Base", 222)), 0); (("string_sexp_grammar", 7222), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("string", 7214)), 0, (0)), 100000000, 0, -11824)], (0)), 100000000, 0, -11823), 0, (("src/base.ml", 541, 16922, 16929), ("src/base.ml", 541, 16922, 16948), 0), 0, Tag1 ("Base", 223)), 0); Tag1 (("bytes", 7223), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Bytes", 7041)), "t"), 0, (0)), 100000000, 0, -11822)), 0, 0, 0, 0, (("src/base.ml", 545, 17020, 17022), ("src/base.ml", 545, 17020, 17108), 0), [(("deriving_inline", (("src/base.ml", 545, 17020, 17046), ("src/base.ml", 545, 17020, 17061), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 545, 17020, 17062), ("src/base.ml", 545, 17020, 17069), 0))), (("src/base.ml", 545, 17020, 17062), ("src/base.ml", 545, 17020, 17069), 0), 0, 0); (((("equal"), (("src/base.ml", 545, 17020, 17071), ("src/base.ml", 545, 17020, 17076), 0))), (("src/base.ml", 545, 17020, 17071), ("src/base.ml", 545, 17020, 17076), 0), 0, 0); (((("globalize"), (("src/base.ml", 545, 17020, 17078), ("src/base.ml", 545, 17020, 17087), 0))), (("src/base.ml", 545, 17020, 17078), ("src/base.ml", 545, 17020, 17087), 0), 0, 0); (((("sexp"), (("src/base.ml", 545, 17020, 17089), ("src/base.ml", 545, 17020, 17093), 0))), (("src/base.ml", 545, 17020, 17089), ("src/base.ml", 545, 17020, 17093), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 545, 17020, 17095), ("src/base.ml", 545, 17020, 17107), 0))), (("src/base.ml", 545, 17020, 17095), ("src/base.ml", 545, 17020, 17107), 0), 0, 0)]), (("src/base.ml", 545, 17020, 17062), ("src/base.ml", 545, 17020, 17107), 0), 0, 0)], (("src/base.ml", 545, 17020, 17062), ("src/base.ml", 545, 17020, 17107), 0))]), (("src/base.ml", 545, 17020, 17043), ("src/base.ml", 545, 17020, 17108), 0))], 0, 0, Tag1 ("Base", 224)), 1, 0); (("compare_bytes", 7224), ((Tag1 (0, (Tag3 ((("bytes", 7223)), 0, (0)), 100000000, 0, -11821), (Tag1 (0, (Tag3 ((("bytes", 7223)), 0, (0)), 100000000, 0, -11820), (Tag3 ((("int", 7155)), 0, (0)), 100000000, 0, -11819), 0), 100000000, 0, -11818), 0), 100000000, 0, -11817), 0, (("src/base.ml", 547, 17110, 17116), ("src/base.ml", 547, 17110, 17129), 0), 0, Tag1 ("Base", 225)), 0); (("equal_bytes", 7225), ((Tag1 (0, (Tag3 ((("bytes", 7223)), 0, (0)), 100000000, 0, -11816), (Tag1 (0, (Tag3 ((("bytes", 7223)), 0, (0)), 100000000, 0, -11815), (Tag3 ((("bool", 7126)), 0, (0)), 100000000, 0, -11814), 0), 100000000, 0, -11813), 0), 100000000, 0, -11812), 0, (("src/base.ml", 548, 17172, 17178), ("src/base.ml", 548, 17172, 17189), 0), 0, Tag1 ("Base", 226)), 0); (("globalize_bytes", 7226), ((Tag1 (0, (Tag3 ((("bytes", 7223)), 0, (0)), 100000000, 0, -11811), (Tag3 ((("bytes", 7223)), 0, (0)), 100000000, 0, -11810), 0), 100000000, 0, -11809), 0, (("src/base.ml", 550, 17232, 17239), ("src/base.ml", 550, 17232, 17254), 0), 0, Tag1 ("Base", 227)), 0); (("bytes_of_sexp", 7227), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -11808), (Tag3 ((("bytes", 7223)), 0, (0)), 100000000, 0, -11807), 0), 100000000, 0, -11806), 0, (("src/base.ml", 554, 17352, 17358), ("src/base.ml", 554, 17352, 17371), 0), 0, Tag1 ("Base", 228)), 0); (("sexp_of_bytes", 7228), ((Tag1 (0, (Tag3 ((("bytes", 7223)), 0, (0)), 100000000, 0, -11805), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -11804), 0), 100000000, 0, -11803), 0, (("src/base.ml", 555, 17419, 17425), ("src/base.ml", 555, 17419, 17438), 0), 0, Tag1 ("Base", 229)), 0); (("bytes_sexp_grammar", 7229), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("bytes", 7223)), 0, (0)), 100000000, 0, -11802)], (0)), 100000000, 0, -11801), 0, (("src/base.ml", 556, 17486, 17493), ("src/base.ml", 556, 17486, 17511), 0), 0, Tag1 ("Base", 230)), 0); Tag1 (("unit", 7230), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Unit", 7107)), "t"), 0, (0)), 100000000, 0, -11800)), 0, 0, 0, 0, (("src/base.ml", 560, 17581, 17583), ("src/base.ml", 561, 17602, 17675), 0), [(("deriving_inline", (("src/base.ml", 561, 17602, 17607), ("src/base.ml", 561, 17602, 17622), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 561, 17602, 17623), ("src/base.ml", 561, 17602, 17630), 0))), (("src/base.ml", 561, 17602, 17623), ("src/base.ml", 561, 17602, 17630), 0), 0, 0); (((("equal"), (("src/base.ml", 561, 17602, 17632), ("src/base.ml", 561, 17602, 17637), 0))), (("src/base.ml", 561, 17602, 17632), ("src/base.ml", 561, 17602, 17637), 0), 0, 0); (((("globalize"), (("src/base.ml", 561, 17602, 17639), ("src/base.ml", 561, 17602, 17648), 0))), (("src/base.ml", 561, 17602, 17639), ("src/base.ml", 561, 17602, 17648), 0), 0, 0); (((("hash"), (("src/base.ml", 561, 17602, 17650), ("src/base.ml", 561, 17602, 17654), 0))), (("src/base.ml", 561, 17602, 17650), ("src/base.ml", 561, 17602, 17654), 0), 0, 0); (((("sexp"), (("src/base.ml", 561, 17602, 17656), ("src/base.ml", 561, 17602, 17660), 0))), (("src/base.ml", 561, 17602, 17656), ("src/base.ml", 561, 17602, 17660), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 561, 17602, 17662), ("src/base.ml", 561, 17602, 17674), 0))), (("src/base.ml", 561, 17602, 17662), ("src/base.ml", 561, 17602, 17674), 0), 0, 0)]), (("src/base.ml", 561, 17602, 17623), ("src/base.ml", 561, 17602, 17674), 0), 0, 0)], (("src/base.ml", 561, 17602, 17623), ("src/base.ml", 561, 17602, 17674), 0))]), (("src/base.ml", 561, 17602, 17604), ("src/base.ml", 561, 17602, 17675), 0))], 1, 0, Tag1 ("Base", 231)), 1, 0); (("compare_unit", 7231), ((Tag1 (0, (Tag3 ((("unit", 7230)), 0, (0)), 100000000, 0, -11799), (Tag1 (0, (Tag3 ((("unit", 7230)), 0, (0)), 100000000, 0, -11798), (Tag3 ((("int", 7155)), 0, (0)), 100000000, 0, -11797), 0), 100000000, 0, -11796), 0), 100000000, 0, -11795), 0, (("src/base.ml", 563, 17677, 17683), ("src/base.ml", 563, 17677, 17695), 0), 0, Tag1 ("Base", 232)), 0); (("equal_unit", 7232), ((Tag1 (0, (Tag3 ((("unit", 7230)), 0, (0)), 100000000, 0, -11794), (Tag1 (0, (Tag3 ((("unit", 7230)), 0, (0)), 100000000, 0, -11793), (Tag3 ((("bool", 7126)), 0, (0)), 100000000, 0, -11792), 0), 100000000, 0, -11791), 0), 100000000, 0, -11790), 0, (("src/base.ml", 564, 17735, 17741), ("src/base.ml", 564, 17735, 17751), 0), 0, Tag1 ("Base", 233)), 0); (("globalize_unit", 7233), ((Tag1 (0, (Tag3 ((("unit", 7230)), 0, (0)), 100000000, 0, -11789), (Tag3 ((("unit", 7230)), 0, (0)), 100000000, 0, -11788), 0), 100000000, 0, -11787), 0, (("src/base.ml", 566, 17791, 17798), ("src/base.ml", 566, 17791, 17812), 0), 0, Tag1 ("Base", 234)), 0); (("hash_fold_unit", 7234), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -11786), (Tag1 (0, (Tag3 ((("unit", 7230)), 0, (0)), 100000000, 0, -11785), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -11784), 0), 100000000, 0, -11783), 0), 100000000, 0, -11782), 0, (("src/base.ml", 570, 17905, 17912), ("src/base.ml", 570, 17905, 17926), 0), 0, Tag1 ("Base", 235)), 0); (("hash_unit", 7235), ((Tag1 (0, (Tag3 ((("unit", 7230)), 0, (0)), 100000000, 0, -11781), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "hash_value"), 0, (0)), 100000000, 0, -11780), 0), 100000000, 0, -11779), 0, (("src/base.ml", 575, 18034, 18041), ("src/base.ml", 575, 18034, 18050), 0), 0, Tag1 ("Base", 236)), 0); (("unit_of_sexp", 7236), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -11778), (Tag3 ((("unit", 7230)), 0, (0)), 100000000, 0, -11777), 0), 100000000, 0, -11776), 0, (("src/base.ml", 580, 18151, 18157), ("src/base.ml", 580, 18151, 18169), 0), 0, Tag1 ("Base", 239)), 0); (("sexp_of_unit", 7237), ((Tag1 (0, (Tag3 ((("unit", 7230)), 0, (0)), 100000000, 0, -11775), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -11774), 0), 100000000, 0, -11773), 0, (("src/base.ml", 581, 18215, 18221), ("src/base.ml", 581, 18215, 18233), 0), 0, Tag1 ("Base", 240)), 0); (("unit_sexp_grammar", 7238), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("unit", 7230)), 0, (0)), 100000000, 0, -11772)], (0)), 100000000, 0, -11771), 0, (("src/base.ml", 582, 18279, 18286), ("src/base.ml", 582, 18279, 18303), 0), 0, Tag1 ("Base", 241)), 0); Tag1 (("format", 7239), ([((("a")), 100000000, 0, -11768); ((("b")), 100000000, 0, -11769); ((("c")), 100000000, 0, -11770)], 3, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "format"), [((("a")), 100000000, 0, -11768); ((("b")), 100000000, 0, -11769); ((("c")), 100000000, 0, -11770)], (0)), 100000000, 0, -11767)), [63; 15; 63], [0; 0; 0], 0, 0, (("src/base.ml", 588, 18394, 18396), ("src/base.ml", 588, 18394, 18449), 0), 0, 0, 0, Tag1 ("Base", 242)), 0, 0); Tag1 (("format4", 7240), ([((("a")), 100000000, 0, -11763); ((("b")), 100000000, 0, -11764); ((("c")), 100000000, 0, -11765); ((("d")), 100000000, 0, -11766)], 4, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "format4"), [((("a")), 100000000, 0, -11763); ((("b")), 100000000, 0, -11764); ((("c")), 100000000, 0, -11765); ((("d")), 100000000, 0, -11766)], (0)), 100000000, 0, -11762)), [63; 15; 63; 15], [0; 0; 0; 0], 0, 0, (("src/base.ml", 589, 18450, 18452), ("src/base.ml", 589, 18450, 18515), 0), 0, 0, 0, Tag1 ("Base", 243)), 0, 0); Tag1 (("format6", 7241), ([((("a")), 100000000, 0, -11756); ((("b")), 100000000, 0, -11757); ((("c")), 100000000, 0, -11758); ((("d")), 100000000, 0, -11759); ((("e")), 100000000, 0, -11760); ((("f")), 100000000, 0, -11761)], 6, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "format6"), [((("a")), 100000000, 0, -11756); ((("b")), 100000000, 0, -11757); ((("c")), 100000000, 0, -11758); ((("d")), 100000000, 0, -11759); ((("e")), 100000000, 0, -11760); ((("f")), 100000000, 0, -11761)], (0)), 100000000, 0, -11755)), [63; 15; 15; 63; 15; 15], [0; 0; 0; 0; 0; 0], 0, 0, (("src/base.ml", 590, 18516, 18518), ("src/base.ml", 590, 18516, 18597), 0), 0, 0, 0, Tag1 ("Base", 244)), 0, 0); (("@", 7242), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__List")), "t"), [((("a")), 100000000, 0, -11752)], (0)), 100000000, 0, -11754), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__List")), "t"), [((("a")), 100000000, 0, -11752)], (0)), 100000000, 0, -11753), (Tag3 (Tag1 ((Tag2 ("Base__List")), "t"), [((("a")), 100000000, 0, -11752)], (0)), 100000000, 0, -11751), 0), 100000000, 0, -11750), 0), 100000000, 0, -11749), 0, (("src/list.mli", 506, 20352, 20354), ("src/list.mli", 506, 20352, 20386), 0), 0, Tag1 ("Base__List", 124)), 0); (("+", 7243), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11748), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11747), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11746), 0), 100000000, 0, -11745), 0), 100000000, 0, -11744), (("%addint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 324, 9805, 9809), ("src/int_intf.ml", 324, 9805, 9877), 0), 0, Tag1 ("Base__Int_intf", 115)), 0); (("-", 7244), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11743), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11742), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11741), 0), 100000000, 0, -11740), 0), 100000000, 0, -11739), (("%subint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 325, 9878, 9882), ("src/int_intf.ml", 325, 9878, 9950), 0), 0, Tag1 ("Base__Int_intf", 116)), 0); (("*", 7245), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11738), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11737), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11736), 0), 100000000, 0, -11735), 0), 100000000, 0, -11734), (("%mulint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 326, 9951, 9955), ("src/int_intf.ml", 326, 9951, 10023), 0), 0, Tag1 ("Base__Int_intf", 117)), 0); (("/", 7246), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11733), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11732), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11731), 0), 100000000, 0, -11730), 0), 100000000, 0, -11729), (("%divint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 327, 10024, 10028), ("src/int_intf.ml", 327, 10024, 10096), 0), 0, Tag1 ("Base__Int_intf", 118)), 0); (("~-", 7247), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11728), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11727), 0), 100000000, 0, -11726), (("%negint", 1, 1, "", [0], 0)), (("src/int_intf.ml", 328, 10097, 10101), ("src/int_intf.ml", 328, 10097, 10151), 0), 0, Tag1 ("Base__Int_intf", 119)), 0); (("**", 7248), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11725), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11724), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11723), 0), 100000000, 0, -11722), 0), 100000000, 0, -11721), 0, (("src/int_intf.ml", 329, 10152, 10156), ("src/int_intf.ml", 329, 10152, 10180), 0), 0, Tag1 ("Base__Int_intf", 120)), 0); (("land", 7249), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11720), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11719), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11718), 0), 100000000, 0, -11717), 0), 100000000, 0, -11716), (("%andint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 336, 10657, 10661), ("src/int_intf.ml", 336, 10657, 10732), 0), 0, Tag1 ("Base__Int_intf", 127)), 0); (("lor", 7250), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11715), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11714), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11713), 0), 100000000, 0, -11712), 0), 100000000, 0, -11711), (("%orint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 337, 10733, 10737), ("src/int_intf.ml", 337, 10733, 10806), 0), 0, Tag1 ("Base__Int_intf", 128)), 0); (("lxor", 7251), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11710), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11709), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11708), 0), 100000000, 0, -11707), 0), 100000000, 0, -11706), (("%xorint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 338, 10807, 10811), ("src/int_intf.ml", 338, 10807, 10882), 0), 0, Tag1 ("Base__Int_intf", 129)), 0); (("lnot", 7252), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11705), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11704), 0), 100000000, 0, -11703), 0, (("src/int_intf.ml", 339, 10883, 10887), ("src/int_intf.ml", 339, 10883, 10904), 0), 0, Tag1 ("Base__Int_intf", 130)), 0); (("abs", 7253), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11702), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11701), 0), 100000000, 0, -11700), 0, (("src/int_intf.ml", 340, 10905, 10909), ("src/int_intf.ml", 340, 10905, 10925), 0), 0, Tag1 ("Base__Int_intf", 131)), 0); (("neg", 7254), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11699), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11698), 0), 100000000, 0, -11697), (("%negint", 1, 1, "", [0], 0)), (("src/int_intf.ml", 341, 10926, 10930), ("src/int_intf.ml", 341, 10926, 10977), 0), 0, Tag1 ("Base__Int_intf", 132)), 0); (("zero", 7255), ((Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11696), 0, (("src/int_intf.ml", 342, 10978, 10982), ("src/int_intf.ml", 342, 10978, 10994), 0), 0, Tag1 ("Base__Int_intf", 133)), 0); (("%", 7256), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11695), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11694), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11693), 0), 100000000, 0, -11692), 0), 100000000, 0, -11691), 0, (("src/int_intf.ml", 343, 10995, 10999), ("src/int_intf.ml", 343, 10995, 11022), 0), 0, Tag1 ("Base__Int_intf", 134)), 0); (("/%", 7257), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11690), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11689), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11688), 0), 100000000, 0, -11687), 0), 100000000, 0, -11686), 0, (("src/int_intf.ml", 344, 11023, 11027), ("src/int_intf.ml", 344, 11023, 11051), 0), 0, Tag1 ("Base__Int_intf", 135)), 0); (("//", 7258), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11685), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11684), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -11683), 0), 100000000, 0, -11682), 0), 100000000, 0, -11681), 0, (("src/int_intf.ml", 345, 11052, 11056), ("src/int_intf.ml", 345, 11052, 11084), 0), 0, Tag1 ("Base__Int_intf", 136)), 0); (("lsl", 7259), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11680), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11679), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11678), 0), 100000000, 0, -11677), 0), 100000000, 0, -11676), (("%lslint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 346, 11085, 11089), ("src/int_intf.ml", 346, 11085, 11161), 0), 0, Tag1 ("Base__Int_intf", 137)), 0); (("asr", 7260), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11675), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11674), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11673), 0), 100000000, 0, -11672), 0), 100000000, 0, -11671), (("%asrint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 347, 11162, 11166), ("src/int_intf.ml", 347, 11162, 11238), 0), 0, Tag1 ("Base__Int_intf", 138)), 0); (("lsr", 7261), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11670), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11669), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -11668), 0), 100000000, 0, -11667), 0), 100000000, 0, -11666), (("%lsrint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 348, 11239, 11243), ("src/int_intf.ml", 348, 11239, 11315), 0), 0, Tag1 ("Base__Int_intf", 139)), 0); (("=", 7262), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11665), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11664), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -11663), 0), 100000000, 0, -11662), 0), 100000000, 0, -11661), (("%equal", 2, 1, "", [0; 0], 0)), (("src/import0.ml", 83, 3143, 3145), ("src/import0.ml", 83, 3143, 3219), 0), 0, Tag1 ("Base__Import0", 25)), 0); (("<>", 7263), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11660), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11659), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -11658), 0), 100000000, 0, -11657), 0), 100000000, 0, -11656), (("%notequal", 2, 1, "", [0; 0], 0)), (("src/import0.ml", 84, 3220, 3222), ("src/import0.ml", 84, 3220, 3300), 0), 0, Tag1 ("Base__Import0", 26)), 0); (("<", 7264), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11655), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11654), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -11653), 0), 100000000, 0, -11652), 0), 100000000, 0, -11651), (("%lessthan", 2, 1, "", [0; 0], 0)), (("src/import0.ml", 85, 3301, 3303), ("src/import0.ml", 85, 3301, 3380), 0), 0, Tag1 ("Base__Import0", 27)), 0); ((">", 7265), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11650), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11649), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -11648), 0), 100000000, 0, -11647), 0), 100000000, 0, -11646), (("%greaterthan", 2, 1, "", [0; 0], 0)), (("src/import0.ml", 86, 3381, 3383), ("src/import0.ml", 86, 3381, 3463), 0), 0, Tag1 ("Base__Import0", 28)), 0); (("<=", 7266), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11645), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11644), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -11643), 0), 100000000, 0, -11642), 0), 100000000, 0, -11641), (("%lessequal", 2, 1, "", [0; 0], 0)), (("src/import0.ml", 87, 3464, 3466), ("src/import0.ml", 87, 3464, 3545), 0), 0, Tag1 ("Base__Import0", 29)), 0); ((">=", 7267), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11640), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11639), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -11638), 0), 100000000, 0, -11637), 0), 100000000, 0, -11636), (("%greaterequal", 2, 1, "", [0; 0], 0)), (("src/import0.ml", 88, 3546, 3548), ("src/import0.ml", 88, 3546, 3630), 0), 0, Tag1 ("Base__Import0", 30)), 0); (("compare", 7268), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11635), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11634), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11633), 0), 100000000, 0, -11632), 0), 100000000, 0, -11631), (("%compare", 2, 1, "", [0; 0], 0)), (("src/import0.ml", 89, 3631, 3633), ("src/import0.ml", 89, 3631, 3710), 0), 0, Tag1 ("Base__Import0", 31)), 0); (("equal", 7269), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11630), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11629), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -11628), 0), 100000000, 0, -11627), 0), 100000000, 0, -11626), (("%equal", 2, 1, "", [0; 0], 0)), (("src/import0.ml", 90, 3711, 3713), ("src/import0.ml", 90, 3711, 3787), 0), 0, Tag1 ("Base__Import0", 32)), 0); (("ascending", 7270), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11625), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11624), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11623), 0), 100000000, 0, -11622), 0), 100000000, 0, -11621), 0, (("src/import0.ml", 92, 3789, 3795), ("src/import0.ml", 92, 3789, 3804), 0), 0, Tag1 ("Base__Import0", 33)), 0); (("descending", 7271), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11620), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11619), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11618), 0), 100000000, 0, -11617), 0), 100000000, 0, -11616), 0, (("src/import0.ml", 93, 3831, 3837), ("src/import0.ml", 93, 3831, 3847), 0), 0, Tag1 ("Base__Import0", 36)), 0); (("max", 7272), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11615), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11614), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11614), 0), 100000000, 0, -11613), 0), 100000000, 0, -11612), 0, (("src/import0.ml", 94, 3874, 3880), ("src/import0.ml", 94, 3874, 3883), 0), 0, Tag1 ("Base__Import0", 39)), 0); (("min", 7273), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11611), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11610), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11610), 0), 100000000, 0, -11609), 0), 100000000, 0, -11608), 0, (("src/import0.ml", 95, 3924, 3930), ("src/import0.ml", 95, 3924, 3933), 0), 0, Tag1 ("Base__Import0", 42)), 0); (("+.", 7274), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -11607), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -11606), (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -11605), 0), 100000000, 0, -11604), 0), 100000000, 0, -11603), 0, (("src/float.mli", 338, 10833, 10835), ("src/float.mli", 338, 10833, 10859), 0), 0, Tag1 ("Base__Float", 99)), 0); (("-.", 7275), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -11602), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -11601), (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -11600), 0), 100000000, 0, -11599), 0), 100000000, 0, -11598), 0, (("src/float.mli", 339, 10860, 10862), ("src/float.mli", 339, 10860, 10886), 0), 0, Tag1 ("Base__Float", 100)), 0); (("*.", 7276), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -11597), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -11596), (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -11595), 0), 100000000, 0, -11594), 0), 100000000, 0, -11593), 0, (("src/float.mli", 340, 10887, 10889), ("src/float.mli", 340, 10887, 10913), 0), 0, Tag1 ("Base__Float", 101)), 0); (("/.", 7277), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -11592), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -11591), (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -11590), 0), 100000000, 0, -11589), 0), 100000000, 0, -11588), 0, (("src/float.mli", 341, 10914, 10916), ("src/float.mli", 341, 10914, 10940), 0), 0, Tag1 ("Base__Float", 102)), 0); (("%.", 7278), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -11587), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -11586), (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -11585), 0), 100000000, 0, -11584), 0), 100000000, 0, -11583), 0, (("src/float.mli", 342, 10941, 10943), ("src/float.mli", 342, 10941, 10967), 0), 0, Tag1 ("Base__Float", 103)), 0); (("**.", 7279), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -11582), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -11581), (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -11580), 0), 100000000, 0, -11579), 0), 100000000, 0, -11578), 0, (("src/float.mli", 343, 10968, 10970), ("src/float.mli", 343, 10968, 10995), 0), 0, Tag1 ("Base__Float", 104)), 0); (("~-.", 7280), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -11577), (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -11576), 0), 100000000, 0, -11575), 0, (("src/float.mli", 344, 10996, 10998), ("src/float.mli", 344, 10996, 11018), 0), 0, Tag1 ("Base__Float", 105)), 0); (("|>", 7281), ((Tag1 (0, ((("a")), 100000000, 0, -11574), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -11574), ((("b")), 100000000, 0, -11572), 0), 100000000, 0, -11573), ((("b")), 100000000, 0, -11572), 0), 100000000, 0, -11571), 0), 100000000, 0, -11570), (("%revapply", 2, 1, "", [0; 0], 0)), (("src/base.ml", 608, 18957, 18959), ("src/base.ml", 608, 18957, 19027), 0), 0, Tag1 ("Base", 245)), 0); (("@@", 7282), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -11568), ((("b")), 100000000, 0, -11567), 0), 100000000, 0, -11569), (Tag1 (0, ((("a")), 100000000, 0, -11568), ((("b")), 100000000, 0, -11567), 0), 100000000, 0, -11566), 0), 100000000, 0, -11565), (("%apply", 2, 1, "", [0; 0], 0)), (("src/base.ml", 611, 19104, 19106), ("src/base.ml", 611, 19104, 19171), 0), 0, Tag1 ("Base", 246)), 0); (("&&", 7283), ((Tag1 (0, (Tag3 ((("bool", 7126)), 0, (0)), 100000000, 0, -11564), (Tag1 (0, (Tag3 ((("bool", 7126)), 0, (0)), 100000000, 0, -11563), (Tag3 ((("bool", 7126)), 0, (0)), 100000000, 0, -11562), 0), 100000000, 0, -11561), 0), 100000000, 0, -11560), (("%sequand", 2, 1, "", [0; 0], 0)), (("src/base.ml", 616, 19276, 19278), ("src/base.ml", 616, 19276, 19357), 0), 0, Tag1 ("Base", 247)), 0); (("||", 7284), ((Tag1 (0, (Tag3 ((("bool", 7126)), 0, (0)), 100000000, 0, -11559), (Tag1 (0, (Tag3 ((("bool", 7126)), 0, (0)), 100000000, 0, -11558), (Tag3 ((("bool", 7126)), 0, (0)), 100000000, 0, -11557), 0), 100000000, 0, -11556), 0), 100000000, 0, -11555), (("%sequor", 2, 1, "", [0; 0], 0)), (("src/base.ml", 617, 19358, 19360), ("src/base.ml", 617, 19358, 19438), 0), 0, Tag1 ("Base", 248)), 0); (("not", 7285), ((Tag1 (0, (Tag3 ((("bool", 7126)), 0, (0)), 100000000, 0, -11554), (Tag3 ((("bool", 7126)), 0, (0)), 100000000, 0, -11553), 0), 100000000, 0, -11552), (("%boolnot", 1, 1, "", [0], 0)), (("src/base.ml", 618, 19439, 19441), ("src/base.ml", 618, 19439, 19495), 0), 0, Tag1 ("Base", 249)), 0); (("ignore", 7286), ((Tag1 (0, ((0), 100000000, 0, -11551), (Tag3 ((("unit", 7230)), 0, (0)), 100000000, 0, -11550), 0), 100000000, 0, -11549), (("%ignore", 1, 1, "", [0], 0)), (("src/base.ml", 621, 19577, 19579), ("src/base.ml", 621, 19577, 19632), 0), 0, Tag1 ("Base", 250)), 0); (("^", 7287), ((Tag1 (0, (Tag3 (Tag1 ((("String", 7101)), "t"), 0, (0)), 100000000, 0, -11548), (Tag1 (0, (Tag3 (Tag1 ((("String", 7101)), "t"), 0, (0)), 100000000, 0, -11547), (Tag3 (Tag1 ((("String", 7101)), "t"), 0, (0)), 100000000, 0, -11546), 0), 100000000, 0, -11545), 0), 100000000, 0, -11544), 0, (("src/base.ml", 624, 19668, 19674), ("src/base.ml", 624, 19668, 19679), 0), 0, Tag1 ("Base", 251)), 0); (("!", 7288), ((Tag1 (0, (Tag3 ((("ref", 7207)), [((("a")), 100000000, 0, -11542)], (0)), 100000000, 0, -11543), ((("a")), 100000000, 0, -11542), 0), 100000000, 0, -11541), (("%field0", 1, 1, "", [0], 0)), (("src/base.ml", 630, 19861, 19863), ("src/base.ml", 630, 19861, 19918), 0), 0, Tag1 ("Base", 252)), 0); (("ref", 7289), ((Tag1 (0, ((("a")), 100000000, 0, -11540), (Tag3 ((("ref", 7207)), [((("a")), 100000000, 0, -11540)], (0)), 100000000, 0, -11539), 0), 100000000, 0, -11538), (("%makemutable", 1, 1, "", [0], 0)), (("src/base.ml", 631, 19919, 19921), ("src/base.ml", 631, 19919, 19979), 0), 0, Tag1 ("Base", 253)), 0); ((":=", 7290), ((Tag1 (0, (Tag3 ((("ref", 7207)), [((("a")), 100000000, 0, -11536)], (0)), 100000000, 0, -11537), (Tag1 (0, ((("a")), 100000000, 0, -11536), (Tag3 ((("unit", 7230)), 0, (0)), 100000000, 0, -11535), 0), 100000000, 0, -11534), 0), 100000000, 0, -11533), (("%setfield0", 2, 1, "", [0; 0], 0)), (("src/base.ml", 632, 19980, 19982), ("src/base.ml", 632, 19980, 20049), 0), 0, Tag1 ("Base", 254)), 0); (("fst", 7291), ((Tag1 (0, (Tag2 ([((0), 100000000, 0, -11530); ((0), 100000000, 0, -11532)]), 100000000, 0, -11531), ((0), 100000000, 0, -11530), 0), 100000000, 0, -11529), 0, (("src/base.ml", 636, 20077, 20083), ("src/base.ml", 636, 20077, 20086), 0), 0, Tag1 ("Base", 255)), 0); (("snd", 7292), ((Tag1 (0, (Tag2 ([((0), 100000000, 0, -11528); ((0), 100000000, 0, -11526)]), 100000000, 0, -11527), ((0), 100000000, 0, -11526), 0), 100000000, 0, -11525), 0, (("src/base.ml", 637, 20093, 20099), ("src/base.ml", 637, 20093, 20102), 0), 0, Tag1 ("Base", 256)), 0); (("raise", 7293), ((Tag1 (0, (Tag3 ((("exn", 7144)), 0, (0)), 100000000, 0, -11524), ((0), 100000000, 0, -11523), 0), 100000000, 0, -11522), (("%raise", 1, 1, "", [0], 0)), (("src/base.ml", 642, 20226, 20228), ("src/base.ml", 642, 20226, 20264), 0), 0, Tag1 ("Base", 257)), 0); (("failwith", 7294), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -11521), ((0), 100000000, 0, -11520), 0), 100000000, 0, -11519), 0, (("src/base.ml", 644, 20266, 20272), ("src/base.ml", 644, 20266, 20280), 0), 0, Tag1 ("Base", 258)), 0); (("invalid_arg", 7295), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -11518), ((0), 100000000, 0, -11517), 0), 100000000, 0, -11516), 0, (("src/base.ml", 645, 20292, 20298), ("src/base.ml", 645, 20292, 20309), 0), 0, Tag1 ("Base", 259)), 0); (("raise_s", 7296), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -11515), ((0), 100000000, 0, -11514), 0), 100000000, 0, -11513), 0, (("src/base.ml", 646, 20324, 20330), ("src/base.ml", 646, 20324, 20337), 0), 0, Tag1 ("Base", 260)), 0); (("phys_equal", 7297), ((Tag1 (0, ((("a")), 100000000, 0, -11512), (Tag1 (0, ((("a")), 100000000, 0, -11512), (Tag3 ((("bool", 7126)), 0, (0)), 100000000, 0, -11511), 0), 100000000, 0, -11510), 0), 100000000, 0, -11509), (("%eq", 2, 1, "", [0; 0], 0)), (("src/base.ml", 650, 20370, 20372), ("src/base.ml", 650, 20370, 20446), 0), 0, Tag1 ("Base", 261)), 0); (("force", 7298), ((Tag1 (0, (Tag3 (Tag1 ((("Lazy", 7072)), "t"), [((("a")), 100000000, 0, -11507)], (0)), 100000000, 0, -11508), ((("a")), 100000000, 0, -11507), 0), 100000000, 0, -11506), (("%lazy_force", 1, 1, "", [0], 0)), (("src/base.ml", 651, 20447, 20449), ("src/base.ml", 651, 20447, 20511), 0), 0, Tag1 ("Base", 262)), 0); Tag3 (("Continue_or_stop", 7299), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Container_intf")), "Export"), "Continue_or_stop")), 0, (("src/container_intf.ml", 16, 623, 625), ("src/container_intf.ml", 20, 722, 727), 0), Tag1 ("Base__Container_intf", 3)), 0, 0); Tag2 (("Not_found_s", 7300), ((Tag3 ("exn", 7)), 0, ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -11505)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Base", 264)), 2, 0); Tag3 (("Ast_builder", 7301), 1, (Tag3 (Tag1 ((Tag2 ("Ppxlib__")), "Ast_builder")), 0, (("src/ppxlib.ml", 21, 888, 888), ("src/ppxlib.ml", 21, 888, 920), 0), Tag1 ("Ppxlib", 0)), 0, 0); Tag3 (("Ast_pattern", 7302), 1, (Tag3 (Tag1 ((Tag2 ("Ppxlib__")), "Ast_pattern")), 0, (("src/ppxlib.ml", 22, 921, 921), ("src/ppxlib.ml", 22, 921, 953), 0), Tag1 ("Ppxlib", 1)), 0, 0); Tag3 (("Ast_traverse", 7303), 1, (Tag3 (Tag1 ((Tag2 ("Ppxlib__")), "Ast_traverse")), 0, (("src/ppxlib.ml", 23, 954, 954), ("src/ppxlib.ml", 23, 954, 988), 0), Tag1 ("Ppxlib", 2)), 0, 0); Tag3 (("Context_free", 7304), 1, (Tag3 (Tag1 ((Tag2 ("Ppxlib__")), "Context_free")), 0, (("src/ppxlib.ml", 27, 1025, 1025), ("src/ppxlib.ml", 27, 1025, 1059), 0), Tag1 ("Ppxlib", 3)), 0, 0); Tag3 (("Deriving", 7305), 1, (Tag3 (Tag1 ((Tag2 ("Ppxlib__")), "Deriving")), 0, (("src/ppxlib.ml", 28, 1060, 1060), ("src/ppxlib.ml", 28, 1060, 1086), 0), Tag1 ("Ppxlib", 4)), 0, 0); Tag3 (("Extension", 7306), 1, (Tag3 (Tag1 ((Tag2 ("Ppxlib__")), "Extension")), 0, (("src/ppxlib.ml", 29, 1087, 1087), ("src/ppxlib.ml", 29, 1087, 1115), 0), Tag1 ("Ppxlib", 5)), 0, 0); Tag3 (("Expansion_context", 7307), 1, (Tag3 (Tag1 ((Tag2 ("Ppxlib__")), "Expansion_context")), 0, (("src/ppxlib.ml", 30, 1116, 1116), ("src/ppxlib.ml", 30, 1116, 1160), 0), Tag1 ("Ppxlib", 6)), 0, 0); Tag3 (("Code_path", 7308), 1, (Tag3 (Tag1 ((Tag2 ("Ppxlib__")), "Code_path")), 0, (("src/ppxlib.ml", 31, 1161, 1161), ("src/ppxlib.ml", 31, 1161, 1189), 0), Tag1 ("Ppxlib", 7)), 0, 0); Tag3 (("Expansion_helpers", 7309), 1, (Tag3 (Tag1 ((Tag2 ("Ppxlib__")), "Expansion_helpers")), 0, (("src/ppxlib.ml", 35, 1217, 1217), ("src/ppxlib.ml", 35, 1217, 1261), 0), Tag1 ("Ppxlib", 8)), 0, 0); Tag3 (("Merlin_helpers", 7310), 1, (Tag3 (Tag1 ((Tag2 ("Ppxlib__")), "Merlin_helpers")), 0, (("src/ppxlib.ml", 36, 1262, 1262), ("src/ppxlib.ml", 36, 1262, 1300), 0), Tag1 ("Ppxlib", 9)), 0, 0); Tag3 (("Spellcheck", 7311), 1, (Tag3 (Tag1 ((Tag2 ("Ppxlib__")), "Spellcheck")), 0, (("src/ppxlib.ml", 37, 1301, 1301), ("src/ppxlib.ml", 37, 1301, 1331), 0), Tag1 ("Ppxlib", 10)), 0, 0); Tag3 (("Keyword", 7312), 1, (Tag3 (Tag1 ((Tag2 ("Ppxlib__")), "Keyword")), 0, (("src/ppxlib.ml", 38, 1332, 1332), ("src/ppxlib.ml", 38, 1332, 1356), 0), Tag1 ("Ppxlib", 11)), 0, 0); Tag3 (("Driver", 7313), 1, (Tag3 (Tag1 ((Tag2 ("Ppxlib__")), "Driver")), 0, (("src/ppxlib.ml", 42, 1393, 1393), ("src/ppxlib.ml", 42, 1393, 1415), 0), Tag1 ("Ppxlib", 12)), 0, 0); Tag3 (("Caller_id", 7314), 1, (Tag3 (Tag1 ((Tag2 ("Ppxlib__")), "Caller_id")), 0, (("src/ppxlib.ml", 43, 1416, 1416), ("src/ppxlib.ml", 43, 1416, 1444), 0), Tag1 ("Ppxlib", 13)), 0, 0); Tag3 (("Ast_io", 7315), 1, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Utils"), "Ast_io"), "Read_bin")), 0, (("src/ppxlib.ml", 44, 1445, 1445), ("src/ppxlib.ml", 44, 1445, 1482), 0), Tag1 ("Ppxlib", 14)), 0, 0); Tag3 (("Attribute", 7316), 1, (Tag3 (Tag1 ((Tag2 ("Ppxlib__")), "Attribute")), 0, (("src/ppxlib.ml", 48, 1503, 1503), ("src/ppxlib.ml", 48, 1503, 1531), 0), Tag1 ("Ppxlib", 15)), 0, 0); Tag3 (("Reserved_namespaces", 7317), 1, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Name"), "Reserved_namespaces")), 0, (("src/ppxlib.ml", 49, 1532, 1532), ("src/ppxlib.ml", 49, 1532, 1585), 0), Tag1 ("Ppxlib", 16)), 0, 0); (("lident", 7318), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -11504), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Longident"), "t"), 0, (0)), 100000000, 0, -11503), 0), 100000000, 0, -11502), 0, (("src/common.mli", 5, 39, 39), ("src/common.mli", 5, 39, 73), 0), 0, Tag1 ("Ppxlib__Common", 0)), 0); (("core_type_of_type_declaration", 7319), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "type_declaration"), 0, (0)), 100000000, 0, -11501), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -11500), 0), 100000000, 0, -11499), 0, (("src/common.mli", 6, 74, 74), ("src/common.mli", 6, 74, 139), 0), 0, Tag1 ("Ppxlib__Common", 1)), 0); (("name_type_params_in_td_res", 7320), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "type_declaration"), 0, (0)), 100000000, 0, -11498), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "type_declaration"), 0, (0)), 100000000, 0, -11495); (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "NonEmptyList"), "t"), [(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Location"), "Error"), "t"), 0, (0)), 100000000, 0, -11497)], (0)), 100000000, 0, -11496)], (0)), 100000000, 0, -11494), 0), 100000000, 0, -11493), 0, (("src/common.mli", 8, 141, 141), ("src/common.mli", 9, 174, 254), 0), 0, Tag1 ("Ppxlib__Common", 2)), 0); (("name_type_params_in_td", 7321), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "type_declaration"), 0, (0)), 100000000, 0, -11492), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "type_declaration"), 0, (0)), 100000000, 0, -11491), 0), 100000000, 0, -11490), 0, (("src/common.mli", 11, 256, 256), ("src/common.mli", 11, 256, 321), 0), 0, Tag1 ("Ppxlib__Common", 3)), 0); (("combinator_type_of_type_declaration", 7322), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "type_declaration"), 0, (0)), 100000000, 0, -11489), (Tag1 (("f"), (Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Location"), "t"), 0, (0)), 100000000, 0, -11488), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -11487), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -11486), 0), 100000000, 0, -11485), 0), 100000000, 0, -11484), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -11483), 0), 100000000, 0, -11482), 0), 100000000, 0, -11481), 0, (("src/common.mli", 13, 323, 323), ("src/common.mli", 14, 365, 444), 0), 0, Tag1 ("Ppxlib__Common", 4)), 0); (("gen_symbol", 7323), ((Tag1 (Tag1 ("prefix"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -11480)], (0)), 100000000, 0, -11479), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11478), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -11477), 0), 100000000, 0, -11476), 0), 100000000, 0, -11475), 0, (("src/common.mli", 16, 446, 446), ("src/common.mli", 16, 446, 495), 0), 0, Tag1 ("Ppxlib__Common", 5)), 0); (("string_of_core_type", 7324), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -11474), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -11473), 0), 100000000, 0, -11472), 0, (("src/common.mli", 21, 609, 609), ("src/common.mli", 21, 609, 654), 0), 0, Tag1 ("Ppxlib__Common", 6)), 0); (("assert_no_attributes", 7325), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "attributes"), 0, (0)), 100000000, 0, -11471), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11470), 0), 100000000, 0, -11469), 0, (("src/common.mli", 22, 655, 655), ("src/common.mli", 22, 655, 700), 0), 0, Tag1 ("Ppxlib__Common", 7)), 0); (("assert_no_attributes_in", 7326), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Ast_traverse0"), "iter"), 0, (0)), 100000000, 0, -11468), 0, (("src/common.mli", 23, 701, 701), ("src/common.mli", 23, 701, 749), 0), 0, Tag1 ("Ppxlib__Common", 8)), 0); (("attributes_errors", 7327), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "attributes"), 0, (0)), 100000000, 0, -11467), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Location"), "Error"), "t"), 0, (0)), 100000000, 0, -11466)], (0)), 100000000, 0, -11465), 0), 100000000, 0, -11464), 0, (("src/common.mli", 24, 750, 750), ("src/common.mli", 24, 750, 809), 0), 0, Tag1 ("Ppxlib__Common", 9)), 0); (("collect_attributes_errors", 7328), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Ast_traverse0"), "fold"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Location"), "Error"), "t"), 0, (0)), 100000000, 0, -11463)], (0)), 100000000, 0, -11462)], (0)), 100000000, 0, -11461), 0, (("src/common.mli", 25, 810, 810), ("src/common.mli", 25, 810, 882), 0), 0, Tag1 ("Ppxlib__Common", 10)), 0); (("get_type_param_name_res", 7329), ((Tag1 (0, (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -11457); (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "variance"), 0, (0)), 100000000, 0, -11459); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "injectivity"), 0, (0)), 100000000, 0, -11460)]), 100000000, 0, -11458)]), 100000000, 0, -11456), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Loc"), "t"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -11453)], (0)), 100000000, 0, -11452); (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "NonEmptyList"), "t"), [(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Location"), "Error"), "t"), 0, (0)), 100000000, 0, -11455)], (0)), 100000000, 0, -11454)], (0)), 100000000, 0, -11451), 0), 100000000, 0, -11450), 0, (("src/common.mli", 27, 884, 884), ("src/common.mli", 29, 956, 1012), 0), 0, Tag1 ("Ppxlib__Common", 11)), 0); (("get_type_param_name", 7330), ((Tag1 (0, (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -11446); (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "variance"), 0, (0)), 100000000, 0, -11448); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "injectivity"), 0, (0)), 100000000, 0, -11449)]), 100000000, 0, -11447)]), 100000000, 0, -11445), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Loc"), "t"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -11444)], (0)), 100000000, 0, -11443), 0), 100000000, 0, -11442), 0, (("src/common.mli", 33, 1145, 1145), ("src/common.mli", 33, 1145, 1223), 0), 0, Tag1 ("Ppxlib__Common", 12)), 0); Tag5 (("type_is_recursive", 7331), (0, Tag2 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "rec_flag"), 0, (0)), 100000000, 0, -11441), Tag2 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "type_declaration"), 0, (0)), 100000000, 0, -11440)], (0)), 100000000, 0, -11439), Tag1 (((Tag4 ((Tag5 ("bool", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -11211)], (0)), 100000000, 0, -11210), 0), 100000000, 0, -11209), (Tag5 ("char", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -11200)], (0)), 100000000, 0, -11199), 0), 100000000, 0, -11198), (Tag5 ("int", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11049)], (0)), 100000000, 0, -11048), 0), 100000000, 0, -11047), (Tag5 ("list", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag9 (("a")), 100000000, 0, -11030)], (0)), 100000000, 0, -11034), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -11030)], (0)), 100000000, 0, -11033)], (0)), 100000000, 0, -11032), 0), 100000000, 0, -11031), [(Tag9 (("a")), 100000000, 0, -11030)]), 100000000, 0, -11029), (Tag5 ("option", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag9 (("a")), 100000000, 0, -10940)], (0)), 100000000, 0, -10944), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -10940)], (0)), 100000000, 0, -10943)], (0)), 100000000, 0, -10942), 0), 100000000, 0, -10941), [(Tag9 (("a")), 100000000, 0, -10940)]), 100000000, 0, -10939), (Tag5 ("string", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10882)], (0)), 100000000, 0, -10881), 0), 100000000, 0, -10880), (Tag5 ("position", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "position"), 0, (0)), 100000000, 0, -10918), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10917), 0), 100000000, 0, -10916), 0), 100000000, 0, -10915), (Tag5 ("location", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "location"), 0, (0)), 100000000, 0, -11020), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11019), 0), 100000000, 0, -11018), 0), 100000000, 0, -11017), (Tag5 ("location_stack", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "location_stack"), 0, (0)), 100000000, 0, -11016), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11015), 0), 100000000, 0, -11014), 0), 100000000, 0, -11013), (Tag5 ("loc", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -11022), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11028), 0), 100000000, 0, -11027), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "loc"), [(Tag9 (("a")), 100000000, 0, -11022)], (0)), 100000000, 0, -11026), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11025), 0), 100000000, 0, -11024), 0), 100000000, 0, -11023), [(Tag9 (("a")), 100000000, 0, -11022)]), 100000000, 0, -11021), (Tag5 ("longident", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "longident"), 0, (0)), 100000000, 0, -11012), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11011), 0), 100000000, 0, -11010), 0), 100000000, 0, -11009), (Tag5 ("longident_loc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "longident_loc"), 0, (0)), 100000000, 0, -11008), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11007), 0), 100000000, 0, -11006), 0), 100000000, 0, -11005), (Tag5 ("rec_flag", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "rec_flag"), 0, (0)), 100000000, 0, -10910), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10909), 0), 100000000, 0, -10908), 0), 100000000, 0, -10907), (Tag5 ("direction_flag", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "direction_flag"), 0, (0)), 100000000, 0, -11109), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11108), 0), 100000000, 0, -11107), 0), 100000000, 0, -11106), (Tag5 ("private_flag", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "private_flag"), 0, (0)), 100000000, 0, -10914), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10913), 0), 100000000, 0, -10912), 0), 100000000, 0, -10911), (Tag5 ("mutable_flag", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "mutable_flag"), 0, (0)), 100000000, 0, -10972), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10971), 0), 100000000, 0, -10970), 0), 100000000, 0, -10969), (Tag5 ("virtual_flag", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "virtual_flag"), 0, (0)), 100000000, 0, -10831), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10830), 0), 100000000, 0, -10829), 0), 100000000, 0, -10828), (Tag5 ("override_flag", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "override_flag"), 0, (0)), 100000000, 0, -10938), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10937), 0), 100000000, 0, -10936), 0), 100000000, 0, -10935), (Tag5 ("closed_flag", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "closed_flag"), 0, (0)), 100000000, 0, -11133), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11132), 0), 100000000, 0, -11131), 0), 100000000, 0, -11130), (Tag5 ("label", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "label"), 0, (0)), 100000000, 0, -11046), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11045), 0), 100000000, 0, -11044), 0), 100000000, 0, -11043), (Tag5 ("arg_label", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "arg_label"), 0, (0)), 100000000, 0, -11233), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11232), 0), 100000000, 0, -11231), 0), 100000000, 0, -11230), (Tag5 ("variance", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "variance"), 0, (0)), 100000000, 0, -10835), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10834), 0), 100000000, 0, -10833), 0), 100000000, 0, -10832), (Tag5 ("injectivity", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "injectivity"), 0, (0)), 100000000, 0, -11053), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11052), 0), 100000000, 0, -11051), 0), 100000000, 0, -11050), (Tag5 ("constant", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "constant"), 0, (0)), 100000000, 0, -11129), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11128), 0), 100000000, 0, -11127), 0), 100000000, 0, -11126), (Tag5 ("attribute", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "attribute"), 0, (0)), 100000000, 0, -11223), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11222), 0), 100000000, 0, -11221), 0), 100000000, 0, -11220), (Tag5 ("extension", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "extension"), 0, (0)), 100000000, 0, -11089), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11088), 0), 100000000, 0, -11087), 0), 100000000, 0, -11086), (Tag5 ("attributes", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "attributes"), 0, (0)), 100000000, 0, -11219), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11218), 0), 100000000, 0, -11217), 0), 100000000, 0, -11216), (Tag5 ("payload", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "payload"), 0, (0)), 100000000, 0, -10922), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10921), 0), 100000000, 0, -10920), 0), 100000000, 0, -10919), (Tag5 ("core_type", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "core_type"), 0, (0)), 100000000, 0, -11117), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11116), 0), 100000000, 0, -11115), 0), 100000000, 0, -11114), (Tag5 ("core_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "core_type_desc"), 0, (0)), 100000000, 0, -11113), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11112), 0), 100000000, 0, -11111), 0), 100000000, 0, -11110), (Tag5 ("package_type", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "package_type"), 0, (0)), 100000000, 0, -10934), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10933), 0), 100000000, 0, -10932), 0), 100000000, 0, -10931), (Tag5 ("row_field", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "row_field"), 0, (0)), 100000000, 0, -10902), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10901), 0), 100000000, 0, -10900), 0), 100000000, 0, -10899), (Tag5 ("row_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "row_field_desc"), 0, (0)), 100000000, 0, -10898), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10897), 0), 100000000, 0, -10896), 0), 100000000, 0, -10895), (Tag5 ("object_field", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "object_field"), 0, (0)), 100000000, 0, -10968), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10967), 0), 100000000, 0, -10966), 0), 100000000, 0, -10965), (Tag5 ("object_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "object_field_desc"), 0, (0)), 100000000, 0, -10964), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10963), 0), 100000000, 0, -10962), 0), 100000000, 0, -10961), (Tag5 ("pattern", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "pattern"), 0, (0)), 100000000, 0, -10930), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10929), 0), 100000000, 0, -10928), 0), 100000000, 0, -10927), (Tag5 ("pattern_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "pattern_desc"), 0, (0)), 100000000, 0, -10926), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10925), 0), 100000000, 0, -10924), 0), 100000000, 0, -10923), (Tag5 ("expression", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "expression"), 0, (0)), 100000000, 0, -11097), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11096), 0), 100000000, 0, -11095), 0), 100000000, 0, -11094), (Tag5 ("expression_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "expression_desc"), 0, (0)), 100000000, 0, -11093), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11092), 0), 100000000, 0, -11091), 0), 100000000, 0, -11090), (Tag5 ("case", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "case"), 0, (0)), 100000000, 0, -11208), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11207), 0), 100000000, 0, -11206), 0), 100000000, 0, -11205), (Tag5 ("letop", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "letop"), 0, (0)), 100000000, 0, -11038), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11037), 0), 100000000, 0, -11036), 0), 100000000, 0, -11035), (Tag5 ("binding_op", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "binding_op"), 0, (0)), 100000000, 0, -11215), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11214), 0), 100000000, 0, -11213), 0), 100000000, 0, -11212), (Tag5 ("value_description", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "value_description"), 0, (0)), 100000000, 0, -10839), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10838), 0), 100000000, 0, -10837), 0), 100000000, 0, -10836), (Tag5 ("type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "type_declaration"), 0, (0)), 100000000, 0, -10859), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10858), 0), 100000000, 0, -10857), 0), 100000000, 0, -10856), (Tag5 ("type_kind", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "type_kind"), 0, (0)), 100000000, 0, -10847), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10846), 0), 100000000, 0, -10845), 0), 100000000, 0, -10844), (Tag5 ("label_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "label_declaration"), 0, (0)), 100000000, 0, -11042), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11041), 0), 100000000, 0, -11040), 0), 100000000, 0, -11039), (Tag5 ("constructor_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "constructor_declaration"), 0, (0)), 100000000, 0, -11121), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11120), 0), 100000000, 0, -11119), 0), 100000000, 0, -11118), (Tag5 ("constructor_arguments", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "constructor_arguments"), 0, (0)), 100000000, 0, -11125), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11124), 0), 100000000, 0, -11123), 0), 100000000, 0, -11122), (Tag5 ("type_extension", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "type_extension"), 0, (0)), 100000000, 0, -10851), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10850), 0), 100000000, 0, -10849), 0), 100000000, 0, -10848), (Tag5 ("extension_constructor", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "extension_constructor"), 0, (0)), 100000000, 0, -11085), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11084), 0), 100000000, 0, -11083), 0), 100000000, 0, -11082), (Tag5 ("type_exception", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "type_exception"), 0, (0)), 100000000, 0, -10855), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10854), 0), 100000000, 0, -10853), 0), 100000000, 0, -10852), (Tag5 ("extension_constructor_kind", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "extension_constructor_kind"), 0, (0)), 100000000, 0, -11081), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11080), 0), 100000000, 0, -11079), 0), 100000000, 0, -11078), (Tag5 ("class_type", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_type"), 0, (0)), 100000000, 0, -11153), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11152), 0), 100000000, 0, -11151), 0), 100000000, 0, -11150), (Tag5 ("class_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_type_desc"), 0, (0)), 100000000, 0, -11145), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11144), 0), 100000000, 0, -11143), 0), 100000000, 0, -11142), (Tag5 ("class_signature", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_signature"), 0, (0)), 100000000, 0, -11161), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11160), 0), 100000000, 0, -11159), 0), 100000000, 0, -11158), (Tag5 ("class_type_field", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_type_field"), 0, (0)), 100000000, 0, -11141), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11140), 0), 100000000, 0, -11139), 0), 100000000, 0, -11138), (Tag5 ("class_type_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_type_field_desc"), 0, (0)), 100000000, 0, -11137), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11136), 0), 100000000, 0, -11135), 0), 100000000, 0, -11134), (Tag5 ("class_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -11163), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11169), 0), 100000000, 0, -11168), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_infos"), [(Tag9 (("a")), 100000000, 0, -11163)], (0)), 100000000, 0, -11167), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11166), 0), 100000000, 0, -11165), 0), 100000000, 0, -11164), [(Tag9 (("a")), 100000000, 0, -11163)]), 100000000, 0, -11162), (Tag5 ("class_description", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_description"), 0, (0)), 100000000, 0, -11193), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11192), 0), 100000000, 0, -11191), 0), 100000000, 0, -11190), (Tag5 ("class_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_type_declaration"), 0, (0)), 100000000, 0, -11149), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11148), 0), 100000000, 0, -11147), 0), 100000000, 0, -11146), (Tag5 ("class_expr", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_expr"), 0, (0)), 100000000, 0, -11189), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11188), 0), 100000000, 0, -11187), 0), 100000000, 0, -11186), (Tag5 ("class_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_expr_desc"), 0, (0)), 100000000, 0, -11185), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11184), 0), 100000000, 0, -11183), 0), 100000000, 0, -11182), (Tag5 ("class_structure", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_structure"), 0, (0)), 100000000, 0, -11157), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11156), 0), 100000000, 0, -11155), 0), 100000000, 0, -11154), (Tag5 ("class_field", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_field"), 0, (0)), 100000000, 0, -11181), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11180), 0), 100000000, 0, -11179), 0), 100000000, 0, -11178), (Tag5 ("class_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_field_desc"), 0, (0)), 100000000, 0, -11177), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11176), 0), 100000000, 0, -11175), 0), 100000000, 0, -11174), (Tag5 ("class_field_kind", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_field_kind"), 0, (0)), 100000000, 0, -11173), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11172), 0), 100000000, 0, -11171), 0), 100000000, 0, -11170), (Tag5 ("class_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_declaration"), 0, (0)), 100000000, 0, -11197), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11196), 0), 100000000, 0, -11195), 0), 100000000, 0, -11194), (Tag5 ("module_type", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_type"), 0, (0)), 100000000, 0, -10984), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10983), 0), 100000000, 0, -10982), 0), 100000000, 0, -10981), (Tag5 ("module_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_type_desc"), 0, (0)), 100000000, 0, -10976), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10975), 0), 100000000, 0, -10974), 0), 100000000, 0, -10973), (Tag5 ("functor_parameter", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "functor_parameter"), 0, (0)), 100000000, 0, -11077), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11076), 0), 100000000, 0, -11075), 0), 100000000, 0, -11074), (Tag5 ("signature", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "signature"), 0, (0)), 100000000, 0, -10894), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10893), 0), 100000000, 0, -10892), 0), 100000000, 0, -10891), (Tag5 ("signature_item", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "signature_item"), 0, (0)), 100000000, 0, -10890), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10889), 0), 100000000, 0, -10888), 0), 100000000, 0, -10887), (Tag5 ("signature_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "signature_item_desc"), 0, (0)), 100000000, 0, -10886), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10885), 0), 100000000, 0, -10884), 0), 100000000, 0, -10883), (Tag5 ("module_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_declaration"), 0, (0)), 100000000, 0, -11000), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10999), 0), 100000000, 0, -10998), 0), 100000000, 0, -10997), (Tag5 ("module_substitution", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_substitution"), 0, (0)), 100000000, 0, -10988), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10987), 0), 100000000, 0, -10986), 0), 100000000, 0, -10985), (Tag5 ("module_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_type_declaration"), 0, (0)), 100000000, 0, -10980), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10979), 0), 100000000, 0, -10978), 0), 100000000, 0, -10977), (Tag5 ("open_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -10946), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10952), 0), 100000000, 0, -10951), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "open_infos"), [(Tag9 (("a")), 100000000, 0, -10946)], (0)), 100000000, 0, -10950), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10949), 0), 100000000, 0, -10948), 0), 100000000, 0, -10947), [(Tag9 (("a")), 100000000, 0, -10946)]), 100000000, 0, -10945), (Tag5 ("open_description", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "open_description"), 0, (0)), 100000000, 0, -10956), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10955), 0), 100000000, 0, -10954), 0), 100000000, 0, -10953), (Tag5 ("open_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "open_declaration"), 0, (0)), 100000000, 0, -10960), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10959), 0), 100000000, 0, -10958), 0), 100000000, 0, -10957), (Tag5 ("include_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -11055), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11061), 0), 100000000, 0, -11060), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "include_infos"), [(Tag9 (("a")), 100000000, 0, -11055)], (0)), 100000000, 0, -11059), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11058), 0), 100000000, 0, -11057), 0), 100000000, 0, -11056), [(Tag9 (("a")), 100000000, 0, -11055)]), 100000000, 0, -11054), (Tag5 ("include_description", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "include_description"), 0, (0)), 100000000, 0, -11065), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11064), 0), 100000000, 0, -11063), 0), 100000000, 0, -11062), (Tag5 ("include_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "include_declaration"), 0, (0)), 100000000, 0, -11069), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11068), 0), 100000000, 0, -11067), 0), 100000000, 0, -11066), (Tag5 ("with_constraint", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "with_constraint"), 0, (0)), 100000000, 0, -10827), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10826), 0), 100000000, 0, -10825), 0), 100000000, 0, -10824), (Tag5 ("module_expr", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_expr"), 0, (0)), 100000000, 0, -10996), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10995), 0), 100000000, 0, -10994), 0), 100000000, 0, -10993), (Tag5 ("module_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_expr_desc"), 0, (0)), 100000000, 0, -10992), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10991), 0), 100000000, 0, -10990), 0), 100000000, 0, -10989), (Tag5 ("structure", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "structure"), 0, (0)), 100000000, 0, -10879), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10878), 0), 100000000, 0, -10877), 0), 100000000, 0, -10876), (Tag5 ("structure_item", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "structure_item"), 0, (0)), 100000000, 0, -10875), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10874), 0), 100000000, 0, -10873), 0), 100000000, 0, -10872), (Tag5 ("structure_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "structure_item_desc"), 0, (0)), 100000000, 0, -10871), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10870), 0), 100000000, 0, -10869), 0), 100000000, 0, -10868), (Tag5 ("value_binding", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "value_binding"), 0, (0)), 100000000, 0, -10843), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10842), 0), 100000000, 0, -10841), 0), 100000000, 0, -10840), (Tag5 ("module_binding", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_binding"), 0, (0)), 100000000, 0, -11004), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11003), 0), 100000000, 0, -11002), 0), 100000000, 0, -11001), (Tag5 ("toplevel_phrase", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "toplevel_phrase"), 0, (0)), 100000000, 0, -10863), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10862), 0), 100000000, 0, -10861), 0), 100000000, 0, -10860), (Tag5 ("toplevel_directive", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "toplevel_directive"), 0, (0)), 100000000, 0, -10867), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10866), 0), 100000000, 0, -10865), 0), 100000000, 0, -10864), (Tag5 ("directive_argument", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "directive_argument"), 0, (0)), 100000000, 0, -11105), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11104), 0), 100000000, 0, -11103), 0), 100000000, 0, -11102), (Tag5 ("directive_argument_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "directive_argument_desc"), 0, (0)), 100000000, 0, -11101), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11100), 0), 100000000, 0, -11099), 0), 100000000, 0, -11098), (Tag5 ("cases", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "cases"), 0, (0)), 100000000, 0, -11204), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11203), 0), 100000000, 0, -11202), 0), 100000000, 0, -11201), (Tag5 ("array", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag9 (("a")), 100000000, 0, -11225)], (0)), 100000000, 0, -11229), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("array", 8)), [(Tag9 (("a")), 100000000, 0, -11225)], (0)), 100000000, 0, -11228)], (0)), 100000000, 0, -11227), 0), 100000000, 0, -11226), [(Tag9 (("a")), 100000000, 0, -11225)]), 100000000, 0, -11224), (Tag5 ("return_true", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10906), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10905), 0), 100000000, 0, -10904), 0), 100000000, 0, -10903), (Tag5 ("go", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11073), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "rec_flag"), 0, (0)), 100000000, 0, -11072), 0), 100000000, 0, -11071), 0), 100000000, 0, -11070), ((0), 100000000, 0, -11336)), 100000000, 0, -11435)), 100000000, 0, -11434)), 100000000, 0, -11433)), 100000000, 0, -11432)), 100000000, 0, -11431)), 100000000, 0, -11430)), 100000000, 0, -11429)), 100000000, 0, -11428)), 100000000, 0, -11427)), 100000000, 0, -11426)), 100000000, 0, -11425)), 100000000, 0, -11424)), 100000000, 0, -11423)), 100000000, 0, -11422)), 100000000, 0, -11421)), 100000000, 0, -11420)), 100000000, 0, -11419)), 100000000, 0, -11418)), 100000000, 0, -11417)), 100000000, 0, -11416)), 100000000, 0, -11415)), 100000000, 0, -11414)), 100000000, 0, -11413)), 100000000, 0, -11412)), 100000000, 0, -11411)), 100000000, 0, -11410)), 100000000, 0, -11409)), 100000000, 0, -11408)), 100000000, 0, -11407)), 100000000, 0, -11406)), 100000000, 0, -11405)), 100000000, 0, -11404)), 100000000, 0, -11403)), 100000000, 0, -11402)), 100000000, 0, -11401)), 100000000, 0, -11400)), 100000000, 0, -11399)), 100000000, 0, -11398)), 100000000, 0, -11397)), 100000000, 0, -11396)), 100000000, 0, -11395)), 100000000, 0, -11394)), 100000000, 0, -11393)), 100000000, 0, -11392)), 100000000, 0, -11391)), 100000000, 0, -11390)), 100000000, 0, -11389)), 100000000, 0, -11388)), 100000000, 0, -11387)), 100000000, 0, -11386)), 100000000, 0, -11385)), 100000000, 0, -11384)), 100000000, 0, -11383)), 100000000, 0, -11382)), 100000000, 0, -11381)), 100000000, 0, -11380)), 100000000, 0, -11379)), 100000000, 0, -11378)), 100000000, 0, -11377)), 100000000, 0, -11376)), 100000000, 0, -11375)), 100000000, 0, -11374)), 100000000, 0, -11373)), 100000000, 0, -11372)), 100000000, 0, -11371)), 100000000, 0, -11370)), 100000000, 0, -11369)), 100000000, 0, -11368)), 100000000, 0, -11367)), 100000000, 0, -11366)), 100000000, 0, -11365)), 100000000, 0, -11364)), 100000000, 0, -11363)), 100000000, 0, -11362)), 100000000, 0, -11361)), 100000000, 0, -11360)), 100000000, 0, -11359)), 100000000, 0, -11358)), 100000000, 0, -11357)), 100000000, 0, -11356)), 100000000, 0, -11355)), 100000000, 0, -11354)), 100000000, 0, -11353)), 100000000, 0, -11352)), 100000000, 0, -11351)), 100000000, 0, -11350)), 100000000, 0, -11349)), 100000000, 0, -11348)), 100000000, 0, -11347)), 100000000, 0, -11346)), 100000000, 0, -11345)), 100000000, 0, -11344)), 100000000, 0, -11343)), 100000000, 0, -11342)), 100000000, 0, -11341)), 100000000, 0, -11340)), 100000000, 0, -11339)), 100000000, 0, -11338), (([(("type_is_recursive", 7333)); ((0), 100000000, 0, -11336)]))), 100000000, 0, -11337), ((0), 100000000, 0, -11336), (0, "type_names", (0, 1, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -11335)], (0)), 100000000, 0, -11334)), 0, 1), ((((((0, "arg_label", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "arg_label"), 0, (0)), 100000000, 0, -11233), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11232), 0), 100000000, 0, -11231), 0), 100000000, 0, -11230)), 0, 1), "array", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag9 (("a")), 100000000, 0, -11225)], (0)), 100000000, 0, -11229), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("array", 8)), [(Tag9 (("a")), 100000000, 0, -11225)], (0)), 100000000, 0, -11228)], (0)), 100000000, 0, -11227), 0), 100000000, 0, -11226), [(Tag9 (("a")), 100000000, 0, -11225)]), 100000000, 0, -11224)), (0, "attribute", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "attribute"), 0, (0)), 100000000, 0, -11223), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11222), 0), 100000000, 0, -11221), 0), 100000000, 0, -11220)), 0, 1), 2), "attributes", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "attributes"), 0, (0)), 100000000, 0, -11219), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11218), 0), 100000000, 0, -11217), 0), 100000000, 0, -11216)), ((0, "binding_op", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "binding_op"), 0, (0)), 100000000, 0, -11215), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11214), 0), 100000000, 0, -11213), 0), 100000000, 0, -11212)), 0, 1), "bool", (0, 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -11211)], (0)), 100000000, 0, -11210), 0), 100000000, 0, -11209)), (0, "case", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "case"), 0, (0)), 100000000, 0, -11208), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11207), 0), 100000000, 0, -11206), 0), 100000000, 0, -11205)), 0, 1), 2), 3), "cases", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "cases"), 0, (0)), 100000000, 0, -11204), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11203), 0), 100000000, 0, -11202), 0), 100000000, 0, -11201)), (((0, "char", (0, 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -11200)], (0)), 100000000, 0, -11199), 0), 100000000, 0, -11198)), 0, 1), "class_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_declaration"), 0, (0)), 100000000, 0, -11197), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11196), 0), 100000000, 0, -11195), 0), 100000000, 0, -11194)), (0, "class_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_description"), 0, (0)), 100000000, 0, -11193), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11192), 0), 100000000, 0, -11191), 0), 100000000, 0, -11190)), 0, 1), 2), "class_expr", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_expr"), 0, (0)), 100000000, 0, -11189), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11188), 0), 100000000, 0, -11187), 0), 100000000, 0, -11186)), ((0, "class_expr_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_expr_desc"), 0, (0)), 100000000, 0, -11185), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11184), 0), 100000000, 0, -11183), 0), 100000000, 0, -11182)), 0, 1), "class_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_field"), 0, (0)), 100000000, 0, -11181), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11180), 0), 100000000, 0, -11179), 0), 100000000, 0, -11178)), (0, "class_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_field_desc"), 0, (0)), 100000000, 0, -11177), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11176), 0), 100000000, 0, -11175), 0), 100000000, 0, -11174)), 0, 1), 2), 3), 4), "class_field_kind", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_field_kind"), 0, (0)), 100000000, 0, -11173), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11172), 0), 100000000, 0, -11171), 0), 100000000, 0, -11170)), ((((0, "class_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -11163), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11169), 0), 100000000, 0, -11168), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_infos"), [(Tag9 (("a")), 100000000, 0, -11163)], (0)), 100000000, 0, -11167), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11166), 0), 100000000, 0, -11165), 0), 100000000, 0, -11164), [(Tag9 (("a")), 100000000, 0, -11163)]), 100000000, 0, -11162)), 0, 1), "class_signature", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_signature"), 0, (0)), 100000000, 0, -11161), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11160), 0), 100000000, 0, -11159), 0), 100000000, 0, -11158)), (0, "class_structure", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_structure"), 0, (0)), 100000000, 0, -11157), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11156), 0), 100000000, 0, -11155), 0), 100000000, 0, -11154)), 0, 1), 2), "class_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_type"), 0, (0)), 100000000, 0, -11153), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11152), 0), 100000000, 0, -11151), 0), 100000000, 0, -11150)), ((0, "class_type_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_type_declaration"), 0, (0)), 100000000, 0, -11149), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11148), 0), 100000000, 0, -11147), 0), 100000000, 0, -11146)), 0, 1), "class_type_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_type_desc"), 0, (0)), 100000000, 0, -11145), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11144), 0), 100000000, 0, -11143), 0), 100000000, 0, -11142)), (0, "class_type_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_type_field"), 0, (0)), 100000000, 0, -11141), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11140), 0), 100000000, 0, -11139), 0), 100000000, 0, -11138)), 0, 1), 2), 3), "class_type_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_type_field_desc"), 0, (0)), 100000000, 0, -11137), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11136), 0), 100000000, 0, -11135), 0), 100000000, 0, -11134)), (((0, "closed_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "closed_flag"), 0, (0)), 100000000, 0, -11133), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11132), 0), 100000000, 0, -11131), 0), 100000000, 0, -11130)), 0, 1), "constant", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "constant"), 0, (0)), 100000000, 0, -11129), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11128), 0), 100000000, 0, -11127), 0), 100000000, 0, -11126)), (0, "constructor_arguments", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "constructor_arguments"), 0, (0)), 100000000, 0, -11125), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11124), 0), 100000000, 0, -11123), 0), 100000000, 0, -11122)), 0, 1), 2), "constructor_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "constructor_declaration"), 0, (0)), 100000000, 0, -11121), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11120), 0), 100000000, 0, -11119), 0), 100000000, 0, -11118)), ((0, "core_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "core_type"), 0, (0)), 100000000, 0, -11117), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11116), 0), 100000000, 0, -11115), 0), 100000000, 0, -11114)), 0, 1), "core_type_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "core_type_desc"), 0, (0)), 100000000, 0, -11113), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11112), 0), 100000000, 0, -11111), 0), 100000000, 0, -11110)), (0, "direction_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "direction_flag"), 0, (0)), 100000000, 0, -11109), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11108), 0), 100000000, 0, -11107), 0), 100000000, 0, -11106)), 0, 1), 2), 3), 4), 5), "directive_argument", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "directive_argument"), 0, (0)), 100000000, 0, -11105), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11104), 0), 100000000, 0, -11103), 0), 100000000, 0, -11102)), ((((((0, "directive_argument_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "directive_argument_desc"), 0, (0)), 100000000, 0, -11101), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11100), 0), 100000000, 0, -11099), 0), 100000000, 0, -11098)), 0, 1), "expression", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "expression"), 0, (0)), 100000000, 0, -11097), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11096), 0), 100000000, 0, -11095), 0), 100000000, 0, -11094)), (0, "expression_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "expression_desc"), 0, (0)), 100000000, 0, -11093), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11092), 0), 100000000, 0, -11091), 0), 100000000, 0, -11090)), 0, 1), 2), "extension", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "extension"), 0, (0)), 100000000, 0, -11089), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11088), 0), 100000000, 0, -11087), 0), 100000000, 0, -11086)), ((0, "extension_constructor", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "extension_constructor"), 0, (0)), 100000000, 0, -11085), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11084), 0), 100000000, 0, -11083), 0), 100000000, 0, -11082)), 0, 1), "extension_constructor_kind", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "extension_constructor_kind"), 0, (0)), 100000000, 0, -11081), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11080), 0), 100000000, 0, -11079), 0), 100000000, 0, -11078)), (0, "functor_parameter", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "functor_parameter"), 0, (0)), 100000000, 0, -11077), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11076), 0), 100000000, 0, -11075), 0), 100000000, 0, -11074)), (0, "go", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11073), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "rec_flag"), 0, (0)), 100000000, 0, -11072), 0), 100000000, 0, -11071), 0), 100000000, 0, -11070)), 0, 1), 2), 3), 4), "include_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "include_declaration"), 0, (0)), 100000000, 0, -11069), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11068), 0), 100000000, 0, -11067), 0), 100000000, 0, -11066)), (((0, "include_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "include_description"), 0, (0)), 100000000, 0, -11065), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11064), 0), 100000000, 0, -11063), 0), 100000000, 0, -11062)), 0, 1), "include_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -11055), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11061), 0), 100000000, 0, -11060), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "include_infos"), [(Tag9 (("a")), 100000000, 0, -11055)], (0)), 100000000, 0, -11059), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11058), 0), 100000000, 0, -11057), 0), 100000000, 0, -11056), [(Tag9 (("a")), 100000000, 0, -11055)]), 100000000, 0, -11054)), (0, "injectivity", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "injectivity"), 0, (0)), 100000000, 0, -11053), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11052), 0), 100000000, 0, -11051), 0), 100000000, 0, -11050)), 0, 1), 2), "int", (0, 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11049)], (0)), 100000000, 0, -11048), 0), 100000000, 0, -11047)), ((0, "label", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "label"), 0, (0)), 100000000, 0, -11046), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11045), 0), 100000000, 0, -11044), 0), 100000000, 0, -11043)), 0, 1), "label_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "label_declaration"), 0, (0)), 100000000, 0, -11042), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11041), 0), 100000000, 0, -11040), 0), 100000000, 0, -11039)), (0, "letop", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "letop"), 0, (0)), 100000000, 0, -11038), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11037), 0), 100000000, 0, -11036), 0), 100000000, 0, -11035)), 0, 1), 2), 3), 5), "list", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag9 (("a")), 100000000, 0, -11030)], (0)), 100000000, 0, -11034), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -11030)], (0)), 100000000, 0, -11033)], (0)), 100000000, 0, -11032), 0), 100000000, 0, -11031), [(Tag9 (("a")), 100000000, 0, -11030)]), 100000000, 0, -11029)), ((((0, "loc", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -11022), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11028), 0), 100000000, 0, -11027), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "loc"), [(Tag9 (("a")), 100000000, 0, -11022)], (0)), 100000000, 0, -11026), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11025), 0), 100000000, 0, -11024), 0), 100000000, 0, -11023), [(Tag9 (("a")), 100000000, 0, -11022)]), 100000000, 0, -11021)), 0, 1), "location", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "location"), 0, (0)), 100000000, 0, -11020), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11019), 0), 100000000, 0, -11018), 0), 100000000, 0, -11017)), (0, "location_stack", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "location_stack"), 0, (0)), 100000000, 0, -11016), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11015), 0), 100000000, 0, -11014), 0), 100000000, 0, -11013)), 0, 1), 2), "longident", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "longident"), 0, (0)), 100000000, 0, -11012), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11011), 0), 100000000, 0, -11010), 0), 100000000, 0, -11009)), ((0, "longident_loc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "longident_loc"), 0, (0)), 100000000, 0, -11008), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11007), 0), 100000000, 0, -11006), 0), 100000000, 0, -11005)), 0, 1), "module_binding", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_binding"), 0, (0)), 100000000, 0, -11004), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11003), 0), 100000000, 0, -11002), 0), 100000000, 0, -11001)), (0, "module_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_declaration"), 0, (0)), 100000000, 0, -11000), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10999), 0), 100000000, 0, -10998), 0), 100000000, 0, -10997)), 0, 1), 2), 3), "module_expr", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_expr"), 0, (0)), 100000000, 0, -10996), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10995), 0), 100000000, 0, -10994), 0), 100000000, 0, -10993)), (((0, "module_expr_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_expr_desc"), 0, (0)), 100000000, 0, -10992), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10991), 0), 100000000, 0, -10990), 0), 100000000, 0, -10989)), 0, 1), "module_substitution", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_substitution"), 0, (0)), 100000000, 0, -10988), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10987), 0), 100000000, 0, -10986), 0), 100000000, 0, -10985)), (0, "module_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_type"), 0, (0)), 100000000, 0, -10984), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10983), 0), 100000000, 0, -10982), 0), 100000000, 0, -10981)), 0, 1), 2), "module_type_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_type_declaration"), 0, (0)), 100000000, 0, -10980), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10979), 0), 100000000, 0, -10978), 0), 100000000, 0, -10977)), ((0, "module_type_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_type_desc"), 0, (0)), 100000000, 0, -10976), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10975), 0), 100000000, 0, -10974), 0), 100000000, 0, -10973)), 0, 1), "mutable_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "mutable_flag"), 0, (0)), 100000000, 0, -10972), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10971), 0), 100000000, 0, -10970), 0), 100000000, 0, -10969)), (0, "object_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "object_field"), 0, (0)), 100000000, 0, -10968), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10967), 0), 100000000, 0, -10966), 0), 100000000, 0, -10965)), 0, 1), 2), 3), 4), 6), "object_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "object_field_desc"), 0, (0)), 100000000, 0, -10964), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10963), 0), 100000000, 0, -10962), 0), 100000000, 0, -10961)), (((((0, "open_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "open_declaration"), 0, (0)), 100000000, 0, -10960), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10959), 0), 100000000, 0, -10958), 0), 100000000, 0, -10957)), 0, 1), "open_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "open_description"), 0, (0)), 100000000, 0, -10956), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10955), 0), 100000000, 0, -10954), 0), 100000000, 0, -10953)), (0, "open_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -10946), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10952), 0), 100000000, 0, -10951), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "open_infos"), [(Tag9 (("a")), 100000000, 0, -10946)], (0)), 100000000, 0, -10950), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10949), 0), 100000000, 0, -10948), 0), 100000000, 0, -10947), [(Tag9 (("a")), 100000000, 0, -10946)]), 100000000, 0, -10945)), 0, 1), 2), "option", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag9 (("a")), 100000000, 0, -10940)], (0)), 100000000, 0, -10944), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -10940)], (0)), 100000000, 0, -10943)], (0)), 100000000, 0, -10942), 0), 100000000, 0, -10941), [(Tag9 (("a")), 100000000, 0, -10940)]), 100000000, 0, -10939)), ((0, "override_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "override_flag"), 0, (0)), 100000000, 0, -10938), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10937), 0), 100000000, 0, -10936), 0), 100000000, 0, -10935)), 0, 1), "package_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "package_type"), 0, (0)), 100000000, 0, -10934), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10933), 0), 100000000, 0, -10932), 0), 100000000, 0, -10931)), (0, "pattern", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "pattern"), 0, (0)), 100000000, 0, -10930), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10929), 0), 100000000, 0, -10928), 0), 100000000, 0, -10927)), 0, 1), 2), 3), "pattern_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "pattern_desc"), 0, (0)), 100000000, 0, -10926), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10925), 0), 100000000, 0, -10924), 0), 100000000, 0, -10923)), (((0, "payload", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "payload"), 0, (0)), 100000000, 0, -10922), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10921), 0), 100000000, 0, -10920), 0), 100000000, 0, -10919)), 0, 1), "position", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "position"), 0, (0)), 100000000, 0, -10918), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10917), 0), 100000000, 0, -10916), 0), 100000000, 0, -10915)), (0, "private_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "private_flag"), 0, (0)), 100000000, 0, -10914), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10913), 0), 100000000, 0, -10912), 0), 100000000, 0, -10911)), 0, 1), 2), "rec_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "rec_flag"), 0, (0)), 100000000, 0, -10910), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10909), 0), 100000000, 0, -10908), 0), 100000000, 0, -10907)), (((0, "return_true", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10906), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10905), 0), 100000000, 0, -10904), 0), 100000000, 0, -10903)), 0, 1), "row_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "row_field"), 0, (0)), 100000000, 0, -10902), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10901), 0), 100000000, 0, -10900), 0), 100000000, 0, -10899)), 0, 2), "row_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "row_field_desc"), 0, (0)), 100000000, 0, -10898), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10897), 0), 100000000, 0, -10896), 0), 100000000, 0, -10895)), (0, "signature", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "signature"), 0, (0)), 100000000, 0, -10894), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10893), 0), 100000000, 0, -10892), 0), 100000000, 0, -10891)), 0, 1), 3), 4), 5), "signature_item", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "signature_item"), 0, (0)), 100000000, 0, -10890), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10889), 0), 100000000, 0, -10888), 0), 100000000, 0, -10887)), ((((0, "signature_item_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "signature_item_desc"), 0, (0)), 100000000, 0, -10886), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10885), 0), 100000000, 0, -10884), 0), 100000000, 0, -10883)), 0, 1), "string", (0, 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10882)], (0)), 100000000, 0, -10881), 0), 100000000, 0, -10880)), (0, "structure", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "structure"), 0, (0)), 100000000, 0, -10879), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10878), 0), 100000000, 0, -10877), 0), 100000000, 0, -10876)), 0, 1), 2), "structure_item", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "structure_item"), 0, (0)), 100000000, 0, -10875), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10874), 0), 100000000, 0, -10873), 0), 100000000, 0, -10872)), ((0, "structure_item_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "structure_item_desc"), 0, (0)), 100000000, 0, -10871), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10870), 0), 100000000, 0, -10869), 0), 100000000, 0, -10868)), 0, 1), "toplevel_directive", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "toplevel_directive"), 0, (0)), 100000000, 0, -10867), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10866), 0), 100000000, 0, -10865), 0), 100000000, 0, -10864)), (0, "toplevel_phrase", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "toplevel_phrase"), 0, (0)), 100000000, 0, -10863), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10862), 0), 100000000, 0, -10861), 0), 100000000, 0, -10860)), 0, 1), 2), 3), "type_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "type_declaration"), 0, (0)), 100000000, 0, -10859), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10858), 0), 100000000, 0, -10857), 0), 100000000, 0, -10856)), (((0, "type_exception", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "type_exception"), 0, (0)), 100000000, 0, -10855), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10854), 0), 100000000, 0, -10853), 0), 100000000, 0, -10852)), 0, 1), "type_extension", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "type_extension"), 0, (0)), 100000000, 0, -10851), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10850), 0), 100000000, 0, -10849), 0), 100000000, 0, -10848)), (0, "type_kind", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "type_kind"), 0, (0)), 100000000, 0, -10847), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10846), 0), 100000000, 0, -10845), 0), 100000000, 0, -10844)), 0, 1), 2), "value_binding", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "value_binding"), 0, (0)), 100000000, 0, -10843), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10842), 0), 100000000, 0, -10841), 0), 100000000, 0, -10840)), ((0, "value_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "value_description"), 0, (0)), 100000000, 0, -10839), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10838), 0), 100000000, 0, -10837), 0), 100000000, 0, -10836)), 0, 1), "variance", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "variance"), 0, (0)), 100000000, 0, -10835), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10834), 0), 100000000, 0, -10833), 0), 100000000, 0, -10832)), (0, "virtual_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "virtual_flag"), 0, (0)), 100000000, 0, -10831), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10830), 0), 100000000, 0, -10829), 0), 100000000, 0, -10828)), (0, "with_constraint", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "with_constraint"), 0, (0)), 100000000, 0, -10827), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10826), 0), 100000000, 0, -10825), 0), 100000000, 0, -10824)), 0, 1), 2), 3), 4), 5), 6), 7), 8))))), (("type_is_recursive", 7333)), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "rec_flag"), 0, (0)), 100000000, 0, -11441), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "type_declaration"), 0, (0)), 100000000, 0, -11440)], (0)), 100000000, 0, -11439), (Tag3 ((("type_is_recursive", 7333)), 0, (0)), 100000000, 0, -11438), 0), 100000000, 0, -11437), 0), 100000000, 0, -11436)), 0, (("src/common.mli", 40, 1580, 1580), ("src/common.mli", 48, 1803, 1811), 0), 0, Tag1 ("Ppxlib__Common", 13)), 1, 0); Tag6 (("type_is_recursive", 7332), (0, Tag1 (((Tag4 ((Tag5 ("bool", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -11211)], (0)), 100000000, 0, -11210), 0), 100000000, 0, -11209), (Tag5 ("char", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -11200)], (0)), 100000000, 0, -11199), 0), 100000000, 0, -11198), (Tag5 ("int", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11049)], (0)), 100000000, 0, -11048), 0), 100000000, 0, -11047), (Tag5 ("list", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag9 (("a")), 100000000, 0, -11030)], (0)), 100000000, 0, -11034), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -11030)], (0)), 100000000, 0, -11033)], (0)), 100000000, 0, -11032), 0), 100000000, 0, -11031), [(Tag9 (("a")), 100000000, 0, -11030)]), 100000000, 0, -11029), (Tag5 ("option", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag9 (("a")), 100000000, 0, -10940)], (0)), 100000000, 0, -10944), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -10940)], (0)), 100000000, 0, -10943)], (0)), 100000000, 0, -10942), 0), 100000000, 0, -10941), [(Tag9 (("a")), 100000000, 0, -10940)]), 100000000, 0, -10939), (Tag5 ("string", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10882)], (0)), 100000000, 0, -10881), 0), 100000000, 0, -10880), (Tag5 ("position", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "position"), 0, (0)), 100000000, 0, -10918), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10917), 0), 100000000, 0, -10916), 0), 100000000, 0, -10915), (Tag5 ("location", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "location"), 0, (0)), 100000000, 0, -11020), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11019), 0), 100000000, 0, -11018), 0), 100000000, 0, -11017), (Tag5 ("location_stack", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "location_stack"), 0, (0)), 100000000, 0, -11016), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11015), 0), 100000000, 0, -11014), 0), 100000000, 0, -11013), (Tag5 ("loc", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -11022), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11028), 0), 100000000, 0, -11027), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "loc"), [(Tag9 (("a")), 100000000, 0, -11022)], (0)), 100000000, 0, -11026), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11025), 0), 100000000, 0, -11024), 0), 100000000, 0, -11023), [(Tag9 (("a")), 100000000, 0, -11022)]), 100000000, 0, -11021), (Tag5 ("longident", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "longident"), 0, (0)), 100000000, 0, -11012), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11011), 0), 100000000, 0, -11010), 0), 100000000, 0, -11009), (Tag5 ("longident_loc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "longident_loc"), 0, (0)), 100000000, 0, -11008), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11007), 0), 100000000, 0, -11006), 0), 100000000, 0, -11005), (Tag5 ("rec_flag", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "rec_flag"), 0, (0)), 100000000, 0, -10910), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10909), 0), 100000000, 0, -10908), 0), 100000000, 0, -10907), (Tag5 ("direction_flag", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "direction_flag"), 0, (0)), 100000000, 0, -11109), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11108), 0), 100000000, 0, -11107), 0), 100000000, 0, -11106), (Tag5 ("private_flag", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "private_flag"), 0, (0)), 100000000, 0, -10914), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10913), 0), 100000000, 0, -10912), 0), 100000000, 0, -10911), (Tag5 ("mutable_flag", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "mutable_flag"), 0, (0)), 100000000, 0, -10972), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10971), 0), 100000000, 0, -10970), 0), 100000000, 0, -10969), (Tag5 ("virtual_flag", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "virtual_flag"), 0, (0)), 100000000, 0, -10831), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10830), 0), 100000000, 0, -10829), 0), 100000000, 0, -10828), (Tag5 ("override_flag", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "override_flag"), 0, (0)), 100000000, 0, -10938), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10937), 0), 100000000, 0, -10936), 0), 100000000, 0, -10935), (Tag5 ("closed_flag", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "closed_flag"), 0, (0)), 100000000, 0, -11133), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11132), 0), 100000000, 0, -11131), 0), 100000000, 0, -11130), (Tag5 ("label", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "label"), 0, (0)), 100000000, 0, -11046), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11045), 0), 100000000, 0, -11044), 0), 100000000, 0, -11043), (Tag5 ("arg_label", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "arg_label"), 0, (0)), 100000000, 0, -11233), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11232), 0), 100000000, 0, -11231), 0), 100000000, 0, -11230), (Tag5 ("variance", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "variance"), 0, (0)), 100000000, 0, -10835), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10834), 0), 100000000, 0, -10833), 0), 100000000, 0, -10832), (Tag5 ("injectivity", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "injectivity"), 0, (0)), 100000000, 0, -11053), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11052), 0), 100000000, 0, -11051), 0), 100000000, 0, -11050), (Tag5 ("constant", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "constant"), 0, (0)), 100000000, 0, -11129), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11128), 0), 100000000, 0, -11127), 0), 100000000, 0, -11126), (Tag5 ("attribute", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "attribute"), 0, (0)), 100000000, 0, -11223), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11222), 0), 100000000, 0, -11221), 0), 100000000, 0, -11220), (Tag5 ("extension", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "extension"), 0, (0)), 100000000, 0, -11089), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11088), 0), 100000000, 0, -11087), 0), 100000000, 0, -11086), (Tag5 ("attributes", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "attributes"), 0, (0)), 100000000, 0, -11219), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11218), 0), 100000000, 0, -11217), 0), 100000000, 0, -11216), (Tag5 ("payload", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "payload"), 0, (0)), 100000000, 0, -10922), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10921), 0), 100000000, 0, -10920), 0), 100000000, 0, -10919), (Tag5 ("core_type", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "core_type"), 0, (0)), 100000000, 0, -11117), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11116), 0), 100000000, 0, -11115), 0), 100000000, 0, -11114), (Tag5 ("core_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "core_type_desc"), 0, (0)), 100000000, 0, -11113), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11112), 0), 100000000, 0, -11111), 0), 100000000, 0, -11110), (Tag5 ("package_type", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "package_type"), 0, (0)), 100000000, 0, -10934), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10933), 0), 100000000, 0, -10932), 0), 100000000, 0, -10931), (Tag5 ("row_field", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "row_field"), 0, (0)), 100000000, 0, -10902), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10901), 0), 100000000, 0, -10900), 0), 100000000, 0, -10899), (Tag5 ("row_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "row_field_desc"), 0, (0)), 100000000, 0, -10898), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10897), 0), 100000000, 0, -10896), 0), 100000000, 0, -10895), (Tag5 ("object_field", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "object_field"), 0, (0)), 100000000, 0, -10968), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10967), 0), 100000000, 0, -10966), 0), 100000000, 0, -10965), (Tag5 ("object_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "object_field_desc"), 0, (0)), 100000000, 0, -10964), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10963), 0), 100000000, 0, -10962), 0), 100000000, 0, -10961), (Tag5 ("pattern", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "pattern"), 0, (0)), 100000000, 0, -10930), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10929), 0), 100000000, 0, -10928), 0), 100000000, 0, -10927), (Tag5 ("pattern_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "pattern_desc"), 0, (0)), 100000000, 0, -10926), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10925), 0), 100000000, 0, -10924), 0), 100000000, 0, -10923), (Tag5 ("expression", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "expression"), 0, (0)), 100000000, 0, -11097), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11096), 0), 100000000, 0, -11095), 0), 100000000, 0, -11094), (Tag5 ("expression_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "expression_desc"), 0, (0)), 100000000, 0, -11093), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11092), 0), 100000000, 0, -11091), 0), 100000000, 0, -11090), (Tag5 ("case", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "case"), 0, (0)), 100000000, 0, -11208), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11207), 0), 100000000, 0, -11206), 0), 100000000, 0, -11205), (Tag5 ("letop", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "letop"), 0, (0)), 100000000, 0, -11038), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11037), 0), 100000000, 0, -11036), 0), 100000000, 0, -11035), (Tag5 ("binding_op", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "binding_op"), 0, (0)), 100000000, 0, -11215), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11214), 0), 100000000, 0, -11213), 0), 100000000, 0, -11212), (Tag5 ("value_description", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "value_description"), 0, (0)), 100000000, 0, -10839), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10838), 0), 100000000, 0, -10837), 0), 100000000, 0, -10836), (Tag5 ("type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "type_declaration"), 0, (0)), 100000000, 0, -10859), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10858), 0), 100000000, 0, -10857), 0), 100000000, 0, -10856), (Tag5 ("type_kind", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "type_kind"), 0, (0)), 100000000, 0, -10847), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10846), 0), 100000000, 0, -10845), 0), 100000000, 0, -10844), (Tag5 ("label_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "label_declaration"), 0, (0)), 100000000, 0, -11042), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11041), 0), 100000000, 0, -11040), 0), 100000000, 0, -11039), (Tag5 ("constructor_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "constructor_declaration"), 0, (0)), 100000000, 0, -11121), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11120), 0), 100000000, 0, -11119), 0), 100000000, 0, -11118), (Tag5 ("constructor_arguments", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "constructor_arguments"), 0, (0)), 100000000, 0, -11125), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11124), 0), 100000000, 0, -11123), 0), 100000000, 0, -11122), (Tag5 ("type_extension", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "type_extension"), 0, (0)), 100000000, 0, -10851), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10850), 0), 100000000, 0, -10849), 0), 100000000, 0, -10848), (Tag5 ("extension_constructor", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "extension_constructor"), 0, (0)), 100000000, 0, -11085), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11084), 0), 100000000, 0, -11083), 0), 100000000, 0, -11082), (Tag5 ("type_exception", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "type_exception"), 0, (0)), 100000000, 0, -10855), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10854), 0), 100000000, 0, -10853), 0), 100000000, 0, -10852), (Tag5 ("extension_constructor_kind", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "extension_constructor_kind"), 0, (0)), 100000000, 0, -11081), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11080), 0), 100000000, 0, -11079), 0), 100000000, 0, -11078), (Tag5 ("class_type", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_type"), 0, (0)), 100000000, 0, -11153), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11152), 0), 100000000, 0, -11151), 0), 100000000, 0, -11150), (Tag5 ("class_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_type_desc"), 0, (0)), 100000000, 0, -11145), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11144), 0), 100000000, 0, -11143), 0), 100000000, 0, -11142), (Tag5 ("class_signature", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_signature"), 0, (0)), 100000000, 0, -11161), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11160), 0), 100000000, 0, -11159), 0), 100000000, 0, -11158), (Tag5 ("class_type_field", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_type_field"), 0, (0)), 100000000, 0, -11141), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11140), 0), 100000000, 0, -11139), 0), 100000000, 0, -11138), (Tag5 ("class_type_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_type_field_desc"), 0, (0)), 100000000, 0, -11137), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11136), 0), 100000000, 0, -11135), 0), 100000000, 0, -11134), (Tag5 ("class_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -11163), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11169), 0), 100000000, 0, -11168), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_infos"), [(Tag9 (("a")), 100000000, 0, -11163)], (0)), 100000000, 0, -11167), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11166), 0), 100000000, 0, -11165), 0), 100000000, 0, -11164), [(Tag9 (("a")), 100000000, 0, -11163)]), 100000000, 0, -11162), (Tag5 ("class_description", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_description"), 0, (0)), 100000000, 0, -11193), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11192), 0), 100000000, 0, -11191), 0), 100000000, 0, -11190), (Tag5 ("class_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_type_declaration"), 0, (0)), 100000000, 0, -11149), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11148), 0), 100000000, 0, -11147), 0), 100000000, 0, -11146), (Tag5 ("class_expr", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_expr"), 0, (0)), 100000000, 0, -11189), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11188), 0), 100000000, 0, -11187), 0), 100000000, 0, -11186), (Tag5 ("class_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_expr_desc"), 0, (0)), 100000000, 0, -11185), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11184), 0), 100000000, 0, -11183), 0), 100000000, 0, -11182), (Tag5 ("class_structure", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_structure"), 0, (0)), 100000000, 0, -11157), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11156), 0), 100000000, 0, -11155), 0), 100000000, 0, -11154), (Tag5 ("class_field", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_field"), 0, (0)), 100000000, 0, -11181), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11180), 0), 100000000, 0, -11179), 0), 100000000, 0, -11178), (Tag5 ("class_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_field_desc"), 0, (0)), 100000000, 0, -11177), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11176), 0), 100000000, 0, -11175), 0), 100000000, 0, -11174), (Tag5 ("class_field_kind", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_field_kind"), 0, (0)), 100000000, 0, -11173), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11172), 0), 100000000, 0, -11171), 0), 100000000, 0, -11170), (Tag5 ("class_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_declaration"), 0, (0)), 100000000, 0, -11197), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11196), 0), 100000000, 0, -11195), 0), 100000000, 0, -11194), (Tag5 ("module_type", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_type"), 0, (0)), 100000000, 0, -10984), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10983), 0), 100000000, 0, -10982), 0), 100000000, 0, -10981), (Tag5 ("module_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_type_desc"), 0, (0)), 100000000, 0, -10976), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10975), 0), 100000000, 0, -10974), 0), 100000000, 0, -10973), (Tag5 ("functor_parameter", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "functor_parameter"), 0, (0)), 100000000, 0, -11077), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11076), 0), 100000000, 0, -11075), 0), 100000000, 0, -11074), (Tag5 ("signature", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "signature"), 0, (0)), 100000000, 0, -10894), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10893), 0), 100000000, 0, -10892), 0), 100000000, 0, -10891), (Tag5 ("signature_item", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "signature_item"), 0, (0)), 100000000, 0, -10890), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10889), 0), 100000000, 0, -10888), 0), 100000000, 0, -10887), (Tag5 ("signature_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "signature_item_desc"), 0, (0)), 100000000, 0, -10886), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10885), 0), 100000000, 0, -10884), 0), 100000000, 0, -10883), (Tag5 ("module_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_declaration"), 0, (0)), 100000000, 0, -11000), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10999), 0), 100000000, 0, -10998), 0), 100000000, 0, -10997), (Tag5 ("module_substitution", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_substitution"), 0, (0)), 100000000, 0, -10988), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10987), 0), 100000000, 0, -10986), 0), 100000000, 0, -10985), (Tag5 ("module_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_type_declaration"), 0, (0)), 100000000, 0, -10980), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10979), 0), 100000000, 0, -10978), 0), 100000000, 0, -10977), (Tag5 ("open_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -10946), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10952), 0), 100000000, 0, -10951), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "open_infos"), [(Tag9 (("a")), 100000000, 0, -10946)], (0)), 100000000, 0, -10950), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10949), 0), 100000000, 0, -10948), 0), 100000000, 0, -10947), [(Tag9 (("a")), 100000000, 0, -10946)]), 100000000, 0, -10945), (Tag5 ("open_description", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "open_description"), 0, (0)), 100000000, 0, -10956), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10955), 0), 100000000, 0, -10954), 0), 100000000, 0, -10953), (Tag5 ("open_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "open_declaration"), 0, (0)), 100000000, 0, -10960), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10959), 0), 100000000, 0, -10958), 0), 100000000, 0, -10957), (Tag5 ("include_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -11055), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11061), 0), 100000000, 0, -11060), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "include_infos"), [(Tag9 (("a")), 100000000, 0, -11055)], (0)), 100000000, 0, -11059), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11058), 0), 100000000, 0, -11057), 0), 100000000, 0, -11056), [(Tag9 (("a")), 100000000, 0, -11055)]), 100000000, 0, -11054), (Tag5 ("include_description", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "include_description"), 0, (0)), 100000000, 0, -11065), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11064), 0), 100000000, 0, -11063), 0), 100000000, 0, -11062), (Tag5 ("include_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "include_declaration"), 0, (0)), 100000000, 0, -11069), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11068), 0), 100000000, 0, -11067), 0), 100000000, 0, -11066), (Tag5 ("with_constraint", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "with_constraint"), 0, (0)), 100000000, 0, -10827), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10826), 0), 100000000, 0, -10825), 0), 100000000, 0, -10824), (Tag5 ("module_expr", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_expr"), 0, (0)), 100000000, 0, -10996), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10995), 0), 100000000, 0, -10994), 0), 100000000, 0, -10993), (Tag5 ("module_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_expr_desc"), 0, (0)), 100000000, 0, -10992), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10991), 0), 100000000, 0, -10990), 0), 100000000, 0, -10989), (Tag5 ("structure", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "structure"), 0, (0)), 100000000, 0, -10879), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10878), 0), 100000000, 0, -10877), 0), 100000000, 0, -10876), (Tag5 ("structure_item", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "structure_item"), 0, (0)), 100000000, 0, -10875), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10874), 0), 100000000, 0, -10873), 0), 100000000, 0, -10872), (Tag5 ("structure_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "structure_item_desc"), 0, (0)), 100000000, 0, -10871), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10870), 0), 100000000, 0, -10869), 0), 100000000, 0, -10868), (Tag5 ("value_binding", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "value_binding"), 0, (0)), 100000000, 0, -10843), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10842), 0), 100000000, 0, -10841), 0), 100000000, 0, -10840), (Tag5 ("module_binding", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_binding"), 0, (0)), 100000000, 0, -11004), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11003), 0), 100000000, 0, -11002), 0), 100000000, 0, -11001), (Tag5 ("toplevel_phrase", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "toplevel_phrase"), 0, (0)), 100000000, 0, -10863), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10862), 0), 100000000, 0, -10861), 0), 100000000, 0, -10860), (Tag5 ("toplevel_directive", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "toplevel_directive"), 0, (0)), 100000000, 0, -10867), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10866), 0), 100000000, 0, -10865), 0), 100000000, 0, -10864), (Tag5 ("directive_argument", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "directive_argument"), 0, (0)), 100000000, 0, -11105), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11104), 0), 100000000, 0, -11103), 0), 100000000, 0, -11102), (Tag5 ("directive_argument_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "directive_argument_desc"), 0, (0)), 100000000, 0, -11101), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11100), 0), 100000000, 0, -11099), 0), 100000000, 0, -11098), (Tag5 ("cases", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "cases"), 0, (0)), 100000000, 0, -11204), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11203), 0), 100000000, 0, -11202), 0), 100000000, 0, -11201), (Tag5 ("array", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag9 (("a")), 100000000, 0, -11225)], (0)), 100000000, 0, -11229), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("array", 8)), [(Tag9 (("a")), 100000000, 0, -11225)], (0)), 100000000, 0, -11228)], (0)), 100000000, 0, -11227), 0), 100000000, 0, -11226), [(Tag9 (("a")), 100000000, 0, -11225)]), 100000000, 0, -11224), (Tag5 ("return_true", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10906), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10905), 0), 100000000, 0, -10904), 0), 100000000, 0, -10903), (Tag5 ("go", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11073), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "rec_flag"), 0, (0)), 100000000, 0, -11072), 0), 100000000, 0, -11071), 0), 100000000, 0, -11070), ((0), 100000000, 0, -11336)), 100000000, 0, -11435)), 100000000, 0, -11434)), 100000000, 0, -11433)), 100000000, 0, -11432)), 100000000, 0, -11431)), 100000000, 0, -11430)), 100000000, 0, -11429)), 100000000, 0, -11428)), 100000000, 0, -11427)), 100000000, 0, -11426)), 100000000, 0, -11425)), 100000000, 0, -11424)), 100000000, 0, -11423)), 100000000, 0, -11422)), 100000000, 0, -11421)), 100000000, 0, -11420)), 100000000, 0, -11419)), 100000000, 0, -11418)), 100000000, 0, -11417)), 100000000, 0, -11416)), 100000000, 0, -11415)), 100000000, 0, -11414)), 100000000, 0, -11413)), 100000000, 0, -11412)), 100000000, 0, -11411)), 100000000, 0, -11410)), 100000000, 0, -11409)), 100000000, 0, -11408)), 100000000, 0, -11407)), 100000000, 0, -11406)), 100000000, 0, -11405)), 100000000, 0, -11404)), 100000000, 0, -11403)), 100000000, 0, -11402)), 100000000, 0, -11401)), 100000000, 0, -11400)), 100000000, 0, -11399)), 100000000, 0, -11398)), 100000000, 0, -11397)), 100000000, 0, -11396)), 100000000, 0, -11395)), 100000000, 0, -11394)), 100000000, 0, -11393)), 100000000, 0, -11392)), 100000000, 0, -11391)), 100000000, 0, -11390)), 100000000, 0, -11389)), 100000000, 0, -11388)), 100000000, 0, -11387)), 100000000, 0, -11386)), 100000000, 0, -11385)), 100000000, 0, -11384)), 100000000, 0, -11383)), 100000000, 0, -11382)), 100000000, 0, -11381)), 100000000, 0, -11380)), 100000000, 0, -11379)), 100000000, 0, -11378)), 100000000, 0, -11377)), 100000000, 0, -11376)), 100000000, 0, -11375)), 100000000, 0, -11374)), 100000000, 0, -11373)), 100000000, 0, -11372)), 100000000, 0, -11371)), 100000000, 0, -11370)), 100000000, 0, -11369)), 100000000, 0, -11368)), 100000000, 0, -11367)), 100000000, 0, -11366)), 100000000, 0, -11365)), 100000000, 0, -11364)), 100000000, 0, -11363)), 100000000, 0, -11362)), 100000000, 0, -11361)), 100000000, 0, -11360)), 100000000, 0, -11359)), 100000000, 0, -11358)), 100000000, 0, -11357)), 100000000, 0, -11356)), 100000000, 0, -11355)), 100000000, 0, -11354)), 100000000, 0, -11353)), 100000000, 0, -11352)), 100000000, 0, -11351)), 100000000, 0, -11350)), 100000000, 0, -11349)), 100000000, 0, -11348)), 100000000, 0, -11347)), 100000000, 0, -11346)), 100000000, 0, -11345)), 100000000, 0, -11344)), 100000000, 0, -11343)), 100000000, 0, -11342)), 100000000, 0, -11341)), 100000000, 0, -11340)), 100000000, 0, -11339)), 100000000, 0, -11338), (([(("type_is_recursive", 7333)); ((0), 100000000, 0, -11336)]))), 100000000, 0, -11337), ((0), 100000000, 0, -11336), (0, "type_names", (0, 1, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -11335)], (0)), 100000000, 0, -11334)), 0, 1), ((((((0, "arg_label", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "arg_label"), 0, (0)), 100000000, 0, -11233), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11232), 0), 100000000, 0, -11231), 0), 100000000, 0, -11230)), 0, 1), "array", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag9 (("a")), 100000000, 0, -11225)], (0)), 100000000, 0, -11229), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("array", 8)), [(Tag9 (("a")), 100000000, 0, -11225)], (0)), 100000000, 0, -11228)], (0)), 100000000, 0, -11227), 0), 100000000, 0, -11226), [(Tag9 (("a")), 100000000, 0, -11225)]), 100000000, 0, -11224)), (0, "attribute", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "attribute"), 0, (0)), 100000000, 0, -11223), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11222), 0), 100000000, 0, -11221), 0), 100000000, 0, -11220)), 0, 1), 2), "attributes", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "attributes"), 0, (0)), 100000000, 0, -11219), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11218), 0), 100000000, 0, -11217), 0), 100000000, 0, -11216)), ((0, "binding_op", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "binding_op"), 0, (0)), 100000000, 0, -11215), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11214), 0), 100000000, 0, -11213), 0), 100000000, 0, -11212)), 0, 1), "bool", (0, 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -11211)], (0)), 100000000, 0, -11210), 0), 100000000, 0, -11209)), (0, "case", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "case"), 0, (0)), 100000000, 0, -11208), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11207), 0), 100000000, 0, -11206), 0), 100000000, 0, -11205)), 0, 1), 2), 3), "cases", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "cases"), 0, (0)), 100000000, 0, -11204), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11203), 0), 100000000, 0, -11202), 0), 100000000, 0, -11201)), (((0, "char", (0, 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -11200)], (0)), 100000000, 0, -11199), 0), 100000000, 0, -11198)), 0, 1), "class_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_declaration"), 0, (0)), 100000000, 0, -11197), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11196), 0), 100000000, 0, -11195), 0), 100000000, 0, -11194)), (0, "class_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_description"), 0, (0)), 100000000, 0, -11193), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11192), 0), 100000000, 0, -11191), 0), 100000000, 0, -11190)), 0, 1), 2), "class_expr", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_expr"), 0, (0)), 100000000, 0, -11189), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11188), 0), 100000000, 0, -11187), 0), 100000000, 0, -11186)), ((0, "class_expr_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_expr_desc"), 0, (0)), 100000000, 0, -11185), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11184), 0), 100000000, 0, -11183), 0), 100000000, 0, -11182)), 0, 1), "class_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_field"), 0, (0)), 100000000, 0, -11181), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11180), 0), 100000000, 0, -11179), 0), 100000000, 0, -11178)), (0, "class_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_field_desc"), 0, (0)), 100000000, 0, -11177), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11176), 0), 100000000, 0, -11175), 0), 100000000, 0, -11174)), 0, 1), 2), 3), 4), "class_field_kind", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_field_kind"), 0, (0)), 100000000, 0, -11173), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11172), 0), 100000000, 0, -11171), 0), 100000000, 0, -11170)), ((((0, "class_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -11163), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11169), 0), 100000000, 0, -11168), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_infos"), [(Tag9 (("a")), 100000000, 0, -11163)], (0)), 100000000, 0, -11167), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11166), 0), 100000000, 0, -11165), 0), 100000000, 0, -11164), [(Tag9 (("a")), 100000000, 0, -11163)]), 100000000, 0, -11162)), 0, 1), "class_signature", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_signature"), 0, (0)), 100000000, 0, -11161), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11160), 0), 100000000, 0, -11159), 0), 100000000, 0, -11158)), (0, "class_structure", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_structure"), 0, (0)), 100000000, 0, -11157), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11156), 0), 100000000, 0, -11155), 0), 100000000, 0, -11154)), 0, 1), 2), "class_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_type"), 0, (0)), 100000000, 0, -11153), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11152), 0), 100000000, 0, -11151), 0), 100000000, 0, -11150)), ((0, "class_type_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_type_declaration"), 0, (0)), 100000000, 0, -11149), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11148), 0), 100000000, 0, -11147), 0), 100000000, 0, -11146)), 0, 1), "class_type_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_type_desc"), 0, (0)), 100000000, 0, -11145), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11144), 0), 100000000, 0, -11143), 0), 100000000, 0, -11142)), (0, "class_type_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_type_field"), 0, (0)), 100000000, 0, -11141), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11140), 0), 100000000, 0, -11139), 0), 100000000, 0, -11138)), 0, 1), 2), 3), "class_type_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_type_field_desc"), 0, (0)), 100000000, 0, -11137), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11136), 0), 100000000, 0, -11135), 0), 100000000, 0, -11134)), (((0, "closed_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "closed_flag"), 0, (0)), 100000000, 0, -11133), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11132), 0), 100000000, 0, -11131), 0), 100000000, 0, -11130)), 0, 1), "constant", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "constant"), 0, (0)), 100000000, 0, -11129), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11128), 0), 100000000, 0, -11127), 0), 100000000, 0, -11126)), (0, "constructor_arguments", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "constructor_arguments"), 0, (0)), 100000000, 0, -11125), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11124), 0), 100000000, 0, -11123), 0), 100000000, 0, -11122)), 0, 1), 2), "constructor_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "constructor_declaration"), 0, (0)), 100000000, 0, -11121), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11120), 0), 100000000, 0, -11119), 0), 100000000, 0, -11118)), ((0, "core_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "core_type"), 0, (0)), 100000000, 0, -11117), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11116), 0), 100000000, 0, -11115), 0), 100000000, 0, -11114)), 0, 1), "core_type_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "core_type_desc"), 0, (0)), 100000000, 0, -11113), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11112), 0), 100000000, 0, -11111), 0), 100000000, 0, -11110)), (0, "direction_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "direction_flag"), 0, (0)), 100000000, 0, -11109), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11108), 0), 100000000, 0, -11107), 0), 100000000, 0, -11106)), 0, 1), 2), 3), 4), 5), "directive_argument", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "directive_argument"), 0, (0)), 100000000, 0, -11105), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11104), 0), 100000000, 0, -11103), 0), 100000000, 0, -11102)), ((((((0, "directive_argument_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "directive_argument_desc"), 0, (0)), 100000000, 0, -11101), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11100), 0), 100000000, 0, -11099), 0), 100000000, 0, -11098)), 0, 1), "expression", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "expression"), 0, (0)), 100000000, 0, -11097), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11096), 0), 100000000, 0, -11095), 0), 100000000, 0, -11094)), (0, "expression_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "expression_desc"), 0, (0)), 100000000, 0, -11093), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11092), 0), 100000000, 0, -11091), 0), 100000000, 0, -11090)), 0, 1), 2), "extension", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "extension"), 0, (0)), 100000000, 0, -11089), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11088), 0), 100000000, 0, -11087), 0), 100000000, 0, -11086)), ((0, "extension_constructor", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "extension_constructor"), 0, (0)), 100000000, 0, -11085), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11084), 0), 100000000, 0, -11083), 0), 100000000, 0, -11082)), 0, 1), "extension_constructor_kind", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "extension_constructor_kind"), 0, (0)), 100000000, 0, -11081), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11080), 0), 100000000, 0, -11079), 0), 100000000, 0, -11078)), (0, "functor_parameter", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "functor_parameter"), 0, (0)), 100000000, 0, -11077), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11076), 0), 100000000, 0, -11075), 0), 100000000, 0, -11074)), (0, "go", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11073), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "rec_flag"), 0, (0)), 100000000, 0, -11072), 0), 100000000, 0, -11071), 0), 100000000, 0, -11070)), 0, 1), 2), 3), 4), "include_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "include_declaration"), 0, (0)), 100000000, 0, -11069), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11068), 0), 100000000, 0, -11067), 0), 100000000, 0, -11066)), (((0, "include_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "include_description"), 0, (0)), 100000000, 0, -11065), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11064), 0), 100000000, 0, -11063), 0), 100000000, 0, -11062)), 0, 1), "include_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -11055), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11061), 0), 100000000, 0, -11060), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "include_infos"), [(Tag9 (("a")), 100000000, 0, -11055)], (0)), 100000000, 0, -11059), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11058), 0), 100000000, 0, -11057), 0), 100000000, 0, -11056), [(Tag9 (("a")), 100000000, 0, -11055)]), 100000000, 0, -11054)), (0, "injectivity", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "injectivity"), 0, (0)), 100000000, 0, -11053), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11052), 0), 100000000, 0, -11051), 0), 100000000, 0, -11050)), 0, 1), 2), "int", (0, 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11049)], (0)), 100000000, 0, -11048), 0), 100000000, 0, -11047)), ((0, "label", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "label"), 0, (0)), 100000000, 0, -11046), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11045), 0), 100000000, 0, -11044), 0), 100000000, 0, -11043)), 0, 1), "label_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "label_declaration"), 0, (0)), 100000000, 0, -11042), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11041), 0), 100000000, 0, -11040), 0), 100000000, 0, -11039)), (0, "letop", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "letop"), 0, (0)), 100000000, 0, -11038), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11037), 0), 100000000, 0, -11036), 0), 100000000, 0, -11035)), 0, 1), 2), 3), 5), "list", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag9 (("a")), 100000000, 0, -11030)], (0)), 100000000, 0, -11034), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -11030)], (0)), 100000000, 0, -11033)], (0)), 100000000, 0, -11032), 0), 100000000, 0, -11031), [(Tag9 (("a")), 100000000, 0, -11030)]), 100000000, 0, -11029)), ((((0, "loc", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -11022), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11028), 0), 100000000, 0, -11027), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "loc"), [(Tag9 (("a")), 100000000, 0, -11022)], (0)), 100000000, 0, -11026), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11025), 0), 100000000, 0, -11024), 0), 100000000, 0, -11023), [(Tag9 (("a")), 100000000, 0, -11022)]), 100000000, 0, -11021)), 0, 1), "location", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "location"), 0, (0)), 100000000, 0, -11020), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11019), 0), 100000000, 0, -11018), 0), 100000000, 0, -11017)), (0, "location_stack", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "location_stack"), 0, (0)), 100000000, 0, -11016), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11015), 0), 100000000, 0, -11014), 0), 100000000, 0, -11013)), 0, 1), 2), "longident", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "longident"), 0, (0)), 100000000, 0, -11012), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11011), 0), 100000000, 0, -11010), 0), 100000000, 0, -11009)), ((0, "longident_loc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "longident_loc"), 0, (0)), 100000000, 0, -11008), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11007), 0), 100000000, 0, -11006), 0), 100000000, 0, -11005)), 0, 1), "module_binding", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_binding"), 0, (0)), 100000000, 0, -11004), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11003), 0), 100000000, 0, -11002), 0), 100000000, 0, -11001)), (0, "module_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_declaration"), 0, (0)), 100000000, 0, -11000), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10999), 0), 100000000, 0, -10998), 0), 100000000, 0, -10997)), 0, 1), 2), 3), "module_expr", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_expr"), 0, (0)), 100000000, 0, -10996), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10995), 0), 100000000, 0, -10994), 0), 100000000, 0, -10993)), (((0, "module_expr_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_expr_desc"), 0, (0)), 100000000, 0, -10992), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10991), 0), 100000000, 0, -10990), 0), 100000000, 0, -10989)), 0, 1), "module_substitution", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_substitution"), 0, (0)), 100000000, 0, -10988), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10987), 0), 100000000, 0, -10986), 0), 100000000, 0, -10985)), (0, "module_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_type"), 0, (0)), 100000000, 0, -10984), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10983), 0), 100000000, 0, -10982), 0), 100000000, 0, -10981)), 0, 1), 2), "module_type_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_type_declaration"), 0, (0)), 100000000, 0, -10980), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10979), 0), 100000000, 0, -10978), 0), 100000000, 0, -10977)), ((0, "module_type_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_type_desc"), 0, (0)), 100000000, 0, -10976), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10975), 0), 100000000, 0, -10974), 0), 100000000, 0, -10973)), 0, 1), "mutable_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "mutable_flag"), 0, (0)), 100000000, 0, -10972), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10971), 0), 100000000, 0, -10970), 0), 100000000, 0, -10969)), (0, "object_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "object_field"), 0, (0)), 100000000, 0, -10968), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10967), 0), 100000000, 0, -10966), 0), 100000000, 0, -10965)), 0, 1), 2), 3), 4), 6), "object_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "object_field_desc"), 0, (0)), 100000000, 0, -10964), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10963), 0), 100000000, 0, -10962), 0), 100000000, 0, -10961)), (((((0, "open_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "open_declaration"), 0, (0)), 100000000, 0, -10960), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10959), 0), 100000000, 0, -10958), 0), 100000000, 0, -10957)), 0, 1), "open_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "open_description"), 0, (0)), 100000000, 0, -10956), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10955), 0), 100000000, 0, -10954), 0), 100000000, 0, -10953)), (0, "open_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -10946), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10952), 0), 100000000, 0, -10951), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "open_infos"), [(Tag9 (("a")), 100000000, 0, -10946)], (0)), 100000000, 0, -10950), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10949), 0), 100000000, 0, -10948), 0), 100000000, 0, -10947), [(Tag9 (("a")), 100000000, 0, -10946)]), 100000000, 0, -10945)), 0, 1), 2), "option", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag9 (("a")), 100000000, 0, -10940)], (0)), 100000000, 0, -10944), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -10940)], (0)), 100000000, 0, -10943)], (0)), 100000000, 0, -10942), 0), 100000000, 0, -10941), [(Tag9 (("a")), 100000000, 0, -10940)]), 100000000, 0, -10939)), ((0, "override_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "override_flag"), 0, (0)), 100000000, 0, -10938), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10937), 0), 100000000, 0, -10936), 0), 100000000, 0, -10935)), 0, 1), "package_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "package_type"), 0, (0)), 100000000, 0, -10934), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10933), 0), 100000000, 0, -10932), 0), 100000000, 0, -10931)), (0, "pattern", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "pattern"), 0, (0)), 100000000, 0, -10930), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10929), 0), 100000000, 0, -10928), 0), 100000000, 0, -10927)), 0, 1), 2), 3), "pattern_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "pattern_desc"), 0, (0)), 100000000, 0, -10926), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10925), 0), 100000000, 0, -10924), 0), 100000000, 0, -10923)), (((0, "payload", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "payload"), 0, (0)), 100000000, 0, -10922), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10921), 0), 100000000, 0, -10920), 0), 100000000, 0, -10919)), 0, 1), "position", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "position"), 0, (0)), 100000000, 0, -10918), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10917), 0), 100000000, 0, -10916), 0), 100000000, 0, -10915)), (0, "private_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "private_flag"), 0, (0)), 100000000, 0, -10914), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10913), 0), 100000000, 0, -10912), 0), 100000000, 0, -10911)), 0, 1), 2), "rec_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "rec_flag"), 0, (0)), 100000000, 0, -10910), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10909), 0), 100000000, 0, -10908), 0), 100000000, 0, -10907)), (((0, "return_true", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10906), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10905), 0), 100000000, 0, -10904), 0), 100000000, 0, -10903)), 0, 1), "row_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "row_field"), 0, (0)), 100000000, 0, -10902), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10901), 0), 100000000, 0, -10900), 0), 100000000, 0, -10899)), 0, 2), "row_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "row_field_desc"), 0, (0)), 100000000, 0, -10898), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10897), 0), 100000000, 0, -10896), 0), 100000000, 0, -10895)), (0, "signature", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "signature"), 0, (0)), 100000000, 0, -10894), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10893), 0), 100000000, 0, -10892), 0), 100000000, 0, -10891)), 0, 1), 3), 4), 5), "signature_item", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "signature_item"), 0, (0)), 100000000, 0, -10890), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10889), 0), 100000000, 0, -10888), 0), 100000000, 0, -10887)), ((((0, "signature_item_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "signature_item_desc"), 0, (0)), 100000000, 0, -10886), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10885), 0), 100000000, 0, -10884), 0), 100000000, 0, -10883)), 0, 1), "string", (0, 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10882)], (0)), 100000000, 0, -10881), 0), 100000000, 0, -10880)), (0, "structure", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "structure"), 0, (0)), 100000000, 0, -10879), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10878), 0), 100000000, 0, -10877), 0), 100000000, 0, -10876)), 0, 1), 2), "structure_item", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "structure_item"), 0, (0)), 100000000, 0, -10875), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10874), 0), 100000000, 0, -10873), 0), 100000000, 0, -10872)), ((0, "structure_item_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "structure_item_desc"), 0, (0)), 100000000, 0, -10871), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10870), 0), 100000000, 0, -10869), 0), 100000000, 0, -10868)), 0, 1), "toplevel_directive", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "toplevel_directive"), 0, (0)), 100000000, 0, -10867), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10866), 0), 100000000, 0, -10865), 0), 100000000, 0, -10864)), (0, "toplevel_phrase", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "toplevel_phrase"), 0, (0)), 100000000, 0, -10863), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10862), 0), 100000000, 0, -10861), 0), 100000000, 0, -10860)), 0, 1), 2), 3), "type_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "type_declaration"), 0, (0)), 100000000, 0, -10859), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10858), 0), 100000000, 0, -10857), 0), 100000000, 0, -10856)), (((0, "type_exception", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "type_exception"), 0, (0)), 100000000, 0, -10855), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10854), 0), 100000000, 0, -10853), 0), 100000000, 0, -10852)), 0, 1), "type_extension", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "type_extension"), 0, (0)), 100000000, 0, -10851), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10850), 0), 100000000, 0, -10849), 0), 100000000, 0, -10848)), (0, "type_kind", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "type_kind"), 0, (0)), 100000000, 0, -10847), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10846), 0), 100000000, 0, -10845), 0), 100000000, 0, -10844)), 0, 1), 2), "value_binding", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "value_binding"), 0, (0)), 100000000, 0, -10843), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10842), 0), 100000000, 0, -10841), 0), 100000000, 0, -10840)), ((0, "value_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "value_description"), 0, (0)), 100000000, 0, -10839), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10838), 0), 100000000, 0, -10837), 0), 100000000, 0, -10836)), 0, 1), "variance", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "variance"), 0, (0)), 100000000, 0, -10835), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10834), 0), 100000000, 0, -10833), 0), 100000000, 0, -10832)), (0, "virtual_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "virtual_flag"), 0, (0)), 100000000, 0, -10831), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10830), 0), 100000000, 0, -10829), 0), 100000000, 0, -10828)), (0, "with_constraint", (0, 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "with_constraint"), 0, (0)), 100000000, 0, -10827), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10826), 0), 100000000, 0, -10825), 0), 100000000, 0, -10824)), 0, 1), 2), 3), 4), 5), 6), 7), 8))), (("type_is_recursive", 7333)), (0, 0, 0, 1, ((Tag4 ((Tag5 ("bool", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -11211)], (0)), 100000000, 0, -11210), 0), 100000000, 0, -11209), (Tag5 ("char", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -11200)], (0)), 100000000, 0, -11199), 0), 100000000, 0, -11198), (Tag5 ("int", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11049)], (0)), 100000000, 0, -11048), 0), 100000000, 0, -11047), (Tag5 ("list", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag9 (("a")), 100000000, 0, -11030)], (0)), 100000000, 0, -11034), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -11030)], (0)), 100000000, 0, -11033)], (0)), 100000000, 0, -11032), 0), 100000000, 0, -11031), [(Tag9 (("a")), 100000000, 0, -11030)]), 100000000, 0, -11029), (Tag5 ("option", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag9 (("a")), 100000000, 0, -10940)], (0)), 100000000, 0, -10944), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -10940)], (0)), 100000000, 0, -10943)], (0)), 100000000, 0, -10942), 0), 100000000, 0, -10941), [(Tag9 (("a")), 100000000, 0, -10940)]), 100000000, 0, -10939), (Tag5 ("string", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10882)], (0)), 100000000, 0, -10881), 0), 100000000, 0, -10880), (Tag5 ("position", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "position"), 0, (0)), 100000000, 0, -10918), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10917), 0), 100000000, 0, -10916), 0), 100000000, 0, -10915), (Tag5 ("location", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "location"), 0, (0)), 100000000, 0, -11020), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11019), 0), 100000000, 0, -11018), 0), 100000000, 0, -11017), (Tag5 ("location_stack", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "location_stack"), 0, (0)), 100000000, 0, -11016), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11015), 0), 100000000, 0, -11014), 0), 100000000, 0, -11013), (Tag5 ("loc", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -11022), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11028), 0), 100000000, 0, -11027), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "loc"), [(Tag9 (("a")), 100000000, 0, -11022)], (0)), 100000000, 0, -11026), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11025), 0), 100000000, 0, -11024), 0), 100000000, 0, -11023), [(Tag9 (("a")), 100000000, 0, -11022)]), 100000000, 0, -11021), (Tag5 ("longident", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "longident"), 0, (0)), 100000000, 0, -11012), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11011), 0), 100000000, 0, -11010), 0), 100000000, 0, -11009), (Tag5 ("longident_loc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "longident_loc"), 0, (0)), 100000000, 0, -11008), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11007), 0), 100000000, 0, -11006), 0), 100000000, 0, -11005), (Tag5 ("rec_flag", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "rec_flag"), 0, (0)), 100000000, 0, -10910), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10909), 0), 100000000, 0, -10908), 0), 100000000, 0, -10907), (Tag5 ("direction_flag", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "direction_flag"), 0, (0)), 100000000, 0, -11109), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11108), 0), 100000000, 0, -11107), 0), 100000000, 0, -11106), (Tag5 ("private_flag", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "private_flag"), 0, (0)), 100000000, 0, -10914), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10913), 0), 100000000, 0, -10912), 0), 100000000, 0, -10911), (Tag5 ("mutable_flag", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "mutable_flag"), 0, (0)), 100000000, 0, -10972), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10971), 0), 100000000, 0, -10970), 0), 100000000, 0, -10969), (Tag5 ("virtual_flag", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "virtual_flag"), 0, (0)), 100000000, 0, -10831), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10830), 0), 100000000, 0, -10829), 0), 100000000, 0, -10828), (Tag5 ("override_flag", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "override_flag"), 0, (0)), 100000000, 0, -10938), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10937), 0), 100000000, 0, -10936), 0), 100000000, 0, -10935), (Tag5 ("closed_flag", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "closed_flag"), 0, (0)), 100000000, 0, -11133), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11132), 0), 100000000, 0, -11131), 0), 100000000, 0, -11130), (Tag5 ("label", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "label"), 0, (0)), 100000000, 0, -11046), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11045), 0), 100000000, 0, -11044), 0), 100000000, 0, -11043), (Tag5 ("arg_label", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "arg_label"), 0, (0)), 100000000, 0, -11233), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11232), 0), 100000000, 0, -11231), 0), 100000000, 0, -11230), (Tag5 ("variance", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "variance"), 0, (0)), 100000000, 0, -10835), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10834), 0), 100000000, 0, -10833), 0), 100000000, 0, -10832), (Tag5 ("injectivity", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "injectivity"), 0, (0)), 100000000, 0, -11053), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11052), 0), 100000000, 0, -11051), 0), 100000000, 0, -11050), (Tag5 ("constant", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "constant"), 0, (0)), 100000000, 0, -11129), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11128), 0), 100000000, 0, -11127), 0), 100000000, 0, -11126), (Tag5 ("attribute", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "attribute"), 0, (0)), 100000000, 0, -11223), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11222), 0), 100000000, 0, -11221), 0), 100000000, 0, -11220), (Tag5 ("extension", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "extension"), 0, (0)), 100000000, 0, -11089), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11088), 0), 100000000, 0, -11087), 0), 100000000, 0, -11086), (Tag5 ("attributes", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "attributes"), 0, (0)), 100000000, 0, -11219), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11218), 0), 100000000, 0, -11217), 0), 100000000, 0, -11216), (Tag5 ("payload", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "payload"), 0, (0)), 100000000, 0, -10922), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10921), 0), 100000000, 0, -10920), 0), 100000000, 0, -10919), (Tag5 ("core_type", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "core_type"), 0, (0)), 100000000, 0, -11117), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11116), 0), 100000000, 0, -11115), 0), 100000000, 0, -11114), (Tag5 ("core_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "core_type_desc"), 0, (0)), 100000000, 0, -11113), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11112), 0), 100000000, 0, -11111), 0), 100000000, 0, -11110), (Tag5 ("package_type", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "package_type"), 0, (0)), 100000000, 0, -10934), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10933), 0), 100000000, 0, -10932), 0), 100000000, 0, -10931), (Tag5 ("row_field", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "row_field"), 0, (0)), 100000000, 0, -10902), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10901), 0), 100000000, 0, -10900), 0), 100000000, 0, -10899), (Tag5 ("row_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "row_field_desc"), 0, (0)), 100000000, 0, -10898), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10897), 0), 100000000, 0, -10896), 0), 100000000, 0, -10895), (Tag5 ("object_field", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "object_field"), 0, (0)), 100000000, 0, -10968), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10967), 0), 100000000, 0, -10966), 0), 100000000, 0, -10965), (Tag5 ("object_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "object_field_desc"), 0, (0)), 100000000, 0, -10964), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10963), 0), 100000000, 0, -10962), 0), 100000000, 0, -10961), (Tag5 ("pattern", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "pattern"), 0, (0)), 100000000, 0, -10930), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10929), 0), 100000000, 0, -10928), 0), 100000000, 0, -10927), (Tag5 ("pattern_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "pattern_desc"), 0, (0)), 100000000, 0, -10926), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10925), 0), 100000000, 0, -10924), 0), 100000000, 0, -10923), (Tag5 ("expression", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "expression"), 0, (0)), 100000000, 0, -11097), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11096), 0), 100000000, 0, -11095), 0), 100000000, 0, -11094), (Tag5 ("expression_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "expression_desc"), 0, (0)), 100000000, 0, -11093), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11092), 0), 100000000, 0, -11091), 0), 100000000, 0, -11090), (Tag5 ("case", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "case"), 0, (0)), 100000000, 0, -11208), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11207), 0), 100000000, 0, -11206), 0), 100000000, 0, -11205), (Tag5 ("letop", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "letop"), 0, (0)), 100000000, 0, -11038), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11037), 0), 100000000, 0, -11036), 0), 100000000, 0, -11035), (Tag5 ("binding_op", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "binding_op"), 0, (0)), 100000000, 0, -11215), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11214), 0), 100000000, 0, -11213), 0), 100000000, 0, -11212), (Tag5 ("value_description", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "value_description"), 0, (0)), 100000000, 0, -10839), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10838), 0), 100000000, 0, -10837), 0), 100000000, 0, -10836), (Tag5 ("type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "type_declaration"), 0, (0)), 100000000, 0, -10859), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10858), 0), 100000000, 0, -10857), 0), 100000000, 0, -10856), (Tag5 ("type_kind", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "type_kind"), 0, (0)), 100000000, 0, -10847), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10846), 0), 100000000, 0, -10845), 0), 100000000, 0, -10844), (Tag5 ("label_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "label_declaration"), 0, (0)), 100000000, 0, -11042), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11041), 0), 100000000, 0, -11040), 0), 100000000, 0, -11039), (Tag5 ("constructor_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "constructor_declaration"), 0, (0)), 100000000, 0, -11121), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11120), 0), 100000000, 0, -11119), 0), 100000000, 0, -11118), (Tag5 ("constructor_arguments", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "constructor_arguments"), 0, (0)), 100000000, 0, -11125), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11124), 0), 100000000, 0, -11123), 0), 100000000, 0, -11122), (Tag5 ("type_extension", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "type_extension"), 0, (0)), 100000000, 0, -10851), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10850), 0), 100000000, 0, -10849), 0), 100000000, 0, -10848), (Tag5 ("extension_constructor", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "extension_constructor"), 0, (0)), 100000000, 0, -11085), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11084), 0), 100000000, 0, -11083), 0), 100000000, 0, -11082), (Tag5 ("type_exception", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "type_exception"), 0, (0)), 100000000, 0, -10855), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10854), 0), 100000000, 0, -10853), 0), 100000000, 0, -10852), (Tag5 ("extension_constructor_kind", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "extension_constructor_kind"), 0, (0)), 100000000, 0, -11081), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11080), 0), 100000000, 0, -11079), 0), 100000000, 0, -11078), (Tag5 ("class_type", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_type"), 0, (0)), 100000000, 0, -11153), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11152), 0), 100000000, 0, -11151), 0), 100000000, 0, -11150), (Tag5 ("class_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_type_desc"), 0, (0)), 100000000, 0, -11145), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11144), 0), 100000000, 0, -11143), 0), 100000000, 0, -11142), (Tag5 ("class_signature", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_signature"), 0, (0)), 100000000, 0, -11161), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11160), 0), 100000000, 0, -11159), 0), 100000000, 0, -11158), (Tag5 ("class_type_field", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_type_field"), 0, (0)), 100000000, 0, -11141), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11140), 0), 100000000, 0, -11139), 0), 100000000, 0, -11138), (Tag5 ("class_type_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_type_field_desc"), 0, (0)), 100000000, 0, -11137), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11136), 0), 100000000, 0, -11135), 0), 100000000, 0, -11134), (Tag5 ("class_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -11163), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11169), 0), 100000000, 0, -11168), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_infos"), [(Tag9 (("a")), 100000000, 0, -11163)], (0)), 100000000, 0, -11167), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11166), 0), 100000000, 0, -11165), 0), 100000000, 0, -11164), [(Tag9 (("a")), 100000000, 0, -11163)]), 100000000, 0, -11162), (Tag5 ("class_description", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_description"), 0, (0)), 100000000, 0, -11193), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11192), 0), 100000000, 0, -11191), 0), 100000000, 0, -11190), (Tag5 ("class_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_type_declaration"), 0, (0)), 100000000, 0, -11149), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11148), 0), 100000000, 0, -11147), 0), 100000000, 0, -11146), (Tag5 ("class_expr", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_expr"), 0, (0)), 100000000, 0, -11189), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11188), 0), 100000000, 0, -11187), 0), 100000000, 0, -11186), (Tag5 ("class_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_expr_desc"), 0, (0)), 100000000, 0, -11185), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11184), 0), 100000000, 0, -11183), 0), 100000000, 0, -11182), (Tag5 ("class_structure", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_structure"), 0, (0)), 100000000, 0, -11157), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11156), 0), 100000000, 0, -11155), 0), 100000000, 0, -11154), (Tag5 ("class_field", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_field"), 0, (0)), 100000000, 0, -11181), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11180), 0), 100000000, 0, -11179), 0), 100000000, 0, -11178), (Tag5 ("class_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_field_desc"), 0, (0)), 100000000, 0, -11177), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11176), 0), 100000000, 0, -11175), 0), 100000000, 0, -11174), (Tag5 ("class_field_kind", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_field_kind"), 0, (0)), 100000000, 0, -11173), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11172), 0), 100000000, 0, -11171), 0), 100000000, 0, -11170), (Tag5 ("class_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_declaration"), 0, (0)), 100000000, 0, -11197), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11196), 0), 100000000, 0, -11195), 0), 100000000, 0, -11194), (Tag5 ("module_type", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_type"), 0, (0)), 100000000, 0, -10984), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10983), 0), 100000000, 0, -10982), 0), 100000000, 0, -10981), (Tag5 ("module_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_type_desc"), 0, (0)), 100000000, 0, -10976), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10975), 0), 100000000, 0, -10974), 0), 100000000, 0, -10973), (Tag5 ("functor_parameter", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "functor_parameter"), 0, (0)), 100000000, 0, -11077), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11076), 0), 100000000, 0, -11075), 0), 100000000, 0, -11074), (Tag5 ("signature", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "signature"), 0, (0)), 100000000, 0, -10894), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10893), 0), 100000000, 0, -10892), 0), 100000000, 0, -10891), (Tag5 ("signature_item", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "signature_item"), 0, (0)), 100000000, 0, -10890), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10889), 0), 100000000, 0, -10888), 0), 100000000, 0, -10887), (Tag5 ("signature_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "signature_item_desc"), 0, (0)), 100000000, 0, -10886), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10885), 0), 100000000, 0, -10884), 0), 100000000, 0, -10883), (Tag5 ("module_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_declaration"), 0, (0)), 100000000, 0, -11000), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10999), 0), 100000000, 0, -10998), 0), 100000000, 0, -10997), (Tag5 ("module_substitution", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_substitution"), 0, (0)), 100000000, 0, -10988), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10987), 0), 100000000, 0, -10986), 0), 100000000, 0, -10985), (Tag5 ("module_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_type_declaration"), 0, (0)), 100000000, 0, -10980), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10979), 0), 100000000, 0, -10978), 0), 100000000, 0, -10977), (Tag5 ("open_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -10946), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10952), 0), 100000000, 0, -10951), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "open_infos"), [(Tag9 (("a")), 100000000, 0, -10946)], (0)), 100000000, 0, -10950), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10949), 0), 100000000, 0, -10948), 0), 100000000, 0, -10947), [(Tag9 (("a")), 100000000, 0, -10946)]), 100000000, 0, -10945), (Tag5 ("open_description", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "open_description"), 0, (0)), 100000000, 0, -10956), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10955), 0), 100000000, 0, -10954), 0), 100000000, 0, -10953), (Tag5 ("open_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "open_declaration"), 0, (0)), 100000000, 0, -10960), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10959), 0), 100000000, 0, -10958), 0), 100000000, 0, -10957), (Tag5 ("include_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -11055), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11061), 0), 100000000, 0, -11060), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "include_infos"), [(Tag9 (("a")), 100000000, 0, -11055)], (0)), 100000000, 0, -11059), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11058), 0), 100000000, 0, -11057), 0), 100000000, 0, -11056), [(Tag9 (("a")), 100000000, 0, -11055)]), 100000000, 0, -11054), (Tag5 ("include_description", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "include_description"), 0, (0)), 100000000, 0, -11065), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11064), 0), 100000000, 0, -11063), 0), 100000000, 0, -11062), (Tag5 ("include_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "include_declaration"), 0, (0)), 100000000, 0, -11069), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11068), 0), 100000000, 0, -11067), 0), 100000000, 0, -11066), (Tag5 ("with_constraint", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "with_constraint"), 0, (0)), 100000000, 0, -10827), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10826), 0), 100000000, 0, -10825), 0), 100000000, 0, -10824), (Tag5 ("module_expr", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_expr"), 0, (0)), 100000000, 0, -10996), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10995), 0), 100000000, 0, -10994), 0), 100000000, 0, -10993), (Tag5 ("module_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_expr_desc"), 0, (0)), 100000000, 0, -10992), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10991), 0), 100000000, 0, -10990), 0), 100000000, 0, -10989), (Tag5 ("structure", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "structure"), 0, (0)), 100000000, 0, -10879), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10878), 0), 100000000, 0, -10877), 0), 100000000, 0, -10876), (Tag5 ("structure_item", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "structure_item"), 0, (0)), 100000000, 0, -10875), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10874), 0), 100000000, 0, -10873), 0), 100000000, 0, -10872), (Tag5 ("structure_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "structure_item_desc"), 0, (0)), 100000000, 0, -10871), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10870), 0), 100000000, 0, -10869), 0), 100000000, 0, -10868), (Tag5 ("value_binding", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "value_binding"), 0, (0)), 100000000, 0, -10843), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10842), 0), 100000000, 0, -10841), 0), 100000000, 0, -10840), (Tag5 ("module_binding", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_binding"), 0, (0)), 100000000, 0, -11004), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11003), 0), 100000000, 0, -11002), 0), 100000000, 0, -11001), (Tag5 ("toplevel_phrase", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "toplevel_phrase"), 0, (0)), 100000000, 0, -10863), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10862), 0), 100000000, 0, -10861), 0), 100000000, 0, -10860), (Tag5 ("toplevel_directive", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "toplevel_directive"), 0, (0)), 100000000, 0, -10867), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10866), 0), 100000000, 0, -10865), 0), 100000000, 0, -10864), (Tag5 ("directive_argument", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "directive_argument"), 0, (0)), 100000000, 0, -11105), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11104), 0), 100000000, 0, -11103), 0), 100000000, 0, -11102), (Tag5 ("directive_argument_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "directive_argument_desc"), 0, (0)), 100000000, 0, -11101), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11100), 0), 100000000, 0, -11099), 0), 100000000, 0, -11098), (Tag5 ("cases", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "cases"), 0, (0)), 100000000, 0, -11204), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11203), 0), 100000000, 0, -11202), 0), 100000000, 0, -11201), (Tag5 ("array", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag9 (("a")), 100000000, 0, -11225)], (0)), 100000000, 0, -11229), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("array", 8)), [(Tag9 (("a")), 100000000, 0, -11225)], (0)), 100000000, 0, -11228)], (0)), 100000000, 0, -11227), 0), 100000000, 0, -11226), [(Tag9 (("a")), 100000000, 0, -11225)]), 100000000, 0, -11224), (Tag5 ("return_true", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10906), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10905), 0), 100000000, 0, -10904), 0), 100000000, 0, -10903), (Tag5 ("go", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11073), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "rec_flag"), 0, (0)), 100000000, 0, -11072), 0), 100000000, 0, -11071), 0), 100000000, 0, -11070), ((0), 100000000, 0, -11333)), 100000000, 0, -11332)), 100000000, 0, -11331)), 100000000, 0, -11330)), 100000000, 0, -11329)), 100000000, 0, -11328)), 100000000, 0, -11327)), 100000000, 0, -11326)), 100000000, 0, -11325)), 100000000, 0, -11324)), 100000000, 0, -11323)), 100000000, 0, -11322)), 100000000, 0, -11321)), 100000000, 0, -11320)), 100000000, 0, -11319)), 100000000, 0, -11318)), 100000000, 0, -11317)), 100000000, 0, -11316)), 100000000, 0, -11315)), 100000000, 0, -11314)), 100000000, 0, -11313)), 100000000, 0, -11312)), 100000000, 0, -11311)), 100000000, 0, -11310)), 100000000, 0, -11309)), 100000000, 0, -11308)), 100000000, 0, -11307)), 100000000, 0, -11306)), 100000000, 0, -11305)), 100000000, 0, -11304)), 100000000, 0, -11303)), 100000000, 0, -11302)), 100000000, 0, -11301)), 100000000, 0, -11300)), 100000000, 0, -11299)), 100000000, 0, -11298)), 100000000, 0, -11297)), 100000000, 0, -11296)), 100000000, 0, -11295)), 100000000, 0, -11294)), 100000000, 0, -11293)), 100000000, 0, -11292)), 100000000, 0, -11291)), 100000000, 0, -11290)), 100000000, 0, -11289)), 100000000, 0, -11288)), 100000000, 0, -11287)), 100000000, 0, -11286)), 100000000, 0, -11285)), 100000000, 0, -11284)), 100000000, 0, -11283)), 100000000, 0, -11282)), 100000000, 0, -11281)), 100000000, 0, -11280)), 100000000, 0, -11279)), 100000000, 0, -11278)), 100000000, 0, -11277)), 100000000, 0, -11276)), 100000000, 0, -11275)), 100000000, 0, -11274)), 100000000, 0, -11273)), 100000000, 0, -11272)), 100000000, 0, -11271)), 100000000, 0, -11270)), 100000000, 0, -11269)), 100000000, 0, -11268)), 100000000, 0, -11267)), 100000000, 0, -11266)), 100000000, 0, -11265)), 100000000, 0, -11264)), 100000000, 0, -11263)), 100000000, 0, -11262)), 100000000, 0, -11261)), 100000000, 0, -11260)), 100000000, 0, -11259)), 100000000, 0, -11258)), 100000000, 0, -11257)), 100000000, 0, -11256)), 100000000, 0, -11255)), 100000000, 0, -11254)), 100000000, 0, -11253)), 100000000, 0, -11252)), 100000000, 0, -11251)), 100000000, 0, -11250)), 100000000, 0, -11249)), 100000000, 0, -11248)), 100000000, 0, -11247)), 100000000, 0, -11246)), 100000000, 0, -11245)), 100000000, 0, -11244)), 100000000, 0, -11243)), 100000000, 0, -11242)), 100000000, 0, -11241)), 100000000, 0, -11240)), 100000000, 0, -11239)), 100000000, 0, -11238)), 100000000, 0, -11237)), 100000000, 0, -11236)), 100000000, 0, -11235), (([(("type_is_recursive", 7333)); ((0), 100000000, 0, -11333)]))), 100000000, 0, -11234)), 0, 0, 0, 0, (("src/common.mli", 40, 1580, 1580), ("src/common.mli", 48, 1803, 1811), 0), 0, 0, 0, Tag1 ("Ppxlib__Common", 13)), 0, (("src/common.mli", 40, 1580, 1580), ("src/common.mli", 48, 1803, 1811), 0), 0, Tag1 ("Ppxlib__Common", 13)), 1, 0); Tag1 (("type_is_recursive", 7333), (0, 0, 0, 1, ((Tag4 ((Tag5 ("arg_label", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "arg_label"), 0, (0)), 100000000, 0, -11233), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11232), 0), 100000000, 0, -11231), 0), 100000000, 0, -11230), (Tag5 ("array", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag9 (("a")), 100000000, 0, -11225)], (0)), 100000000, 0, -11229), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("array", 8)), [(Tag9 (("a")), 100000000, 0, -11225)], (0)), 100000000, 0, -11228)], (0)), 100000000, 0, -11227), 0), 100000000, 0, -11226), [(Tag9 (("a")), 100000000, 0, -11225)]), 100000000, 0, -11224), (Tag5 ("attribute", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "attribute"), 0, (0)), 100000000, 0, -11223), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11222), 0), 100000000, 0, -11221), 0), 100000000, 0, -11220), (Tag5 ("attributes", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "attributes"), 0, (0)), 100000000, 0, -11219), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11218), 0), 100000000, 0, -11217), 0), 100000000, 0, -11216), (Tag5 ("binding_op", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "binding_op"), 0, (0)), 100000000, 0, -11215), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11214), 0), 100000000, 0, -11213), 0), 100000000, 0, -11212), (Tag5 ("bool", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -11211)], (0)), 100000000, 0, -11210), 0), 100000000, 0, -11209), (Tag5 ("case", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "case"), 0, (0)), 100000000, 0, -11208), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11207), 0), 100000000, 0, -11206), 0), 100000000, 0, -11205), (Tag5 ("cases", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "cases"), 0, (0)), 100000000, 0, -11204), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11203), 0), 100000000, 0, -11202), 0), 100000000, 0, -11201), (Tag5 ("char", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -11200)], (0)), 100000000, 0, -11199), 0), 100000000, 0, -11198), (Tag5 ("class_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_declaration"), 0, (0)), 100000000, 0, -11197), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11196), 0), 100000000, 0, -11195), 0), 100000000, 0, -11194), (Tag5 ("class_description", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_description"), 0, (0)), 100000000, 0, -11193), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11192), 0), 100000000, 0, -11191), 0), 100000000, 0, -11190), (Tag5 ("class_expr", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_expr"), 0, (0)), 100000000, 0, -11189), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11188), 0), 100000000, 0, -11187), 0), 100000000, 0, -11186), (Tag5 ("class_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_expr_desc"), 0, (0)), 100000000, 0, -11185), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11184), 0), 100000000, 0, -11183), 0), 100000000, 0, -11182), (Tag5 ("class_field", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_field"), 0, (0)), 100000000, 0, -11181), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11180), 0), 100000000, 0, -11179), 0), 100000000, 0, -11178), (Tag5 ("class_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_field_desc"), 0, (0)), 100000000, 0, -11177), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11176), 0), 100000000, 0, -11175), 0), 100000000, 0, -11174), (Tag5 ("class_field_kind", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_field_kind"), 0, (0)), 100000000, 0, -11173), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11172), 0), 100000000, 0, -11171), 0), 100000000, 0, -11170), (Tag5 ("class_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -11163), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11169), 0), 100000000, 0, -11168), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_infos"), [(Tag9 (("a")), 100000000, 0, -11163)], (0)), 100000000, 0, -11167), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11166), 0), 100000000, 0, -11165), 0), 100000000, 0, -11164), [(Tag9 (("a")), 100000000, 0, -11163)]), 100000000, 0, -11162), (Tag5 ("class_signature", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_signature"), 0, (0)), 100000000, 0, -11161), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11160), 0), 100000000, 0, -11159), 0), 100000000, 0, -11158), (Tag5 ("class_structure", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_structure"), 0, (0)), 100000000, 0, -11157), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11156), 0), 100000000, 0, -11155), 0), 100000000, 0, -11154), (Tag5 ("class_type", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_type"), 0, (0)), 100000000, 0, -11153), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11152), 0), 100000000, 0, -11151), 0), 100000000, 0, -11150), (Tag5 ("class_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_type_declaration"), 0, (0)), 100000000, 0, -11149), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11148), 0), 100000000, 0, -11147), 0), 100000000, 0, -11146), (Tag5 ("class_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_type_desc"), 0, (0)), 100000000, 0, -11145), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11144), 0), 100000000, 0, -11143), 0), 100000000, 0, -11142), (Tag5 ("class_type_field", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_type_field"), 0, (0)), 100000000, 0, -11141), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11140), 0), 100000000, 0, -11139), 0), 100000000, 0, -11138), (Tag5 ("class_type_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "class_type_field_desc"), 0, (0)), 100000000, 0, -11137), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11136), 0), 100000000, 0, -11135), 0), 100000000, 0, -11134), (Tag5 ("closed_flag", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "closed_flag"), 0, (0)), 100000000, 0, -11133), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11132), 0), 100000000, 0, -11131), 0), 100000000, 0, -11130), (Tag5 ("constant", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "constant"), 0, (0)), 100000000, 0, -11129), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11128), 0), 100000000, 0, -11127), 0), 100000000, 0, -11126), (Tag5 ("constructor_arguments", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "constructor_arguments"), 0, (0)), 100000000, 0, -11125), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11124), 0), 100000000, 0, -11123), 0), 100000000, 0, -11122), (Tag5 ("constructor_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "constructor_declaration"), 0, (0)), 100000000, 0, -11121), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11120), 0), 100000000, 0, -11119), 0), 100000000, 0, -11118), (Tag5 ("core_type", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "core_type"), 0, (0)), 100000000, 0, -11117), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11116), 0), 100000000, 0, -11115), 0), 100000000, 0, -11114), (Tag5 ("core_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "core_type_desc"), 0, (0)), 100000000, 0, -11113), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11112), 0), 100000000, 0, -11111), 0), 100000000, 0, -11110), (Tag5 ("direction_flag", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "direction_flag"), 0, (0)), 100000000, 0, -11109), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11108), 0), 100000000, 0, -11107), 0), 100000000, 0, -11106), (Tag5 ("directive_argument", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "directive_argument"), 0, (0)), 100000000, 0, -11105), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11104), 0), 100000000, 0, -11103), 0), 100000000, 0, -11102), (Tag5 ("directive_argument_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "directive_argument_desc"), 0, (0)), 100000000, 0, -11101), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11100), 0), 100000000, 0, -11099), 0), 100000000, 0, -11098), (Tag5 ("expression", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "expression"), 0, (0)), 100000000, 0, -11097), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11096), 0), 100000000, 0, -11095), 0), 100000000, 0, -11094), (Tag5 ("expression_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "expression_desc"), 0, (0)), 100000000, 0, -11093), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11092), 0), 100000000, 0, -11091), 0), 100000000, 0, -11090), (Tag5 ("extension", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "extension"), 0, (0)), 100000000, 0, -11089), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11088), 0), 100000000, 0, -11087), 0), 100000000, 0, -11086), (Tag5 ("extension_constructor", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "extension_constructor"), 0, (0)), 100000000, 0, -11085), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11084), 0), 100000000, 0, -11083), 0), 100000000, 0, -11082), (Tag5 ("extension_constructor_kind", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "extension_constructor_kind"), 0, (0)), 100000000, 0, -11081), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11080), 0), 100000000, 0, -11079), 0), 100000000, 0, -11078), (Tag5 ("functor_parameter", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "functor_parameter"), 0, (0)), 100000000, 0, -11077), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11076), 0), 100000000, 0, -11075), 0), 100000000, 0, -11074), (Tag5 ("go", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11073), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "rec_flag"), 0, (0)), 100000000, 0, -11072), 0), 100000000, 0, -11071), 0), 100000000, 0, -11070), (Tag5 ("include_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "include_declaration"), 0, (0)), 100000000, 0, -11069), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11068), 0), 100000000, 0, -11067), 0), 100000000, 0, -11066), (Tag5 ("include_description", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "include_description"), 0, (0)), 100000000, 0, -11065), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11064), 0), 100000000, 0, -11063), 0), 100000000, 0, -11062), (Tag5 ("include_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -11055), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11061), 0), 100000000, 0, -11060), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "include_infos"), [(Tag9 (("a")), 100000000, 0, -11055)], (0)), 100000000, 0, -11059), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11058), 0), 100000000, 0, -11057), 0), 100000000, 0, -11056), [(Tag9 (("a")), 100000000, 0, -11055)]), 100000000, 0, -11054), (Tag5 ("injectivity", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "injectivity"), 0, (0)), 100000000, 0, -11053), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11052), 0), 100000000, 0, -11051), 0), 100000000, 0, -11050), (Tag5 ("int", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11049)], (0)), 100000000, 0, -11048), 0), 100000000, 0, -11047), (Tag5 ("label", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "label"), 0, (0)), 100000000, 0, -11046), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11045), 0), 100000000, 0, -11044), 0), 100000000, 0, -11043), (Tag5 ("label_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "label_declaration"), 0, (0)), 100000000, 0, -11042), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11041), 0), 100000000, 0, -11040), 0), 100000000, 0, -11039), (Tag5 ("letop", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "letop"), 0, (0)), 100000000, 0, -11038), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11037), 0), 100000000, 0, -11036), 0), 100000000, 0, -11035), (Tag5 ("list", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag9 (("a")), 100000000, 0, -11030)], (0)), 100000000, 0, -11034), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -11030)], (0)), 100000000, 0, -11033)], (0)), 100000000, 0, -11032), 0), 100000000, 0, -11031), [(Tag9 (("a")), 100000000, 0, -11030)]), 100000000, 0, -11029), (Tag5 ("loc", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -11022), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11028), 0), 100000000, 0, -11027), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "loc"), [(Tag9 (("a")), 100000000, 0, -11022)], (0)), 100000000, 0, -11026), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11025), 0), 100000000, 0, -11024), 0), 100000000, 0, -11023), [(Tag9 (("a")), 100000000, 0, -11022)]), 100000000, 0, -11021), (Tag5 ("location", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "location"), 0, (0)), 100000000, 0, -11020), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11019), 0), 100000000, 0, -11018), 0), 100000000, 0, -11017), (Tag5 ("location_stack", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "location_stack"), 0, (0)), 100000000, 0, -11016), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11015), 0), 100000000, 0, -11014), 0), 100000000, 0, -11013), (Tag5 ("longident", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "longident"), 0, (0)), 100000000, 0, -11012), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11011), 0), 100000000, 0, -11010), 0), 100000000, 0, -11009), (Tag5 ("longident_loc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "longident_loc"), 0, (0)), 100000000, 0, -11008), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11007), 0), 100000000, 0, -11006), 0), 100000000, 0, -11005), (Tag5 ("module_binding", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_binding"), 0, (0)), 100000000, 0, -11004), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11003), 0), 100000000, 0, -11002), 0), 100000000, 0, -11001), (Tag5 ("module_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_declaration"), 0, (0)), 100000000, 0, -11000), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10999), 0), 100000000, 0, -10998), 0), 100000000, 0, -10997), (Tag5 ("module_expr", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_expr"), 0, (0)), 100000000, 0, -10996), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10995), 0), 100000000, 0, -10994), 0), 100000000, 0, -10993), (Tag5 ("module_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_expr_desc"), 0, (0)), 100000000, 0, -10992), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10991), 0), 100000000, 0, -10990), 0), 100000000, 0, -10989), (Tag5 ("module_substitution", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_substitution"), 0, (0)), 100000000, 0, -10988), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10987), 0), 100000000, 0, -10986), 0), 100000000, 0, -10985), (Tag5 ("module_type", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_type"), 0, (0)), 100000000, 0, -10984), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10983), 0), 100000000, 0, -10982), 0), 100000000, 0, -10981), (Tag5 ("module_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_type_declaration"), 0, (0)), 100000000, 0, -10980), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10979), 0), 100000000, 0, -10978), 0), 100000000, 0, -10977), (Tag5 ("module_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "module_type_desc"), 0, (0)), 100000000, 0, -10976), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10975), 0), 100000000, 0, -10974), 0), 100000000, 0, -10973), (Tag5 ("mutable_flag", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "mutable_flag"), 0, (0)), 100000000, 0, -10972), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10971), 0), 100000000, 0, -10970), 0), 100000000, 0, -10969), (Tag5 ("object_field", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "object_field"), 0, (0)), 100000000, 0, -10968), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10967), 0), 100000000, 0, -10966), 0), 100000000, 0, -10965), (Tag5 ("object_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "object_field_desc"), 0, (0)), 100000000, 0, -10964), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10963), 0), 100000000, 0, -10962), 0), 100000000, 0, -10961), (Tag5 ("open_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "open_declaration"), 0, (0)), 100000000, 0, -10960), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10959), 0), 100000000, 0, -10958), 0), 100000000, 0, -10957), (Tag5 ("open_description", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "open_description"), 0, (0)), 100000000, 0, -10956), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10955), 0), 100000000, 0, -10954), 0), 100000000, 0, -10953), (Tag5 ("open_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -10946), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10952), 0), 100000000, 0, -10951), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "open_infos"), [(Tag9 (("a")), 100000000, 0, -10946)], (0)), 100000000, 0, -10950), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10949), 0), 100000000, 0, -10948), 0), 100000000, 0, -10947), [(Tag9 (("a")), 100000000, 0, -10946)]), 100000000, 0, -10945), (Tag5 ("option", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag9 (("a")), 100000000, 0, -10940)], (0)), 100000000, 0, -10944), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -10940)], (0)), 100000000, 0, -10943)], (0)), 100000000, 0, -10942), 0), 100000000, 0, -10941), [(Tag9 (("a")), 100000000, 0, -10940)]), 100000000, 0, -10939), (Tag5 ("override_flag", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "override_flag"), 0, (0)), 100000000, 0, -10938), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10937), 0), 100000000, 0, -10936), 0), 100000000, 0, -10935), (Tag5 ("package_type", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "package_type"), 0, (0)), 100000000, 0, -10934), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10933), 0), 100000000, 0, -10932), 0), 100000000, 0, -10931), (Tag5 ("pattern", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "pattern"), 0, (0)), 100000000, 0, -10930), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10929), 0), 100000000, 0, -10928), 0), 100000000, 0, -10927), (Tag5 ("pattern_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "pattern_desc"), 0, (0)), 100000000, 0, -10926), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10925), 0), 100000000, 0, -10924), 0), 100000000, 0, -10923), (Tag5 ("payload", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "payload"), 0, (0)), 100000000, 0, -10922), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10921), 0), 100000000, 0, -10920), 0), 100000000, 0, -10919), (Tag5 ("position", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "position"), 0, (0)), 100000000, 0, -10918), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10917), 0), 100000000, 0, -10916), 0), 100000000, 0, -10915), (Tag5 ("private_flag", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "private_flag"), 0, (0)), 100000000, 0, -10914), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10913), 0), 100000000, 0, -10912), 0), 100000000, 0, -10911), (Tag5 ("rec_flag", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "rec_flag"), 0, (0)), 100000000, 0, -10910), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10909), 0), 100000000, 0, -10908), 0), 100000000, 0, -10907), (Tag5 ("return_true", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10906), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10905), 0), 100000000, 0, -10904), 0), 100000000, 0, -10903), (Tag5 ("row_field", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "row_field"), 0, (0)), 100000000, 0, -10902), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10901), 0), 100000000, 0, -10900), 0), 100000000, 0, -10899), (Tag5 ("row_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "row_field_desc"), 0, (0)), 100000000, 0, -10898), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10897), 0), 100000000, 0, -10896), 0), 100000000, 0, -10895), (Tag5 ("signature", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "signature"), 0, (0)), 100000000, 0, -10894), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10893), 0), 100000000, 0, -10892), 0), 100000000, 0, -10891), (Tag5 ("signature_item", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "signature_item"), 0, (0)), 100000000, 0, -10890), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10889), 0), 100000000, 0, -10888), 0), 100000000, 0, -10887), (Tag5 ("signature_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "signature_item_desc"), 0, (0)), 100000000, 0, -10886), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10885), 0), 100000000, 0, -10884), 0), 100000000, 0, -10883), (Tag5 ("string", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_traverse_builtins")), "T"), "iter"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10882)], (0)), 100000000, 0, -10881), 0), 100000000, 0, -10880), (Tag5 ("structure", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "structure"), 0, (0)), 100000000, 0, -10879), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10878), 0), 100000000, 0, -10877), 0), 100000000, 0, -10876), (Tag5 ("structure_item", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "structure_item"), 0, (0)), 100000000, 0, -10875), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10874), 0), 100000000, 0, -10873), 0), 100000000, 0, -10872), (Tag5 ("structure_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "structure_item_desc"), 0, (0)), 100000000, 0, -10871), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10870), 0), 100000000, 0, -10869), 0), 100000000, 0, -10868), (Tag5 ("toplevel_directive", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "toplevel_directive"), 0, (0)), 100000000, 0, -10867), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10866), 0), 100000000, 0, -10865), 0), 100000000, 0, -10864), (Tag5 ("toplevel_phrase", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "toplevel_phrase"), 0, (0)), 100000000, 0, -10863), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10862), 0), 100000000, 0, -10861), 0), 100000000, 0, -10860), (Tag5 ("type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "type_declaration"), 0, (0)), 100000000, 0, -10859), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10858), 0), 100000000, 0, -10857), 0), 100000000, 0, -10856), (Tag5 ("type_exception", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "type_exception"), 0, (0)), 100000000, 0, -10855), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10854), 0), 100000000, 0, -10853), 0), 100000000, 0, -10852), (Tag5 ("type_extension", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "type_extension"), 0, (0)), 100000000, 0, -10851), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10850), 0), 100000000, 0, -10849), 0), 100000000, 0, -10848), (Tag5 ("type_kind", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "type_kind"), 0, (0)), 100000000, 0, -10847), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10846), 0), 100000000, 0, -10845), 0), 100000000, 0, -10844), (Tag5 ("value_binding", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "value_binding"), 0, (0)), 100000000, 0, -10843), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10842), 0), 100000000, 0, -10841), 0), 100000000, 0, -10840), (Tag5 ("value_description", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "value_description"), 0, (0)), 100000000, 0, -10839), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10838), 0), 100000000, 0, -10837), 0), 100000000, 0, -10836), (Tag5 ("variance", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "variance"), 0, (0)), 100000000, 0, -10835), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10834), 0), 100000000, 0, -10833), 0), 100000000, 0, -10832), (Tag5 ("virtual_flag", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "virtual_flag"), 0, (0)), 100000000, 0, -10831), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10830), 0), 100000000, 0, -10829), 0), 100000000, 0, -10828), (Tag5 ("with_constraint", 1, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Ast"), "with_constraint"), 0, (0)), 100000000, 0, -10827), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10826), 0), 100000000, 0, -10825), 0), 100000000, 0, -10824), (0, 100000000, 0, -10823)), 100000000, 0, -10822)), 100000000, 0, -10821)), 100000000, 0, -10820)), 100000000, 0, -10819)), 100000000, 0, -10818)), 100000000, 0, -10817)), 100000000, 0, -10816)), 100000000, 0, -10815)), 100000000, 0, -10814)), 100000000, 0, -10813)), 100000000, 0, -10812)), 100000000, 0, -10811)), 100000000, 0, -10810)), 100000000, 0, -10809)), 100000000, 0, -10808)), 100000000, 0, -10807)), 100000000, 0, -10806)), 100000000, 0, -10805)), 100000000, 0, -10804)), 100000000, 0, -10803)), 100000000, 0, -10802)), 100000000, 0, -10801)), 100000000, 0, -10800)), 100000000, 0, -10799)), 100000000, 0, -10798)), 100000000, 0, -10797)), 100000000, 0, -10796)), 100000000, 0, -10795)), 100000000, 0, -10794)), 100000000, 0, -10793)), 100000000, 0, -10792)), 100000000, 0, -10791)), 100000000, 0, -10790)), 100000000, 0, -10789)), 100000000, 0, -10788)), 100000000, 0, -10787)), 100000000, 0, -10786)), 100000000, 0, -10785)), 100000000, 0, -10784)), 100000000, 0, -10783)), 100000000, 0, -10782)), 100000000, 0, -10781)), 100000000, 0, -10780)), 100000000, 0, -10779)), 100000000, 0, -10778)), 100000000, 0, -10777)), 100000000, 0, -10776)), 100000000, 0, -10775)), 100000000, 0, -10774)), 100000000, 0, -10773)), 100000000, 0, -10772)), 100000000, 0, -10771)), 100000000, 0, -10770)), 100000000, 0, -10769)), 100000000, 0, -10768)), 100000000, 0, -10767)), 100000000, 0, -10766)), 100000000, 0, -10765)), 100000000, 0, -10764)), 100000000, 0, -10763)), 100000000, 0, -10762)), 100000000, 0, -10761)), 100000000, 0, -10760)), 100000000, 0, -10759)), 100000000, 0, -10758)), 100000000, 0, -10757)), 100000000, 0, -10756)), 100000000, 0, -10755)), 100000000, 0, -10754)), 100000000, 0, -10753)), 100000000, 0, -10752)), 100000000, 0, -10751)), 100000000, 0, -10750)), 100000000, 0, -10749)), 100000000, 0, -10748)), 100000000, 0, -10747)), 100000000, 0, -10746)), 100000000, 0, -10745)), 100000000, 0, -10744)), 100000000, 0, -10743)), 100000000, 0, -10742)), 100000000, 0, -10741)), 100000000, 0, -10740)), 100000000, 0, -10739)), 100000000, 0, -10738)), 100000000, 0, -10737)), 100000000, 0, -10736)), 100000000, 0, -10735)), 100000000, 0, -10734)), 100000000, 0, -10733)), 100000000, 0, -10732)), 100000000, 0, -10731)), 100000000, 0, -10730)), 100000000, 0, -10729)), 100000000, 0, -10728)), 100000000, 0, -10727)), 100000000, 0, -10726)), 100000000, 0, -10725), (0)), 100000000, 0, -10724)), 0, 0, 0, 0, (("src/common.mli", 40, 1580, 1580), ("src/common.mli", 48, 1803, 1811), 0), 0, 0, 0, Tag1 ("Ppxlib__Common", 13)), 1, 0); (("really_recursive", 7334), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "rec_flag"), 0, (0)), 100000000, 0, -10723), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "type_declaration"), 0, (0)), 100000000, 0, -10722)], (0)), 100000000, 0, -10721), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "rec_flag"), 0, (0)), 100000000, 0, -10720), 0), 100000000, 0, -10719), 0), 100000000, 0, -10718), 0, (("src/common.mli", 50, 1813, 1813), ("src/common.mli", 50, 1813, 1881), 0), 0, Tag1 ("Ppxlib__Common", 14)), 0); (("loc_of_payload", 7335), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "attribute"), 0, (0)), 100000000, 0, -10717), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Location"), "t"), 0, (0)), 100000000, 0, -10716), 0), 100000000, 0, -10715), 0, (("src/common.mli", 53, 1967, 1967), ("src/common.mli", 53, 1967, 2011), 0), 0, Tag1 ("Ppxlib__Common", 15)), 0); (("loc_of_attribute", 7336), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "attribute"), 0, (0)), 100000000, 0, -10714), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Location"), "t"), 0, (0)), 100000000, 0, -10713), 0), 100000000, 0, -10712), 0, (("src/common.mli", 54, 2012, 2012), ("src/common.mli", 54, 2012, 2058), 0), 0, Tag1 ("Ppxlib__Common", 16)), 0); (("loc_of_extension", 7337), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "extension"), 0, (0)), 100000000, 0, -10711), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Location"), "t"), 0, (0)), 100000000, 0, -10710), 0), 100000000, 0, -10709), 0, (("src/common.mli", 55, 2059, 2059), ("src/common.mli", 55, 2059, 2105), 0), 0, Tag1 ("Ppxlib__Common", 17)), 0); (("curry_applications", 7338), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -10708), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -10707), 0), 100000000, 0, -10706), 0, (("src/common.mli", 57, 2107, 2107), ("src/common.mli", 57, 2107, 2156), 0), 0, Tag1 ("Ppxlib__Common", 18)), 0); (("attribute_of_warning", 7339), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Location"), "t"), 0, (0)), 100000000, 0, -10705), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10704), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "attribute"), 0, (0)), 100000000, 0, -10703), 0), 100000000, 0, -10702), 0), 100000000, 0, -10701), 0, (("src/common.mli", 60, 2242, 2242), ("src/common.mli", 60, 2242, 2302), 0), 0, Tag1 ("Ppxlib__Common", 19)), 0); (("is_polymorphic_variant", 7340), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "type_declaration"), 0, (0)), 100000000, 0, -10700), (Tag1 (("sig_"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -10699), (Tag8 (([("Definitely", (0)); ("Maybe", (0)); ("Surely_not", (0))], ((0), 100000000, 0, -10698), 0, 0, 0)), 100000000, 0, -10697), 0), 100000000, 0, -10696), 0), 100000000, 0, -10695), 0, (("src/common.mli", 65, 2488, 2488), ("src/common.mli", 66, 2517, 2591), 0), 0, Tag1 ("Ppxlib__Common", 20)), 0); (("mk_named_sig", 7341), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Location"), "t"), 0, (0)), 100000000, 0, -10694), (Tag1 (("sg_name"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10693), (Tag1 (("handle_polymorphic_variant"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -10692), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "type_declaration"), 0, (0)), 100000000, 0, -10691)], (0)), 100000000, 0, -10690), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "include_description"), 0, (0)), 100000000, 0, -10689)], (0)), 100000000, 0, -10688), 0), 100000000, 0, -10687), 0), 100000000, 0, -10686), 0), 100000000, 0, -10685), 0), 100000000, 0, -10684), 0, (("src/common.mli", 68, 2593, 2593), ("src/common.mli", 73, 2716, 2744), 0), 0, Tag1 ("Ppxlib__Common", 21)), 0); Tag3 (("With_errors", 7342), 0, (Tag3 (Tag1 ((Tag2 ("Ppxlib__Common")), "With_errors")), 0, (("src/common.mli", 91, 3210, 3210), ("src/common.mli", 102, 3528, 3531), 0), Tag1 ("Ppxlib__Common", 28)), 0, 0); Tag3 (("Ast", 7343), 1, (Tag3 (Tag1 ((Tag2 ("Ppxlib_ast")), "Ast")), 0, (("src/ppxlib.ml", 59, 1725, 1725), ("src/ppxlib.ml", 59, 1725, 1752), 0), Tag1 ("Ppxlib", 17)), 0, 0); Tag3 (("Ast_helper", 7344), 1, (Tag3 (Tag1 ((Tag2 ("Ppxlib_ast")), "Ast_helper")), 0, (("src/ppxlib.ml", 60, 1753, 1753), ("src/ppxlib.ml", 60, 1753, 1794), 0), Tag1 ("Ppxlib", 18)), 0, 0); Tag3 (("Asttypes", 7345), 1, (Tag3 (Tag1 ((Tag2 ("Ppxlib_ast")), "Asttypes")), 0, (("src/ppxlib.ml", 61, 1795, 1795), ("src/ppxlib.ml", 61, 1795, 1832), 0), Tag1 ("Ppxlib", 19)), 0, 0); Tag3 (("Parse", 7346), 1, (Tag3 (Tag1 ((Tag2 ("Ppxlib_ast")), "Parse")), 0, (("src/ppxlib.ml", 62, 1833, 1833), ("src/ppxlib.ml", 62, 1833, 1864), 0), Tag1 ("Ppxlib", 20)), 0, 0); Tag3 (("Parsetree", 7347), 1, (Tag3 (Tag1 ((Tag2 ("Ppxlib_ast")), "Parsetree")), 0, (("src/ppxlib.ml", 63, 1865, 1865), ("src/ppxlib.ml", 63, 1865, 1904), 0), Tag1 ("Ppxlib", 21)), 0, 0); Tag3 (("Pprintast", 7348), 1, (Tag3 (Tag1 ((Tag2 ("Ppxlib_ast")), "Pprintast")), 0, (("src/ppxlib.ml", 64, 1905, 1905), ("src/ppxlib.ml", 64, 1905, 1944), 0), Tag1 ("Ppxlib", 22)), 0, 0); Tag3 (("Selected_ast", 7349), 1, (Tag3 (Tag1 ((Tag2 ("Ppxlib_ast")), "Selected_ast")), 0, (("src/ppxlib.ml", 65, 1945, 1945), ("src/ppxlib.ml", 65, 1945, 1990), 0), Tag1 ("Ppxlib", 23)), 0, 0); Tag3 (("Location", 7350), 1, (Tag3 (Tag1 ((Tag2 ("Ppxlib__")), "Location")), 0, (("src/ppxlib.ml", 66, 1991, 1991), ("src/ppxlib.ml", 66, 1991, 2017), 0), Tag1 ("Ppxlib", 24)), 0, 0); Tag3 (("Longident", 7351), 1, (Tag3 (Tag1 ((Tag2 ("Ppxlib__")), "Longident")), 0, (("src/ppxlib.ml", 67, 2018, 2018), ("src/ppxlib.ml", 67, 2018, 2046), 0), Tag1 ("Ppxlib", 25)), 0, 0); Tag3 (("Loc", 7352), 1, (Tag3 (Tag1 ((Tag2 ("Ppxlib__")), "Loc")), 0, (("src/ppxlib.ml", 68, 2047, 2047), ("src/ppxlib.ml", 68, 2047, 2063), 0), Tag1 ("Ppxlib", 26)), 0, 0); Tag1 (("position", 7353), (0, 0, [[(("pos_fname", 376), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10680), (("ast/ast.ml", 59, 2796, 2798), ("ast/ast.ml", 59, 2796, 2817), 0), 0, Tag1 ("Ppxlib_ast__Ast", 89)); (("pos_lnum", 377), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -10681), (("ast/ast.ml", 60, 2818, 2820), ("ast/ast.ml", 60, 2818, 2835), 0), 0, Tag1 ("Ppxlib_ast__Ast", 90)); (("pos_bol", 378), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -10682), (("ast/ast.ml", 61, 2836, 2838), ("ast/ast.ml", 61, 2836, 2852), 0), 0, Tag1 ("Ppxlib_ast__Ast", 91)); (("pos_cnum", 379), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -10683), (("ast/ast.ml", 62, 2853, 2855), ("ast/ast.ml", 62, 2853, 2870), 0), 0, Tag1 ("Ppxlib_ast__Ast", 92))]], 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -10679)), 0, 0, 0, 0, (("ast/ast.ml", 58, 2760, 2760), ("ast/ast.ml", 63, 2871, 2872), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 0)), 1, 0); Tag1 (("location", 7354), (0, 0, [[(("loc_start", 404), 0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -10676), (("ast/ast.ml", 66, 2904, 2906), ("ast/ast.ml", 66, 2904, 2927), 0), 0, Tag1 ("Ppxlib_ast__Ast", 93)); (("loc_end", 405), 0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -10677), (("ast/ast.ml", 67, 2928, 2930), ("ast/ast.ml", 67, 2928, 2949), 0), 0, Tag1 ("Ppxlib_ast__Ast", 94)); (("loc_ghost", 406), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -10678), (("ast/ast.ml", 68, 2950, 2952), ("ast/ast.ml", 68, 2950, 2969), 0), 0, Tag1 ("Ppxlib_ast__Ast", 95))]], 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Location"), "t"), 0, (0)), 100000000, 0, -10675)), 0, 0, 0, 0, (("ast/ast.ml", 65, 2874, 2874), ("ast/ast.ml", 69, 2970, 2971), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 1)), 2, 0); Tag1 (("location_stack", 7355), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -10674)], (0)), 100000000, 0, -10673)), 0, 0, 0, 0, (("ast/ast.ml", 71, 2973, 2973), ("ast/ast.ml", 71, 2973, 3007), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 2)), 2, 0); Tag1 (("loc", 7356), ([((("a")), 100000000, 0, -10671)], 1, [[(("txt", 518), 0, ((("a")), 100000000, 0, -10671), (("ast/ast.ml", 79, 3276, 3309), ("ast/ast.ml", 79, 3276, 3318), 0), 0, Tag1 ("Ppxlib_ast__Ast", 96)); (("loc", 519), 0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -10672), (("ast/ast.ml", 79, 3276, 3319), ("ast/ast.ml", 79, 3276, 3333), 0), 0, Tag1 ("Ppxlib_ast__Ast", 97))]], 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Location"), "loc"), [((("a")), 100000000, 0, -10671)], (0)), 100000000, 0, -10670)), [25], [0], 0, 0, (("ast/ast.ml", 79, 3276, 3276), ("ast/ast.ml", 79, 3276, 3335), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 3)), 2, 0); Tag1 (("longident", 7357), (0, 0, Tag1 ([(("Lident", 520), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10665)]), 0, (("ast/ast.ml", 83, 3410, 3412), ("ast/ast.ml", 83, 3410, 3430), 0), 0, Tag1 ("Ppxlib_ast__Ast", 98)); (("Ldot", 521), ([(Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -10666); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10667)]), 0, (("ast/ast.ml", 84, 3431, 3433), ("ast/ast.ml", 84, 3431, 3461), 0), 0, Tag1 ("Ppxlib_ast__Ast", 99)); (("Lapply", 522), ([(Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -10668); (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -10669)]), 0, (("ast/ast.ml", 85, 3462, 3464), ("ast/ast.ml", 85, 3462, 3497), 0), 0, Tag1 ("Ppxlib_ast__Ast", 100))], 0), 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Longident"), "t"), 0, (0)), 100000000, 0, -10664)), 0, 0, 0, 0, (("ast/ast.ml", 82, 3380, 3380), ("ast/ast.ml", 85, 3462, 3497), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 4)), 2, 0); Tag1 (("longident_loc", 7358), (0, 0, 0, 1, ((Tag3 ((("loc", 7356)), [(Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -10663)], (0)), 100000000, 0, -10662)), 0, 0, 0, 0, (("ast/ast.ml", 87, 3499, 3499), ("ast/ast.ml", 87, 3499, 3532), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 5)), 2, 0); Tag1 (("rec_flag", 7359), (0, 0, Tag1 ([(("Nonrecursive", 526), (0), 0, (("ast/ast.ml", 91, 3595, 3630), ("ast/ast.ml", 91, 3595, 3642), 0), 0, Tag1 ("Ppxlib_ast__Ast", 101)); (("Recursive", 527), (0), 0, (("ast/ast.ml", 91, 3595, 3643), ("ast/ast.ml", 91, 3595, 3654), 0), 0, Tag1 ("Ppxlib_ast__Ast", 102))], 0), 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Asttypes"), "rec_flag"), 0, (0)), 100000000, 0, -10661)), 0, 0, 0, 0, (("ast/ast.ml", 91, 3595, 3595), ("ast/ast.ml", 91, 3595, 3654), 0), 0, 1, 0, Tag1 ("Ppxlib_ast__Ast", 6)), 2, 0); Tag1 (("direction_flag", 7360), (0, 0, Tag1 ([(("Upto", 606), (0), 0, (("ast/ast.ml", 93, 3656, 3703), ("ast/ast.ml", 93, 3656, 3707), 0), 0, Tag1 ("Ppxlib_ast__Ast", 103)); (("Downto", 607), (0), 0, (("ast/ast.ml", 93, 3656, 3708), ("ast/ast.ml", 93, 3656, 3716), 0), 0, Tag1 ("Ppxlib_ast__Ast", 104))], 0), 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Asttypes"), "direction_flag"), 0, (0)), 100000000, 0, -10660)), 0, 0, 0, 0, (("ast/ast.ml", 93, 3656, 3656), ("ast/ast.ml", 93, 3656, 3716), 0), 0, 1, 0, Tag1 ("Ppxlib_ast__Ast", 7)), 2, 0); Tag1 (("private_flag", 7361), (0, 0, Tag1 ([(("Private", 608), (0), 0, (("ast/ast.ml", 96, 3770, 3813), ("ast/ast.ml", 96, 3770, 3820), 0), 0, Tag1 ("Ppxlib_ast__Ast", 105)); (("Public", 609), (0), 0, (("ast/ast.ml", 96, 3770, 3821), ("ast/ast.ml", 96, 3770, 3829), 0), 0, Tag1 ("Ppxlib_ast__Ast", 106))], 0), 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Asttypes"), "private_flag"), 0, (0)), 100000000, 0, -10659)), 0, 0, 0, 0, (("ast/ast.ml", 96, 3770, 3770), ("ast/ast.ml", 96, 3770, 3829), 0), 0, 1, 0, Tag1 ("Ppxlib_ast__Ast", 8)), 2, 0); Tag1 (("mutable_flag", 7362), (0, 0, Tag1 ([(("Immutable", 610), (0), 0, (("ast/ast.ml", 97, 3830, 3873), ("ast/ast.ml", 97, 3830, 3882), 0), 0, Tag1 ("Ppxlib_ast__Ast", 107)); (("Mutable", 611), (0), 0, (("ast/ast.ml", 97, 3830, 3883), ("ast/ast.ml", 97, 3830, 3892), 0), 0, Tag1 ("Ppxlib_ast__Ast", 108))], 0), 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Asttypes"), "mutable_flag"), 0, (0)), 100000000, 0, -10658)), 0, 0, 0, 0, (("ast/ast.ml", 97, 3830, 3830), ("ast/ast.ml", 97, 3830, 3892), 0), 0, 1, 0, Tag1 ("Ppxlib_ast__Ast", 9)), 2, 0); Tag1 (("virtual_flag", 7363), (0, 0, Tag1 ([(("Virtual", 612), (0), 0, (("ast/ast.ml", 98, 3893, 3936), ("ast/ast.ml", 98, 3893, 3943), 0), 0, Tag1 ("Ppxlib_ast__Ast", 109)); (("Concrete", 613), (0), 0, (("ast/ast.ml", 98, 3893, 3944), ("ast/ast.ml", 98, 3893, 3954), 0), 0, Tag1 ("Ppxlib_ast__Ast", 110))], 0), 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Asttypes"), "virtual_flag"), 0, (0)), 100000000, 0, -10657)), 0, 0, 0, 0, (("ast/ast.ml", 98, 3893, 3893), ("ast/ast.ml", 98, 3893, 3954), 0), 0, 1, 0, Tag1 ("Ppxlib_ast__Ast", 10)), 2, 0); Tag1 (("override_flag", 7364), (0, 0, Tag1 ([(("Override", 614), (0), 0, (("ast/ast.ml", 99, 3955, 4000), ("ast/ast.ml", 99, 3955, 4008), 0), 0, Tag1 ("Ppxlib_ast__Ast", 111)); (("Fresh", 615), (0), 0, (("ast/ast.ml", 99, 3955, 4009), ("ast/ast.ml", 99, 3955, 4016), 0), 0, Tag1 ("Ppxlib_ast__Ast", 112))], 0), 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Asttypes"), "override_flag"), 0, (0)), 100000000, 0, -10656)), 0, 0, 0, 0, (("ast/ast.ml", 99, 3955, 3955), ("ast/ast.ml", 99, 3955, 4016), 0), 0, 1, 0, Tag1 ("Ppxlib_ast__Ast", 11)), 2, 0); Tag1 (("closed_flag", 7365), (0, 0, Tag1 ([(("Closed", 616), (0), 0, (("ast/ast.ml", 100, 4017, 4058), ("ast/ast.ml", 100, 4017, 4064), 0), 0, Tag1 ("Ppxlib_ast__Ast", 113)); (("Open", 617), (0), 0, (("ast/ast.ml", 100, 4017, 4065), ("ast/ast.ml", 100, 4017, 4071), 0), 0, Tag1 ("Ppxlib_ast__Ast", 114))], 0), 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Asttypes"), "closed_flag"), 0, (0)), 100000000, 0, -10655)), 0, 0, 0, 0, (("ast/ast.ml", 100, 4017, 4017), ("ast/ast.ml", 100, 4017, 4071), 0), 0, 1, 0, Tag1 ("Ppxlib_ast__Ast", 12)), 2, 0); Tag1 (("label", 7366), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10654)), 0, 0, 0, 0, (("ast/ast.ml", 101, 4072, 4072), ("ast/ast.ml", 101, 4072, 4090), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 13)), 2, 0); Tag1 (("arg_label", 7367), (0, 0, Tag1 ([(("Nolabel", 618), (0), 0, (("ast/ast.ml", 104, 4129, 4131), ("ast/ast.ml", 104, 4129, 4140), 0), 0, Tag1 ("Ppxlib_ast__Ast", 115)); (("Labelled", 619), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10652)]), 0, (("ast/ast.ml", 105, 4141, 4143), ("ast/ast.ml", 105, 4141, 4163), 0), 0, Tag1 ("Ppxlib_ast__Ast", 116)); (("Optional", 620), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10653)]), 0, (("ast/ast.ml", 106, 4189, 4191), ("ast/ast.ml", 106, 4189, 4211), 0), 0, Tag1 ("Ppxlib_ast__Ast", 117))], 0), 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Asttypes"), "arg_label"), 0, (0)), 100000000, 0, -10651)), 0, 0, 0, 0, (("ast/ast.ml", 103, 4092, 4092), ("ast/ast.ml", 106, 4189, 4211), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 14)), 2, 0); Tag1 (("variance", 7368), (0, 0, Tag1 ([(("Covariant", 621), (0), 0, (("ast/ast.ml", 108, 4239, 4274), ("ast/ast.ml", 108, 4239, 4283), 0), 0, Tag1 ("Ppxlib_ast__Ast", 118)); (("Contravariant", 622), (0), 0, (("ast/ast.ml", 108, 4239, 4284), ("ast/ast.ml", 108, 4239, 4299), 0), 0, Tag1 ("Ppxlib_ast__Ast", 119)); (("NoVariance", 623), (0), 0, (("ast/ast.ml", 108, 4239, 4300), ("ast/ast.ml", 108, 4239, 4312), 0), 0, Tag1 ("Ppxlib_ast__Ast", 120))], 0), 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Asttypes"), "variance"), 0, (0)), 100000000, 0, -10650)), 0, 0, 0, 0, (("ast/ast.ml", 108, 4239, 4239), ("ast/ast.ml", 108, 4239, 4312), 0), 0, 1, 0, Tag1 ("Ppxlib_ast__Ast", 15)), 2, 0); Tag1 (("injectivity", 7369), (0, 0, Tag1 ([(("Injective", 624), (0), 0, (("ast/ast.ml", 109, 4313, 4354), ("ast/ast.ml", 109, 4313, 4363), 0), 0, Tag1 ("Ppxlib_ast__Ast", 121)); (("NoInjectivity", 625), (0), 0, (("ast/ast.ml", 109, 4313, 4364), ("ast/ast.ml", 109, 4313, 4379), 0), 0, Tag1 ("Ppxlib_ast__Ast", 122))], 0), 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Asttypes"), "injectivity"), 0, (0)), 100000000, 0, -10649)), 0, 0, 0, 0, (("ast/ast.ml", 109, 4313, 4313), ("ast/ast.ml", 109, 4313, 4379), 0), 0, 1, 0, Tag1 ("Ppxlib_ast__Ast", 16)), 2, 0); Tag1 (("constant", 7370), (0, 0, Tag1 ([(("Pconst_integer", 626), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10638); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -10640)], (0)), 100000000, 0, -10639)]), 0, (("ast/ast.ml", 114, 4466, 4468), ("ast/ast.ml", 114, 4466, 4508), 0), 0, Tag1 ("Ppxlib_ast__Ast", 123)); (("Pconst_char", 627), ([(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -10641)]), 0, (("ast/ast.ml", 119, 4714, 4716), ("ast/ast.ml", 119, 4714, 4737), 0), 0, Tag1 ("Ppxlib_ast__Ast", 124)); (("Pconst_string", 628), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10642); (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -10643); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10645)], (0)), 100000000, 0, -10644)]), 0, (("ast/ast.ml", 120, 4771, 4773), ("ast/ast.ml", 120, 4771, 4825), 0), 0, Tag1 ("Ppxlib_ast__Ast", 125)); (("Pconst_float", 629), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10646); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -10648)], (0)), 100000000, 0, -10647)]), 0, (("ast/ast.ml", 125, 5001, 5003), ("ast/ast.ml", 125, 5001, 5041), 0), 0, Tag1 ("Ppxlib_ast__Ast", 126))], 0), 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "constant"), 0, (0)), 100000000, 0, -10637)), 0, 0, 0, 0, (("ast/ast.ml", 113, 4430, 4430), ("ast/ast.ml", 125, 5001, 5041), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 17)), 2, 0); Tag1 (("attribute", 7371), (0, 0, [[(("attr_name", 702), 0, (Tag3 ((("loc", 7356)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10634)], (0)), 100000000, 0, -10633), (("ast/ast.ml", 134, 5285, 5287), ("ast/ast.ml", 134, 5285, 5310), 0), 0, Tag1 ("Ppxlib_ast__Ast", 127)); (("attr_payload", 703), 0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -10635), (("ast/ast.ml", 135, 5311, 5313), ("ast/ast.ml", 135, 5311, 5336), 0), 0, Tag1 ("Ppxlib_ast__Ast", 128)); (("attr_loc", 704), 0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -10636), (("ast/ast.ml", 136, 5337, 5339), ("ast/ast.ml", 136, 5337, 5359), 0), 0, Tag1 ("Ppxlib_ast__Ast", 129))]], 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "attribute"), 0, (0)), 100000000, 0, -10632)), 0, 0, 0, 0, (("ast/ast.ml", 133, 5245, 5245), ("ast/ast.ml", 137, 5360, 5361), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 18)), 2, 0); Tag1 (("extension", 7372), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((("loc", 7356)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10630)], (0)), 100000000, 0, -10629); (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -10631)]), 100000000, 0, -10628)), 0, 0, 0, 0, (("ast/ast.ml", 143, 5523, 5523), ("ast/ast.ml", 143, 5523, 5559), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 19)), 2, 0); Tag1 (("attributes", 7373), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -10627)], (0)), 100000000, 0, -10626)), 0, 0, 0, 0, (("ast/ast.ml", 148, 5687, 5687), ("ast/ast.ml", 148, 5687, 5718), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 20)), 2, 0); Tag1 (("payload", 7374), (0, 0, Tag1 ([(("PStr", 705), ([(Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -10620)]), 0, (("ast/ast.ml", 151, 5754, 5756), ("ast/ast.ml", 151, 5754, 5775), 0), 0, Tag1 ("Ppxlib_ast__Ast", 130)); (("PSig", 706), ([(Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -10621)]), 0, (("ast/ast.ml", 152, 5776, 5778), ("ast/ast.ml", 152, 5776, 5797), 0), 0, Tag1 ("Ppxlib_ast__Ast", 131)); (("PTyp", 707), ([(Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -10622)]), 0, (("ast/ast.ml", 153, 5852, 5854), ("ast/ast.ml", 153, 5852, 5873), 0), 0, Tag1 ("Ppxlib_ast__Ast", 132)); (("PPat", 708), ([(Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -10623); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10625)], (0)), 100000000, 0, -10624)]), 0, (("ast/ast.ml", 154, 5926, 5928), ("ast/ast.ml", 154, 5926, 5965), 0), 0, Tag1 ("Ppxlib_ast__Ast", 133))], 0), 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "payload"), 0, (0)), 100000000, 0, -10619)), 0, 0, 0, 0, (("ast/ast.ml", 150, 5720, 5720), ("ast/ast.ml", 154, 5926, 5965), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 21)), 2, 0); Tag1 (("core_type", 7375), (0, 0, [[(("ptyp_desc", 709), 0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -10615), (("ast/ast.ml", 161, 6135, 6137), ("ast/ast.ml", 161, 6135, 6164), 0), 0, Tag1 ("Ppxlib_ast__Ast", 134)); (("ptyp_loc", 710), 0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -10616), (("ast/ast.ml", 162, 6165, 6167), ("ast/ast.ml", 162, 6165, 6187), 0), 0, Tag1 ("Ppxlib_ast__Ast", 135)); (("ptyp_loc_stack", 711), 0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -10617), (("ast/ast.ml", 163, 6188, 6190), ("ast/ast.ml", 163, 6188, 6222), 0), 0, Tag1 ("Ppxlib_ast__Ast", 136)); (("ptyp_attributes", 712), 0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -10618), (("ast/ast.ml", 164, 6223, 6225), ("ast/ast.ml", 164, 6223, 6254), 0), 0, Tag1 ("Ppxlib_ast__Ast", 137))]], 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "core_type"), 0, (0)), 100000000, 0, -10614)), 0, 0, 0, 0, (("ast/ast.ml", 160, 6095, 6095), ("ast/ast.ml", 165, 6287, 6288), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 22)), 2, 0); Tag1 (("core_type_desc", 7376), (0, 0, Tag1 ([(("Ptyp_any", 713), (0), 0, (("ast/ast.ml", 168, 6338, 6340), ("ast/ast.ml", 168, 6338, 6350), 0), 0, Tag1 ("Ppxlib_ast__Ast", 138)); (("Ptyp_var", 714), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10585)]), 0, (("ast/ast.ml", 169, 6363, 6365), ("ast/ast.ml", 169, 6363, 6385), 0), 0, Tag1 ("Ppxlib_ast__Ast", 139)); (("Ptyp_arrow", 715), ([(Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -10586); (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -10587); (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -10588)]), 0, (("ast/ast.ml", 170, 6423, 6425), ("ast/ast.ml", 170, 6423, 6474), 0), 0, Tag1 ("Ppxlib_ast__Ast", 140)); (("Ptyp_tuple", 716), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -10590)], (0)), 100000000, 0, -10589)]), 0, (("ast/ast.ml", 178, 6801, 6803), ("ast/ast.ml", 178, 6801, 6833), 0), 0, Tag1 ("Ppxlib_ast__Ast", 141)); (("Ptyp_constr", 717), ([(Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -10591); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -10593)], (0)), 100000000, 0, -10592)]), 0, (("ast/ast.ml", 183, 6964, 6966), ("ast/ast.ml", 183, 6964, 7013), 0), 0, Tag1 ("Ppxlib_ast__Ast", 142)); (("Ptyp_object", 718), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -10595)], (0)), 100000000, 0, -10594); (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -10596)]), 0, (("ast/ast.ml", 189, 7206, 7208), ("ast/ast.ml", 189, 7206, 7256), 0), 0, Tag1 ("Ppxlib_ast__Ast", 143)); (("Ptyp_class", 719), ([(Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -10597); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -10599)], (0)), 100000000, 0, -10598)]), 0, (("ast/ast.ml", 196, 7540, 7542), ("ast/ast.ml", 196, 7540, 7588), 0), 0, Tag1 ("Ppxlib_ast__Ast", 144)); (("Ptyp_alias", 720), ([(Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -10600); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10601)]), 0, (("ast/ast.ml", 202, 7784, 7786), ("ast/ast.ml", 202, 7784, 7820), 0), 0, Tag1 ("Ppxlib_ast__Ast", 145)); (("Ptyp_variant", 721), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -10603)], (0)), 100000000, 0, -10602); (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -10604); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -10607)], (0)), 100000000, 0, -10606)], (0)), 100000000, 0, -10605)]), 0, (("ast/ast.ml", 203, 7840, 7842), ("ast/ast.ml", 203, 7840, 7908), 0), 0, Tag1 ("Ppxlib_ast__Ast", 146)); (("Ptyp_poly", 722), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("loc", 7356)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10610)], (0)), 100000000, 0, -10609)], (0)), 100000000, 0, -10608); (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -10611)]), 0, (("ast/ast.ml", 215, 8491, 8493), ("ast/ast.ml", 215, 8491, 8535), 0), 0, Tag1 ("Ppxlib_ast__Ast", 147)); (("Ptyp_package", 723), ([(Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -10612)]), 0, (("ast/ast.ml", 244, 9486, 9488), ("ast/ast.ml", 244, 9486, 9518), 0), 0, Tag1 ("Ppxlib_ast__Ast", 148)); (("Ptyp_extension", 724), ([(Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -10613)]), 0, (("ast/ast.ml", 245, 9541, 9543), ("ast/ast.ml", 245, 9541, 9572), 0), 0, Tag1 ("Ppxlib_ast__Ast", 149))], 0), 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "core_type_desc"), 0, (0)), 100000000, 0, -10584)), 0, 0, 0, 0, (("ast/ast.ml", 167, 6290, 6290), ("ast/ast.ml", 245, 9541, 9572), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 23)), 2, 0); Tag1 (("package_type", 7377), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -10579); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -10582); (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -10583)]), 100000000, 0, -10581)], (0)), 100000000, 0, -10580)]), 100000000, 0, -10578)), 0, 0, 0, 0, (("ast/ast.ml", 247, 9593, 9593), ("ast/ast.ml", 247, 9593, 9660), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 24)), 2, 0); Tag1 (("row_field", 7378), (0, 0, [[(("prf_desc", 725), 0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -10575), (("ast/ast.ml", 255, 9898, 9900), ("ast/ast.ml", 255, 9898, 9926), 0), 0, Tag1 ("Ppxlib_ast__Ast", 150)); (("prf_loc", 726), 0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -10576), (("ast/ast.ml", 256, 9927, 9929), ("ast/ast.ml", 256, 9927, 9948), 0), 0, Tag1 ("Ppxlib_ast__Ast", 151)); (("prf_attributes", 727), 0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -10577), (("ast/ast.ml", 257, 9949, 9951), ("ast/ast.ml", 257, 9949, 9979), 0), 0, Tag1 ("Ppxlib_ast__Ast", 152))]], 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "row_field"), 0, (0)), 100000000, 0, -10574)), 0, 0, 0, 0, (("ast/ast.ml", 254, 9858, 9858), ("ast/ast.ml", 258, 9980, 9981), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 25)), 2, 0); Tag1 (("row_field_desc", 7379), (0, 0, Tag1 ([(("Rtag", 728), ([(Tag3 ((("loc", 7356)), [(Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -10569)], (0)), 100000000, 0, -10568); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -10570); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -10572)], (0)), 100000000, 0, -10571)]), 0, (("ast/ast.ml", 261, 10031, 10033), ("ast/ast.ml", 261, 10031, 10076), 0), 0, Tag1 ("Ppxlib_ast__Ast", 153)); (("Rinherit", 729), ([(Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -10573)]), 0, (("ast/ast.ml", 273, 10612, 10614), ("ast/ast.ml", 273, 10612, 10637), 0), 0, Tag1 ("Ppxlib_ast__Ast", 154))], 0), 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "row_field_desc"), 0, (0)), 100000000, 0, -10567)), 0, 0, 0, 0, (("ast/ast.ml", 260, 9983, 9983), ("ast/ast.ml", 273, 10612, 10637), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 26)), 2, 0); Tag1 (("object_field", 7380), (0, 0, [[(("pof_desc", 730), 0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -10564), (("ast/ast.ml", 276, 10705, 10707), ("ast/ast.ml", 276, 10705, 10736), 0), 0, Tag1 ("Ppxlib_ast__Ast", 155)); (("pof_loc", 731), 0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -10565), (("ast/ast.ml", 277, 10737, 10739), ("ast/ast.ml", 277, 10737, 10758), 0), 0, Tag1 ("Ppxlib_ast__Ast", 156)); (("pof_attributes", 732), 0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -10566), (("ast/ast.ml", 278, 10759, 10761), ("ast/ast.ml", 278, 10759, 10789), 0), 0, Tag1 ("Ppxlib_ast__Ast", 157))]], 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "object_field"), 0, (0)), 100000000, 0, -10563)), 0, 0, 0, 0, (("ast/ast.ml", 275, 10659, 10659), ("ast/ast.ml", 279, 10790, 10791), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 27)), 2, 0); Tag1 (("object_field_desc", 7381), (0, 0, Tag1 ([(("Otag", 733), ([(Tag3 ((("loc", 7356)), [(Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -10560)], (0)), 100000000, 0, -10559); (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -10561)]), 0, (("ast/ast.ml", 282, 10847, 10849), ("ast/ast.ml", 282, 10847, 10880), 0), 0, Tag1 ("Ppxlib_ast__Ast", 158)); (("Oinherit", 734), ([(Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -10562)]), 0, (("ast/ast.ml", 283, 10881, 10883), ("ast/ast.ml", 283, 10881, 10906), 0), 0, Tag1 ("Ppxlib_ast__Ast", 159))], 0), 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "object_field_desc"), 0, (0)), 100000000, 0, -10558)), 0, 0, 0, 0, (("ast/ast.ml", 281, 10793, 10793), ("ast/ast.ml", 283, 10881, 10906), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 28)), 2, 0); Tag1 (("pattern", 7382), (0, 0, [[(("ppat_desc", 735), 0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -10554), (("ast/ast.ml", 288, 10965, 10967), ("ast/ast.ml", 288, 10965, 10992), 0), 0, Tag1 ("Ppxlib_ast__Ast", 160)); (("ppat_loc", 736), 0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -10555), (("ast/ast.ml", 289, 10993, 10995), ("ast/ast.ml", 289, 10993, 11015), 0), 0, Tag1 ("Ppxlib_ast__Ast", 161)); (("ppat_loc_stack", 737), 0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -10556), (("ast/ast.ml", 290, 11016, 11018), ("ast/ast.ml", 290, 11016, 11050), 0), 0, Tag1 ("Ppxlib_ast__Ast", 162)); (("ppat_attributes", 738), 0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -10557), (("ast/ast.ml", 291, 11051, 11053), ("ast/ast.ml", 291, 11051, 11082), 0), 0, Tag1 ("Ppxlib_ast__Ast", 163))]], 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "pattern"), 0, (0)), 100000000, 0, -10553)), 0, 0, 0, 0, (("ast/ast.ml", 287, 10929, 10929), ("ast/ast.ml", 292, 11115, 11116), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 29)), 2, 0); Tag1 (("pattern_desc", 7383), (0, 0, Tag1 ([(("Ppat_any", 739), (0), 0, (("ast/ast.ml", 295, 11162, 11164), ("ast/ast.ml", 295, 11162, 11174), 0), 0, Tag1 ("Ppxlib_ast__Ast", 164)); (("Ppat_var", 740), ([(Tag3 ((("loc", 7356)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10514)], (0)), 100000000, 0, -10513)]), 0, (("ast/ast.ml", 296, 11200, 11202), ("ast/ast.ml", 296, 11200, 11226), 0), 0, Tag1 ("Ppxlib_ast__Ast", 165)); (("Ppat_alias", 741), ([(Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -10515); (Tag3 ((("loc", 7356)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10517)], (0)), 100000000, 0, -10516)]), 0, (("ast/ast.ml", 297, 11266, 11268), ("ast/ast.ml", 297, 11266, 11304), 0), 0, Tag1 ("Ppxlib_ast__Ast", 166)); (("Ppat_constant", 742), ([(Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -10518)]), 0, (("ast/ast.ml", 299, 11353, 11355), ("ast/ast.ml", 299, 11353, 11382), 0), 0, Tag1 ("Ppxlib_ast__Ast", 167)); (("Ppat_interval", 743), ([(Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -10519); (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -10520)]), 0, (("ast/ast.ml", 301, 11459, 11461), ("ast/ast.ml", 301, 11459, 11499), 0), 0, Tag1 ("Ppxlib_ast__Ast", 168)); (("Ppat_tuple", 744), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -10522)], (0)), 100000000, 0, -10521)]), 0, (("ast/ast.ml", 306, 11650, 11652), ("ast/ast.ml", 306, 11650, 11680), 0), 0, Tag1 ("Ppxlib_ast__Ast", 169)); (("Ppat_construct", 745), ([(Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -10523); (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("loc", 7356)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10528)], (0)), 100000000, 0, -10527)], (0)), 100000000, 0, -10526); (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -10529)]), 100000000, 0, -10525)], (0)), 100000000, 0, -10524)]), 0, (("ast/ast.ml", 310, 11751, 11753), ("ast/ast.ml", 310, 11751, 11823), 0), 0, Tag1 ("Ppxlib_ast__Ast", 170)); (("Ppat_variant", 746), ([(Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -10530); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -10532)], (0)), 100000000, 0, -10531)]), 0, (("ast/ast.ml", 318, 12129, 12131), ("ast/ast.ml", 318, 12129, 12171), 0), 0, Tag1 ("Ppxlib_ast__Ast", 171)); (("Ppat_record", 747), ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -10535); (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -10536)]), 100000000, 0, -10534)], (0)), 100000000, 0, -10533); (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -10537)]), 0, (("ast/ast.ml", 323, 12303, 12305), ("ast/ast.ml", 323, 12303, 12366), 0), 0, Tag1 ("Ppxlib_ast__Ast", 172)); (("Ppat_array", 748), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -10539)], (0)), 100000000, 0, -10538)]), 0, (("ast/ast.ml", 332, 12682, 12684), ("ast/ast.ml", 332, 12682, 12712), 0), 0, Tag1 ("Ppxlib_ast__Ast", 173)); (("Ppat_or", 749), ([(Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -10540); (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -10541)]), 0, (("ast/ast.ml", 333, 12751, 12753), ("ast/ast.ml", 333, 12751, 12783), 0), 0, Tag1 ("Ppxlib_ast__Ast", 174)); (("Ppat_constraint", 750), ([(Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -10542); (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -10543)]), 0, (("ast/ast.ml", 334, 12810, 12812), ("ast/ast.ml", 334, 12810, 12852), 0), 0, Tag1 ("Ppxlib_ast__Ast", 175)); (("Ppat_type", 751), ([(Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -10544)]), 0, (("ast/ast.ml", 335, 12879, 12881), ("ast/ast.ml", 335, 12879, 12909), 0), 0, Tag1 ("Ppxlib_ast__Ast", 176)); (("Ppat_lazy", 752), ([(Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -10545)]), 0, (("ast/ast.ml", 336, 12936, 12938), ("ast/ast.ml", 336, 12936, 12960), 0), 0, Tag1 ("Ppxlib_ast__Ast", 177)); (("Ppat_unpack", 753), ([(Tag3 ((("loc", 7356)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10548)], (0)), 100000000, 0, -10547)], (0)), 100000000, 0, -10546)]), 0, (("ast/ast.ml", 337, 12986, 12988), ("ast/ast.ml", 337, 12986, 13022), 0), 0, Tag1 ("Ppxlib_ast__Ast", 178)); (("Ppat_exception", 754), ([(Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -10549)]), 0, (("ast/ast.ml", 345, 13277, 13279), ("ast/ast.ml", 345, 13277, 13306), 0), 0, Tag1 ("Ppxlib_ast__Ast", 179)); (("Ppat_extension", 755), ([(Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -10550)]), 0, (("ast/ast.ml", 346, 13337, 13339), ("ast/ast.ml", 346, 13337, 13368), 0), 0, Tag1 ("Ppxlib_ast__Ast", 180)); (("Ppat_open", 756), ([(Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -10551); (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -10552)]), 0, (("ast/ast.ml", 347, 13395, 13397), ("ast/ast.ml", 347, 13395, 13435), 0), 0, Tag1 ("Ppxlib_ast__Ast", 181))], 0), 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "pattern_desc"), 0, (0)), 100000000, 0, -10512)), 0, 0, 0, 0, (("ast/ast.ml", 294, 11118, 11118), ("ast/ast.ml", 347, 13395, 13435), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 30)), 2, 0); Tag1 (("expression", 7384), (0, 0, [[(("pexp_desc", 757), 0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -10508), (("ast/ast.ml", 352, 13533, 13535), ("ast/ast.ml", 352, 13533, 13563), 0), 0, Tag1 ("Ppxlib_ast__Ast", 182)); (("pexp_loc", 758), 0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -10509), (("ast/ast.ml", 353, 13564, 13566), ("ast/ast.ml", 353, 13564, 13586), 0), 0, Tag1 ("Ppxlib_ast__Ast", 183)); (("pexp_loc_stack", 759), 0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -10510), (("ast/ast.ml", 354, 13587, 13589), ("ast/ast.ml", 354, 13587, 13621), 0), 0, Tag1 ("Ppxlib_ast__Ast", 184)); (("pexp_attributes", 760), 0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -10511), (("ast/ast.ml", 355, 13622, 13624), ("ast/ast.ml", 355, 13622, 13653), 0), 0, Tag1 ("Ppxlib_ast__Ast", 185))]], 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "expression"), 0, (0)), 100000000, 0, -10507)), 0, 0, 0, 0, (("ast/ast.ml", 351, 13491, 13491), ("ast/ast.ml", 356, 13686, 13687), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 31)), 2, 0); Tag1 (("expression_desc", 7385), (0, 0, Tag1 ([(("Pexp_ident", 761), ([(Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -10413)]), 0, (("ast/ast.ml", 359, 13739, 13741), ("ast/ast.ml", 359, 13739, 13770), 0), 0, Tag1 ("Ppxlib_ast__Ast", 186)); (("Pexp_constant", 762), ([(Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -10414)]), 0, (("ast/ast.ml", 360, 13813, 13815), ("ast/ast.ml", 360, 13813, 13842), 0), 0, Tag1 ("Ppxlib_ast__Ast", 187)); (("Pexp_let", 763), ([(Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -10415); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -10417)], (0)), 100000000, 0, -10416); (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10418)]), 0, (("ast/ast.ml", 363, 13941, 13943), ("ast/ast.ml", 363, 13941, 13999), 0), 0, Tag1 ("Ppxlib_ast__Ast", 188)); (("Pexp_function", 764), ([(Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -10419)]), 0, (("ast/ast.ml", 370, 14333, 14335), ("ast/ast.ml", 370, 14333, 14359), 0), 0, Tag1 ("Ppxlib_ast__Ast", 189)); (("Pexp_fun", 765), ([(Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -10420); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10422)], (0)), 100000000, 0, -10421); (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -10423); (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10424)]), 0, (("ast/ast.ml", 371, 14405, 14407), ("ast/ast.ml", 371, 14405, 14473), 0), 0, Tag1 ("Ppxlib_ast__Ast", 190)); (("Pexp_apply", 766), ([(Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10425); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -10428); (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10429)]), 100000000, 0, -10427)], (0)), 100000000, 0, -10426)]), 0, (("ast/ast.ml", 392, 15373, 15375), ("ast/ast.ml", 392, 15373, 15433), 0), 0, Tag1 ("Ppxlib_ast__Ast", 191)); (("Pexp_match", 767), ([(Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10430); (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -10431)]), 0, (("ast/ast.ml", 402, 15821, 15823), ("ast/ast.ml", 402, 15821, 15857), 0), 0, Tag1 ("Ppxlib_ast__Ast", 192)); (("Pexp_try", 768), ([(Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10432); (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -10433)]), 0, (("ast/ast.ml", 404, 15913, 15915), ("ast/ast.ml", 404, 15913, 15947), 0), 0, Tag1 ("Ppxlib_ast__Ast", 193)); (("Pexp_tuple", 769), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10435)], (0)), 100000000, 0, -10434)]), 0, (("ast/ast.ml", 406, 16001, 16003), ("ast/ast.ml", 406, 16001, 16034), 0), 0, Tag1 ("Ppxlib_ast__Ast", 194)); (("Pexp_construct", 770), ([(Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -10436); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10438)], (0)), 100000000, 0, -10437)]), 0, (("ast/ast.ml", 410, 16107, 16109), ("ast/ast.ml", 410, 16107, 16162), 0), 0, Tag1 ("Ppxlib_ast__Ast", 195)); (("Pexp_variant", 771), ([(Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -10439); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10441)], (0)), 100000000, 0, -10440)]), 0, (("ast/ast.ml", 416, 16371, 16373), ("ast/ast.ml", 416, 16371, 16416), 0), 0, Tag1 ("Ppxlib_ast__Ast", 196)); (("Pexp_record", 772), ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -10444); (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10445)]), 100000000, 0, -10443)], (0)), 100000000, 0, -10442); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10447)], (0)), 100000000, 0, -10446)]), 0, (("ast/ast.ml", 421, 16546, 16548), ("ast/ast.ml", 421, 16546, 16618), 0), 0, Tag1 ("Ppxlib_ast__Ast", 197)); (("Pexp_field", 773), ([(Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10448); (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -10449)]), 0, (("ast/ast.ml", 428, 16850, 16852), ("ast/ast.ml", 428, 16850, 16894), 0), 0, Tag1 ("Ppxlib_ast__Ast", 198)); (("Pexp_setfield", 774), ([(Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10450); (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -10451); (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10452)]), 0, (("ast/ast.ml", 429, 16909, 16911), ("ast/ast.ml", 429, 16909, 16969), 0), 0, Tag1 ("Ppxlib_ast__Ast", 199)); (("Pexp_array", 775), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10454)], (0)), 100000000, 0, -10453)]), 0, (("ast/ast.ml", 431, 16996, 16998), ("ast/ast.ml", 431, 16996, 17029), 0), 0, Tag1 ("Ppxlib_ast__Ast", 200)); (("Pexp_ifthenelse", 776), ([(Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10455); (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10456); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10458)], (0)), 100000000, 0, -10457)]), 0, (("ast/ast.ml", 432, 17060, 17062), ("ast/ast.ml", 432, 17060, 17126), 0), 0, Tag1 ("Ppxlib_ast__Ast", 201)); (("Pexp_sequence", 777), ([(Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10459); (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10460)]), 0, (("ast/ast.ml", 434, 17164, 17166), ("ast/ast.ml", 434, 17164, 17208), 0), 0, Tag1 ("Ppxlib_ast__Ast", 202)); (("Pexp_while", 778), ([(Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10461); (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10462)]), 0, (("ast/ast.ml", 435, 17226, 17228), ("ast/ast.ml", 435, 17226, 17267), 0), 0, Tag1 ("Ppxlib_ast__Ast", 203)); (("Pexp_for", 779), ([(Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -10463); (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10464); (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10465); (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -10466); (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10467)]), 0, (("ast/ast.ml", 436, 17298, 17300), ("ast/ast.ml", 436, 17298, 17377), 0), 0, Tag1 ("Ppxlib_ast__Ast", 204)); (("Pexp_constraint", 780), ([(Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10468); (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -10469)]), 0, (("ast/ast.ml", 443, 17679, 17681), ("ast/ast.ml", 443, 17679, 17724), 0), 0, Tag1 ("Ppxlib_ast__Ast", 205)); (("Pexp_coerce", 781), ([(Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10470); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -10472)], (0)), 100000000, 0, -10471); (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -10473)]), 0, (("ast/ast.ml", 444, 17743, 17745), ("ast/ast.ml", 444, 17743, 17803), 0), 0, Tag1 ("Ppxlib_ast__Ast", 206)); (("Pexp_send", 782), ([(Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10474); (Tag3 ((("loc", 7356)), [(Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -10476)], (0)), 100000000, 0, -10475)]), 0, (("ast/ast.ml", 449, 17955, 17957), ("ast/ast.ml", 449, 17955, 17994), 0), 0, Tag1 ("Ppxlib_ast__Ast", 207)); (("Pexp_new", 783), ([(Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -10477)]), 0, (("ast/ast.ml", 450, 18011, 18013), ("ast/ast.ml", 450, 18011, 18040), 0), 0, Tag1 ("Ppxlib_ast__Ast", 208)); (("Pexp_setinstvar", 784), ([(Tag3 ((("loc", 7356)), [(Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -10479)], (0)), 100000000, 0, -10478); (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10480)]), 0, (("ast/ast.ml", 451, 18059, 18061), ("ast/ast.ml", 451, 18059, 18104), 0), 0, Tag1 ("Ppxlib_ast__Ast", 209)); (("Pexp_override", 785), ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("loc", 7356)), [(Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -10484)], (0)), 100000000, 0, -10483); (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10485)]), 100000000, 0, -10482)], (0)), 100000000, 0, -10481)]), 0, (("ast/ast.ml", 452, 18122, 18124), ("ast/ast.ml", 452, 18122, 18172), 0), 0, Tag1 ("Ppxlib_ast__Ast", 210)); (("Pexp_letmodule", 786), ([(Tag3 ((("loc", 7356)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10488)], (0)), 100000000, 0, -10487)], (0)), 100000000, 0, -10486); (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -10489); (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10490)]), 0, (("ast/ast.ml", 454, 18216, 18218), ("ast/ast.ml", 454, 18216, 18282), 0), 0, Tag1 ("Ppxlib_ast__Ast", 211)); (("Pexp_letexception", 787), ([(Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -10491); (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10492)]), 0, (("ast/ast.ml", 456, 18321, 18323), ("ast/ast.ml", 456, 18321, 18380), 0), 0, Tag1 ("Ppxlib_ast__Ast", 212)); (("Pexp_assert", 788), ([(Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10493)]), 0, (("ast/ast.ml", 458, 18417, 18419), ("ast/ast.ml", 458, 18417, 18446), 0), 0, Tag1 ("Ppxlib_ast__Ast", 213)); (("Pexp_lazy", 789), ([(Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10494)]), 0, (("ast/ast.ml", 462, 18553, 18555), ("ast/ast.ml", 462, 18553, 18580), 0), 0, Tag1 ("Ppxlib_ast__Ast", 214)); (("Pexp_poly", 790), ([(Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10495); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -10497)], (0)), 100000000, 0, -10496)]), 0, (("ast/ast.ml", 463, 18598, 18600), ("ast/ast.ml", 463, 18598, 18644), 0), 0, Tag1 ("Ppxlib_ast__Ast", 215)); (("Pexp_object", 791), ([(Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -10498)]), 0, (("ast/ast.ml", 469, 18830, 18832), ("ast/ast.ml", 469, 18830, 18864), 0), 0, Tag1 ("Ppxlib_ast__Ast", 216)); (("Pexp_newtype", 792), ([(Tag3 ((("loc", 7356)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10500)], (0)), 100000000, 0, -10499); (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10501)]), 0, (("ast/ast.ml", 470, 18890, 18892), ("ast/ast.ml", 470, 18890, 18933), 0), 0, Tag1 ("Ppxlib_ast__Ast", 217)); (("Pexp_pack", 793), ([(Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -10502)]), 0, (("ast/ast.ml", 471, 18962, 18964), ("ast/ast.ml", 471, 18962, 18990), 0), 0, Tag1 ("Ppxlib_ast__Ast", 218)); (("Pexp_open", 794), ([(Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -10503); (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10504)]), 0, (("ast/ast.ml", 476, 19124, 19126), ("ast/ast.ml", 476, 19124, 19170), 0), 0, Tag1 ("Ppxlib_ast__Ast", 219)); (("Pexp_letop", 795), ([(Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -10505)]), 0, (("ast/ast.ml", 480, 19255, 19257), ("ast/ast.ml", 480, 19255, 19278), 0), 0, Tag1 ("Ppxlib_ast__Ast", 220)); (("Pexp_extension", 796), ([(Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -10506)]), 0, (("ast/ast.ml", 483, 19362, 19364), ("ast/ast.ml", 483, 19362, 19393), 0), 0, Tag1 ("Ppxlib_ast__Ast", 221)); (("Pexp_unreachable", 797), (0), 0, (("ast/ast.ml", 484, 19412, 19414), ("ast/ast.ml", 484, 19412, 19432), 0), 0, Tag1 ("Ppxlib_ast__Ast", 222))], 0), 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "expression_desc"), 0, (0)), 100000000, 0, -10412)), 0, 0, 0, 0, (("ast/ast.ml", 358, 13689, 13689), ("ast/ast.ml", 484, 19412, 19432), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 32)), 2, 0); Tag1 (("case", 7386), (0, 0, [[(("pc_lhs", 798), 0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -10408), (("ast/ast.ml", 487, 19476, 19478), ("ast/ast.ml", 487, 19476, 19495), 0), 0, Tag1 ("Ppxlib_ast__Ast", 223)); (("pc_guard", 799), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10410)], (0)), 100000000, 0, -10409), (("ast/ast.ml", 488, 19496, 19498), ("ast/ast.ml", 488, 19496, 19527), 0), 0, Tag1 ("Ppxlib_ast__Ast", 224)); (("pc_rhs", 800), 0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10411), (("ast/ast.ml", 489, 19528, 19530), ("ast/ast.ml", 489, 19528, 19550), 0), 0, Tag1 ("Ppxlib_ast__Ast", 225))]], 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "case"), 0, (0)), 100000000, 0, -10407)), 0, 0, 0, 0, (("ast/ast.ml", 486, 19446, 19446), ("ast/ast.ml", 490, 19551, 19552), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 33)), 2, 0); Tag1 (("letop", 7387), (0, 0, [[(("let_", 801), 0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -10403), (("ast/ast.ml", 494, 19660, 19662), ("ast/ast.ml", 494, 19660, 19680), 0), 0, Tag1 ("Ppxlib_ast__Ast", 226)); (("ands", 802), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -10405)], (0)), 100000000, 0, -10404), (("ast/ast.ml", 495, 19681, 19683), ("ast/ast.ml", 495, 19681, 19706), 0), 0, Tag1 ("Ppxlib_ast__Ast", 227)); (("body", 803), 0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10406), (("ast/ast.ml", 496, 19707, 19709), ("ast/ast.ml", 496, 19707, 19727), 0), 0, Tag1 ("Ppxlib_ast__Ast", 228))]], 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "letop"), 0, (0)), 100000000, 0, -10402)), 0, 0, 0, 0, (("ast/ast.ml", 493, 19628, 19628), ("ast/ast.ml", 497, 19728, 19729), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 34)), 2, 0); Tag1 (("binding_op", 7388), (0, 0, [[(("pbop_op", 804), 0, (Tag3 ((("loc", 7356)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10398)], (0)), 100000000, 0, -10397), (("ast/ast.ml", 500, 19773, 19775), ("ast/ast.ml", 500, 19773, 19796), 0), 0, Tag1 ("Ppxlib_ast__Ast", 229)); (("pbop_pat", 805), 0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -10399), (("ast/ast.ml", 501, 19797, 19799), ("ast/ast.ml", 501, 19797, 19818), 0), 0, Tag1 ("Ppxlib_ast__Ast", 230)); (("pbop_exp", 806), 0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10400), (("ast/ast.ml", 502, 19819, 19821), ("ast/ast.ml", 502, 19819, 19843), 0), 0, Tag1 ("Ppxlib_ast__Ast", 231)); (("pbop_loc", 807), 0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -10401), (("ast/ast.ml", 503, 19844, 19846), ("ast/ast.ml", 503, 19844, 19866), 0), 0, Tag1 ("Ppxlib_ast__Ast", 232))]], 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "binding_op"), 0, (0)), 100000000, 0, -10396)), 0, 0, 0, 0, (("ast/ast.ml", 499, 19731, 19731), ("ast/ast.ml", 504, 19867, 19868), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 35)), 2, 0); Tag1 (("value_description", 7389), (0, 0, [[(("pval_name", 808), 0, (Tag3 ((("loc", 7356)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10390)], (0)), 100000000, 0, -10389), (("ast/ast.ml", 509, 19957, 19959), ("ast/ast.ml", 509, 19957, 19982), 0), 0, Tag1 ("Ppxlib_ast__Ast", 233)); (("pval_type", 809), 0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -10391), (("ast/ast.ml", 510, 19983, 19985), ("ast/ast.ml", 510, 19983, 20007), 0), 0, Tag1 ("Ppxlib_ast__Ast", 234)); (("pval_prim", 810), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10393)], (0)), 100000000, 0, -10392), (("ast/ast.ml", 511, 20008, 20010), ("ast/ast.ml", 511, 20008, 20034), 0), 0, Tag1 ("Ppxlib_ast__Ast", 235)); (("pval_attributes", 811), 0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -10394), (("ast/ast.ml", 512, 20035, 20037), ("ast/ast.ml", 512, 20035, 20066), 0), 0, Tag1 ("Ppxlib_ast__Ast", 236)); (("pval_loc", 812), 0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -10395), (("ast/ast.ml", 513, 20101, 20103), ("ast/ast.ml", 513, 20101, 20123), 0), 0, Tag1 ("Ppxlib_ast__Ast", 237))]], 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "value_description"), 0, (0)), 100000000, 0, -10388)), 0, 0, 0, 0, (("ast/ast.ml", 508, 19901, 19901), ("ast/ast.ml", 514, 20124, 20125), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 36)), 2, 0); Tag1 (("type_declaration", 7390), (0, 0, [[(("ptype_name", 813), 0, (Tag3 ((("loc", 7356)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10370)], (0)), 100000000, 0, -10369), (("ast/ast.ml", 524, 20461, 20463), ("ast/ast.ml", 524, 20461, 20487), 0), 0, Tag1 ("Ppxlib_ast__Ast", 238)); (("ptype_params", 814), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -10373); (Tag2 ([(Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -10375); (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -10376)]), 100000000, 0, -10374)]), 100000000, 0, -10372)], (0)), 100000000, 0, -10371), (("ast/ast.ml", 525, 20488, 20490), ("ast/ast.ml", 525, 20488, 20549), 0), 0, Tag1 ("Ppxlib_ast__Ast", 239)); (("ptype_cstrs", 815), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -10379); (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -10380); (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -10381)]), 100000000, 0, -10378)], (0)), 100000000, 0, -10377), (("ast/ast.ml", 527, 20580, 20582), ("ast/ast.ml", 527, 20580, 20636), 0), 0, Tag1 ("Ppxlib_ast__Ast", 240)); (("ptype_kind", 816), 0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -10382), (("ast/ast.ml", 529, 20697, 20699), ("ast/ast.ml", 529, 20697, 20722), 0), 0, Tag1 ("Ppxlib_ast__Ast", 241)); (("ptype_private", 817), 0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -10383), (("ast/ast.ml", 530, 20723, 20725), ("ast/ast.ml", 530, 20723, 20754), 0), 0, Tag1 ("Ppxlib_ast__Ast", 242)); (("ptype_manifest", 818), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -10385)], (0)), 100000000, 0, -10384), (("ast/ast.ml", 531, 20783, 20785), ("ast/ast.ml", 531, 20783, 20819), 0), 0, Tag1 ("Ppxlib_ast__Ast", 243)); (("ptype_attributes", 819), 0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -10386), (("ast/ast.ml", 532, 20845, 20847), ("ast/ast.ml", 532, 20845, 20877), 0), 0, Tag1 ("Ppxlib_ast__Ast", 244)); (("ptype_loc", 820), 0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -10387), (("ast/ast.ml", 533, 20912, 20914), ("ast/ast.ml", 533, 20912, 20935), 0), 0, Tag1 ("Ppxlib_ast__Ast", 245))]], 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "type_declaration"), 0, (0)), 100000000, 0, -10368)), 0, 0, 0, 0, (("ast/ast.ml", 523, 20407, 20407), ("ast/ast.ml", 534, 20936, 20937), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 37)), 2, 0); Tag1 (("type_kind", 7391), (0, 0, Tag1 ([(("Ptype_abstract", 821), (0), 0, (("ast/ast.ml", 555, 22043, 22045), ("ast/ast.ml", 555, 22043, 22061), 0), 0, Tag1 ("Ppxlib_ast__Ast", 246)); (("Ptype_variant", 822), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -10365)], (0)), 100000000, 0, -10364)]), 0, (("ast/ast.ml", 556, 22062, 22064), ("ast/ast.ml", 556, 22062, 22111), 0), 0, Tag1 ("Ppxlib_ast__Ast", 247)); (("Ptype_record", 823), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -10367)], (0)), 100000000, 0, -10366)]), 0, (("ast/ast.ml", 557, 22112, 22114), ("ast/ast.ml", 557, 22112, 22154), 0), 0, Tag1 ("Ppxlib_ast__Ast", 248)); (("Ptype_open", 824), (0), 0, (("ast/ast.ml", 558, 22189, 22191), ("ast/ast.ml", 558, 22189, 22203), 0), 0, Tag1 ("Ppxlib_ast__Ast", 249))], 0), 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "type_kind"), 0, (0)), 100000000, 0, -10363)), 0, 0, 0, 0, (("ast/ast.ml", 554, 22005, 22005), ("ast/ast.ml", 558, 22189, 22203), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 38)), 2, 0); Tag1 (("label_declaration", 7392), (0, 0, [[(("pld_name", 825), 0, (Tag3 ((("loc", 7356)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10358)], (0)), 100000000, 0, -10357), (("ast/ast.ml", 561, 22261, 22263), ("ast/ast.ml", 561, 22261, 22285), 0), 0, Tag1 ("Ppxlib_ast__Ast", 250)); (("pld_mutable", 826), 0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -10359), (("ast/ast.ml", 562, 22286, 22288), ("ast/ast.ml", 562, 22286, 22315), 0), 0, Tag1 ("Ppxlib_ast__Ast", 251)); (("pld_type", 827), 0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -10360), (("ast/ast.ml", 563, 22316, 22318), ("ast/ast.ml", 563, 22316, 22339), 0), 0, Tag1 ("Ppxlib_ast__Ast", 252)); (("pld_loc", 828), 0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -10361), (("ast/ast.ml", 564, 22340, 22342), ("ast/ast.ml", 564, 22340, 22361), 0), 0, Tag1 ("Ppxlib_ast__Ast", 253)); (("pld_attributes", 829), 0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -10362), (("ast/ast.ml", 565, 22362, 22364), ("ast/ast.ml", 565, 22362, 22392), 0), 0, Tag1 ("Ppxlib_ast__Ast", 254))]], 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "label_declaration"), 0, (0)), 100000000, 0, -10356)), 0, 0, 0, 0, (("ast/ast.ml", 560, 22205, 22205), ("ast/ast.ml", 566, 22427, 22428), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 39)), 2, 0); Tag1 (("constructor_declaration", 7393), (0, 0, [[(("pcd_name", 830), 0, (Tag3 ((("loc", 7356)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10347)], (0)), 100000000, 0, -10346), (("ast/ast.ml", 575, 22852, 22854), ("ast/ast.ml", 575, 22852, 22876), 0), 0, Tag1 ("Ppxlib_ast__Ast", 255)); (("pcd_vars", 831), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("loc", 7356)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10350)], (0)), 100000000, 0, -10349)], (0)), 100000000, 0, -10348), (("ast/ast.ml", 576, 22877, 22879), ("ast/ast.ml", 576, 22877, 22906), 0), 0, Tag1 ("Ppxlib_ast__Ast", 256)); (("pcd_args", 832), 0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -10351), (("ast/ast.ml", 577, 22907, 22909), ("ast/ast.ml", 577, 22907, 22942), 0), 0, Tag1 ("Ppxlib_ast__Ast", 257)); (("pcd_res", 833), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -10353)], (0)), 100000000, 0, -10352), (("ast/ast.ml", 578, 22943, 22945), ("ast/ast.ml", 578, 22943, 22972), 0), 0, Tag1 ("Ppxlib_ast__Ast", 258)); (("pcd_loc", 834), 0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -10354), (("ast/ast.ml", 579, 22973, 22975), ("ast/ast.ml", 579, 22973, 22994), 0), 0, Tag1 ("Ppxlib_ast__Ast", 259)); (("pcd_attributes", 835), 0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -10355), (("ast/ast.ml", 580, 22995, 22997), ("ast/ast.ml", 580, 22995, 23025), 0), 0, Tag1 ("Ppxlib_ast__Ast", 260))]], 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "constructor_declaration"), 0, (0)), 100000000, 0, -10345)), 0, 0, 0, 0, (("ast/ast.ml", 574, 22784, 22784), ("ast/ast.ml", 581, 23063, 23064), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 40)), 2, 0); Tag1 (("constructor_arguments", 7394), (0, 0, Tag1 ([(("Pcstr_tuple", 836), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -10342)], (0)), 100000000, 0, -10341)]), 0, (("ast/ast.ml", 584, 23128, 23130), ("ast/ast.ml", 584, 23128, 23161), 0), 0, Tag1 ("Ppxlib_ast__Ast", 261)); (("Pcstr_record", 837), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -10344)], (0)), 100000000, 0, -10343)]), 0, (("ast/ast.ml", 585, 23162, 23164), ("ast/ast.ml", 585, 23162, 23204), 0), 0, Tag1 ("Ppxlib_ast__Ast", 262))], 0), 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "constructor_arguments"), 0, (0)), 100000000, 0, -10340)), 0, 0, 0, 0, (("ast/ast.ml", 583, 23066, 23066), ("ast/ast.ml", 585, 23162, 23204), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 41)), 2, 0); Tag1 (("type_extension", 7395), (0, 0, [[(("ptyext_path", 838), 0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -10328), (("ast/ast.ml", 599, 23834, 23836), ("ast/ast.ml", 599, 23834, 23864), 0), 0, Tag1 ("Ppxlib_ast__Ast", 263)); (("ptyext_params", 839), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -10331); (Tag2 ([(Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -10333); (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -10334)]), 100000000, 0, -10332)]), 100000000, 0, -10330)], (0)), 100000000, 0, -10329), (("ast/ast.ml", 600, 23865, 23867), ("ast/ast.ml", 600, 23865, 23927), 0), 0, Tag1 ("Ppxlib_ast__Ast", 264)); (("ptyext_constructors", 840), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -10336)], (0)), 100000000, 0, -10335), (("ast/ast.ml", 601, 23928, 23930), ("ast/ast.ml", 601, 23928, 23979), 0), 0, Tag1 ("Ppxlib_ast__Ast", 265)); (("ptyext_private", 841), 0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -10337), (("ast/ast.ml", 602, 23980, 23982), ("ast/ast.ml", 602, 23980, 24012), 0), 0, Tag1 ("Ppxlib_ast__Ast", 266)); (("ptyext_loc", 842), 0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -10338), (("ast/ast.ml", 603, 24013, 24015), ("ast/ast.ml", 603, 24013, 24037), 0), 0, Tag1 ("Ppxlib_ast__Ast", 267)); (("ptyext_attributes", 843), 0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -10339), (("ast/ast.ml", 604, 24038, 24040), ("ast/ast.ml", 604, 24038, 24071), 0), 0, Tag1 ("Ppxlib_ast__Ast", 268))]], 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "type_extension"), 0, (0)), 100000000, 0, -10327)), 0, 0, 0, 0, (("ast/ast.ml", 598, 23784, 23784), ("ast/ast.ml", 605, 24100, 24101), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 42)), 2, 0); Tag1 (("extension_constructor", 7396), (0, 0, [[(("pext_name", 844), 0, (Tag3 ((("loc", 7356)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10323)], (0)), 100000000, 0, -10322), (("ast/ast.ml", 610, 24270, 24272), ("ast/ast.ml", 610, 24270, 24295), 0), 0, Tag1 ("Ppxlib_ast__Ast", 269)); (("pext_kind", 845), 0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -10324), (("ast/ast.ml", 611, 24296, 24298), ("ast/ast.ml", 611, 24296, 24337), 0), 0, Tag1 ("Ppxlib_ast__Ast", 270)); (("pext_loc", 846), 0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -10325), (("ast/ast.ml", 612, 24338, 24340), ("ast/ast.ml", 612, 24338, 24360), 0), 0, Tag1 ("Ppxlib_ast__Ast", 271)); (("pext_attributes", 847), 0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -10326), (("ast/ast.ml", 613, 24361, 24363), ("ast/ast.ml", 613, 24361, 24392), 0), 0, Tag1 ("Ppxlib_ast__Ast", 272))]], 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "extension_constructor"), 0, (0)), 100000000, 0, -10321)), 0, 0, 0, 0, (("ast/ast.ml", 609, 24206, 24206), ("ast/ast.ml", 614, 24430, 24431), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 43)), 2, 0); Tag1 (("type_exception", 7397), (0, 0, [[(("ptyexn_constructor", 848), 0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -10318), (("ast/ast.ml", 617, 24483, 24485), ("ast/ast.ml", 617, 24483, 24528), 0), 0, Tag1 ("Ppxlib_ast__Ast", 273)); (("ptyexn_loc", 849), 0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -10319), (("ast/ast.ml", 618, 24529, 24531), ("ast/ast.ml", 618, 24529, 24553), 0), 0, Tag1 ("Ppxlib_ast__Ast", 274)); (("ptyexn_attributes", 850), 0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -10320), (("ast/ast.ml", 619, 24554, 24556), ("ast/ast.ml", 619, 24554, 24587), 0), 0, Tag1 ("Ppxlib_ast__Ast", 275))]], 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "type_exception"), 0, (0)), 100000000, 0, -10317)), 0, 0, 0, 0, (("ast/ast.ml", 616, 24433, 24433), ("ast/ast.ml", 620, 24622, 24623), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 44)), 2, 0); Tag1 (("extension_constructor_kind", 7398), (0, 0, Tag1 ([(("Pext_decl", 851), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("loc", 7356)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10312)], (0)), 100000000, 0, -10311)], (0)), 100000000, 0, -10310); (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -10313); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -10315)], (0)), 100000000, 0, -10314)]), 0, (("ast/ast.ml", 624, 24751, 24753), ("ast/ast.ml", 624, 24751, 24826), 0), 0, Tag1 ("Ppxlib_ast__Ast", 276)); (("Pext_rebind", 852), ([(Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -10316)]), 0, (("ast/ast.ml", 658, 25745, 25747), ("ast/ast.ml", 658, 25745, 25777), 0), 0, Tag1 ("Ppxlib_ast__Ast", 277))], 0), 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "extension_constructor_kind"), 0, (0)), 100000000, 0, -10309)), 0, 0, 0, 0, (("ast/ast.ml", 623, 24679, 24679), ("ast/ast.ml", 658, 25745, 25777), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 45)), 2, 0); Tag1 (("class_type", 7399), (0, 0, [[(("pcty_desc", 853), 0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -10306), (("ast/ast.ml", 665, 25981, 25983), ("ast/ast.ml", 665, 25981, 26011), 0), 0, Tag1 ("Ppxlib_ast__Ast", 278)); (("pcty_loc", 854), 0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -10307), (("ast/ast.ml", 666, 26012, 26014), ("ast/ast.ml", 666, 26012, 26034), 0), 0, Tag1 ("Ppxlib_ast__Ast", 279)); (("pcty_attributes", 855), 0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -10308), (("ast/ast.ml", 667, 26035, 26037), ("ast/ast.ml", 667, 26035, 26066), 0), 0, Tag1 ("Ppxlib_ast__Ast", 280))]], 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "class_type"), 0, (0)), 100000000, 0, -10305)), 0, 0, 0, 0, (("ast/ast.ml", 664, 25939, 25939), ("ast/ast.ml", 668, 26099, 26100), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 46)), 2, 0); Tag1 (("class_type_desc", 7400), (0, 0, Tag1 ([(("Pcty_constr", 856), ([(Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -10295); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -10297)], (0)), 100000000, 0, -10296)]), 0, (("ast/ast.ml", 671, 26152, 26154), ("ast/ast.ml", 671, 26152, 26201), 0), 0, Tag1 ("Ppxlib_ast__Ast", 281)); (("Pcty_signature", 857), ([(Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -10298)]), 0, (("ast/ast.ml", 674, 26255, 26257), ("ast/ast.ml", 674, 26255, 26292), 0), 0, Tag1 ("Ppxlib_ast__Ast", 282)); (("Pcty_arrow", 858), ([(Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -10299); (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -10300); (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -10301)]), 0, (("ast/ast.ml", 675, 26318, 26320), ("ast/ast.ml", 675, 26318, 26370), 0), 0, Tag1 ("Ppxlib_ast__Ast", 283)); (("Pcty_extension", 859), ([(Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -10302)]), 0, (("ast/ast.ml", 683, 26697, 26699), ("ast/ast.ml", 683, 26697, 26728), 0), 0, Tag1 ("Ppxlib_ast__Ast", 284)); (("Pcty_open", 860), ([(Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -10303); (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -10304)]), 0, (("ast/ast.ml", 684, 26743, 26745), ("ast/ast.ml", 684, 26743, 26789), 0), 0, Tag1 ("Ppxlib_ast__Ast", 285))], 0), 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "class_type_desc"), 0, (0)), 100000000, 0, -10294)), 0, 0, 0, 0, (("ast/ast.ml", 670, 26102, 26102), ("ast/ast.ml", 684, 26743, 26789), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 47)), 2, 0); Tag1 (("class_signature", 7401), (0, 0, [[(("pcsig_self", 861), 0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -10291), (("ast/ast.ml", 687, 26870, 26872), ("ast/ast.ml", 687, 26870, 26895), 0), 0, Tag1 ("Ppxlib_ast__Ast", 286)); (("pcsig_fields", 862), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -10293)], (0)), 100000000, 0, -10292), (("ast/ast.ml", 688, 26896, 26898), ("ast/ast.ml", 688, 26896, 26935), 0), 0, Tag1 ("Ppxlib_ast__Ast", 287))]], 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "class_signature"), 0, (0)), 100000000, 0, -10290)), 0, 0, 0, 0, (("ast/ast.ml", 686, 26818, 26818), ("ast/ast.ml", 689, 26936, 26937), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 48)), 2, 0); Tag1 (("class_type_field", 7402), (0, 0, [[(("pctf_desc", 863), 0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -10287), (("ast/ast.ml", 697, 27201, 27203), ("ast/ast.ml", 697, 27201, 27237), 0), 0, Tag1 ("Ppxlib_ast__Ast", 288)); (("pctf_loc", 864), 0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -10288), (("ast/ast.ml", 698, 27238, 27240), ("ast/ast.ml", 698, 27238, 27260), 0), 0, Tag1 ("Ppxlib_ast__Ast", 289)); (("pctf_attributes", 865), 0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -10289), (("ast/ast.ml", 699, 27261, 27263), ("ast/ast.ml", 699, 27261, 27292), 0), 0, Tag1 ("Ppxlib_ast__Ast", 290))]], 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "class_type_field"), 0, (0)), 100000000, 0, -10286)), 0, 0, 0, 0, (("ast/ast.ml", 696, 27147, 27147), ("ast/ast.ml", 700, 27327, 27328), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 49)), 2, 0); Tag1 (("class_type_field_desc", 7403), (0, 0, Tag1 ([(("Pctf_inherit", 866), ([(Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -10268)]), 0, (("ast/ast.ml", 703, 27392, 27394), ("ast/ast.ml", 703, 27392, 27422), 0), 0, Tag1 ("Ppxlib_ast__Ast", 291)); (("Pctf_val", 867), ([(Tag2 ([(Tag3 ((("loc", 7356)), [(Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -10271)], (0)), 100000000, 0, -10270); (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -10272); (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -10273); (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -10274)]), 100000000, 0, -10269)]), 0, (("ast/ast.ml", 704, 27444, 27446), ("ast/ast.ml", 704, 27444, 27513), 0), 0, Tag1 ("Ppxlib_ast__Ast", 292)); (("Pctf_method", 868), ([(Tag2 ([(Tag3 ((("loc", 7356)), [(Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -10277)], (0)), 100000000, 0, -10276); (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -10278); (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -10279); (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -10280)]), 100000000, 0, -10275)]), 0, (("ast/ast.ml", 706, 27538, 27540), ("ast/ast.ml", 706, 27538, 27610), 0), 0, Tag1 ("Ppxlib_ast__Ast", 293)); (("Pctf_constraint", 869), ([(Tag2 ([(Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -10282); (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -10283)]), 100000000, 0, -10281)]), 0, (("ast/ast.ml", 710, 27711, 27713), ("ast/ast.ml", 710, 27711, 27757), 0), 0, Tag1 ("Ppxlib_ast__Ast", 294)); (("Pctf_attribute", 870), ([(Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -10284)]), 0, (("ast/ast.ml", 711, 27787, 27789), ("ast/ast.ml", 711, 27787, 27818), 0), 0, Tag1 ("Ppxlib_ast__Ast", 295)); (("Pctf_extension", 871), ([(Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -10285)]), 0, (("ast/ast.ml", 712, 27839, 27841), ("ast/ast.ml", 712, 27839, 27870), 0), 0, Tag1 ("Ppxlib_ast__Ast", 296))], 0), 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "class_type_field_desc"), 0, (0)), 100000000, 0, -10267)), 0, 0, 0, 0, (("ast/ast.ml", 702, 27330, 27330), ("ast/ast.ml", 712, 27839, 27870), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 50)), 2, 0); Tag1 (("class_infos", 7404), ([((("a")), 100000000, 0, -10255)], 1, [[(("pci_virt", 872), 0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -10256), (("ast/ast.ml", 715, 27941, 27943), ("ast/ast.ml", 715, 27941, 27967), 0), 0, Tag1 ("Ppxlib_ast__Ast", 297)); (("pci_params", 873), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -10259); (Tag2 ([(Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -10261); (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -10262)]), 100000000, 0, -10260)]), 100000000, 0, -10258)], (0)), 100000000, 0, -10257), (("ast/ast.ml", 716, 27968, 27970), ("ast/ast.ml", 716, 27968, 28027), 0), 0, Tag1 ("Ppxlib_ast__Ast", 298)); (("pci_name", 874), 0, (Tag3 ((("loc", 7356)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10264)], (0)), 100000000, 0, -10263), (("ast/ast.ml", 717, 28028, 28030), ("ast/ast.ml", 717, 28028, 28052), 0), 0, Tag1 ("Ppxlib_ast__Ast", 299)); (("pci_expr", 875), 0, ((("a")), 100000000, 0, -10255), (("ast/ast.ml", 718, 28053, 28055), ("ast/ast.ml", 718, 28053, 28069), 0), 0, Tag1 ("Ppxlib_ast__Ast", 300)); (("pci_loc", 876), 0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -10265), (("ast/ast.ml", 719, 28070, 28072), ("ast/ast.ml", 719, 28070, 28091), 0), 0, Tag1 ("Ppxlib_ast__Ast", 301)); (("pci_attributes", 877), 0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -10266), (("ast/ast.ml", 720, 28092, 28094), ("ast/ast.ml", 720, 28092, 28122), 0), 0, Tag1 ("Ppxlib_ast__Ast", 302))]], 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "class_infos"), [((("a")), 100000000, 0, -10255)], (0)), 100000000, 0, -10254)), [25], [0], 0, 0, (("ast/ast.ml", 714, 27891, 27891), ("ast/ast.ml", 721, 28157, 28158), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 51)), 2, 0); Tag1 (("class_description", 7405), (0, 0, 0, 1, ((Tag3 ((("class_infos", 7404)), [(Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -10253)], (0)), 100000000, 0, -10252)), 0, 0, 0, 0, (("ast/ast.ml", 730, 28364, 28364), ("ast/ast.ml", 730, 28364, 28410), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 52)), 2, 0); Tag1 (("class_type_declaration", 7406), (0, 0, 0, 1, ((Tag3 ((("class_infos", 7404)), [(Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -10251)], (0)), 100000000, 0, -10250)), 0, 0, 0, 0, (("ast/ast.ml", 731, 28411, 28411), ("ast/ast.ml", 731, 28411, 28462), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 53)), 2, 0); Tag1 (("class_expr", 7407), (0, 0, [[(("pcl_desc", 878), 0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -10247), (("ast/ast.ml", 736, 28559, 28561), ("ast/ast.ml", 736, 28559, 28588), 0), 0, Tag1 ("Ppxlib_ast__Ast", 303)); (("pcl_loc", 879), 0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -10248), (("ast/ast.ml", 737, 28589, 28591), ("ast/ast.ml", 737, 28589, 28610), 0), 0, Tag1 ("Ppxlib_ast__Ast", 304)); (("pcl_attributes", 880), 0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -10249), (("ast/ast.ml", 738, 28611, 28613), ("ast/ast.ml", 738, 28611, 28641), 0), 0, Tag1 ("Ppxlib_ast__Ast", 305))]], 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "class_expr"), 0, (0)), 100000000, 0, -10246)), 0, 0, 0, 0, (("ast/ast.ml", 735, 28517, 28517), ("ast/ast.ml", 739, 28674, 28675), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 54)), 2, 0); Tag1 (("class_expr_desc", 7408), (0, 0, Tag1 ([(("Pcl_constr", 881), ([(Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -10223); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -10225)], (0)), 100000000, 0, -10224)]), 0, (("ast/ast.ml", 742, 28727, 28729), ("ast/ast.ml", 742, 28727, 28775), 0), 0, Tag1 ("Ppxlib_ast__Ast", 306)); (("Pcl_structure", 882), ([(Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -10226)]), 0, (("ast/ast.ml", 744, 28819, 28821), ("ast/ast.ml", 744, 28819, 28855), 0), 0, Tag1 ("Ppxlib_ast__Ast", 307)); (("Pcl_fun", 883), ([(Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -10227); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10229)], (0)), 100000000, 0, -10228); (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -10230); (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -10231)]), 0, (("ast/ast.ml", 745, 28881, 28883), ("ast/ast.ml", 745, 28881, 28948), 0), 0, Tag1 ("Ppxlib_ast__Ast", 308)); (("Pcl_apply", 884), ([(Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -10232); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -10235); (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10236)]), 100000000, 0, -10234)], (0)), 100000000, 0, -10233)]), 0, (("ast/ast.ml", 757, 29510, 29512), ("ast/ast.ml", 757, 29510, 29569), 0), 0, Tag1 ("Ppxlib_ast__Ast", 309)); (("Pcl_let", 885), ([(Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -10237); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -10239)], (0)), 100000000, 0, -10238); (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -10240)]), 0, (("ast/ast.ml", 763, 29793, 29795), ("ast/ast.ml", 763, 29793, 29850), 0), 0, Tag1 ("Ppxlib_ast__Ast", 310)); (("Pcl_constraint", 886), ([(Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -10241); (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -10242)]), 0, (("ast/ast.ml", 770, 30184, 30186), ("ast/ast.ml", 770, 30184, 30229), 0), 0, Tag1 ("Ppxlib_ast__Ast", 311)); (("Pcl_extension", 887), ([(Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -10243)]), 0, (("ast/ast.ml", 771, 30250, 30252), ("ast/ast.ml", 771, 30250, 30280), 0), 0, Tag1 ("Ppxlib_ast__Ast", 312)); (("Pcl_open", 888), ([(Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -10244); (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -10245)]), 0, (("ast/ast.ml", 772, 30299, 30301), ("ast/ast.ml", 772, 30299, 30344), 0), 0, Tag1 ("Ppxlib_ast__Ast", 313))], 0), 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "class_expr_desc"), 0, (0)), 100000000, 0, -10222)), 0, 0, 0, 0, (("ast/ast.ml", 741, 28677, 28677), ("ast/ast.ml", 772, 30299, 30344), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 55)), 2, 0); Tag1 (("class_structure", 7409), (0, 0, [[(("pcstr_self", 889), 0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -10219), (("ast/ast.ml", 775, 30425, 30427), ("ast/ast.ml", 775, 30425, 30448), 0), 0, Tag1 ("Ppxlib_ast__Ast", 314)); (("pcstr_fields", 890), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -10221)], (0)), 100000000, 0, -10220), (("ast/ast.ml", 776, 30449, 30451), ("ast/ast.ml", 776, 30449, 30483), 0), 0, Tag1 ("Ppxlib_ast__Ast", 315))]], 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "class_structure"), 0, (0)), 100000000, 0, -10218)), 0, 0, 0, 0, (("ast/ast.ml", 774, 30373, 30373), ("ast/ast.ml", 777, 30484, 30485), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 56)), 2, 0); Tag1 (("class_field", 7410), (0, 0, [[(("pcf_desc", 891), 0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -10215), (("ast/ast.ml", 785, 30737, 30739), ("ast/ast.ml", 785, 30737, 30767), 0), 0, Tag1 ("Ppxlib_ast__Ast", 316)); (("pcf_loc", 892), 0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -10216), (("ast/ast.ml", 786, 30768, 30770), ("ast/ast.ml", 786, 30768, 30789), 0), 0, Tag1 ("Ppxlib_ast__Ast", 317)); (("pcf_attributes", 893), 0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -10217), (("ast/ast.ml", 787, 30790, 30792), ("ast/ast.ml", 787, 30790, 30820), 0), 0, Tag1 ("Ppxlib_ast__Ast", 318))]], 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "class_field"), 0, (0)), 100000000, 0, -10214)), 0, 0, 0, 0, (("ast/ast.ml", 784, 30693, 30693), ("ast/ast.ml", 788, 30855, 30856), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 57)), 2, 0); Tag1 (("class_field_desc", 7411), (0, 0, Tag1 ([(("Pcf_inherit", 894), ([(Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -10193); (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -10194); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("loc", 7356)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10197)], (0)), 100000000, 0, -10196)], (0)), 100000000, 0, -10195)]), 0, (("ast/ast.ml", 791, 30910, 30912), ("ast/ast.ml", 791, 30910, 30975), 0), 0, Tag1 ("Ppxlib_ast__Ast", 319)); (("Pcf_val", 895), ([(Tag2 ([(Tag3 ((("loc", 7356)), [(Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -10200)], (0)), 100000000, 0, -10199); (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -10201); (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -10202)]), 100000000, 0, -10198)]), 0, (("ast/ast.ml", 802, 31508, 31510), ("ast/ast.ml", 802, 31508, 31568), 0), 0, Tag1 ("Ppxlib_ast__Ast", 320)); (("Pcf_method", 896), ([(Tag2 ([(Tag3 ((("loc", 7356)), [(Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -10205)], (0)), 100000000, 0, -10204); (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -10206); (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -10207)]), 100000000, 0, -10203)]), 0, (("ast/ast.ml", 817, 32367, 32369), ("ast/ast.ml", 817, 32367, 32430), 0), 0, Tag1 ("Ppxlib_ast__Ast", 321)); (("Pcf_constraint", 897), ([(Tag2 ([(Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -10209); (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -10210)]), 100000000, 0, -10208)]), 0, (("ast/ast.ml", 822, 32634, 32636), ("ast/ast.ml", 822, 32634, 32679), 0), 0, Tag1 ("Ppxlib_ast__Ast", 322)); (("Pcf_initializer", 898), ([(Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10211)]), 0, (("ast/ast.ml", 823, 32709, 32711), ("ast/ast.ml", 823, 32709, 32742), 0), 0, Tag1 ("Ppxlib_ast__Ast", 323)); (("Pcf_attribute", 899), ([(Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -10212)]), 0, (("ast/ast.ml", 824, 32767, 32769), ("ast/ast.ml", 824, 32767, 32797), 0), 0, Tag1 ("Ppxlib_ast__Ast", 324)); (("Pcf_extension", 900), ([(Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -10213)]), 0, (("ast/ast.ml", 825, 32818, 32820), ("ast/ast.ml", 825, 32818, 32848), 0), 0, Tag1 ("Ppxlib_ast__Ast", 325))], 0), 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "class_field_desc"), 0, (0)), 100000000, 0, -10192)), 0, 0, 0, 0, (("ast/ast.ml", 790, 30858, 30858), ("ast/ast.ml", 825, 32818, 32848), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 58)), 2, 0); Tag1 (("class_field_kind", 7412), (0, 0, Tag1 ([(("Cfk_virtual", 901), ([(Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -10189)]), 0, (("ast/ast.ml", 828, 32921, 32923), ("ast/ast.ml", 828, 32921, 32949), 0), 0, Tag1 ("Ppxlib_ast__Ast", 326)); (("Cfk_concrete", 902), ([(Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -10190); (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10191)]), 0, (("ast/ast.ml", 829, 32950, 32952), ("ast/ast.ml", 829, 32950, 32996), 0), 0, Tag1 ("Ppxlib_ast__Ast", 327))], 0), 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "class_field_kind"), 0, (0)), 100000000, 0, -10188)), 0, 0, 0, 0, (("ast/ast.ml", 827, 32869, 32869), ("ast/ast.ml", 829, 32950, 32996), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 59)), 2, 0); Tag1 (("class_declaration", 7413), (0, 0, 0, 1, ((Tag3 ((("class_infos", 7404)), [(Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -10187)], (0)), 100000000, 0, -10186)), 0, 0, 0, 0, (("ast/ast.ml", 831, 32998, 32998), ("ast/ast.ml", 831, 32998, 33044), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 60)), 2, 0); Tag1 (("module_type", 7414), (0, 0, [[(("pmty_desc", 903), 0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -10183), (("ast/ast.ml", 837, 33170, 33172), ("ast/ast.ml", 837, 33170, 33201), 0), 0, Tag1 ("Ppxlib_ast__Ast", 328)); (("pmty_loc", 904), 0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -10184), (("ast/ast.ml", 838, 33202, 33204), ("ast/ast.ml", 838, 33202, 33224), 0), 0, Tag1 ("Ppxlib_ast__Ast", 329)); (("pmty_attributes", 905), 0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -10185), (("ast/ast.ml", 839, 33225, 33227), ("ast/ast.ml", 839, 33225, 33256), 0), 0, Tag1 ("Ppxlib_ast__Ast", 330))]], 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "module_type"), 0, (0)), 100000000, 0, -10182)), 0, 0, 0, 0, (("ast/ast.ml", 836, 33126, 33126), ("ast/ast.ml", 840, 33289, 33290), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 61)), 2, 0); Tag1 (("module_type_desc", 7415), (0, 0, Tag1 ([(("Pmty_ident", 906), ([(Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -10172)]), 0, (("ast/ast.ml", 843, 33344, 33346), ("ast/ast.ml", 843, 33344, 33375), 0), 0, Tag1 ("Ppxlib_ast__Ast", 331)); (("Pmty_signature", 907), ([(Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -10173)]), 0, (("ast/ast.ml", 844, 33415, 33417), ("ast/ast.ml", 844, 33415, 33446), 0), 0, Tag1 ("Ppxlib_ast__Ast", 332)); (("Pmty_functor", 908), ([(Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -10174); (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -10175)]), 0, (("ast/ast.ml", 845, 33469, 33471), ("ast/ast.ml", 845, 33469, 33520), 0), 0, Tag1 ("Ppxlib_ast__Ast", 333)); (("Pmty_with", 909), ([(Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -10176); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -10178)], (0)), 100000000, 0, -10177)]), 0, (("ast/ast.ml", 847, 33560, 33562), ("ast/ast.ml", 847, 33560, 33611), 0), 0, Tag1 ("Ppxlib_ast__Ast", 334)); (("Pmty_typeof", 910), ([(Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -10179)]), 0, (("ast/ast.ml", 848, 33634, 33636), ("ast/ast.ml", 848, 33634, 33664), 0), 0, Tag1 ("Ppxlib_ast__Ast", 335)); (("Pmty_extension", 911), ([(Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -10180)]), 0, (("ast/ast.ml", 849, 33693, 33695), ("ast/ast.ml", 849, 33693, 33724), 0), 0, Tag1 ("Ppxlib_ast__Ast", 336)); (("Pmty_alias", 912), ([(Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -10181)]), 0, (("ast/ast.ml", 850, 33743, 33745), ("ast/ast.ml", 850, 33743, 33774), 0), 0, Tag1 ("Ppxlib_ast__Ast", 337))], 0), 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "module_type_desc"), 0, (0)), 100000000, 0, -10171)), 0, 0, 0, 0, (("ast/ast.ml", 842, 33292, 33292), ("ast/ast.ml", 850, 33743, 33774), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 62)), 2, 0); Tag1 (("functor_parameter", 7416), (0, 0, Tag1 ([(("Unit", 913), (0), 0, (("ast/ast.ml", 853, 33851, 33853), ("ast/ast.ml", 853, 33851, 33859), 0), 0, Tag1 ("Ppxlib_ast__Ast", 338)); (("Named", 914), ([(Tag3 ((("loc", 7356)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10169)], (0)), 100000000, 0, -10168)], (0)), 100000000, 0, -10167); (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -10170)]), 0, (("ast/ast.ml", 854, 33873, 33875), ("ast/ast.ml", 854, 33873, 33917), 0), 0, Tag1 ("Ppxlib_ast__Ast", 339))], 0), 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "functor_parameter"), 0, (0)), 100000000, 0, -10166)), 0, 0, 0, 0, (("ast/ast.ml", 852, 33797, 33797), ("ast/ast.ml", 854, 33873, 33917), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 63)), 2, 0); Tag1 (("signature", 7417), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -10165)], (0)), 100000000, 0, -10164)), 0, 0, 0, 0, (("ast/ast.ml", 860, 34056, 34056), ("ast/ast.ml", 860, 34056, 34091), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 64)), 2, 0); Tag1 (("signature_item", 7418), (0, 0, [[(("psig_desc", 915), 0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -10162), (("ast/ast.ml", 863, 34143, 34145), ("ast/ast.ml", 863, 34143, 34177), 0), 0, Tag1 ("Ppxlib_ast__Ast", 340)); (("psig_loc", 916), 0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -10163), (("ast/ast.ml", 864, 34178, 34180), ("ast/ast.ml", 864, 34178, 34200), 0), 0, Tag1 ("Ppxlib_ast__Ast", 341))]], 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "signature_item"), 0, (0)), 100000000, 0, -10161)), 0, 0, 0, 0, (("ast/ast.ml", 862, 34093, 34093), ("ast/ast.ml", 865, 34201, 34202), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 65)), 2, 0); Tag1 (("signature_item_desc", 7419), (0, 0, Tag1 ([(("Psig_value", 917), ([(Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -10138)]), 0, (("ast/ast.ml", 868, 34262, 34264), ("ast/ast.ml", 868, 34262, 34297), 0), 0, Tag1 ("Ppxlib_ast__Ast", 342)); (("Psig_type", 918), ([(Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -10139); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -10141)], (0)), 100000000, 0, -10140)]), 0, (("ast/ast.ml", 871, 34368, 34370), ("ast/ast.ml", 871, 34368, 34417), 0), 0, Tag1 ("Ppxlib_ast__Ast", 343)); (("Psig_typesubst", 919), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -10143)], (0)), 100000000, 0, -10142)]), 0, (("ast/ast.ml", 873, 34469, 34471), ("ast/ast.ml", 873, 34469, 34512), 0), 0, Tag1 ("Ppxlib_ast__Ast", 344)); (("Psig_typext", 920), ([(Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -10144)]), 0, (("ast/ast.ml", 875, 34565, 34567), ("ast/ast.ml", 875, 34565, 34598), 0), 0, Tag1 ("Ppxlib_ast__Ast", 345)); (("Psig_exception", 921), ([(Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -10145)]), 0, (("ast/ast.ml", 876, 34624, 34626), ("ast/ast.ml", 876, 34624, 34660), 0), 0, Tag1 ("Ppxlib_ast__Ast", 346)); (("Psig_module", 922), ([(Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -10146)]), 0, (("ast/ast.ml", 877, 34688, 34690), ("ast/ast.ml", 877, 34688, 34725), 0), 0, Tag1 ("Ppxlib_ast__Ast", 347)); (("Psig_modsubst", 923), ([(Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -10147)]), 0, (("ast/ast.ml", 878, 34769, 34771), ("ast/ast.ml", 878, 34769, 34809), 0), 0, Tag1 ("Ppxlib_ast__Ast", 348)); (("Psig_recmodule", 924), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -10149)], (0)), 100000000, 0, -10148)]), 0, (("ast/ast.ml", 879, 34834, 34836), ("ast/ast.ml", 879, 34834, 34879), 0), 0, Tag1 ("Ppxlib_ast__Ast", 349)); (("Psig_modtype", 925), ([(Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -10150)]), 0, (("ast/ast.ml", 881, 34936, 34938), ("ast/ast.ml", 881, 34936, 34979), 0), 0, Tag1 ("Ppxlib_ast__Ast", 350)); (("Psig_modtypesubst", 926), ([(Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -10151)]), 0, (("ast/ast.ml", 883, 35034, 35036), ("ast/ast.ml", 883, 35034, 35082), 0), 0, Tag1 ("Ppxlib_ast__Ast", 351)); (("Psig_open", 927), ([(Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -10152)]), 0, (("ast/ast.ml", 884, 35115, 35117), ("ast/ast.ml", 884, 35115, 35148), 0), 0, Tag1 ("Ppxlib_ast__Ast", 352)); (("Psig_include", 928), ([(Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -10153)]), 0, (("ast/ast.ml", 885, 35166, 35168), ("ast/ast.ml", 885, 35166, 35205), 0), 0, Tag1 ("Ppxlib_ast__Ast", 353)); (("Psig_class", 929), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -10155)], (0)), 100000000, 0, -10154)]), 0, (("ast/ast.ml", 886, 35227, 35229), ("ast/ast.ml", 886, 35227, 35267), 0), 0, Tag1 ("Ppxlib_ast__Ast", 354)); (("Psig_class_type", 930), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -10157)], (0)), 100000000, 0, -10156)]), 0, (("ast/ast.ml", 888, 35319, 35321), ("ast/ast.ml", 888, 35319, 35369), 0), 0, Tag1 ("Ppxlib_ast__Ast", 355)); (("Psig_attribute", 931), ([(Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -10158)]), 0, (("ast/ast.ml", 890, 35428, 35430), ("ast/ast.ml", 890, 35428, 35459), 0), 0, Tag1 ("Ppxlib_ast__Ast", 356)); (("Psig_extension", 932), ([(Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -10159); (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -10160)]), 0, (("ast/ast.ml", 891, 35480, 35482), ("ast/ast.ml", 891, 35480, 35524), 0), 0, Tag1 ("Ppxlib_ast__Ast", 357))], 0), 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "signature_item_desc"), 0, (0)), 100000000, 0, -10137)), 0, 0, 0, 0, (("ast/ast.ml", 867, 34204, 34204), ("ast/ast.ml", 891, 35480, 35524), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 66)), 2, 0); Tag1 (("module_declaration", 7420), (0, 0, [[(("pmd_name", 933), 0, (Tag3 ((("loc", 7356)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10133)], (0)), 100000000, 0, -10132)], (0)), 100000000, 0, -10131), (("ast/ast.ml", 894, 35603, 35605), ("ast/ast.ml", 894, 35603, 35634), 0), 0, Tag1 ("Ppxlib_ast__Ast", 358)); (("pmd_type", 934), 0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -10134), (("ast/ast.ml", 895, 35635, 35637), ("ast/ast.ml", 895, 35635, 35660), 0), 0, Tag1 ("Ppxlib_ast__Ast", 359)); (("pmd_attributes", 935), 0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -10135), (("ast/ast.ml", 896, 35661, 35663), ("ast/ast.ml", 896, 35661, 35691), 0), 0, Tag1 ("Ppxlib_ast__Ast", 360)); (("pmd_loc", 936), 0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -10136), (("ast/ast.ml", 897, 35726, 35728), ("ast/ast.ml", 897, 35726, 35747), 0), 0, Tag1 ("Ppxlib_ast__Ast", 361))]], 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "module_declaration"), 0, (0)), 100000000, 0, -10130)), 0, 0, 0, 0, (("ast/ast.ml", 893, 35545, 35545), ("ast/ast.ml", 898, 35748, 35749), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 67)), 2, 0); Tag1 (("module_substitution", 7421), (0, 0, [[(("pms_name", 937), 0, (Tag3 ((("loc", 7356)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10126)], (0)), 100000000, 0, -10125), (("ast/ast.ml", 902, 35874, 35876), ("ast/ast.ml", 902, 35874, 35898), 0), 0, Tag1 ("Ppxlib_ast__Ast", 362)); (("pms_manifest", 938), 0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -10127), (("ast/ast.ml", 903, 35899, 35901), ("ast/ast.ml", 903, 35899, 35930), 0), 0, Tag1 ("Ppxlib_ast__Ast", 363)); (("pms_attributes", 939), 0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -10128), (("ast/ast.ml", 904, 35931, 35933), ("ast/ast.ml", 904, 35931, 35961), 0), 0, Tag1 ("Ppxlib_ast__Ast", 364)); (("pms_loc", 940), 0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -10129), (("ast/ast.ml", 905, 35996, 35998), ("ast/ast.ml", 905, 35996, 36017), 0), 0, Tag1 ("Ppxlib_ast__Ast", 365))]], 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "module_substitution"), 0, (0)), 100000000, 0, -10124)), 0, 0, 0, 0, (("ast/ast.ml", 901, 35814, 35814), ("ast/ast.ml", 906, 36018, 36019), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 68)), 2, 0); Tag1 (("module_type_declaration", 7422), (0, 0, [[(("pmtd_name", 941), 0, (Tag3 ((("loc", 7356)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10119)], (0)), 100000000, 0, -10118), (("ast/ast.ml", 910, 36153, 36155), ("ast/ast.ml", 910, 36153, 36178), 0), 0, Tag1 ("Ppxlib_ast__Ast", 366)); (("pmtd_type", 942), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -10121)], (0)), 100000000, 0, -10120), (("ast/ast.ml", 911, 36179, 36181), ("ast/ast.ml", 911, 36179, 36212), 0), 0, Tag1 ("Ppxlib_ast__Ast", 367)); (("pmtd_attributes", 943), 0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -10122), (("ast/ast.ml", 912, 36213, 36215), ("ast/ast.ml", 912, 36213, 36244), 0), 0, Tag1 ("Ppxlib_ast__Ast", 368)); (("pmtd_loc", 944), 0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -10123), (("ast/ast.ml", 913, 36279, 36281), ("ast/ast.ml", 913, 36279, 36301), 0), 0, Tag1 ("Ppxlib_ast__Ast", 369))]], 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "module_type_declaration"), 0, (0)), 100000000, 0, -10117)), 0, 0, 0, 0, (("ast/ast.ml", 909, 36085, 36085), ("ast/ast.ml", 914, 36302, 36303), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 69)), 2, 0); Tag1 (("open_infos", 7423), ([((("a")), 100000000, 0, -10113)], 1, [[(("popen_expr", 945), 0, ((("a")), 100000000, 0, -10113), (("ast/ast.ml", 922, 36551, 36553), ("ast/ast.ml", 922, 36551, 36569), 0), 0, Tag1 ("Ppxlib_ast__Ast", 370)); (("popen_override", 946), 0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -10114), (("ast/ast.ml", 923, 36570, 36572), ("ast/ast.ml", 923, 36570, 36603), 0), 0, Tag1 ("Ppxlib_ast__Ast", 371)); (("popen_loc", 947), 0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -10115), (("ast/ast.ml", 924, 36604, 36606), ("ast/ast.ml", 924, 36604, 36627), 0), 0, Tag1 ("Ppxlib_ast__Ast", 372)); (("popen_attributes", 948), 0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -10116), (("ast/ast.ml", 925, 36628, 36630), ("ast/ast.ml", 925, 36628, 36660), 0), 0, Tag1 ("Ppxlib_ast__Ast", 373))]], 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "open_infos"), [((("a")), 100000000, 0, -10113)], (0)), 100000000, 0, -10112)), [25], [0], 0, 0, (("ast/ast.ml", 921, 36503, 36503), ("ast/ast.ml", 926, 36661, 36662), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 70)), 2, 0); Tag1 (("open_description", 7424), (0, 0, 0, 1, ((Tag3 ((("open_infos", 7423)), [(Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -10111)], (0)), 100000000, 0, -10110)), 0, 0, 0, 0, (("ast/ast.ml", 935, 37018, 37018), ("ast/ast.ml", 935, 37018, 37065), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 71)), 2, 0); Tag1 (("open_declaration", 7425), (0, 0, 0, 1, ((Tag3 ((("open_infos", 7423)), [(Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -10109)], (0)), 100000000, 0, -10108)), 0, 0, 0, 0, (("ast/ast.ml", 941, 37158, 37158), ("ast/ast.ml", 941, 37158, 37203), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 72)), 2, 0); Tag1 (("include_infos", 7426), ([((("a")), 100000000, 0, -10105)], 1, [[(("pincl_mod", 949), 0, ((("a")), 100000000, 0, -10105), (("ast/ast.ml", 949, 37378, 37380), ("ast/ast.ml", 949, 37378, 37395), 0), 0, Tag1 ("Ppxlib_ast__Ast", 374)); (("pincl_loc", 950), 0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -10106), (("ast/ast.ml", 950, 37396, 37398), ("ast/ast.ml", 950, 37396, 37419), 0), 0, Tag1 ("Ppxlib_ast__Ast", 375)); (("pincl_attributes", 951), 0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -10107), (("ast/ast.ml", 951, 37420, 37422), ("ast/ast.ml", 951, 37420, 37452), 0), 0, Tag1 ("Ppxlib_ast__Ast", 376))]], 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "include_infos"), [((("a")), 100000000, 0, -10105)], (0)), 100000000, 0, -10104)), [25], [0], 0, 0, (("ast/ast.ml", 948, 37324, 37324), ("ast/ast.ml", 952, 37453, 37454), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 73)), 2, 0); Tag1 (("include_description", 7427), (0, 0, 0, 1, ((Tag3 ((("include_infos", 7426)), [(Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -10103)], (0)), 100000000, 0, -10102)), 0, 0, 0, 0, (("ast/ast.ml", 954, 37456, 37456), ("ast/ast.ml", 954, 37456, 37507), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 74)), 2, 0); Tag1 (("include_declaration", 7428), (0, 0, 0, 1, ((Tag3 ((("include_infos", 7426)), [(Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -10101)], (0)), 100000000, 0, -10100)), 0, 0, 0, 0, (("ast/ast.ml", 957, 37577, 37577), ("ast/ast.ml", 957, 37577, 37628), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 75)), 2, 0); Tag1 (("with_constraint", 7429), (0, 0, Tag1 ([(("Pwith_type", 952), ([(Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -10088); (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -10089)]), 0, (("ast/ast.ml", 961, 37748, 37750), ("ast/ast.ml", 961, 37748, 37798), 0), 0, Tag1 ("Ppxlib_ast__Ast", 377)); (("Pwith_module", 953), ([(Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -10090); (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -10091)]), 0, (("ast/ast.ml", 966, 37942, 37944), ("ast/ast.ml", 966, 37942, 37991), 0), 0, Tag1 ("Ppxlib_ast__Ast", 378)); (("Pwith_modtype", 954), ([(Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -10092); (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -10093)]), 0, (("ast/ast.ml", 967, 38022, 38024), ("ast/ast.ml", 967, 38022, 38070), 0), 0, Tag1 ("Ppxlib_ast__Ast", 379)); (("Pwith_modtypesubst", 955), ([(Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -10094); (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -10095)]), 0, (("ast/ast.ml", 969, 38111, 38113), ("ast/ast.ml", 969, 38111, 38164), 0), 0, Tag1 ("Ppxlib_ast__Ast", 380)); (("Pwith_typesubst", 956), ([(Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -10096); (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -10097)]), 0, (("ast/ast.ml", 971, 38212, 38214), ("ast/ast.ml", 971, 38212, 38267), 0), 0, Tag1 ("Ppxlib_ast__Ast", 381)); (("Pwith_modsubst", 957), ([(Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -10098); (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -10099)]), 0, (("ast/ast.ml", 973, 38335, 38337), ("ast/ast.ml", 973, 38335, 38386), 0), 0, Tag1 ("Ppxlib_ast__Ast", 382))], 0), 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "with_constraint"), 0, (0)), 100000000, 0, -10087)), 0, 0, 0, 0, (("ast/ast.ml", 960, 37698, 37698), ("ast/ast.ml", 973, 38335, 38386), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 76)), 2, 0); Tag1 (("module_expr", 7430), (0, 0, [[(("pmod_desc", 958), 0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -10084), (("ast/ast.ml", 979, 38522, 38524), ("ast/ast.ml", 979, 38522, 38553), 0), 0, Tag1 ("Ppxlib_ast__Ast", 383)); (("pmod_loc", 959), 0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -10085), (("ast/ast.ml", 980, 38554, 38556), ("ast/ast.ml", 980, 38554, 38576), 0), 0, Tag1 ("Ppxlib_ast__Ast", 384)); (("pmod_attributes", 960), 0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -10086), (("ast/ast.ml", 981, 38577, 38579), ("ast/ast.ml", 981, 38577, 38608), 0), 0, Tag1 ("Ppxlib_ast__Ast", 385))]], 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "module_expr"), 0, (0)), 100000000, 0, -10083)), 0, 0, 0, 0, (("ast/ast.ml", 978, 38478, 38478), ("ast/ast.ml", 982, 38641, 38642), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 77)), 2, 0); Tag1 (("module_expr_desc", 7431), (0, 0, Tag1 ([(("Pmod_ident", 961), ([(Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -10073)]), 0, (("ast/ast.ml", 985, 38696, 38698), ("ast/ast.ml", 985, 38696, 38727), 0), 0, Tag1 ("Ppxlib_ast__Ast", 386)); (("Pmod_structure", 962), ([(Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -10074)]), 0, (("ast/ast.ml", 986, 38740, 38742), ("ast/ast.ml", 986, 38740, 38771), 0), 0, Tag1 ("Ppxlib_ast__Ast", 387)); (("Pmod_functor", 963), ([(Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -10075); (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -10076)]), 0, (("ast/ast.ml", 987, 38797, 38799), ("ast/ast.ml", 987, 38797, 38848), 0), 0, Tag1 ("Ppxlib_ast__Ast", 388)); (("Pmod_apply", 964), ([(Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -10077); (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -10078)]), 0, (("ast/ast.ml", 989, 38887, 38889), ("ast/ast.ml", 989, 38887, 38930), 0), 0, Tag1 ("Ppxlib_ast__Ast", 389)); (("Pmod_constraint", 965), ([(Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -10079); (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -10080)]), 0, (("ast/ast.ml", 990, 38950, 38952), ("ast/ast.ml", 990, 38950, 38998), 0), 0, Tag1 ("Ppxlib_ast__Ast", 390)); (("Pmod_unpack", 966), ([(Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10081)]), 0, (("ast/ast.ml", 991, 39019, 39021), ("ast/ast.ml", 991, 39019, 39048), 0), 0, Tag1 ("Ppxlib_ast__Ast", 391)); (("Pmod_extension", 967), ([(Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -10082)]), 0, (("ast/ast.ml", 992, 39067, 39069), ("ast/ast.ml", 992, 39067, 39098), 0), 0, Tag1 ("Ppxlib_ast__Ast", 392))], 0), 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "module_expr_desc"), 0, (0)), 100000000, 0, -10072)), 0, 0, 0, 0, (("ast/ast.ml", 984, 38644, 38644), ("ast/ast.ml", 992, 39067, 39098), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 78)), 2, 0); Tag1 (("structure", 7432), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -10071)], (0)), 100000000, 0, -10070)), 0, 0, 0, 0, (("ast/ast.ml", 994, 39118, 39118), ("ast/ast.ml", 994, 39118, 39153), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 79)), 2, 0); Tag1 (("structure_item", 7433), (0, 0, [[(("pstr_desc", 968), 0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -10068), (("ast/ast.ml", 997, 39205, 39207), ("ast/ast.ml", 997, 39205, 39239), 0), 0, Tag1 ("Ppxlib_ast__Ast", 393)); (("pstr_loc", 969), 0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -10069), (("ast/ast.ml", 998, 39240, 39242), ("ast/ast.ml", 998, 39240, 39262), 0), 0, Tag1 ("Ppxlib_ast__Ast", 394))]], 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "structure_item"), 0, (0)), 100000000, 0, -10067)), 0, 0, 0, 0, (("ast/ast.ml", 996, 39155, 39155), ("ast/ast.ml", 999, 39263, 39264), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 80)), 2, 0); Tag1 (("structure_item_desc", 7434), (0, 0, Tag1 ([(("Pstr_eval", 970), ([(Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10043); (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -10044)]), 0, (("ast/ast.ml", 1002, 39324, 39326), ("ast/ast.ml", 1002, 39324, 39364), 0), 0, Tag1 ("Ppxlib_ast__Ast", 395)); (("Pstr_value", 971), ([(Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -10045); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -10047)], (0)), 100000000, 0, -10046)]), 0, (("ast/ast.ml", 1003, 39377, 39379), ("ast/ast.ml", 1003, 39377, 39424), 0), 0, Tag1 ("Ppxlib_ast__Ast", 396)); (("Pstr_primitive", 972), ([(Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -10048)]), 0, (("ast/ast.ml", 1010, 39747, 39749), ("ast/ast.ml", 1010, 39747, 39786), 0), 0, Tag1 ("Ppxlib_ast__Ast", 397)); (("Pstr_type", 973), ([(Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -10049); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -10051)], (0)), 100000000, 0, -10050)]), 0, (("ast/ast.ml", 1013, 39857, 39859), ("ast/ast.ml", 1013, 39857, 39906), 0), 0, Tag1 ("Ppxlib_ast__Ast", 398)); (("Pstr_typext", 974), ([(Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -10052)]), 0, (("ast/ast.ml", 1015, 39957, 39959), ("ast/ast.ml", 1015, 39957, 39990), 0), 0, Tag1 ("Ppxlib_ast__Ast", 399)); (("Pstr_exception", 975), ([(Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -10053)]), 0, (("ast/ast.ml", 1016, 40016, 40018), ("ast/ast.ml", 1016, 40016, 40052), 0), 0, Tag1 ("Ppxlib_ast__Ast", 400)); (("Pstr_module", 976), ([(Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -10054)]), 0, (("ast/ast.ml", 1019, 40119, 40121), ("ast/ast.ml", 1019, 40119, 40152), 0), 0, Tag1 ("Ppxlib_ast__Ast", 401)); (("Pstr_recmodule", 977), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -10056)], (0)), 100000000, 0, -10055)]), 0, (("ast/ast.ml", 1020, 40177, 40179), ("ast/ast.ml", 1020, 40177, 40218), 0), 0, Tag1 ("Ppxlib_ast__Ast", 402)); (("Pstr_modtype", 978), ([(Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -10057)]), 0, (("ast/ast.ml", 1022, 40275, 40277), ("ast/ast.ml", 1022, 40275, 40318), 0), 0, Tag1 ("Ppxlib_ast__Ast", 403)); (("Pstr_open", 979), ([(Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -10058)]), 0, (("ast/ast.ml", 1023, 40348, 40350), ("ast/ast.ml", 1023, 40348, 40381), 0), 0, Tag1 ("Ppxlib_ast__Ast", 404)); (("Pstr_class", 980), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -10060)], (0)), 100000000, 0, -10059)]), 0, (("ast/ast.ml", 1024, 40399, 40401), ("ast/ast.ml", 1024, 40399, 40439), 0), 0, Tag1 ("Ppxlib_ast__Ast", 405)); (("Pstr_class_type", 981), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -10062)], (0)), 100000000, 0, -10061)]), 0, (("ast/ast.ml", 1026, 40491, 40493), ("ast/ast.ml", 1026, 40491, 40541), 0), 0, Tag1 ("Ppxlib_ast__Ast", 406)); (("Pstr_include", 982), ([(Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -10063)]), 0, (("ast/ast.ml", 1028, 40600, 40602), ("ast/ast.ml", 1028, 40600, 40639), 0), 0, Tag1 ("Ppxlib_ast__Ast", 407)); (("Pstr_attribute", 983), ([(Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -10064)]), 0, (("ast/ast.ml", 1029, 40661, 40663), ("ast/ast.ml", 1029, 40661, 40692), 0), 0, Tag1 ("Ppxlib_ast__Ast", 408)); (("Pstr_extension", 984), ([(Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -10065); (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -10066)]), 0, (("ast/ast.ml", 1030, 40713, 40715), ("ast/ast.ml", 1030, 40713, 40757), 0), 0, Tag1 ("Ppxlib_ast__Ast", 409))], 0), 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "structure_item_desc"), 0, (0)), 100000000, 0, -10042)), 0, 0, 0, 0, (("ast/ast.ml", 1001, 39266, 39266), ("ast/ast.ml", 1030, 40713, 40757), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 81)), 2, 0); Tag1 (("value_binding", 7435), (0, 0, [[(("pvb_pat", 985), 0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -10038), (("ast/ast.ml", 1033, 40826, 40828), ("ast/ast.ml", 1033, 40826, 40846), 0), 0, Tag1 ("Ppxlib_ast__Ast", 410)); (("pvb_expr", 986), 0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -10039), (("ast/ast.ml", 1034, 40847, 40849), ("ast/ast.ml", 1034, 40847, 40871), 0), 0, Tag1 ("Ppxlib_ast__Ast", 411)); (("pvb_attributes", 987), 0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -10040), (("ast/ast.ml", 1035, 40872, 40874), ("ast/ast.ml", 1035, 40872, 40902), 0), 0, Tag1 ("Ppxlib_ast__Ast", 412)); (("pvb_loc", 988), 0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -10041), (("ast/ast.ml", 1036, 40903, 40905), ("ast/ast.ml", 1036, 40903, 40924), 0), 0, Tag1 ("Ppxlib_ast__Ast", 413))]], 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "value_binding"), 0, (0)), 100000000, 0, -10037)), 0, 0, 0, 0, (("ast/ast.ml", 1032, 40778, 40778), ("ast/ast.ml", 1037, 40925, 40926), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 82)), 2, 0); Tag1 (("module_binding", 7436), (0, 0, [[(("pmb_name", 989), 0, (Tag3 ((("loc", 7356)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10033)], (0)), 100000000, 0, -10032)], (0)), 100000000, 0, -10031), (("ast/ast.ml", 1040, 40978, 40980), ("ast/ast.ml", 1040, 40978, 41009), 0), 0, Tag1 ("Ppxlib_ast__Ast", 414)); (("pmb_expr", 990), 0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -10034), (("ast/ast.ml", 1041, 41010, 41012), ("ast/ast.ml", 1041, 41010, 41035), 0), 0, Tag1 ("Ppxlib_ast__Ast", 415)); (("pmb_attributes", 991), 0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -10035), (("ast/ast.ml", 1042, 41036, 41038), ("ast/ast.ml", 1042, 41036, 41066), 0), 0, Tag1 ("Ppxlib_ast__Ast", 416)); (("pmb_loc", 992), 0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -10036), (("ast/ast.ml", 1043, 41067, 41069), ("ast/ast.ml", 1043, 41067, 41088), 0), 0, Tag1 ("Ppxlib_ast__Ast", 417))]], 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "module_binding"), 0, (0)), 100000000, 0, -10030)), 0, 0, 0, 0, (("ast/ast.ml", 1039, 40928, 40928), ("ast/ast.ml", 1044, 41089, 41090), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 83)), 2, 0); Tag1 (("toplevel_phrase", 7437), (0, 0, Tag1 ([(("Ptop_def", 993), ([(Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -10028)]), 0, (("ast/ast.ml", 1051, 41257, 41259), ("ast/ast.ml", 1051, 41257, 41282), 0), 0, Tag1 ("Ppxlib_ast__Ast", 418)); (("Ptop_dir", 994), ([(Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -10029)]), 0, (("ast/ast.ml", 1052, 41283, 41285), ("ast/ast.ml", 1052, 41283, 41317), 0), 0, Tag1 ("Ppxlib_ast__Ast", 419))], 0), 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "toplevel_phrase"), 0, (0)), 100000000, 0, -10027)), 0, 0, 0, 0, (("ast/ast.ml", 1050, 41207, 41207), ("ast/ast.ml", 1052, 41283, 41317), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 84)), 2, 0); Tag1 (("toplevel_directive", 7438), (0, 0, [[(("pdir_name", 995), 0, (Tag3 ((("loc", 7356)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10023)], (0)), 100000000, 0, -10022), (("ast/ast.ml", 1055, 41405, 41407), ("ast/ast.ml", 1055, 41405, 41430), 0), 0, Tag1 ("Ppxlib_ast__Ast", 420)); (("pdir_arg", 996), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -10025)], (0)), 100000000, 0, -10024), (("ast/ast.ml", 1056, 41431, 41433), ("ast/ast.ml", 1056, 41431, 41470), 0), 0, Tag1 ("Ppxlib_ast__Ast", 421)); (("pdir_loc", 997), 0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -10026), (("ast/ast.ml", 1057, 41471, 41473), ("ast/ast.ml", 1057, 41471, 41493), 0), 0, Tag1 ("Ppxlib_ast__Ast", 422))]], 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "toplevel_directive"), 0, (0)), 100000000, 0, -10021)), 0, 0, 0, 0, (("ast/ast.ml", 1054, 41347, 41347), ("ast/ast.ml", 1058, 41494, 41495), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 85)), 2, 0); Tag1 (("directive_argument", 7439), (0, 0, [[(("pdira_desc", 998), 0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -10019), (("ast/ast.ml", 1061, 41555, 41557), ("ast/ast.ml", 1061, 41555, 41594), 0), 0, Tag1 ("Ppxlib_ast__Ast", 423)); (("pdira_loc", 999), 0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -10020), (("ast/ast.ml", 1062, 41595, 41597), ("ast/ast.ml", 1062, 41595, 41618), 0), 0, Tag1 ("Ppxlib_ast__Ast", 424))]], 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "directive_argument"), 0, (0)), 100000000, 0, -10018)), 0, 0, 0, 0, (("ast/ast.ml", 1060, 41497, 41497), ("ast/ast.ml", 1063, 41619, 41620), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 86)), 2, 0); Tag1 (("directive_argument_desc", 7440), (0, 0, Tag1 ([(("Pdir_string", 1000), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10012)]), 0, (("ast/ast.ml", 1066, 41688, 41690), ("ast/ast.ml", 1066, 41688, 41713), 0), 0, Tag1 ("Ppxlib_ast__Ast", 425)); (("Pdir_int", 1001), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10013); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -10015)], (0)), 100000000, 0, -10014)]), 0, (("ast/ast.ml", 1067, 41714, 41716), ("ast/ast.ml", 1067, 41714, 41750), 0), 0, Tag1 ("Ppxlib_ast__Ast", 426)); (("Pdir_ident", 1002), ([(Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -10016)]), 0, (("ast/ast.ml", 1068, 41751, 41753), ("ast/ast.ml", 1068, 41751, 41778), 0), 0, Tag1 ("Ppxlib_ast__Ast", 427)); (("Pdir_bool", 1003), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -10017)]), 0, (("ast/ast.ml", 1069, 41779, 41781), ("ast/ast.ml", 1069, 41779, 41800), 0), 0, Tag1 ("Ppxlib_ast__Ast", 428))], 0), 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Import"), "Parsetree"), "directive_argument_desc"), 0, (0)), 100000000, 0, -10011)), 0, 0, 0, 0, (("ast/ast.ml", 1065, 41622, 41622), ("ast/ast.ml", 1069, 41779, 41800), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 87)), 2, 0); Tag1 (("cases", 7441), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -10010)], (0)), 100000000, 0, -10009)), 0, 0, 0, 0, (("ast/ast.ml", 1071, 41802, 41802), ("ast/ast.ml", 1071, 41802, 41852), 0), [(("deriving_inline", (("ast/ast.ml", 1071, 41802, 41827), ("ast/ast.ml", 1071, 41802, 41842), 0)), ([([(((("traverse"), (("ast/ast.ml", 1071, 41802, 41843), ("ast/ast.ml", 1071, 41802, 41851), 0))), (("ast/ast.ml", 1071, 41802, 41843), ("ast/ast.ml", 1071, 41802, 41851), 0), 0, 0)], (("ast/ast.ml", 1071, 41802, 41843), ("ast/ast.ml", 1071, 41802, 41851), 0))]), (("ast/ast.ml", 1071, 41802, 41824), ("ast/ast.ml", 1071, 41802, 41852), 0))], 0, 0, Tag1 ("Ppxlib_ast__Ast", 88)), 2, 0); Tag5 (("map", 7442), (0, Tag1 (((Tag4 ((Tag5 ("bool", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -9406), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -9405), 0), 100000000, 0, -9404), 0), 100000000, 0, -9403), (Tag5 ("char", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -9394), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -9393), 0), 100000000, 0, -9392), 0), 100000000, 0, -9391), (Tag5 ("int", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -9248), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -9247), 0), 100000000, 0, -9246), 0), 100000000, 0, -9245), (Tag5 ("list", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -9227), (Tag9 (("a")), 100000000, 0, -9227), 0), 100000000, 0, -9232), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -9227)], (0)), 100000000, 0, -9231), (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -9227)], (0)), 100000000, 0, -9230), 0), 100000000, 0, -9229), 0), 100000000, 0, -9228), [(Tag9 (("a")), 100000000, 0, -9227)]), 100000000, 0, -9226), (Tag5 ("option", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -9138), (Tag9 (("a")), 100000000, 0, -9138), 0), 100000000, 0, -9143), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -9138)], (0)), 100000000, 0, -9142), (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -9138)], (0)), 100000000, 0, -9141), 0), 100000000, 0, -9140), 0), 100000000, 0, -9139), [(Tag9 (("a")), 100000000, 0, -9138)]), 100000000, 0, -9137), (Tag5 ("string", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -9084), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -9083), 0), 100000000, 0, -9082), 0), 100000000, 0, -9081), (Tag5 ("position", 1, (Tag10 ((Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -9116), (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -9115), 0), 100000000, 0, -9114), 0), 100000000, 0, -9113), (Tag5 ("location", 1, (Tag10 ((Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -9218), (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -9217), 0), 100000000, 0, -9216), 0), 100000000, 0, -9215), (Tag5 ("location_stack", 1, (Tag10 ((Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -9214), (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -9213), 0), 100000000, 0, -9212), 0), 100000000, 0, -9211), (Tag5 ("loc", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -9220), (Tag9 (("a")), 100000000, 0, -9220), 0), 100000000, 0, -9225), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -9220)], (0)), 100000000, 0, -9224), (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -9220)], (0)), 100000000, 0, -9223), 0), 100000000, 0, -9222), 0), 100000000, 0, -9221), [(Tag9 (("a")), 100000000, 0, -9220)]), 100000000, 0, -9219), (Tag5 ("longident", 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -9210), (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -9209), 0), 100000000, 0, -9208), 0), 100000000, 0, -9207), (Tag5 ("longident_loc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -9206), (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -9205), 0), 100000000, 0, -9204), 0), 100000000, 0, -9203), (Tag5 ("rec_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -9108), (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -9107), 0), 100000000, 0, -9106), 0), 100000000, 0, -9105), (Tag5 ("direction_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -9303), (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -9302), 0), 100000000, 0, -9301), 0), 100000000, 0, -9300), (Tag5 ("private_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -9112), (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -9111), 0), 100000000, 0, -9110), 0), 100000000, 0, -9109), (Tag5 ("mutable_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -9170), (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -9169), 0), 100000000, 0, -9168), 0), 100000000, 0, -9167), (Tag5 ("virtual_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -9032), (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -9031), 0), 100000000, 0, -9030), 0), 100000000, 0, -9029), (Tag5 ("override_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -9136), (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -9135), 0), 100000000, 0, -9134), 0), 100000000, 0, -9133), (Tag5 ("closed_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -9327), (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -9326), 0), 100000000, 0, -9325), 0), 100000000, 0, -9324), (Tag5 ("label", 1, (Tag10 ((Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -9244), (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -9243), 0), 100000000, 0, -9242), 0), 100000000, 0, -9241), (Tag5 ("arg_label", 1, (Tag10 ((Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -9422), (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -9421), 0), 100000000, 0, -9420), 0), 100000000, 0, -9419), (Tag5 ("variance", 1, (Tag10 ((Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -9036), (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -9035), 0), 100000000, 0, -9034), 0), 100000000, 0, -9033), (Tag5 ("injectivity", 1, (Tag10 ((Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -9252), (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -9251), 0), 100000000, 0, -9250), 0), 100000000, 0, -9249), (Tag5 ("constant", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -9323), (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -9322), 0), 100000000, 0, -9321), 0), 100000000, 0, -9320), (Tag5 ("attribute", 1, (Tag10 ((Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -9418), (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -9417), 0), 100000000, 0, -9416), 0), 100000000, 0, -9415), (Tag5 ("extension", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -9283), (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -9282), 0), 100000000, 0, -9281), 0), 100000000, 0, -9280), (Tag5 ("attributes", 1, (Tag10 ((Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -9414), (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -9413), 0), 100000000, 0, -9412), 0), 100000000, 0, -9411), (Tag5 ("payload", 1, (Tag10 ((Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -9120), (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -9119), 0), 100000000, 0, -9118), 0), 100000000, 0, -9117), (Tag5 ("core_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -9311), (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -9310), 0), 100000000, 0, -9309), 0), 100000000, 0, -9308), (Tag5 ("core_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -9307), (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -9306), 0), 100000000, 0, -9305), 0), 100000000, 0, -9304), (Tag5 ("package_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -9132), (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -9131), 0), 100000000, 0, -9130), 0), 100000000, 0, -9129), (Tag5 ("row_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -9104), (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -9103), 0), 100000000, 0, -9102), 0), 100000000, 0, -9101), (Tag5 ("row_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -9100), (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -9099), 0), 100000000, 0, -9098), 0), 100000000, 0, -9097), (Tag5 ("object_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -9166), (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -9165), 0), 100000000, 0, -9164), 0), 100000000, 0, -9163), (Tag5 ("object_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -9162), (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -9161), 0), 100000000, 0, -9160), 0), 100000000, 0, -9159), (Tag5 ("pattern", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -9128), (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -9127), 0), 100000000, 0, -9126), 0), 100000000, 0, -9125), (Tag5 ("pattern_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -9124), (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -9123), 0), 100000000, 0, -9122), 0), 100000000, 0, -9121), (Tag5 ("expression", 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -9291), (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -9290), 0), 100000000, 0, -9289), 0), 100000000, 0, -9288), (Tag5 ("expression_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -9287), (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -9286), 0), 100000000, 0, -9285), 0), 100000000, 0, -9284), (Tag5 ("case", 1, (Tag10 ((Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -9402), (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -9401), 0), 100000000, 0, -9400), 0), 100000000, 0, -9399), (Tag5 ("letop", 1, (Tag10 ((Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -9236), (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -9235), 0), 100000000, 0, -9234), 0), 100000000, 0, -9233), (Tag5 ("binding_op", 1, (Tag10 ((Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -9410), (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -9409), 0), 100000000, 0, -9408), 0), 100000000, 0, -9407), (Tag5 ("value_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -9040), (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -9039), 0), 100000000, 0, -9038), 0), 100000000, 0, -9037), (Tag5 ("type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -9060), (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -9059), 0), 100000000, 0, -9058), 0), 100000000, 0, -9057), (Tag5 ("type_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -9048), (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -9047), 0), 100000000, 0, -9046), 0), 100000000, 0, -9045), (Tag5 ("label_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -9240), (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -9239), 0), 100000000, 0, -9238), 0), 100000000, 0, -9237), (Tag5 ("constructor_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -9315), (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -9314), 0), 100000000, 0, -9313), 0), 100000000, 0, -9312), (Tag5 ("constructor_arguments", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -9319), (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -9318), 0), 100000000, 0, -9317), 0), 100000000, 0, -9316), (Tag5 ("type_extension", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -9052), (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -9051), 0), 100000000, 0, -9050), 0), 100000000, 0, -9049), (Tag5 ("extension_constructor", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -9279), (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -9278), 0), 100000000, 0, -9277), 0), 100000000, 0, -9276), (Tag5 ("type_exception", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -9056), (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -9055), 0), 100000000, 0, -9054), 0), 100000000, 0, -9053), (Tag5 ("extension_constructor_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -9275), (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -9274), 0), 100000000, 0, -9273), 0), 100000000, 0, -9272), (Tag5 ("class_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -9347), (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -9346), 0), 100000000, 0, -9345), 0), 100000000, 0, -9344), (Tag5 ("class_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -9339), (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -9338), 0), 100000000, 0, -9337), 0), 100000000, 0, -9336), (Tag5 ("class_signature", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -9355), (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -9354), 0), 100000000, 0, -9353), 0), 100000000, 0, -9352), (Tag5 ("class_type_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -9335), (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -9334), 0), 100000000, 0, -9333), 0), 100000000, 0, -9332), (Tag5 ("class_type_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -9331), (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -9330), 0), 100000000, 0, -9329), 0), 100000000, 0, -9328), (Tag5 ("class_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -9357), (Tag9 (("a")), 100000000, 0, -9357), 0), 100000000, 0, -9362), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -9357)], (0)), 100000000, 0, -9361), (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -9357)], (0)), 100000000, 0, -9360), 0), 100000000, 0, -9359), 0), 100000000, 0, -9358), [(Tag9 (("a")), 100000000, 0, -9357)]), 100000000, 0, -9356), (Tag5 ("class_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -9386), (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -9385), 0), 100000000, 0, -9384), 0), 100000000, 0, -9383), (Tag5 ("class_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -9343), (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -9342), 0), 100000000, 0, -9341), 0), 100000000, 0, -9340), (Tag5 ("class_expr", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -9382), (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -9381), 0), 100000000, 0, -9380), 0), 100000000, 0, -9379), (Tag5 ("class_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -9378), (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -9377), 0), 100000000, 0, -9376), 0), 100000000, 0, -9375), (Tag5 ("class_structure", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -9351), (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -9350), 0), 100000000, 0, -9349), 0), 100000000, 0, -9348), (Tag5 ("class_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -9374), (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -9373), 0), 100000000, 0, -9372), 0), 100000000, 0, -9371), (Tag5 ("class_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -9370), (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -9369), 0), 100000000, 0, -9368), 0), 100000000, 0, -9367), (Tag5 ("class_field_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -9366), (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -9365), 0), 100000000, 0, -9364), 0), 100000000, 0, -9363), (Tag5 ("class_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -9390), (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -9389), 0), 100000000, 0, -9388), 0), 100000000, 0, -9387), (Tag5 ("module_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -9182), (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -9181), 0), 100000000, 0, -9180), 0), 100000000, 0, -9179), (Tag5 ("module_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -9174), (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -9173), 0), 100000000, 0, -9172), 0), 100000000, 0, -9171), (Tag5 ("functor_parameter", 1, (Tag10 ((Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -9271), (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -9270), 0), 100000000, 0, -9269), 0), 100000000, 0, -9268), (Tag5 ("signature", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -9096), (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -9095), 0), 100000000, 0, -9094), 0), 100000000, 0, -9093), (Tag5 ("signature_item", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -9092), (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -9091), 0), 100000000, 0, -9090), 0), 100000000, 0, -9089), (Tag5 ("signature_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -9088), (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -9087), 0), 100000000, 0, -9086), 0), 100000000, 0, -9085), (Tag5 ("module_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -9198), (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -9197), 0), 100000000, 0, -9196), 0), 100000000, 0, -9195), (Tag5 ("module_substitution", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -9186), (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -9185), 0), 100000000, 0, -9184), 0), 100000000, 0, -9183), (Tag5 ("module_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -9178), (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -9177), 0), 100000000, 0, -9176), 0), 100000000, 0, -9175), (Tag5 ("open_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -9145), (Tag9 (("a")), 100000000, 0, -9145), 0), 100000000, 0, -9150), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -9145)], (0)), 100000000, 0, -9149), (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -9145)], (0)), 100000000, 0, -9148), 0), 100000000, 0, -9147), 0), 100000000, 0, -9146), [(Tag9 (("a")), 100000000, 0, -9145)]), 100000000, 0, -9144), (Tag5 ("open_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -9154), (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -9153), 0), 100000000, 0, -9152), 0), 100000000, 0, -9151), (Tag5 ("open_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -9158), (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -9157), 0), 100000000, 0, -9156), 0), 100000000, 0, -9155), (Tag5 ("include_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -9254), (Tag9 (("a")), 100000000, 0, -9254), 0), 100000000, 0, -9259), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -9254)], (0)), 100000000, 0, -9258), (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -9254)], (0)), 100000000, 0, -9257), 0), 100000000, 0, -9256), 0), 100000000, 0, -9255), [(Tag9 (("a")), 100000000, 0, -9254)]), 100000000, 0, -9253), (Tag5 ("include_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -9263), (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -9262), 0), 100000000, 0, -9261), 0), 100000000, 0, -9260), (Tag5 ("include_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -9267), (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -9266), 0), 100000000, 0, -9265), 0), 100000000, 0, -9264), (Tag5 ("with_constraint", 1, (Tag10 ((Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -9028), (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -9027), 0), 100000000, 0, -9026), 0), 100000000, 0, -9025), (Tag5 ("module_expr", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -9194), (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -9193), 0), 100000000, 0, -9192), 0), 100000000, 0, -9191), (Tag5 ("module_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -9190), (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -9189), 0), 100000000, 0, -9188), 0), 100000000, 0, -9187), (Tag5 ("structure", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -9080), (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -9079), 0), 100000000, 0, -9078), 0), 100000000, 0, -9077), (Tag5 ("structure_item", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -9076), (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -9075), 0), 100000000, 0, -9074), 0), 100000000, 0, -9073), (Tag5 ("structure_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -9072), (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -9071), 0), 100000000, 0, -9070), 0), 100000000, 0, -9069), (Tag5 ("value_binding", 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -9044), (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -9043), 0), 100000000, 0, -9042), 0), 100000000, 0, -9041), (Tag5 ("module_binding", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -9202), (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -9201), 0), 100000000, 0, -9200), 0), 100000000, 0, -9199), (Tag5 ("toplevel_phrase", 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -9064), (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -9063), 0), 100000000, 0, -9062), 0), 100000000, 0, -9061), (Tag5 ("toplevel_directive", 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -9068), (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -9067), 0), 100000000, 0, -9066), 0), 100000000, 0, -9065), (Tag5 ("directive_argument", 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -9299), (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -9298), 0), 100000000, 0, -9297), 0), 100000000, 0, -9296), (Tag5 ("directive_argument_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -9295), (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -9294), 0), 100000000, 0, -9293), 0), 100000000, 0, -9292), (Tag5 ("cases", 1, (Tag10 ((Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -9398), (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -9397), 0), 100000000, 0, -9396), 0), 100000000, 0, -9395), ((0), 100000000, 0, -9912)), 100000000, 0, -10008)), 100000000, 0, -10007)), 100000000, 0, -10006)), 100000000, 0, -10005)), 100000000, 0, -10004)), 100000000, 0, -10003)), 100000000, 0, -10002)), 100000000, 0, -10001)), 100000000, 0, -10000)), 100000000, 0, -9999)), 100000000, 0, -9998)), 100000000, 0, -9997)), 100000000, 0, -9996)), 100000000, 0, -9995)), 100000000, 0, -9994)), 100000000, 0, -9993)), 100000000, 0, -9992)), 100000000, 0, -9991)), 100000000, 0, -9990)), 100000000, 0, -9989)), 100000000, 0, -9988)), 100000000, 0, -9987)), 100000000, 0, -9986)), 100000000, 0, -9985)), 100000000, 0, -9984)), 100000000, 0, -9983)), 100000000, 0, -9982)), 100000000, 0, -9981)), 100000000, 0, -9980)), 100000000, 0, -9979)), 100000000, 0, -9978)), 100000000, 0, -9977)), 100000000, 0, -9976)), 100000000, 0, -9975)), 100000000, 0, -9974)), 100000000, 0, -9973)), 100000000, 0, -9972)), 100000000, 0, -9971)), 100000000, 0, -9970)), 100000000, 0, -9969)), 100000000, 0, -9968)), 100000000, 0, -9967)), 100000000, 0, -9966)), 100000000, 0, -9965)), 100000000, 0, -9964)), 100000000, 0, -9963)), 100000000, 0, -9962)), 100000000, 0, -9961)), 100000000, 0, -9960)), 100000000, 0, -9959)), 100000000, 0, -9958)), 100000000, 0, -9957)), 100000000, 0, -9956)), 100000000, 0, -9955)), 100000000, 0, -9954)), 100000000, 0, -9953)), 100000000, 0, -9952)), 100000000, 0, -9951)), 100000000, 0, -9950)), 100000000, 0, -9949)), 100000000, 0, -9948)), 100000000, 0, -9947)), 100000000, 0, -9946)), 100000000, 0, -9945)), 100000000, 0, -9944)), 100000000, 0, -9943)), 100000000, 0, -9942)), 100000000, 0, -9941)), 100000000, 0, -9940)), 100000000, 0, -9939)), 100000000, 0, -9938)), 100000000, 0, -9937)), 100000000, 0, -9936)), 100000000, 0, -9935)), 100000000, 0, -9934)), 100000000, 0, -9933)), 100000000, 0, -9932)), 100000000, 0, -9931)), 100000000, 0, -9930)), 100000000, 0, -9929)), 100000000, 0, -9928)), 100000000, 0, -9927)), 100000000, 0, -9926)), 100000000, 0, -9925)), 100000000, 0, -9924)), 100000000, 0, -9923)), 100000000, 0, -9922)), 100000000, 0, -9921)), 100000000, 0, -9920)), 100000000, 0, -9919)), 100000000, 0, -9918)), 100000000, 0, -9917)), 100000000, 0, -9916)), 100000000, 0, -9915)), 100000000, 0, -9914), (([(("map", 7444)); ((0), 100000000, 0, -9912)]))), 100000000, 0, -9913), ((0), 100000000, 0, -9912), 0, (((((0, "arg_label", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -9523), (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -9522), 0), 100000000, 0, -9521), 0), 100000000, 0, -9520)), 0, 1), "attribute", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -9527), (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -9526), 0), 100000000, 0, -9525), 0), 100000000, 0, -9524)), ((0, "attributes", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -9531), (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -9530), 0), 100000000, 0, -9529), 0), 100000000, 0, -9528)), (0, "binding_op", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -9535), (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -9534), 0), 100000000, 0, -9533), 0), 100000000, 0, -9532)), 0, 1), 2), "bool", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -9539), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -9538), 0), 100000000, 0, -9537), 0), 100000000, 0, -9536)), (0, "case", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -9543), (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -9542), 0), 100000000, 0, -9541), 0), 100000000, 0, -9540)), (0, "cases", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -9547), (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -9546), 0), 100000000, 0, -9545), 0), 100000000, 0, -9544)), 0, 1), 2), 3), 4), "char", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -9551), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -9550), 0), 100000000, 0, -9549), 0), 100000000, 0, -9548)), ((((((0, "class_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -9555), (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -9554), 0), 100000000, 0, -9553), 0), 100000000, 0, -9552)), 0, 1), "class_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -9559), (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -9558), 0), 100000000, 0, -9557), 0), 100000000, 0, -9556)), 0, 2), "class_expr", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -9563), (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -9562), 0), 100000000, 0, -9561), 0), 100000000, 0, -9560)), (0, "class_expr_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -9567), (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -9566), 0), 100000000, 0, -9565), 0), 100000000, 0, -9564)), 0, 1), 3), "class_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -9571), (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -9570), 0), 100000000, 0, -9569), 0), 100000000, 0, -9568)), ((0, "class_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -9575), (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -9574), 0), 100000000, 0, -9573), 0), 100000000, 0, -9572)), (0, "class_field_kind", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -9579), (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -9578), 0), 100000000, 0, -9577), 0), 100000000, 0, -9576)), 0, 1), 2), "class_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -9357), (Tag9 (("a")), 100000000, 0, -9357), 0), 100000000, 0, -9585), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -9357)], (0)), 100000000, 0, -9584), (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -9357)], (0)), 100000000, 0, -9583), 0), 100000000, 0, -9582), 0), 100000000, 0, -9581), [(Tag9 (("a")), 100000000, 0, -9357)]), 100000000, 0, -9580)), 0, 3), 4), "class_signature", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -9589), (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -9588), 0), 100000000, 0, -9587), 0), 100000000, 0, -9586)), ((0, "class_structure", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -9593), (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -9592), 0), 100000000, 0, -9591), 0), 100000000, 0, -9590)), 0, 1), "class_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -9597), (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -9596), 0), 100000000, 0, -9595), 0), 100000000, 0, -9594)), (0, "class_type_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -9601), (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -9600), 0), 100000000, 0, -9599), 0), 100000000, 0, -9598)), 0, 1), 2), 5), "class_type_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -9605), (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -9604), 0), 100000000, 0, -9603), 0), 100000000, 0, -9602)), (((0, "class_type_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -9609), (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -9608), 0), 100000000, 0, -9607), 0), 100000000, 0, -9606)), (0, "class_type_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -9613), (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -9612), 0), 100000000, 0, -9611), 0), 100000000, 0, -9610)), 0, 1), 2), "closed_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -9617), (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -9616), 0), 100000000, 0, -9615), 0), 100000000, 0, -9614)), 0, 3), "constant", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -9621), (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -9620), 0), 100000000, 0, -9619), 0), 100000000, 0, -9618)), (((0, "constructor_arguments", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -9625), (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -9624), 0), 100000000, 0, -9623), 0), 100000000, 0, -9622)), 0, 1), "constructor_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -9629), (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -9628), 0), 100000000, 0, -9627), 0), 100000000, 0, -9626)), 0, 2), "core_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -9633), (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -9632), 0), 100000000, 0, -9631), 0), 100000000, 0, -9630)), (0, "core_type_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -9637), (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -9636), 0), 100000000, 0, -9635), 0), 100000000, 0, -9634)), 0, 1), 3), 4), 6), 7), "direction_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -9641), (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -9640), 0), 100000000, 0, -9639), 0), 100000000, 0, -9638)), ((((0, "directive_argument", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -9645), (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -9644), 0), 100000000, 0, -9643), 0), 100000000, 0, -9642)), (0, "directive_argument_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -9649), (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -9648), 0), 100000000, 0, -9647), 0), 100000000, 0, -9646)), 0, 1), 2), "expression", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -9653), (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -9652), 0), 100000000, 0, -9651), 0), 100000000, 0, -9650)), (0, "expression_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -9657), (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -9656), 0), 100000000, 0, -9655), 0), 100000000, 0, -9654)), 0, 1), 3), "extension", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -9661), (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -9660), 0), 100000000, 0, -9659), 0), 100000000, 0, -9658)), (((0, "extension_constructor", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -9665), (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -9664), 0), 100000000, 0, -9663), 0), 100000000, 0, -9662)), 0, 1), "extension_constructor_kind", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -9669), (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -9668), 0), 100000000, 0, -9667), 0), 100000000, 0, -9666)), 0, 2), "functor_parameter", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -9673), (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -9672), 0), 100000000, 0, -9671), 0), 100000000, 0, -9670)), (((0, "include_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -9677), (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -9676), 0), 100000000, 0, -9675), 0), 100000000, 0, -9674)), 0, 1), "include_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -9681), (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -9680), 0), 100000000, 0, -9679), 0), 100000000, 0, -9678)), 0, 2), "include_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -9254), (Tag9 (("a")), 100000000, 0, -9254), 0), 100000000, 0, -9687), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -9254)], (0)), 100000000, 0, -9686), (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -9254)], (0)), 100000000, 0, -9685), 0), 100000000, 0, -9684), 0), 100000000, 0, -9683), [(Tag9 (("a")), 100000000, 0, -9254)]), 100000000, 0, -9682)), (0, "injectivity", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -9691), (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -9690), 0), 100000000, 0, -9689), 0), 100000000, 0, -9688)), 0, 1), 3), 4), 5), "int", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -9695), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -9694), 0), 100000000, 0, -9693), 0), 100000000, 0, -9692)), ((0, "label", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -9699), (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -9698), 0), 100000000, 0, -9697), 0), 100000000, 0, -9696)), ((0, "label_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -9703), (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -9702), 0), 100000000, 0, -9701), 0), 100000000, 0, -9700)), 0, 1), "letop", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -9707), (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -9706), 0), 100000000, 0, -9705), 0), 100000000, 0, -9704)), 0, 2), 3), "list", (0, 0, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -9227), (Tag9 (("a")), 100000000, 0, -9227), 0), 100000000, 0, -9713), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -9227)], (0)), 100000000, 0, -9712), (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -9227)], (0)), 100000000, 0, -9711), 0), 100000000, 0, -9710), 0), 100000000, 0, -9709), [(Tag9 (("a")), 100000000, 0, -9227)]), 100000000, 0, -9708)), (0, "loc", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -9220), (Tag9 (("a")), 100000000, 0, -9220), 0), 100000000, 0, -9719), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -9220)], (0)), 100000000, 0, -9718), (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -9220)], (0)), 100000000, 0, -9717), 0), 100000000, 0, -9716), 0), 100000000, 0, -9715), [(Tag9 (("a")), 100000000, 0, -9220)]), 100000000, 0, -9714)), 0, 1), 4), 6), 8), "location", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -9723), (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -9722), 0), 100000000, 0, -9721), 0), 100000000, 0, -9720)), (((((0, "location_stack", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -9727), (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -9726), 0), 100000000, 0, -9725), 0), 100000000, 0, -9724)), 0, 1), "longident", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -9731), (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -9730), 0), 100000000, 0, -9729), 0), 100000000, 0, -9728)), 0, 2), "longident_loc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -9735), (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -9734), 0), 100000000, 0, -9733), 0), 100000000, 0, -9732)), ((((0, "module_binding", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -9739), (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -9738), 0), 100000000, 0, -9737), 0), 100000000, 0, -9736)), 0, 1), "module_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -9743), (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -9742), 0), 100000000, 0, -9741), 0), 100000000, 0, -9740)), 0, 2), "module_expr", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -9747), (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -9746), 0), 100000000, 0, -9745), 0), 100000000, 0, -9744)), ((0, "module_expr_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -9751), (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -9750), 0), 100000000, 0, -9749), 0), 100000000, 0, -9748)), 0, 1), "module_substitution", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -9755), (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -9754), 0), 100000000, 0, -9753), 0), 100000000, 0, -9752)), 0, 2), 3), "module_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -9759), (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -9758), 0), 100000000, 0, -9757), 0), 100000000, 0, -9756)), ((0, "module_type_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -9763), (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -9762), 0), 100000000, 0, -9761), 0), 100000000, 0, -9760)), 0, 1), "module_type_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -9767), (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -9766), 0), 100000000, 0, -9765), 0), 100000000, 0, -9764)), 0, 2), 4), 5), "mutable_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -9771), (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -9770), 0), 100000000, 0, -9769), 0), 100000000, 0, -9768)), ((0, "object_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -9775), (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -9774), 0), 100000000, 0, -9773), 0), 100000000, 0, -9772)), 0, 1), "object_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -9779), (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -9778), 0), 100000000, 0, -9777), 0), 100000000, 0, -9776)), (((0, "open_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -9783), (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -9782), 0), 100000000, 0, -9781), 0), 100000000, 0, -9780)), 0, 1), "open_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -9787), (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -9786), 0), 100000000, 0, -9785), 0), 100000000, 0, -9784)), 0, 2), "open_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -9145), (Tag9 (("a")), 100000000, 0, -9145), 0), 100000000, 0, -9793), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -9145)], (0)), 100000000, 0, -9792), (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -9145)], (0)), 100000000, 0, -9791), 0), 100000000, 0, -9790), 0), 100000000, 0, -9789), [(Tag9 (("a")), 100000000, 0, -9145)]), 100000000, 0, -9788)), 0, 3), 4), 6), "option", (0, 0, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -9138), (Tag9 (("a")), 100000000, 0, -9138), 0), 100000000, 0, -9799), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -9138)], (0)), 100000000, 0, -9798), (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -9138)], (0)), 100000000, 0, -9797), 0), 100000000, 0, -9796), 0), 100000000, 0, -9795), [(Tag9 (("a")), 100000000, 0, -9138)]), 100000000, 0, -9794)), (((((0, "override_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -9803), (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -9802), 0), 100000000, 0, -9801), 0), 100000000, 0, -9800)), 0, 1), "package_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -9807), (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -9806), 0), 100000000, 0, -9805), 0), 100000000, 0, -9804)), (0, "pattern", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -9811), (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -9810), 0), 100000000, 0, -9809), 0), 100000000, 0, -9808)), (0, "pattern_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -9815), (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -9814), 0), 100000000, 0, -9813), 0), 100000000, 0, -9812)), 0, 1), 2), 3), "payload", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -9819), (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -9818), 0), 100000000, 0, -9817), 0), 100000000, 0, -9816)), (0, "position", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -9823), (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -9822), 0), 100000000, 0, -9821), 0), 100000000, 0, -9820)), (0, "private_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -9827), (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -9826), 0), 100000000, 0, -9825), 0), 100000000, 0, -9824)), 0, 1), 2), 4), "rec_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -9831), (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -9830), 0), 100000000, 0, -9829), 0), 100000000, 0, -9828)), ((0, "row_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -9835), (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -9834), 0), 100000000, 0, -9833), 0), 100000000, 0, -9832)), 0, 1), "row_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -9839), (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -9838), 0), 100000000, 0, -9837), 0), 100000000, 0, -9836)), (0, "signature", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -9843), (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -9842), 0), 100000000, 0, -9841), 0), 100000000, 0, -9840)), (0, "signature_item", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -9847), (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -9846), 0), 100000000, 0, -9845), 0), 100000000, 0, -9844)), (0, "signature_item_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -9851), (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -9850), 0), 100000000, 0, -9849), 0), 100000000, 0, -9848)), 0, 1), 2), 3), 4), 5), "string", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -9855), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -9854), 0), 100000000, 0, -9853), 0), 100000000, 0, -9852)), ((((0, "structure", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -9859), (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -9858), 0), 100000000, 0, -9857), 0), 100000000, 0, -9856)), 0, 1), "structure_item", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -9863), (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -9862), 0), 100000000, 0, -9861), 0), 100000000, 0, -9860)), (0, "structure_item_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -9867), (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -9866), 0), 100000000, 0, -9865), 0), 100000000, 0, -9864)), ((0, "toplevel_directive", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -9871), (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -9870), 0), 100000000, 0, -9869), 0), 100000000, 0, -9868)), 0, 1), "toplevel_phrase", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -9875), (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -9874), 0), 100000000, 0, -9873), 0), 100000000, 0, -9872)), 0, 2), 3), 4), "type_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -9879), (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -9878), 0), 100000000, 0, -9877), 0), 100000000, 0, -9876)), ((0, "type_exception", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -9883), (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -9882), 0), 100000000, 0, -9881), 0), 100000000, 0, -9880)), 0, 1), "type_extension", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -9887), (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -9886), 0), 100000000, 0, -9885), 0), 100000000, 0, -9884)), 0, 2), 5), "type_kind", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -9891), (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -9890), 0), 100000000, 0, -9889), 0), 100000000, 0, -9888)), (((0, "value_binding", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -9895), (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -9894), 0), 100000000, 0, -9893), 0), 100000000, 0, -9892)), 0, 1), "value_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -9899), (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -9898), 0), 100000000, 0, -9897), 0), 100000000, 0, -9896)), 0, 2), "variance", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -9903), (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -9902), 0), 100000000, 0, -9901), 0), 100000000, 0, -9900)), (0, "virtual_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -9907), (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -9906), 0), 100000000, 0, -9905), 0), 100000000, 0, -9904)), (0, "with_constraint", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -9911), (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -9910), 0), 100000000, 0, -9909), 0), 100000000, 0, -9908)), 0, 1), 2), 3), 6), 7), 8), 9))), (("map", 7444)), 0, 0, (("ast/ast.ml", 1073, 41854, 41854), ("ast/ast.ml", 2344, 88310, 88315), 0), 0, Tag1 ("Ppxlib_ast__Ast", 429)), 1, 0); Tag6 (("map", 7443), (0, Tag1 (((Tag4 ((Tag5 ("bool", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -9406), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -9405), 0), 100000000, 0, -9404), 0), 100000000, 0, -9403), (Tag5 ("char", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -9394), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -9393), 0), 100000000, 0, -9392), 0), 100000000, 0, -9391), (Tag5 ("int", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -9248), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -9247), 0), 100000000, 0, -9246), 0), 100000000, 0, -9245), (Tag5 ("list", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -9227), (Tag9 (("a")), 100000000, 0, -9227), 0), 100000000, 0, -9232), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -9227)], (0)), 100000000, 0, -9231), (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -9227)], (0)), 100000000, 0, -9230), 0), 100000000, 0, -9229), 0), 100000000, 0, -9228), [(Tag9 (("a")), 100000000, 0, -9227)]), 100000000, 0, -9226), (Tag5 ("option", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -9138), (Tag9 (("a")), 100000000, 0, -9138), 0), 100000000, 0, -9143), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -9138)], (0)), 100000000, 0, -9142), (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -9138)], (0)), 100000000, 0, -9141), 0), 100000000, 0, -9140), 0), 100000000, 0, -9139), [(Tag9 (("a")), 100000000, 0, -9138)]), 100000000, 0, -9137), (Tag5 ("string", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -9084), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -9083), 0), 100000000, 0, -9082), 0), 100000000, 0, -9081), (Tag5 ("position", 1, (Tag10 ((Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -9116), (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -9115), 0), 100000000, 0, -9114), 0), 100000000, 0, -9113), (Tag5 ("location", 1, (Tag10 ((Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -9218), (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -9217), 0), 100000000, 0, -9216), 0), 100000000, 0, -9215), (Tag5 ("location_stack", 1, (Tag10 ((Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -9214), (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -9213), 0), 100000000, 0, -9212), 0), 100000000, 0, -9211), (Tag5 ("loc", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -9220), (Tag9 (("a")), 100000000, 0, -9220), 0), 100000000, 0, -9225), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -9220)], (0)), 100000000, 0, -9224), (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -9220)], (0)), 100000000, 0, -9223), 0), 100000000, 0, -9222), 0), 100000000, 0, -9221), [(Tag9 (("a")), 100000000, 0, -9220)]), 100000000, 0, -9219), (Tag5 ("longident", 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -9210), (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -9209), 0), 100000000, 0, -9208), 0), 100000000, 0, -9207), (Tag5 ("longident_loc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -9206), (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -9205), 0), 100000000, 0, -9204), 0), 100000000, 0, -9203), (Tag5 ("rec_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -9108), (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -9107), 0), 100000000, 0, -9106), 0), 100000000, 0, -9105), (Tag5 ("direction_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -9303), (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -9302), 0), 100000000, 0, -9301), 0), 100000000, 0, -9300), (Tag5 ("private_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -9112), (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -9111), 0), 100000000, 0, -9110), 0), 100000000, 0, -9109), (Tag5 ("mutable_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -9170), (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -9169), 0), 100000000, 0, -9168), 0), 100000000, 0, -9167), (Tag5 ("virtual_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -9032), (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -9031), 0), 100000000, 0, -9030), 0), 100000000, 0, -9029), (Tag5 ("override_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -9136), (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -9135), 0), 100000000, 0, -9134), 0), 100000000, 0, -9133), (Tag5 ("closed_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -9327), (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -9326), 0), 100000000, 0, -9325), 0), 100000000, 0, -9324), (Tag5 ("label", 1, (Tag10 ((Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -9244), (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -9243), 0), 100000000, 0, -9242), 0), 100000000, 0, -9241), (Tag5 ("arg_label", 1, (Tag10 ((Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -9422), (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -9421), 0), 100000000, 0, -9420), 0), 100000000, 0, -9419), (Tag5 ("variance", 1, (Tag10 ((Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -9036), (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -9035), 0), 100000000, 0, -9034), 0), 100000000, 0, -9033), (Tag5 ("injectivity", 1, (Tag10 ((Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -9252), (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -9251), 0), 100000000, 0, -9250), 0), 100000000, 0, -9249), (Tag5 ("constant", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -9323), (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -9322), 0), 100000000, 0, -9321), 0), 100000000, 0, -9320), (Tag5 ("attribute", 1, (Tag10 ((Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -9418), (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -9417), 0), 100000000, 0, -9416), 0), 100000000, 0, -9415), (Tag5 ("extension", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -9283), (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -9282), 0), 100000000, 0, -9281), 0), 100000000, 0, -9280), (Tag5 ("attributes", 1, (Tag10 ((Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -9414), (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -9413), 0), 100000000, 0, -9412), 0), 100000000, 0, -9411), (Tag5 ("payload", 1, (Tag10 ((Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -9120), (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -9119), 0), 100000000, 0, -9118), 0), 100000000, 0, -9117), (Tag5 ("core_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -9311), (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -9310), 0), 100000000, 0, -9309), 0), 100000000, 0, -9308), (Tag5 ("core_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -9307), (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -9306), 0), 100000000, 0, -9305), 0), 100000000, 0, -9304), (Tag5 ("package_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -9132), (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -9131), 0), 100000000, 0, -9130), 0), 100000000, 0, -9129), (Tag5 ("row_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -9104), (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -9103), 0), 100000000, 0, -9102), 0), 100000000, 0, -9101), (Tag5 ("row_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -9100), (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -9099), 0), 100000000, 0, -9098), 0), 100000000, 0, -9097), (Tag5 ("object_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -9166), (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -9165), 0), 100000000, 0, -9164), 0), 100000000, 0, -9163), (Tag5 ("object_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -9162), (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -9161), 0), 100000000, 0, -9160), 0), 100000000, 0, -9159), (Tag5 ("pattern", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -9128), (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -9127), 0), 100000000, 0, -9126), 0), 100000000, 0, -9125), (Tag5 ("pattern_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -9124), (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -9123), 0), 100000000, 0, -9122), 0), 100000000, 0, -9121), (Tag5 ("expression", 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -9291), (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -9290), 0), 100000000, 0, -9289), 0), 100000000, 0, -9288), (Tag5 ("expression_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -9287), (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -9286), 0), 100000000, 0, -9285), 0), 100000000, 0, -9284), (Tag5 ("case", 1, (Tag10 ((Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -9402), (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -9401), 0), 100000000, 0, -9400), 0), 100000000, 0, -9399), (Tag5 ("letop", 1, (Tag10 ((Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -9236), (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -9235), 0), 100000000, 0, -9234), 0), 100000000, 0, -9233), (Tag5 ("binding_op", 1, (Tag10 ((Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -9410), (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -9409), 0), 100000000, 0, -9408), 0), 100000000, 0, -9407), (Tag5 ("value_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -9040), (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -9039), 0), 100000000, 0, -9038), 0), 100000000, 0, -9037), (Tag5 ("type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -9060), (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -9059), 0), 100000000, 0, -9058), 0), 100000000, 0, -9057), (Tag5 ("type_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -9048), (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -9047), 0), 100000000, 0, -9046), 0), 100000000, 0, -9045), (Tag5 ("label_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -9240), (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -9239), 0), 100000000, 0, -9238), 0), 100000000, 0, -9237), (Tag5 ("constructor_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -9315), (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -9314), 0), 100000000, 0, -9313), 0), 100000000, 0, -9312), (Tag5 ("constructor_arguments", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -9319), (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -9318), 0), 100000000, 0, -9317), 0), 100000000, 0, -9316), (Tag5 ("type_extension", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -9052), (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -9051), 0), 100000000, 0, -9050), 0), 100000000, 0, -9049), (Tag5 ("extension_constructor", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -9279), (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -9278), 0), 100000000, 0, -9277), 0), 100000000, 0, -9276), (Tag5 ("type_exception", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -9056), (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -9055), 0), 100000000, 0, -9054), 0), 100000000, 0, -9053), (Tag5 ("extension_constructor_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -9275), (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -9274), 0), 100000000, 0, -9273), 0), 100000000, 0, -9272), (Tag5 ("class_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -9347), (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -9346), 0), 100000000, 0, -9345), 0), 100000000, 0, -9344), (Tag5 ("class_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -9339), (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -9338), 0), 100000000, 0, -9337), 0), 100000000, 0, -9336), (Tag5 ("class_signature", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -9355), (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -9354), 0), 100000000, 0, -9353), 0), 100000000, 0, -9352), (Tag5 ("class_type_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -9335), (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -9334), 0), 100000000, 0, -9333), 0), 100000000, 0, -9332), (Tag5 ("class_type_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -9331), (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -9330), 0), 100000000, 0, -9329), 0), 100000000, 0, -9328), (Tag5 ("class_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -9357), (Tag9 (("a")), 100000000, 0, -9357), 0), 100000000, 0, -9362), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -9357)], (0)), 100000000, 0, -9361), (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -9357)], (0)), 100000000, 0, -9360), 0), 100000000, 0, -9359), 0), 100000000, 0, -9358), [(Tag9 (("a")), 100000000, 0, -9357)]), 100000000, 0, -9356), (Tag5 ("class_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -9386), (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -9385), 0), 100000000, 0, -9384), 0), 100000000, 0, -9383), (Tag5 ("class_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -9343), (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -9342), 0), 100000000, 0, -9341), 0), 100000000, 0, -9340), (Tag5 ("class_expr", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -9382), (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -9381), 0), 100000000, 0, -9380), 0), 100000000, 0, -9379), (Tag5 ("class_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -9378), (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -9377), 0), 100000000, 0, -9376), 0), 100000000, 0, -9375), (Tag5 ("class_structure", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -9351), (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -9350), 0), 100000000, 0, -9349), 0), 100000000, 0, -9348), (Tag5 ("class_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -9374), (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -9373), 0), 100000000, 0, -9372), 0), 100000000, 0, -9371), (Tag5 ("class_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -9370), (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -9369), 0), 100000000, 0, -9368), 0), 100000000, 0, -9367), (Tag5 ("class_field_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -9366), (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -9365), 0), 100000000, 0, -9364), 0), 100000000, 0, -9363), (Tag5 ("class_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -9390), (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -9389), 0), 100000000, 0, -9388), 0), 100000000, 0, -9387), (Tag5 ("module_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -9182), (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -9181), 0), 100000000, 0, -9180), 0), 100000000, 0, -9179), (Tag5 ("module_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -9174), (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -9173), 0), 100000000, 0, -9172), 0), 100000000, 0, -9171), (Tag5 ("functor_parameter", 1, (Tag10 ((Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -9271), (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -9270), 0), 100000000, 0, -9269), 0), 100000000, 0, -9268), (Tag5 ("signature", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -9096), (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -9095), 0), 100000000, 0, -9094), 0), 100000000, 0, -9093), (Tag5 ("signature_item", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -9092), (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -9091), 0), 100000000, 0, -9090), 0), 100000000, 0, -9089), (Tag5 ("signature_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -9088), (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -9087), 0), 100000000, 0, -9086), 0), 100000000, 0, -9085), (Tag5 ("module_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -9198), (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -9197), 0), 100000000, 0, -9196), 0), 100000000, 0, -9195), (Tag5 ("module_substitution", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -9186), (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -9185), 0), 100000000, 0, -9184), 0), 100000000, 0, -9183), (Tag5 ("module_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -9178), (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -9177), 0), 100000000, 0, -9176), 0), 100000000, 0, -9175), (Tag5 ("open_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -9145), (Tag9 (("a")), 100000000, 0, -9145), 0), 100000000, 0, -9150), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -9145)], (0)), 100000000, 0, -9149), (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -9145)], (0)), 100000000, 0, -9148), 0), 100000000, 0, -9147), 0), 100000000, 0, -9146), [(Tag9 (("a")), 100000000, 0, -9145)]), 100000000, 0, -9144), (Tag5 ("open_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -9154), (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -9153), 0), 100000000, 0, -9152), 0), 100000000, 0, -9151), (Tag5 ("open_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -9158), (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -9157), 0), 100000000, 0, -9156), 0), 100000000, 0, -9155), (Tag5 ("include_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -9254), (Tag9 (("a")), 100000000, 0, -9254), 0), 100000000, 0, -9259), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -9254)], (0)), 100000000, 0, -9258), (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -9254)], (0)), 100000000, 0, -9257), 0), 100000000, 0, -9256), 0), 100000000, 0, -9255), [(Tag9 (("a")), 100000000, 0, -9254)]), 100000000, 0, -9253), (Tag5 ("include_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -9263), (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -9262), 0), 100000000, 0, -9261), 0), 100000000, 0, -9260), (Tag5 ("include_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -9267), (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -9266), 0), 100000000, 0, -9265), 0), 100000000, 0, -9264), (Tag5 ("with_constraint", 1, (Tag10 ((Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -9028), (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -9027), 0), 100000000, 0, -9026), 0), 100000000, 0, -9025), (Tag5 ("module_expr", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -9194), (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -9193), 0), 100000000, 0, -9192), 0), 100000000, 0, -9191), (Tag5 ("module_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -9190), (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -9189), 0), 100000000, 0, -9188), 0), 100000000, 0, -9187), (Tag5 ("structure", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -9080), (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -9079), 0), 100000000, 0, -9078), 0), 100000000, 0, -9077), (Tag5 ("structure_item", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -9076), (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -9075), 0), 100000000, 0, -9074), 0), 100000000, 0, -9073), (Tag5 ("structure_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -9072), (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -9071), 0), 100000000, 0, -9070), 0), 100000000, 0, -9069), (Tag5 ("value_binding", 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -9044), (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -9043), 0), 100000000, 0, -9042), 0), 100000000, 0, -9041), (Tag5 ("module_binding", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -9202), (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -9201), 0), 100000000, 0, -9200), 0), 100000000, 0, -9199), (Tag5 ("toplevel_phrase", 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -9064), (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -9063), 0), 100000000, 0, -9062), 0), 100000000, 0, -9061), (Tag5 ("toplevel_directive", 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -9068), (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -9067), 0), 100000000, 0, -9066), 0), 100000000, 0, -9065), (Tag5 ("directive_argument", 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -9299), (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -9298), 0), 100000000, 0, -9297), 0), 100000000, 0, -9296), (Tag5 ("directive_argument_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -9295), (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -9294), 0), 100000000, 0, -9293), 0), 100000000, 0, -9292), (Tag5 ("cases", 1, (Tag10 ((Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -9398), (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -9397), 0), 100000000, 0, -9396), 0), 100000000, 0, -9395), ((0), 100000000, 0, -9912)), 100000000, 0, -10008)), 100000000, 0, -10007)), 100000000, 0, -10006)), 100000000, 0, -10005)), 100000000, 0, -10004)), 100000000, 0, -10003)), 100000000, 0, -10002)), 100000000, 0, -10001)), 100000000, 0, -10000)), 100000000, 0, -9999)), 100000000, 0, -9998)), 100000000, 0, -9997)), 100000000, 0, -9996)), 100000000, 0, -9995)), 100000000, 0, -9994)), 100000000, 0, -9993)), 100000000, 0, -9992)), 100000000, 0, -9991)), 100000000, 0, -9990)), 100000000, 0, -9989)), 100000000, 0, -9988)), 100000000, 0, -9987)), 100000000, 0, -9986)), 100000000, 0, -9985)), 100000000, 0, -9984)), 100000000, 0, -9983)), 100000000, 0, -9982)), 100000000, 0, -9981)), 100000000, 0, -9980)), 100000000, 0, -9979)), 100000000, 0, -9978)), 100000000, 0, -9977)), 100000000, 0, -9976)), 100000000, 0, -9975)), 100000000, 0, -9974)), 100000000, 0, -9973)), 100000000, 0, -9972)), 100000000, 0, -9971)), 100000000, 0, -9970)), 100000000, 0, -9969)), 100000000, 0, -9968)), 100000000, 0, -9967)), 100000000, 0, -9966)), 100000000, 0, -9965)), 100000000, 0, -9964)), 100000000, 0, -9963)), 100000000, 0, -9962)), 100000000, 0, -9961)), 100000000, 0, -9960)), 100000000, 0, -9959)), 100000000, 0, -9958)), 100000000, 0, -9957)), 100000000, 0, -9956)), 100000000, 0, -9955)), 100000000, 0, -9954)), 100000000, 0, -9953)), 100000000, 0, -9952)), 100000000, 0, -9951)), 100000000, 0, -9950)), 100000000, 0, -9949)), 100000000, 0, -9948)), 100000000, 0, -9947)), 100000000, 0, -9946)), 100000000, 0, -9945)), 100000000, 0, -9944)), 100000000, 0, -9943)), 100000000, 0, -9942)), 100000000, 0, -9941)), 100000000, 0, -9940)), 100000000, 0, -9939)), 100000000, 0, -9938)), 100000000, 0, -9937)), 100000000, 0, -9936)), 100000000, 0, -9935)), 100000000, 0, -9934)), 100000000, 0, -9933)), 100000000, 0, -9932)), 100000000, 0, -9931)), 100000000, 0, -9930)), 100000000, 0, -9929)), 100000000, 0, -9928)), 100000000, 0, -9927)), 100000000, 0, -9926)), 100000000, 0, -9925)), 100000000, 0, -9924)), 100000000, 0, -9923)), 100000000, 0, -9922)), 100000000, 0, -9921)), 100000000, 0, -9920)), 100000000, 0, -9919)), 100000000, 0, -9918)), 100000000, 0, -9917)), 100000000, 0, -9916)), 100000000, 0, -9915)), 100000000, 0, -9914), (([(("map", 7444)); ((0), 100000000, 0, -9912)]))), 100000000, 0, -9913), ((0), 100000000, 0, -9912), 0, (((((0, "arg_label", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -9523), (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -9522), 0), 100000000, 0, -9521), 0), 100000000, 0, -9520)), 0, 1), "attribute", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -9527), (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -9526), 0), 100000000, 0, -9525), 0), 100000000, 0, -9524)), ((0, "attributes", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -9531), (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -9530), 0), 100000000, 0, -9529), 0), 100000000, 0, -9528)), (0, "binding_op", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -9535), (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -9534), 0), 100000000, 0, -9533), 0), 100000000, 0, -9532)), 0, 1), 2), "bool", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -9539), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -9538), 0), 100000000, 0, -9537), 0), 100000000, 0, -9536)), (0, "case", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -9543), (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -9542), 0), 100000000, 0, -9541), 0), 100000000, 0, -9540)), (0, "cases", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -9547), (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -9546), 0), 100000000, 0, -9545), 0), 100000000, 0, -9544)), 0, 1), 2), 3), 4), "char", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -9551), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -9550), 0), 100000000, 0, -9549), 0), 100000000, 0, -9548)), ((((((0, "class_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -9555), (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -9554), 0), 100000000, 0, -9553), 0), 100000000, 0, -9552)), 0, 1), "class_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -9559), (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -9558), 0), 100000000, 0, -9557), 0), 100000000, 0, -9556)), 0, 2), "class_expr", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -9563), (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -9562), 0), 100000000, 0, -9561), 0), 100000000, 0, -9560)), (0, "class_expr_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -9567), (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -9566), 0), 100000000, 0, -9565), 0), 100000000, 0, -9564)), 0, 1), 3), "class_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -9571), (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -9570), 0), 100000000, 0, -9569), 0), 100000000, 0, -9568)), ((0, "class_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -9575), (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -9574), 0), 100000000, 0, -9573), 0), 100000000, 0, -9572)), (0, "class_field_kind", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -9579), (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -9578), 0), 100000000, 0, -9577), 0), 100000000, 0, -9576)), 0, 1), 2), "class_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -9357), (Tag9 (("a")), 100000000, 0, -9357), 0), 100000000, 0, -9585), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -9357)], (0)), 100000000, 0, -9584), (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -9357)], (0)), 100000000, 0, -9583), 0), 100000000, 0, -9582), 0), 100000000, 0, -9581), [(Tag9 (("a")), 100000000, 0, -9357)]), 100000000, 0, -9580)), 0, 3), 4), "class_signature", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -9589), (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -9588), 0), 100000000, 0, -9587), 0), 100000000, 0, -9586)), ((0, "class_structure", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -9593), (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -9592), 0), 100000000, 0, -9591), 0), 100000000, 0, -9590)), 0, 1), "class_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -9597), (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -9596), 0), 100000000, 0, -9595), 0), 100000000, 0, -9594)), (0, "class_type_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -9601), (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -9600), 0), 100000000, 0, -9599), 0), 100000000, 0, -9598)), 0, 1), 2), 5), "class_type_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -9605), (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -9604), 0), 100000000, 0, -9603), 0), 100000000, 0, -9602)), (((0, "class_type_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -9609), (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -9608), 0), 100000000, 0, -9607), 0), 100000000, 0, -9606)), (0, "class_type_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -9613), (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -9612), 0), 100000000, 0, -9611), 0), 100000000, 0, -9610)), 0, 1), 2), "closed_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -9617), (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -9616), 0), 100000000, 0, -9615), 0), 100000000, 0, -9614)), 0, 3), "constant", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -9621), (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -9620), 0), 100000000, 0, -9619), 0), 100000000, 0, -9618)), (((0, "constructor_arguments", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -9625), (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -9624), 0), 100000000, 0, -9623), 0), 100000000, 0, -9622)), 0, 1), "constructor_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -9629), (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -9628), 0), 100000000, 0, -9627), 0), 100000000, 0, -9626)), 0, 2), "core_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -9633), (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -9632), 0), 100000000, 0, -9631), 0), 100000000, 0, -9630)), (0, "core_type_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -9637), (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -9636), 0), 100000000, 0, -9635), 0), 100000000, 0, -9634)), 0, 1), 3), 4), 6), 7), "direction_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -9641), (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -9640), 0), 100000000, 0, -9639), 0), 100000000, 0, -9638)), ((((0, "directive_argument", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -9645), (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -9644), 0), 100000000, 0, -9643), 0), 100000000, 0, -9642)), (0, "directive_argument_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -9649), (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -9648), 0), 100000000, 0, -9647), 0), 100000000, 0, -9646)), 0, 1), 2), "expression", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -9653), (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -9652), 0), 100000000, 0, -9651), 0), 100000000, 0, -9650)), (0, "expression_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -9657), (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -9656), 0), 100000000, 0, -9655), 0), 100000000, 0, -9654)), 0, 1), 3), "extension", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -9661), (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -9660), 0), 100000000, 0, -9659), 0), 100000000, 0, -9658)), (((0, "extension_constructor", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -9665), (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -9664), 0), 100000000, 0, -9663), 0), 100000000, 0, -9662)), 0, 1), "extension_constructor_kind", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -9669), (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -9668), 0), 100000000, 0, -9667), 0), 100000000, 0, -9666)), 0, 2), "functor_parameter", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -9673), (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -9672), 0), 100000000, 0, -9671), 0), 100000000, 0, -9670)), (((0, "include_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -9677), (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -9676), 0), 100000000, 0, -9675), 0), 100000000, 0, -9674)), 0, 1), "include_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -9681), (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -9680), 0), 100000000, 0, -9679), 0), 100000000, 0, -9678)), 0, 2), "include_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -9254), (Tag9 (("a")), 100000000, 0, -9254), 0), 100000000, 0, -9687), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -9254)], (0)), 100000000, 0, -9686), (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -9254)], (0)), 100000000, 0, -9685), 0), 100000000, 0, -9684), 0), 100000000, 0, -9683), [(Tag9 (("a")), 100000000, 0, -9254)]), 100000000, 0, -9682)), (0, "injectivity", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -9691), (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -9690), 0), 100000000, 0, -9689), 0), 100000000, 0, -9688)), 0, 1), 3), 4), 5), "int", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -9695), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -9694), 0), 100000000, 0, -9693), 0), 100000000, 0, -9692)), ((0, "label", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -9699), (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -9698), 0), 100000000, 0, -9697), 0), 100000000, 0, -9696)), ((0, "label_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -9703), (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -9702), 0), 100000000, 0, -9701), 0), 100000000, 0, -9700)), 0, 1), "letop", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -9707), (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -9706), 0), 100000000, 0, -9705), 0), 100000000, 0, -9704)), 0, 2), 3), "list", (0, 0, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -9227), (Tag9 (("a")), 100000000, 0, -9227), 0), 100000000, 0, -9713), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -9227)], (0)), 100000000, 0, -9712), (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -9227)], (0)), 100000000, 0, -9711), 0), 100000000, 0, -9710), 0), 100000000, 0, -9709), [(Tag9 (("a")), 100000000, 0, -9227)]), 100000000, 0, -9708)), (0, "loc", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -9220), (Tag9 (("a")), 100000000, 0, -9220), 0), 100000000, 0, -9719), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -9220)], (0)), 100000000, 0, -9718), (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -9220)], (0)), 100000000, 0, -9717), 0), 100000000, 0, -9716), 0), 100000000, 0, -9715), [(Tag9 (("a")), 100000000, 0, -9220)]), 100000000, 0, -9714)), 0, 1), 4), 6), 8), "location", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -9723), (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -9722), 0), 100000000, 0, -9721), 0), 100000000, 0, -9720)), (((((0, "location_stack", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -9727), (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -9726), 0), 100000000, 0, -9725), 0), 100000000, 0, -9724)), 0, 1), "longident", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -9731), (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -9730), 0), 100000000, 0, -9729), 0), 100000000, 0, -9728)), 0, 2), "longident_loc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -9735), (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -9734), 0), 100000000, 0, -9733), 0), 100000000, 0, -9732)), ((((0, "module_binding", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -9739), (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -9738), 0), 100000000, 0, -9737), 0), 100000000, 0, -9736)), 0, 1), "module_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -9743), (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -9742), 0), 100000000, 0, -9741), 0), 100000000, 0, -9740)), 0, 2), "module_expr", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -9747), (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -9746), 0), 100000000, 0, -9745), 0), 100000000, 0, -9744)), ((0, "module_expr_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -9751), (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -9750), 0), 100000000, 0, -9749), 0), 100000000, 0, -9748)), 0, 1), "module_substitution", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -9755), (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -9754), 0), 100000000, 0, -9753), 0), 100000000, 0, -9752)), 0, 2), 3), "module_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -9759), (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -9758), 0), 100000000, 0, -9757), 0), 100000000, 0, -9756)), ((0, "module_type_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -9763), (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -9762), 0), 100000000, 0, -9761), 0), 100000000, 0, -9760)), 0, 1), "module_type_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -9767), (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -9766), 0), 100000000, 0, -9765), 0), 100000000, 0, -9764)), 0, 2), 4), 5), "mutable_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -9771), (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -9770), 0), 100000000, 0, -9769), 0), 100000000, 0, -9768)), ((0, "object_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -9775), (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -9774), 0), 100000000, 0, -9773), 0), 100000000, 0, -9772)), 0, 1), "object_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -9779), (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -9778), 0), 100000000, 0, -9777), 0), 100000000, 0, -9776)), (((0, "open_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -9783), (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -9782), 0), 100000000, 0, -9781), 0), 100000000, 0, -9780)), 0, 1), "open_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -9787), (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -9786), 0), 100000000, 0, -9785), 0), 100000000, 0, -9784)), 0, 2), "open_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -9145), (Tag9 (("a")), 100000000, 0, -9145), 0), 100000000, 0, -9793), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -9145)], (0)), 100000000, 0, -9792), (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -9145)], (0)), 100000000, 0, -9791), 0), 100000000, 0, -9790), 0), 100000000, 0, -9789), [(Tag9 (("a")), 100000000, 0, -9145)]), 100000000, 0, -9788)), 0, 3), 4), 6), "option", (0, 0, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -9138), (Tag9 (("a")), 100000000, 0, -9138), 0), 100000000, 0, -9799), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -9138)], (0)), 100000000, 0, -9798), (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -9138)], (0)), 100000000, 0, -9797), 0), 100000000, 0, -9796), 0), 100000000, 0, -9795), [(Tag9 (("a")), 100000000, 0, -9138)]), 100000000, 0, -9794)), (((((0, "override_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -9803), (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -9802), 0), 100000000, 0, -9801), 0), 100000000, 0, -9800)), 0, 1), "package_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -9807), (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -9806), 0), 100000000, 0, -9805), 0), 100000000, 0, -9804)), (0, "pattern", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -9811), (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -9810), 0), 100000000, 0, -9809), 0), 100000000, 0, -9808)), (0, "pattern_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -9815), (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -9814), 0), 100000000, 0, -9813), 0), 100000000, 0, -9812)), 0, 1), 2), 3), "payload", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -9819), (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -9818), 0), 100000000, 0, -9817), 0), 100000000, 0, -9816)), (0, "position", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -9823), (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -9822), 0), 100000000, 0, -9821), 0), 100000000, 0, -9820)), (0, "private_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -9827), (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -9826), 0), 100000000, 0, -9825), 0), 100000000, 0, -9824)), 0, 1), 2), 4), "rec_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -9831), (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -9830), 0), 100000000, 0, -9829), 0), 100000000, 0, -9828)), ((0, "row_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -9835), (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -9834), 0), 100000000, 0, -9833), 0), 100000000, 0, -9832)), 0, 1), "row_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -9839), (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -9838), 0), 100000000, 0, -9837), 0), 100000000, 0, -9836)), (0, "signature", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -9843), (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -9842), 0), 100000000, 0, -9841), 0), 100000000, 0, -9840)), (0, "signature_item", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -9847), (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -9846), 0), 100000000, 0, -9845), 0), 100000000, 0, -9844)), (0, "signature_item_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -9851), (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -9850), 0), 100000000, 0, -9849), 0), 100000000, 0, -9848)), 0, 1), 2), 3), 4), 5), "string", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -9855), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -9854), 0), 100000000, 0, -9853), 0), 100000000, 0, -9852)), ((((0, "structure", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -9859), (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -9858), 0), 100000000, 0, -9857), 0), 100000000, 0, -9856)), 0, 1), "structure_item", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -9863), (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -9862), 0), 100000000, 0, -9861), 0), 100000000, 0, -9860)), (0, "structure_item_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -9867), (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -9866), 0), 100000000, 0, -9865), 0), 100000000, 0, -9864)), ((0, "toplevel_directive", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -9871), (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -9870), 0), 100000000, 0, -9869), 0), 100000000, 0, -9868)), 0, 1), "toplevel_phrase", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -9875), (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -9874), 0), 100000000, 0, -9873), 0), 100000000, 0, -9872)), 0, 2), 3), 4), "type_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -9879), (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -9878), 0), 100000000, 0, -9877), 0), 100000000, 0, -9876)), ((0, "type_exception", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -9883), (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -9882), 0), 100000000, 0, -9881), 0), 100000000, 0, -9880)), 0, 1), "type_extension", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -9887), (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -9886), 0), 100000000, 0, -9885), 0), 100000000, 0, -9884)), 0, 2), 5), "type_kind", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -9891), (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -9890), 0), 100000000, 0, -9889), 0), 100000000, 0, -9888)), (((0, "value_binding", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -9895), (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -9894), 0), 100000000, 0, -9893), 0), 100000000, 0, -9892)), 0, 1), "value_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -9899), (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -9898), 0), 100000000, 0, -9897), 0), 100000000, 0, -9896)), 0, 2), "variance", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -9903), (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -9902), 0), 100000000, 0, -9901), 0), 100000000, 0, -9900)), (0, "virtual_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -9907), (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -9906), 0), 100000000, 0, -9905), 0), 100000000, 0, -9904)), (0, "with_constraint", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -9911), (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -9910), 0), 100000000, 0, -9909), 0), 100000000, 0, -9908)), 0, 1), 2), 3), 6), 7), 8), 9))), (("map", 7444)), (0, 0, 0, 1, ((Tag4 ((Tag5 ("bool", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -9406), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -9405), 0), 100000000, 0, -9404), 0), 100000000, 0, -9403), (Tag5 ("char", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -9394), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -9393), 0), 100000000, 0, -9392), 0), 100000000, 0, -9391), (Tag5 ("int", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -9248), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -9247), 0), 100000000, 0, -9246), 0), 100000000, 0, -9245), (Tag5 ("list", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -9227), (Tag9 (("a")), 100000000, 0, -9227), 0), 100000000, 0, -9232), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -9227)], (0)), 100000000, 0, -9231), (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -9227)], (0)), 100000000, 0, -9230), 0), 100000000, 0, -9229), 0), 100000000, 0, -9228), [(Tag9 (("a")), 100000000, 0, -9227)]), 100000000, 0, -9226), (Tag5 ("option", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -9138), (Tag9 (("a")), 100000000, 0, -9138), 0), 100000000, 0, -9143), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -9138)], (0)), 100000000, 0, -9142), (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -9138)], (0)), 100000000, 0, -9141), 0), 100000000, 0, -9140), 0), 100000000, 0, -9139), [(Tag9 (("a")), 100000000, 0, -9138)]), 100000000, 0, -9137), (Tag5 ("string", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -9084), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -9083), 0), 100000000, 0, -9082), 0), 100000000, 0, -9081), (Tag5 ("position", 1, (Tag10 ((Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -9116), (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -9115), 0), 100000000, 0, -9114), 0), 100000000, 0, -9113), (Tag5 ("location", 1, (Tag10 ((Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -9218), (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -9217), 0), 100000000, 0, -9216), 0), 100000000, 0, -9215), (Tag5 ("location_stack", 1, (Tag10 ((Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -9214), (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -9213), 0), 100000000, 0, -9212), 0), 100000000, 0, -9211), (Tag5 ("loc", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -9220), (Tag9 (("a")), 100000000, 0, -9220), 0), 100000000, 0, -9225), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -9220)], (0)), 100000000, 0, -9224), (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -9220)], (0)), 100000000, 0, -9223), 0), 100000000, 0, -9222), 0), 100000000, 0, -9221), [(Tag9 (("a")), 100000000, 0, -9220)]), 100000000, 0, -9219), (Tag5 ("longident", 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -9210), (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -9209), 0), 100000000, 0, -9208), 0), 100000000, 0, -9207), (Tag5 ("longident_loc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -9206), (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -9205), 0), 100000000, 0, -9204), 0), 100000000, 0, -9203), (Tag5 ("rec_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -9108), (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -9107), 0), 100000000, 0, -9106), 0), 100000000, 0, -9105), (Tag5 ("direction_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -9303), (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -9302), 0), 100000000, 0, -9301), 0), 100000000, 0, -9300), (Tag5 ("private_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -9112), (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -9111), 0), 100000000, 0, -9110), 0), 100000000, 0, -9109), (Tag5 ("mutable_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -9170), (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -9169), 0), 100000000, 0, -9168), 0), 100000000, 0, -9167), (Tag5 ("virtual_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -9032), (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -9031), 0), 100000000, 0, -9030), 0), 100000000, 0, -9029), (Tag5 ("override_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -9136), (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -9135), 0), 100000000, 0, -9134), 0), 100000000, 0, -9133), (Tag5 ("closed_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -9327), (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -9326), 0), 100000000, 0, -9325), 0), 100000000, 0, -9324), (Tag5 ("label", 1, (Tag10 ((Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -9244), (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -9243), 0), 100000000, 0, -9242), 0), 100000000, 0, -9241), (Tag5 ("arg_label", 1, (Tag10 ((Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -9422), (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -9421), 0), 100000000, 0, -9420), 0), 100000000, 0, -9419), (Tag5 ("variance", 1, (Tag10 ((Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -9036), (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -9035), 0), 100000000, 0, -9034), 0), 100000000, 0, -9033), (Tag5 ("injectivity", 1, (Tag10 ((Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -9252), (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -9251), 0), 100000000, 0, -9250), 0), 100000000, 0, -9249), (Tag5 ("constant", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -9323), (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -9322), 0), 100000000, 0, -9321), 0), 100000000, 0, -9320), (Tag5 ("attribute", 1, (Tag10 ((Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -9418), (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -9417), 0), 100000000, 0, -9416), 0), 100000000, 0, -9415), (Tag5 ("extension", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -9283), (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -9282), 0), 100000000, 0, -9281), 0), 100000000, 0, -9280), (Tag5 ("attributes", 1, (Tag10 ((Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -9414), (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -9413), 0), 100000000, 0, -9412), 0), 100000000, 0, -9411), (Tag5 ("payload", 1, (Tag10 ((Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -9120), (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -9119), 0), 100000000, 0, -9118), 0), 100000000, 0, -9117), (Tag5 ("core_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -9311), (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -9310), 0), 100000000, 0, -9309), 0), 100000000, 0, -9308), (Tag5 ("core_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -9307), (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -9306), 0), 100000000, 0, -9305), 0), 100000000, 0, -9304), (Tag5 ("package_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -9132), (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -9131), 0), 100000000, 0, -9130), 0), 100000000, 0, -9129), (Tag5 ("row_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -9104), (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -9103), 0), 100000000, 0, -9102), 0), 100000000, 0, -9101), (Tag5 ("row_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -9100), (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -9099), 0), 100000000, 0, -9098), 0), 100000000, 0, -9097), (Tag5 ("object_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -9166), (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -9165), 0), 100000000, 0, -9164), 0), 100000000, 0, -9163), (Tag5 ("object_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -9162), (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -9161), 0), 100000000, 0, -9160), 0), 100000000, 0, -9159), (Tag5 ("pattern", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -9128), (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -9127), 0), 100000000, 0, -9126), 0), 100000000, 0, -9125), (Tag5 ("pattern_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -9124), (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -9123), 0), 100000000, 0, -9122), 0), 100000000, 0, -9121), (Tag5 ("expression", 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -9291), (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -9290), 0), 100000000, 0, -9289), 0), 100000000, 0, -9288), (Tag5 ("expression_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -9287), (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -9286), 0), 100000000, 0, -9285), 0), 100000000, 0, -9284), (Tag5 ("case", 1, (Tag10 ((Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -9402), (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -9401), 0), 100000000, 0, -9400), 0), 100000000, 0, -9399), (Tag5 ("letop", 1, (Tag10 ((Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -9236), (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -9235), 0), 100000000, 0, -9234), 0), 100000000, 0, -9233), (Tag5 ("binding_op", 1, (Tag10 ((Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -9410), (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -9409), 0), 100000000, 0, -9408), 0), 100000000, 0, -9407), (Tag5 ("value_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -9040), (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -9039), 0), 100000000, 0, -9038), 0), 100000000, 0, -9037), (Tag5 ("type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -9060), (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -9059), 0), 100000000, 0, -9058), 0), 100000000, 0, -9057), (Tag5 ("type_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -9048), (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -9047), 0), 100000000, 0, -9046), 0), 100000000, 0, -9045), (Tag5 ("label_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -9240), (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -9239), 0), 100000000, 0, -9238), 0), 100000000, 0, -9237), (Tag5 ("constructor_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -9315), (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -9314), 0), 100000000, 0, -9313), 0), 100000000, 0, -9312), (Tag5 ("constructor_arguments", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -9319), (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -9318), 0), 100000000, 0, -9317), 0), 100000000, 0, -9316), (Tag5 ("type_extension", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -9052), (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -9051), 0), 100000000, 0, -9050), 0), 100000000, 0, -9049), (Tag5 ("extension_constructor", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -9279), (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -9278), 0), 100000000, 0, -9277), 0), 100000000, 0, -9276), (Tag5 ("type_exception", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -9056), (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -9055), 0), 100000000, 0, -9054), 0), 100000000, 0, -9053), (Tag5 ("extension_constructor_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -9275), (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -9274), 0), 100000000, 0, -9273), 0), 100000000, 0, -9272), (Tag5 ("class_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -9347), (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -9346), 0), 100000000, 0, -9345), 0), 100000000, 0, -9344), (Tag5 ("class_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -9339), (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -9338), 0), 100000000, 0, -9337), 0), 100000000, 0, -9336), (Tag5 ("class_signature", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -9355), (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -9354), 0), 100000000, 0, -9353), 0), 100000000, 0, -9352), (Tag5 ("class_type_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -9335), (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -9334), 0), 100000000, 0, -9333), 0), 100000000, 0, -9332), (Tag5 ("class_type_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -9331), (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -9330), 0), 100000000, 0, -9329), 0), 100000000, 0, -9328), (Tag5 ("class_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -9357), (Tag9 (("a")), 100000000, 0, -9357), 0), 100000000, 0, -9362), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -9357)], (0)), 100000000, 0, -9361), (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -9357)], (0)), 100000000, 0, -9360), 0), 100000000, 0, -9359), 0), 100000000, 0, -9358), [(Tag9 (("a")), 100000000, 0, -9357)]), 100000000, 0, -9356), (Tag5 ("class_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -9386), (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -9385), 0), 100000000, 0, -9384), 0), 100000000, 0, -9383), (Tag5 ("class_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -9343), (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -9342), 0), 100000000, 0, -9341), 0), 100000000, 0, -9340), (Tag5 ("class_expr", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -9382), (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -9381), 0), 100000000, 0, -9380), 0), 100000000, 0, -9379), (Tag5 ("class_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -9378), (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -9377), 0), 100000000, 0, -9376), 0), 100000000, 0, -9375), (Tag5 ("class_structure", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -9351), (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -9350), 0), 100000000, 0, -9349), 0), 100000000, 0, -9348), (Tag5 ("class_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -9374), (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -9373), 0), 100000000, 0, -9372), 0), 100000000, 0, -9371), (Tag5 ("class_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -9370), (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -9369), 0), 100000000, 0, -9368), 0), 100000000, 0, -9367), (Tag5 ("class_field_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -9366), (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -9365), 0), 100000000, 0, -9364), 0), 100000000, 0, -9363), (Tag5 ("class_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -9390), (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -9389), 0), 100000000, 0, -9388), 0), 100000000, 0, -9387), (Tag5 ("module_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -9182), (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -9181), 0), 100000000, 0, -9180), 0), 100000000, 0, -9179), (Tag5 ("module_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -9174), (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -9173), 0), 100000000, 0, -9172), 0), 100000000, 0, -9171), (Tag5 ("functor_parameter", 1, (Tag10 ((Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -9271), (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -9270), 0), 100000000, 0, -9269), 0), 100000000, 0, -9268), (Tag5 ("signature", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -9096), (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -9095), 0), 100000000, 0, -9094), 0), 100000000, 0, -9093), (Tag5 ("signature_item", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -9092), (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -9091), 0), 100000000, 0, -9090), 0), 100000000, 0, -9089), (Tag5 ("signature_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -9088), (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -9087), 0), 100000000, 0, -9086), 0), 100000000, 0, -9085), (Tag5 ("module_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -9198), (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -9197), 0), 100000000, 0, -9196), 0), 100000000, 0, -9195), (Tag5 ("module_substitution", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -9186), (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -9185), 0), 100000000, 0, -9184), 0), 100000000, 0, -9183), (Tag5 ("module_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -9178), (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -9177), 0), 100000000, 0, -9176), 0), 100000000, 0, -9175), (Tag5 ("open_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -9145), (Tag9 (("a")), 100000000, 0, -9145), 0), 100000000, 0, -9150), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -9145)], (0)), 100000000, 0, -9149), (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -9145)], (0)), 100000000, 0, -9148), 0), 100000000, 0, -9147), 0), 100000000, 0, -9146), [(Tag9 (("a")), 100000000, 0, -9145)]), 100000000, 0, -9144), (Tag5 ("open_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -9154), (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -9153), 0), 100000000, 0, -9152), 0), 100000000, 0, -9151), (Tag5 ("open_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -9158), (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -9157), 0), 100000000, 0, -9156), 0), 100000000, 0, -9155), (Tag5 ("include_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -9254), (Tag9 (("a")), 100000000, 0, -9254), 0), 100000000, 0, -9259), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -9254)], (0)), 100000000, 0, -9258), (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -9254)], (0)), 100000000, 0, -9257), 0), 100000000, 0, -9256), 0), 100000000, 0, -9255), [(Tag9 (("a")), 100000000, 0, -9254)]), 100000000, 0, -9253), (Tag5 ("include_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -9263), (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -9262), 0), 100000000, 0, -9261), 0), 100000000, 0, -9260), (Tag5 ("include_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -9267), (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -9266), 0), 100000000, 0, -9265), 0), 100000000, 0, -9264), (Tag5 ("with_constraint", 1, (Tag10 ((Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -9028), (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -9027), 0), 100000000, 0, -9026), 0), 100000000, 0, -9025), (Tag5 ("module_expr", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -9194), (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -9193), 0), 100000000, 0, -9192), 0), 100000000, 0, -9191), (Tag5 ("module_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -9190), (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -9189), 0), 100000000, 0, -9188), 0), 100000000, 0, -9187), (Tag5 ("structure", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -9080), (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -9079), 0), 100000000, 0, -9078), 0), 100000000, 0, -9077), (Tag5 ("structure_item", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -9076), (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -9075), 0), 100000000, 0, -9074), 0), 100000000, 0, -9073), (Tag5 ("structure_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -9072), (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -9071), 0), 100000000, 0, -9070), 0), 100000000, 0, -9069), (Tag5 ("value_binding", 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -9044), (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -9043), 0), 100000000, 0, -9042), 0), 100000000, 0, -9041), (Tag5 ("module_binding", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -9202), (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -9201), 0), 100000000, 0, -9200), 0), 100000000, 0, -9199), (Tag5 ("toplevel_phrase", 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -9064), (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -9063), 0), 100000000, 0, -9062), 0), 100000000, 0, -9061), (Tag5 ("toplevel_directive", 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -9068), (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -9067), 0), 100000000, 0, -9066), 0), 100000000, 0, -9065), (Tag5 ("directive_argument", 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -9299), (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -9298), 0), 100000000, 0, -9297), 0), 100000000, 0, -9296), (Tag5 ("directive_argument_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -9295), (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -9294), 0), 100000000, 0, -9293), 0), 100000000, 0, -9292), (Tag5 ("cases", 1, (Tag10 ((Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -9398), (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -9397), 0), 100000000, 0, -9396), 0), 100000000, 0, -9395), ((0), 100000000, 0, -9519)), 100000000, 0, -9518)), 100000000, 0, -9517)), 100000000, 0, -9516)), 100000000, 0, -9515)), 100000000, 0, -9514)), 100000000, 0, -9513)), 100000000, 0, -9512)), 100000000, 0, -9511)), 100000000, 0, -9510)), 100000000, 0, -9509)), 100000000, 0, -9508)), 100000000, 0, -9507)), 100000000, 0, -9506)), 100000000, 0, -9505)), 100000000, 0, -9504)), 100000000, 0, -9503)), 100000000, 0, -9502)), 100000000, 0, -9501)), 100000000, 0, -9500)), 100000000, 0, -9499)), 100000000, 0, -9498)), 100000000, 0, -9497)), 100000000, 0, -9496)), 100000000, 0, -9495)), 100000000, 0, -9494)), 100000000, 0, -9493)), 100000000, 0, -9492)), 100000000, 0, -9491)), 100000000, 0, -9490)), 100000000, 0, -9489)), 100000000, 0, -9488)), 100000000, 0, -9487)), 100000000, 0, -9486)), 100000000, 0, -9485)), 100000000, 0, -9484)), 100000000, 0, -9483)), 100000000, 0, -9482)), 100000000, 0, -9481)), 100000000, 0, -9480)), 100000000, 0, -9479)), 100000000, 0, -9478)), 100000000, 0, -9477)), 100000000, 0, -9476)), 100000000, 0, -9475)), 100000000, 0, -9474)), 100000000, 0, -9473)), 100000000, 0, -9472)), 100000000, 0, -9471)), 100000000, 0, -9470)), 100000000, 0, -9469)), 100000000, 0, -9468)), 100000000, 0, -9467)), 100000000, 0, -9466)), 100000000, 0, -9465)), 100000000, 0, -9464)), 100000000, 0, -9463)), 100000000, 0, -9462)), 100000000, 0, -9461)), 100000000, 0, -9460)), 100000000, 0, -9459)), 100000000, 0, -9458)), 100000000, 0, -9457)), 100000000, 0, -9456)), 100000000, 0, -9455)), 100000000, 0, -9454)), 100000000, 0, -9453)), 100000000, 0, -9452)), 100000000, 0, -9451)), 100000000, 0, -9450)), 100000000, 0, -9449)), 100000000, 0, -9448)), 100000000, 0, -9447)), 100000000, 0, -9446)), 100000000, 0, -9445)), 100000000, 0, -9444)), 100000000, 0, -9443)), 100000000, 0, -9442)), 100000000, 0, -9441)), 100000000, 0, -9440)), 100000000, 0, -9439)), 100000000, 0, -9438)), 100000000, 0, -9437)), 100000000, 0, -9436)), 100000000, 0, -9435)), 100000000, 0, -9434)), 100000000, 0, -9433)), 100000000, 0, -9432)), 100000000, 0, -9431)), 100000000, 0, -9430)), 100000000, 0, -9429)), 100000000, 0, -9428)), 100000000, 0, -9427)), 100000000, 0, -9426)), 100000000, 0, -9425)), 100000000, 0, -9424), (([(("map", 7444)); ((0), 100000000, 0, -9519)]))), 100000000, 0, -9423)), 0, 0, 0, 0, (("ast/ast.ml", 1073, 41854, 41854), ("ast/ast.ml", 2344, 88310, 88315), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 429)), 0, (("ast/ast.ml", 1073, 41854, 41854), ("ast/ast.ml", 2344, 88310, 88315), 0), 0, Tag1 ("Ppxlib_ast__Ast", 429)), 1, 0); Tag1 (("map", 7444), (0, 0, 0, 1, ((Tag4 ((Tag5 ("arg_label", 1, (Tag10 ((Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -9422), (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -9421), 0), 100000000, 0, -9420), 0), 100000000, 0, -9419), (Tag5 ("attribute", 1, (Tag10 ((Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -9418), (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -9417), 0), 100000000, 0, -9416), 0), 100000000, 0, -9415), (Tag5 ("attributes", 1, (Tag10 ((Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -9414), (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -9413), 0), 100000000, 0, -9412), 0), 100000000, 0, -9411), (Tag5 ("binding_op", 1, (Tag10 ((Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -9410), (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -9409), 0), 100000000, 0, -9408), 0), 100000000, 0, -9407), (Tag5 ("bool", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -9406), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -9405), 0), 100000000, 0, -9404), 0), 100000000, 0, -9403), (Tag5 ("case", 1, (Tag10 ((Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -9402), (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -9401), 0), 100000000, 0, -9400), 0), 100000000, 0, -9399), (Tag5 ("cases", 1, (Tag10 ((Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -9398), (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -9397), 0), 100000000, 0, -9396), 0), 100000000, 0, -9395), (Tag5 ("char", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -9394), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -9393), 0), 100000000, 0, -9392), 0), 100000000, 0, -9391), (Tag5 ("class_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -9390), (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -9389), 0), 100000000, 0, -9388), 0), 100000000, 0, -9387), (Tag5 ("class_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -9386), (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -9385), 0), 100000000, 0, -9384), 0), 100000000, 0, -9383), (Tag5 ("class_expr", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -9382), (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -9381), 0), 100000000, 0, -9380), 0), 100000000, 0, -9379), (Tag5 ("class_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -9378), (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -9377), 0), 100000000, 0, -9376), 0), 100000000, 0, -9375), (Tag5 ("class_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -9374), (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -9373), 0), 100000000, 0, -9372), 0), 100000000, 0, -9371), (Tag5 ("class_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -9370), (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -9369), 0), 100000000, 0, -9368), 0), 100000000, 0, -9367), (Tag5 ("class_field_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -9366), (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -9365), 0), 100000000, 0, -9364), 0), 100000000, 0, -9363), (Tag5 ("class_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -9357), (Tag9 (("a")), 100000000, 0, -9357), 0), 100000000, 0, -9362), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -9357)], (0)), 100000000, 0, -9361), (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -9357)], (0)), 100000000, 0, -9360), 0), 100000000, 0, -9359), 0), 100000000, 0, -9358), [(Tag9 (("a")), 100000000, 0, -9357)]), 100000000, 0, -9356), (Tag5 ("class_signature", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -9355), (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -9354), 0), 100000000, 0, -9353), 0), 100000000, 0, -9352), (Tag5 ("class_structure", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -9351), (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -9350), 0), 100000000, 0, -9349), 0), 100000000, 0, -9348), (Tag5 ("class_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -9347), (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -9346), 0), 100000000, 0, -9345), 0), 100000000, 0, -9344), (Tag5 ("class_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -9343), (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -9342), 0), 100000000, 0, -9341), 0), 100000000, 0, -9340), (Tag5 ("class_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -9339), (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -9338), 0), 100000000, 0, -9337), 0), 100000000, 0, -9336), (Tag5 ("class_type_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -9335), (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -9334), 0), 100000000, 0, -9333), 0), 100000000, 0, -9332), (Tag5 ("class_type_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -9331), (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -9330), 0), 100000000, 0, -9329), 0), 100000000, 0, -9328), (Tag5 ("closed_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -9327), (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -9326), 0), 100000000, 0, -9325), 0), 100000000, 0, -9324), (Tag5 ("constant", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -9323), (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -9322), 0), 100000000, 0, -9321), 0), 100000000, 0, -9320), (Tag5 ("constructor_arguments", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -9319), (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -9318), 0), 100000000, 0, -9317), 0), 100000000, 0, -9316), (Tag5 ("constructor_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -9315), (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -9314), 0), 100000000, 0, -9313), 0), 100000000, 0, -9312), (Tag5 ("core_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -9311), (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -9310), 0), 100000000, 0, -9309), 0), 100000000, 0, -9308), (Tag5 ("core_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -9307), (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -9306), 0), 100000000, 0, -9305), 0), 100000000, 0, -9304), (Tag5 ("direction_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -9303), (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -9302), 0), 100000000, 0, -9301), 0), 100000000, 0, -9300), (Tag5 ("directive_argument", 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -9299), (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -9298), 0), 100000000, 0, -9297), 0), 100000000, 0, -9296), (Tag5 ("directive_argument_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -9295), (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -9294), 0), 100000000, 0, -9293), 0), 100000000, 0, -9292), (Tag5 ("expression", 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -9291), (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -9290), 0), 100000000, 0, -9289), 0), 100000000, 0, -9288), (Tag5 ("expression_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -9287), (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -9286), 0), 100000000, 0, -9285), 0), 100000000, 0, -9284), (Tag5 ("extension", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -9283), (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -9282), 0), 100000000, 0, -9281), 0), 100000000, 0, -9280), (Tag5 ("extension_constructor", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -9279), (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -9278), 0), 100000000, 0, -9277), 0), 100000000, 0, -9276), (Tag5 ("extension_constructor_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -9275), (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -9274), 0), 100000000, 0, -9273), 0), 100000000, 0, -9272), (Tag5 ("functor_parameter", 1, (Tag10 ((Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -9271), (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -9270), 0), 100000000, 0, -9269), 0), 100000000, 0, -9268), (Tag5 ("include_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -9267), (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -9266), 0), 100000000, 0, -9265), 0), 100000000, 0, -9264), (Tag5 ("include_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -9263), (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -9262), 0), 100000000, 0, -9261), 0), 100000000, 0, -9260), (Tag5 ("include_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -9254), (Tag9 (("a")), 100000000, 0, -9254), 0), 100000000, 0, -9259), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -9254)], (0)), 100000000, 0, -9258), (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -9254)], (0)), 100000000, 0, -9257), 0), 100000000, 0, -9256), 0), 100000000, 0, -9255), [(Tag9 (("a")), 100000000, 0, -9254)]), 100000000, 0, -9253), (Tag5 ("injectivity", 1, (Tag10 ((Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -9252), (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -9251), 0), 100000000, 0, -9250), 0), 100000000, 0, -9249), (Tag5 ("int", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -9248), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -9247), 0), 100000000, 0, -9246), 0), 100000000, 0, -9245), (Tag5 ("label", 1, (Tag10 ((Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -9244), (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -9243), 0), 100000000, 0, -9242), 0), 100000000, 0, -9241), (Tag5 ("label_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -9240), (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -9239), 0), 100000000, 0, -9238), 0), 100000000, 0, -9237), (Tag5 ("letop", 1, (Tag10 ((Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -9236), (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -9235), 0), 100000000, 0, -9234), 0), 100000000, 0, -9233), (Tag5 ("list", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -9227), (Tag9 (("a")), 100000000, 0, -9227), 0), 100000000, 0, -9232), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -9227)], (0)), 100000000, 0, -9231), (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -9227)], (0)), 100000000, 0, -9230), 0), 100000000, 0, -9229), 0), 100000000, 0, -9228), [(Tag9 (("a")), 100000000, 0, -9227)]), 100000000, 0, -9226), (Tag5 ("loc", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -9220), (Tag9 (("a")), 100000000, 0, -9220), 0), 100000000, 0, -9225), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -9220)], (0)), 100000000, 0, -9224), (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -9220)], (0)), 100000000, 0, -9223), 0), 100000000, 0, -9222), 0), 100000000, 0, -9221), [(Tag9 (("a")), 100000000, 0, -9220)]), 100000000, 0, -9219), (Tag5 ("location", 1, (Tag10 ((Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -9218), (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -9217), 0), 100000000, 0, -9216), 0), 100000000, 0, -9215), (Tag5 ("location_stack", 1, (Tag10 ((Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -9214), (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -9213), 0), 100000000, 0, -9212), 0), 100000000, 0, -9211), (Tag5 ("longident", 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -9210), (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -9209), 0), 100000000, 0, -9208), 0), 100000000, 0, -9207), (Tag5 ("longident_loc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -9206), (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -9205), 0), 100000000, 0, -9204), 0), 100000000, 0, -9203), (Tag5 ("module_binding", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -9202), (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -9201), 0), 100000000, 0, -9200), 0), 100000000, 0, -9199), (Tag5 ("module_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -9198), (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -9197), 0), 100000000, 0, -9196), 0), 100000000, 0, -9195), (Tag5 ("module_expr", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -9194), (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -9193), 0), 100000000, 0, -9192), 0), 100000000, 0, -9191), (Tag5 ("module_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -9190), (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -9189), 0), 100000000, 0, -9188), 0), 100000000, 0, -9187), (Tag5 ("module_substitution", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -9186), (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -9185), 0), 100000000, 0, -9184), 0), 100000000, 0, -9183), (Tag5 ("module_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -9182), (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -9181), 0), 100000000, 0, -9180), 0), 100000000, 0, -9179), (Tag5 ("module_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -9178), (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -9177), 0), 100000000, 0, -9176), 0), 100000000, 0, -9175), (Tag5 ("module_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -9174), (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -9173), 0), 100000000, 0, -9172), 0), 100000000, 0, -9171), (Tag5 ("mutable_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -9170), (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -9169), 0), 100000000, 0, -9168), 0), 100000000, 0, -9167), (Tag5 ("object_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -9166), (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -9165), 0), 100000000, 0, -9164), 0), 100000000, 0, -9163), (Tag5 ("object_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -9162), (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -9161), 0), 100000000, 0, -9160), 0), 100000000, 0, -9159), (Tag5 ("open_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -9158), (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -9157), 0), 100000000, 0, -9156), 0), 100000000, 0, -9155), (Tag5 ("open_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -9154), (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -9153), 0), 100000000, 0, -9152), 0), 100000000, 0, -9151), (Tag5 ("open_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -9145), (Tag9 (("a")), 100000000, 0, -9145), 0), 100000000, 0, -9150), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -9145)], (0)), 100000000, 0, -9149), (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -9145)], (0)), 100000000, 0, -9148), 0), 100000000, 0, -9147), 0), 100000000, 0, -9146), [(Tag9 (("a")), 100000000, 0, -9145)]), 100000000, 0, -9144), (Tag5 ("option", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -9138), (Tag9 (("a")), 100000000, 0, -9138), 0), 100000000, 0, -9143), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -9138)], (0)), 100000000, 0, -9142), (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -9138)], (0)), 100000000, 0, -9141), 0), 100000000, 0, -9140), 0), 100000000, 0, -9139), [(Tag9 (("a")), 100000000, 0, -9138)]), 100000000, 0, -9137), (Tag5 ("override_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -9136), (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -9135), 0), 100000000, 0, -9134), 0), 100000000, 0, -9133), (Tag5 ("package_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -9132), (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -9131), 0), 100000000, 0, -9130), 0), 100000000, 0, -9129), (Tag5 ("pattern", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -9128), (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -9127), 0), 100000000, 0, -9126), 0), 100000000, 0, -9125), (Tag5 ("pattern_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -9124), (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -9123), 0), 100000000, 0, -9122), 0), 100000000, 0, -9121), (Tag5 ("payload", 1, (Tag10 ((Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -9120), (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -9119), 0), 100000000, 0, -9118), 0), 100000000, 0, -9117), (Tag5 ("position", 1, (Tag10 ((Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -9116), (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -9115), 0), 100000000, 0, -9114), 0), 100000000, 0, -9113), (Tag5 ("private_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -9112), (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -9111), 0), 100000000, 0, -9110), 0), 100000000, 0, -9109), (Tag5 ("rec_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -9108), (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -9107), 0), 100000000, 0, -9106), 0), 100000000, 0, -9105), (Tag5 ("row_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -9104), (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -9103), 0), 100000000, 0, -9102), 0), 100000000, 0, -9101), (Tag5 ("row_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -9100), (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -9099), 0), 100000000, 0, -9098), 0), 100000000, 0, -9097), (Tag5 ("signature", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -9096), (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -9095), 0), 100000000, 0, -9094), 0), 100000000, 0, -9093), (Tag5 ("signature_item", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -9092), (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -9091), 0), 100000000, 0, -9090), 0), 100000000, 0, -9089), (Tag5 ("signature_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -9088), (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -9087), 0), 100000000, 0, -9086), 0), 100000000, 0, -9085), (Tag5 ("string", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -9084), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -9083), 0), 100000000, 0, -9082), 0), 100000000, 0, -9081), (Tag5 ("structure", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -9080), (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -9079), 0), 100000000, 0, -9078), 0), 100000000, 0, -9077), (Tag5 ("structure_item", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -9076), (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -9075), 0), 100000000, 0, -9074), 0), 100000000, 0, -9073), (Tag5 ("structure_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -9072), (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -9071), 0), 100000000, 0, -9070), 0), 100000000, 0, -9069), (Tag5 ("toplevel_directive", 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -9068), (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -9067), 0), 100000000, 0, -9066), 0), 100000000, 0, -9065), (Tag5 ("toplevel_phrase", 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -9064), (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -9063), 0), 100000000, 0, -9062), 0), 100000000, 0, -9061), (Tag5 ("type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -9060), (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -9059), 0), 100000000, 0, -9058), 0), 100000000, 0, -9057), (Tag5 ("type_exception", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -9056), (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -9055), 0), 100000000, 0, -9054), 0), 100000000, 0, -9053), (Tag5 ("type_extension", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -9052), (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -9051), 0), 100000000, 0, -9050), 0), 100000000, 0, -9049), (Tag5 ("type_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -9048), (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -9047), 0), 100000000, 0, -9046), 0), 100000000, 0, -9045), (Tag5 ("value_binding", 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -9044), (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -9043), 0), 100000000, 0, -9042), 0), 100000000, 0, -9041), (Tag5 ("value_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -9040), (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -9039), 0), 100000000, 0, -9038), 0), 100000000, 0, -9037), (Tag5 ("variance", 1, (Tag10 ((Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -9036), (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -9035), 0), 100000000, 0, -9034), 0), 100000000, 0, -9033), (Tag5 ("virtual_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -9032), (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -9031), 0), 100000000, 0, -9030), 0), 100000000, 0, -9029), (Tag5 ("with_constraint", 1, (Tag10 ((Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -9028), (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -9027), 0), 100000000, 0, -9026), 0), 100000000, 0, -9025), (0, 100000000, 0, -9024)), 100000000, 0, -9023)), 100000000, 0, -9022)), 100000000, 0, -9021)), 100000000, 0, -9020)), 100000000, 0, -9019)), 100000000, 0, -9018)), 100000000, 0, -9017)), 100000000, 0, -9016)), 100000000, 0, -9015)), 100000000, 0, -9014)), 100000000, 0, -9013)), 100000000, 0, -9012)), 100000000, 0, -9011)), 100000000, 0, -9010)), 100000000, 0, -9009)), 100000000, 0, -9008)), 100000000, 0, -9007)), 100000000, 0, -9006)), 100000000, 0, -9005)), 100000000, 0, -9004)), 100000000, 0, -9003)), 100000000, 0, -9002)), 100000000, 0, -9001)), 100000000, 0, -9000)), 100000000, 0, -8999)), 100000000, 0, -8998)), 100000000, 0, -8997)), 100000000, 0, -8996)), 100000000, 0, -8995)), 100000000, 0, -8994)), 100000000, 0, -8993)), 100000000, 0, -8992)), 100000000, 0, -8991)), 100000000, 0, -8990)), 100000000, 0, -8989)), 100000000, 0, -8988)), 100000000, 0, -8987)), 100000000, 0, -8986)), 100000000, 0, -8985)), 100000000, 0, -8984)), 100000000, 0, -8983)), 100000000, 0, -8982)), 100000000, 0, -8981)), 100000000, 0, -8980)), 100000000, 0, -8979)), 100000000, 0, -8978)), 100000000, 0, -8977)), 100000000, 0, -8976)), 100000000, 0, -8975)), 100000000, 0, -8974)), 100000000, 0, -8973)), 100000000, 0, -8972)), 100000000, 0, -8971)), 100000000, 0, -8970)), 100000000, 0, -8969)), 100000000, 0, -8968)), 100000000, 0, -8967)), 100000000, 0, -8966)), 100000000, 0, -8965)), 100000000, 0, -8964)), 100000000, 0, -8963)), 100000000, 0, -8962)), 100000000, 0, -8961)), 100000000, 0, -8960)), 100000000, 0, -8959)), 100000000, 0, -8958)), 100000000, 0, -8957)), 100000000, 0, -8956)), 100000000, 0, -8955)), 100000000, 0, -8954)), 100000000, 0, -8953)), 100000000, 0, -8952)), 100000000, 0, -8951)), 100000000, 0, -8950)), 100000000, 0, -8949)), 100000000, 0, -8948)), 100000000, 0, -8947)), 100000000, 0, -8946)), 100000000, 0, -8945)), 100000000, 0, -8944)), 100000000, 0, -8943)), 100000000, 0, -8942)), 100000000, 0, -8941)), 100000000, 0, -8940)), 100000000, 0, -8939)), 100000000, 0, -8938)), 100000000, 0, -8937)), 100000000, 0, -8936)), 100000000, 0, -8935)), 100000000, 0, -8934)), 100000000, 0, -8933)), 100000000, 0, -8932)), 100000000, 0, -8931)), 100000000, 0, -8930)), 100000000, 0, -8929), (0)), 100000000, 0, -8928)), 0, 0, 0, 0, (("ast/ast.ml", 1073, 41854, 41854), ("ast/ast.ml", 2344, 88310, 88315), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 429)), 1, 0); Tag5 (("iter", 7445), (0, Tag1 (((Tag4 ((Tag5 ("bool", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -8319), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8318), 0), 100000000, 0, -8317), 0), 100000000, 0, -8316), (Tag5 ("char", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -8307), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8306), 0), 100000000, 0, -8305), 0), 100000000, 0, -8304), (Tag5 ("int", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -8159), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8158), 0), 100000000, 0, -8157), 0), 100000000, 0, -8156), (Tag5 ("list", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -8137), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8143), 0), 100000000, 0, -8142), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -8137)], (0)), 100000000, 0, -8141), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8140), 0), 100000000, 0, -8139), 0), 100000000, 0, -8138), [(Tag9 (("a")), 100000000, 0, -8137)]), 100000000, 0, -8136), (Tag5 ("option", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -8045), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8051), 0), 100000000, 0, -8050), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -8045)], (0)), 100000000, 0, -8049), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8048), 0), 100000000, 0, -8047), 0), 100000000, 0, -8046), [(Tag9 (("a")), 100000000, 0, -8045)]), 100000000, 0, -8044), (Tag5 ("string", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -7991), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7990), 0), 100000000, 0, -7989), 0), 100000000, 0, -7988), (Tag5 ("position", 1, (Tag10 ((Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -8023), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8022), 0), 100000000, 0, -8021), 0), 100000000, 0, -8020), (Tag5 ("location", 1, (Tag10 ((Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -8127), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8126), 0), 100000000, 0, -8125), 0), 100000000, 0, -8124), (Tag5 ("location_stack", 1, (Tag10 ((Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -8123), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8122), 0), 100000000, 0, -8121), 0), 100000000, 0, -8120), (Tag5 ("loc", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -8129), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8135), 0), 100000000, 0, -8134), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -8129)], (0)), 100000000, 0, -8133), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8132), 0), 100000000, 0, -8131), 0), 100000000, 0, -8130), [(Tag9 (("a")), 100000000, 0, -8129)]), 100000000, 0, -8128), (Tag5 ("longident", 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -8119), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8118), 0), 100000000, 0, -8117), 0), 100000000, 0, -8116), (Tag5 ("longident_loc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -8115), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8114), 0), 100000000, 0, -8113), 0), 100000000, 0, -8112), (Tag5 ("rec_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -8015), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8014), 0), 100000000, 0, -8013), 0), 100000000, 0, -8012), (Tag5 ("direction_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -8215), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8214), 0), 100000000, 0, -8213), 0), 100000000, 0, -8212), (Tag5 ("private_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -8019), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8018), 0), 100000000, 0, -8017), 0), 100000000, 0, -8016), (Tag5 ("mutable_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -8079), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8078), 0), 100000000, 0, -8077), 0), 100000000, 0, -8076), (Tag5 ("virtual_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -7939), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7938), 0), 100000000, 0, -7937), 0), 100000000, 0, -7936), (Tag5 ("override_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -8043), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8042), 0), 100000000, 0, -8041), 0), 100000000, 0, -8040), (Tag5 ("closed_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -8239), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8238), 0), 100000000, 0, -8237), 0), 100000000, 0, -8236), (Tag5 ("label", 1, (Tag10 ((Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -8155), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8154), 0), 100000000, 0, -8153), 0), 100000000, 0, -8152), (Tag5 ("arg_label", 1, (Tag10 ((Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -8335), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8334), 0), 100000000, 0, -8333), 0), 100000000, 0, -8332), (Tag5 ("variance", 1, (Tag10 ((Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -7943), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7942), 0), 100000000, 0, -7941), 0), 100000000, 0, -7940), (Tag5 ("injectivity", 1, (Tag10 ((Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -8163), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8162), 0), 100000000, 0, -8161), 0), 100000000, 0, -8160), (Tag5 ("constant", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -8235), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8234), 0), 100000000, 0, -8233), 0), 100000000, 0, -8232), (Tag5 ("attribute", 1, (Tag10 ((Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -8331), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8330), 0), 100000000, 0, -8329), 0), 100000000, 0, -8328), (Tag5 ("extension", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -8195), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8194), 0), 100000000, 0, -8193), 0), 100000000, 0, -8192), (Tag5 ("attributes", 1, (Tag10 ((Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -8327), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8326), 0), 100000000, 0, -8325), 0), 100000000, 0, -8324), (Tag5 ("payload", 1, (Tag10 ((Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -8027), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8026), 0), 100000000, 0, -8025), 0), 100000000, 0, -8024), (Tag5 ("core_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -8223), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8222), 0), 100000000, 0, -8221), 0), 100000000, 0, -8220), (Tag5 ("core_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -8219), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8218), 0), 100000000, 0, -8217), 0), 100000000, 0, -8216), (Tag5 ("package_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -8039), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8038), 0), 100000000, 0, -8037), 0), 100000000, 0, -8036), (Tag5 ("row_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -8011), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8010), 0), 100000000, 0, -8009), 0), 100000000, 0, -8008), (Tag5 ("row_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -8007), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8006), 0), 100000000, 0, -8005), 0), 100000000, 0, -8004), (Tag5 ("object_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -8075), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8074), 0), 100000000, 0, -8073), 0), 100000000, 0, -8072), (Tag5 ("object_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -8071), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8070), 0), 100000000, 0, -8069), 0), 100000000, 0, -8068), (Tag5 ("pattern", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -8035), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8034), 0), 100000000, 0, -8033), 0), 100000000, 0, -8032), (Tag5 ("pattern_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -8031), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8030), 0), 100000000, 0, -8029), 0), 100000000, 0, -8028), (Tag5 ("expression", 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -8203), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8202), 0), 100000000, 0, -8201), 0), 100000000, 0, -8200), (Tag5 ("expression_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -8199), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8198), 0), 100000000, 0, -8197), 0), 100000000, 0, -8196), (Tag5 ("case", 1, (Tag10 ((Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -8315), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8314), 0), 100000000, 0, -8313), 0), 100000000, 0, -8312), (Tag5 ("letop", 1, (Tag10 ((Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -8147), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8146), 0), 100000000, 0, -8145), 0), 100000000, 0, -8144), (Tag5 ("binding_op", 1, (Tag10 ((Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -8323), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8322), 0), 100000000, 0, -8321), 0), 100000000, 0, -8320), (Tag5 ("value_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -7947), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7946), 0), 100000000, 0, -7945), 0), 100000000, 0, -7944), (Tag5 ("type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -7967), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7966), 0), 100000000, 0, -7965), 0), 100000000, 0, -7964), (Tag5 ("type_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -7955), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7954), 0), 100000000, 0, -7953), 0), 100000000, 0, -7952), (Tag5 ("label_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -8151), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8150), 0), 100000000, 0, -8149), 0), 100000000, 0, -8148), (Tag5 ("constructor_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -8227), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8226), 0), 100000000, 0, -8225), 0), 100000000, 0, -8224), (Tag5 ("constructor_arguments", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -8231), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8230), 0), 100000000, 0, -8229), 0), 100000000, 0, -8228), (Tag5 ("type_extension", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -7959), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7958), 0), 100000000, 0, -7957), 0), 100000000, 0, -7956), (Tag5 ("extension_constructor", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -8191), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8190), 0), 100000000, 0, -8189), 0), 100000000, 0, -8188), (Tag5 ("type_exception", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -7963), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7962), 0), 100000000, 0, -7961), 0), 100000000, 0, -7960), (Tag5 ("extension_constructor_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -8187), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8186), 0), 100000000, 0, -8185), 0), 100000000, 0, -8184), (Tag5 ("class_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -8259), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8258), 0), 100000000, 0, -8257), 0), 100000000, 0, -8256), (Tag5 ("class_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -8251), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8250), 0), 100000000, 0, -8249), 0), 100000000, 0, -8248), (Tag5 ("class_signature", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -8267), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8266), 0), 100000000, 0, -8265), 0), 100000000, 0, -8264), (Tag5 ("class_type_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -8247), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8246), 0), 100000000, 0, -8245), 0), 100000000, 0, -8244), (Tag5 ("class_type_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -8243), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8242), 0), 100000000, 0, -8241), 0), 100000000, 0, -8240), (Tag5 ("class_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -8269), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8275), 0), 100000000, 0, -8274), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -8269)], (0)), 100000000, 0, -8273), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8272), 0), 100000000, 0, -8271), 0), 100000000, 0, -8270), [(Tag9 (("a")), 100000000, 0, -8269)]), 100000000, 0, -8268), (Tag5 ("class_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -8299), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8298), 0), 100000000, 0, -8297), 0), 100000000, 0, -8296), (Tag5 ("class_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -8255), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8254), 0), 100000000, 0, -8253), 0), 100000000, 0, -8252), (Tag5 ("class_expr", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -8295), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8294), 0), 100000000, 0, -8293), 0), 100000000, 0, -8292), (Tag5 ("class_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -8291), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8290), 0), 100000000, 0, -8289), 0), 100000000, 0, -8288), (Tag5 ("class_structure", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -8263), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8262), 0), 100000000, 0, -8261), 0), 100000000, 0, -8260), (Tag5 ("class_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -8287), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8286), 0), 100000000, 0, -8285), 0), 100000000, 0, -8284), (Tag5 ("class_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -8283), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8282), 0), 100000000, 0, -8281), 0), 100000000, 0, -8280), (Tag5 ("class_field_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -8279), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8278), 0), 100000000, 0, -8277), 0), 100000000, 0, -8276), (Tag5 ("class_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -8303), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8302), 0), 100000000, 0, -8301), 0), 100000000, 0, -8300), (Tag5 ("module_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -8091), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8090), 0), 100000000, 0, -8089), 0), 100000000, 0, -8088), (Tag5 ("module_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -8083), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8082), 0), 100000000, 0, -8081), 0), 100000000, 0, -8080), (Tag5 ("functor_parameter", 1, (Tag10 ((Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -8183), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8182), 0), 100000000, 0, -8181), 0), 100000000, 0, -8180), (Tag5 ("signature", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -8003), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8002), 0), 100000000, 0, -8001), 0), 100000000, 0, -8000), (Tag5 ("signature_item", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -7999), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7998), 0), 100000000, 0, -7997), 0), 100000000, 0, -7996), (Tag5 ("signature_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -7995), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7994), 0), 100000000, 0, -7993), 0), 100000000, 0, -7992), (Tag5 ("module_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -8107), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8106), 0), 100000000, 0, -8105), 0), 100000000, 0, -8104), (Tag5 ("module_substitution", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -8095), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8094), 0), 100000000, 0, -8093), 0), 100000000, 0, -8092), (Tag5 ("module_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -8087), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8086), 0), 100000000, 0, -8085), 0), 100000000, 0, -8084), (Tag5 ("open_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -8053), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8059), 0), 100000000, 0, -8058), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -8053)], (0)), 100000000, 0, -8057), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8056), 0), 100000000, 0, -8055), 0), 100000000, 0, -8054), [(Tag9 (("a")), 100000000, 0, -8053)]), 100000000, 0, -8052), (Tag5 ("open_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -8063), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8062), 0), 100000000, 0, -8061), 0), 100000000, 0, -8060), (Tag5 ("open_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -8067), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8066), 0), 100000000, 0, -8065), 0), 100000000, 0, -8064), (Tag5 ("include_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -8165), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8171), 0), 100000000, 0, -8170), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -8165)], (0)), 100000000, 0, -8169), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8168), 0), 100000000, 0, -8167), 0), 100000000, 0, -8166), [(Tag9 (("a")), 100000000, 0, -8165)]), 100000000, 0, -8164), (Tag5 ("include_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -8175), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8174), 0), 100000000, 0, -8173), 0), 100000000, 0, -8172), (Tag5 ("include_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -8179), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8178), 0), 100000000, 0, -8177), 0), 100000000, 0, -8176), (Tag5 ("with_constraint", 1, (Tag10 ((Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -7935), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7934), 0), 100000000, 0, -7933), 0), 100000000, 0, -7932), (Tag5 ("module_expr", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -8103), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8102), 0), 100000000, 0, -8101), 0), 100000000, 0, -8100), (Tag5 ("module_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -8099), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8098), 0), 100000000, 0, -8097), 0), 100000000, 0, -8096), (Tag5 ("structure", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -7987), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7986), 0), 100000000, 0, -7985), 0), 100000000, 0, -7984), (Tag5 ("structure_item", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -7983), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7982), 0), 100000000, 0, -7981), 0), 100000000, 0, -7980), (Tag5 ("structure_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -7979), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7978), 0), 100000000, 0, -7977), 0), 100000000, 0, -7976), (Tag5 ("value_binding", 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -7951), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7950), 0), 100000000, 0, -7949), 0), 100000000, 0, -7948), (Tag5 ("module_binding", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -8111), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8110), 0), 100000000, 0, -8109), 0), 100000000, 0, -8108), (Tag5 ("toplevel_phrase", 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -7971), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7970), 0), 100000000, 0, -7969), 0), 100000000, 0, -7968), (Tag5 ("toplevel_directive", 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -7975), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7974), 0), 100000000, 0, -7973), 0), 100000000, 0, -7972), (Tag5 ("directive_argument", 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -8211), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8210), 0), 100000000, 0, -8209), 0), 100000000, 0, -8208), (Tag5 ("directive_argument_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -8207), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8206), 0), 100000000, 0, -8205), 0), 100000000, 0, -8204), (Tag5 ("cases", 1, (Tag10 ((Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -8311), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8310), 0), 100000000, 0, -8309), 0), 100000000, 0, -8308), ((0), 100000000, 0, -8831)), 100000000, 0, -8927)), 100000000, 0, -8926)), 100000000, 0, -8925)), 100000000, 0, -8924)), 100000000, 0, -8923)), 100000000, 0, -8922)), 100000000, 0, -8921)), 100000000, 0, -8920)), 100000000, 0, -8919)), 100000000, 0, -8918)), 100000000, 0, -8917)), 100000000, 0, -8916)), 100000000, 0, -8915)), 100000000, 0, -8914)), 100000000, 0, -8913)), 100000000, 0, -8912)), 100000000, 0, -8911)), 100000000, 0, -8910)), 100000000, 0, -8909)), 100000000, 0, -8908)), 100000000, 0, -8907)), 100000000, 0, -8906)), 100000000, 0, -8905)), 100000000, 0, -8904)), 100000000, 0, -8903)), 100000000, 0, -8902)), 100000000, 0, -8901)), 100000000, 0, -8900)), 100000000, 0, -8899)), 100000000, 0, -8898)), 100000000, 0, -8897)), 100000000, 0, -8896)), 100000000, 0, -8895)), 100000000, 0, -8894)), 100000000, 0, -8893)), 100000000, 0, -8892)), 100000000, 0, -8891)), 100000000, 0, -8890)), 100000000, 0, -8889)), 100000000, 0, -8888)), 100000000, 0, -8887)), 100000000, 0, -8886)), 100000000, 0, -8885)), 100000000, 0, -8884)), 100000000, 0, -8883)), 100000000, 0, -8882)), 100000000, 0, -8881)), 100000000, 0, -8880)), 100000000, 0, -8879)), 100000000, 0, -8878)), 100000000, 0, -8877)), 100000000, 0, -8876)), 100000000, 0, -8875)), 100000000, 0, -8874)), 100000000, 0, -8873)), 100000000, 0, -8872)), 100000000, 0, -8871)), 100000000, 0, -8870)), 100000000, 0, -8869)), 100000000, 0, -8868)), 100000000, 0, -8867)), 100000000, 0, -8866)), 100000000, 0, -8865)), 100000000, 0, -8864)), 100000000, 0, -8863)), 100000000, 0, -8862)), 100000000, 0, -8861)), 100000000, 0, -8860)), 100000000, 0, -8859)), 100000000, 0, -8858)), 100000000, 0, -8857)), 100000000, 0, -8856)), 100000000, 0, -8855)), 100000000, 0, -8854)), 100000000, 0, -8853)), 100000000, 0, -8852)), 100000000, 0, -8851)), 100000000, 0, -8850)), 100000000, 0, -8849)), 100000000, 0, -8848)), 100000000, 0, -8847)), 100000000, 0, -8846)), 100000000, 0, -8845)), 100000000, 0, -8844)), 100000000, 0, -8843)), 100000000, 0, -8842)), 100000000, 0, -8841)), 100000000, 0, -8840)), 100000000, 0, -8839)), 100000000, 0, -8838)), 100000000, 0, -8837)), 100000000, 0, -8836)), 100000000, 0, -8835)), 100000000, 0, -8834)), 100000000, 0, -8833), (([(("iter", 7447)); ((0), 100000000, 0, -8831)]))), 100000000, 0, -8832), ((0), 100000000, 0, -8831), 0, (((((0, "arg_label", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -8436), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8435), 0), 100000000, 0, -8434), 0), 100000000, 0, -8433)), 0, 1), "attribute", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -8440), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8439), 0), 100000000, 0, -8438), 0), 100000000, 0, -8437)), ((0, "attributes", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -8444), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8443), 0), 100000000, 0, -8442), 0), 100000000, 0, -8441)), (0, "binding_op", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -8448), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8447), 0), 100000000, 0, -8446), 0), 100000000, 0, -8445)), 0, 1), 2), "bool", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -8452), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8451), 0), 100000000, 0, -8450), 0), 100000000, 0, -8449)), (0, "case", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -8456), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8455), 0), 100000000, 0, -8454), 0), 100000000, 0, -8453)), (0, "cases", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -8460), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8459), 0), 100000000, 0, -8458), 0), 100000000, 0, -8457)), 0, 1), 2), 3), 4), "char", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -8464), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8463), 0), 100000000, 0, -8462), 0), 100000000, 0, -8461)), ((((((0, "class_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -8468), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8467), 0), 100000000, 0, -8466), 0), 100000000, 0, -8465)), 0, 1), "class_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -8472), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8471), 0), 100000000, 0, -8470), 0), 100000000, 0, -8469)), 0, 2), "class_expr", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -8476), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8475), 0), 100000000, 0, -8474), 0), 100000000, 0, -8473)), (0, "class_expr_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -8480), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8479), 0), 100000000, 0, -8478), 0), 100000000, 0, -8477)), 0, 1), 3), "class_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -8484), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8483), 0), 100000000, 0, -8482), 0), 100000000, 0, -8481)), ((0, "class_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -8488), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8487), 0), 100000000, 0, -8486), 0), 100000000, 0, -8485)), (0, "class_field_kind", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -8492), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8491), 0), 100000000, 0, -8490), 0), 100000000, 0, -8489)), 0, 1), 2), "class_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -8269), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8499), 0), 100000000, 0, -8498), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -8269)], (0)), 100000000, 0, -8497), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8496), 0), 100000000, 0, -8495), 0), 100000000, 0, -8494), [(Tag9 (("a")), 100000000, 0, -8269)]), 100000000, 0, -8493)), 0, 3), 4), "class_signature", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -8503), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8502), 0), 100000000, 0, -8501), 0), 100000000, 0, -8500)), ((0, "class_structure", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -8507), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8506), 0), 100000000, 0, -8505), 0), 100000000, 0, -8504)), 0, 1), "class_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -8511), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8510), 0), 100000000, 0, -8509), 0), 100000000, 0, -8508)), (0, "class_type_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -8515), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8514), 0), 100000000, 0, -8513), 0), 100000000, 0, -8512)), 0, 1), 2), 5), "class_type_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -8519), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8518), 0), 100000000, 0, -8517), 0), 100000000, 0, -8516)), (((0, "class_type_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -8523), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8522), 0), 100000000, 0, -8521), 0), 100000000, 0, -8520)), (0, "class_type_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -8527), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8526), 0), 100000000, 0, -8525), 0), 100000000, 0, -8524)), 0, 1), 2), "closed_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -8531), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8530), 0), 100000000, 0, -8529), 0), 100000000, 0, -8528)), 0, 3), "constant", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -8535), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8534), 0), 100000000, 0, -8533), 0), 100000000, 0, -8532)), (((0, "constructor_arguments", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -8539), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8538), 0), 100000000, 0, -8537), 0), 100000000, 0, -8536)), 0, 1), "constructor_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -8543), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8542), 0), 100000000, 0, -8541), 0), 100000000, 0, -8540)), 0, 2), "core_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -8547), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8546), 0), 100000000, 0, -8545), 0), 100000000, 0, -8544)), (0, "core_type_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -8551), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8550), 0), 100000000, 0, -8549), 0), 100000000, 0, -8548)), 0, 1), 3), 4), 6), 7), "direction_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -8555), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8554), 0), 100000000, 0, -8553), 0), 100000000, 0, -8552)), ((((0, "directive_argument", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -8559), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8558), 0), 100000000, 0, -8557), 0), 100000000, 0, -8556)), (0, "directive_argument_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -8563), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8562), 0), 100000000, 0, -8561), 0), 100000000, 0, -8560)), 0, 1), 2), "expression", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -8567), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8566), 0), 100000000, 0, -8565), 0), 100000000, 0, -8564)), (0, "expression_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -8571), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8570), 0), 100000000, 0, -8569), 0), 100000000, 0, -8568)), 0, 1), 3), "extension", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -8575), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8574), 0), 100000000, 0, -8573), 0), 100000000, 0, -8572)), (((0, "extension_constructor", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -8579), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8578), 0), 100000000, 0, -8577), 0), 100000000, 0, -8576)), 0, 1), "extension_constructor_kind", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -8583), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8582), 0), 100000000, 0, -8581), 0), 100000000, 0, -8580)), 0, 2), "functor_parameter", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -8587), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8586), 0), 100000000, 0, -8585), 0), 100000000, 0, -8584)), (((0, "include_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -8591), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8590), 0), 100000000, 0, -8589), 0), 100000000, 0, -8588)), 0, 1), "include_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -8595), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8594), 0), 100000000, 0, -8593), 0), 100000000, 0, -8592)), 0, 2), "include_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -8165), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8602), 0), 100000000, 0, -8601), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -8165)], (0)), 100000000, 0, -8600), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8599), 0), 100000000, 0, -8598), 0), 100000000, 0, -8597), [(Tag9 (("a")), 100000000, 0, -8165)]), 100000000, 0, -8596)), (0, "injectivity", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -8606), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8605), 0), 100000000, 0, -8604), 0), 100000000, 0, -8603)), 0, 1), 3), 4), 5), "int", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -8610), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8609), 0), 100000000, 0, -8608), 0), 100000000, 0, -8607)), ((0, "label", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -8614), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8613), 0), 100000000, 0, -8612), 0), 100000000, 0, -8611)), ((0, "label_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -8618), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8617), 0), 100000000, 0, -8616), 0), 100000000, 0, -8615)), 0, 1), "letop", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -8622), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8621), 0), 100000000, 0, -8620), 0), 100000000, 0, -8619)), 0, 2), 3), "list", (0, 0, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -8137), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8629), 0), 100000000, 0, -8628), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -8137)], (0)), 100000000, 0, -8627), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8626), 0), 100000000, 0, -8625), 0), 100000000, 0, -8624), [(Tag9 (("a")), 100000000, 0, -8137)]), 100000000, 0, -8623)), (0, "loc", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -8129), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8636), 0), 100000000, 0, -8635), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -8129)], (0)), 100000000, 0, -8634), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8633), 0), 100000000, 0, -8632), 0), 100000000, 0, -8631), [(Tag9 (("a")), 100000000, 0, -8129)]), 100000000, 0, -8630)), 0, 1), 4), 6), 8), "location", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -8640), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8639), 0), 100000000, 0, -8638), 0), 100000000, 0, -8637)), (((((0, "location_stack", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -8644), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8643), 0), 100000000, 0, -8642), 0), 100000000, 0, -8641)), 0, 1), "longident", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -8648), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8647), 0), 100000000, 0, -8646), 0), 100000000, 0, -8645)), 0, 2), "longident_loc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -8652), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8651), 0), 100000000, 0, -8650), 0), 100000000, 0, -8649)), ((((0, "module_binding", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -8656), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8655), 0), 100000000, 0, -8654), 0), 100000000, 0, -8653)), 0, 1), "module_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -8660), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8659), 0), 100000000, 0, -8658), 0), 100000000, 0, -8657)), 0, 2), "module_expr", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -8664), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8663), 0), 100000000, 0, -8662), 0), 100000000, 0, -8661)), ((0, "module_expr_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -8668), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8667), 0), 100000000, 0, -8666), 0), 100000000, 0, -8665)), 0, 1), "module_substitution", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -8672), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8671), 0), 100000000, 0, -8670), 0), 100000000, 0, -8669)), 0, 2), 3), "module_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -8676), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8675), 0), 100000000, 0, -8674), 0), 100000000, 0, -8673)), ((0, "module_type_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -8680), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8679), 0), 100000000, 0, -8678), 0), 100000000, 0, -8677)), 0, 1), "module_type_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -8684), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8683), 0), 100000000, 0, -8682), 0), 100000000, 0, -8681)), 0, 2), 4), 5), "mutable_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -8688), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8687), 0), 100000000, 0, -8686), 0), 100000000, 0, -8685)), ((0, "object_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -8692), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8691), 0), 100000000, 0, -8690), 0), 100000000, 0, -8689)), 0, 1), "object_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -8696), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8695), 0), 100000000, 0, -8694), 0), 100000000, 0, -8693)), (((0, "open_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -8700), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8699), 0), 100000000, 0, -8698), 0), 100000000, 0, -8697)), 0, 1), "open_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -8704), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8703), 0), 100000000, 0, -8702), 0), 100000000, 0, -8701)), 0, 2), "open_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -8053), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8711), 0), 100000000, 0, -8710), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -8053)], (0)), 100000000, 0, -8709), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8708), 0), 100000000, 0, -8707), 0), 100000000, 0, -8706), [(Tag9 (("a")), 100000000, 0, -8053)]), 100000000, 0, -8705)), 0, 3), 4), 6), "option", (0, 0, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -8045), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8718), 0), 100000000, 0, -8717), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -8045)], (0)), 100000000, 0, -8716), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8715), 0), 100000000, 0, -8714), 0), 100000000, 0, -8713), [(Tag9 (("a")), 100000000, 0, -8045)]), 100000000, 0, -8712)), (((((0, "override_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -8722), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8721), 0), 100000000, 0, -8720), 0), 100000000, 0, -8719)), 0, 1), "package_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -8726), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8725), 0), 100000000, 0, -8724), 0), 100000000, 0, -8723)), (0, "pattern", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -8730), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8729), 0), 100000000, 0, -8728), 0), 100000000, 0, -8727)), (0, "pattern_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -8734), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8733), 0), 100000000, 0, -8732), 0), 100000000, 0, -8731)), 0, 1), 2), 3), "payload", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -8738), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8737), 0), 100000000, 0, -8736), 0), 100000000, 0, -8735)), (0, "position", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -8742), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8741), 0), 100000000, 0, -8740), 0), 100000000, 0, -8739)), (0, "private_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -8746), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8745), 0), 100000000, 0, -8744), 0), 100000000, 0, -8743)), 0, 1), 2), 4), "rec_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -8750), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8749), 0), 100000000, 0, -8748), 0), 100000000, 0, -8747)), ((0, "row_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -8754), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8753), 0), 100000000, 0, -8752), 0), 100000000, 0, -8751)), 0, 1), "row_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -8758), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8757), 0), 100000000, 0, -8756), 0), 100000000, 0, -8755)), (0, "signature", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -8762), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8761), 0), 100000000, 0, -8760), 0), 100000000, 0, -8759)), (0, "signature_item", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -8766), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8765), 0), 100000000, 0, -8764), 0), 100000000, 0, -8763)), (0, "signature_item_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -8770), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8769), 0), 100000000, 0, -8768), 0), 100000000, 0, -8767)), 0, 1), 2), 3), 4), 5), "string", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -8774), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8773), 0), 100000000, 0, -8772), 0), 100000000, 0, -8771)), ((((0, "structure", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -8778), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8777), 0), 100000000, 0, -8776), 0), 100000000, 0, -8775)), 0, 1), "structure_item", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -8782), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8781), 0), 100000000, 0, -8780), 0), 100000000, 0, -8779)), (0, "structure_item_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -8786), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8785), 0), 100000000, 0, -8784), 0), 100000000, 0, -8783)), ((0, "toplevel_directive", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -8790), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8789), 0), 100000000, 0, -8788), 0), 100000000, 0, -8787)), 0, 1), "toplevel_phrase", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -8794), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8793), 0), 100000000, 0, -8792), 0), 100000000, 0, -8791)), 0, 2), 3), 4), "type_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -8798), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8797), 0), 100000000, 0, -8796), 0), 100000000, 0, -8795)), ((0, "type_exception", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -8802), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8801), 0), 100000000, 0, -8800), 0), 100000000, 0, -8799)), 0, 1), "type_extension", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -8806), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8805), 0), 100000000, 0, -8804), 0), 100000000, 0, -8803)), 0, 2), 5), "type_kind", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -8810), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8809), 0), 100000000, 0, -8808), 0), 100000000, 0, -8807)), (((0, "value_binding", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -8814), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8813), 0), 100000000, 0, -8812), 0), 100000000, 0, -8811)), 0, 1), "value_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -8818), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8817), 0), 100000000, 0, -8816), 0), 100000000, 0, -8815)), 0, 2), "variance", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -8822), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8821), 0), 100000000, 0, -8820), 0), 100000000, 0, -8819)), (0, "virtual_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -8826), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8825), 0), 100000000, 0, -8824), 0), 100000000, 0, -8823)), (0, "with_constraint", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -8830), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8829), 0), 100000000, 0, -8828), 0), 100000000, 0, -8827)), 0, 1), 2), 3), 6), 7), 8), 9))), (("iter", 7447)), 0, 0, (("ast/ast.ml", 2346, 88317, 88317), ("ast/ast.ml", 3222, 118175, 118180), 0), 0, Tag1 ("Ppxlib_ast__Ast", 1572)), 1, 0); Tag6 (("iter", 7446), (0, Tag1 (((Tag4 ((Tag5 ("bool", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -8319), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8318), 0), 100000000, 0, -8317), 0), 100000000, 0, -8316), (Tag5 ("char", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -8307), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8306), 0), 100000000, 0, -8305), 0), 100000000, 0, -8304), (Tag5 ("int", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -8159), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8158), 0), 100000000, 0, -8157), 0), 100000000, 0, -8156), (Tag5 ("list", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -8137), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8143), 0), 100000000, 0, -8142), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -8137)], (0)), 100000000, 0, -8141), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8140), 0), 100000000, 0, -8139), 0), 100000000, 0, -8138), [(Tag9 (("a")), 100000000, 0, -8137)]), 100000000, 0, -8136), (Tag5 ("option", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -8045), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8051), 0), 100000000, 0, -8050), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -8045)], (0)), 100000000, 0, -8049), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8048), 0), 100000000, 0, -8047), 0), 100000000, 0, -8046), [(Tag9 (("a")), 100000000, 0, -8045)]), 100000000, 0, -8044), (Tag5 ("string", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -7991), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7990), 0), 100000000, 0, -7989), 0), 100000000, 0, -7988), (Tag5 ("position", 1, (Tag10 ((Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -8023), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8022), 0), 100000000, 0, -8021), 0), 100000000, 0, -8020), (Tag5 ("location", 1, (Tag10 ((Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -8127), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8126), 0), 100000000, 0, -8125), 0), 100000000, 0, -8124), (Tag5 ("location_stack", 1, (Tag10 ((Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -8123), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8122), 0), 100000000, 0, -8121), 0), 100000000, 0, -8120), (Tag5 ("loc", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -8129), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8135), 0), 100000000, 0, -8134), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -8129)], (0)), 100000000, 0, -8133), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8132), 0), 100000000, 0, -8131), 0), 100000000, 0, -8130), [(Tag9 (("a")), 100000000, 0, -8129)]), 100000000, 0, -8128), (Tag5 ("longident", 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -8119), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8118), 0), 100000000, 0, -8117), 0), 100000000, 0, -8116), (Tag5 ("longident_loc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -8115), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8114), 0), 100000000, 0, -8113), 0), 100000000, 0, -8112), (Tag5 ("rec_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -8015), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8014), 0), 100000000, 0, -8013), 0), 100000000, 0, -8012), (Tag5 ("direction_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -8215), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8214), 0), 100000000, 0, -8213), 0), 100000000, 0, -8212), (Tag5 ("private_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -8019), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8018), 0), 100000000, 0, -8017), 0), 100000000, 0, -8016), (Tag5 ("mutable_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -8079), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8078), 0), 100000000, 0, -8077), 0), 100000000, 0, -8076), (Tag5 ("virtual_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -7939), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7938), 0), 100000000, 0, -7937), 0), 100000000, 0, -7936), (Tag5 ("override_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -8043), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8042), 0), 100000000, 0, -8041), 0), 100000000, 0, -8040), (Tag5 ("closed_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -8239), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8238), 0), 100000000, 0, -8237), 0), 100000000, 0, -8236), (Tag5 ("label", 1, (Tag10 ((Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -8155), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8154), 0), 100000000, 0, -8153), 0), 100000000, 0, -8152), (Tag5 ("arg_label", 1, (Tag10 ((Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -8335), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8334), 0), 100000000, 0, -8333), 0), 100000000, 0, -8332), (Tag5 ("variance", 1, (Tag10 ((Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -7943), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7942), 0), 100000000, 0, -7941), 0), 100000000, 0, -7940), (Tag5 ("injectivity", 1, (Tag10 ((Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -8163), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8162), 0), 100000000, 0, -8161), 0), 100000000, 0, -8160), (Tag5 ("constant", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -8235), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8234), 0), 100000000, 0, -8233), 0), 100000000, 0, -8232), (Tag5 ("attribute", 1, (Tag10 ((Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -8331), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8330), 0), 100000000, 0, -8329), 0), 100000000, 0, -8328), (Tag5 ("extension", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -8195), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8194), 0), 100000000, 0, -8193), 0), 100000000, 0, -8192), (Tag5 ("attributes", 1, (Tag10 ((Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -8327), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8326), 0), 100000000, 0, -8325), 0), 100000000, 0, -8324), (Tag5 ("payload", 1, (Tag10 ((Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -8027), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8026), 0), 100000000, 0, -8025), 0), 100000000, 0, -8024), (Tag5 ("core_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -8223), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8222), 0), 100000000, 0, -8221), 0), 100000000, 0, -8220), (Tag5 ("core_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -8219), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8218), 0), 100000000, 0, -8217), 0), 100000000, 0, -8216), (Tag5 ("package_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -8039), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8038), 0), 100000000, 0, -8037), 0), 100000000, 0, -8036), (Tag5 ("row_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -8011), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8010), 0), 100000000, 0, -8009), 0), 100000000, 0, -8008), (Tag5 ("row_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -8007), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8006), 0), 100000000, 0, -8005), 0), 100000000, 0, -8004), (Tag5 ("object_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -8075), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8074), 0), 100000000, 0, -8073), 0), 100000000, 0, -8072), (Tag5 ("object_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -8071), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8070), 0), 100000000, 0, -8069), 0), 100000000, 0, -8068), (Tag5 ("pattern", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -8035), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8034), 0), 100000000, 0, -8033), 0), 100000000, 0, -8032), (Tag5 ("pattern_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -8031), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8030), 0), 100000000, 0, -8029), 0), 100000000, 0, -8028), (Tag5 ("expression", 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -8203), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8202), 0), 100000000, 0, -8201), 0), 100000000, 0, -8200), (Tag5 ("expression_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -8199), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8198), 0), 100000000, 0, -8197), 0), 100000000, 0, -8196), (Tag5 ("case", 1, (Tag10 ((Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -8315), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8314), 0), 100000000, 0, -8313), 0), 100000000, 0, -8312), (Tag5 ("letop", 1, (Tag10 ((Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -8147), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8146), 0), 100000000, 0, -8145), 0), 100000000, 0, -8144), (Tag5 ("binding_op", 1, (Tag10 ((Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -8323), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8322), 0), 100000000, 0, -8321), 0), 100000000, 0, -8320), (Tag5 ("value_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -7947), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7946), 0), 100000000, 0, -7945), 0), 100000000, 0, -7944), (Tag5 ("type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -7967), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7966), 0), 100000000, 0, -7965), 0), 100000000, 0, -7964), (Tag5 ("type_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -7955), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7954), 0), 100000000, 0, -7953), 0), 100000000, 0, -7952), (Tag5 ("label_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -8151), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8150), 0), 100000000, 0, -8149), 0), 100000000, 0, -8148), (Tag5 ("constructor_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -8227), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8226), 0), 100000000, 0, -8225), 0), 100000000, 0, -8224), (Tag5 ("constructor_arguments", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -8231), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8230), 0), 100000000, 0, -8229), 0), 100000000, 0, -8228), (Tag5 ("type_extension", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -7959), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7958), 0), 100000000, 0, -7957), 0), 100000000, 0, -7956), (Tag5 ("extension_constructor", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -8191), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8190), 0), 100000000, 0, -8189), 0), 100000000, 0, -8188), (Tag5 ("type_exception", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -7963), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7962), 0), 100000000, 0, -7961), 0), 100000000, 0, -7960), (Tag5 ("extension_constructor_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -8187), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8186), 0), 100000000, 0, -8185), 0), 100000000, 0, -8184), (Tag5 ("class_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -8259), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8258), 0), 100000000, 0, -8257), 0), 100000000, 0, -8256), (Tag5 ("class_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -8251), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8250), 0), 100000000, 0, -8249), 0), 100000000, 0, -8248), (Tag5 ("class_signature", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -8267), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8266), 0), 100000000, 0, -8265), 0), 100000000, 0, -8264), (Tag5 ("class_type_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -8247), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8246), 0), 100000000, 0, -8245), 0), 100000000, 0, -8244), (Tag5 ("class_type_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -8243), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8242), 0), 100000000, 0, -8241), 0), 100000000, 0, -8240), (Tag5 ("class_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -8269), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8275), 0), 100000000, 0, -8274), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -8269)], (0)), 100000000, 0, -8273), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8272), 0), 100000000, 0, -8271), 0), 100000000, 0, -8270), [(Tag9 (("a")), 100000000, 0, -8269)]), 100000000, 0, -8268), (Tag5 ("class_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -8299), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8298), 0), 100000000, 0, -8297), 0), 100000000, 0, -8296), (Tag5 ("class_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -8255), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8254), 0), 100000000, 0, -8253), 0), 100000000, 0, -8252), (Tag5 ("class_expr", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -8295), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8294), 0), 100000000, 0, -8293), 0), 100000000, 0, -8292), (Tag5 ("class_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -8291), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8290), 0), 100000000, 0, -8289), 0), 100000000, 0, -8288), (Tag5 ("class_structure", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -8263), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8262), 0), 100000000, 0, -8261), 0), 100000000, 0, -8260), (Tag5 ("class_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -8287), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8286), 0), 100000000, 0, -8285), 0), 100000000, 0, -8284), (Tag5 ("class_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -8283), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8282), 0), 100000000, 0, -8281), 0), 100000000, 0, -8280), (Tag5 ("class_field_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -8279), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8278), 0), 100000000, 0, -8277), 0), 100000000, 0, -8276), (Tag5 ("class_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -8303), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8302), 0), 100000000, 0, -8301), 0), 100000000, 0, -8300), (Tag5 ("module_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -8091), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8090), 0), 100000000, 0, -8089), 0), 100000000, 0, -8088), (Tag5 ("module_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -8083), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8082), 0), 100000000, 0, -8081), 0), 100000000, 0, -8080), (Tag5 ("functor_parameter", 1, (Tag10 ((Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -8183), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8182), 0), 100000000, 0, -8181), 0), 100000000, 0, -8180), (Tag5 ("signature", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -8003), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8002), 0), 100000000, 0, -8001), 0), 100000000, 0, -8000), (Tag5 ("signature_item", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -7999), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7998), 0), 100000000, 0, -7997), 0), 100000000, 0, -7996), (Tag5 ("signature_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -7995), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7994), 0), 100000000, 0, -7993), 0), 100000000, 0, -7992), (Tag5 ("module_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -8107), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8106), 0), 100000000, 0, -8105), 0), 100000000, 0, -8104), (Tag5 ("module_substitution", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -8095), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8094), 0), 100000000, 0, -8093), 0), 100000000, 0, -8092), (Tag5 ("module_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -8087), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8086), 0), 100000000, 0, -8085), 0), 100000000, 0, -8084), (Tag5 ("open_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -8053), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8059), 0), 100000000, 0, -8058), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -8053)], (0)), 100000000, 0, -8057), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8056), 0), 100000000, 0, -8055), 0), 100000000, 0, -8054), [(Tag9 (("a")), 100000000, 0, -8053)]), 100000000, 0, -8052), (Tag5 ("open_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -8063), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8062), 0), 100000000, 0, -8061), 0), 100000000, 0, -8060), (Tag5 ("open_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -8067), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8066), 0), 100000000, 0, -8065), 0), 100000000, 0, -8064), (Tag5 ("include_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -8165), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8171), 0), 100000000, 0, -8170), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -8165)], (0)), 100000000, 0, -8169), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8168), 0), 100000000, 0, -8167), 0), 100000000, 0, -8166), [(Tag9 (("a")), 100000000, 0, -8165)]), 100000000, 0, -8164), (Tag5 ("include_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -8175), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8174), 0), 100000000, 0, -8173), 0), 100000000, 0, -8172), (Tag5 ("include_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -8179), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8178), 0), 100000000, 0, -8177), 0), 100000000, 0, -8176), (Tag5 ("with_constraint", 1, (Tag10 ((Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -7935), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7934), 0), 100000000, 0, -7933), 0), 100000000, 0, -7932), (Tag5 ("module_expr", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -8103), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8102), 0), 100000000, 0, -8101), 0), 100000000, 0, -8100), (Tag5 ("module_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -8099), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8098), 0), 100000000, 0, -8097), 0), 100000000, 0, -8096), (Tag5 ("structure", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -7987), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7986), 0), 100000000, 0, -7985), 0), 100000000, 0, -7984), (Tag5 ("structure_item", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -7983), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7982), 0), 100000000, 0, -7981), 0), 100000000, 0, -7980), (Tag5 ("structure_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -7979), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7978), 0), 100000000, 0, -7977), 0), 100000000, 0, -7976), (Tag5 ("value_binding", 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -7951), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7950), 0), 100000000, 0, -7949), 0), 100000000, 0, -7948), (Tag5 ("module_binding", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -8111), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8110), 0), 100000000, 0, -8109), 0), 100000000, 0, -8108), (Tag5 ("toplevel_phrase", 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -7971), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7970), 0), 100000000, 0, -7969), 0), 100000000, 0, -7968), (Tag5 ("toplevel_directive", 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -7975), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7974), 0), 100000000, 0, -7973), 0), 100000000, 0, -7972), (Tag5 ("directive_argument", 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -8211), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8210), 0), 100000000, 0, -8209), 0), 100000000, 0, -8208), (Tag5 ("directive_argument_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -8207), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8206), 0), 100000000, 0, -8205), 0), 100000000, 0, -8204), (Tag5 ("cases", 1, (Tag10 ((Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -8311), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8310), 0), 100000000, 0, -8309), 0), 100000000, 0, -8308), ((0), 100000000, 0, -8831)), 100000000, 0, -8927)), 100000000, 0, -8926)), 100000000, 0, -8925)), 100000000, 0, -8924)), 100000000, 0, -8923)), 100000000, 0, -8922)), 100000000, 0, -8921)), 100000000, 0, -8920)), 100000000, 0, -8919)), 100000000, 0, -8918)), 100000000, 0, -8917)), 100000000, 0, -8916)), 100000000, 0, -8915)), 100000000, 0, -8914)), 100000000, 0, -8913)), 100000000, 0, -8912)), 100000000, 0, -8911)), 100000000, 0, -8910)), 100000000, 0, -8909)), 100000000, 0, -8908)), 100000000, 0, -8907)), 100000000, 0, -8906)), 100000000, 0, -8905)), 100000000, 0, -8904)), 100000000, 0, -8903)), 100000000, 0, -8902)), 100000000, 0, -8901)), 100000000, 0, -8900)), 100000000, 0, -8899)), 100000000, 0, -8898)), 100000000, 0, -8897)), 100000000, 0, -8896)), 100000000, 0, -8895)), 100000000, 0, -8894)), 100000000, 0, -8893)), 100000000, 0, -8892)), 100000000, 0, -8891)), 100000000, 0, -8890)), 100000000, 0, -8889)), 100000000, 0, -8888)), 100000000, 0, -8887)), 100000000, 0, -8886)), 100000000, 0, -8885)), 100000000, 0, -8884)), 100000000, 0, -8883)), 100000000, 0, -8882)), 100000000, 0, -8881)), 100000000, 0, -8880)), 100000000, 0, -8879)), 100000000, 0, -8878)), 100000000, 0, -8877)), 100000000, 0, -8876)), 100000000, 0, -8875)), 100000000, 0, -8874)), 100000000, 0, -8873)), 100000000, 0, -8872)), 100000000, 0, -8871)), 100000000, 0, -8870)), 100000000, 0, -8869)), 100000000, 0, -8868)), 100000000, 0, -8867)), 100000000, 0, -8866)), 100000000, 0, -8865)), 100000000, 0, -8864)), 100000000, 0, -8863)), 100000000, 0, -8862)), 100000000, 0, -8861)), 100000000, 0, -8860)), 100000000, 0, -8859)), 100000000, 0, -8858)), 100000000, 0, -8857)), 100000000, 0, -8856)), 100000000, 0, -8855)), 100000000, 0, -8854)), 100000000, 0, -8853)), 100000000, 0, -8852)), 100000000, 0, -8851)), 100000000, 0, -8850)), 100000000, 0, -8849)), 100000000, 0, -8848)), 100000000, 0, -8847)), 100000000, 0, -8846)), 100000000, 0, -8845)), 100000000, 0, -8844)), 100000000, 0, -8843)), 100000000, 0, -8842)), 100000000, 0, -8841)), 100000000, 0, -8840)), 100000000, 0, -8839)), 100000000, 0, -8838)), 100000000, 0, -8837)), 100000000, 0, -8836)), 100000000, 0, -8835)), 100000000, 0, -8834)), 100000000, 0, -8833), (([(("iter", 7447)); ((0), 100000000, 0, -8831)]))), 100000000, 0, -8832), ((0), 100000000, 0, -8831), 0, (((((0, "arg_label", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -8436), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8435), 0), 100000000, 0, -8434), 0), 100000000, 0, -8433)), 0, 1), "attribute", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -8440), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8439), 0), 100000000, 0, -8438), 0), 100000000, 0, -8437)), ((0, "attributes", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -8444), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8443), 0), 100000000, 0, -8442), 0), 100000000, 0, -8441)), (0, "binding_op", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -8448), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8447), 0), 100000000, 0, -8446), 0), 100000000, 0, -8445)), 0, 1), 2), "bool", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -8452), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8451), 0), 100000000, 0, -8450), 0), 100000000, 0, -8449)), (0, "case", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -8456), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8455), 0), 100000000, 0, -8454), 0), 100000000, 0, -8453)), (0, "cases", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -8460), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8459), 0), 100000000, 0, -8458), 0), 100000000, 0, -8457)), 0, 1), 2), 3), 4), "char", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -8464), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8463), 0), 100000000, 0, -8462), 0), 100000000, 0, -8461)), ((((((0, "class_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -8468), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8467), 0), 100000000, 0, -8466), 0), 100000000, 0, -8465)), 0, 1), "class_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -8472), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8471), 0), 100000000, 0, -8470), 0), 100000000, 0, -8469)), 0, 2), "class_expr", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -8476), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8475), 0), 100000000, 0, -8474), 0), 100000000, 0, -8473)), (0, "class_expr_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -8480), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8479), 0), 100000000, 0, -8478), 0), 100000000, 0, -8477)), 0, 1), 3), "class_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -8484), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8483), 0), 100000000, 0, -8482), 0), 100000000, 0, -8481)), ((0, "class_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -8488), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8487), 0), 100000000, 0, -8486), 0), 100000000, 0, -8485)), (0, "class_field_kind", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -8492), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8491), 0), 100000000, 0, -8490), 0), 100000000, 0, -8489)), 0, 1), 2), "class_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -8269), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8499), 0), 100000000, 0, -8498), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -8269)], (0)), 100000000, 0, -8497), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8496), 0), 100000000, 0, -8495), 0), 100000000, 0, -8494), [(Tag9 (("a")), 100000000, 0, -8269)]), 100000000, 0, -8493)), 0, 3), 4), "class_signature", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -8503), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8502), 0), 100000000, 0, -8501), 0), 100000000, 0, -8500)), ((0, "class_structure", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -8507), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8506), 0), 100000000, 0, -8505), 0), 100000000, 0, -8504)), 0, 1), "class_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -8511), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8510), 0), 100000000, 0, -8509), 0), 100000000, 0, -8508)), (0, "class_type_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -8515), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8514), 0), 100000000, 0, -8513), 0), 100000000, 0, -8512)), 0, 1), 2), 5), "class_type_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -8519), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8518), 0), 100000000, 0, -8517), 0), 100000000, 0, -8516)), (((0, "class_type_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -8523), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8522), 0), 100000000, 0, -8521), 0), 100000000, 0, -8520)), (0, "class_type_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -8527), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8526), 0), 100000000, 0, -8525), 0), 100000000, 0, -8524)), 0, 1), 2), "closed_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -8531), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8530), 0), 100000000, 0, -8529), 0), 100000000, 0, -8528)), 0, 3), "constant", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -8535), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8534), 0), 100000000, 0, -8533), 0), 100000000, 0, -8532)), (((0, "constructor_arguments", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -8539), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8538), 0), 100000000, 0, -8537), 0), 100000000, 0, -8536)), 0, 1), "constructor_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -8543), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8542), 0), 100000000, 0, -8541), 0), 100000000, 0, -8540)), 0, 2), "core_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -8547), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8546), 0), 100000000, 0, -8545), 0), 100000000, 0, -8544)), (0, "core_type_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -8551), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8550), 0), 100000000, 0, -8549), 0), 100000000, 0, -8548)), 0, 1), 3), 4), 6), 7), "direction_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -8555), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8554), 0), 100000000, 0, -8553), 0), 100000000, 0, -8552)), ((((0, "directive_argument", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -8559), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8558), 0), 100000000, 0, -8557), 0), 100000000, 0, -8556)), (0, "directive_argument_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -8563), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8562), 0), 100000000, 0, -8561), 0), 100000000, 0, -8560)), 0, 1), 2), "expression", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -8567), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8566), 0), 100000000, 0, -8565), 0), 100000000, 0, -8564)), (0, "expression_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -8571), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8570), 0), 100000000, 0, -8569), 0), 100000000, 0, -8568)), 0, 1), 3), "extension", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -8575), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8574), 0), 100000000, 0, -8573), 0), 100000000, 0, -8572)), (((0, "extension_constructor", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -8579), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8578), 0), 100000000, 0, -8577), 0), 100000000, 0, -8576)), 0, 1), "extension_constructor_kind", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -8583), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8582), 0), 100000000, 0, -8581), 0), 100000000, 0, -8580)), 0, 2), "functor_parameter", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -8587), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8586), 0), 100000000, 0, -8585), 0), 100000000, 0, -8584)), (((0, "include_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -8591), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8590), 0), 100000000, 0, -8589), 0), 100000000, 0, -8588)), 0, 1), "include_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -8595), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8594), 0), 100000000, 0, -8593), 0), 100000000, 0, -8592)), 0, 2), "include_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -8165), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8602), 0), 100000000, 0, -8601), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -8165)], (0)), 100000000, 0, -8600), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8599), 0), 100000000, 0, -8598), 0), 100000000, 0, -8597), [(Tag9 (("a")), 100000000, 0, -8165)]), 100000000, 0, -8596)), (0, "injectivity", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -8606), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8605), 0), 100000000, 0, -8604), 0), 100000000, 0, -8603)), 0, 1), 3), 4), 5), "int", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -8610), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8609), 0), 100000000, 0, -8608), 0), 100000000, 0, -8607)), ((0, "label", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -8614), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8613), 0), 100000000, 0, -8612), 0), 100000000, 0, -8611)), ((0, "label_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -8618), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8617), 0), 100000000, 0, -8616), 0), 100000000, 0, -8615)), 0, 1), "letop", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -8622), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8621), 0), 100000000, 0, -8620), 0), 100000000, 0, -8619)), 0, 2), 3), "list", (0, 0, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -8137), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8629), 0), 100000000, 0, -8628), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -8137)], (0)), 100000000, 0, -8627), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8626), 0), 100000000, 0, -8625), 0), 100000000, 0, -8624), [(Tag9 (("a")), 100000000, 0, -8137)]), 100000000, 0, -8623)), (0, "loc", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -8129), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8636), 0), 100000000, 0, -8635), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -8129)], (0)), 100000000, 0, -8634), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8633), 0), 100000000, 0, -8632), 0), 100000000, 0, -8631), [(Tag9 (("a")), 100000000, 0, -8129)]), 100000000, 0, -8630)), 0, 1), 4), 6), 8), "location", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -8640), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8639), 0), 100000000, 0, -8638), 0), 100000000, 0, -8637)), (((((0, "location_stack", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -8644), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8643), 0), 100000000, 0, -8642), 0), 100000000, 0, -8641)), 0, 1), "longident", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -8648), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8647), 0), 100000000, 0, -8646), 0), 100000000, 0, -8645)), 0, 2), "longident_loc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -8652), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8651), 0), 100000000, 0, -8650), 0), 100000000, 0, -8649)), ((((0, "module_binding", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -8656), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8655), 0), 100000000, 0, -8654), 0), 100000000, 0, -8653)), 0, 1), "module_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -8660), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8659), 0), 100000000, 0, -8658), 0), 100000000, 0, -8657)), 0, 2), "module_expr", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -8664), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8663), 0), 100000000, 0, -8662), 0), 100000000, 0, -8661)), ((0, "module_expr_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -8668), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8667), 0), 100000000, 0, -8666), 0), 100000000, 0, -8665)), 0, 1), "module_substitution", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -8672), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8671), 0), 100000000, 0, -8670), 0), 100000000, 0, -8669)), 0, 2), 3), "module_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -8676), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8675), 0), 100000000, 0, -8674), 0), 100000000, 0, -8673)), ((0, "module_type_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -8680), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8679), 0), 100000000, 0, -8678), 0), 100000000, 0, -8677)), 0, 1), "module_type_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -8684), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8683), 0), 100000000, 0, -8682), 0), 100000000, 0, -8681)), 0, 2), 4), 5), "mutable_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -8688), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8687), 0), 100000000, 0, -8686), 0), 100000000, 0, -8685)), ((0, "object_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -8692), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8691), 0), 100000000, 0, -8690), 0), 100000000, 0, -8689)), 0, 1), "object_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -8696), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8695), 0), 100000000, 0, -8694), 0), 100000000, 0, -8693)), (((0, "open_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -8700), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8699), 0), 100000000, 0, -8698), 0), 100000000, 0, -8697)), 0, 1), "open_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -8704), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8703), 0), 100000000, 0, -8702), 0), 100000000, 0, -8701)), 0, 2), "open_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -8053), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8711), 0), 100000000, 0, -8710), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -8053)], (0)), 100000000, 0, -8709), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8708), 0), 100000000, 0, -8707), 0), 100000000, 0, -8706), [(Tag9 (("a")), 100000000, 0, -8053)]), 100000000, 0, -8705)), 0, 3), 4), 6), "option", (0, 0, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -8045), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8718), 0), 100000000, 0, -8717), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -8045)], (0)), 100000000, 0, -8716), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8715), 0), 100000000, 0, -8714), 0), 100000000, 0, -8713), [(Tag9 (("a")), 100000000, 0, -8045)]), 100000000, 0, -8712)), (((((0, "override_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -8722), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8721), 0), 100000000, 0, -8720), 0), 100000000, 0, -8719)), 0, 1), "package_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -8726), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8725), 0), 100000000, 0, -8724), 0), 100000000, 0, -8723)), (0, "pattern", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -8730), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8729), 0), 100000000, 0, -8728), 0), 100000000, 0, -8727)), (0, "pattern_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -8734), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8733), 0), 100000000, 0, -8732), 0), 100000000, 0, -8731)), 0, 1), 2), 3), "payload", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -8738), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8737), 0), 100000000, 0, -8736), 0), 100000000, 0, -8735)), (0, "position", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -8742), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8741), 0), 100000000, 0, -8740), 0), 100000000, 0, -8739)), (0, "private_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -8746), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8745), 0), 100000000, 0, -8744), 0), 100000000, 0, -8743)), 0, 1), 2), 4), "rec_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -8750), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8749), 0), 100000000, 0, -8748), 0), 100000000, 0, -8747)), ((0, "row_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -8754), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8753), 0), 100000000, 0, -8752), 0), 100000000, 0, -8751)), 0, 1), "row_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -8758), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8757), 0), 100000000, 0, -8756), 0), 100000000, 0, -8755)), (0, "signature", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -8762), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8761), 0), 100000000, 0, -8760), 0), 100000000, 0, -8759)), (0, "signature_item", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -8766), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8765), 0), 100000000, 0, -8764), 0), 100000000, 0, -8763)), (0, "signature_item_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -8770), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8769), 0), 100000000, 0, -8768), 0), 100000000, 0, -8767)), 0, 1), 2), 3), 4), 5), "string", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -8774), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8773), 0), 100000000, 0, -8772), 0), 100000000, 0, -8771)), ((((0, "structure", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -8778), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8777), 0), 100000000, 0, -8776), 0), 100000000, 0, -8775)), 0, 1), "structure_item", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -8782), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8781), 0), 100000000, 0, -8780), 0), 100000000, 0, -8779)), (0, "structure_item_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -8786), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8785), 0), 100000000, 0, -8784), 0), 100000000, 0, -8783)), ((0, "toplevel_directive", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -8790), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8789), 0), 100000000, 0, -8788), 0), 100000000, 0, -8787)), 0, 1), "toplevel_phrase", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -8794), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8793), 0), 100000000, 0, -8792), 0), 100000000, 0, -8791)), 0, 2), 3), 4), "type_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -8798), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8797), 0), 100000000, 0, -8796), 0), 100000000, 0, -8795)), ((0, "type_exception", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -8802), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8801), 0), 100000000, 0, -8800), 0), 100000000, 0, -8799)), 0, 1), "type_extension", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -8806), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8805), 0), 100000000, 0, -8804), 0), 100000000, 0, -8803)), 0, 2), 5), "type_kind", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -8810), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8809), 0), 100000000, 0, -8808), 0), 100000000, 0, -8807)), (((0, "value_binding", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -8814), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8813), 0), 100000000, 0, -8812), 0), 100000000, 0, -8811)), 0, 1), "value_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -8818), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8817), 0), 100000000, 0, -8816), 0), 100000000, 0, -8815)), 0, 2), "variance", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -8822), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8821), 0), 100000000, 0, -8820), 0), 100000000, 0, -8819)), (0, "virtual_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -8826), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8825), 0), 100000000, 0, -8824), 0), 100000000, 0, -8823)), (0, "with_constraint", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -8830), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8829), 0), 100000000, 0, -8828), 0), 100000000, 0, -8827)), 0, 1), 2), 3), 6), 7), 8), 9))), (("iter", 7447)), (0, 0, 0, 1, ((Tag4 ((Tag5 ("bool", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -8319), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8318), 0), 100000000, 0, -8317), 0), 100000000, 0, -8316), (Tag5 ("char", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -8307), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8306), 0), 100000000, 0, -8305), 0), 100000000, 0, -8304), (Tag5 ("int", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -8159), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8158), 0), 100000000, 0, -8157), 0), 100000000, 0, -8156), (Tag5 ("list", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -8137), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8143), 0), 100000000, 0, -8142), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -8137)], (0)), 100000000, 0, -8141), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8140), 0), 100000000, 0, -8139), 0), 100000000, 0, -8138), [(Tag9 (("a")), 100000000, 0, -8137)]), 100000000, 0, -8136), (Tag5 ("option", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -8045), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8051), 0), 100000000, 0, -8050), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -8045)], (0)), 100000000, 0, -8049), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8048), 0), 100000000, 0, -8047), 0), 100000000, 0, -8046), [(Tag9 (("a")), 100000000, 0, -8045)]), 100000000, 0, -8044), (Tag5 ("string", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -7991), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7990), 0), 100000000, 0, -7989), 0), 100000000, 0, -7988), (Tag5 ("position", 1, (Tag10 ((Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -8023), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8022), 0), 100000000, 0, -8021), 0), 100000000, 0, -8020), (Tag5 ("location", 1, (Tag10 ((Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -8127), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8126), 0), 100000000, 0, -8125), 0), 100000000, 0, -8124), (Tag5 ("location_stack", 1, (Tag10 ((Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -8123), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8122), 0), 100000000, 0, -8121), 0), 100000000, 0, -8120), (Tag5 ("loc", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -8129), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8135), 0), 100000000, 0, -8134), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -8129)], (0)), 100000000, 0, -8133), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8132), 0), 100000000, 0, -8131), 0), 100000000, 0, -8130), [(Tag9 (("a")), 100000000, 0, -8129)]), 100000000, 0, -8128), (Tag5 ("longident", 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -8119), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8118), 0), 100000000, 0, -8117), 0), 100000000, 0, -8116), (Tag5 ("longident_loc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -8115), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8114), 0), 100000000, 0, -8113), 0), 100000000, 0, -8112), (Tag5 ("rec_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -8015), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8014), 0), 100000000, 0, -8013), 0), 100000000, 0, -8012), (Tag5 ("direction_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -8215), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8214), 0), 100000000, 0, -8213), 0), 100000000, 0, -8212), (Tag5 ("private_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -8019), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8018), 0), 100000000, 0, -8017), 0), 100000000, 0, -8016), (Tag5 ("mutable_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -8079), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8078), 0), 100000000, 0, -8077), 0), 100000000, 0, -8076), (Tag5 ("virtual_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -7939), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7938), 0), 100000000, 0, -7937), 0), 100000000, 0, -7936), (Tag5 ("override_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -8043), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8042), 0), 100000000, 0, -8041), 0), 100000000, 0, -8040), (Tag5 ("closed_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -8239), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8238), 0), 100000000, 0, -8237), 0), 100000000, 0, -8236), (Tag5 ("label", 1, (Tag10 ((Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -8155), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8154), 0), 100000000, 0, -8153), 0), 100000000, 0, -8152), (Tag5 ("arg_label", 1, (Tag10 ((Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -8335), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8334), 0), 100000000, 0, -8333), 0), 100000000, 0, -8332), (Tag5 ("variance", 1, (Tag10 ((Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -7943), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7942), 0), 100000000, 0, -7941), 0), 100000000, 0, -7940), (Tag5 ("injectivity", 1, (Tag10 ((Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -8163), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8162), 0), 100000000, 0, -8161), 0), 100000000, 0, -8160), (Tag5 ("constant", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -8235), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8234), 0), 100000000, 0, -8233), 0), 100000000, 0, -8232), (Tag5 ("attribute", 1, (Tag10 ((Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -8331), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8330), 0), 100000000, 0, -8329), 0), 100000000, 0, -8328), (Tag5 ("extension", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -8195), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8194), 0), 100000000, 0, -8193), 0), 100000000, 0, -8192), (Tag5 ("attributes", 1, (Tag10 ((Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -8327), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8326), 0), 100000000, 0, -8325), 0), 100000000, 0, -8324), (Tag5 ("payload", 1, (Tag10 ((Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -8027), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8026), 0), 100000000, 0, -8025), 0), 100000000, 0, -8024), (Tag5 ("core_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -8223), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8222), 0), 100000000, 0, -8221), 0), 100000000, 0, -8220), (Tag5 ("core_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -8219), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8218), 0), 100000000, 0, -8217), 0), 100000000, 0, -8216), (Tag5 ("package_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -8039), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8038), 0), 100000000, 0, -8037), 0), 100000000, 0, -8036), (Tag5 ("row_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -8011), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8010), 0), 100000000, 0, -8009), 0), 100000000, 0, -8008), (Tag5 ("row_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -8007), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8006), 0), 100000000, 0, -8005), 0), 100000000, 0, -8004), (Tag5 ("object_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -8075), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8074), 0), 100000000, 0, -8073), 0), 100000000, 0, -8072), (Tag5 ("object_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -8071), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8070), 0), 100000000, 0, -8069), 0), 100000000, 0, -8068), (Tag5 ("pattern", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -8035), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8034), 0), 100000000, 0, -8033), 0), 100000000, 0, -8032), (Tag5 ("pattern_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -8031), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8030), 0), 100000000, 0, -8029), 0), 100000000, 0, -8028), (Tag5 ("expression", 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -8203), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8202), 0), 100000000, 0, -8201), 0), 100000000, 0, -8200), (Tag5 ("expression_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -8199), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8198), 0), 100000000, 0, -8197), 0), 100000000, 0, -8196), (Tag5 ("case", 1, (Tag10 ((Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -8315), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8314), 0), 100000000, 0, -8313), 0), 100000000, 0, -8312), (Tag5 ("letop", 1, (Tag10 ((Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -8147), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8146), 0), 100000000, 0, -8145), 0), 100000000, 0, -8144), (Tag5 ("binding_op", 1, (Tag10 ((Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -8323), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8322), 0), 100000000, 0, -8321), 0), 100000000, 0, -8320), (Tag5 ("value_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -7947), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7946), 0), 100000000, 0, -7945), 0), 100000000, 0, -7944), (Tag5 ("type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -7967), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7966), 0), 100000000, 0, -7965), 0), 100000000, 0, -7964), (Tag5 ("type_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -7955), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7954), 0), 100000000, 0, -7953), 0), 100000000, 0, -7952), (Tag5 ("label_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -8151), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8150), 0), 100000000, 0, -8149), 0), 100000000, 0, -8148), (Tag5 ("constructor_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -8227), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8226), 0), 100000000, 0, -8225), 0), 100000000, 0, -8224), (Tag5 ("constructor_arguments", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -8231), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8230), 0), 100000000, 0, -8229), 0), 100000000, 0, -8228), (Tag5 ("type_extension", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -7959), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7958), 0), 100000000, 0, -7957), 0), 100000000, 0, -7956), (Tag5 ("extension_constructor", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -8191), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8190), 0), 100000000, 0, -8189), 0), 100000000, 0, -8188), (Tag5 ("type_exception", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -7963), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7962), 0), 100000000, 0, -7961), 0), 100000000, 0, -7960), (Tag5 ("extension_constructor_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -8187), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8186), 0), 100000000, 0, -8185), 0), 100000000, 0, -8184), (Tag5 ("class_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -8259), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8258), 0), 100000000, 0, -8257), 0), 100000000, 0, -8256), (Tag5 ("class_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -8251), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8250), 0), 100000000, 0, -8249), 0), 100000000, 0, -8248), (Tag5 ("class_signature", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -8267), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8266), 0), 100000000, 0, -8265), 0), 100000000, 0, -8264), (Tag5 ("class_type_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -8247), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8246), 0), 100000000, 0, -8245), 0), 100000000, 0, -8244), (Tag5 ("class_type_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -8243), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8242), 0), 100000000, 0, -8241), 0), 100000000, 0, -8240), (Tag5 ("class_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -8269), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8275), 0), 100000000, 0, -8274), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -8269)], (0)), 100000000, 0, -8273), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8272), 0), 100000000, 0, -8271), 0), 100000000, 0, -8270), [(Tag9 (("a")), 100000000, 0, -8269)]), 100000000, 0, -8268), (Tag5 ("class_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -8299), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8298), 0), 100000000, 0, -8297), 0), 100000000, 0, -8296), (Tag5 ("class_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -8255), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8254), 0), 100000000, 0, -8253), 0), 100000000, 0, -8252), (Tag5 ("class_expr", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -8295), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8294), 0), 100000000, 0, -8293), 0), 100000000, 0, -8292), (Tag5 ("class_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -8291), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8290), 0), 100000000, 0, -8289), 0), 100000000, 0, -8288), (Tag5 ("class_structure", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -8263), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8262), 0), 100000000, 0, -8261), 0), 100000000, 0, -8260), (Tag5 ("class_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -8287), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8286), 0), 100000000, 0, -8285), 0), 100000000, 0, -8284), (Tag5 ("class_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -8283), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8282), 0), 100000000, 0, -8281), 0), 100000000, 0, -8280), (Tag5 ("class_field_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -8279), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8278), 0), 100000000, 0, -8277), 0), 100000000, 0, -8276), (Tag5 ("class_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -8303), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8302), 0), 100000000, 0, -8301), 0), 100000000, 0, -8300), (Tag5 ("module_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -8091), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8090), 0), 100000000, 0, -8089), 0), 100000000, 0, -8088), (Tag5 ("module_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -8083), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8082), 0), 100000000, 0, -8081), 0), 100000000, 0, -8080), (Tag5 ("functor_parameter", 1, (Tag10 ((Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -8183), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8182), 0), 100000000, 0, -8181), 0), 100000000, 0, -8180), (Tag5 ("signature", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -8003), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8002), 0), 100000000, 0, -8001), 0), 100000000, 0, -8000), (Tag5 ("signature_item", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -7999), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7998), 0), 100000000, 0, -7997), 0), 100000000, 0, -7996), (Tag5 ("signature_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -7995), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7994), 0), 100000000, 0, -7993), 0), 100000000, 0, -7992), (Tag5 ("module_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -8107), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8106), 0), 100000000, 0, -8105), 0), 100000000, 0, -8104), (Tag5 ("module_substitution", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -8095), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8094), 0), 100000000, 0, -8093), 0), 100000000, 0, -8092), (Tag5 ("module_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -8087), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8086), 0), 100000000, 0, -8085), 0), 100000000, 0, -8084), (Tag5 ("open_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -8053), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8059), 0), 100000000, 0, -8058), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -8053)], (0)), 100000000, 0, -8057), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8056), 0), 100000000, 0, -8055), 0), 100000000, 0, -8054), [(Tag9 (("a")), 100000000, 0, -8053)]), 100000000, 0, -8052), (Tag5 ("open_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -8063), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8062), 0), 100000000, 0, -8061), 0), 100000000, 0, -8060), (Tag5 ("open_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -8067), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8066), 0), 100000000, 0, -8065), 0), 100000000, 0, -8064), (Tag5 ("include_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -8165), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8171), 0), 100000000, 0, -8170), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -8165)], (0)), 100000000, 0, -8169), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8168), 0), 100000000, 0, -8167), 0), 100000000, 0, -8166), [(Tag9 (("a")), 100000000, 0, -8165)]), 100000000, 0, -8164), (Tag5 ("include_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -8175), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8174), 0), 100000000, 0, -8173), 0), 100000000, 0, -8172), (Tag5 ("include_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -8179), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8178), 0), 100000000, 0, -8177), 0), 100000000, 0, -8176), (Tag5 ("with_constraint", 1, (Tag10 ((Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -7935), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7934), 0), 100000000, 0, -7933), 0), 100000000, 0, -7932), (Tag5 ("module_expr", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -8103), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8102), 0), 100000000, 0, -8101), 0), 100000000, 0, -8100), (Tag5 ("module_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -8099), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8098), 0), 100000000, 0, -8097), 0), 100000000, 0, -8096), (Tag5 ("structure", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -7987), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7986), 0), 100000000, 0, -7985), 0), 100000000, 0, -7984), (Tag5 ("structure_item", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -7983), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7982), 0), 100000000, 0, -7981), 0), 100000000, 0, -7980), (Tag5 ("structure_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -7979), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7978), 0), 100000000, 0, -7977), 0), 100000000, 0, -7976), (Tag5 ("value_binding", 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -7951), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7950), 0), 100000000, 0, -7949), 0), 100000000, 0, -7948), (Tag5 ("module_binding", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -8111), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8110), 0), 100000000, 0, -8109), 0), 100000000, 0, -8108), (Tag5 ("toplevel_phrase", 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -7971), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7970), 0), 100000000, 0, -7969), 0), 100000000, 0, -7968), (Tag5 ("toplevel_directive", 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -7975), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7974), 0), 100000000, 0, -7973), 0), 100000000, 0, -7972), (Tag5 ("directive_argument", 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -8211), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8210), 0), 100000000, 0, -8209), 0), 100000000, 0, -8208), (Tag5 ("directive_argument_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -8207), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8206), 0), 100000000, 0, -8205), 0), 100000000, 0, -8204), (Tag5 ("cases", 1, (Tag10 ((Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -8311), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8310), 0), 100000000, 0, -8309), 0), 100000000, 0, -8308), ((0), 100000000, 0, -8432)), 100000000, 0, -8431)), 100000000, 0, -8430)), 100000000, 0, -8429)), 100000000, 0, -8428)), 100000000, 0, -8427)), 100000000, 0, -8426)), 100000000, 0, -8425)), 100000000, 0, -8424)), 100000000, 0, -8423)), 100000000, 0, -8422)), 100000000, 0, -8421)), 100000000, 0, -8420)), 100000000, 0, -8419)), 100000000, 0, -8418)), 100000000, 0, -8417)), 100000000, 0, -8416)), 100000000, 0, -8415)), 100000000, 0, -8414)), 100000000, 0, -8413)), 100000000, 0, -8412)), 100000000, 0, -8411)), 100000000, 0, -8410)), 100000000, 0, -8409)), 100000000, 0, -8408)), 100000000, 0, -8407)), 100000000, 0, -8406)), 100000000, 0, -8405)), 100000000, 0, -8404)), 100000000, 0, -8403)), 100000000, 0, -8402)), 100000000, 0, -8401)), 100000000, 0, -8400)), 100000000, 0, -8399)), 100000000, 0, -8398)), 100000000, 0, -8397)), 100000000, 0, -8396)), 100000000, 0, -8395)), 100000000, 0, -8394)), 100000000, 0, -8393)), 100000000, 0, -8392)), 100000000, 0, -8391)), 100000000, 0, -8390)), 100000000, 0, -8389)), 100000000, 0, -8388)), 100000000, 0, -8387)), 100000000, 0, -8386)), 100000000, 0, -8385)), 100000000, 0, -8384)), 100000000, 0, -8383)), 100000000, 0, -8382)), 100000000, 0, -8381)), 100000000, 0, -8380)), 100000000, 0, -8379)), 100000000, 0, -8378)), 100000000, 0, -8377)), 100000000, 0, -8376)), 100000000, 0, -8375)), 100000000, 0, -8374)), 100000000, 0, -8373)), 100000000, 0, -8372)), 100000000, 0, -8371)), 100000000, 0, -8370)), 100000000, 0, -8369)), 100000000, 0, -8368)), 100000000, 0, -8367)), 100000000, 0, -8366)), 100000000, 0, -8365)), 100000000, 0, -8364)), 100000000, 0, -8363)), 100000000, 0, -8362)), 100000000, 0, -8361)), 100000000, 0, -8360)), 100000000, 0, -8359)), 100000000, 0, -8358)), 100000000, 0, -8357)), 100000000, 0, -8356)), 100000000, 0, -8355)), 100000000, 0, -8354)), 100000000, 0, -8353)), 100000000, 0, -8352)), 100000000, 0, -8351)), 100000000, 0, -8350)), 100000000, 0, -8349)), 100000000, 0, -8348)), 100000000, 0, -8347)), 100000000, 0, -8346)), 100000000, 0, -8345)), 100000000, 0, -8344)), 100000000, 0, -8343)), 100000000, 0, -8342)), 100000000, 0, -8341)), 100000000, 0, -8340)), 100000000, 0, -8339)), 100000000, 0, -8338)), 100000000, 0, -8337), (([(("iter", 7447)); ((0), 100000000, 0, -8432)]))), 100000000, 0, -8336)), 0, 0, 0, 0, (("ast/ast.ml", 2346, 88317, 88317), ("ast/ast.ml", 3222, 118175, 118180), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 1572)), 0, (("ast/ast.ml", 2346, 88317, 88317), ("ast/ast.ml", 3222, 118175, 118180), 0), 0, Tag1 ("Ppxlib_ast__Ast", 1572)), 1, 0); Tag1 (("iter", 7447), (0, 0, 0, 1, ((Tag4 ((Tag5 ("arg_label", 1, (Tag10 ((Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -8335), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8334), 0), 100000000, 0, -8333), 0), 100000000, 0, -8332), (Tag5 ("attribute", 1, (Tag10 ((Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -8331), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8330), 0), 100000000, 0, -8329), 0), 100000000, 0, -8328), (Tag5 ("attributes", 1, (Tag10 ((Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -8327), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8326), 0), 100000000, 0, -8325), 0), 100000000, 0, -8324), (Tag5 ("binding_op", 1, (Tag10 ((Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -8323), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8322), 0), 100000000, 0, -8321), 0), 100000000, 0, -8320), (Tag5 ("bool", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -8319), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8318), 0), 100000000, 0, -8317), 0), 100000000, 0, -8316), (Tag5 ("case", 1, (Tag10 ((Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -8315), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8314), 0), 100000000, 0, -8313), 0), 100000000, 0, -8312), (Tag5 ("cases", 1, (Tag10 ((Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -8311), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8310), 0), 100000000, 0, -8309), 0), 100000000, 0, -8308), (Tag5 ("char", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -8307), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8306), 0), 100000000, 0, -8305), 0), 100000000, 0, -8304), (Tag5 ("class_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -8303), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8302), 0), 100000000, 0, -8301), 0), 100000000, 0, -8300), (Tag5 ("class_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -8299), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8298), 0), 100000000, 0, -8297), 0), 100000000, 0, -8296), (Tag5 ("class_expr", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -8295), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8294), 0), 100000000, 0, -8293), 0), 100000000, 0, -8292), (Tag5 ("class_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -8291), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8290), 0), 100000000, 0, -8289), 0), 100000000, 0, -8288), (Tag5 ("class_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -8287), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8286), 0), 100000000, 0, -8285), 0), 100000000, 0, -8284), (Tag5 ("class_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -8283), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8282), 0), 100000000, 0, -8281), 0), 100000000, 0, -8280), (Tag5 ("class_field_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -8279), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8278), 0), 100000000, 0, -8277), 0), 100000000, 0, -8276), (Tag5 ("class_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -8269), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8275), 0), 100000000, 0, -8274), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -8269)], (0)), 100000000, 0, -8273), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8272), 0), 100000000, 0, -8271), 0), 100000000, 0, -8270), [(Tag9 (("a")), 100000000, 0, -8269)]), 100000000, 0, -8268), (Tag5 ("class_signature", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -8267), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8266), 0), 100000000, 0, -8265), 0), 100000000, 0, -8264), (Tag5 ("class_structure", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -8263), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8262), 0), 100000000, 0, -8261), 0), 100000000, 0, -8260), (Tag5 ("class_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -8259), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8258), 0), 100000000, 0, -8257), 0), 100000000, 0, -8256), (Tag5 ("class_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -8255), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8254), 0), 100000000, 0, -8253), 0), 100000000, 0, -8252), (Tag5 ("class_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -8251), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8250), 0), 100000000, 0, -8249), 0), 100000000, 0, -8248), (Tag5 ("class_type_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -8247), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8246), 0), 100000000, 0, -8245), 0), 100000000, 0, -8244), (Tag5 ("class_type_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -8243), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8242), 0), 100000000, 0, -8241), 0), 100000000, 0, -8240), (Tag5 ("closed_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -8239), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8238), 0), 100000000, 0, -8237), 0), 100000000, 0, -8236), (Tag5 ("constant", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -8235), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8234), 0), 100000000, 0, -8233), 0), 100000000, 0, -8232), (Tag5 ("constructor_arguments", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -8231), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8230), 0), 100000000, 0, -8229), 0), 100000000, 0, -8228), (Tag5 ("constructor_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -8227), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8226), 0), 100000000, 0, -8225), 0), 100000000, 0, -8224), (Tag5 ("core_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -8223), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8222), 0), 100000000, 0, -8221), 0), 100000000, 0, -8220), (Tag5 ("core_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -8219), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8218), 0), 100000000, 0, -8217), 0), 100000000, 0, -8216), (Tag5 ("direction_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -8215), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8214), 0), 100000000, 0, -8213), 0), 100000000, 0, -8212), (Tag5 ("directive_argument", 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -8211), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8210), 0), 100000000, 0, -8209), 0), 100000000, 0, -8208), (Tag5 ("directive_argument_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -8207), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8206), 0), 100000000, 0, -8205), 0), 100000000, 0, -8204), (Tag5 ("expression", 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -8203), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8202), 0), 100000000, 0, -8201), 0), 100000000, 0, -8200), (Tag5 ("expression_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -8199), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8198), 0), 100000000, 0, -8197), 0), 100000000, 0, -8196), (Tag5 ("extension", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -8195), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8194), 0), 100000000, 0, -8193), 0), 100000000, 0, -8192), (Tag5 ("extension_constructor", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -8191), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8190), 0), 100000000, 0, -8189), 0), 100000000, 0, -8188), (Tag5 ("extension_constructor_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -8187), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8186), 0), 100000000, 0, -8185), 0), 100000000, 0, -8184), (Tag5 ("functor_parameter", 1, (Tag10 ((Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -8183), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8182), 0), 100000000, 0, -8181), 0), 100000000, 0, -8180), (Tag5 ("include_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -8179), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8178), 0), 100000000, 0, -8177), 0), 100000000, 0, -8176), (Tag5 ("include_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -8175), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8174), 0), 100000000, 0, -8173), 0), 100000000, 0, -8172), (Tag5 ("include_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -8165), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8171), 0), 100000000, 0, -8170), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -8165)], (0)), 100000000, 0, -8169), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8168), 0), 100000000, 0, -8167), 0), 100000000, 0, -8166), [(Tag9 (("a")), 100000000, 0, -8165)]), 100000000, 0, -8164), (Tag5 ("injectivity", 1, (Tag10 ((Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -8163), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8162), 0), 100000000, 0, -8161), 0), 100000000, 0, -8160), (Tag5 ("int", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -8159), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8158), 0), 100000000, 0, -8157), 0), 100000000, 0, -8156), (Tag5 ("label", 1, (Tag10 ((Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -8155), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8154), 0), 100000000, 0, -8153), 0), 100000000, 0, -8152), (Tag5 ("label_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -8151), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8150), 0), 100000000, 0, -8149), 0), 100000000, 0, -8148), (Tag5 ("letop", 1, (Tag10 ((Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -8147), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8146), 0), 100000000, 0, -8145), 0), 100000000, 0, -8144), (Tag5 ("list", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -8137), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8143), 0), 100000000, 0, -8142), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -8137)], (0)), 100000000, 0, -8141), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8140), 0), 100000000, 0, -8139), 0), 100000000, 0, -8138), [(Tag9 (("a")), 100000000, 0, -8137)]), 100000000, 0, -8136), (Tag5 ("loc", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -8129), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8135), 0), 100000000, 0, -8134), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -8129)], (0)), 100000000, 0, -8133), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8132), 0), 100000000, 0, -8131), 0), 100000000, 0, -8130), [(Tag9 (("a")), 100000000, 0, -8129)]), 100000000, 0, -8128), (Tag5 ("location", 1, (Tag10 ((Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -8127), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8126), 0), 100000000, 0, -8125), 0), 100000000, 0, -8124), (Tag5 ("location_stack", 1, (Tag10 ((Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -8123), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8122), 0), 100000000, 0, -8121), 0), 100000000, 0, -8120), (Tag5 ("longident", 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -8119), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8118), 0), 100000000, 0, -8117), 0), 100000000, 0, -8116), (Tag5 ("longident_loc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -8115), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8114), 0), 100000000, 0, -8113), 0), 100000000, 0, -8112), (Tag5 ("module_binding", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -8111), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8110), 0), 100000000, 0, -8109), 0), 100000000, 0, -8108), (Tag5 ("module_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -8107), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8106), 0), 100000000, 0, -8105), 0), 100000000, 0, -8104), (Tag5 ("module_expr", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -8103), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8102), 0), 100000000, 0, -8101), 0), 100000000, 0, -8100), (Tag5 ("module_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -8099), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8098), 0), 100000000, 0, -8097), 0), 100000000, 0, -8096), (Tag5 ("module_substitution", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -8095), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8094), 0), 100000000, 0, -8093), 0), 100000000, 0, -8092), (Tag5 ("module_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -8091), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8090), 0), 100000000, 0, -8089), 0), 100000000, 0, -8088), (Tag5 ("module_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -8087), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8086), 0), 100000000, 0, -8085), 0), 100000000, 0, -8084), (Tag5 ("module_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -8083), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8082), 0), 100000000, 0, -8081), 0), 100000000, 0, -8080), (Tag5 ("mutable_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -8079), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8078), 0), 100000000, 0, -8077), 0), 100000000, 0, -8076), (Tag5 ("object_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -8075), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8074), 0), 100000000, 0, -8073), 0), 100000000, 0, -8072), (Tag5 ("object_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -8071), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8070), 0), 100000000, 0, -8069), 0), 100000000, 0, -8068), (Tag5 ("open_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -8067), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8066), 0), 100000000, 0, -8065), 0), 100000000, 0, -8064), (Tag5 ("open_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -8063), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8062), 0), 100000000, 0, -8061), 0), 100000000, 0, -8060), (Tag5 ("open_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -8053), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8059), 0), 100000000, 0, -8058), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -8053)], (0)), 100000000, 0, -8057), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8056), 0), 100000000, 0, -8055), 0), 100000000, 0, -8054), [(Tag9 (("a")), 100000000, 0, -8053)]), 100000000, 0, -8052), (Tag5 ("option", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -8045), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8051), 0), 100000000, 0, -8050), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -8045)], (0)), 100000000, 0, -8049), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8048), 0), 100000000, 0, -8047), 0), 100000000, 0, -8046), [(Tag9 (("a")), 100000000, 0, -8045)]), 100000000, 0, -8044), (Tag5 ("override_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -8043), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8042), 0), 100000000, 0, -8041), 0), 100000000, 0, -8040), (Tag5 ("package_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -8039), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8038), 0), 100000000, 0, -8037), 0), 100000000, 0, -8036), (Tag5 ("pattern", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -8035), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8034), 0), 100000000, 0, -8033), 0), 100000000, 0, -8032), (Tag5 ("pattern_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -8031), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8030), 0), 100000000, 0, -8029), 0), 100000000, 0, -8028), (Tag5 ("payload", 1, (Tag10 ((Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -8027), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8026), 0), 100000000, 0, -8025), 0), 100000000, 0, -8024), (Tag5 ("position", 1, (Tag10 ((Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -8023), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8022), 0), 100000000, 0, -8021), 0), 100000000, 0, -8020), (Tag5 ("private_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -8019), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8018), 0), 100000000, 0, -8017), 0), 100000000, 0, -8016), (Tag5 ("rec_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -8015), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8014), 0), 100000000, 0, -8013), 0), 100000000, 0, -8012), (Tag5 ("row_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -8011), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8010), 0), 100000000, 0, -8009), 0), 100000000, 0, -8008), (Tag5 ("row_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -8007), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8006), 0), 100000000, 0, -8005), 0), 100000000, 0, -8004), (Tag5 ("signature", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -8003), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8002), 0), 100000000, 0, -8001), 0), 100000000, 0, -8000), (Tag5 ("signature_item", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -7999), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7998), 0), 100000000, 0, -7997), 0), 100000000, 0, -7996), (Tag5 ("signature_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -7995), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7994), 0), 100000000, 0, -7993), 0), 100000000, 0, -7992), (Tag5 ("string", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -7991), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7990), 0), 100000000, 0, -7989), 0), 100000000, 0, -7988), (Tag5 ("structure", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -7987), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7986), 0), 100000000, 0, -7985), 0), 100000000, 0, -7984), (Tag5 ("structure_item", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -7983), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7982), 0), 100000000, 0, -7981), 0), 100000000, 0, -7980), (Tag5 ("structure_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -7979), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7978), 0), 100000000, 0, -7977), 0), 100000000, 0, -7976), (Tag5 ("toplevel_directive", 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -7975), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7974), 0), 100000000, 0, -7973), 0), 100000000, 0, -7972), (Tag5 ("toplevel_phrase", 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -7971), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7970), 0), 100000000, 0, -7969), 0), 100000000, 0, -7968), (Tag5 ("type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -7967), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7966), 0), 100000000, 0, -7965), 0), 100000000, 0, -7964), (Tag5 ("type_exception", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -7963), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7962), 0), 100000000, 0, -7961), 0), 100000000, 0, -7960), (Tag5 ("type_extension", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -7959), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7958), 0), 100000000, 0, -7957), 0), 100000000, 0, -7956), (Tag5 ("type_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -7955), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7954), 0), 100000000, 0, -7953), 0), 100000000, 0, -7952), (Tag5 ("value_binding", 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -7951), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7950), 0), 100000000, 0, -7949), 0), 100000000, 0, -7948), (Tag5 ("value_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -7947), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7946), 0), 100000000, 0, -7945), 0), 100000000, 0, -7944), (Tag5 ("variance", 1, (Tag10 ((Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -7943), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7942), 0), 100000000, 0, -7941), 0), 100000000, 0, -7940), (Tag5 ("virtual_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -7939), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7938), 0), 100000000, 0, -7937), 0), 100000000, 0, -7936), (Tag5 ("with_constraint", 1, (Tag10 ((Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -7935), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7934), 0), 100000000, 0, -7933), 0), 100000000, 0, -7932), (0, 100000000, 0, -7931)), 100000000, 0, -7930)), 100000000, 0, -7929)), 100000000, 0, -7928)), 100000000, 0, -7927)), 100000000, 0, -7926)), 100000000, 0, -7925)), 100000000, 0, -7924)), 100000000, 0, -7923)), 100000000, 0, -7922)), 100000000, 0, -7921)), 100000000, 0, -7920)), 100000000, 0, -7919)), 100000000, 0, -7918)), 100000000, 0, -7917)), 100000000, 0, -7916)), 100000000, 0, -7915)), 100000000, 0, -7914)), 100000000, 0, -7913)), 100000000, 0, -7912)), 100000000, 0, -7911)), 100000000, 0, -7910)), 100000000, 0, -7909)), 100000000, 0, -7908)), 100000000, 0, -7907)), 100000000, 0, -7906)), 100000000, 0, -7905)), 100000000, 0, -7904)), 100000000, 0, -7903)), 100000000, 0, -7902)), 100000000, 0, -7901)), 100000000, 0, -7900)), 100000000, 0, -7899)), 100000000, 0, -7898)), 100000000, 0, -7897)), 100000000, 0, -7896)), 100000000, 0, -7895)), 100000000, 0, -7894)), 100000000, 0, -7893)), 100000000, 0, -7892)), 100000000, 0, -7891)), 100000000, 0, -7890)), 100000000, 0, -7889)), 100000000, 0, -7888)), 100000000, 0, -7887)), 100000000, 0, -7886)), 100000000, 0, -7885)), 100000000, 0, -7884)), 100000000, 0, -7883)), 100000000, 0, -7882)), 100000000, 0, -7881)), 100000000, 0, -7880)), 100000000, 0, -7879)), 100000000, 0, -7878)), 100000000, 0, -7877)), 100000000, 0, -7876)), 100000000, 0, -7875)), 100000000, 0, -7874)), 100000000, 0, -7873)), 100000000, 0, -7872)), 100000000, 0, -7871)), 100000000, 0, -7870)), 100000000, 0, -7869)), 100000000, 0, -7868)), 100000000, 0, -7867)), 100000000, 0, -7866)), 100000000, 0, -7865)), 100000000, 0, -7864)), 100000000, 0, -7863)), 100000000, 0, -7862)), 100000000, 0, -7861)), 100000000, 0, -7860)), 100000000, 0, -7859)), 100000000, 0, -7858)), 100000000, 0, -7857)), 100000000, 0, -7856)), 100000000, 0, -7855)), 100000000, 0, -7854)), 100000000, 0, -7853)), 100000000, 0, -7852)), 100000000, 0, -7851)), 100000000, 0, -7850)), 100000000, 0, -7849)), 100000000, 0, -7848)), 100000000, 0, -7847)), 100000000, 0, -7846)), 100000000, 0, -7845)), 100000000, 0, -7844)), 100000000, 0, -7843)), 100000000, 0, -7842)), 100000000, 0, -7841)), 100000000, 0, -7840)), 100000000, 0, -7839)), 100000000, 0, -7838)), 100000000, 0, -7837)), 100000000, 0, -7836), (0)), 100000000, 0, -7835)), 0, 0, 0, 0, (("ast/ast.ml", 2346, 88317, 88317), ("ast/ast.ml", 3222, 118175, 118180), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 1572)), 1, 0); Tag5 (("fold", 7448), ([((("acc")), 100000000, 0, -6841)], Tag1 (((Tag4 ((Tag5 ("bool", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -7226), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7225), 0), 100000000, 0, -7224), 0), 100000000, 0, -7223), (Tag5 ("char", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -7214), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7213), 0), 100000000, 0, -7212), 0), 100000000, 0, -7211), (Tag5 ("int", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -7066), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7065), 0), 100000000, 0, -7064), 0), 100000000, 0, -7063), (Tag5 ("list", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -7044), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7050), 0), 100000000, 0, -7049), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -7044)], (0)), 100000000, 0, -7048), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7047), 0), 100000000, 0, -7046), 0), 100000000, 0, -7045), [(Tag9 (("a")), 100000000, 0, -7044)]), 100000000, 0, -7043), (Tag5 ("option", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -6952), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6958), 0), 100000000, 0, -6957), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -6952)], (0)), 100000000, 0, -6956), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6955), 0), 100000000, 0, -6954), 0), 100000000, 0, -6953), [(Tag9 (("a")), 100000000, 0, -6952)]), 100000000, 0, -6951), (Tag5 ("string", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6898), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6897), 0), 100000000, 0, -6896), 0), 100000000, 0, -6895), (Tag5 ("position", 1, (Tag10 ((Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -6930), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6929), 0), 100000000, 0, -6928), 0), 100000000, 0, -6927), (Tag5 ("location", 1, (Tag10 ((Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -7034), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7033), 0), 100000000, 0, -7032), 0), 100000000, 0, -7031), (Tag5 ("location_stack", 1, (Tag10 ((Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -7030), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7029), 0), 100000000, 0, -7028), 0), 100000000, 0, -7027), (Tag5 ("loc", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -7036), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7042), 0), 100000000, 0, -7041), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -7036)], (0)), 100000000, 0, -7040), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7039), 0), 100000000, 0, -7038), 0), 100000000, 0, -7037), [(Tag9 (("a")), 100000000, 0, -7036)]), 100000000, 0, -7035), (Tag5 ("longident", 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -7026), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7025), 0), 100000000, 0, -7024), 0), 100000000, 0, -7023), (Tag5 ("longident_loc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -7022), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7021), 0), 100000000, 0, -7020), 0), 100000000, 0, -7019), (Tag5 ("rec_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -6922), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6921), 0), 100000000, 0, -6920), 0), 100000000, 0, -6919), (Tag5 ("direction_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -7122), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7121), 0), 100000000, 0, -7120), 0), 100000000, 0, -7119), (Tag5 ("private_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -6926), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6925), 0), 100000000, 0, -6924), 0), 100000000, 0, -6923), (Tag5 ("mutable_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -6986), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6985), 0), 100000000, 0, -6984), 0), 100000000, 0, -6983), (Tag5 ("virtual_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -6846), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6845), 0), 100000000, 0, -6844), 0), 100000000, 0, -6843), (Tag5 ("override_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -6950), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6949), 0), 100000000, 0, -6948), 0), 100000000, 0, -6947), (Tag5 ("closed_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -7146), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7145), 0), 100000000, 0, -7144), 0), 100000000, 0, -7143), (Tag5 ("label", 1, (Tag10 ((Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -7062), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7061), 0), 100000000, 0, -7060), 0), 100000000, 0, -7059), (Tag5 ("arg_label", 1, (Tag10 ((Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -7242), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7241), 0), 100000000, 0, -7240), 0), 100000000, 0, -7239), (Tag5 ("variance", 1, (Tag10 ((Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -6850), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6849), 0), 100000000, 0, -6848), 0), 100000000, 0, -6847), (Tag5 ("injectivity", 1, (Tag10 ((Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -7070), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7069), 0), 100000000, 0, -7068), 0), 100000000, 0, -7067), (Tag5 ("constant", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -7142), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7141), 0), 100000000, 0, -7140), 0), 100000000, 0, -7139), (Tag5 ("attribute", 1, (Tag10 ((Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -7238), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7237), 0), 100000000, 0, -7236), 0), 100000000, 0, -7235), (Tag5 ("extension", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -7102), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7101), 0), 100000000, 0, -7100), 0), 100000000, 0, -7099), (Tag5 ("attributes", 1, (Tag10 ((Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -7234), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7233), 0), 100000000, 0, -7232), 0), 100000000, 0, -7231), (Tag5 ("payload", 1, (Tag10 ((Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -6934), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6933), 0), 100000000, 0, -6932), 0), 100000000, 0, -6931), (Tag5 ("core_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -7130), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7129), 0), 100000000, 0, -7128), 0), 100000000, 0, -7127), (Tag5 ("core_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -7126), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7125), 0), 100000000, 0, -7124), 0), 100000000, 0, -7123), (Tag5 ("package_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -6946), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6945), 0), 100000000, 0, -6944), 0), 100000000, 0, -6943), (Tag5 ("row_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -6918), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6917), 0), 100000000, 0, -6916), 0), 100000000, 0, -6915), (Tag5 ("row_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -6914), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6913), 0), 100000000, 0, -6912), 0), 100000000, 0, -6911), (Tag5 ("object_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -6982), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6981), 0), 100000000, 0, -6980), 0), 100000000, 0, -6979), (Tag5 ("object_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -6978), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6977), 0), 100000000, 0, -6976), 0), 100000000, 0, -6975), (Tag5 ("pattern", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -6942), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6941), 0), 100000000, 0, -6940), 0), 100000000, 0, -6939), (Tag5 ("pattern_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -6938), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6937), 0), 100000000, 0, -6936), 0), 100000000, 0, -6935), (Tag5 ("expression", 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -7110), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7109), 0), 100000000, 0, -7108), 0), 100000000, 0, -7107), (Tag5 ("expression_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -7106), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7105), 0), 100000000, 0, -7104), 0), 100000000, 0, -7103), (Tag5 ("case", 1, (Tag10 ((Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -7222), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7221), 0), 100000000, 0, -7220), 0), 100000000, 0, -7219), (Tag5 ("letop", 1, (Tag10 ((Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -7054), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7053), 0), 100000000, 0, -7052), 0), 100000000, 0, -7051), (Tag5 ("binding_op", 1, (Tag10 ((Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -7230), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7229), 0), 100000000, 0, -7228), 0), 100000000, 0, -7227), (Tag5 ("value_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -6854), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6853), 0), 100000000, 0, -6852), 0), 100000000, 0, -6851), (Tag5 ("type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -6874), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6873), 0), 100000000, 0, -6872), 0), 100000000, 0, -6871), (Tag5 ("type_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -6862), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6861), 0), 100000000, 0, -6860), 0), 100000000, 0, -6859), (Tag5 ("label_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -7058), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7057), 0), 100000000, 0, -7056), 0), 100000000, 0, -7055), (Tag5 ("constructor_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -7134), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7133), 0), 100000000, 0, -7132), 0), 100000000, 0, -7131), (Tag5 ("constructor_arguments", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -7138), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7137), 0), 100000000, 0, -7136), 0), 100000000, 0, -7135), (Tag5 ("type_extension", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -6866), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6865), 0), 100000000, 0, -6864), 0), 100000000, 0, -6863), (Tag5 ("extension_constructor", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -7098), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7097), 0), 100000000, 0, -7096), 0), 100000000, 0, -7095), (Tag5 ("type_exception", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -6870), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6869), 0), 100000000, 0, -6868), 0), 100000000, 0, -6867), (Tag5 ("extension_constructor_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -7094), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7093), 0), 100000000, 0, -7092), 0), 100000000, 0, -7091), (Tag5 ("class_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -7166), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7165), 0), 100000000, 0, -7164), 0), 100000000, 0, -7163), (Tag5 ("class_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -7158), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7157), 0), 100000000, 0, -7156), 0), 100000000, 0, -7155), (Tag5 ("class_signature", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -7174), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7173), 0), 100000000, 0, -7172), 0), 100000000, 0, -7171), (Tag5 ("class_type_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -7154), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7153), 0), 100000000, 0, -7152), 0), 100000000, 0, -7151), (Tag5 ("class_type_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -7150), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7149), 0), 100000000, 0, -7148), 0), 100000000, 0, -7147), (Tag5 ("class_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -7176), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7182), 0), 100000000, 0, -7181), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -7176)], (0)), 100000000, 0, -7180), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7179), 0), 100000000, 0, -7178), 0), 100000000, 0, -7177), [(Tag9 (("a")), 100000000, 0, -7176)]), 100000000, 0, -7175), (Tag5 ("class_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -7206), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7205), 0), 100000000, 0, -7204), 0), 100000000, 0, -7203), (Tag5 ("class_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -7162), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7161), 0), 100000000, 0, -7160), 0), 100000000, 0, -7159), (Tag5 ("class_expr", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -7202), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7201), 0), 100000000, 0, -7200), 0), 100000000, 0, -7199), (Tag5 ("class_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -7198), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7197), 0), 100000000, 0, -7196), 0), 100000000, 0, -7195), (Tag5 ("class_structure", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -7170), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7169), 0), 100000000, 0, -7168), 0), 100000000, 0, -7167), (Tag5 ("class_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -7194), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7193), 0), 100000000, 0, -7192), 0), 100000000, 0, -7191), (Tag5 ("class_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -7190), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7189), 0), 100000000, 0, -7188), 0), 100000000, 0, -7187), (Tag5 ("class_field_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -7186), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7185), 0), 100000000, 0, -7184), 0), 100000000, 0, -7183), (Tag5 ("class_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -7210), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7209), 0), 100000000, 0, -7208), 0), 100000000, 0, -7207), (Tag5 ("module_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -6998), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6997), 0), 100000000, 0, -6996), 0), 100000000, 0, -6995), (Tag5 ("module_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -6990), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6989), 0), 100000000, 0, -6988), 0), 100000000, 0, -6987), (Tag5 ("functor_parameter", 1, (Tag10 ((Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -7090), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7089), 0), 100000000, 0, -7088), 0), 100000000, 0, -7087), (Tag5 ("signature", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -6910), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6909), 0), 100000000, 0, -6908), 0), 100000000, 0, -6907), (Tag5 ("signature_item", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -6906), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6905), 0), 100000000, 0, -6904), 0), 100000000, 0, -6903), (Tag5 ("signature_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -6902), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6901), 0), 100000000, 0, -6900), 0), 100000000, 0, -6899), (Tag5 ("module_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -7014), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7013), 0), 100000000, 0, -7012), 0), 100000000, 0, -7011), (Tag5 ("module_substitution", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -7002), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7001), 0), 100000000, 0, -7000), 0), 100000000, 0, -6999), (Tag5 ("module_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -6994), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6993), 0), 100000000, 0, -6992), 0), 100000000, 0, -6991), (Tag5 ("open_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -6960), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6966), 0), 100000000, 0, -6965), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -6960)], (0)), 100000000, 0, -6964), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6963), 0), 100000000, 0, -6962), 0), 100000000, 0, -6961), [(Tag9 (("a")), 100000000, 0, -6960)]), 100000000, 0, -6959), (Tag5 ("open_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -6970), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6969), 0), 100000000, 0, -6968), 0), 100000000, 0, -6967), (Tag5 ("open_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -6974), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6973), 0), 100000000, 0, -6972), 0), 100000000, 0, -6971), (Tag5 ("include_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -7072), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7078), 0), 100000000, 0, -7077), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -7072)], (0)), 100000000, 0, -7076), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7075), 0), 100000000, 0, -7074), 0), 100000000, 0, -7073), [(Tag9 (("a")), 100000000, 0, -7072)]), 100000000, 0, -7071), (Tag5 ("include_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -7082), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7081), 0), 100000000, 0, -7080), 0), 100000000, 0, -7079), (Tag5 ("include_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -7086), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7085), 0), 100000000, 0, -7084), 0), 100000000, 0, -7083), (Tag5 ("with_constraint", 1, (Tag10 ((Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -6842), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6840), 0), 100000000, 0, -6839), 0), 100000000, 0, -6838), (Tag5 ("module_expr", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -7010), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7009), 0), 100000000, 0, -7008), 0), 100000000, 0, -7007), (Tag5 ("module_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -7006), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7005), 0), 100000000, 0, -7004), 0), 100000000, 0, -7003), (Tag5 ("structure", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -6894), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6893), 0), 100000000, 0, -6892), 0), 100000000, 0, -6891), (Tag5 ("structure_item", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -6890), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6889), 0), 100000000, 0, -6888), 0), 100000000, 0, -6887), (Tag5 ("structure_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -6886), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6885), 0), 100000000, 0, -6884), 0), 100000000, 0, -6883), (Tag5 ("value_binding", 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -6858), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6857), 0), 100000000, 0, -6856), 0), 100000000, 0, -6855), (Tag5 ("module_binding", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -7018), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7017), 0), 100000000, 0, -7016), 0), 100000000, 0, -7015), (Tag5 ("toplevel_phrase", 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -6878), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6877), 0), 100000000, 0, -6876), 0), 100000000, 0, -6875), (Tag5 ("toplevel_directive", 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -6882), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6881), 0), 100000000, 0, -6880), 0), 100000000, 0, -6879), (Tag5 ("directive_argument", 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -7118), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7117), 0), 100000000, 0, -7116), 0), 100000000, 0, -7115), (Tag5 ("directive_argument_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -7114), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7113), 0), 100000000, 0, -7112), 0), 100000000, 0, -7111), (Tag5 ("cases", 1, (Tag10 ((Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -7218), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7217), 0), 100000000, 0, -7216), 0), 100000000, 0, -7215), ((0), 100000000, 0, -7738)), 100000000, 0, -7834)), 100000000, 0, -7833)), 100000000, 0, -7832)), 100000000, 0, -7831)), 100000000, 0, -7830)), 100000000, 0, -7829)), 100000000, 0, -7828)), 100000000, 0, -7827)), 100000000, 0, -7826)), 100000000, 0, -7825)), 100000000, 0, -7824)), 100000000, 0, -7823)), 100000000, 0, -7822)), 100000000, 0, -7821)), 100000000, 0, -7820)), 100000000, 0, -7819)), 100000000, 0, -7818)), 100000000, 0, -7817)), 100000000, 0, -7816)), 100000000, 0, -7815)), 100000000, 0, -7814)), 100000000, 0, -7813)), 100000000, 0, -7812)), 100000000, 0, -7811)), 100000000, 0, -7810)), 100000000, 0, -7809)), 100000000, 0, -7808)), 100000000, 0, -7807)), 100000000, 0, -7806)), 100000000, 0, -7805)), 100000000, 0, -7804)), 100000000, 0, -7803)), 100000000, 0, -7802)), 100000000, 0, -7801)), 100000000, 0, -7800)), 100000000, 0, -7799)), 100000000, 0, -7798)), 100000000, 0, -7797)), 100000000, 0, -7796)), 100000000, 0, -7795)), 100000000, 0, -7794)), 100000000, 0, -7793)), 100000000, 0, -7792)), 100000000, 0, -7791)), 100000000, 0, -7790)), 100000000, 0, -7789)), 100000000, 0, -7788)), 100000000, 0, -7787)), 100000000, 0, -7786)), 100000000, 0, -7785)), 100000000, 0, -7784)), 100000000, 0, -7783)), 100000000, 0, -7782)), 100000000, 0, -7781)), 100000000, 0, -7780)), 100000000, 0, -7779)), 100000000, 0, -7778)), 100000000, 0, -7777)), 100000000, 0, -7776)), 100000000, 0, -7775)), 100000000, 0, -7774)), 100000000, 0, -7773)), 100000000, 0, -7772)), 100000000, 0, -7771)), 100000000, 0, -7770)), 100000000, 0, -7769)), 100000000, 0, -7768)), 100000000, 0, -7767)), 100000000, 0, -7766)), 100000000, 0, -7765)), 100000000, 0, -7764)), 100000000, 0, -7763)), 100000000, 0, -7762)), 100000000, 0, -7761)), 100000000, 0, -7760)), 100000000, 0, -7759)), 100000000, 0, -7758)), 100000000, 0, -7757)), 100000000, 0, -7756)), 100000000, 0, -7755)), 100000000, 0, -7754)), 100000000, 0, -7753)), 100000000, 0, -7752)), 100000000, 0, -7751)), 100000000, 0, -7750)), 100000000, 0, -7749)), 100000000, 0, -7748)), 100000000, 0, -7747)), 100000000, 0, -7746)), 100000000, 0, -7745)), 100000000, 0, -7744)), 100000000, 0, -7743)), 100000000, 0, -7742)), 100000000, 0, -7741)), 100000000, 0, -7740), (([(("fold", 7450)); ((0), 100000000, 0, -7738); ((("acc")), 100000000, 0, -6841)]))), 100000000, 0, -7739), ((0), 100000000, 0, -7738), 0, (((((0, "arg_label", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -7343), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7342), 0), 100000000, 0, -7341), 0), 100000000, 0, -7340)), 0, 1), "attribute", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -7347), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7346), 0), 100000000, 0, -7345), 0), 100000000, 0, -7344)), ((0, "attributes", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -7351), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7350), 0), 100000000, 0, -7349), 0), 100000000, 0, -7348)), (0, "binding_op", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -7355), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7354), 0), 100000000, 0, -7353), 0), 100000000, 0, -7352)), 0, 1), 2), "bool", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -7359), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7358), 0), 100000000, 0, -7357), 0), 100000000, 0, -7356)), (0, "case", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -7363), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7362), 0), 100000000, 0, -7361), 0), 100000000, 0, -7360)), (0, "cases", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -7367), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7366), 0), 100000000, 0, -7365), 0), 100000000, 0, -7364)), 0, 1), 2), 3), 4), "char", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -7371), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7370), 0), 100000000, 0, -7369), 0), 100000000, 0, -7368)), ((((((0, "class_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -7375), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7374), 0), 100000000, 0, -7373), 0), 100000000, 0, -7372)), 0, 1), "class_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -7379), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7378), 0), 100000000, 0, -7377), 0), 100000000, 0, -7376)), 0, 2), "class_expr", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -7383), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7382), 0), 100000000, 0, -7381), 0), 100000000, 0, -7380)), (0, "class_expr_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -7387), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7386), 0), 100000000, 0, -7385), 0), 100000000, 0, -7384)), 0, 1), 3), "class_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -7391), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7390), 0), 100000000, 0, -7389), 0), 100000000, 0, -7388)), ((0, "class_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -7395), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7394), 0), 100000000, 0, -7393), 0), 100000000, 0, -7392)), (0, "class_field_kind", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -7399), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7398), 0), 100000000, 0, -7397), 0), 100000000, 0, -7396)), 0, 1), 2), "class_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -7176), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7406), 0), 100000000, 0, -7405), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -7176)], (0)), 100000000, 0, -7404), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7403), 0), 100000000, 0, -7402), 0), 100000000, 0, -7401), [(Tag9 (("a")), 100000000, 0, -7176)]), 100000000, 0, -7400)), 0, 3), 4), "class_signature", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -7410), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7409), 0), 100000000, 0, -7408), 0), 100000000, 0, -7407)), ((0, "class_structure", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -7414), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7413), 0), 100000000, 0, -7412), 0), 100000000, 0, -7411)), 0, 1), "class_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -7418), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7417), 0), 100000000, 0, -7416), 0), 100000000, 0, -7415)), (0, "class_type_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -7422), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7421), 0), 100000000, 0, -7420), 0), 100000000, 0, -7419)), 0, 1), 2), 5), "class_type_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -7426), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7425), 0), 100000000, 0, -7424), 0), 100000000, 0, -7423)), (((0, "class_type_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -7430), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7429), 0), 100000000, 0, -7428), 0), 100000000, 0, -7427)), (0, "class_type_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -7434), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7433), 0), 100000000, 0, -7432), 0), 100000000, 0, -7431)), 0, 1), 2), "closed_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -7438), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7437), 0), 100000000, 0, -7436), 0), 100000000, 0, -7435)), 0, 3), "constant", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -7442), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7441), 0), 100000000, 0, -7440), 0), 100000000, 0, -7439)), (((0, "constructor_arguments", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -7446), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7445), 0), 100000000, 0, -7444), 0), 100000000, 0, -7443)), 0, 1), "constructor_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -7450), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7449), 0), 100000000, 0, -7448), 0), 100000000, 0, -7447)), 0, 2), "core_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -7454), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7453), 0), 100000000, 0, -7452), 0), 100000000, 0, -7451)), (0, "core_type_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -7458), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7457), 0), 100000000, 0, -7456), 0), 100000000, 0, -7455)), 0, 1), 3), 4), 6), 7), "direction_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -7462), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7461), 0), 100000000, 0, -7460), 0), 100000000, 0, -7459)), ((((0, "directive_argument", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -7466), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7465), 0), 100000000, 0, -7464), 0), 100000000, 0, -7463)), (0, "directive_argument_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -7470), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7469), 0), 100000000, 0, -7468), 0), 100000000, 0, -7467)), 0, 1), 2), "expression", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -7474), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7473), 0), 100000000, 0, -7472), 0), 100000000, 0, -7471)), (0, "expression_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -7478), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7477), 0), 100000000, 0, -7476), 0), 100000000, 0, -7475)), 0, 1), 3), "extension", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -7482), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7481), 0), 100000000, 0, -7480), 0), 100000000, 0, -7479)), (((0, "extension_constructor", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -7486), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7485), 0), 100000000, 0, -7484), 0), 100000000, 0, -7483)), 0, 1), "extension_constructor_kind", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -7490), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7489), 0), 100000000, 0, -7488), 0), 100000000, 0, -7487)), 0, 2), "functor_parameter", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -7494), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7493), 0), 100000000, 0, -7492), 0), 100000000, 0, -7491)), (((0, "include_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -7498), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7497), 0), 100000000, 0, -7496), 0), 100000000, 0, -7495)), 0, 1), "include_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -7502), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7501), 0), 100000000, 0, -7500), 0), 100000000, 0, -7499)), 0, 2), "include_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -7072), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7509), 0), 100000000, 0, -7508), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -7072)], (0)), 100000000, 0, -7507), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7506), 0), 100000000, 0, -7505), 0), 100000000, 0, -7504), [(Tag9 (("a")), 100000000, 0, -7072)]), 100000000, 0, -7503)), (0, "injectivity", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -7513), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7512), 0), 100000000, 0, -7511), 0), 100000000, 0, -7510)), 0, 1), 3), 4), 5), "int", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -7517), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7516), 0), 100000000, 0, -7515), 0), 100000000, 0, -7514)), ((0, "label", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -7521), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7520), 0), 100000000, 0, -7519), 0), 100000000, 0, -7518)), ((0, "label_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -7525), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7524), 0), 100000000, 0, -7523), 0), 100000000, 0, -7522)), 0, 1), "letop", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -7529), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7528), 0), 100000000, 0, -7527), 0), 100000000, 0, -7526)), 0, 2), 3), "list", (0, 0, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -7044), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7536), 0), 100000000, 0, -7535), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -7044)], (0)), 100000000, 0, -7534), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7533), 0), 100000000, 0, -7532), 0), 100000000, 0, -7531), [(Tag9 (("a")), 100000000, 0, -7044)]), 100000000, 0, -7530)), (0, "loc", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -7036), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7543), 0), 100000000, 0, -7542), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -7036)], (0)), 100000000, 0, -7541), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7540), 0), 100000000, 0, -7539), 0), 100000000, 0, -7538), [(Tag9 (("a")), 100000000, 0, -7036)]), 100000000, 0, -7537)), 0, 1), 4), 6), 8), "location", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -7547), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7546), 0), 100000000, 0, -7545), 0), 100000000, 0, -7544)), (((((0, "location_stack", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -7551), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7550), 0), 100000000, 0, -7549), 0), 100000000, 0, -7548)), 0, 1), "longident", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -7555), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7554), 0), 100000000, 0, -7553), 0), 100000000, 0, -7552)), 0, 2), "longident_loc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -7559), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7558), 0), 100000000, 0, -7557), 0), 100000000, 0, -7556)), ((((0, "module_binding", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -7563), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7562), 0), 100000000, 0, -7561), 0), 100000000, 0, -7560)), 0, 1), "module_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -7567), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7566), 0), 100000000, 0, -7565), 0), 100000000, 0, -7564)), 0, 2), "module_expr", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -7571), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7570), 0), 100000000, 0, -7569), 0), 100000000, 0, -7568)), ((0, "module_expr_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -7575), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7574), 0), 100000000, 0, -7573), 0), 100000000, 0, -7572)), 0, 1), "module_substitution", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -7579), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7578), 0), 100000000, 0, -7577), 0), 100000000, 0, -7576)), 0, 2), 3), "module_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -7583), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7582), 0), 100000000, 0, -7581), 0), 100000000, 0, -7580)), ((0, "module_type_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -7587), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7586), 0), 100000000, 0, -7585), 0), 100000000, 0, -7584)), 0, 1), "module_type_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -7591), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7590), 0), 100000000, 0, -7589), 0), 100000000, 0, -7588)), 0, 2), 4), 5), "mutable_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -7595), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7594), 0), 100000000, 0, -7593), 0), 100000000, 0, -7592)), ((0, "object_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -7599), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7598), 0), 100000000, 0, -7597), 0), 100000000, 0, -7596)), 0, 1), "object_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -7603), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7602), 0), 100000000, 0, -7601), 0), 100000000, 0, -7600)), (((0, "open_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -7607), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7606), 0), 100000000, 0, -7605), 0), 100000000, 0, -7604)), 0, 1), "open_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -7611), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7610), 0), 100000000, 0, -7609), 0), 100000000, 0, -7608)), 0, 2), "open_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -6960), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7618), 0), 100000000, 0, -7617), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -6960)], (0)), 100000000, 0, -7616), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7615), 0), 100000000, 0, -7614), 0), 100000000, 0, -7613), [(Tag9 (("a")), 100000000, 0, -6960)]), 100000000, 0, -7612)), 0, 3), 4), 6), "option", (0, 0, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -6952), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7625), 0), 100000000, 0, -7624), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -6952)], (0)), 100000000, 0, -7623), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7622), 0), 100000000, 0, -7621), 0), 100000000, 0, -7620), [(Tag9 (("a")), 100000000, 0, -6952)]), 100000000, 0, -7619)), (((((0, "override_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -7629), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7628), 0), 100000000, 0, -7627), 0), 100000000, 0, -7626)), 0, 1), "package_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -7633), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7632), 0), 100000000, 0, -7631), 0), 100000000, 0, -7630)), (0, "pattern", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -7637), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7636), 0), 100000000, 0, -7635), 0), 100000000, 0, -7634)), (0, "pattern_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -7641), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7640), 0), 100000000, 0, -7639), 0), 100000000, 0, -7638)), 0, 1), 2), 3), "payload", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -7645), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7644), 0), 100000000, 0, -7643), 0), 100000000, 0, -7642)), (0, "position", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -7649), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7648), 0), 100000000, 0, -7647), 0), 100000000, 0, -7646)), (0, "private_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -7653), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7652), 0), 100000000, 0, -7651), 0), 100000000, 0, -7650)), 0, 1), 2), 4), "rec_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -7657), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7656), 0), 100000000, 0, -7655), 0), 100000000, 0, -7654)), ((0, "row_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -7661), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7660), 0), 100000000, 0, -7659), 0), 100000000, 0, -7658)), 0, 1), "row_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -7665), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7664), 0), 100000000, 0, -7663), 0), 100000000, 0, -7662)), (0, "signature", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -7669), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7668), 0), 100000000, 0, -7667), 0), 100000000, 0, -7666)), (0, "signature_item", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -7673), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7672), 0), 100000000, 0, -7671), 0), 100000000, 0, -7670)), (0, "signature_item_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -7677), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7676), 0), 100000000, 0, -7675), 0), 100000000, 0, -7674)), 0, 1), 2), 3), 4), 5), "string", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -7681), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7680), 0), 100000000, 0, -7679), 0), 100000000, 0, -7678)), ((((0, "structure", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -7685), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7684), 0), 100000000, 0, -7683), 0), 100000000, 0, -7682)), 0, 1), "structure_item", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -7689), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7688), 0), 100000000, 0, -7687), 0), 100000000, 0, -7686)), (0, "structure_item_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -7693), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7692), 0), 100000000, 0, -7691), 0), 100000000, 0, -7690)), ((0, "toplevel_directive", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -7697), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7696), 0), 100000000, 0, -7695), 0), 100000000, 0, -7694)), 0, 1), "toplevel_phrase", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -7701), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7700), 0), 100000000, 0, -7699), 0), 100000000, 0, -7698)), 0, 2), 3), 4), "type_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -7705), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7704), 0), 100000000, 0, -7703), 0), 100000000, 0, -7702)), ((0, "type_exception", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -7709), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7708), 0), 100000000, 0, -7707), 0), 100000000, 0, -7706)), 0, 1), "type_extension", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -7713), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7712), 0), 100000000, 0, -7711), 0), 100000000, 0, -7710)), 0, 2), 5), "type_kind", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -7717), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7716), 0), 100000000, 0, -7715), 0), 100000000, 0, -7714)), (((0, "value_binding", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -7721), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7720), 0), 100000000, 0, -7719), 0), 100000000, 0, -7718)), 0, 1), "value_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -7725), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7724), 0), 100000000, 0, -7723), 0), 100000000, 0, -7722)), 0, 2), "variance", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -7729), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7728), 0), 100000000, 0, -7727), 0), 100000000, 0, -7726)), (0, "virtual_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -7733), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7732), 0), 100000000, 0, -7731), 0), 100000000, 0, -7730)), (0, "with_constraint", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -7737), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7736), 0), 100000000, 0, -7735), 0), 100000000, 0, -7734)), 0, 1), 2), 3), 6), 7), 8), 9))), (("fold", 7450)), 0, [63], (("ast/ast.ml", 3224, 118182, 118182), ("ast/ast.ml", 4277, 158258, 158263), 0), 0, Tag1 ("Ppxlib_ast__Ast", 2244)), 1, 0); Tag6 (("fold", 7449), ([((("acc")), 100000000, 0, -6841)], Tag1 (((Tag4 ((Tag5 ("bool", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -7226), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7225), 0), 100000000, 0, -7224), 0), 100000000, 0, -7223), (Tag5 ("char", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -7214), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7213), 0), 100000000, 0, -7212), 0), 100000000, 0, -7211), (Tag5 ("int", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -7066), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7065), 0), 100000000, 0, -7064), 0), 100000000, 0, -7063), (Tag5 ("list", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -7044), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7050), 0), 100000000, 0, -7049), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -7044)], (0)), 100000000, 0, -7048), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7047), 0), 100000000, 0, -7046), 0), 100000000, 0, -7045), [(Tag9 (("a")), 100000000, 0, -7044)]), 100000000, 0, -7043), (Tag5 ("option", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -6952), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6958), 0), 100000000, 0, -6957), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -6952)], (0)), 100000000, 0, -6956), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6955), 0), 100000000, 0, -6954), 0), 100000000, 0, -6953), [(Tag9 (("a")), 100000000, 0, -6952)]), 100000000, 0, -6951), (Tag5 ("string", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6898), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6897), 0), 100000000, 0, -6896), 0), 100000000, 0, -6895), (Tag5 ("position", 1, (Tag10 ((Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -6930), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6929), 0), 100000000, 0, -6928), 0), 100000000, 0, -6927), (Tag5 ("location", 1, (Tag10 ((Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -7034), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7033), 0), 100000000, 0, -7032), 0), 100000000, 0, -7031), (Tag5 ("location_stack", 1, (Tag10 ((Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -7030), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7029), 0), 100000000, 0, -7028), 0), 100000000, 0, -7027), (Tag5 ("loc", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -7036), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7042), 0), 100000000, 0, -7041), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -7036)], (0)), 100000000, 0, -7040), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7039), 0), 100000000, 0, -7038), 0), 100000000, 0, -7037), [(Tag9 (("a")), 100000000, 0, -7036)]), 100000000, 0, -7035), (Tag5 ("longident", 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -7026), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7025), 0), 100000000, 0, -7024), 0), 100000000, 0, -7023), (Tag5 ("longident_loc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -7022), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7021), 0), 100000000, 0, -7020), 0), 100000000, 0, -7019), (Tag5 ("rec_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -6922), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6921), 0), 100000000, 0, -6920), 0), 100000000, 0, -6919), (Tag5 ("direction_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -7122), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7121), 0), 100000000, 0, -7120), 0), 100000000, 0, -7119), (Tag5 ("private_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -6926), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6925), 0), 100000000, 0, -6924), 0), 100000000, 0, -6923), (Tag5 ("mutable_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -6986), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6985), 0), 100000000, 0, -6984), 0), 100000000, 0, -6983), (Tag5 ("virtual_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -6846), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6845), 0), 100000000, 0, -6844), 0), 100000000, 0, -6843), (Tag5 ("override_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -6950), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6949), 0), 100000000, 0, -6948), 0), 100000000, 0, -6947), (Tag5 ("closed_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -7146), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7145), 0), 100000000, 0, -7144), 0), 100000000, 0, -7143), (Tag5 ("label", 1, (Tag10 ((Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -7062), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7061), 0), 100000000, 0, -7060), 0), 100000000, 0, -7059), (Tag5 ("arg_label", 1, (Tag10 ((Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -7242), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7241), 0), 100000000, 0, -7240), 0), 100000000, 0, -7239), (Tag5 ("variance", 1, (Tag10 ((Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -6850), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6849), 0), 100000000, 0, -6848), 0), 100000000, 0, -6847), (Tag5 ("injectivity", 1, (Tag10 ((Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -7070), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7069), 0), 100000000, 0, -7068), 0), 100000000, 0, -7067), (Tag5 ("constant", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -7142), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7141), 0), 100000000, 0, -7140), 0), 100000000, 0, -7139), (Tag5 ("attribute", 1, (Tag10 ((Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -7238), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7237), 0), 100000000, 0, -7236), 0), 100000000, 0, -7235), (Tag5 ("extension", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -7102), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7101), 0), 100000000, 0, -7100), 0), 100000000, 0, -7099), (Tag5 ("attributes", 1, (Tag10 ((Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -7234), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7233), 0), 100000000, 0, -7232), 0), 100000000, 0, -7231), (Tag5 ("payload", 1, (Tag10 ((Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -6934), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6933), 0), 100000000, 0, -6932), 0), 100000000, 0, -6931), (Tag5 ("core_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -7130), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7129), 0), 100000000, 0, -7128), 0), 100000000, 0, -7127), (Tag5 ("core_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -7126), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7125), 0), 100000000, 0, -7124), 0), 100000000, 0, -7123), (Tag5 ("package_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -6946), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6945), 0), 100000000, 0, -6944), 0), 100000000, 0, -6943), (Tag5 ("row_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -6918), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6917), 0), 100000000, 0, -6916), 0), 100000000, 0, -6915), (Tag5 ("row_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -6914), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6913), 0), 100000000, 0, -6912), 0), 100000000, 0, -6911), (Tag5 ("object_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -6982), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6981), 0), 100000000, 0, -6980), 0), 100000000, 0, -6979), (Tag5 ("object_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -6978), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6977), 0), 100000000, 0, -6976), 0), 100000000, 0, -6975), (Tag5 ("pattern", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -6942), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6941), 0), 100000000, 0, -6940), 0), 100000000, 0, -6939), (Tag5 ("pattern_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -6938), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6937), 0), 100000000, 0, -6936), 0), 100000000, 0, -6935), (Tag5 ("expression", 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -7110), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7109), 0), 100000000, 0, -7108), 0), 100000000, 0, -7107), (Tag5 ("expression_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -7106), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7105), 0), 100000000, 0, -7104), 0), 100000000, 0, -7103), (Tag5 ("case", 1, (Tag10 ((Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -7222), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7221), 0), 100000000, 0, -7220), 0), 100000000, 0, -7219), (Tag5 ("letop", 1, (Tag10 ((Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -7054), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7053), 0), 100000000, 0, -7052), 0), 100000000, 0, -7051), (Tag5 ("binding_op", 1, (Tag10 ((Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -7230), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7229), 0), 100000000, 0, -7228), 0), 100000000, 0, -7227), (Tag5 ("value_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -6854), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6853), 0), 100000000, 0, -6852), 0), 100000000, 0, -6851), (Tag5 ("type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -6874), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6873), 0), 100000000, 0, -6872), 0), 100000000, 0, -6871), (Tag5 ("type_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -6862), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6861), 0), 100000000, 0, -6860), 0), 100000000, 0, -6859), (Tag5 ("label_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -7058), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7057), 0), 100000000, 0, -7056), 0), 100000000, 0, -7055), (Tag5 ("constructor_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -7134), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7133), 0), 100000000, 0, -7132), 0), 100000000, 0, -7131), (Tag5 ("constructor_arguments", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -7138), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7137), 0), 100000000, 0, -7136), 0), 100000000, 0, -7135), (Tag5 ("type_extension", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -6866), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6865), 0), 100000000, 0, -6864), 0), 100000000, 0, -6863), (Tag5 ("extension_constructor", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -7098), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7097), 0), 100000000, 0, -7096), 0), 100000000, 0, -7095), (Tag5 ("type_exception", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -6870), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6869), 0), 100000000, 0, -6868), 0), 100000000, 0, -6867), (Tag5 ("extension_constructor_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -7094), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7093), 0), 100000000, 0, -7092), 0), 100000000, 0, -7091), (Tag5 ("class_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -7166), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7165), 0), 100000000, 0, -7164), 0), 100000000, 0, -7163), (Tag5 ("class_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -7158), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7157), 0), 100000000, 0, -7156), 0), 100000000, 0, -7155), (Tag5 ("class_signature", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -7174), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7173), 0), 100000000, 0, -7172), 0), 100000000, 0, -7171), (Tag5 ("class_type_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -7154), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7153), 0), 100000000, 0, -7152), 0), 100000000, 0, -7151), (Tag5 ("class_type_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -7150), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7149), 0), 100000000, 0, -7148), 0), 100000000, 0, -7147), (Tag5 ("class_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -7176), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7182), 0), 100000000, 0, -7181), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -7176)], (0)), 100000000, 0, -7180), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7179), 0), 100000000, 0, -7178), 0), 100000000, 0, -7177), [(Tag9 (("a")), 100000000, 0, -7176)]), 100000000, 0, -7175), (Tag5 ("class_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -7206), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7205), 0), 100000000, 0, -7204), 0), 100000000, 0, -7203), (Tag5 ("class_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -7162), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7161), 0), 100000000, 0, -7160), 0), 100000000, 0, -7159), (Tag5 ("class_expr", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -7202), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7201), 0), 100000000, 0, -7200), 0), 100000000, 0, -7199), (Tag5 ("class_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -7198), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7197), 0), 100000000, 0, -7196), 0), 100000000, 0, -7195), (Tag5 ("class_structure", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -7170), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7169), 0), 100000000, 0, -7168), 0), 100000000, 0, -7167), (Tag5 ("class_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -7194), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7193), 0), 100000000, 0, -7192), 0), 100000000, 0, -7191), (Tag5 ("class_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -7190), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7189), 0), 100000000, 0, -7188), 0), 100000000, 0, -7187), (Tag5 ("class_field_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -7186), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7185), 0), 100000000, 0, -7184), 0), 100000000, 0, -7183), (Tag5 ("class_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -7210), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7209), 0), 100000000, 0, -7208), 0), 100000000, 0, -7207), (Tag5 ("module_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -6998), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6997), 0), 100000000, 0, -6996), 0), 100000000, 0, -6995), (Tag5 ("module_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -6990), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6989), 0), 100000000, 0, -6988), 0), 100000000, 0, -6987), (Tag5 ("functor_parameter", 1, (Tag10 ((Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -7090), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7089), 0), 100000000, 0, -7088), 0), 100000000, 0, -7087), (Tag5 ("signature", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -6910), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6909), 0), 100000000, 0, -6908), 0), 100000000, 0, -6907), (Tag5 ("signature_item", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -6906), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6905), 0), 100000000, 0, -6904), 0), 100000000, 0, -6903), (Tag5 ("signature_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -6902), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6901), 0), 100000000, 0, -6900), 0), 100000000, 0, -6899), (Tag5 ("module_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -7014), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7013), 0), 100000000, 0, -7012), 0), 100000000, 0, -7011), (Tag5 ("module_substitution", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -7002), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7001), 0), 100000000, 0, -7000), 0), 100000000, 0, -6999), (Tag5 ("module_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -6994), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6993), 0), 100000000, 0, -6992), 0), 100000000, 0, -6991), (Tag5 ("open_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -6960), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6966), 0), 100000000, 0, -6965), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -6960)], (0)), 100000000, 0, -6964), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6963), 0), 100000000, 0, -6962), 0), 100000000, 0, -6961), [(Tag9 (("a")), 100000000, 0, -6960)]), 100000000, 0, -6959), (Tag5 ("open_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -6970), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6969), 0), 100000000, 0, -6968), 0), 100000000, 0, -6967), (Tag5 ("open_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -6974), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6973), 0), 100000000, 0, -6972), 0), 100000000, 0, -6971), (Tag5 ("include_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -7072), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7078), 0), 100000000, 0, -7077), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -7072)], (0)), 100000000, 0, -7076), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7075), 0), 100000000, 0, -7074), 0), 100000000, 0, -7073), [(Tag9 (("a")), 100000000, 0, -7072)]), 100000000, 0, -7071), (Tag5 ("include_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -7082), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7081), 0), 100000000, 0, -7080), 0), 100000000, 0, -7079), (Tag5 ("include_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -7086), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7085), 0), 100000000, 0, -7084), 0), 100000000, 0, -7083), (Tag5 ("with_constraint", 1, (Tag10 ((Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -6842), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6840), 0), 100000000, 0, -6839), 0), 100000000, 0, -6838), (Tag5 ("module_expr", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -7010), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7009), 0), 100000000, 0, -7008), 0), 100000000, 0, -7007), (Tag5 ("module_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -7006), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7005), 0), 100000000, 0, -7004), 0), 100000000, 0, -7003), (Tag5 ("structure", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -6894), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6893), 0), 100000000, 0, -6892), 0), 100000000, 0, -6891), (Tag5 ("structure_item", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -6890), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6889), 0), 100000000, 0, -6888), 0), 100000000, 0, -6887), (Tag5 ("structure_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -6886), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6885), 0), 100000000, 0, -6884), 0), 100000000, 0, -6883), (Tag5 ("value_binding", 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -6858), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6857), 0), 100000000, 0, -6856), 0), 100000000, 0, -6855), (Tag5 ("module_binding", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -7018), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7017), 0), 100000000, 0, -7016), 0), 100000000, 0, -7015), (Tag5 ("toplevel_phrase", 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -6878), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6877), 0), 100000000, 0, -6876), 0), 100000000, 0, -6875), (Tag5 ("toplevel_directive", 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -6882), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6881), 0), 100000000, 0, -6880), 0), 100000000, 0, -6879), (Tag5 ("directive_argument", 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -7118), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7117), 0), 100000000, 0, -7116), 0), 100000000, 0, -7115), (Tag5 ("directive_argument_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -7114), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7113), 0), 100000000, 0, -7112), 0), 100000000, 0, -7111), (Tag5 ("cases", 1, (Tag10 ((Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -7218), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7217), 0), 100000000, 0, -7216), 0), 100000000, 0, -7215), ((0), 100000000, 0, -7738)), 100000000, 0, -7834)), 100000000, 0, -7833)), 100000000, 0, -7832)), 100000000, 0, -7831)), 100000000, 0, -7830)), 100000000, 0, -7829)), 100000000, 0, -7828)), 100000000, 0, -7827)), 100000000, 0, -7826)), 100000000, 0, -7825)), 100000000, 0, -7824)), 100000000, 0, -7823)), 100000000, 0, -7822)), 100000000, 0, -7821)), 100000000, 0, -7820)), 100000000, 0, -7819)), 100000000, 0, -7818)), 100000000, 0, -7817)), 100000000, 0, -7816)), 100000000, 0, -7815)), 100000000, 0, -7814)), 100000000, 0, -7813)), 100000000, 0, -7812)), 100000000, 0, -7811)), 100000000, 0, -7810)), 100000000, 0, -7809)), 100000000, 0, -7808)), 100000000, 0, -7807)), 100000000, 0, -7806)), 100000000, 0, -7805)), 100000000, 0, -7804)), 100000000, 0, -7803)), 100000000, 0, -7802)), 100000000, 0, -7801)), 100000000, 0, -7800)), 100000000, 0, -7799)), 100000000, 0, -7798)), 100000000, 0, -7797)), 100000000, 0, -7796)), 100000000, 0, -7795)), 100000000, 0, -7794)), 100000000, 0, -7793)), 100000000, 0, -7792)), 100000000, 0, -7791)), 100000000, 0, -7790)), 100000000, 0, -7789)), 100000000, 0, -7788)), 100000000, 0, -7787)), 100000000, 0, -7786)), 100000000, 0, -7785)), 100000000, 0, -7784)), 100000000, 0, -7783)), 100000000, 0, -7782)), 100000000, 0, -7781)), 100000000, 0, -7780)), 100000000, 0, -7779)), 100000000, 0, -7778)), 100000000, 0, -7777)), 100000000, 0, -7776)), 100000000, 0, -7775)), 100000000, 0, -7774)), 100000000, 0, -7773)), 100000000, 0, -7772)), 100000000, 0, -7771)), 100000000, 0, -7770)), 100000000, 0, -7769)), 100000000, 0, -7768)), 100000000, 0, -7767)), 100000000, 0, -7766)), 100000000, 0, -7765)), 100000000, 0, -7764)), 100000000, 0, -7763)), 100000000, 0, -7762)), 100000000, 0, -7761)), 100000000, 0, -7760)), 100000000, 0, -7759)), 100000000, 0, -7758)), 100000000, 0, -7757)), 100000000, 0, -7756)), 100000000, 0, -7755)), 100000000, 0, -7754)), 100000000, 0, -7753)), 100000000, 0, -7752)), 100000000, 0, -7751)), 100000000, 0, -7750)), 100000000, 0, -7749)), 100000000, 0, -7748)), 100000000, 0, -7747)), 100000000, 0, -7746)), 100000000, 0, -7745)), 100000000, 0, -7744)), 100000000, 0, -7743)), 100000000, 0, -7742)), 100000000, 0, -7741)), 100000000, 0, -7740), (([(("fold", 7450)); ((0), 100000000, 0, -7738); ((("acc")), 100000000, 0, -6841)]))), 100000000, 0, -7739), ((0), 100000000, 0, -7738), 0, (((((0, "arg_label", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -7343), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7342), 0), 100000000, 0, -7341), 0), 100000000, 0, -7340)), 0, 1), "attribute", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -7347), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7346), 0), 100000000, 0, -7345), 0), 100000000, 0, -7344)), ((0, "attributes", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -7351), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7350), 0), 100000000, 0, -7349), 0), 100000000, 0, -7348)), (0, "binding_op", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -7355), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7354), 0), 100000000, 0, -7353), 0), 100000000, 0, -7352)), 0, 1), 2), "bool", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -7359), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7358), 0), 100000000, 0, -7357), 0), 100000000, 0, -7356)), (0, "case", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -7363), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7362), 0), 100000000, 0, -7361), 0), 100000000, 0, -7360)), (0, "cases", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -7367), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7366), 0), 100000000, 0, -7365), 0), 100000000, 0, -7364)), 0, 1), 2), 3), 4), "char", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -7371), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7370), 0), 100000000, 0, -7369), 0), 100000000, 0, -7368)), ((((((0, "class_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -7375), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7374), 0), 100000000, 0, -7373), 0), 100000000, 0, -7372)), 0, 1), "class_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -7379), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7378), 0), 100000000, 0, -7377), 0), 100000000, 0, -7376)), 0, 2), "class_expr", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -7383), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7382), 0), 100000000, 0, -7381), 0), 100000000, 0, -7380)), (0, "class_expr_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -7387), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7386), 0), 100000000, 0, -7385), 0), 100000000, 0, -7384)), 0, 1), 3), "class_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -7391), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7390), 0), 100000000, 0, -7389), 0), 100000000, 0, -7388)), ((0, "class_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -7395), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7394), 0), 100000000, 0, -7393), 0), 100000000, 0, -7392)), (0, "class_field_kind", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -7399), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7398), 0), 100000000, 0, -7397), 0), 100000000, 0, -7396)), 0, 1), 2), "class_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -7176), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7406), 0), 100000000, 0, -7405), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -7176)], (0)), 100000000, 0, -7404), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7403), 0), 100000000, 0, -7402), 0), 100000000, 0, -7401), [(Tag9 (("a")), 100000000, 0, -7176)]), 100000000, 0, -7400)), 0, 3), 4), "class_signature", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -7410), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7409), 0), 100000000, 0, -7408), 0), 100000000, 0, -7407)), ((0, "class_structure", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -7414), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7413), 0), 100000000, 0, -7412), 0), 100000000, 0, -7411)), 0, 1), "class_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -7418), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7417), 0), 100000000, 0, -7416), 0), 100000000, 0, -7415)), (0, "class_type_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -7422), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7421), 0), 100000000, 0, -7420), 0), 100000000, 0, -7419)), 0, 1), 2), 5), "class_type_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -7426), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7425), 0), 100000000, 0, -7424), 0), 100000000, 0, -7423)), (((0, "class_type_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -7430), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7429), 0), 100000000, 0, -7428), 0), 100000000, 0, -7427)), (0, "class_type_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -7434), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7433), 0), 100000000, 0, -7432), 0), 100000000, 0, -7431)), 0, 1), 2), "closed_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -7438), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7437), 0), 100000000, 0, -7436), 0), 100000000, 0, -7435)), 0, 3), "constant", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -7442), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7441), 0), 100000000, 0, -7440), 0), 100000000, 0, -7439)), (((0, "constructor_arguments", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -7446), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7445), 0), 100000000, 0, -7444), 0), 100000000, 0, -7443)), 0, 1), "constructor_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -7450), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7449), 0), 100000000, 0, -7448), 0), 100000000, 0, -7447)), 0, 2), "core_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -7454), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7453), 0), 100000000, 0, -7452), 0), 100000000, 0, -7451)), (0, "core_type_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -7458), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7457), 0), 100000000, 0, -7456), 0), 100000000, 0, -7455)), 0, 1), 3), 4), 6), 7), "direction_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -7462), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7461), 0), 100000000, 0, -7460), 0), 100000000, 0, -7459)), ((((0, "directive_argument", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -7466), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7465), 0), 100000000, 0, -7464), 0), 100000000, 0, -7463)), (0, "directive_argument_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -7470), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7469), 0), 100000000, 0, -7468), 0), 100000000, 0, -7467)), 0, 1), 2), "expression", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -7474), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7473), 0), 100000000, 0, -7472), 0), 100000000, 0, -7471)), (0, "expression_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -7478), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7477), 0), 100000000, 0, -7476), 0), 100000000, 0, -7475)), 0, 1), 3), "extension", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -7482), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7481), 0), 100000000, 0, -7480), 0), 100000000, 0, -7479)), (((0, "extension_constructor", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -7486), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7485), 0), 100000000, 0, -7484), 0), 100000000, 0, -7483)), 0, 1), "extension_constructor_kind", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -7490), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7489), 0), 100000000, 0, -7488), 0), 100000000, 0, -7487)), 0, 2), "functor_parameter", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -7494), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7493), 0), 100000000, 0, -7492), 0), 100000000, 0, -7491)), (((0, "include_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -7498), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7497), 0), 100000000, 0, -7496), 0), 100000000, 0, -7495)), 0, 1), "include_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -7502), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7501), 0), 100000000, 0, -7500), 0), 100000000, 0, -7499)), 0, 2), "include_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -7072), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7509), 0), 100000000, 0, -7508), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -7072)], (0)), 100000000, 0, -7507), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7506), 0), 100000000, 0, -7505), 0), 100000000, 0, -7504), [(Tag9 (("a")), 100000000, 0, -7072)]), 100000000, 0, -7503)), (0, "injectivity", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -7513), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7512), 0), 100000000, 0, -7511), 0), 100000000, 0, -7510)), 0, 1), 3), 4), 5), "int", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -7517), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7516), 0), 100000000, 0, -7515), 0), 100000000, 0, -7514)), ((0, "label", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -7521), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7520), 0), 100000000, 0, -7519), 0), 100000000, 0, -7518)), ((0, "label_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -7525), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7524), 0), 100000000, 0, -7523), 0), 100000000, 0, -7522)), 0, 1), "letop", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -7529), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7528), 0), 100000000, 0, -7527), 0), 100000000, 0, -7526)), 0, 2), 3), "list", (0, 0, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -7044), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7536), 0), 100000000, 0, -7535), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -7044)], (0)), 100000000, 0, -7534), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7533), 0), 100000000, 0, -7532), 0), 100000000, 0, -7531), [(Tag9 (("a")), 100000000, 0, -7044)]), 100000000, 0, -7530)), (0, "loc", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -7036), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7543), 0), 100000000, 0, -7542), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -7036)], (0)), 100000000, 0, -7541), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7540), 0), 100000000, 0, -7539), 0), 100000000, 0, -7538), [(Tag9 (("a")), 100000000, 0, -7036)]), 100000000, 0, -7537)), 0, 1), 4), 6), 8), "location", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -7547), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7546), 0), 100000000, 0, -7545), 0), 100000000, 0, -7544)), (((((0, "location_stack", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -7551), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7550), 0), 100000000, 0, -7549), 0), 100000000, 0, -7548)), 0, 1), "longident", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -7555), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7554), 0), 100000000, 0, -7553), 0), 100000000, 0, -7552)), 0, 2), "longident_loc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -7559), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7558), 0), 100000000, 0, -7557), 0), 100000000, 0, -7556)), ((((0, "module_binding", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -7563), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7562), 0), 100000000, 0, -7561), 0), 100000000, 0, -7560)), 0, 1), "module_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -7567), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7566), 0), 100000000, 0, -7565), 0), 100000000, 0, -7564)), 0, 2), "module_expr", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -7571), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7570), 0), 100000000, 0, -7569), 0), 100000000, 0, -7568)), ((0, "module_expr_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -7575), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7574), 0), 100000000, 0, -7573), 0), 100000000, 0, -7572)), 0, 1), "module_substitution", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -7579), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7578), 0), 100000000, 0, -7577), 0), 100000000, 0, -7576)), 0, 2), 3), "module_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -7583), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7582), 0), 100000000, 0, -7581), 0), 100000000, 0, -7580)), ((0, "module_type_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -7587), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7586), 0), 100000000, 0, -7585), 0), 100000000, 0, -7584)), 0, 1), "module_type_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -7591), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7590), 0), 100000000, 0, -7589), 0), 100000000, 0, -7588)), 0, 2), 4), 5), "mutable_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -7595), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7594), 0), 100000000, 0, -7593), 0), 100000000, 0, -7592)), ((0, "object_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -7599), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7598), 0), 100000000, 0, -7597), 0), 100000000, 0, -7596)), 0, 1), "object_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -7603), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7602), 0), 100000000, 0, -7601), 0), 100000000, 0, -7600)), (((0, "open_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -7607), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7606), 0), 100000000, 0, -7605), 0), 100000000, 0, -7604)), 0, 1), "open_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -7611), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7610), 0), 100000000, 0, -7609), 0), 100000000, 0, -7608)), 0, 2), "open_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -6960), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7618), 0), 100000000, 0, -7617), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -6960)], (0)), 100000000, 0, -7616), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7615), 0), 100000000, 0, -7614), 0), 100000000, 0, -7613), [(Tag9 (("a")), 100000000, 0, -6960)]), 100000000, 0, -7612)), 0, 3), 4), 6), "option", (0, 0, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -6952), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7625), 0), 100000000, 0, -7624), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -6952)], (0)), 100000000, 0, -7623), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7622), 0), 100000000, 0, -7621), 0), 100000000, 0, -7620), [(Tag9 (("a")), 100000000, 0, -6952)]), 100000000, 0, -7619)), (((((0, "override_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -7629), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7628), 0), 100000000, 0, -7627), 0), 100000000, 0, -7626)), 0, 1), "package_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -7633), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7632), 0), 100000000, 0, -7631), 0), 100000000, 0, -7630)), (0, "pattern", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -7637), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7636), 0), 100000000, 0, -7635), 0), 100000000, 0, -7634)), (0, "pattern_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -7641), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7640), 0), 100000000, 0, -7639), 0), 100000000, 0, -7638)), 0, 1), 2), 3), "payload", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -7645), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7644), 0), 100000000, 0, -7643), 0), 100000000, 0, -7642)), (0, "position", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -7649), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7648), 0), 100000000, 0, -7647), 0), 100000000, 0, -7646)), (0, "private_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -7653), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7652), 0), 100000000, 0, -7651), 0), 100000000, 0, -7650)), 0, 1), 2), 4), "rec_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -7657), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7656), 0), 100000000, 0, -7655), 0), 100000000, 0, -7654)), ((0, "row_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -7661), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7660), 0), 100000000, 0, -7659), 0), 100000000, 0, -7658)), 0, 1), "row_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -7665), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7664), 0), 100000000, 0, -7663), 0), 100000000, 0, -7662)), (0, "signature", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -7669), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7668), 0), 100000000, 0, -7667), 0), 100000000, 0, -7666)), (0, "signature_item", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -7673), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7672), 0), 100000000, 0, -7671), 0), 100000000, 0, -7670)), (0, "signature_item_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -7677), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7676), 0), 100000000, 0, -7675), 0), 100000000, 0, -7674)), 0, 1), 2), 3), 4), 5), "string", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -7681), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7680), 0), 100000000, 0, -7679), 0), 100000000, 0, -7678)), ((((0, "structure", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -7685), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7684), 0), 100000000, 0, -7683), 0), 100000000, 0, -7682)), 0, 1), "structure_item", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -7689), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7688), 0), 100000000, 0, -7687), 0), 100000000, 0, -7686)), (0, "structure_item_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -7693), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7692), 0), 100000000, 0, -7691), 0), 100000000, 0, -7690)), ((0, "toplevel_directive", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -7697), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7696), 0), 100000000, 0, -7695), 0), 100000000, 0, -7694)), 0, 1), "toplevel_phrase", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -7701), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7700), 0), 100000000, 0, -7699), 0), 100000000, 0, -7698)), 0, 2), 3), 4), "type_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -7705), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7704), 0), 100000000, 0, -7703), 0), 100000000, 0, -7702)), ((0, "type_exception", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -7709), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7708), 0), 100000000, 0, -7707), 0), 100000000, 0, -7706)), 0, 1), "type_extension", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -7713), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7712), 0), 100000000, 0, -7711), 0), 100000000, 0, -7710)), 0, 2), 5), "type_kind", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -7717), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7716), 0), 100000000, 0, -7715), 0), 100000000, 0, -7714)), (((0, "value_binding", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -7721), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7720), 0), 100000000, 0, -7719), 0), 100000000, 0, -7718)), 0, 1), "value_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -7725), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7724), 0), 100000000, 0, -7723), 0), 100000000, 0, -7722)), 0, 2), "variance", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -7729), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7728), 0), 100000000, 0, -7727), 0), 100000000, 0, -7726)), (0, "virtual_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -7733), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7732), 0), 100000000, 0, -7731), 0), 100000000, 0, -7730)), (0, "with_constraint", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -7737), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7736), 0), 100000000, 0, -7735), 0), 100000000, 0, -7734)), 0, 1), 2), 3), 6), 7), 8), 9))), (("fold", 7450)), ([((("acc")), 100000000, 0, -6841)], 1, 0, 1, ((Tag4 ((Tag5 ("bool", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -7226), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7225), 0), 100000000, 0, -7224), 0), 100000000, 0, -7223), (Tag5 ("char", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -7214), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7213), 0), 100000000, 0, -7212), 0), 100000000, 0, -7211), (Tag5 ("int", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -7066), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7065), 0), 100000000, 0, -7064), 0), 100000000, 0, -7063), (Tag5 ("list", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -7044), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7050), 0), 100000000, 0, -7049), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -7044)], (0)), 100000000, 0, -7048), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7047), 0), 100000000, 0, -7046), 0), 100000000, 0, -7045), [(Tag9 (("a")), 100000000, 0, -7044)]), 100000000, 0, -7043), (Tag5 ("option", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -6952), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6958), 0), 100000000, 0, -6957), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -6952)], (0)), 100000000, 0, -6956), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6955), 0), 100000000, 0, -6954), 0), 100000000, 0, -6953), [(Tag9 (("a")), 100000000, 0, -6952)]), 100000000, 0, -6951), (Tag5 ("string", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6898), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6897), 0), 100000000, 0, -6896), 0), 100000000, 0, -6895), (Tag5 ("position", 1, (Tag10 ((Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -6930), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6929), 0), 100000000, 0, -6928), 0), 100000000, 0, -6927), (Tag5 ("location", 1, (Tag10 ((Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -7034), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7033), 0), 100000000, 0, -7032), 0), 100000000, 0, -7031), (Tag5 ("location_stack", 1, (Tag10 ((Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -7030), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7029), 0), 100000000, 0, -7028), 0), 100000000, 0, -7027), (Tag5 ("loc", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -7036), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7042), 0), 100000000, 0, -7041), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -7036)], (0)), 100000000, 0, -7040), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7039), 0), 100000000, 0, -7038), 0), 100000000, 0, -7037), [(Tag9 (("a")), 100000000, 0, -7036)]), 100000000, 0, -7035), (Tag5 ("longident", 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -7026), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7025), 0), 100000000, 0, -7024), 0), 100000000, 0, -7023), (Tag5 ("longident_loc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -7022), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7021), 0), 100000000, 0, -7020), 0), 100000000, 0, -7019), (Tag5 ("rec_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -6922), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6921), 0), 100000000, 0, -6920), 0), 100000000, 0, -6919), (Tag5 ("direction_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -7122), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7121), 0), 100000000, 0, -7120), 0), 100000000, 0, -7119), (Tag5 ("private_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -6926), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6925), 0), 100000000, 0, -6924), 0), 100000000, 0, -6923), (Tag5 ("mutable_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -6986), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6985), 0), 100000000, 0, -6984), 0), 100000000, 0, -6983), (Tag5 ("virtual_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -6846), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6845), 0), 100000000, 0, -6844), 0), 100000000, 0, -6843), (Tag5 ("override_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -6950), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6949), 0), 100000000, 0, -6948), 0), 100000000, 0, -6947), (Tag5 ("closed_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -7146), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7145), 0), 100000000, 0, -7144), 0), 100000000, 0, -7143), (Tag5 ("label", 1, (Tag10 ((Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -7062), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7061), 0), 100000000, 0, -7060), 0), 100000000, 0, -7059), (Tag5 ("arg_label", 1, (Tag10 ((Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -7242), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7241), 0), 100000000, 0, -7240), 0), 100000000, 0, -7239), (Tag5 ("variance", 1, (Tag10 ((Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -6850), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6849), 0), 100000000, 0, -6848), 0), 100000000, 0, -6847), (Tag5 ("injectivity", 1, (Tag10 ((Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -7070), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7069), 0), 100000000, 0, -7068), 0), 100000000, 0, -7067), (Tag5 ("constant", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -7142), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7141), 0), 100000000, 0, -7140), 0), 100000000, 0, -7139), (Tag5 ("attribute", 1, (Tag10 ((Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -7238), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7237), 0), 100000000, 0, -7236), 0), 100000000, 0, -7235), (Tag5 ("extension", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -7102), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7101), 0), 100000000, 0, -7100), 0), 100000000, 0, -7099), (Tag5 ("attributes", 1, (Tag10 ((Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -7234), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7233), 0), 100000000, 0, -7232), 0), 100000000, 0, -7231), (Tag5 ("payload", 1, (Tag10 ((Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -6934), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6933), 0), 100000000, 0, -6932), 0), 100000000, 0, -6931), (Tag5 ("core_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -7130), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7129), 0), 100000000, 0, -7128), 0), 100000000, 0, -7127), (Tag5 ("core_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -7126), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7125), 0), 100000000, 0, -7124), 0), 100000000, 0, -7123), (Tag5 ("package_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -6946), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6945), 0), 100000000, 0, -6944), 0), 100000000, 0, -6943), (Tag5 ("row_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -6918), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6917), 0), 100000000, 0, -6916), 0), 100000000, 0, -6915), (Tag5 ("row_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -6914), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6913), 0), 100000000, 0, -6912), 0), 100000000, 0, -6911), (Tag5 ("object_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -6982), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6981), 0), 100000000, 0, -6980), 0), 100000000, 0, -6979), (Tag5 ("object_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -6978), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6977), 0), 100000000, 0, -6976), 0), 100000000, 0, -6975), (Tag5 ("pattern", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -6942), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6941), 0), 100000000, 0, -6940), 0), 100000000, 0, -6939), (Tag5 ("pattern_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -6938), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6937), 0), 100000000, 0, -6936), 0), 100000000, 0, -6935), (Tag5 ("expression", 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -7110), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7109), 0), 100000000, 0, -7108), 0), 100000000, 0, -7107), (Tag5 ("expression_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -7106), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7105), 0), 100000000, 0, -7104), 0), 100000000, 0, -7103), (Tag5 ("case", 1, (Tag10 ((Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -7222), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7221), 0), 100000000, 0, -7220), 0), 100000000, 0, -7219), (Tag5 ("letop", 1, (Tag10 ((Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -7054), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7053), 0), 100000000, 0, -7052), 0), 100000000, 0, -7051), (Tag5 ("binding_op", 1, (Tag10 ((Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -7230), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7229), 0), 100000000, 0, -7228), 0), 100000000, 0, -7227), (Tag5 ("value_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -6854), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6853), 0), 100000000, 0, -6852), 0), 100000000, 0, -6851), (Tag5 ("type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -6874), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6873), 0), 100000000, 0, -6872), 0), 100000000, 0, -6871), (Tag5 ("type_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -6862), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6861), 0), 100000000, 0, -6860), 0), 100000000, 0, -6859), (Tag5 ("label_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -7058), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7057), 0), 100000000, 0, -7056), 0), 100000000, 0, -7055), (Tag5 ("constructor_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -7134), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7133), 0), 100000000, 0, -7132), 0), 100000000, 0, -7131), (Tag5 ("constructor_arguments", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -7138), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7137), 0), 100000000, 0, -7136), 0), 100000000, 0, -7135), (Tag5 ("type_extension", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -6866), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6865), 0), 100000000, 0, -6864), 0), 100000000, 0, -6863), (Tag5 ("extension_constructor", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -7098), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7097), 0), 100000000, 0, -7096), 0), 100000000, 0, -7095), (Tag5 ("type_exception", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -6870), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6869), 0), 100000000, 0, -6868), 0), 100000000, 0, -6867), (Tag5 ("extension_constructor_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -7094), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7093), 0), 100000000, 0, -7092), 0), 100000000, 0, -7091), (Tag5 ("class_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -7166), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7165), 0), 100000000, 0, -7164), 0), 100000000, 0, -7163), (Tag5 ("class_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -7158), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7157), 0), 100000000, 0, -7156), 0), 100000000, 0, -7155), (Tag5 ("class_signature", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -7174), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7173), 0), 100000000, 0, -7172), 0), 100000000, 0, -7171), (Tag5 ("class_type_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -7154), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7153), 0), 100000000, 0, -7152), 0), 100000000, 0, -7151), (Tag5 ("class_type_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -7150), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7149), 0), 100000000, 0, -7148), 0), 100000000, 0, -7147), (Tag5 ("class_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -7176), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7182), 0), 100000000, 0, -7181), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -7176)], (0)), 100000000, 0, -7180), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7179), 0), 100000000, 0, -7178), 0), 100000000, 0, -7177), [(Tag9 (("a")), 100000000, 0, -7176)]), 100000000, 0, -7175), (Tag5 ("class_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -7206), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7205), 0), 100000000, 0, -7204), 0), 100000000, 0, -7203), (Tag5 ("class_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -7162), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7161), 0), 100000000, 0, -7160), 0), 100000000, 0, -7159), (Tag5 ("class_expr", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -7202), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7201), 0), 100000000, 0, -7200), 0), 100000000, 0, -7199), (Tag5 ("class_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -7198), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7197), 0), 100000000, 0, -7196), 0), 100000000, 0, -7195), (Tag5 ("class_structure", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -7170), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7169), 0), 100000000, 0, -7168), 0), 100000000, 0, -7167), (Tag5 ("class_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -7194), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7193), 0), 100000000, 0, -7192), 0), 100000000, 0, -7191), (Tag5 ("class_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -7190), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7189), 0), 100000000, 0, -7188), 0), 100000000, 0, -7187), (Tag5 ("class_field_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -7186), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7185), 0), 100000000, 0, -7184), 0), 100000000, 0, -7183), (Tag5 ("class_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -7210), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7209), 0), 100000000, 0, -7208), 0), 100000000, 0, -7207), (Tag5 ("module_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -6998), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6997), 0), 100000000, 0, -6996), 0), 100000000, 0, -6995), (Tag5 ("module_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -6990), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6989), 0), 100000000, 0, -6988), 0), 100000000, 0, -6987), (Tag5 ("functor_parameter", 1, (Tag10 ((Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -7090), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7089), 0), 100000000, 0, -7088), 0), 100000000, 0, -7087), (Tag5 ("signature", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -6910), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6909), 0), 100000000, 0, -6908), 0), 100000000, 0, -6907), (Tag5 ("signature_item", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -6906), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6905), 0), 100000000, 0, -6904), 0), 100000000, 0, -6903), (Tag5 ("signature_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -6902), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6901), 0), 100000000, 0, -6900), 0), 100000000, 0, -6899), (Tag5 ("module_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -7014), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7013), 0), 100000000, 0, -7012), 0), 100000000, 0, -7011), (Tag5 ("module_substitution", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -7002), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7001), 0), 100000000, 0, -7000), 0), 100000000, 0, -6999), (Tag5 ("module_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -6994), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6993), 0), 100000000, 0, -6992), 0), 100000000, 0, -6991), (Tag5 ("open_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -6960), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6966), 0), 100000000, 0, -6965), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -6960)], (0)), 100000000, 0, -6964), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6963), 0), 100000000, 0, -6962), 0), 100000000, 0, -6961), [(Tag9 (("a")), 100000000, 0, -6960)]), 100000000, 0, -6959), (Tag5 ("open_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -6970), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6969), 0), 100000000, 0, -6968), 0), 100000000, 0, -6967), (Tag5 ("open_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -6974), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6973), 0), 100000000, 0, -6972), 0), 100000000, 0, -6971), (Tag5 ("include_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -7072), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7078), 0), 100000000, 0, -7077), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -7072)], (0)), 100000000, 0, -7076), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7075), 0), 100000000, 0, -7074), 0), 100000000, 0, -7073), [(Tag9 (("a")), 100000000, 0, -7072)]), 100000000, 0, -7071), (Tag5 ("include_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -7082), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7081), 0), 100000000, 0, -7080), 0), 100000000, 0, -7079), (Tag5 ("include_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -7086), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7085), 0), 100000000, 0, -7084), 0), 100000000, 0, -7083), (Tag5 ("with_constraint", 1, (Tag10 ((Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -6842), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6840), 0), 100000000, 0, -6839), 0), 100000000, 0, -6838), (Tag5 ("module_expr", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -7010), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7009), 0), 100000000, 0, -7008), 0), 100000000, 0, -7007), (Tag5 ("module_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -7006), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7005), 0), 100000000, 0, -7004), 0), 100000000, 0, -7003), (Tag5 ("structure", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -6894), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6893), 0), 100000000, 0, -6892), 0), 100000000, 0, -6891), (Tag5 ("structure_item", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -6890), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6889), 0), 100000000, 0, -6888), 0), 100000000, 0, -6887), (Tag5 ("structure_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -6886), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6885), 0), 100000000, 0, -6884), 0), 100000000, 0, -6883), (Tag5 ("value_binding", 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -6858), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6857), 0), 100000000, 0, -6856), 0), 100000000, 0, -6855), (Tag5 ("module_binding", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -7018), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7017), 0), 100000000, 0, -7016), 0), 100000000, 0, -7015), (Tag5 ("toplevel_phrase", 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -6878), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6877), 0), 100000000, 0, -6876), 0), 100000000, 0, -6875), (Tag5 ("toplevel_directive", 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -6882), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6881), 0), 100000000, 0, -6880), 0), 100000000, 0, -6879), (Tag5 ("directive_argument", 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -7118), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7117), 0), 100000000, 0, -7116), 0), 100000000, 0, -7115), (Tag5 ("directive_argument_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -7114), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7113), 0), 100000000, 0, -7112), 0), 100000000, 0, -7111), (Tag5 ("cases", 1, (Tag10 ((Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -7218), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7217), 0), 100000000, 0, -7216), 0), 100000000, 0, -7215), ((0), 100000000, 0, -7339)), 100000000, 0, -7338)), 100000000, 0, -7337)), 100000000, 0, -7336)), 100000000, 0, -7335)), 100000000, 0, -7334)), 100000000, 0, -7333)), 100000000, 0, -7332)), 100000000, 0, -7331)), 100000000, 0, -7330)), 100000000, 0, -7329)), 100000000, 0, -7328)), 100000000, 0, -7327)), 100000000, 0, -7326)), 100000000, 0, -7325)), 100000000, 0, -7324)), 100000000, 0, -7323)), 100000000, 0, -7322)), 100000000, 0, -7321)), 100000000, 0, -7320)), 100000000, 0, -7319)), 100000000, 0, -7318)), 100000000, 0, -7317)), 100000000, 0, -7316)), 100000000, 0, -7315)), 100000000, 0, -7314)), 100000000, 0, -7313)), 100000000, 0, -7312)), 100000000, 0, -7311)), 100000000, 0, -7310)), 100000000, 0, -7309)), 100000000, 0, -7308)), 100000000, 0, -7307)), 100000000, 0, -7306)), 100000000, 0, -7305)), 100000000, 0, -7304)), 100000000, 0, -7303)), 100000000, 0, -7302)), 100000000, 0, -7301)), 100000000, 0, -7300)), 100000000, 0, -7299)), 100000000, 0, -7298)), 100000000, 0, -7297)), 100000000, 0, -7296)), 100000000, 0, -7295)), 100000000, 0, -7294)), 100000000, 0, -7293)), 100000000, 0, -7292)), 100000000, 0, -7291)), 100000000, 0, -7290)), 100000000, 0, -7289)), 100000000, 0, -7288)), 100000000, 0, -7287)), 100000000, 0, -7286)), 100000000, 0, -7285)), 100000000, 0, -7284)), 100000000, 0, -7283)), 100000000, 0, -7282)), 100000000, 0, -7281)), 100000000, 0, -7280)), 100000000, 0, -7279)), 100000000, 0, -7278)), 100000000, 0, -7277)), 100000000, 0, -7276)), 100000000, 0, -7275)), 100000000, 0, -7274)), 100000000, 0, -7273)), 100000000, 0, -7272)), 100000000, 0, -7271)), 100000000, 0, -7270)), 100000000, 0, -7269)), 100000000, 0, -7268)), 100000000, 0, -7267)), 100000000, 0, -7266)), 100000000, 0, -7265)), 100000000, 0, -7264)), 100000000, 0, -7263)), 100000000, 0, -7262)), 100000000, 0, -7261)), 100000000, 0, -7260)), 100000000, 0, -7259)), 100000000, 0, -7258)), 100000000, 0, -7257)), 100000000, 0, -7256)), 100000000, 0, -7255)), 100000000, 0, -7254)), 100000000, 0, -7253)), 100000000, 0, -7252)), 100000000, 0, -7251)), 100000000, 0, -7250)), 100000000, 0, -7249)), 100000000, 0, -7248)), 100000000, 0, -7247)), 100000000, 0, -7246)), 100000000, 0, -7245)), 100000000, 0, -7244), (([(("fold", 7450)); ((0), 100000000, 0, -7339); ((("acc")), 100000000, 0, -6841)]))), 100000000, 0, -7243)), [63], [2], 0, 0, (("ast/ast.ml", 3224, 118182, 118182), ("ast/ast.ml", 4277, 158258, 158263), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 2244)), [63], (("ast/ast.ml", 3224, 118182, 118182), ("ast/ast.ml", 4277, 158258, 158263), 0), 0, Tag1 ("Ppxlib_ast__Ast", 2244)), 1, 0); Tag1 (("fold", 7450), ([((("acc")), 100000000, 0, -6841)], 1, 0, 1, ((Tag4 ((Tag5 ("arg_label", 1, (Tag10 ((Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -7242), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7241), 0), 100000000, 0, -7240), 0), 100000000, 0, -7239), (Tag5 ("attribute", 1, (Tag10 ((Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -7238), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7237), 0), 100000000, 0, -7236), 0), 100000000, 0, -7235), (Tag5 ("attributes", 1, (Tag10 ((Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -7234), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7233), 0), 100000000, 0, -7232), 0), 100000000, 0, -7231), (Tag5 ("binding_op", 1, (Tag10 ((Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -7230), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7229), 0), 100000000, 0, -7228), 0), 100000000, 0, -7227), (Tag5 ("bool", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -7226), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7225), 0), 100000000, 0, -7224), 0), 100000000, 0, -7223), (Tag5 ("case", 1, (Tag10 ((Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -7222), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7221), 0), 100000000, 0, -7220), 0), 100000000, 0, -7219), (Tag5 ("cases", 1, (Tag10 ((Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -7218), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7217), 0), 100000000, 0, -7216), 0), 100000000, 0, -7215), (Tag5 ("char", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -7214), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7213), 0), 100000000, 0, -7212), 0), 100000000, 0, -7211), (Tag5 ("class_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -7210), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7209), 0), 100000000, 0, -7208), 0), 100000000, 0, -7207), (Tag5 ("class_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -7206), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7205), 0), 100000000, 0, -7204), 0), 100000000, 0, -7203), (Tag5 ("class_expr", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -7202), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7201), 0), 100000000, 0, -7200), 0), 100000000, 0, -7199), (Tag5 ("class_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -7198), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7197), 0), 100000000, 0, -7196), 0), 100000000, 0, -7195), (Tag5 ("class_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -7194), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7193), 0), 100000000, 0, -7192), 0), 100000000, 0, -7191), (Tag5 ("class_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -7190), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7189), 0), 100000000, 0, -7188), 0), 100000000, 0, -7187), (Tag5 ("class_field_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -7186), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7185), 0), 100000000, 0, -7184), 0), 100000000, 0, -7183), (Tag5 ("class_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -7176), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7182), 0), 100000000, 0, -7181), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -7176)], (0)), 100000000, 0, -7180), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7179), 0), 100000000, 0, -7178), 0), 100000000, 0, -7177), [(Tag9 (("a")), 100000000, 0, -7176)]), 100000000, 0, -7175), (Tag5 ("class_signature", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -7174), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7173), 0), 100000000, 0, -7172), 0), 100000000, 0, -7171), (Tag5 ("class_structure", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -7170), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7169), 0), 100000000, 0, -7168), 0), 100000000, 0, -7167), (Tag5 ("class_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -7166), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7165), 0), 100000000, 0, -7164), 0), 100000000, 0, -7163), (Tag5 ("class_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -7162), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7161), 0), 100000000, 0, -7160), 0), 100000000, 0, -7159), (Tag5 ("class_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -7158), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7157), 0), 100000000, 0, -7156), 0), 100000000, 0, -7155), (Tag5 ("class_type_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -7154), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7153), 0), 100000000, 0, -7152), 0), 100000000, 0, -7151), (Tag5 ("class_type_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -7150), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7149), 0), 100000000, 0, -7148), 0), 100000000, 0, -7147), (Tag5 ("closed_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -7146), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7145), 0), 100000000, 0, -7144), 0), 100000000, 0, -7143), (Tag5 ("constant", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -7142), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7141), 0), 100000000, 0, -7140), 0), 100000000, 0, -7139), (Tag5 ("constructor_arguments", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -7138), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7137), 0), 100000000, 0, -7136), 0), 100000000, 0, -7135), (Tag5 ("constructor_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -7134), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7133), 0), 100000000, 0, -7132), 0), 100000000, 0, -7131), (Tag5 ("core_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -7130), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7129), 0), 100000000, 0, -7128), 0), 100000000, 0, -7127), (Tag5 ("core_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -7126), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7125), 0), 100000000, 0, -7124), 0), 100000000, 0, -7123), (Tag5 ("direction_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -7122), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7121), 0), 100000000, 0, -7120), 0), 100000000, 0, -7119), (Tag5 ("directive_argument", 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -7118), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7117), 0), 100000000, 0, -7116), 0), 100000000, 0, -7115), (Tag5 ("directive_argument_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -7114), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7113), 0), 100000000, 0, -7112), 0), 100000000, 0, -7111), (Tag5 ("expression", 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -7110), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7109), 0), 100000000, 0, -7108), 0), 100000000, 0, -7107), (Tag5 ("expression_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -7106), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7105), 0), 100000000, 0, -7104), 0), 100000000, 0, -7103), (Tag5 ("extension", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -7102), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7101), 0), 100000000, 0, -7100), 0), 100000000, 0, -7099), (Tag5 ("extension_constructor", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -7098), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7097), 0), 100000000, 0, -7096), 0), 100000000, 0, -7095), (Tag5 ("extension_constructor_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -7094), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7093), 0), 100000000, 0, -7092), 0), 100000000, 0, -7091), (Tag5 ("functor_parameter", 1, (Tag10 ((Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -7090), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7089), 0), 100000000, 0, -7088), 0), 100000000, 0, -7087), (Tag5 ("include_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -7086), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7085), 0), 100000000, 0, -7084), 0), 100000000, 0, -7083), (Tag5 ("include_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -7082), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7081), 0), 100000000, 0, -7080), 0), 100000000, 0, -7079), (Tag5 ("include_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -7072), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7078), 0), 100000000, 0, -7077), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -7072)], (0)), 100000000, 0, -7076), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7075), 0), 100000000, 0, -7074), 0), 100000000, 0, -7073), [(Tag9 (("a")), 100000000, 0, -7072)]), 100000000, 0, -7071), (Tag5 ("injectivity", 1, (Tag10 ((Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -7070), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7069), 0), 100000000, 0, -7068), 0), 100000000, 0, -7067), (Tag5 ("int", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -7066), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7065), 0), 100000000, 0, -7064), 0), 100000000, 0, -7063), (Tag5 ("label", 1, (Tag10 ((Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -7062), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7061), 0), 100000000, 0, -7060), 0), 100000000, 0, -7059), (Tag5 ("label_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -7058), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7057), 0), 100000000, 0, -7056), 0), 100000000, 0, -7055), (Tag5 ("letop", 1, (Tag10 ((Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -7054), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7053), 0), 100000000, 0, -7052), 0), 100000000, 0, -7051), (Tag5 ("list", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -7044), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7050), 0), 100000000, 0, -7049), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -7044)], (0)), 100000000, 0, -7048), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7047), 0), 100000000, 0, -7046), 0), 100000000, 0, -7045), [(Tag9 (("a")), 100000000, 0, -7044)]), 100000000, 0, -7043), (Tag5 ("loc", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -7036), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7042), 0), 100000000, 0, -7041), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -7036)], (0)), 100000000, 0, -7040), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7039), 0), 100000000, 0, -7038), 0), 100000000, 0, -7037), [(Tag9 (("a")), 100000000, 0, -7036)]), 100000000, 0, -7035), (Tag5 ("location", 1, (Tag10 ((Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -7034), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7033), 0), 100000000, 0, -7032), 0), 100000000, 0, -7031), (Tag5 ("location_stack", 1, (Tag10 ((Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -7030), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7029), 0), 100000000, 0, -7028), 0), 100000000, 0, -7027), (Tag5 ("longident", 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -7026), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7025), 0), 100000000, 0, -7024), 0), 100000000, 0, -7023), (Tag5 ("longident_loc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -7022), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7021), 0), 100000000, 0, -7020), 0), 100000000, 0, -7019), (Tag5 ("module_binding", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -7018), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7017), 0), 100000000, 0, -7016), 0), 100000000, 0, -7015), (Tag5 ("module_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -7014), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7013), 0), 100000000, 0, -7012), 0), 100000000, 0, -7011), (Tag5 ("module_expr", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -7010), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7009), 0), 100000000, 0, -7008), 0), 100000000, 0, -7007), (Tag5 ("module_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -7006), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7005), 0), 100000000, 0, -7004), 0), 100000000, 0, -7003), (Tag5 ("module_substitution", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -7002), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -7001), 0), 100000000, 0, -7000), 0), 100000000, 0, -6999), (Tag5 ("module_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -6998), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6997), 0), 100000000, 0, -6996), 0), 100000000, 0, -6995), (Tag5 ("module_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -6994), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6993), 0), 100000000, 0, -6992), 0), 100000000, 0, -6991), (Tag5 ("module_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -6990), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6989), 0), 100000000, 0, -6988), 0), 100000000, 0, -6987), (Tag5 ("mutable_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -6986), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6985), 0), 100000000, 0, -6984), 0), 100000000, 0, -6983), (Tag5 ("object_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -6982), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6981), 0), 100000000, 0, -6980), 0), 100000000, 0, -6979), (Tag5 ("object_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -6978), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6977), 0), 100000000, 0, -6976), 0), 100000000, 0, -6975), (Tag5 ("open_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -6974), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6973), 0), 100000000, 0, -6972), 0), 100000000, 0, -6971), (Tag5 ("open_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -6970), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6969), 0), 100000000, 0, -6968), 0), 100000000, 0, -6967), (Tag5 ("open_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -6960), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6966), 0), 100000000, 0, -6965), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -6960)], (0)), 100000000, 0, -6964), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6963), 0), 100000000, 0, -6962), 0), 100000000, 0, -6961), [(Tag9 (("a")), 100000000, 0, -6960)]), 100000000, 0, -6959), (Tag5 ("option", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -6952), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6958), 0), 100000000, 0, -6957), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -6952)], (0)), 100000000, 0, -6956), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6955), 0), 100000000, 0, -6954), 0), 100000000, 0, -6953), [(Tag9 (("a")), 100000000, 0, -6952)]), 100000000, 0, -6951), (Tag5 ("override_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -6950), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6949), 0), 100000000, 0, -6948), 0), 100000000, 0, -6947), (Tag5 ("package_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -6946), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6945), 0), 100000000, 0, -6944), 0), 100000000, 0, -6943), (Tag5 ("pattern", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -6942), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6941), 0), 100000000, 0, -6940), 0), 100000000, 0, -6939), (Tag5 ("pattern_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -6938), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6937), 0), 100000000, 0, -6936), 0), 100000000, 0, -6935), (Tag5 ("payload", 1, (Tag10 ((Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -6934), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6933), 0), 100000000, 0, -6932), 0), 100000000, 0, -6931), (Tag5 ("position", 1, (Tag10 ((Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -6930), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6929), 0), 100000000, 0, -6928), 0), 100000000, 0, -6927), (Tag5 ("private_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -6926), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6925), 0), 100000000, 0, -6924), 0), 100000000, 0, -6923), (Tag5 ("rec_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -6922), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6921), 0), 100000000, 0, -6920), 0), 100000000, 0, -6919), (Tag5 ("row_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -6918), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6917), 0), 100000000, 0, -6916), 0), 100000000, 0, -6915), (Tag5 ("row_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -6914), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6913), 0), 100000000, 0, -6912), 0), 100000000, 0, -6911), (Tag5 ("signature", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -6910), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6909), 0), 100000000, 0, -6908), 0), 100000000, 0, -6907), (Tag5 ("signature_item", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -6906), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6905), 0), 100000000, 0, -6904), 0), 100000000, 0, -6903), (Tag5 ("signature_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -6902), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6901), 0), 100000000, 0, -6900), 0), 100000000, 0, -6899), (Tag5 ("string", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6898), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6897), 0), 100000000, 0, -6896), 0), 100000000, 0, -6895), (Tag5 ("structure", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -6894), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6893), 0), 100000000, 0, -6892), 0), 100000000, 0, -6891), (Tag5 ("structure_item", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -6890), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6889), 0), 100000000, 0, -6888), 0), 100000000, 0, -6887), (Tag5 ("structure_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -6886), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6885), 0), 100000000, 0, -6884), 0), 100000000, 0, -6883), (Tag5 ("toplevel_directive", 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -6882), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6881), 0), 100000000, 0, -6880), 0), 100000000, 0, -6879), (Tag5 ("toplevel_phrase", 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -6878), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6877), 0), 100000000, 0, -6876), 0), 100000000, 0, -6875), (Tag5 ("type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -6874), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6873), 0), 100000000, 0, -6872), 0), 100000000, 0, -6871), (Tag5 ("type_exception", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -6870), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6869), 0), 100000000, 0, -6868), 0), 100000000, 0, -6867), (Tag5 ("type_extension", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -6866), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6865), 0), 100000000, 0, -6864), 0), 100000000, 0, -6863), (Tag5 ("type_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -6862), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6861), 0), 100000000, 0, -6860), 0), 100000000, 0, -6859), (Tag5 ("value_binding", 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -6858), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6857), 0), 100000000, 0, -6856), 0), 100000000, 0, -6855), (Tag5 ("value_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -6854), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6853), 0), 100000000, 0, -6852), 0), 100000000, 0, -6851), (Tag5 ("variance", 1, (Tag10 ((Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -6850), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6849), 0), 100000000, 0, -6848), 0), 100000000, 0, -6847), (Tag5 ("virtual_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -6846), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6845), 0), 100000000, 0, -6844), 0), 100000000, 0, -6843), (Tag5 ("with_constraint", 1, (Tag10 ((Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -6842), (Tag1 (0, ((("acc")), 100000000, 0, -6841), ((("acc")), 100000000, 0, -6841), 0), 100000000, 0, -6840), 0), 100000000, 0, -6839), 0), 100000000, 0, -6838), (0, 100000000, 0, -6837)), 100000000, 0, -6836)), 100000000, 0, -6835)), 100000000, 0, -6834)), 100000000, 0, -6833)), 100000000, 0, -6832)), 100000000, 0, -6831)), 100000000, 0, -6830)), 100000000, 0, -6829)), 100000000, 0, -6828)), 100000000, 0, -6827)), 100000000, 0, -6826)), 100000000, 0, -6825)), 100000000, 0, -6824)), 100000000, 0, -6823)), 100000000, 0, -6822)), 100000000, 0, -6821)), 100000000, 0, -6820)), 100000000, 0, -6819)), 100000000, 0, -6818)), 100000000, 0, -6817)), 100000000, 0, -6816)), 100000000, 0, -6815)), 100000000, 0, -6814)), 100000000, 0, -6813)), 100000000, 0, -6812)), 100000000, 0, -6811)), 100000000, 0, -6810)), 100000000, 0, -6809)), 100000000, 0, -6808)), 100000000, 0, -6807)), 100000000, 0, -6806)), 100000000, 0, -6805)), 100000000, 0, -6804)), 100000000, 0, -6803)), 100000000, 0, -6802)), 100000000, 0, -6801)), 100000000, 0, -6800)), 100000000, 0, -6799)), 100000000, 0, -6798)), 100000000, 0, -6797)), 100000000, 0, -6796)), 100000000, 0, -6795)), 100000000, 0, -6794)), 100000000, 0, -6793)), 100000000, 0, -6792)), 100000000, 0, -6791)), 100000000, 0, -6790)), 100000000, 0, -6789)), 100000000, 0, -6788)), 100000000, 0, -6787)), 100000000, 0, -6786)), 100000000, 0, -6785)), 100000000, 0, -6784)), 100000000, 0, -6783)), 100000000, 0, -6782)), 100000000, 0, -6781)), 100000000, 0, -6780)), 100000000, 0, -6779)), 100000000, 0, -6778)), 100000000, 0, -6777)), 100000000, 0, -6776)), 100000000, 0, -6775)), 100000000, 0, -6774)), 100000000, 0, -6773)), 100000000, 0, -6772)), 100000000, 0, -6771)), 100000000, 0, -6770)), 100000000, 0, -6769)), 100000000, 0, -6768)), 100000000, 0, -6767)), 100000000, 0, -6766)), 100000000, 0, -6765)), 100000000, 0, -6764)), 100000000, 0, -6763)), 100000000, 0, -6762)), 100000000, 0, -6761)), 100000000, 0, -6760)), 100000000, 0, -6759)), 100000000, 0, -6758)), 100000000, 0, -6757)), 100000000, 0, -6756)), 100000000, 0, -6755)), 100000000, 0, -6754)), 100000000, 0, -6753)), 100000000, 0, -6752)), 100000000, 0, -6751)), 100000000, 0, -6750)), 100000000, 0, -6749)), 100000000, 0, -6748)), 100000000, 0, -6747)), 100000000, 0, -6746)), 100000000, 0, -6745)), 100000000, 0, -6744)), 100000000, 0, -6743)), 100000000, 0, -6742), (0)), 100000000, 0, -6741)), [63], [2], 0, 0, (("ast/ast.ml", 3224, 118182, 118182), ("ast/ast.ml", 4277, 158258, 158263), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 2244)), 1, 0); Tag5 (("fold_map", 7451), ([((("acc")), 100000000, 0, -5357)], Tag1 (((Tag4 ((Tag5 ("bool", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5928), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5927); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5926), 0), 100000000, 0, -5925), 0), 100000000, 0, -5924), 0), 100000000, 0, -5923), (Tag5 ("char", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -5910), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -5909); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5908), 0), 100000000, 0, -5907), 0), 100000000, 0, -5906), 0), 100000000, 0, -5905), (Tag5 ("int", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -5690), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -5689); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5688), 0), 100000000, 0, -5687), 0), 100000000, 0, -5686), 0), 100000000, 0, -5685), (Tag5 ("list", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -5657), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag9 (("a")), 100000000, 0, -5657); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5666), 0), 100000000, 0, -5665), 0), 100000000, 0, -5664), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -5657)], (0)), 100000000, 0, -5663), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -5657)], (0)), 100000000, 0, -5662); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5661), 0), 100000000, 0, -5660), 0), 100000000, 0, -5659), 0), 100000000, 0, -5658), [(Tag9 (("a")), 100000000, 0, -5657)]), 100000000, 0, -5656), (Tag5 ("option", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -5522), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag9 (("a")), 100000000, 0, -5522); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5531), 0), 100000000, 0, -5530), 0), 100000000, 0, -5529), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -5522)], (0)), 100000000, 0, -5528), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -5522)], (0)), 100000000, 0, -5527); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5526), 0), 100000000, 0, -5525), 0), 100000000, 0, -5524), 0), 100000000, 0, -5523), [(Tag9 (("a")), 100000000, 0, -5522)]), 100000000, 0, -5521), (Tag5 ("string", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5442), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5441); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5440), 0), 100000000, 0, -5439), 0), 100000000, 0, -5438), 0), 100000000, 0, -5437), (Tag5 ("position", 1, (Tag10 ((Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -5490), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -5489); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5488), 0), 100000000, 0, -5487), 0), 100000000, 0, -5486), 0), 100000000, 0, -5485), (Tag5 ("location", 1, (Tag10 ((Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -5644), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -5643); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5642), 0), 100000000, 0, -5641), 0), 100000000, 0, -5640), 0), 100000000, 0, -5639), (Tag5 ("location_stack", 1, (Tag10 ((Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -5638), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -5637); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5636), 0), 100000000, 0, -5635), 0), 100000000, 0, -5634), 0), 100000000, 0, -5633), (Tag5 ("loc", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -5646), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag9 (("a")), 100000000, 0, -5646); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5655), 0), 100000000, 0, -5654), 0), 100000000, 0, -5653), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -5646)], (0)), 100000000, 0, -5652), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -5646)], (0)), 100000000, 0, -5651); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5650), 0), 100000000, 0, -5649), 0), 100000000, 0, -5648), 0), 100000000, 0, -5647), [(Tag9 (("a")), 100000000, 0, -5646)]), 100000000, 0, -5645), (Tag5 ("longident", 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -5632), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -5631); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5630), 0), 100000000, 0, -5629), 0), 100000000, 0, -5628), 0), 100000000, 0, -5627), (Tag5 ("longident_loc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -5626), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -5625); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5624), 0), 100000000, 0, -5623), 0), 100000000, 0, -5622), 0), 100000000, 0, -5621), (Tag5 ("rec_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -5478), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -5477); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5476), 0), 100000000, 0, -5475), 0), 100000000, 0, -5474), 0), 100000000, 0, -5473), (Tag5 ("direction_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -5773), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -5772); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5771), 0), 100000000, 0, -5770), 0), 100000000, 0, -5769), 0), 100000000, 0, -5768), (Tag5 ("private_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -5484), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -5483); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5482), 0), 100000000, 0, -5481), 0), 100000000, 0, -5480), 0), 100000000, 0, -5479), (Tag5 ("mutable_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -5572), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -5571); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5570), 0), 100000000, 0, -5569), 0), 100000000, 0, -5568), 0), 100000000, 0, -5567), (Tag5 ("virtual_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -5364), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -5363); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5362), 0), 100000000, 0, -5361), 0), 100000000, 0, -5360), 0), 100000000, 0, -5359), (Tag5 ("override_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -5520), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -5519); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5518), 0), 100000000, 0, -5517), 0), 100000000, 0, -5516), 0), 100000000, 0, -5515), (Tag5 ("closed_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -5809), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -5808); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5807), 0), 100000000, 0, -5806), 0), 100000000, 0, -5805), 0), 100000000, 0, -5804), (Tag5 ("label", 1, (Tag10 ((Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -5684), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -5683); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5682), 0), 100000000, 0, -5681), 0), 100000000, 0, -5680), 0), 100000000, 0, -5679), (Tag5 ("arg_label", 1, (Tag10 ((Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -5952), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -5951); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5950), 0), 100000000, 0, -5949), 0), 100000000, 0, -5948), 0), 100000000, 0, -5947), (Tag5 ("variance", 1, (Tag10 ((Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -5370), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -5369); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5368), 0), 100000000, 0, -5367), 0), 100000000, 0, -5366), 0), 100000000, 0, -5365), (Tag5 ("injectivity", 1, (Tag10 ((Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -5696), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -5695); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5694), 0), 100000000, 0, -5693), 0), 100000000, 0, -5692), 0), 100000000, 0, -5691), (Tag5 ("constant", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -5803), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -5802); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5801), 0), 100000000, 0, -5800), 0), 100000000, 0, -5799), 0), 100000000, 0, -5798), (Tag5 ("attribute", 1, (Tag10 ((Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -5946), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -5945); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5944), 0), 100000000, 0, -5943), 0), 100000000, 0, -5942), 0), 100000000, 0, -5941), (Tag5 ("extension", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -5743), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -5742); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5741), 0), 100000000, 0, -5740), 0), 100000000, 0, -5739), 0), 100000000, 0, -5738), (Tag5 ("attributes", 1, (Tag10 ((Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -5940), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -5939); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5938), 0), 100000000, 0, -5937), 0), 100000000, 0, -5936), 0), 100000000, 0, -5935), (Tag5 ("payload", 1, (Tag10 ((Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -5496), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -5495); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5494), 0), 100000000, 0, -5493), 0), 100000000, 0, -5492), 0), 100000000, 0, -5491), (Tag5 ("core_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -5785), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -5784); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5783), 0), 100000000, 0, -5782), 0), 100000000, 0, -5781), 0), 100000000, 0, -5780), (Tag5 ("core_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -5779), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -5778); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5777), 0), 100000000, 0, -5776), 0), 100000000, 0, -5775), 0), 100000000, 0, -5774), (Tag5 ("package_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -5514), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -5513); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5512), 0), 100000000, 0, -5511), 0), 100000000, 0, -5510), 0), 100000000, 0, -5509), (Tag5 ("row_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -5472), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -5471); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5470), 0), 100000000, 0, -5469), 0), 100000000, 0, -5468), 0), 100000000, 0, -5467), (Tag5 ("row_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -5466), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -5465); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5464), 0), 100000000, 0, -5463), 0), 100000000, 0, -5462), 0), 100000000, 0, -5461), (Tag5 ("object_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -5566), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -5565); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5564), 0), 100000000, 0, -5563), 0), 100000000, 0, -5562), 0), 100000000, 0, -5561), (Tag5 ("object_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -5560), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -5559); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5558), 0), 100000000, 0, -5557), 0), 100000000, 0, -5556), 0), 100000000, 0, -5555), (Tag5 ("pattern", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -5508), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -5507); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5506), 0), 100000000, 0, -5505), 0), 100000000, 0, -5504), 0), 100000000, 0, -5503), (Tag5 ("pattern_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -5502), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -5501); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5500), 0), 100000000, 0, -5499), 0), 100000000, 0, -5498), 0), 100000000, 0, -5497), (Tag5 ("expression", 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -5755), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -5754); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5753), 0), 100000000, 0, -5752), 0), 100000000, 0, -5751), 0), 100000000, 0, -5750), (Tag5 ("expression_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -5749), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -5748); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5747), 0), 100000000, 0, -5746), 0), 100000000, 0, -5745), 0), 100000000, 0, -5744), (Tag5 ("case", 1, (Tag10 ((Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -5922), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -5921); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5920), 0), 100000000, 0, -5919), 0), 100000000, 0, -5918), 0), 100000000, 0, -5917), (Tag5 ("letop", 1, (Tag10 ((Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -5672), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -5671); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5670), 0), 100000000, 0, -5669), 0), 100000000, 0, -5668), 0), 100000000, 0, -5667), (Tag5 ("binding_op", 1, (Tag10 ((Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -5934), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -5933); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5932), 0), 100000000, 0, -5931), 0), 100000000, 0, -5930), 0), 100000000, 0, -5929), (Tag5 ("value_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -5376), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -5375); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5374), 0), 100000000, 0, -5373), 0), 100000000, 0, -5372), 0), 100000000, 0, -5371), (Tag5 ("type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -5406), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -5405); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5404), 0), 100000000, 0, -5403), 0), 100000000, 0, -5402), 0), 100000000, 0, -5401), (Tag5 ("type_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -5388), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -5387); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5386), 0), 100000000, 0, -5385), 0), 100000000, 0, -5384), 0), 100000000, 0, -5383), (Tag5 ("label_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -5678), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -5677); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5676), 0), 100000000, 0, -5675), 0), 100000000, 0, -5674), 0), 100000000, 0, -5673), (Tag5 ("constructor_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -5791), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -5790); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5789), 0), 100000000, 0, -5788), 0), 100000000, 0, -5787), 0), 100000000, 0, -5786), (Tag5 ("constructor_arguments", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -5797), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -5796); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5795), 0), 100000000, 0, -5794), 0), 100000000, 0, -5793), 0), 100000000, 0, -5792), (Tag5 ("type_extension", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -5394), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -5393); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5392), 0), 100000000, 0, -5391), 0), 100000000, 0, -5390), 0), 100000000, 0, -5389), (Tag5 ("extension_constructor", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -5737), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -5736); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5735), 0), 100000000, 0, -5734), 0), 100000000, 0, -5733), 0), 100000000, 0, -5732), (Tag5 ("type_exception", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -5400), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -5399); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5398), 0), 100000000, 0, -5397), 0), 100000000, 0, -5396), 0), 100000000, 0, -5395), (Tag5 ("extension_constructor_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -5731), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -5730); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5729), 0), 100000000, 0, -5728), 0), 100000000, 0, -5727), 0), 100000000, 0, -5726), (Tag5 ("class_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -5839), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -5838); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5837), 0), 100000000, 0, -5836), 0), 100000000, 0, -5835), 0), 100000000, 0, -5834), (Tag5 ("class_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -5827), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -5826); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5825), 0), 100000000, 0, -5824), 0), 100000000, 0, -5823), 0), 100000000, 0, -5822), (Tag5 ("class_signature", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -5851), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -5850); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5849), 0), 100000000, 0, -5848), 0), 100000000, 0, -5847), 0), 100000000, 0, -5846), (Tag5 ("class_type_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -5821), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -5820); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5819), 0), 100000000, 0, -5818), 0), 100000000, 0, -5817), 0), 100000000, 0, -5816), (Tag5 ("class_type_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -5815), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -5814); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5813), 0), 100000000, 0, -5812), 0), 100000000, 0, -5811), 0), 100000000, 0, -5810), (Tag5 ("class_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -5853), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag9 (("a")), 100000000, 0, -5853); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5862), 0), 100000000, 0, -5861), 0), 100000000, 0, -5860), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -5853)], (0)), 100000000, 0, -5859), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -5853)], (0)), 100000000, 0, -5858); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5857), 0), 100000000, 0, -5856), 0), 100000000, 0, -5855), 0), 100000000, 0, -5854), [(Tag9 (("a")), 100000000, 0, -5853)]), 100000000, 0, -5852), (Tag5 ("class_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -5898), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -5897); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5896), 0), 100000000, 0, -5895), 0), 100000000, 0, -5894), 0), 100000000, 0, -5893), (Tag5 ("class_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -5833), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -5832); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5831), 0), 100000000, 0, -5830), 0), 100000000, 0, -5829), 0), 100000000, 0, -5828), (Tag5 ("class_expr", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -5892), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -5891); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5890), 0), 100000000, 0, -5889), 0), 100000000, 0, -5888), 0), 100000000, 0, -5887), (Tag5 ("class_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -5886), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -5885); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5884), 0), 100000000, 0, -5883), 0), 100000000, 0, -5882), 0), 100000000, 0, -5881), (Tag5 ("class_structure", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -5845), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -5844); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5843), 0), 100000000, 0, -5842), 0), 100000000, 0, -5841), 0), 100000000, 0, -5840), (Tag5 ("class_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -5880), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -5879); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5878), 0), 100000000, 0, -5877), 0), 100000000, 0, -5876), 0), 100000000, 0, -5875), (Tag5 ("class_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -5874), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -5873); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5872), 0), 100000000, 0, -5871), 0), 100000000, 0, -5870), 0), 100000000, 0, -5869), (Tag5 ("class_field_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -5868), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -5867); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5866), 0), 100000000, 0, -5865), 0), 100000000, 0, -5864), 0), 100000000, 0, -5863), (Tag5 ("class_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -5904), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -5903); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5902), 0), 100000000, 0, -5901), 0), 100000000, 0, -5900), 0), 100000000, 0, -5899), (Tag5 ("module_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -5590), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -5589); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5588), 0), 100000000, 0, -5587), 0), 100000000, 0, -5586), 0), 100000000, 0, -5585), (Tag5 ("module_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -5578), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -5577); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5576), 0), 100000000, 0, -5575), 0), 100000000, 0, -5574), 0), 100000000, 0, -5573), (Tag5 ("functor_parameter", 1, (Tag10 ((Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -5725), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -5724); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5723), 0), 100000000, 0, -5722), 0), 100000000, 0, -5721), 0), 100000000, 0, -5720), (Tag5 ("signature", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -5460), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -5459); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5458), 0), 100000000, 0, -5457), 0), 100000000, 0, -5456), 0), 100000000, 0, -5455), (Tag5 ("signature_item", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -5454), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -5453); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5452), 0), 100000000, 0, -5451), 0), 100000000, 0, -5450), 0), 100000000, 0, -5449), (Tag5 ("signature_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -5448), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -5447); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5446), 0), 100000000, 0, -5445), 0), 100000000, 0, -5444), 0), 100000000, 0, -5443), (Tag5 ("module_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -5614), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -5613); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5612), 0), 100000000, 0, -5611), 0), 100000000, 0, -5610), 0), 100000000, 0, -5609), (Tag5 ("module_substitution", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -5596), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -5595); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5594), 0), 100000000, 0, -5593), 0), 100000000, 0, -5592), 0), 100000000, 0, -5591), (Tag5 ("module_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -5584), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -5583); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5582), 0), 100000000, 0, -5581), 0), 100000000, 0, -5580), 0), 100000000, 0, -5579), (Tag5 ("open_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -5533), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag9 (("a")), 100000000, 0, -5533); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5542), 0), 100000000, 0, -5541), 0), 100000000, 0, -5540), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -5533)], (0)), 100000000, 0, -5539), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -5533)], (0)), 100000000, 0, -5538); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5537), 0), 100000000, 0, -5536), 0), 100000000, 0, -5535), 0), 100000000, 0, -5534), [(Tag9 (("a")), 100000000, 0, -5533)]), 100000000, 0, -5532), (Tag5 ("open_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -5548), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -5547); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5546), 0), 100000000, 0, -5545), 0), 100000000, 0, -5544), 0), 100000000, 0, -5543), (Tag5 ("open_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -5554), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -5553); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5552), 0), 100000000, 0, -5551), 0), 100000000, 0, -5550), 0), 100000000, 0, -5549), (Tag5 ("include_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -5698), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag9 (("a")), 100000000, 0, -5698); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5707), 0), 100000000, 0, -5706), 0), 100000000, 0, -5705), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -5698)], (0)), 100000000, 0, -5704), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -5698)], (0)), 100000000, 0, -5703); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5702), 0), 100000000, 0, -5701), 0), 100000000, 0, -5700), 0), 100000000, 0, -5699), [(Tag9 (("a")), 100000000, 0, -5698)]), 100000000, 0, -5697), (Tag5 ("include_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -5713), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -5712); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5711), 0), 100000000, 0, -5710), 0), 100000000, 0, -5709), 0), 100000000, 0, -5708), (Tag5 ("include_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -5719), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -5718); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5717), 0), 100000000, 0, -5716), 0), 100000000, 0, -5715), 0), 100000000, 0, -5714), (Tag5 ("with_constraint", 1, (Tag10 ((Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -5358), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -5356); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5355), 0), 100000000, 0, -5354), 0), 100000000, 0, -5353), 0), 100000000, 0, -5352), (Tag5 ("module_expr", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -5608), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -5607); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5606), 0), 100000000, 0, -5605), 0), 100000000, 0, -5604), 0), 100000000, 0, -5603), (Tag5 ("module_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -5602), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -5601); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5600), 0), 100000000, 0, -5599), 0), 100000000, 0, -5598), 0), 100000000, 0, -5597), (Tag5 ("structure", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -5436), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -5435); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5434), 0), 100000000, 0, -5433), 0), 100000000, 0, -5432), 0), 100000000, 0, -5431), (Tag5 ("structure_item", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -5430), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -5429); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5428), 0), 100000000, 0, -5427), 0), 100000000, 0, -5426), 0), 100000000, 0, -5425), (Tag5 ("structure_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -5424), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -5423); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5422), 0), 100000000, 0, -5421), 0), 100000000, 0, -5420), 0), 100000000, 0, -5419), (Tag5 ("value_binding", 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -5382), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -5381); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5380), 0), 100000000, 0, -5379), 0), 100000000, 0, -5378), 0), 100000000, 0, -5377), (Tag5 ("module_binding", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -5620), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -5619); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5618), 0), 100000000, 0, -5617), 0), 100000000, 0, -5616), 0), 100000000, 0, -5615), (Tag5 ("toplevel_phrase", 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -5412), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -5411); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5410), 0), 100000000, 0, -5409), 0), 100000000, 0, -5408), 0), 100000000, 0, -5407), (Tag5 ("toplevel_directive", 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -5418), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -5417); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5416), 0), 100000000, 0, -5415), 0), 100000000, 0, -5414), 0), 100000000, 0, -5413), (Tag5 ("directive_argument", 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -5767), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -5766); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5765), 0), 100000000, 0, -5764), 0), 100000000, 0, -5763), 0), 100000000, 0, -5762), (Tag5 ("directive_argument_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -5761), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -5760); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5759), 0), 100000000, 0, -5758), 0), 100000000, 0, -5757), 0), 100000000, 0, -5756), (Tag5 ("cases", 1, (Tag10 ((Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -5916), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -5915); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5914), 0), 100000000, 0, -5913), 0), 100000000, 0, -5912), 0), 100000000, 0, -5911), ((0), 100000000, 0, -6644)), 100000000, 0, -6740)), 100000000, 0, -6739)), 100000000, 0, -6738)), 100000000, 0, -6737)), 100000000, 0, -6736)), 100000000, 0, -6735)), 100000000, 0, -6734)), 100000000, 0, -6733)), 100000000, 0, -6732)), 100000000, 0, -6731)), 100000000, 0, -6730)), 100000000, 0, -6729)), 100000000, 0, -6728)), 100000000, 0, -6727)), 100000000, 0, -6726)), 100000000, 0, -6725)), 100000000, 0, -6724)), 100000000, 0, -6723)), 100000000, 0, -6722)), 100000000, 0, -6721)), 100000000, 0, -6720)), 100000000, 0, -6719)), 100000000, 0, -6718)), 100000000, 0, -6717)), 100000000, 0, -6716)), 100000000, 0, -6715)), 100000000, 0, -6714)), 100000000, 0, -6713)), 100000000, 0, -6712)), 100000000, 0, -6711)), 100000000, 0, -6710)), 100000000, 0, -6709)), 100000000, 0, -6708)), 100000000, 0, -6707)), 100000000, 0, -6706)), 100000000, 0, -6705)), 100000000, 0, -6704)), 100000000, 0, -6703)), 100000000, 0, -6702)), 100000000, 0, -6701)), 100000000, 0, -6700)), 100000000, 0, -6699)), 100000000, 0, -6698)), 100000000, 0, -6697)), 100000000, 0, -6696)), 100000000, 0, -6695)), 100000000, 0, -6694)), 100000000, 0, -6693)), 100000000, 0, -6692)), 100000000, 0, -6691)), 100000000, 0, -6690)), 100000000, 0, -6689)), 100000000, 0, -6688)), 100000000, 0, -6687)), 100000000, 0, -6686)), 100000000, 0, -6685)), 100000000, 0, -6684)), 100000000, 0, -6683)), 100000000, 0, -6682)), 100000000, 0, -6681)), 100000000, 0, -6680)), 100000000, 0, -6679)), 100000000, 0, -6678)), 100000000, 0, -6677)), 100000000, 0, -6676)), 100000000, 0, -6675)), 100000000, 0, -6674)), 100000000, 0, -6673)), 100000000, 0, -6672)), 100000000, 0, -6671)), 100000000, 0, -6670)), 100000000, 0, -6669)), 100000000, 0, -6668)), 100000000, 0, -6667)), 100000000, 0, -6666)), 100000000, 0, -6665)), 100000000, 0, -6664)), 100000000, 0, -6663)), 100000000, 0, -6662)), 100000000, 0, -6661)), 100000000, 0, -6660)), 100000000, 0, -6659)), 100000000, 0, -6658)), 100000000, 0, -6657)), 100000000, 0, -6656)), 100000000, 0, -6655)), 100000000, 0, -6654)), 100000000, 0, -6653)), 100000000, 0, -6652)), 100000000, 0, -6651)), 100000000, 0, -6650)), 100000000, 0, -6649)), 100000000, 0, -6648)), 100000000, 0, -6647)), 100000000, 0, -6646), (([(("fold_map", 7453)); ((0), 100000000, 0, -6644); ((("acc")), 100000000, 0, -5357)]))), 100000000, 0, -6645), ((0), 100000000, 0, -6644), 0, (((((0, "arg_label", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -6055), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -6054); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6053), 0), 100000000, 0, -6052), 0), 100000000, 0, -6051), 0), 100000000, 0, -6050)), 0, 1), "attribute", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -6061), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -6060); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6059), 0), 100000000, 0, -6058), 0), 100000000, 0, -6057), 0), 100000000, 0, -6056)), ((0, "attributes", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -6067), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -6066); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6065), 0), 100000000, 0, -6064), 0), 100000000, 0, -6063), 0), 100000000, 0, -6062)), (0, "binding_op", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -6073), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -6072); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6071), 0), 100000000, 0, -6070), 0), 100000000, 0, -6069), 0), 100000000, 0, -6068)), 0, 1), 2), "bool", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -6079), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -6078); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6077), 0), 100000000, 0, -6076), 0), 100000000, 0, -6075), 0), 100000000, 0, -6074)), (0, "case", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -6085), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -6084); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6083), 0), 100000000, 0, -6082), 0), 100000000, 0, -6081), 0), 100000000, 0, -6080)), (0, "cases", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -6091), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -6090); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6089), 0), 100000000, 0, -6088), 0), 100000000, 0, -6087), 0), 100000000, 0, -6086)), 0, 1), 2), 3), 4), "char", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -6097), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -6096); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6095), 0), 100000000, 0, -6094), 0), 100000000, 0, -6093), 0), 100000000, 0, -6092)), ((((((0, "class_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -6103), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -6102); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6101), 0), 100000000, 0, -6100), 0), 100000000, 0, -6099), 0), 100000000, 0, -6098)), 0, 1), "class_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -6109), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -6108); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6107), 0), 100000000, 0, -6106), 0), 100000000, 0, -6105), 0), 100000000, 0, -6104)), 0, 2), "class_expr", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -6115), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -6114); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6113), 0), 100000000, 0, -6112), 0), 100000000, 0, -6111), 0), 100000000, 0, -6110)), (0, "class_expr_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -6121), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -6120); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6119), 0), 100000000, 0, -6118), 0), 100000000, 0, -6117), 0), 100000000, 0, -6116)), 0, 1), 3), "class_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -6127), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -6126); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6125), 0), 100000000, 0, -6124), 0), 100000000, 0, -6123), 0), 100000000, 0, -6122)), ((0, "class_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -6133), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -6132); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6131), 0), 100000000, 0, -6130), 0), 100000000, 0, -6129), 0), 100000000, 0, -6128)), (0, "class_field_kind", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -6139), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -6138); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6137), 0), 100000000, 0, -6136), 0), 100000000, 0, -6135), 0), 100000000, 0, -6134)), 0, 1), 2), "class_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -5853), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag9 (("a")), 100000000, 0, -5853); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6149), 0), 100000000, 0, -6148), 0), 100000000, 0, -6147), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -5853)], (0)), 100000000, 0, -6146), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -5853)], (0)), 100000000, 0, -6145); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6144), 0), 100000000, 0, -6143), 0), 100000000, 0, -6142), 0), 100000000, 0, -6141), [(Tag9 (("a")), 100000000, 0, -5853)]), 100000000, 0, -6140)), 0, 3), 4), "class_signature", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -6155), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -6154); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6153), 0), 100000000, 0, -6152), 0), 100000000, 0, -6151), 0), 100000000, 0, -6150)), ((0, "class_structure", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -6161), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -6160); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6159), 0), 100000000, 0, -6158), 0), 100000000, 0, -6157), 0), 100000000, 0, -6156)), 0, 1), "class_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -6167), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -6166); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6165), 0), 100000000, 0, -6164), 0), 100000000, 0, -6163), 0), 100000000, 0, -6162)), (0, "class_type_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -6173), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -6172); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6171), 0), 100000000, 0, -6170), 0), 100000000, 0, -6169), 0), 100000000, 0, -6168)), 0, 1), 2), 5), "class_type_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -6179), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -6178); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6177), 0), 100000000, 0, -6176), 0), 100000000, 0, -6175), 0), 100000000, 0, -6174)), (((0, "class_type_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -6185), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -6184); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6183), 0), 100000000, 0, -6182), 0), 100000000, 0, -6181), 0), 100000000, 0, -6180)), (0, "class_type_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -6191), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -6190); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6189), 0), 100000000, 0, -6188), 0), 100000000, 0, -6187), 0), 100000000, 0, -6186)), 0, 1), 2), "closed_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -6197), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -6196); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6195), 0), 100000000, 0, -6194), 0), 100000000, 0, -6193), 0), 100000000, 0, -6192)), 0, 3), "constant", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -6203), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -6202); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6201), 0), 100000000, 0, -6200), 0), 100000000, 0, -6199), 0), 100000000, 0, -6198)), (((0, "constructor_arguments", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -6209), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -6208); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6207), 0), 100000000, 0, -6206), 0), 100000000, 0, -6205), 0), 100000000, 0, -6204)), 0, 1), "constructor_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -6215), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -6214); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6213), 0), 100000000, 0, -6212), 0), 100000000, 0, -6211), 0), 100000000, 0, -6210)), 0, 2), "core_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -6221), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -6220); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6219), 0), 100000000, 0, -6218), 0), 100000000, 0, -6217), 0), 100000000, 0, -6216)), (0, "core_type_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -6227), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -6226); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6225), 0), 100000000, 0, -6224), 0), 100000000, 0, -6223), 0), 100000000, 0, -6222)), 0, 1), 3), 4), 6), 7), "direction_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -6233), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -6232); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6231), 0), 100000000, 0, -6230), 0), 100000000, 0, -6229), 0), 100000000, 0, -6228)), ((((0, "directive_argument", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -6239), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -6238); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6237), 0), 100000000, 0, -6236), 0), 100000000, 0, -6235), 0), 100000000, 0, -6234)), (0, "directive_argument_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -6245), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -6244); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6243), 0), 100000000, 0, -6242), 0), 100000000, 0, -6241), 0), 100000000, 0, -6240)), 0, 1), 2), "expression", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -6251), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -6250); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6249), 0), 100000000, 0, -6248), 0), 100000000, 0, -6247), 0), 100000000, 0, -6246)), (0, "expression_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -6257), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -6256); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6255), 0), 100000000, 0, -6254), 0), 100000000, 0, -6253), 0), 100000000, 0, -6252)), 0, 1), 3), "extension", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -6263), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -6262); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6261), 0), 100000000, 0, -6260), 0), 100000000, 0, -6259), 0), 100000000, 0, -6258)), (((0, "extension_constructor", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -6269), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -6268); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6267), 0), 100000000, 0, -6266), 0), 100000000, 0, -6265), 0), 100000000, 0, -6264)), 0, 1), "extension_constructor_kind", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -6275), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -6274); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6273), 0), 100000000, 0, -6272), 0), 100000000, 0, -6271), 0), 100000000, 0, -6270)), 0, 2), "functor_parameter", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -6281), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -6280); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6279), 0), 100000000, 0, -6278), 0), 100000000, 0, -6277), 0), 100000000, 0, -6276)), (((0, "include_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -6287), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -6286); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6285), 0), 100000000, 0, -6284), 0), 100000000, 0, -6283), 0), 100000000, 0, -6282)), 0, 1), "include_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -6293), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -6292); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6291), 0), 100000000, 0, -6290), 0), 100000000, 0, -6289), 0), 100000000, 0, -6288)), 0, 2), "include_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -5698), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag9 (("a")), 100000000, 0, -5698); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6303), 0), 100000000, 0, -6302), 0), 100000000, 0, -6301), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -5698)], (0)), 100000000, 0, -6300), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -5698)], (0)), 100000000, 0, -6299); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6298), 0), 100000000, 0, -6297), 0), 100000000, 0, -6296), 0), 100000000, 0, -6295), [(Tag9 (("a")), 100000000, 0, -5698)]), 100000000, 0, -6294)), (0, "injectivity", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -6309), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -6308); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6307), 0), 100000000, 0, -6306), 0), 100000000, 0, -6305), 0), 100000000, 0, -6304)), 0, 1), 3), 4), 5), "int", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -6315), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -6314); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6313), 0), 100000000, 0, -6312), 0), 100000000, 0, -6311), 0), 100000000, 0, -6310)), ((0, "label", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -6321), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -6320); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6319), 0), 100000000, 0, -6318), 0), 100000000, 0, -6317), 0), 100000000, 0, -6316)), ((0, "label_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -6327), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -6326); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6325), 0), 100000000, 0, -6324), 0), 100000000, 0, -6323), 0), 100000000, 0, -6322)), 0, 1), "letop", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -6333), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -6332); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6331), 0), 100000000, 0, -6330), 0), 100000000, 0, -6329), 0), 100000000, 0, -6328)), 0, 2), 3), "list", (0, 0, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -5657), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag9 (("a")), 100000000, 0, -5657); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6343), 0), 100000000, 0, -6342), 0), 100000000, 0, -6341), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -5657)], (0)), 100000000, 0, -6340), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -5657)], (0)), 100000000, 0, -6339); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6338), 0), 100000000, 0, -6337), 0), 100000000, 0, -6336), 0), 100000000, 0, -6335), [(Tag9 (("a")), 100000000, 0, -5657)]), 100000000, 0, -6334)), (0, "loc", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -5646), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag9 (("a")), 100000000, 0, -5646); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6353), 0), 100000000, 0, -6352), 0), 100000000, 0, -6351), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -5646)], (0)), 100000000, 0, -6350), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -5646)], (0)), 100000000, 0, -6349); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6348), 0), 100000000, 0, -6347), 0), 100000000, 0, -6346), 0), 100000000, 0, -6345), [(Tag9 (("a")), 100000000, 0, -5646)]), 100000000, 0, -6344)), 0, 1), 4), 6), 8), "location", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -6359), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -6358); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6357), 0), 100000000, 0, -6356), 0), 100000000, 0, -6355), 0), 100000000, 0, -6354)), (((((0, "location_stack", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -6365), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -6364); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6363), 0), 100000000, 0, -6362), 0), 100000000, 0, -6361), 0), 100000000, 0, -6360)), 0, 1), "longident", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -6371), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -6370); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6369), 0), 100000000, 0, -6368), 0), 100000000, 0, -6367), 0), 100000000, 0, -6366)), 0, 2), "longident_loc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -6377), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -6376); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6375), 0), 100000000, 0, -6374), 0), 100000000, 0, -6373), 0), 100000000, 0, -6372)), ((((0, "module_binding", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -6383), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -6382); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6381), 0), 100000000, 0, -6380), 0), 100000000, 0, -6379), 0), 100000000, 0, -6378)), 0, 1), "module_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -6389), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -6388); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6387), 0), 100000000, 0, -6386), 0), 100000000, 0, -6385), 0), 100000000, 0, -6384)), 0, 2), "module_expr", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -6395), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -6394); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6393), 0), 100000000, 0, -6392), 0), 100000000, 0, -6391), 0), 100000000, 0, -6390)), ((0, "module_expr_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -6401), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -6400); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6399), 0), 100000000, 0, -6398), 0), 100000000, 0, -6397), 0), 100000000, 0, -6396)), 0, 1), "module_substitution", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -6407), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -6406); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6405), 0), 100000000, 0, -6404), 0), 100000000, 0, -6403), 0), 100000000, 0, -6402)), 0, 2), 3), "module_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -6413), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -6412); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6411), 0), 100000000, 0, -6410), 0), 100000000, 0, -6409), 0), 100000000, 0, -6408)), ((0, "module_type_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -6419), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -6418); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6417), 0), 100000000, 0, -6416), 0), 100000000, 0, -6415), 0), 100000000, 0, -6414)), 0, 1), "module_type_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -6425), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -6424); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6423), 0), 100000000, 0, -6422), 0), 100000000, 0, -6421), 0), 100000000, 0, -6420)), 0, 2), 4), 5), "mutable_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -6431), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -6430); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6429), 0), 100000000, 0, -6428), 0), 100000000, 0, -6427), 0), 100000000, 0, -6426)), ((0, "object_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -6437), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -6436); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6435), 0), 100000000, 0, -6434), 0), 100000000, 0, -6433), 0), 100000000, 0, -6432)), 0, 1), "object_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -6443), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -6442); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6441), 0), 100000000, 0, -6440), 0), 100000000, 0, -6439), 0), 100000000, 0, -6438)), (((0, "open_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -6449), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -6448); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6447), 0), 100000000, 0, -6446), 0), 100000000, 0, -6445), 0), 100000000, 0, -6444)), 0, 1), "open_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -6455), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -6454); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6453), 0), 100000000, 0, -6452), 0), 100000000, 0, -6451), 0), 100000000, 0, -6450)), 0, 2), "open_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -5533), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag9 (("a")), 100000000, 0, -5533); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6465), 0), 100000000, 0, -6464), 0), 100000000, 0, -6463), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -5533)], (0)), 100000000, 0, -6462), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -5533)], (0)), 100000000, 0, -6461); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6460), 0), 100000000, 0, -6459), 0), 100000000, 0, -6458), 0), 100000000, 0, -6457), [(Tag9 (("a")), 100000000, 0, -5533)]), 100000000, 0, -6456)), 0, 3), 4), 6), "option", (0, 0, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -5522), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag9 (("a")), 100000000, 0, -5522); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6475), 0), 100000000, 0, -6474), 0), 100000000, 0, -6473), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -5522)], (0)), 100000000, 0, -6472), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -5522)], (0)), 100000000, 0, -6471); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6470), 0), 100000000, 0, -6469), 0), 100000000, 0, -6468), 0), 100000000, 0, -6467), [(Tag9 (("a")), 100000000, 0, -5522)]), 100000000, 0, -6466)), (((((0, "override_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -6481), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -6480); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6479), 0), 100000000, 0, -6478), 0), 100000000, 0, -6477), 0), 100000000, 0, -6476)), 0, 1), "package_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -6487), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -6486); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6485), 0), 100000000, 0, -6484), 0), 100000000, 0, -6483), 0), 100000000, 0, -6482)), (0, "pattern", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -6493), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -6492); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6491), 0), 100000000, 0, -6490), 0), 100000000, 0, -6489), 0), 100000000, 0, -6488)), (0, "pattern_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -6499), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -6498); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6497), 0), 100000000, 0, -6496), 0), 100000000, 0, -6495), 0), 100000000, 0, -6494)), 0, 1), 2), 3), "payload", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -6505), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -6504); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6503), 0), 100000000, 0, -6502), 0), 100000000, 0, -6501), 0), 100000000, 0, -6500)), (0, "position", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -6511), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -6510); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6509), 0), 100000000, 0, -6508), 0), 100000000, 0, -6507), 0), 100000000, 0, -6506)), (0, "private_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -6517), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -6516); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6515), 0), 100000000, 0, -6514), 0), 100000000, 0, -6513), 0), 100000000, 0, -6512)), 0, 1), 2), 4), "rec_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -6523), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -6522); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6521), 0), 100000000, 0, -6520), 0), 100000000, 0, -6519), 0), 100000000, 0, -6518)), ((0, "row_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -6529), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -6528); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6527), 0), 100000000, 0, -6526), 0), 100000000, 0, -6525), 0), 100000000, 0, -6524)), 0, 1), "row_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -6535), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -6534); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6533), 0), 100000000, 0, -6532), 0), 100000000, 0, -6531), 0), 100000000, 0, -6530)), (0, "signature", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -6541), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -6540); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6539), 0), 100000000, 0, -6538), 0), 100000000, 0, -6537), 0), 100000000, 0, -6536)), (0, "signature_item", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -6547), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -6546); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6545), 0), 100000000, 0, -6544), 0), 100000000, 0, -6543), 0), 100000000, 0, -6542)), (0, "signature_item_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -6553), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -6552); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6551), 0), 100000000, 0, -6550), 0), 100000000, 0, -6549), 0), 100000000, 0, -6548)), 0, 1), 2), 3), 4), 5), "string", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6559), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6558); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6557), 0), 100000000, 0, -6556), 0), 100000000, 0, -6555), 0), 100000000, 0, -6554)), ((((0, "structure", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -6565), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -6564); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6563), 0), 100000000, 0, -6562), 0), 100000000, 0, -6561), 0), 100000000, 0, -6560)), 0, 1), "structure_item", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -6571), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -6570); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6569), 0), 100000000, 0, -6568), 0), 100000000, 0, -6567), 0), 100000000, 0, -6566)), (0, "structure_item_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -6577), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -6576); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6575), 0), 100000000, 0, -6574), 0), 100000000, 0, -6573), 0), 100000000, 0, -6572)), ((0, "toplevel_directive", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -6583), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -6582); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6581), 0), 100000000, 0, -6580), 0), 100000000, 0, -6579), 0), 100000000, 0, -6578)), 0, 1), "toplevel_phrase", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -6589), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -6588); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6587), 0), 100000000, 0, -6586), 0), 100000000, 0, -6585), 0), 100000000, 0, -6584)), 0, 2), 3), 4), "type_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -6595), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -6594); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6593), 0), 100000000, 0, -6592), 0), 100000000, 0, -6591), 0), 100000000, 0, -6590)), ((0, "type_exception", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -6601), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -6600); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6599), 0), 100000000, 0, -6598), 0), 100000000, 0, -6597), 0), 100000000, 0, -6596)), 0, 1), "type_extension", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -6607), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -6606); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6605), 0), 100000000, 0, -6604), 0), 100000000, 0, -6603), 0), 100000000, 0, -6602)), 0, 2), 5), "type_kind", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -6613), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -6612); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6611), 0), 100000000, 0, -6610), 0), 100000000, 0, -6609), 0), 100000000, 0, -6608)), (((0, "value_binding", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -6619), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -6618); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6617), 0), 100000000, 0, -6616), 0), 100000000, 0, -6615), 0), 100000000, 0, -6614)), 0, 1), "value_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -6625), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -6624); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6623), 0), 100000000, 0, -6622), 0), 100000000, 0, -6621), 0), 100000000, 0, -6620)), 0, 2), "variance", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -6631), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -6630); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6629), 0), 100000000, 0, -6628), 0), 100000000, 0, -6627), 0), 100000000, 0, -6626)), (0, "virtual_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -6637), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -6636); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6635), 0), 100000000, 0, -6634), 0), 100000000, 0, -6633), 0), 100000000, 0, -6632)), (0, "with_constraint", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -6643), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -6642); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6641), 0), 100000000, 0, -6640), 0), 100000000, 0, -6639), 0), 100000000, 0, -6638)), 0, 1), 2), 3), 6), 7), 8), 9))), (("fold_map", 7453)), 0, [63], (("ast/ast.ml", 4279, 158265, 158265), ("ast/ast.ml", 5620, 213077, 213082), 0), 0, Tag1 ("Ppxlib_ast__Ast", 3377)), 1, 0); Tag6 (("fold_map", 7452), ([((("acc")), 100000000, 0, -5357)], Tag1 (((Tag4 ((Tag5 ("bool", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5928), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5927); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5926), 0), 100000000, 0, -5925), 0), 100000000, 0, -5924), 0), 100000000, 0, -5923), (Tag5 ("char", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -5910), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -5909); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5908), 0), 100000000, 0, -5907), 0), 100000000, 0, -5906), 0), 100000000, 0, -5905), (Tag5 ("int", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -5690), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -5689); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5688), 0), 100000000, 0, -5687), 0), 100000000, 0, -5686), 0), 100000000, 0, -5685), (Tag5 ("list", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -5657), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag9 (("a")), 100000000, 0, -5657); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5666), 0), 100000000, 0, -5665), 0), 100000000, 0, -5664), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -5657)], (0)), 100000000, 0, -5663), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -5657)], (0)), 100000000, 0, -5662); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5661), 0), 100000000, 0, -5660), 0), 100000000, 0, -5659), 0), 100000000, 0, -5658), [(Tag9 (("a")), 100000000, 0, -5657)]), 100000000, 0, -5656), (Tag5 ("option", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -5522), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag9 (("a")), 100000000, 0, -5522); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5531), 0), 100000000, 0, -5530), 0), 100000000, 0, -5529), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -5522)], (0)), 100000000, 0, -5528), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -5522)], (0)), 100000000, 0, -5527); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5526), 0), 100000000, 0, -5525), 0), 100000000, 0, -5524), 0), 100000000, 0, -5523), [(Tag9 (("a")), 100000000, 0, -5522)]), 100000000, 0, -5521), (Tag5 ("string", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5442), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5441); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5440), 0), 100000000, 0, -5439), 0), 100000000, 0, -5438), 0), 100000000, 0, -5437), (Tag5 ("position", 1, (Tag10 ((Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -5490), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -5489); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5488), 0), 100000000, 0, -5487), 0), 100000000, 0, -5486), 0), 100000000, 0, -5485), (Tag5 ("location", 1, (Tag10 ((Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -5644), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -5643); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5642), 0), 100000000, 0, -5641), 0), 100000000, 0, -5640), 0), 100000000, 0, -5639), (Tag5 ("location_stack", 1, (Tag10 ((Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -5638), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -5637); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5636), 0), 100000000, 0, -5635), 0), 100000000, 0, -5634), 0), 100000000, 0, -5633), (Tag5 ("loc", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -5646), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag9 (("a")), 100000000, 0, -5646); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5655), 0), 100000000, 0, -5654), 0), 100000000, 0, -5653), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -5646)], (0)), 100000000, 0, -5652), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -5646)], (0)), 100000000, 0, -5651); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5650), 0), 100000000, 0, -5649), 0), 100000000, 0, -5648), 0), 100000000, 0, -5647), [(Tag9 (("a")), 100000000, 0, -5646)]), 100000000, 0, -5645), (Tag5 ("longident", 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -5632), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -5631); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5630), 0), 100000000, 0, -5629), 0), 100000000, 0, -5628), 0), 100000000, 0, -5627), (Tag5 ("longident_loc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -5626), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -5625); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5624), 0), 100000000, 0, -5623), 0), 100000000, 0, -5622), 0), 100000000, 0, -5621), (Tag5 ("rec_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -5478), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -5477); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5476), 0), 100000000, 0, -5475), 0), 100000000, 0, -5474), 0), 100000000, 0, -5473), (Tag5 ("direction_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -5773), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -5772); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5771), 0), 100000000, 0, -5770), 0), 100000000, 0, -5769), 0), 100000000, 0, -5768), (Tag5 ("private_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -5484), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -5483); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5482), 0), 100000000, 0, -5481), 0), 100000000, 0, -5480), 0), 100000000, 0, -5479), (Tag5 ("mutable_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -5572), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -5571); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5570), 0), 100000000, 0, -5569), 0), 100000000, 0, -5568), 0), 100000000, 0, -5567), (Tag5 ("virtual_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -5364), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -5363); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5362), 0), 100000000, 0, -5361), 0), 100000000, 0, -5360), 0), 100000000, 0, -5359), (Tag5 ("override_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -5520), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -5519); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5518), 0), 100000000, 0, -5517), 0), 100000000, 0, -5516), 0), 100000000, 0, -5515), (Tag5 ("closed_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -5809), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -5808); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5807), 0), 100000000, 0, -5806), 0), 100000000, 0, -5805), 0), 100000000, 0, -5804), (Tag5 ("label", 1, (Tag10 ((Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -5684), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -5683); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5682), 0), 100000000, 0, -5681), 0), 100000000, 0, -5680), 0), 100000000, 0, -5679), (Tag5 ("arg_label", 1, (Tag10 ((Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -5952), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -5951); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5950), 0), 100000000, 0, -5949), 0), 100000000, 0, -5948), 0), 100000000, 0, -5947), (Tag5 ("variance", 1, (Tag10 ((Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -5370), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -5369); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5368), 0), 100000000, 0, -5367), 0), 100000000, 0, -5366), 0), 100000000, 0, -5365), (Tag5 ("injectivity", 1, (Tag10 ((Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -5696), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -5695); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5694), 0), 100000000, 0, -5693), 0), 100000000, 0, -5692), 0), 100000000, 0, -5691), (Tag5 ("constant", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -5803), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -5802); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5801), 0), 100000000, 0, -5800), 0), 100000000, 0, -5799), 0), 100000000, 0, -5798), (Tag5 ("attribute", 1, (Tag10 ((Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -5946), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -5945); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5944), 0), 100000000, 0, -5943), 0), 100000000, 0, -5942), 0), 100000000, 0, -5941), (Tag5 ("extension", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -5743), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -5742); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5741), 0), 100000000, 0, -5740), 0), 100000000, 0, -5739), 0), 100000000, 0, -5738), (Tag5 ("attributes", 1, (Tag10 ((Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -5940), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -5939); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5938), 0), 100000000, 0, -5937), 0), 100000000, 0, -5936), 0), 100000000, 0, -5935), (Tag5 ("payload", 1, (Tag10 ((Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -5496), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -5495); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5494), 0), 100000000, 0, -5493), 0), 100000000, 0, -5492), 0), 100000000, 0, -5491), (Tag5 ("core_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -5785), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -5784); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5783), 0), 100000000, 0, -5782), 0), 100000000, 0, -5781), 0), 100000000, 0, -5780), (Tag5 ("core_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -5779), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -5778); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5777), 0), 100000000, 0, -5776), 0), 100000000, 0, -5775), 0), 100000000, 0, -5774), (Tag5 ("package_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -5514), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -5513); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5512), 0), 100000000, 0, -5511), 0), 100000000, 0, -5510), 0), 100000000, 0, -5509), (Tag5 ("row_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -5472), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -5471); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5470), 0), 100000000, 0, -5469), 0), 100000000, 0, -5468), 0), 100000000, 0, -5467), (Tag5 ("row_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -5466), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -5465); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5464), 0), 100000000, 0, -5463), 0), 100000000, 0, -5462), 0), 100000000, 0, -5461), (Tag5 ("object_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -5566), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -5565); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5564), 0), 100000000, 0, -5563), 0), 100000000, 0, -5562), 0), 100000000, 0, -5561), (Tag5 ("object_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -5560), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -5559); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5558), 0), 100000000, 0, -5557), 0), 100000000, 0, -5556), 0), 100000000, 0, -5555), (Tag5 ("pattern", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -5508), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -5507); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5506), 0), 100000000, 0, -5505), 0), 100000000, 0, -5504), 0), 100000000, 0, -5503), (Tag5 ("pattern_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -5502), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -5501); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5500), 0), 100000000, 0, -5499), 0), 100000000, 0, -5498), 0), 100000000, 0, -5497), (Tag5 ("expression", 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -5755), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -5754); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5753), 0), 100000000, 0, -5752), 0), 100000000, 0, -5751), 0), 100000000, 0, -5750), (Tag5 ("expression_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -5749), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -5748); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5747), 0), 100000000, 0, -5746), 0), 100000000, 0, -5745), 0), 100000000, 0, -5744), (Tag5 ("case", 1, (Tag10 ((Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -5922), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -5921); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5920), 0), 100000000, 0, -5919), 0), 100000000, 0, -5918), 0), 100000000, 0, -5917), (Tag5 ("letop", 1, (Tag10 ((Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -5672), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -5671); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5670), 0), 100000000, 0, -5669), 0), 100000000, 0, -5668), 0), 100000000, 0, -5667), (Tag5 ("binding_op", 1, (Tag10 ((Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -5934), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -5933); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5932), 0), 100000000, 0, -5931), 0), 100000000, 0, -5930), 0), 100000000, 0, -5929), (Tag5 ("value_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -5376), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -5375); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5374), 0), 100000000, 0, -5373), 0), 100000000, 0, -5372), 0), 100000000, 0, -5371), (Tag5 ("type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -5406), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -5405); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5404), 0), 100000000, 0, -5403), 0), 100000000, 0, -5402), 0), 100000000, 0, -5401), (Tag5 ("type_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -5388), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -5387); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5386), 0), 100000000, 0, -5385), 0), 100000000, 0, -5384), 0), 100000000, 0, -5383), (Tag5 ("label_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -5678), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -5677); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5676), 0), 100000000, 0, -5675), 0), 100000000, 0, -5674), 0), 100000000, 0, -5673), (Tag5 ("constructor_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -5791), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -5790); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5789), 0), 100000000, 0, -5788), 0), 100000000, 0, -5787), 0), 100000000, 0, -5786), (Tag5 ("constructor_arguments", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -5797), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -5796); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5795), 0), 100000000, 0, -5794), 0), 100000000, 0, -5793), 0), 100000000, 0, -5792), (Tag5 ("type_extension", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -5394), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -5393); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5392), 0), 100000000, 0, -5391), 0), 100000000, 0, -5390), 0), 100000000, 0, -5389), (Tag5 ("extension_constructor", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -5737), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -5736); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5735), 0), 100000000, 0, -5734), 0), 100000000, 0, -5733), 0), 100000000, 0, -5732), (Tag5 ("type_exception", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -5400), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -5399); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5398), 0), 100000000, 0, -5397), 0), 100000000, 0, -5396), 0), 100000000, 0, -5395), (Tag5 ("extension_constructor_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -5731), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -5730); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5729), 0), 100000000, 0, -5728), 0), 100000000, 0, -5727), 0), 100000000, 0, -5726), (Tag5 ("class_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -5839), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -5838); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5837), 0), 100000000, 0, -5836), 0), 100000000, 0, -5835), 0), 100000000, 0, -5834), (Tag5 ("class_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -5827), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -5826); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5825), 0), 100000000, 0, -5824), 0), 100000000, 0, -5823), 0), 100000000, 0, -5822), (Tag5 ("class_signature", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -5851), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -5850); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5849), 0), 100000000, 0, -5848), 0), 100000000, 0, -5847), 0), 100000000, 0, -5846), (Tag5 ("class_type_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -5821), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -5820); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5819), 0), 100000000, 0, -5818), 0), 100000000, 0, -5817), 0), 100000000, 0, -5816), (Tag5 ("class_type_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -5815), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -5814); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5813), 0), 100000000, 0, -5812), 0), 100000000, 0, -5811), 0), 100000000, 0, -5810), (Tag5 ("class_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -5853), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag9 (("a")), 100000000, 0, -5853); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5862), 0), 100000000, 0, -5861), 0), 100000000, 0, -5860), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -5853)], (0)), 100000000, 0, -5859), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -5853)], (0)), 100000000, 0, -5858); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5857), 0), 100000000, 0, -5856), 0), 100000000, 0, -5855), 0), 100000000, 0, -5854), [(Tag9 (("a")), 100000000, 0, -5853)]), 100000000, 0, -5852), (Tag5 ("class_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -5898), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -5897); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5896), 0), 100000000, 0, -5895), 0), 100000000, 0, -5894), 0), 100000000, 0, -5893), (Tag5 ("class_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -5833), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -5832); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5831), 0), 100000000, 0, -5830), 0), 100000000, 0, -5829), 0), 100000000, 0, -5828), (Tag5 ("class_expr", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -5892), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -5891); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5890), 0), 100000000, 0, -5889), 0), 100000000, 0, -5888), 0), 100000000, 0, -5887), (Tag5 ("class_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -5886), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -5885); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5884), 0), 100000000, 0, -5883), 0), 100000000, 0, -5882), 0), 100000000, 0, -5881), (Tag5 ("class_structure", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -5845), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -5844); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5843), 0), 100000000, 0, -5842), 0), 100000000, 0, -5841), 0), 100000000, 0, -5840), (Tag5 ("class_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -5880), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -5879); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5878), 0), 100000000, 0, -5877), 0), 100000000, 0, -5876), 0), 100000000, 0, -5875), (Tag5 ("class_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -5874), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -5873); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5872), 0), 100000000, 0, -5871), 0), 100000000, 0, -5870), 0), 100000000, 0, -5869), (Tag5 ("class_field_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -5868), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -5867); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5866), 0), 100000000, 0, -5865), 0), 100000000, 0, -5864), 0), 100000000, 0, -5863), (Tag5 ("class_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -5904), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -5903); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5902), 0), 100000000, 0, -5901), 0), 100000000, 0, -5900), 0), 100000000, 0, -5899), (Tag5 ("module_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -5590), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -5589); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5588), 0), 100000000, 0, -5587), 0), 100000000, 0, -5586), 0), 100000000, 0, -5585), (Tag5 ("module_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -5578), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -5577); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5576), 0), 100000000, 0, -5575), 0), 100000000, 0, -5574), 0), 100000000, 0, -5573), (Tag5 ("functor_parameter", 1, (Tag10 ((Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -5725), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -5724); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5723), 0), 100000000, 0, -5722), 0), 100000000, 0, -5721), 0), 100000000, 0, -5720), (Tag5 ("signature", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -5460), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -5459); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5458), 0), 100000000, 0, -5457), 0), 100000000, 0, -5456), 0), 100000000, 0, -5455), (Tag5 ("signature_item", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -5454), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -5453); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5452), 0), 100000000, 0, -5451), 0), 100000000, 0, -5450), 0), 100000000, 0, -5449), (Tag5 ("signature_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -5448), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -5447); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5446), 0), 100000000, 0, -5445), 0), 100000000, 0, -5444), 0), 100000000, 0, -5443), (Tag5 ("module_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -5614), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -5613); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5612), 0), 100000000, 0, -5611), 0), 100000000, 0, -5610), 0), 100000000, 0, -5609), (Tag5 ("module_substitution", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -5596), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -5595); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5594), 0), 100000000, 0, -5593), 0), 100000000, 0, -5592), 0), 100000000, 0, -5591), (Tag5 ("module_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -5584), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -5583); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5582), 0), 100000000, 0, -5581), 0), 100000000, 0, -5580), 0), 100000000, 0, -5579), (Tag5 ("open_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -5533), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag9 (("a")), 100000000, 0, -5533); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5542), 0), 100000000, 0, -5541), 0), 100000000, 0, -5540), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -5533)], (0)), 100000000, 0, -5539), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -5533)], (0)), 100000000, 0, -5538); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5537), 0), 100000000, 0, -5536), 0), 100000000, 0, -5535), 0), 100000000, 0, -5534), [(Tag9 (("a")), 100000000, 0, -5533)]), 100000000, 0, -5532), (Tag5 ("open_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -5548), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -5547); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5546), 0), 100000000, 0, -5545), 0), 100000000, 0, -5544), 0), 100000000, 0, -5543), (Tag5 ("open_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -5554), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -5553); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5552), 0), 100000000, 0, -5551), 0), 100000000, 0, -5550), 0), 100000000, 0, -5549), (Tag5 ("include_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -5698), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag9 (("a")), 100000000, 0, -5698); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5707), 0), 100000000, 0, -5706), 0), 100000000, 0, -5705), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -5698)], (0)), 100000000, 0, -5704), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -5698)], (0)), 100000000, 0, -5703); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5702), 0), 100000000, 0, -5701), 0), 100000000, 0, -5700), 0), 100000000, 0, -5699), [(Tag9 (("a")), 100000000, 0, -5698)]), 100000000, 0, -5697), (Tag5 ("include_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -5713), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -5712); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5711), 0), 100000000, 0, -5710), 0), 100000000, 0, -5709), 0), 100000000, 0, -5708), (Tag5 ("include_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -5719), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -5718); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5717), 0), 100000000, 0, -5716), 0), 100000000, 0, -5715), 0), 100000000, 0, -5714), (Tag5 ("with_constraint", 1, (Tag10 ((Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -5358), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -5356); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5355), 0), 100000000, 0, -5354), 0), 100000000, 0, -5353), 0), 100000000, 0, -5352), (Tag5 ("module_expr", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -5608), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -5607); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5606), 0), 100000000, 0, -5605), 0), 100000000, 0, -5604), 0), 100000000, 0, -5603), (Tag5 ("module_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -5602), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -5601); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5600), 0), 100000000, 0, -5599), 0), 100000000, 0, -5598), 0), 100000000, 0, -5597), (Tag5 ("structure", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -5436), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -5435); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5434), 0), 100000000, 0, -5433), 0), 100000000, 0, -5432), 0), 100000000, 0, -5431), (Tag5 ("structure_item", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -5430), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -5429); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5428), 0), 100000000, 0, -5427), 0), 100000000, 0, -5426), 0), 100000000, 0, -5425), (Tag5 ("structure_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -5424), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -5423); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5422), 0), 100000000, 0, -5421), 0), 100000000, 0, -5420), 0), 100000000, 0, -5419), (Tag5 ("value_binding", 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -5382), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -5381); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5380), 0), 100000000, 0, -5379), 0), 100000000, 0, -5378), 0), 100000000, 0, -5377), (Tag5 ("module_binding", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -5620), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -5619); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5618), 0), 100000000, 0, -5617), 0), 100000000, 0, -5616), 0), 100000000, 0, -5615), (Tag5 ("toplevel_phrase", 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -5412), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -5411); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5410), 0), 100000000, 0, -5409), 0), 100000000, 0, -5408), 0), 100000000, 0, -5407), (Tag5 ("toplevel_directive", 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -5418), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -5417); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5416), 0), 100000000, 0, -5415), 0), 100000000, 0, -5414), 0), 100000000, 0, -5413), (Tag5 ("directive_argument", 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -5767), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -5766); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5765), 0), 100000000, 0, -5764), 0), 100000000, 0, -5763), 0), 100000000, 0, -5762), (Tag5 ("directive_argument_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -5761), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -5760); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5759), 0), 100000000, 0, -5758), 0), 100000000, 0, -5757), 0), 100000000, 0, -5756), (Tag5 ("cases", 1, (Tag10 ((Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -5916), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -5915); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5914), 0), 100000000, 0, -5913), 0), 100000000, 0, -5912), 0), 100000000, 0, -5911), ((0), 100000000, 0, -6644)), 100000000, 0, -6740)), 100000000, 0, -6739)), 100000000, 0, -6738)), 100000000, 0, -6737)), 100000000, 0, -6736)), 100000000, 0, -6735)), 100000000, 0, -6734)), 100000000, 0, -6733)), 100000000, 0, -6732)), 100000000, 0, -6731)), 100000000, 0, -6730)), 100000000, 0, -6729)), 100000000, 0, -6728)), 100000000, 0, -6727)), 100000000, 0, -6726)), 100000000, 0, -6725)), 100000000, 0, -6724)), 100000000, 0, -6723)), 100000000, 0, -6722)), 100000000, 0, -6721)), 100000000, 0, -6720)), 100000000, 0, -6719)), 100000000, 0, -6718)), 100000000, 0, -6717)), 100000000, 0, -6716)), 100000000, 0, -6715)), 100000000, 0, -6714)), 100000000, 0, -6713)), 100000000, 0, -6712)), 100000000, 0, -6711)), 100000000, 0, -6710)), 100000000, 0, -6709)), 100000000, 0, -6708)), 100000000, 0, -6707)), 100000000, 0, -6706)), 100000000, 0, -6705)), 100000000, 0, -6704)), 100000000, 0, -6703)), 100000000, 0, -6702)), 100000000, 0, -6701)), 100000000, 0, -6700)), 100000000, 0, -6699)), 100000000, 0, -6698)), 100000000, 0, -6697)), 100000000, 0, -6696)), 100000000, 0, -6695)), 100000000, 0, -6694)), 100000000, 0, -6693)), 100000000, 0, -6692)), 100000000, 0, -6691)), 100000000, 0, -6690)), 100000000, 0, -6689)), 100000000, 0, -6688)), 100000000, 0, -6687)), 100000000, 0, -6686)), 100000000, 0, -6685)), 100000000, 0, -6684)), 100000000, 0, -6683)), 100000000, 0, -6682)), 100000000, 0, -6681)), 100000000, 0, -6680)), 100000000, 0, -6679)), 100000000, 0, -6678)), 100000000, 0, -6677)), 100000000, 0, -6676)), 100000000, 0, -6675)), 100000000, 0, -6674)), 100000000, 0, -6673)), 100000000, 0, -6672)), 100000000, 0, -6671)), 100000000, 0, -6670)), 100000000, 0, -6669)), 100000000, 0, -6668)), 100000000, 0, -6667)), 100000000, 0, -6666)), 100000000, 0, -6665)), 100000000, 0, -6664)), 100000000, 0, -6663)), 100000000, 0, -6662)), 100000000, 0, -6661)), 100000000, 0, -6660)), 100000000, 0, -6659)), 100000000, 0, -6658)), 100000000, 0, -6657)), 100000000, 0, -6656)), 100000000, 0, -6655)), 100000000, 0, -6654)), 100000000, 0, -6653)), 100000000, 0, -6652)), 100000000, 0, -6651)), 100000000, 0, -6650)), 100000000, 0, -6649)), 100000000, 0, -6648)), 100000000, 0, -6647)), 100000000, 0, -6646), (([(("fold_map", 7453)); ((0), 100000000, 0, -6644); ((("acc")), 100000000, 0, -5357)]))), 100000000, 0, -6645), ((0), 100000000, 0, -6644), 0, (((((0, "arg_label", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -6055), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -6054); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6053), 0), 100000000, 0, -6052), 0), 100000000, 0, -6051), 0), 100000000, 0, -6050)), 0, 1), "attribute", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -6061), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -6060); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6059), 0), 100000000, 0, -6058), 0), 100000000, 0, -6057), 0), 100000000, 0, -6056)), ((0, "attributes", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -6067), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -6066); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6065), 0), 100000000, 0, -6064), 0), 100000000, 0, -6063), 0), 100000000, 0, -6062)), (0, "binding_op", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -6073), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -6072); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6071), 0), 100000000, 0, -6070), 0), 100000000, 0, -6069), 0), 100000000, 0, -6068)), 0, 1), 2), "bool", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -6079), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -6078); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6077), 0), 100000000, 0, -6076), 0), 100000000, 0, -6075), 0), 100000000, 0, -6074)), (0, "case", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -6085), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -6084); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6083), 0), 100000000, 0, -6082), 0), 100000000, 0, -6081), 0), 100000000, 0, -6080)), (0, "cases", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -6091), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -6090); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6089), 0), 100000000, 0, -6088), 0), 100000000, 0, -6087), 0), 100000000, 0, -6086)), 0, 1), 2), 3), 4), "char", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -6097), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -6096); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6095), 0), 100000000, 0, -6094), 0), 100000000, 0, -6093), 0), 100000000, 0, -6092)), ((((((0, "class_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -6103), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -6102); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6101), 0), 100000000, 0, -6100), 0), 100000000, 0, -6099), 0), 100000000, 0, -6098)), 0, 1), "class_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -6109), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -6108); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6107), 0), 100000000, 0, -6106), 0), 100000000, 0, -6105), 0), 100000000, 0, -6104)), 0, 2), "class_expr", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -6115), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -6114); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6113), 0), 100000000, 0, -6112), 0), 100000000, 0, -6111), 0), 100000000, 0, -6110)), (0, "class_expr_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -6121), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -6120); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6119), 0), 100000000, 0, -6118), 0), 100000000, 0, -6117), 0), 100000000, 0, -6116)), 0, 1), 3), "class_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -6127), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -6126); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6125), 0), 100000000, 0, -6124), 0), 100000000, 0, -6123), 0), 100000000, 0, -6122)), ((0, "class_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -6133), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -6132); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6131), 0), 100000000, 0, -6130), 0), 100000000, 0, -6129), 0), 100000000, 0, -6128)), (0, "class_field_kind", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -6139), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -6138); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6137), 0), 100000000, 0, -6136), 0), 100000000, 0, -6135), 0), 100000000, 0, -6134)), 0, 1), 2), "class_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -5853), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag9 (("a")), 100000000, 0, -5853); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6149), 0), 100000000, 0, -6148), 0), 100000000, 0, -6147), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -5853)], (0)), 100000000, 0, -6146), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -5853)], (0)), 100000000, 0, -6145); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6144), 0), 100000000, 0, -6143), 0), 100000000, 0, -6142), 0), 100000000, 0, -6141), [(Tag9 (("a")), 100000000, 0, -5853)]), 100000000, 0, -6140)), 0, 3), 4), "class_signature", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -6155), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -6154); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6153), 0), 100000000, 0, -6152), 0), 100000000, 0, -6151), 0), 100000000, 0, -6150)), ((0, "class_structure", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -6161), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -6160); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6159), 0), 100000000, 0, -6158), 0), 100000000, 0, -6157), 0), 100000000, 0, -6156)), 0, 1), "class_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -6167), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -6166); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6165), 0), 100000000, 0, -6164), 0), 100000000, 0, -6163), 0), 100000000, 0, -6162)), (0, "class_type_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -6173), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -6172); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6171), 0), 100000000, 0, -6170), 0), 100000000, 0, -6169), 0), 100000000, 0, -6168)), 0, 1), 2), 5), "class_type_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -6179), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -6178); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6177), 0), 100000000, 0, -6176), 0), 100000000, 0, -6175), 0), 100000000, 0, -6174)), (((0, "class_type_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -6185), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -6184); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6183), 0), 100000000, 0, -6182), 0), 100000000, 0, -6181), 0), 100000000, 0, -6180)), (0, "class_type_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -6191), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -6190); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6189), 0), 100000000, 0, -6188), 0), 100000000, 0, -6187), 0), 100000000, 0, -6186)), 0, 1), 2), "closed_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -6197), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -6196); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6195), 0), 100000000, 0, -6194), 0), 100000000, 0, -6193), 0), 100000000, 0, -6192)), 0, 3), "constant", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -6203), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -6202); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6201), 0), 100000000, 0, -6200), 0), 100000000, 0, -6199), 0), 100000000, 0, -6198)), (((0, "constructor_arguments", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -6209), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -6208); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6207), 0), 100000000, 0, -6206), 0), 100000000, 0, -6205), 0), 100000000, 0, -6204)), 0, 1), "constructor_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -6215), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -6214); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6213), 0), 100000000, 0, -6212), 0), 100000000, 0, -6211), 0), 100000000, 0, -6210)), 0, 2), "core_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -6221), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -6220); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6219), 0), 100000000, 0, -6218), 0), 100000000, 0, -6217), 0), 100000000, 0, -6216)), (0, "core_type_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -6227), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -6226); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6225), 0), 100000000, 0, -6224), 0), 100000000, 0, -6223), 0), 100000000, 0, -6222)), 0, 1), 3), 4), 6), 7), "direction_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -6233), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -6232); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6231), 0), 100000000, 0, -6230), 0), 100000000, 0, -6229), 0), 100000000, 0, -6228)), ((((0, "directive_argument", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -6239), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -6238); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6237), 0), 100000000, 0, -6236), 0), 100000000, 0, -6235), 0), 100000000, 0, -6234)), (0, "directive_argument_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -6245), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -6244); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6243), 0), 100000000, 0, -6242), 0), 100000000, 0, -6241), 0), 100000000, 0, -6240)), 0, 1), 2), "expression", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -6251), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -6250); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6249), 0), 100000000, 0, -6248), 0), 100000000, 0, -6247), 0), 100000000, 0, -6246)), (0, "expression_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -6257), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -6256); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6255), 0), 100000000, 0, -6254), 0), 100000000, 0, -6253), 0), 100000000, 0, -6252)), 0, 1), 3), "extension", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -6263), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -6262); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6261), 0), 100000000, 0, -6260), 0), 100000000, 0, -6259), 0), 100000000, 0, -6258)), (((0, "extension_constructor", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -6269), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -6268); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6267), 0), 100000000, 0, -6266), 0), 100000000, 0, -6265), 0), 100000000, 0, -6264)), 0, 1), "extension_constructor_kind", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -6275), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -6274); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6273), 0), 100000000, 0, -6272), 0), 100000000, 0, -6271), 0), 100000000, 0, -6270)), 0, 2), "functor_parameter", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -6281), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -6280); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6279), 0), 100000000, 0, -6278), 0), 100000000, 0, -6277), 0), 100000000, 0, -6276)), (((0, "include_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -6287), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -6286); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6285), 0), 100000000, 0, -6284), 0), 100000000, 0, -6283), 0), 100000000, 0, -6282)), 0, 1), "include_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -6293), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -6292); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6291), 0), 100000000, 0, -6290), 0), 100000000, 0, -6289), 0), 100000000, 0, -6288)), 0, 2), "include_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -5698), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag9 (("a")), 100000000, 0, -5698); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6303), 0), 100000000, 0, -6302), 0), 100000000, 0, -6301), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -5698)], (0)), 100000000, 0, -6300), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -5698)], (0)), 100000000, 0, -6299); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6298), 0), 100000000, 0, -6297), 0), 100000000, 0, -6296), 0), 100000000, 0, -6295), [(Tag9 (("a")), 100000000, 0, -5698)]), 100000000, 0, -6294)), (0, "injectivity", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -6309), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -6308); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6307), 0), 100000000, 0, -6306), 0), 100000000, 0, -6305), 0), 100000000, 0, -6304)), 0, 1), 3), 4), 5), "int", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -6315), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -6314); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6313), 0), 100000000, 0, -6312), 0), 100000000, 0, -6311), 0), 100000000, 0, -6310)), ((0, "label", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -6321), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -6320); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6319), 0), 100000000, 0, -6318), 0), 100000000, 0, -6317), 0), 100000000, 0, -6316)), ((0, "label_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -6327), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -6326); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6325), 0), 100000000, 0, -6324), 0), 100000000, 0, -6323), 0), 100000000, 0, -6322)), 0, 1), "letop", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -6333), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -6332); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6331), 0), 100000000, 0, -6330), 0), 100000000, 0, -6329), 0), 100000000, 0, -6328)), 0, 2), 3), "list", (0, 0, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -5657), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag9 (("a")), 100000000, 0, -5657); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6343), 0), 100000000, 0, -6342), 0), 100000000, 0, -6341), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -5657)], (0)), 100000000, 0, -6340), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -5657)], (0)), 100000000, 0, -6339); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6338), 0), 100000000, 0, -6337), 0), 100000000, 0, -6336), 0), 100000000, 0, -6335), [(Tag9 (("a")), 100000000, 0, -5657)]), 100000000, 0, -6334)), (0, "loc", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -5646), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag9 (("a")), 100000000, 0, -5646); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6353), 0), 100000000, 0, -6352), 0), 100000000, 0, -6351), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -5646)], (0)), 100000000, 0, -6350), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -5646)], (0)), 100000000, 0, -6349); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6348), 0), 100000000, 0, -6347), 0), 100000000, 0, -6346), 0), 100000000, 0, -6345), [(Tag9 (("a")), 100000000, 0, -5646)]), 100000000, 0, -6344)), 0, 1), 4), 6), 8), "location", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -6359), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -6358); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6357), 0), 100000000, 0, -6356), 0), 100000000, 0, -6355), 0), 100000000, 0, -6354)), (((((0, "location_stack", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -6365), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -6364); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6363), 0), 100000000, 0, -6362), 0), 100000000, 0, -6361), 0), 100000000, 0, -6360)), 0, 1), "longident", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -6371), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -6370); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6369), 0), 100000000, 0, -6368), 0), 100000000, 0, -6367), 0), 100000000, 0, -6366)), 0, 2), "longident_loc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -6377), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -6376); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6375), 0), 100000000, 0, -6374), 0), 100000000, 0, -6373), 0), 100000000, 0, -6372)), ((((0, "module_binding", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -6383), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -6382); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6381), 0), 100000000, 0, -6380), 0), 100000000, 0, -6379), 0), 100000000, 0, -6378)), 0, 1), "module_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -6389), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -6388); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6387), 0), 100000000, 0, -6386), 0), 100000000, 0, -6385), 0), 100000000, 0, -6384)), 0, 2), "module_expr", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -6395), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -6394); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6393), 0), 100000000, 0, -6392), 0), 100000000, 0, -6391), 0), 100000000, 0, -6390)), ((0, "module_expr_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -6401), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -6400); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6399), 0), 100000000, 0, -6398), 0), 100000000, 0, -6397), 0), 100000000, 0, -6396)), 0, 1), "module_substitution", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -6407), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -6406); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6405), 0), 100000000, 0, -6404), 0), 100000000, 0, -6403), 0), 100000000, 0, -6402)), 0, 2), 3), "module_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -6413), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -6412); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6411), 0), 100000000, 0, -6410), 0), 100000000, 0, -6409), 0), 100000000, 0, -6408)), ((0, "module_type_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -6419), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -6418); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6417), 0), 100000000, 0, -6416), 0), 100000000, 0, -6415), 0), 100000000, 0, -6414)), 0, 1), "module_type_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -6425), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -6424); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6423), 0), 100000000, 0, -6422), 0), 100000000, 0, -6421), 0), 100000000, 0, -6420)), 0, 2), 4), 5), "mutable_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -6431), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -6430); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6429), 0), 100000000, 0, -6428), 0), 100000000, 0, -6427), 0), 100000000, 0, -6426)), ((0, "object_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -6437), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -6436); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6435), 0), 100000000, 0, -6434), 0), 100000000, 0, -6433), 0), 100000000, 0, -6432)), 0, 1), "object_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -6443), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -6442); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6441), 0), 100000000, 0, -6440), 0), 100000000, 0, -6439), 0), 100000000, 0, -6438)), (((0, "open_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -6449), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -6448); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6447), 0), 100000000, 0, -6446), 0), 100000000, 0, -6445), 0), 100000000, 0, -6444)), 0, 1), "open_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -6455), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -6454); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6453), 0), 100000000, 0, -6452), 0), 100000000, 0, -6451), 0), 100000000, 0, -6450)), 0, 2), "open_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -5533), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag9 (("a")), 100000000, 0, -5533); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6465), 0), 100000000, 0, -6464), 0), 100000000, 0, -6463), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -5533)], (0)), 100000000, 0, -6462), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -5533)], (0)), 100000000, 0, -6461); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6460), 0), 100000000, 0, -6459), 0), 100000000, 0, -6458), 0), 100000000, 0, -6457), [(Tag9 (("a")), 100000000, 0, -5533)]), 100000000, 0, -6456)), 0, 3), 4), 6), "option", (0, 0, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -5522), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag9 (("a")), 100000000, 0, -5522); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6475), 0), 100000000, 0, -6474), 0), 100000000, 0, -6473), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -5522)], (0)), 100000000, 0, -6472), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -5522)], (0)), 100000000, 0, -6471); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6470), 0), 100000000, 0, -6469), 0), 100000000, 0, -6468), 0), 100000000, 0, -6467), [(Tag9 (("a")), 100000000, 0, -5522)]), 100000000, 0, -6466)), (((((0, "override_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -6481), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -6480); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6479), 0), 100000000, 0, -6478), 0), 100000000, 0, -6477), 0), 100000000, 0, -6476)), 0, 1), "package_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -6487), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -6486); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6485), 0), 100000000, 0, -6484), 0), 100000000, 0, -6483), 0), 100000000, 0, -6482)), (0, "pattern", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -6493), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -6492); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6491), 0), 100000000, 0, -6490), 0), 100000000, 0, -6489), 0), 100000000, 0, -6488)), (0, "pattern_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -6499), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -6498); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6497), 0), 100000000, 0, -6496), 0), 100000000, 0, -6495), 0), 100000000, 0, -6494)), 0, 1), 2), 3), "payload", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -6505), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -6504); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6503), 0), 100000000, 0, -6502), 0), 100000000, 0, -6501), 0), 100000000, 0, -6500)), (0, "position", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -6511), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -6510); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6509), 0), 100000000, 0, -6508), 0), 100000000, 0, -6507), 0), 100000000, 0, -6506)), (0, "private_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -6517), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -6516); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6515), 0), 100000000, 0, -6514), 0), 100000000, 0, -6513), 0), 100000000, 0, -6512)), 0, 1), 2), 4), "rec_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -6523), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -6522); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6521), 0), 100000000, 0, -6520), 0), 100000000, 0, -6519), 0), 100000000, 0, -6518)), ((0, "row_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -6529), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -6528); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6527), 0), 100000000, 0, -6526), 0), 100000000, 0, -6525), 0), 100000000, 0, -6524)), 0, 1), "row_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -6535), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -6534); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6533), 0), 100000000, 0, -6532), 0), 100000000, 0, -6531), 0), 100000000, 0, -6530)), (0, "signature", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -6541), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -6540); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6539), 0), 100000000, 0, -6538), 0), 100000000, 0, -6537), 0), 100000000, 0, -6536)), (0, "signature_item", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -6547), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -6546); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6545), 0), 100000000, 0, -6544), 0), 100000000, 0, -6543), 0), 100000000, 0, -6542)), (0, "signature_item_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -6553), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -6552); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6551), 0), 100000000, 0, -6550), 0), 100000000, 0, -6549), 0), 100000000, 0, -6548)), 0, 1), 2), 3), 4), 5), "string", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6559), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6558); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6557), 0), 100000000, 0, -6556), 0), 100000000, 0, -6555), 0), 100000000, 0, -6554)), ((((0, "structure", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -6565), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -6564); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6563), 0), 100000000, 0, -6562), 0), 100000000, 0, -6561), 0), 100000000, 0, -6560)), 0, 1), "structure_item", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -6571), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -6570); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6569), 0), 100000000, 0, -6568), 0), 100000000, 0, -6567), 0), 100000000, 0, -6566)), (0, "structure_item_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -6577), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -6576); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6575), 0), 100000000, 0, -6574), 0), 100000000, 0, -6573), 0), 100000000, 0, -6572)), ((0, "toplevel_directive", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -6583), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -6582); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6581), 0), 100000000, 0, -6580), 0), 100000000, 0, -6579), 0), 100000000, 0, -6578)), 0, 1), "toplevel_phrase", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -6589), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -6588); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6587), 0), 100000000, 0, -6586), 0), 100000000, 0, -6585), 0), 100000000, 0, -6584)), 0, 2), 3), 4), "type_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -6595), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -6594); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6593), 0), 100000000, 0, -6592), 0), 100000000, 0, -6591), 0), 100000000, 0, -6590)), ((0, "type_exception", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -6601), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -6600); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6599), 0), 100000000, 0, -6598), 0), 100000000, 0, -6597), 0), 100000000, 0, -6596)), 0, 1), "type_extension", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -6607), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -6606); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6605), 0), 100000000, 0, -6604), 0), 100000000, 0, -6603), 0), 100000000, 0, -6602)), 0, 2), 5), "type_kind", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -6613), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -6612); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6611), 0), 100000000, 0, -6610), 0), 100000000, 0, -6609), 0), 100000000, 0, -6608)), (((0, "value_binding", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -6619), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -6618); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6617), 0), 100000000, 0, -6616), 0), 100000000, 0, -6615), 0), 100000000, 0, -6614)), 0, 1), "value_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -6625), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -6624); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6623), 0), 100000000, 0, -6622), 0), 100000000, 0, -6621), 0), 100000000, 0, -6620)), 0, 2), "variance", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -6631), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -6630); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6629), 0), 100000000, 0, -6628), 0), 100000000, 0, -6627), 0), 100000000, 0, -6626)), (0, "virtual_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -6637), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -6636); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6635), 0), 100000000, 0, -6634), 0), 100000000, 0, -6633), 0), 100000000, 0, -6632)), (0, "with_constraint", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -6643), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -6642); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -6641), 0), 100000000, 0, -6640), 0), 100000000, 0, -6639), 0), 100000000, 0, -6638)), 0, 1), 2), 3), 6), 7), 8), 9))), (("fold_map", 7453)), ([((("acc")), 100000000, 0, -5357)], 1, 0, 1, ((Tag4 ((Tag5 ("bool", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5928), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5927); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5926), 0), 100000000, 0, -5925), 0), 100000000, 0, -5924), 0), 100000000, 0, -5923), (Tag5 ("char", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -5910), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -5909); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5908), 0), 100000000, 0, -5907), 0), 100000000, 0, -5906), 0), 100000000, 0, -5905), (Tag5 ("int", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -5690), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -5689); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5688), 0), 100000000, 0, -5687), 0), 100000000, 0, -5686), 0), 100000000, 0, -5685), (Tag5 ("list", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -5657), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag9 (("a")), 100000000, 0, -5657); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5666), 0), 100000000, 0, -5665), 0), 100000000, 0, -5664), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -5657)], (0)), 100000000, 0, -5663), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -5657)], (0)), 100000000, 0, -5662); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5661), 0), 100000000, 0, -5660), 0), 100000000, 0, -5659), 0), 100000000, 0, -5658), [(Tag9 (("a")), 100000000, 0, -5657)]), 100000000, 0, -5656), (Tag5 ("option", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -5522), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag9 (("a")), 100000000, 0, -5522); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5531), 0), 100000000, 0, -5530), 0), 100000000, 0, -5529), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -5522)], (0)), 100000000, 0, -5528), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -5522)], (0)), 100000000, 0, -5527); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5526), 0), 100000000, 0, -5525), 0), 100000000, 0, -5524), 0), 100000000, 0, -5523), [(Tag9 (("a")), 100000000, 0, -5522)]), 100000000, 0, -5521), (Tag5 ("string", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5442), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5441); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5440), 0), 100000000, 0, -5439), 0), 100000000, 0, -5438), 0), 100000000, 0, -5437), (Tag5 ("position", 1, (Tag10 ((Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -5490), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -5489); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5488), 0), 100000000, 0, -5487), 0), 100000000, 0, -5486), 0), 100000000, 0, -5485), (Tag5 ("location", 1, (Tag10 ((Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -5644), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -5643); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5642), 0), 100000000, 0, -5641), 0), 100000000, 0, -5640), 0), 100000000, 0, -5639), (Tag5 ("location_stack", 1, (Tag10 ((Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -5638), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -5637); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5636), 0), 100000000, 0, -5635), 0), 100000000, 0, -5634), 0), 100000000, 0, -5633), (Tag5 ("loc", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -5646), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag9 (("a")), 100000000, 0, -5646); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5655), 0), 100000000, 0, -5654), 0), 100000000, 0, -5653), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -5646)], (0)), 100000000, 0, -5652), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -5646)], (0)), 100000000, 0, -5651); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5650), 0), 100000000, 0, -5649), 0), 100000000, 0, -5648), 0), 100000000, 0, -5647), [(Tag9 (("a")), 100000000, 0, -5646)]), 100000000, 0, -5645), (Tag5 ("longident", 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -5632), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -5631); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5630), 0), 100000000, 0, -5629), 0), 100000000, 0, -5628), 0), 100000000, 0, -5627), (Tag5 ("longident_loc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -5626), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -5625); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5624), 0), 100000000, 0, -5623), 0), 100000000, 0, -5622), 0), 100000000, 0, -5621), (Tag5 ("rec_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -5478), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -5477); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5476), 0), 100000000, 0, -5475), 0), 100000000, 0, -5474), 0), 100000000, 0, -5473), (Tag5 ("direction_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -5773), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -5772); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5771), 0), 100000000, 0, -5770), 0), 100000000, 0, -5769), 0), 100000000, 0, -5768), (Tag5 ("private_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -5484), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -5483); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5482), 0), 100000000, 0, -5481), 0), 100000000, 0, -5480), 0), 100000000, 0, -5479), (Tag5 ("mutable_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -5572), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -5571); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5570), 0), 100000000, 0, -5569), 0), 100000000, 0, -5568), 0), 100000000, 0, -5567), (Tag5 ("virtual_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -5364), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -5363); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5362), 0), 100000000, 0, -5361), 0), 100000000, 0, -5360), 0), 100000000, 0, -5359), (Tag5 ("override_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -5520), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -5519); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5518), 0), 100000000, 0, -5517), 0), 100000000, 0, -5516), 0), 100000000, 0, -5515), (Tag5 ("closed_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -5809), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -5808); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5807), 0), 100000000, 0, -5806), 0), 100000000, 0, -5805), 0), 100000000, 0, -5804), (Tag5 ("label", 1, (Tag10 ((Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -5684), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -5683); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5682), 0), 100000000, 0, -5681), 0), 100000000, 0, -5680), 0), 100000000, 0, -5679), (Tag5 ("arg_label", 1, (Tag10 ((Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -5952), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -5951); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5950), 0), 100000000, 0, -5949), 0), 100000000, 0, -5948), 0), 100000000, 0, -5947), (Tag5 ("variance", 1, (Tag10 ((Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -5370), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -5369); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5368), 0), 100000000, 0, -5367), 0), 100000000, 0, -5366), 0), 100000000, 0, -5365), (Tag5 ("injectivity", 1, (Tag10 ((Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -5696), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -5695); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5694), 0), 100000000, 0, -5693), 0), 100000000, 0, -5692), 0), 100000000, 0, -5691), (Tag5 ("constant", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -5803), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -5802); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5801), 0), 100000000, 0, -5800), 0), 100000000, 0, -5799), 0), 100000000, 0, -5798), (Tag5 ("attribute", 1, (Tag10 ((Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -5946), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -5945); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5944), 0), 100000000, 0, -5943), 0), 100000000, 0, -5942), 0), 100000000, 0, -5941), (Tag5 ("extension", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -5743), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -5742); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5741), 0), 100000000, 0, -5740), 0), 100000000, 0, -5739), 0), 100000000, 0, -5738), (Tag5 ("attributes", 1, (Tag10 ((Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -5940), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -5939); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5938), 0), 100000000, 0, -5937), 0), 100000000, 0, -5936), 0), 100000000, 0, -5935), (Tag5 ("payload", 1, (Tag10 ((Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -5496), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -5495); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5494), 0), 100000000, 0, -5493), 0), 100000000, 0, -5492), 0), 100000000, 0, -5491), (Tag5 ("core_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -5785), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -5784); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5783), 0), 100000000, 0, -5782), 0), 100000000, 0, -5781), 0), 100000000, 0, -5780), (Tag5 ("core_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -5779), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -5778); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5777), 0), 100000000, 0, -5776), 0), 100000000, 0, -5775), 0), 100000000, 0, -5774), (Tag5 ("package_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -5514), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -5513); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5512), 0), 100000000, 0, -5511), 0), 100000000, 0, -5510), 0), 100000000, 0, -5509), (Tag5 ("row_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -5472), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -5471); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5470), 0), 100000000, 0, -5469), 0), 100000000, 0, -5468), 0), 100000000, 0, -5467), (Tag5 ("row_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -5466), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -5465); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5464), 0), 100000000, 0, -5463), 0), 100000000, 0, -5462), 0), 100000000, 0, -5461), (Tag5 ("object_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -5566), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -5565); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5564), 0), 100000000, 0, -5563), 0), 100000000, 0, -5562), 0), 100000000, 0, -5561), (Tag5 ("object_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -5560), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -5559); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5558), 0), 100000000, 0, -5557), 0), 100000000, 0, -5556), 0), 100000000, 0, -5555), (Tag5 ("pattern", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -5508), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -5507); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5506), 0), 100000000, 0, -5505), 0), 100000000, 0, -5504), 0), 100000000, 0, -5503), (Tag5 ("pattern_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -5502), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -5501); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5500), 0), 100000000, 0, -5499), 0), 100000000, 0, -5498), 0), 100000000, 0, -5497), (Tag5 ("expression", 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -5755), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -5754); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5753), 0), 100000000, 0, -5752), 0), 100000000, 0, -5751), 0), 100000000, 0, -5750), (Tag5 ("expression_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -5749), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -5748); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5747), 0), 100000000, 0, -5746), 0), 100000000, 0, -5745), 0), 100000000, 0, -5744), (Tag5 ("case", 1, (Tag10 ((Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -5922), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -5921); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5920), 0), 100000000, 0, -5919), 0), 100000000, 0, -5918), 0), 100000000, 0, -5917), (Tag5 ("letop", 1, (Tag10 ((Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -5672), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -5671); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5670), 0), 100000000, 0, -5669), 0), 100000000, 0, -5668), 0), 100000000, 0, -5667), (Tag5 ("binding_op", 1, (Tag10 ((Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -5934), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -5933); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5932), 0), 100000000, 0, -5931), 0), 100000000, 0, -5930), 0), 100000000, 0, -5929), (Tag5 ("value_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -5376), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -5375); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5374), 0), 100000000, 0, -5373), 0), 100000000, 0, -5372), 0), 100000000, 0, -5371), (Tag5 ("type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -5406), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -5405); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5404), 0), 100000000, 0, -5403), 0), 100000000, 0, -5402), 0), 100000000, 0, -5401), (Tag5 ("type_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -5388), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -5387); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5386), 0), 100000000, 0, -5385), 0), 100000000, 0, -5384), 0), 100000000, 0, -5383), (Tag5 ("label_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -5678), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -5677); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5676), 0), 100000000, 0, -5675), 0), 100000000, 0, -5674), 0), 100000000, 0, -5673), (Tag5 ("constructor_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -5791), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -5790); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5789), 0), 100000000, 0, -5788), 0), 100000000, 0, -5787), 0), 100000000, 0, -5786), (Tag5 ("constructor_arguments", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -5797), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -5796); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5795), 0), 100000000, 0, -5794), 0), 100000000, 0, -5793), 0), 100000000, 0, -5792), (Tag5 ("type_extension", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -5394), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -5393); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5392), 0), 100000000, 0, -5391), 0), 100000000, 0, -5390), 0), 100000000, 0, -5389), (Tag5 ("extension_constructor", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -5737), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -5736); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5735), 0), 100000000, 0, -5734), 0), 100000000, 0, -5733), 0), 100000000, 0, -5732), (Tag5 ("type_exception", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -5400), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -5399); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5398), 0), 100000000, 0, -5397), 0), 100000000, 0, -5396), 0), 100000000, 0, -5395), (Tag5 ("extension_constructor_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -5731), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -5730); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5729), 0), 100000000, 0, -5728), 0), 100000000, 0, -5727), 0), 100000000, 0, -5726), (Tag5 ("class_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -5839), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -5838); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5837), 0), 100000000, 0, -5836), 0), 100000000, 0, -5835), 0), 100000000, 0, -5834), (Tag5 ("class_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -5827), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -5826); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5825), 0), 100000000, 0, -5824), 0), 100000000, 0, -5823), 0), 100000000, 0, -5822), (Tag5 ("class_signature", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -5851), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -5850); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5849), 0), 100000000, 0, -5848), 0), 100000000, 0, -5847), 0), 100000000, 0, -5846), (Tag5 ("class_type_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -5821), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -5820); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5819), 0), 100000000, 0, -5818), 0), 100000000, 0, -5817), 0), 100000000, 0, -5816), (Tag5 ("class_type_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -5815), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -5814); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5813), 0), 100000000, 0, -5812), 0), 100000000, 0, -5811), 0), 100000000, 0, -5810), (Tag5 ("class_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -5853), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag9 (("a")), 100000000, 0, -5853); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5862), 0), 100000000, 0, -5861), 0), 100000000, 0, -5860), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -5853)], (0)), 100000000, 0, -5859), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -5853)], (0)), 100000000, 0, -5858); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5857), 0), 100000000, 0, -5856), 0), 100000000, 0, -5855), 0), 100000000, 0, -5854), [(Tag9 (("a")), 100000000, 0, -5853)]), 100000000, 0, -5852), (Tag5 ("class_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -5898), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -5897); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5896), 0), 100000000, 0, -5895), 0), 100000000, 0, -5894), 0), 100000000, 0, -5893), (Tag5 ("class_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -5833), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -5832); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5831), 0), 100000000, 0, -5830), 0), 100000000, 0, -5829), 0), 100000000, 0, -5828), (Tag5 ("class_expr", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -5892), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -5891); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5890), 0), 100000000, 0, -5889), 0), 100000000, 0, -5888), 0), 100000000, 0, -5887), (Tag5 ("class_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -5886), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -5885); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5884), 0), 100000000, 0, -5883), 0), 100000000, 0, -5882), 0), 100000000, 0, -5881), (Tag5 ("class_structure", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -5845), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -5844); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5843), 0), 100000000, 0, -5842), 0), 100000000, 0, -5841), 0), 100000000, 0, -5840), (Tag5 ("class_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -5880), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -5879); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5878), 0), 100000000, 0, -5877), 0), 100000000, 0, -5876), 0), 100000000, 0, -5875), (Tag5 ("class_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -5874), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -5873); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5872), 0), 100000000, 0, -5871), 0), 100000000, 0, -5870), 0), 100000000, 0, -5869), (Tag5 ("class_field_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -5868), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -5867); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5866), 0), 100000000, 0, -5865), 0), 100000000, 0, -5864), 0), 100000000, 0, -5863), (Tag5 ("class_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -5904), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -5903); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5902), 0), 100000000, 0, -5901), 0), 100000000, 0, -5900), 0), 100000000, 0, -5899), (Tag5 ("module_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -5590), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -5589); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5588), 0), 100000000, 0, -5587), 0), 100000000, 0, -5586), 0), 100000000, 0, -5585), (Tag5 ("module_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -5578), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -5577); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5576), 0), 100000000, 0, -5575), 0), 100000000, 0, -5574), 0), 100000000, 0, -5573), (Tag5 ("functor_parameter", 1, (Tag10 ((Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -5725), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -5724); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5723), 0), 100000000, 0, -5722), 0), 100000000, 0, -5721), 0), 100000000, 0, -5720), (Tag5 ("signature", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -5460), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -5459); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5458), 0), 100000000, 0, -5457), 0), 100000000, 0, -5456), 0), 100000000, 0, -5455), (Tag5 ("signature_item", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -5454), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -5453); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5452), 0), 100000000, 0, -5451), 0), 100000000, 0, -5450), 0), 100000000, 0, -5449), (Tag5 ("signature_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -5448), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -5447); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5446), 0), 100000000, 0, -5445), 0), 100000000, 0, -5444), 0), 100000000, 0, -5443), (Tag5 ("module_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -5614), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -5613); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5612), 0), 100000000, 0, -5611), 0), 100000000, 0, -5610), 0), 100000000, 0, -5609), (Tag5 ("module_substitution", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -5596), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -5595); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5594), 0), 100000000, 0, -5593), 0), 100000000, 0, -5592), 0), 100000000, 0, -5591), (Tag5 ("module_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -5584), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -5583); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5582), 0), 100000000, 0, -5581), 0), 100000000, 0, -5580), 0), 100000000, 0, -5579), (Tag5 ("open_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -5533), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag9 (("a")), 100000000, 0, -5533); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5542), 0), 100000000, 0, -5541), 0), 100000000, 0, -5540), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -5533)], (0)), 100000000, 0, -5539), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -5533)], (0)), 100000000, 0, -5538); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5537), 0), 100000000, 0, -5536), 0), 100000000, 0, -5535), 0), 100000000, 0, -5534), [(Tag9 (("a")), 100000000, 0, -5533)]), 100000000, 0, -5532), (Tag5 ("open_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -5548), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -5547); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5546), 0), 100000000, 0, -5545), 0), 100000000, 0, -5544), 0), 100000000, 0, -5543), (Tag5 ("open_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -5554), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -5553); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5552), 0), 100000000, 0, -5551), 0), 100000000, 0, -5550), 0), 100000000, 0, -5549), (Tag5 ("include_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -5698), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag9 (("a")), 100000000, 0, -5698); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5707), 0), 100000000, 0, -5706), 0), 100000000, 0, -5705), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -5698)], (0)), 100000000, 0, -5704), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -5698)], (0)), 100000000, 0, -5703); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5702), 0), 100000000, 0, -5701), 0), 100000000, 0, -5700), 0), 100000000, 0, -5699), [(Tag9 (("a")), 100000000, 0, -5698)]), 100000000, 0, -5697), (Tag5 ("include_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -5713), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -5712); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5711), 0), 100000000, 0, -5710), 0), 100000000, 0, -5709), 0), 100000000, 0, -5708), (Tag5 ("include_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -5719), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -5718); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5717), 0), 100000000, 0, -5716), 0), 100000000, 0, -5715), 0), 100000000, 0, -5714), (Tag5 ("with_constraint", 1, (Tag10 ((Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -5358), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -5356); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5355), 0), 100000000, 0, -5354), 0), 100000000, 0, -5353), 0), 100000000, 0, -5352), (Tag5 ("module_expr", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -5608), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -5607); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5606), 0), 100000000, 0, -5605), 0), 100000000, 0, -5604), 0), 100000000, 0, -5603), (Tag5 ("module_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -5602), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -5601); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5600), 0), 100000000, 0, -5599), 0), 100000000, 0, -5598), 0), 100000000, 0, -5597), (Tag5 ("structure", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -5436), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -5435); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5434), 0), 100000000, 0, -5433), 0), 100000000, 0, -5432), 0), 100000000, 0, -5431), (Tag5 ("structure_item", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -5430), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -5429); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5428), 0), 100000000, 0, -5427), 0), 100000000, 0, -5426), 0), 100000000, 0, -5425), (Tag5 ("structure_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -5424), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -5423); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5422), 0), 100000000, 0, -5421), 0), 100000000, 0, -5420), 0), 100000000, 0, -5419), (Tag5 ("value_binding", 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -5382), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -5381); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5380), 0), 100000000, 0, -5379), 0), 100000000, 0, -5378), 0), 100000000, 0, -5377), (Tag5 ("module_binding", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -5620), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -5619); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5618), 0), 100000000, 0, -5617), 0), 100000000, 0, -5616), 0), 100000000, 0, -5615), (Tag5 ("toplevel_phrase", 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -5412), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -5411); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5410), 0), 100000000, 0, -5409), 0), 100000000, 0, -5408), 0), 100000000, 0, -5407), (Tag5 ("toplevel_directive", 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -5418), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -5417); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5416), 0), 100000000, 0, -5415), 0), 100000000, 0, -5414), 0), 100000000, 0, -5413), (Tag5 ("directive_argument", 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -5767), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -5766); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5765), 0), 100000000, 0, -5764), 0), 100000000, 0, -5763), 0), 100000000, 0, -5762), (Tag5 ("directive_argument_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -5761), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -5760); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5759), 0), 100000000, 0, -5758), 0), 100000000, 0, -5757), 0), 100000000, 0, -5756), (Tag5 ("cases", 1, (Tag10 ((Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -5916), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -5915); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5914), 0), 100000000, 0, -5913), 0), 100000000, 0, -5912), 0), 100000000, 0, -5911), ((0), 100000000, 0, -6049)), 100000000, 0, -6048)), 100000000, 0, -6047)), 100000000, 0, -6046)), 100000000, 0, -6045)), 100000000, 0, -6044)), 100000000, 0, -6043)), 100000000, 0, -6042)), 100000000, 0, -6041)), 100000000, 0, -6040)), 100000000, 0, -6039)), 100000000, 0, -6038)), 100000000, 0, -6037)), 100000000, 0, -6036)), 100000000, 0, -6035)), 100000000, 0, -6034)), 100000000, 0, -6033)), 100000000, 0, -6032)), 100000000, 0, -6031)), 100000000, 0, -6030)), 100000000, 0, -6029)), 100000000, 0, -6028)), 100000000, 0, -6027)), 100000000, 0, -6026)), 100000000, 0, -6025)), 100000000, 0, -6024)), 100000000, 0, -6023)), 100000000, 0, -6022)), 100000000, 0, -6021)), 100000000, 0, -6020)), 100000000, 0, -6019)), 100000000, 0, -6018)), 100000000, 0, -6017)), 100000000, 0, -6016)), 100000000, 0, -6015)), 100000000, 0, -6014)), 100000000, 0, -6013)), 100000000, 0, -6012)), 100000000, 0, -6011)), 100000000, 0, -6010)), 100000000, 0, -6009)), 100000000, 0, -6008)), 100000000, 0, -6007)), 100000000, 0, -6006)), 100000000, 0, -6005)), 100000000, 0, -6004)), 100000000, 0, -6003)), 100000000, 0, -6002)), 100000000, 0, -6001)), 100000000, 0, -6000)), 100000000, 0, -5999)), 100000000, 0, -5998)), 100000000, 0, -5997)), 100000000, 0, -5996)), 100000000, 0, -5995)), 100000000, 0, -5994)), 100000000, 0, -5993)), 100000000, 0, -5992)), 100000000, 0, -5991)), 100000000, 0, -5990)), 100000000, 0, -5989)), 100000000, 0, -5988)), 100000000, 0, -5987)), 100000000, 0, -5986)), 100000000, 0, -5985)), 100000000, 0, -5984)), 100000000, 0, -5983)), 100000000, 0, -5982)), 100000000, 0, -5981)), 100000000, 0, -5980)), 100000000, 0, -5979)), 100000000, 0, -5978)), 100000000, 0, -5977)), 100000000, 0, -5976)), 100000000, 0, -5975)), 100000000, 0, -5974)), 100000000, 0, -5973)), 100000000, 0, -5972)), 100000000, 0, -5971)), 100000000, 0, -5970)), 100000000, 0, -5969)), 100000000, 0, -5968)), 100000000, 0, -5967)), 100000000, 0, -5966)), 100000000, 0, -5965)), 100000000, 0, -5964)), 100000000, 0, -5963)), 100000000, 0, -5962)), 100000000, 0, -5961)), 100000000, 0, -5960)), 100000000, 0, -5959)), 100000000, 0, -5958)), 100000000, 0, -5957)), 100000000, 0, -5956)), 100000000, 0, -5955)), 100000000, 0, -5954), (([(("fold_map", 7453)); ((0), 100000000, 0, -6049); ((("acc")), 100000000, 0, -5357)]))), 100000000, 0, -5953)), [63], [2], 0, 0, (("ast/ast.ml", 4279, 158265, 158265), ("ast/ast.ml", 5620, 213077, 213082), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 3377)), [63], (("ast/ast.ml", 4279, 158265, 158265), ("ast/ast.ml", 5620, 213077, 213082), 0), 0, Tag1 ("Ppxlib_ast__Ast", 3377)), 1, 0); Tag1 (("fold_map", 7453), ([((("acc")), 100000000, 0, -5357)], 1, 0, 1, ((Tag4 ((Tag5 ("arg_label", 1, (Tag10 ((Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -5952), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -5951); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5950), 0), 100000000, 0, -5949), 0), 100000000, 0, -5948), 0), 100000000, 0, -5947), (Tag5 ("attribute", 1, (Tag10 ((Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -5946), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -5945); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5944), 0), 100000000, 0, -5943), 0), 100000000, 0, -5942), 0), 100000000, 0, -5941), (Tag5 ("attributes", 1, (Tag10 ((Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -5940), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -5939); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5938), 0), 100000000, 0, -5937), 0), 100000000, 0, -5936), 0), 100000000, 0, -5935), (Tag5 ("binding_op", 1, (Tag10 ((Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -5934), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -5933); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5932), 0), 100000000, 0, -5931), 0), 100000000, 0, -5930), 0), 100000000, 0, -5929), (Tag5 ("bool", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5928), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5927); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5926), 0), 100000000, 0, -5925), 0), 100000000, 0, -5924), 0), 100000000, 0, -5923), (Tag5 ("case", 1, (Tag10 ((Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -5922), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -5921); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5920), 0), 100000000, 0, -5919), 0), 100000000, 0, -5918), 0), 100000000, 0, -5917), (Tag5 ("cases", 1, (Tag10 ((Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -5916), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -5915); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5914), 0), 100000000, 0, -5913), 0), 100000000, 0, -5912), 0), 100000000, 0, -5911), (Tag5 ("char", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -5910), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -5909); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5908), 0), 100000000, 0, -5907), 0), 100000000, 0, -5906), 0), 100000000, 0, -5905), (Tag5 ("class_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -5904), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -5903); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5902), 0), 100000000, 0, -5901), 0), 100000000, 0, -5900), 0), 100000000, 0, -5899), (Tag5 ("class_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -5898), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -5897); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5896), 0), 100000000, 0, -5895), 0), 100000000, 0, -5894), 0), 100000000, 0, -5893), (Tag5 ("class_expr", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -5892), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -5891); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5890), 0), 100000000, 0, -5889), 0), 100000000, 0, -5888), 0), 100000000, 0, -5887), (Tag5 ("class_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -5886), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -5885); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5884), 0), 100000000, 0, -5883), 0), 100000000, 0, -5882), 0), 100000000, 0, -5881), (Tag5 ("class_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -5880), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -5879); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5878), 0), 100000000, 0, -5877), 0), 100000000, 0, -5876), 0), 100000000, 0, -5875), (Tag5 ("class_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -5874), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -5873); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5872), 0), 100000000, 0, -5871), 0), 100000000, 0, -5870), 0), 100000000, 0, -5869), (Tag5 ("class_field_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -5868), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -5867); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5866), 0), 100000000, 0, -5865), 0), 100000000, 0, -5864), 0), 100000000, 0, -5863), (Tag5 ("class_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -5853), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag9 (("a")), 100000000, 0, -5853); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5862), 0), 100000000, 0, -5861), 0), 100000000, 0, -5860), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -5853)], (0)), 100000000, 0, -5859), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -5853)], (0)), 100000000, 0, -5858); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5857), 0), 100000000, 0, -5856), 0), 100000000, 0, -5855), 0), 100000000, 0, -5854), [(Tag9 (("a")), 100000000, 0, -5853)]), 100000000, 0, -5852), (Tag5 ("class_signature", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -5851), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -5850); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5849), 0), 100000000, 0, -5848), 0), 100000000, 0, -5847), 0), 100000000, 0, -5846), (Tag5 ("class_structure", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -5845), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -5844); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5843), 0), 100000000, 0, -5842), 0), 100000000, 0, -5841), 0), 100000000, 0, -5840), (Tag5 ("class_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -5839), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -5838); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5837), 0), 100000000, 0, -5836), 0), 100000000, 0, -5835), 0), 100000000, 0, -5834), (Tag5 ("class_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -5833), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -5832); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5831), 0), 100000000, 0, -5830), 0), 100000000, 0, -5829), 0), 100000000, 0, -5828), (Tag5 ("class_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -5827), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -5826); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5825), 0), 100000000, 0, -5824), 0), 100000000, 0, -5823), 0), 100000000, 0, -5822), (Tag5 ("class_type_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -5821), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -5820); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5819), 0), 100000000, 0, -5818), 0), 100000000, 0, -5817), 0), 100000000, 0, -5816), (Tag5 ("class_type_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -5815), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -5814); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5813), 0), 100000000, 0, -5812), 0), 100000000, 0, -5811), 0), 100000000, 0, -5810), (Tag5 ("closed_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -5809), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -5808); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5807), 0), 100000000, 0, -5806), 0), 100000000, 0, -5805), 0), 100000000, 0, -5804), (Tag5 ("constant", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -5803), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -5802); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5801), 0), 100000000, 0, -5800), 0), 100000000, 0, -5799), 0), 100000000, 0, -5798), (Tag5 ("constructor_arguments", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -5797), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -5796); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5795), 0), 100000000, 0, -5794), 0), 100000000, 0, -5793), 0), 100000000, 0, -5792), (Tag5 ("constructor_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -5791), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -5790); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5789), 0), 100000000, 0, -5788), 0), 100000000, 0, -5787), 0), 100000000, 0, -5786), (Tag5 ("core_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -5785), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -5784); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5783), 0), 100000000, 0, -5782), 0), 100000000, 0, -5781), 0), 100000000, 0, -5780), (Tag5 ("core_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -5779), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -5778); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5777), 0), 100000000, 0, -5776), 0), 100000000, 0, -5775), 0), 100000000, 0, -5774), (Tag5 ("direction_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -5773), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -5772); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5771), 0), 100000000, 0, -5770), 0), 100000000, 0, -5769), 0), 100000000, 0, -5768), (Tag5 ("directive_argument", 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -5767), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -5766); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5765), 0), 100000000, 0, -5764), 0), 100000000, 0, -5763), 0), 100000000, 0, -5762), (Tag5 ("directive_argument_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -5761), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -5760); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5759), 0), 100000000, 0, -5758), 0), 100000000, 0, -5757), 0), 100000000, 0, -5756), (Tag5 ("expression", 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -5755), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -5754); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5753), 0), 100000000, 0, -5752), 0), 100000000, 0, -5751), 0), 100000000, 0, -5750), (Tag5 ("expression_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -5749), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -5748); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5747), 0), 100000000, 0, -5746), 0), 100000000, 0, -5745), 0), 100000000, 0, -5744), (Tag5 ("extension", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -5743), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -5742); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5741), 0), 100000000, 0, -5740), 0), 100000000, 0, -5739), 0), 100000000, 0, -5738), (Tag5 ("extension_constructor", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -5737), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -5736); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5735), 0), 100000000, 0, -5734), 0), 100000000, 0, -5733), 0), 100000000, 0, -5732), (Tag5 ("extension_constructor_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -5731), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -5730); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5729), 0), 100000000, 0, -5728), 0), 100000000, 0, -5727), 0), 100000000, 0, -5726), (Tag5 ("functor_parameter", 1, (Tag10 ((Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -5725), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -5724); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5723), 0), 100000000, 0, -5722), 0), 100000000, 0, -5721), 0), 100000000, 0, -5720), (Tag5 ("include_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -5719), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -5718); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5717), 0), 100000000, 0, -5716), 0), 100000000, 0, -5715), 0), 100000000, 0, -5714), (Tag5 ("include_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -5713), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -5712); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5711), 0), 100000000, 0, -5710), 0), 100000000, 0, -5709), 0), 100000000, 0, -5708), (Tag5 ("include_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -5698), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag9 (("a")), 100000000, 0, -5698); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5707), 0), 100000000, 0, -5706), 0), 100000000, 0, -5705), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -5698)], (0)), 100000000, 0, -5704), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -5698)], (0)), 100000000, 0, -5703); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5702), 0), 100000000, 0, -5701), 0), 100000000, 0, -5700), 0), 100000000, 0, -5699), [(Tag9 (("a")), 100000000, 0, -5698)]), 100000000, 0, -5697), (Tag5 ("injectivity", 1, (Tag10 ((Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -5696), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -5695); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5694), 0), 100000000, 0, -5693), 0), 100000000, 0, -5692), 0), 100000000, 0, -5691), (Tag5 ("int", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -5690), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -5689); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5688), 0), 100000000, 0, -5687), 0), 100000000, 0, -5686), 0), 100000000, 0, -5685), (Tag5 ("label", 1, (Tag10 ((Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -5684), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -5683); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5682), 0), 100000000, 0, -5681), 0), 100000000, 0, -5680), 0), 100000000, 0, -5679), (Tag5 ("label_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -5678), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -5677); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5676), 0), 100000000, 0, -5675), 0), 100000000, 0, -5674), 0), 100000000, 0, -5673), (Tag5 ("letop", 1, (Tag10 ((Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -5672), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -5671); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5670), 0), 100000000, 0, -5669), 0), 100000000, 0, -5668), 0), 100000000, 0, -5667), (Tag5 ("list", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -5657), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag9 (("a")), 100000000, 0, -5657); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5666), 0), 100000000, 0, -5665), 0), 100000000, 0, -5664), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -5657)], (0)), 100000000, 0, -5663), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -5657)], (0)), 100000000, 0, -5662); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5661), 0), 100000000, 0, -5660), 0), 100000000, 0, -5659), 0), 100000000, 0, -5658), [(Tag9 (("a")), 100000000, 0, -5657)]), 100000000, 0, -5656), (Tag5 ("loc", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -5646), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag9 (("a")), 100000000, 0, -5646); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5655), 0), 100000000, 0, -5654), 0), 100000000, 0, -5653), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -5646)], (0)), 100000000, 0, -5652), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -5646)], (0)), 100000000, 0, -5651); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5650), 0), 100000000, 0, -5649), 0), 100000000, 0, -5648), 0), 100000000, 0, -5647), [(Tag9 (("a")), 100000000, 0, -5646)]), 100000000, 0, -5645), (Tag5 ("location", 1, (Tag10 ((Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -5644), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -5643); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5642), 0), 100000000, 0, -5641), 0), 100000000, 0, -5640), 0), 100000000, 0, -5639), (Tag5 ("location_stack", 1, (Tag10 ((Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -5638), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -5637); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5636), 0), 100000000, 0, -5635), 0), 100000000, 0, -5634), 0), 100000000, 0, -5633), (Tag5 ("longident", 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -5632), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -5631); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5630), 0), 100000000, 0, -5629), 0), 100000000, 0, -5628), 0), 100000000, 0, -5627), (Tag5 ("longident_loc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -5626), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -5625); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5624), 0), 100000000, 0, -5623), 0), 100000000, 0, -5622), 0), 100000000, 0, -5621), (Tag5 ("module_binding", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -5620), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -5619); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5618), 0), 100000000, 0, -5617), 0), 100000000, 0, -5616), 0), 100000000, 0, -5615), (Tag5 ("module_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -5614), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -5613); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5612), 0), 100000000, 0, -5611), 0), 100000000, 0, -5610), 0), 100000000, 0, -5609), (Tag5 ("module_expr", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -5608), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -5607); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5606), 0), 100000000, 0, -5605), 0), 100000000, 0, -5604), 0), 100000000, 0, -5603), (Tag5 ("module_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -5602), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -5601); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5600), 0), 100000000, 0, -5599), 0), 100000000, 0, -5598), 0), 100000000, 0, -5597), (Tag5 ("module_substitution", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -5596), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -5595); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5594), 0), 100000000, 0, -5593), 0), 100000000, 0, -5592), 0), 100000000, 0, -5591), (Tag5 ("module_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -5590), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -5589); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5588), 0), 100000000, 0, -5587), 0), 100000000, 0, -5586), 0), 100000000, 0, -5585), (Tag5 ("module_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -5584), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -5583); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5582), 0), 100000000, 0, -5581), 0), 100000000, 0, -5580), 0), 100000000, 0, -5579), (Tag5 ("module_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -5578), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -5577); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5576), 0), 100000000, 0, -5575), 0), 100000000, 0, -5574), 0), 100000000, 0, -5573), (Tag5 ("mutable_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -5572), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -5571); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5570), 0), 100000000, 0, -5569), 0), 100000000, 0, -5568), 0), 100000000, 0, -5567), (Tag5 ("object_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -5566), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -5565); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5564), 0), 100000000, 0, -5563), 0), 100000000, 0, -5562), 0), 100000000, 0, -5561), (Tag5 ("object_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -5560), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -5559); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5558), 0), 100000000, 0, -5557), 0), 100000000, 0, -5556), 0), 100000000, 0, -5555), (Tag5 ("open_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -5554), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -5553); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5552), 0), 100000000, 0, -5551), 0), 100000000, 0, -5550), 0), 100000000, 0, -5549), (Tag5 ("open_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -5548), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -5547); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5546), 0), 100000000, 0, -5545), 0), 100000000, 0, -5544), 0), 100000000, 0, -5543), (Tag5 ("open_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -5533), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag9 (("a")), 100000000, 0, -5533); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5542), 0), 100000000, 0, -5541), 0), 100000000, 0, -5540), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -5533)], (0)), 100000000, 0, -5539), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -5533)], (0)), 100000000, 0, -5538); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5537), 0), 100000000, 0, -5536), 0), 100000000, 0, -5535), 0), 100000000, 0, -5534), [(Tag9 (("a")), 100000000, 0, -5533)]), 100000000, 0, -5532), (Tag5 ("option", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -5522), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag9 (("a")), 100000000, 0, -5522); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5531), 0), 100000000, 0, -5530), 0), 100000000, 0, -5529), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -5522)], (0)), 100000000, 0, -5528), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -5522)], (0)), 100000000, 0, -5527); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5526), 0), 100000000, 0, -5525), 0), 100000000, 0, -5524), 0), 100000000, 0, -5523), [(Tag9 (("a")), 100000000, 0, -5522)]), 100000000, 0, -5521), (Tag5 ("override_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -5520), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -5519); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5518), 0), 100000000, 0, -5517), 0), 100000000, 0, -5516), 0), 100000000, 0, -5515), (Tag5 ("package_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -5514), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -5513); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5512), 0), 100000000, 0, -5511), 0), 100000000, 0, -5510), 0), 100000000, 0, -5509), (Tag5 ("pattern", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -5508), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -5507); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5506), 0), 100000000, 0, -5505), 0), 100000000, 0, -5504), 0), 100000000, 0, -5503), (Tag5 ("pattern_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -5502), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -5501); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5500), 0), 100000000, 0, -5499), 0), 100000000, 0, -5498), 0), 100000000, 0, -5497), (Tag5 ("payload", 1, (Tag10 ((Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -5496), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -5495); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5494), 0), 100000000, 0, -5493), 0), 100000000, 0, -5492), 0), 100000000, 0, -5491), (Tag5 ("position", 1, (Tag10 ((Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -5490), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -5489); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5488), 0), 100000000, 0, -5487), 0), 100000000, 0, -5486), 0), 100000000, 0, -5485), (Tag5 ("private_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -5484), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -5483); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5482), 0), 100000000, 0, -5481), 0), 100000000, 0, -5480), 0), 100000000, 0, -5479), (Tag5 ("rec_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -5478), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -5477); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5476), 0), 100000000, 0, -5475), 0), 100000000, 0, -5474), 0), 100000000, 0, -5473), (Tag5 ("row_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -5472), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -5471); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5470), 0), 100000000, 0, -5469), 0), 100000000, 0, -5468), 0), 100000000, 0, -5467), (Tag5 ("row_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -5466), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -5465); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5464), 0), 100000000, 0, -5463), 0), 100000000, 0, -5462), 0), 100000000, 0, -5461), (Tag5 ("signature", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -5460), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -5459); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5458), 0), 100000000, 0, -5457), 0), 100000000, 0, -5456), 0), 100000000, 0, -5455), (Tag5 ("signature_item", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -5454), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -5453); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5452), 0), 100000000, 0, -5451), 0), 100000000, 0, -5450), 0), 100000000, 0, -5449), (Tag5 ("signature_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -5448), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -5447); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5446), 0), 100000000, 0, -5445), 0), 100000000, 0, -5444), 0), 100000000, 0, -5443), (Tag5 ("string", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5442), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5441); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5440), 0), 100000000, 0, -5439), 0), 100000000, 0, -5438), 0), 100000000, 0, -5437), (Tag5 ("structure", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -5436), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -5435); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5434), 0), 100000000, 0, -5433), 0), 100000000, 0, -5432), 0), 100000000, 0, -5431), (Tag5 ("structure_item", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -5430), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -5429); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5428), 0), 100000000, 0, -5427), 0), 100000000, 0, -5426), 0), 100000000, 0, -5425), (Tag5 ("structure_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -5424), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -5423); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5422), 0), 100000000, 0, -5421), 0), 100000000, 0, -5420), 0), 100000000, 0, -5419), (Tag5 ("toplevel_directive", 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -5418), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -5417); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5416), 0), 100000000, 0, -5415), 0), 100000000, 0, -5414), 0), 100000000, 0, -5413), (Tag5 ("toplevel_phrase", 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -5412), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -5411); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5410), 0), 100000000, 0, -5409), 0), 100000000, 0, -5408), 0), 100000000, 0, -5407), (Tag5 ("type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -5406), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -5405); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5404), 0), 100000000, 0, -5403), 0), 100000000, 0, -5402), 0), 100000000, 0, -5401), (Tag5 ("type_exception", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -5400), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -5399); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5398), 0), 100000000, 0, -5397), 0), 100000000, 0, -5396), 0), 100000000, 0, -5395), (Tag5 ("type_extension", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -5394), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -5393); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5392), 0), 100000000, 0, -5391), 0), 100000000, 0, -5390), 0), 100000000, 0, -5389), (Tag5 ("type_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -5388), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -5387); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5386), 0), 100000000, 0, -5385), 0), 100000000, 0, -5384), 0), 100000000, 0, -5383), (Tag5 ("value_binding", 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -5382), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -5381); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5380), 0), 100000000, 0, -5379), 0), 100000000, 0, -5378), 0), 100000000, 0, -5377), (Tag5 ("value_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -5376), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -5375); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5374), 0), 100000000, 0, -5373), 0), 100000000, 0, -5372), 0), 100000000, 0, -5371), (Tag5 ("variance", 1, (Tag10 ((Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -5370), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -5369); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5368), 0), 100000000, 0, -5367), 0), 100000000, 0, -5366), 0), 100000000, 0, -5365), (Tag5 ("virtual_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -5364), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -5363); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5362), 0), 100000000, 0, -5361), 0), 100000000, 0, -5360), 0), 100000000, 0, -5359), (Tag5 ("with_constraint", 1, (Tag10 ((Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -5358), (Tag1 (0, ((("acc")), 100000000, 0, -5357), (Tag2 ([(Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -5356); ((("acc")), 100000000, 0, -5357)]), 100000000, 0, -5355), 0), 100000000, 0, -5354), 0), 100000000, 0, -5353), 0), 100000000, 0, -5352), (0, 100000000, 0, -5351)), 100000000, 0, -5350)), 100000000, 0, -5349)), 100000000, 0, -5348)), 100000000, 0, -5347)), 100000000, 0, -5346)), 100000000, 0, -5345)), 100000000, 0, -5344)), 100000000, 0, -5343)), 100000000, 0, -5342)), 100000000, 0, -5341)), 100000000, 0, -5340)), 100000000, 0, -5339)), 100000000, 0, -5338)), 100000000, 0, -5337)), 100000000, 0, -5336)), 100000000, 0, -5335)), 100000000, 0, -5334)), 100000000, 0, -5333)), 100000000, 0, -5332)), 100000000, 0, -5331)), 100000000, 0, -5330)), 100000000, 0, -5329)), 100000000, 0, -5328)), 100000000, 0, -5327)), 100000000, 0, -5326)), 100000000, 0, -5325)), 100000000, 0, -5324)), 100000000, 0, -5323)), 100000000, 0, -5322)), 100000000, 0, -5321)), 100000000, 0, -5320)), 100000000, 0, -5319)), 100000000, 0, -5318)), 100000000, 0, -5317)), 100000000, 0, -5316)), 100000000, 0, -5315)), 100000000, 0, -5314)), 100000000, 0, -5313)), 100000000, 0, -5312)), 100000000, 0, -5311)), 100000000, 0, -5310)), 100000000, 0, -5309)), 100000000, 0, -5308)), 100000000, 0, -5307)), 100000000, 0, -5306)), 100000000, 0, -5305)), 100000000, 0, -5304)), 100000000, 0, -5303)), 100000000, 0, -5302)), 100000000, 0, -5301)), 100000000, 0, -5300)), 100000000, 0, -5299)), 100000000, 0, -5298)), 100000000, 0, -5297)), 100000000, 0, -5296)), 100000000, 0, -5295)), 100000000, 0, -5294)), 100000000, 0, -5293)), 100000000, 0, -5292)), 100000000, 0, -5291)), 100000000, 0, -5290)), 100000000, 0, -5289)), 100000000, 0, -5288)), 100000000, 0, -5287)), 100000000, 0, -5286)), 100000000, 0, -5285)), 100000000, 0, -5284)), 100000000, 0, -5283)), 100000000, 0, -5282)), 100000000, 0, -5281)), 100000000, 0, -5280)), 100000000, 0, -5279)), 100000000, 0, -5278)), 100000000, 0, -5277)), 100000000, 0, -5276)), 100000000, 0, -5275)), 100000000, 0, -5274)), 100000000, 0, -5273)), 100000000, 0, -5272)), 100000000, 0, -5271)), 100000000, 0, -5270)), 100000000, 0, -5269)), 100000000, 0, -5268)), 100000000, 0, -5267)), 100000000, 0, -5266)), 100000000, 0, -5265)), 100000000, 0, -5264)), 100000000, 0, -5263)), 100000000, 0, -5262)), 100000000, 0, -5261)), 100000000, 0, -5260)), 100000000, 0, -5259)), 100000000, 0, -5258)), 100000000, 0, -5257)), 100000000, 0, -5256), (0)), 100000000, 0, -5255)), [63], [2], 0, 0, (("ast/ast.ml", 4279, 158265, 158265), ("ast/ast.ml", 5620, 213077, 213082), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 3377)), 1, 0); Tag5 (("map_with_context", 7454), ([((("ctx")), 100000000, 0, -4073)], Tag1 (((Tag4 ((Tag5 ("bool", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4547), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4546), 0), 100000000, 0, -4545), 0), 100000000, 0, -4544), 0), 100000000, 0, -4543), (Tag5 ("char", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -4532), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -4531), 0), 100000000, 0, -4530), 0), 100000000, 0, -4529), 0), 100000000, 0, -4528), (Tag5 ("int", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -4349), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -4348), 0), 100000000, 0, -4347), 0), 100000000, 0, -4346), 0), 100000000, 0, -4345), (Tag5 ("list", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -4322), (Tag9 (("a")), 100000000, 0, -4322), 0), 100000000, 0, -4329), 0), 100000000, 0, -4328), (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -4322)], (0)), 100000000, 0, -4327), (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -4322)], (0)), 100000000, 0, -4326), 0), 100000000, 0, -4325), 0), 100000000, 0, -4324), 0), 100000000, 0, -4323), [(Tag9 (("a")), 100000000, 0, -4322)]), 100000000, 0, -4321), (Tag5 ("option", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -4210), (Tag9 (("a")), 100000000, 0, -4210), 0), 100000000, 0, -4217), 0), 100000000, 0, -4216), (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -4210)], (0)), 100000000, 0, -4215), (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -4210)], (0)), 100000000, 0, -4214), 0), 100000000, 0, -4213), 0), 100000000, 0, -4212), 0), 100000000, 0, -4211), [(Tag9 (("a")), 100000000, 0, -4210)]), 100000000, 0, -4209), (Tag5 ("string", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4143), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4142), 0), 100000000, 0, -4141), 0), 100000000, 0, -4140), 0), 100000000, 0, -4139), (Tag5 ("position", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -4183), (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -4182), 0), 100000000, 0, -4181), 0), 100000000, 0, -4180), 0), 100000000, 0, -4179), (Tag5 ("location", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -4311), (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -4310), 0), 100000000, 0, -4309), 0), 100000000, 0, -4308), 0), 100000000, 0, -4307), (Tag5 ("location_stack", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -4306), (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -4305), 0), 100000000, 0, -4304), 0), 100000000, 0, -4303), 0), 100000000, 0, -4302), (Tag5 ("loc", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -4313), (Tag9 (("a")), 100000000, 0, -4313), 0), 100000000, 0, -4320), 0), 100000000, 0, -4319), (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -4313)], (0)), 100000000, 0, -4318), (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -4313)], (0)), 100000000, 0, -4317), 0), 100000000, 0, -4316), 0), 100000000, 0, -4315), 0), 100000000, 0, -4314), [(Tag9 (("a")), 100000000, 0, -4313)]), 100000000, 0, -4312), (Tag5 ("longident", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -4301), (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -4300), 0), 100000000, 0, -4299), 0), 100000000, 0, -4298), 0), 100000000, 0, -4297), (Tag5 ("longident_loc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -4296), (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -4295), 0), 100000000, 0, -4294), 0), 100000000, 0, -4293), 0), 100000000, 0, -4292), (Tag5 ("rec_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -4173), (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -4172), 0), 100000000, 0, -4171), 0), 100000000, 0, -4170), 0), 100000000, 0, -4169), (Tag5 ("direction_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -4418), (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -4417), 0), 100000000, 0, -4416), 0), 100000000, 0, -4415), 0), 100000000, 0, -4414), (Tag5 ("private_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -4178), (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -4177), 0), 100000000, 0, -4176), 0), 100000000, 0, -4175), 0), 100000000, 0, -4174), (Tag5 ("mutable_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -4251), (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -4250), 0), 100000000, 0, -4249), 0), 100000000, 0, -4248), 0), 100000000, 0, -4247), (Tag5 ("virtual_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -4078), (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -4077), 0), 100000000, 0, -4076), 0), 100000000, 0, -4075), 0), 100000000, 0, -4074), (Tag5 ("override_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -4208), (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -4207), 0), 100000000, 0, -4206), 0), 100000000, 0, -4205), 0), 100000000, 0, -4204), (Tag5 ("closed_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -4448), (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -4447), 0), 100000000, 0, -4446), 0), 100000000, 0, -4445), 0), 100000000, 0, -4444), (Tag5 ("label", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -4344), (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -4343), 0), 100000000, 0, -4342), 0), 100000000, 0, -4341), 0), 100000000, 0, -4340), (Tag5 ("arg_label", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -4567), (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -4566), 0), 100000000, 0, -4565), 0), 100000000, 0, -4564), 0), 100000000, 0, -4563), (Tag5 ("variance", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -4083), (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -4082), 0), 100000000, 0, -4081), 0), 100000000, 0, -4080), 0), 100000000, 0, -4079), (Tag5 ("injectivity", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -4354), (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -4353), 0), 100000000, 0, -4352), 0), 100000000, 0, -4351), 0), 100000000, 0, -4350), (Tag5 ("constant", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -4443), (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -4442), 0), 100000000, 0, -4441), 0), 100000000, 0, -4440), 0), 100000000, 0, -4439), (Tag5 ("attribute", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -4562), (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -4561), 0), 100000000, 0, -4560), 0), 100000000, 0, -4559), 0), 100000000, 0, -4558), (Tag5 ("extension", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -4393), (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -4392), 0), 100000000, 0, -4391), 0), 100000000, 0, -4390), 0), 100000000, 0, -4389), (Tag5 ("attributes", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -4557), (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -4556), 0), 100000000, 0, -4555), 0), 100000000, 0, -4554), 0), 100000000, 0, -4553), (Tag5 ("payload", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -4188), (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -4187), 0), 100000000, 0, -4186), 0), 100000000, 0, -4185), 0), 100000000, 0, -4184), (Tag5 ("core_type", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -4428), (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -4427), 0), 100000000, 0, -4426), 0), 100000000, 0, -4425), 0), 100000000, 0, -4424), (Tag5 ("core_type_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -4423), (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -4422), 0), 100000000, 0, -4421), 0), 100000000, 0, -4420), 0), 100000000, 0, -4419), (Tag5 ("package_type", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -4203), (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -4202), 0), 100000000, 0, -4201), 0), 100000000, 0, -4200), 0), 100000000, 0, -4199), (Tag5 ("row_field", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -4168), (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -4167), 0), 100000000, 0, -4166), 0), 100000000, 0, -4165), 0), 100000000, 0, -4164), (Tag5 ("row_field_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -4163), (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -4162), 0), 100000000, 0, -4161), 0), 100000000, 0, -4160), 0), 100000000, 0, -4159), (Tag5 ("object_field", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -4246), (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -4245), 0), 100000000, 0, -4244), 0), 100000000, 0, -4243), 0), 100000000, 0, -4242), (Tag5 ("object_field_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -4241), (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -4240), 0), 100000000, 0, -4239), 0), 100000000, 0, -4238), 0), 100000000, 0, -4237), (Tag5 ("pattern", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -4198), (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -4197), 0), 100000000, 0, -4196), 0), 100000000, 0, -4195), 0), 100000000, 0, -4194), (Tag5 ("pattern_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -4193), (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -4192), 0), 100000000, 0, -4191), 0), 100000000, 0, -4190), 0), 100000000, 0, -4189), (Tag5 ("expression", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -4403), (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -4402), 0), 100000000, 0, -4401), 0), 100000000, 0, -4400), 0), 100000000, 0, -4399), (Tag5 ("expression_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -4398), (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -4397), 0), 100000000, 0, -4396), 0), 100000000, 0, -4395), 0), 100000000, 0, -4394), (Tag5 ("case", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -4542), (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -4541), 0), 100000000, 0, -4540), 0), 100000000, 0, -4539), 0), 100000000, 0, -4538), (Tag5 ("letop", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -4334), (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -4333), 0), 100000000, 0, -4332), 0), 100000000, 0, -4331), 0), 100000000, 0, -4330), (Tag5 ("binding_op", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -4552), (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -4551), 0), 100000000, 0, -4550), 0), 100000000, 0, -4549), 0), 100000000, 0, -4548), (Tag5 ("value_description", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -4088), (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -4087), 0), 100000000, 0, -4086), 0), 100000000, 0, -4085), 0), 100000000, 0, -4084), (Tag5 ("type_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -4113), (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -4112), 0), 100000000, 0, -4111), 0), 100000000, 0, -4110), 0), 100000000, 0, -4109), (Tag5 ("type_kind", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -4098), (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -4097), 0), 100000000, 0, -4096), 0), 100000000, 0, -4095), 0), 100000000, 0, -4094), (Tag5 ("label_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -4339), (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -4338), 0), 100000000, 0, -4337), 0), 100000000, 0, -4336), 0), 100000000, 0, -4335), (Tag5 ("constructor_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -4433), (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -4432), 0), 100000000, 0, -4431), 0), 100000000, 0, -4430), 0), 100000000, 0, -4429), (Tag5 ("constructor_arguments", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -4438), (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -4437), 0), 100000000, 0, -4436), 0), 100000000, 0, -4435), 0), 100000000, 0, -4434), (Tag5 ("type_extension", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -4103), (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -4102), 0), 100000000, 0, -4101), 0), 100000000, 0, -4100), 0), 100000000, 0, -4099), (Tag5 ("extension_constructor", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -4388), (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -4387), 0), 100000000, 0, -4386), 0), 100000000, 0, -4385), 0), 100000000, 0, -4384), (Tag5 ("type_exception", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -4108), (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -4107), 0), 100000000, 0, -4106), 0), 100000000, 0, -4105), 0), 100000000, 0, -4104), (Tag5 ("extension_constructor_kind", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -4383), (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -4382), 0), 100000000, 0, -4381), 0), 100000000, 0, -4380), 0), 100000000, 0, -4379), (Tag5 ("class_type", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -4473), (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -4472), 0), 100000000, 0, -4471), 0), 100000000, 0, -4470), 0), 100000000, 0, -4469), (Tag5 ("class_type_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -4463), (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -4462), 0), 100000000, 0, -4461), 0), 100000000, 0, -4460), 0), 100000000, 0, -4459), (Tag5 ("class_signature", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -4483), (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -4482), 0), 100000000, 0, -4481), 0), 100000000, 0, -4480), 0), 100000000, 0, -4479), (Tag5 ("class_type_field", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -4458), (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -4457), 0), 100000000, 0, -4456), 0), 100000000, 0, -4455), 0), 100000000, 0, -4454), (Tag5 ("class_type_field_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -4453), (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -4452), 0), 100000000, 0, -4451), 0), 100000000, 0, -4450), 0), 100000000, 0, -4449), (Tag5 ("class_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -4485), (Tag9 (("a")), 100000000, 0, -4485), 0), 100000000, 0, -4492), 0), 100000000, 0, -4491), (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -4485)], (0)), 100000000, 0, -4490), (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -4485)], (0)), 100000000, 0, -4489), 0), 100000000, 0, -4488), 0), 100000000, 0, -4487), 0), 100000000, 0, -4486), [(Tag9 (("a")), 100000000, 0, -4485)]), 100000000, 0, -4484), (Tag5 ("class_description", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -4522), (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -4521), 0), 100000000, 0, -4520), 0), 100000000, 0, -4519), 0), 100000000, 0, -4518), (Tag5 ("class_type_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -4468), (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -4467), 0), 100000000, 0, -4466), 0), 100000000, 0, -4465), 0), 100000000, 0, -4464), (Tag5 ("class_expr", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -4517), (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -4516), 0), 100000000, 0, -4515), 0), 100000000, 0, -4514), 0), 100000000, 0, -4513), (Tag5 ("class_expr_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -4512), (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -4511), 0), 100000000, 0, -4510), 0), 100000000, 0, -4509), 0), 100000000, 0, -4508), (Tag5 ("class_structure", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -4478), (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -4477), 0), 100000000, 0, -4476), 0), 100000000, 0, -4475), 0), 100000000, 0, -4474), (Tag5 ("class_field", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -4507), (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -4506), 0), 100000000, 0, -4505), 0), 100000000, 0, -4504), 0), 100000000, 0, -4503), (Tag5 ("class_field_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -4502), (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -4501), 0), 100000000, 0, -4500), 0), 100000000, 0, -4499), 0), 100000000, 0, -4498), (Tag5 ("class_field_kind", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -4497), (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -4496), 0), 100000000, 0, -4495), 0), 100000000, 0, -4494), 0), 100000000, 0, -4493), (Tag5 ("class_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -4527), (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -4526), 0), 100000000, 0, -4525), 0), 100000000, 0, -4524), 0), 100000000, 0, -4523), (Tag5 ("module_type", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -4266), (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -4265), 0), 100000000, 0, -4264), 0), 100000000, 0, -4263), 0), 100000000, 0, -4262), (Tag5 ("module_type_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -4256), (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -4255), 0), 100000000, 0, -4254), 0), 100000000, 0, -4253), 0), 100000000, 0, -4252), (Tag5 ("functor_parameter", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -4378), (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -4377), 0), 100000000, 0, -4376), 0), 100000000, 0, -4375), 0), 100000000, 0, -4374), (Tag5 ("signature", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -4158), (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -4157), 0), 100000000, 0, -4156), 0), 100000000, 0, -4155), 0), 100000000, 0, -4154), (Tag5 ("signature_item", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -4153), (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -4152), 0), 100000000, 0, -4151), 0), 100000000, 0, -4150), 0), 100000000, 0, -4149), (Tag5 ("signature_item_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -4148), (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -4147), 0), 100000000, 0, -4146), 0), 100000000, 0, -4145), 0), 100000000, 0, -4144), (Tag5 ("module_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -4286), (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -4285), 0), 100000000, 0, -4284), 0), 100000000, 0, -4283), 0), 100000000, 0, -4282), (Tag5 ("module_substitution", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -4271), (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -4270), 0), 100000000, 0, -4269), 0), 100000000, 0, -4268), 0), 100000000, 0, -4267), (Tag5 ("module_type_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -4261), (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -4260), 0), 100000000, 0, -4259), 0), 100000000, 0, -4258), 0), 100000000, 0, -4257), (Tag5 ("open_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -4219), (Tag9 (("a")), 100000000, 0, -4219), 0), 100000000, 0, -4226), 0), 100000000, 0, -4225), (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -4219)], (0)), 100000000, 0, -4224), (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -4219)], (0)), 100000000, 0, -4223), 0), 100000000, 0, -4222), 0), 100000000, 0, -4221), 0), 100000000, 0, -4220), [(Tag9 (("a")), 100000000, 0, -4219)]), 100000000, 0, -4218), (Tag5 ("open_description", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -4231), (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -4230), 0), 100000000, 0, -4229), 0), 100000000, 0, -4228), 0), 100000000, 0, -4227), (Tag5 ("open_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -4236), (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -4235), 0), 100000000, 0, -4234), 0), 100000000, 0, -4233), 0), 100000000, 0, -4232), (Tag5 ("include_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -4356), (Tag9 (("a")), 100000000, 0, -4356), 0), 100000000, 0, -4363), 0), 100000000, 0, -4362), (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -4356)], (0)), 100000000, 0, -4361), (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -4356)], (0)), 100000000, 0, -4360), 0), 100000000, 0, -4359), 0), 100000000, 0, -4358), 0), 100000000, 0, -4357), [(Tag9 (("a")), 100000000, 0, -4356)]), 100000000, 0, -4355), (Tag5 ("include_description", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -4368), (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -4367), 0), 100000000, 0, -4366), 0), 100000000, 0, -4365), 0), 100000000, 0, -4364), (Tag5 ("include_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -4373), (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -4372), 0), 100000000, 0, -4371), 0), 100000000, 0, -4370), 0), 100000000, 0, -4369), (Tag5 ("with_constraint", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -4072), (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -4071), 0), 100000000, 0, -4070), 0), 100000000, 0, -4069), 0), 100000000, 0, -4068), (Tag5 ("module_expr", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -4281), (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -4280), 0), 100000000, 0, -4279), 0), 100000000, 0, -4278), 0), 100000000, 0, -4277), (Tag5 ("module_expr_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -4276), (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -4275), 0), 100000000, 0, -4274), 0), 100000000, 0, -4273), 0), 100000000, 0, -4272), (Tag5 ("structure", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -4138), (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -4137), 0), 100000000, 0, -4136), 0), 100000000, 0, -4135), 0), 100000000, 0, -4134), (Tag5 ("structure_item", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -4133), (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -4132), 0), 100000000, 0, -4131), 0), 100000000, 0, -4130), 0), 100000000, 0, -4129), (Tag5 ("structure_item_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -4128), (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -4127), 0), 100000000, 0, -4126), 0), 100000000, 0, -4125), 0), 100000000, 0, -4124), (Tag5 ("value_binding", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -4093), (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -4092), 0), 100000000, 0, -4091), 0), 100000000, 0, -4090), 0), 100000000, 0, -4089), (Tag5 ("module_binding", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -4291), (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -4290), 0), 100000000, 0, -4289), 0), 100000000, 0, -4288), 0), 100000000, 0, -4287), (Tag5 ("toplevel_phrase", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -4118), (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -4117), 0), 100000000, 0, -4116), 0), 100000000, 0, -4115), 0), 100000000, 0, -4114), (Tag5 ("toplevel_directive", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -4123), (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -4122), 0), 100000000, 0, -4121), 0), 100000000, 0, -4120), 0), 100000000, 0, -4119), (Tag5 ("directive_argument", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -4413), (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -4412), 0), 100000000, 0, -4411), 0), 100000000, 0, -4410), 0), 100000000, 0, -4409), (Tag5 ("directive_argument_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -4408), (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -4407), 0), 100000000, 0, -4406), 0), 100000000, 0, -4405), 0), 100000000, 0, -4404), (Tag5 ("cases", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -4537), (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -4536), 0), 100000000, 0, -4535), 0), 100000000, 0, -4534), 0), 100000000, 0, -4533), ((0), 100000000, 0, -5158)), 100000000, 0, -5254)), 100000000, 0, -5253)), 100000000, 0, -5252)), 100000000, 0, -5251)), 100000000, 0, -5250)), 100000000, 0, -5249)), 100000000, 0, -5248)), 100000000, 0, -5247)), 100000000, 0, -5246)), 100000000, 0, -5245)), 100000000, 0, -5244)), 100000000, 0, -5243)), 100000000, 0, -5242)), 100000000, 0, -5241)), 100000000, 0, -5240)), 100000000, 0, -5239)), 100000000, 0, -5238)), 100000000, 0, -5237)), 100000000, 0, -5236)), 100000000, 0, -5235)), 100000000, 0, -5234)), 100000000, 0, -5233)), 100000000, 0, -5232)), 100000000, 0, -5231)), 100000000, 0, -5230)), 100000000, 0, -5229)), 100000000, 0, -5228)), 100000000, 0, -5227)), 100000000, 0, -5226)), 100000000, 0, -5225)), 100000000, 0, -5224)), 100000000, 0, -5223)), 100000000, 0, -5222)), 100000000, 0, -5221)), 100000000, 0, -5220)), 100000000, 0, -5219)), 100000000, 0, -5218)), 100000000, 0, -5217)), 100000000, 0, -5216)), 100000000, 0, -5215)), 100000000, 0, -5214)), 100000000, 0, -5213)), 100000000, 0, -5212)), 100000000, 0, -5211)), 100000000, 0, -5210)), 100000000, 0, -5209)), 100000000, 0, -5208)), 100000000, 0, -5207)), 100000000, 0, -5206)), 100000000, 0, -5205)), 100000000, 0, -5204)), 100000000, 0, -5203)), 100000000, 0, -5202)), 100000000, 0, -5201)), 100000000, 0, -5200)), 100000000, 0, -5199)), 100000000, 0, -5198)), 100000000, 0, -5197)), 100000000, 0, -5196)), 100000000, 0, -5195)), 100000000, 0, -5194)), 100000000, 0, -5193)), 100000000, 0, -5192)), 100000000, 0, -5191)), 100000000, 0, -5190)), 100000000, 0, -5189)), 100000000, 0, -5188)), 100000000, 0, -5187)), 100000000, 0, -5186)), 100000000, 0, -5185)), 100000000, 0, -5184)), 100000000, 0, -5183)), 100000000, 0, -5182)), 100000000, 0, -5181)), 100000000, 0, -5180)), 100000000, 0, -5179)), 100000000, 0, -5178)), 100000000, 0, -5177)), 100000000, 0, -5176)), 100000000, 0, -5175)), 100000000, 0, -5174)), 100000000, 0, -5173)), 100000000, 0, -5172)), 100000000, 0, -5171)), 100000000, 0, -5170)), 100000000, 0, -5169)), 100000000, 0, -5168)), 100000000, 0, -5167)), 100000000, 0, -5166)), 100000000, 0, -5165)), 100000000, 0, -5164)), 100000000, 0, -5163)), 100000000, 0, -5162)), 100000000, 0, -5161)), 100000000, 0, -5160), (([(("map_with_context", 7456)); ((0), 100000000, 0, -5158); ((("ctx")), 100000000, 0, -4073)]))), 100000000, 0, -5159), ((0), 100000000, 0, -5158), 0, (((((0, "arg_label", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -4669), (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -4668), 0), 100000000, 0, -4667), 0), 100000000, 0, -4666), 0), 100000000, 0, -4665)), 0, 1), "attribute", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -4674), (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -4673), 0), 100000000, 0, -4672), 0), 100000000, 0, -4671), 0), 100000000, 0, -4670)), ((0, "attributes", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -4679), (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -4678), 0), 100000000, 0, -4677), 0), 100000000, 0, -4676), 0), 100000000, 0, -4675)), (0, "binding_op", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -4684), (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -4683), 0), 100000000, 0, -4682), 0), 100000000, 0, -4681), 0), 100000000, 0, -4680)), 0, 1), 2), "bool", (0, 0, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4689), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4688), 0), 100000000, 0, -4687), 0), 100000000, 0, -4686), 0), 100000000, 0, -4685)), (0, "case", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -4694), (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -4693), 0), 100000000, 0, -4692), 0), 100000000, 0, -4691), 0), 100000000, 0, -4690)), (0, "cases", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -4699), (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -4698), 0), 100000000, 0, -4697), 0), 100000000, 0, -4696), 0), 100000000, 0, -4695)), 0, 1), 2), 3), 4), "char", (0, 0, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -4704), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -4703), 0), 100000000, 0, -4702), 0), 100000000, 0, -4701), 0), 100000000, 0, -4700)), ((((((0, "class_declaration", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -4709), (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -4708), 0), 100000000, 0, -4707), 0), 100000000, 0, -4706), 0), 100000000, 0, -4705)), 0, 1), "class_description", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -4714), (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -4713), 0), 100000000, 0, -4712), 0), 100000000, 0, -4711), 0), 100000000, 0, -4710)), 0, 2), "class_expr", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -4719), (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -4718), 0), 100000000, 0, -4717), 0), 100000000, 0, -4716), 0), 100000000, 0, -4715)), (0, "class_expr_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -4724), (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -4723), 0), 100000000, 0, -4722), 0), 100000000, 0, -4721), 0), 100000000, 0, -4720)), 0, 1), 3), "class_field", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -4729), (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -4728), 0), 100000000, 0, -4727), 0), 100000000, 0, -4726), 0), 100000000, 0, -4725)), ((0, "class_field_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -4734), (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -4733), 0), 100000000, 0, -4732), 0), 100000000, 0, -4731), 0), 100000000, 0, -4730)), (0, "class_field_kind", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -4739), (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -4738), 0), 100000000, 0, -4737), 0), 100000000, 0, -4736), 0), 100000000, 0, -4735)), 0, 1), 2), "class_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -4485), (Tag9 (("a")), 100000000, 0, -4485), 0), 100000000, 0, -4747), 0), 100000000, 0, -4746), (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -4485)], (0)), 100000000, 0, -4745), (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -4485)], (0)), 100000000, 0, -4744), 0), 100000000, 0, -4743), 0), 100000000, 0, -4742), 0), 100000000, 0, -4741), [(Tag9 (("a")), 100000000, 0, -4485)]), 100000000, 0, -4740)), 0, 3), 4), "class_signature", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -4752), (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -4751), 0), 100000000, 0, -4750), 0), 100000000, 0, -4749), 0), 100000000, 0, -4748)), ((0, "class_structure", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -4757), (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -4756), 0), 100000000, 0, -4755), 0), 100000000, 0, -4754), 0), 100000000, 0, -4753)), 0, 1), "class_type", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -4762), (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -4761), 0), 100000000, 0, -4760), 0), 100000000, 0, -4759), 0), 100000000, 0, -4758)), (0, "class_type_declaration", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -4767), (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -4766), 0), 100000000, 0, -4765), 0), 100000000, 0, -4764), 0), 100000000, 0, -4763)), 0, 1), 2), 5), "class_type_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -4772), (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -4771), 0), 100000000, 0, -4770), 0), 100000000, 0, -4769), 0), 100000000, 0, -4768)), (((0, "class_type_field", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -4777), (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -4776), 0), 100000000, 0, -4775), 0), 100000000, 0, -4774), 0), 100000000, 0, -4773)), (0, "class_type_field_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -4782), (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -4781), 0), 100000000, 0, -4780), 0), 100000000, 0, -4779), 0), 100000000, 0, -4778)), 0, 1), 2), "closed_flag", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -4787), (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -4786), 0), 100000000, 0, -4785), 0), 100000000, 0, -4784), 0), 100000000, 0, -4783)), 0, 3), "constant", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -4792), (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -4791), 0), 100000000, 0, -4790), 0), 100000000, 0, -4789), 0), 100000000, 0, -4788)), (((0, "constructor_arguments", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -4797), (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -4796), 0), 100000000, 0, -4795), 0), 100000000, 0, -4794), 0), 100000000, 0, -4793)), 0, 1), "constructor_declaration", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -4802), (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -4801), 0), 100000000, 0, -4800), 0), 100000000, 0, -4799), 0), 100000000, 0, -4798)), 0, 2), "core_type", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -4807), (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -4806), 0), 100000000, 0, -4805), 0), 100000000, 0, -4804), 0), 100000000, 0, -4803)), (0, "core_type_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -4812), (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -4811), 0), 100000000, 0, -4810), 0), 100000000, 0, -4809), 0), 100000000, 0, -4808)), 0, 1), 3), 4), 6), 7), "direction_flag", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -4817), (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -4816), 0), 100000000, 0, -4815), 0), 100000000, 0, -4814), 0), 100000000, 0, -4813)), ((((0, "directive_argument", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -4822), (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -4821), 0), 100000000, 0, -4820), 0), 100000000, 0, -4819), 0), 100000000, 0, -4818)), (0, "directive_argument_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -4827), (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -4826), 0), 100000000, 0, -4825), 0), 100000000, 0, -4824), 0), 100000000, 0, -4823)), 0, 1), 2), "expression", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -4832), (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -4831), 0), 100000000, 0, -4830), 0), 100000000, 0, -4829), 0), 100000000, 0, -4828)), (0, "expression_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -4837), (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -4836), 0), 100000000, 0, -4835), 0), 100000000, 0, -4834), 0), 100000000, 0, -4833)), 0, 1), 3), "extension", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -4842), (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -4841), 0), 100000000, 0, -4840), 0), 100000000, 0, -4839), 0), 100000000, 0, -4838)), (((0, "extension_constructor", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -4847), (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -4846), 0), 100000000, 0, -4845), 0), 100000000, 0, -4844), 0), 100000000, 0, -4843)), 0, 1), "extension_constructor_kind", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -4852), (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -4851), 0), 100000000, 0, -4850), 0), 100000000, 0, -4849), 0), 100000000, 0, -4848)), 0, 2), "functor_parameter", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -4857), (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -4856), 0), 100000000, 0, -4855), 0), 100000000, 0, -4854), 0), 100000000, 0, -4853)), (((0, "include_declaration", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -4862), (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -4861), 0), 100000000, 0, -4860), 0), 100000000, 0, -4859), 0), 100000000, 0, -4858)), 0, 1), "include_description", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -4867), (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -4866), 0), 100000000, 0, -4865), 0), 100000000, 0, -4864), 0), 100000000, 0, -4863)), 0, 2), "include_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -4356), (Tag9 (("a")), 100000000, 0, -4356), 0), 100000000, 0, -4875), 0), 100000000, 0, -4874), (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -4356)], (0)), 100000000, 0, -4873), (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -4356)], (0)), 100000000, 0, -4872), 0), 100000000, 0, -4871), 0), 100000000, 0, -4870), 0), 100000000, 0, -4869), [(Tag9 (("a")), 100000000, 0, -4356)]), 100000000, 0, -4868)), (0, "injectivity", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -4880), (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -4879), 0), 100000000, 0, -4878), 0), 100000000, 0, -4877), 0), 100000000, 0, -4876)), 0, 1), 3), 4), 5), "int", (0, 0, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -4885), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -4884), 0), 100000000, 0, -4883), 0), 100000000, 0, -4882), 0), 100000000, 0, -4881)), ((0, "label", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -4890), (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -4889), 0), 100000000, 0, -4888), 0), 100000000, 0, -4887), 0), 100000000, 0, -4886)), ((0, "label_declaration", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -4895), (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -4894), 0), 100000000, 0, -4893), 0), 100000000, 0, -4892), 0), 100000000, 0, -4891)), 0, 1), "letop", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -4900), (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -4899), 0), 100000000, 0, -4898), 0), 100000000, 0, -4897), 0), 100000000, 0, -4896)), 0, 2), 3), "list", (0, 0, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -4322), (Tag9 (("a")), 100000000, 0, -4322), 0), 100000000, 0, -4908), 0), 100000000, 0, -4907), (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -4322)], (0)), 100000000, 0, -4906), (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -4322)], (0)), 100000000, 0, -4905), 0), 100000000, 0, -4904), 0), 100000000, 0, -4903), 0), 100000000, 0, -4902), [(Tag9 (("a")), 100000000, 0, -4322)]), 100000000, 0, -4901)), (0, "loc", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -4313), (Tag9 (("a")), 100000000, 0, -4313), 0), 100000000, 0, -4916), 0), 100000000, 0, -4915), (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -4313)], (0)), 100000000, 0, -4914), (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -4313)], (0)), 100000000, 0, -4913), 0), 100000000, 0, -4912), 0), 100000000, 0, -4911), 0), 100000000, 0, -4910), [(Tag9 (("a")), 100000000, 0, -4313)]), 100000000, 0, -4909)), 0, 1), 4), 6), 8), "location", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -4921), (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -4920), 0), 100000000, 0, -4919), 0), 100000000, 0, -4918), 0), 100000000, 0, -4917)), (((((0, "location_stack", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -4926), (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -4925), 0), 100000000, 0, -4924), 0), 100000000, 0, -4923), 0), 100000000, 0, -4922)), 0, 1), "longident", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -4931), (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -4930), 0), 100000000, 0, -4929), 0), 100000000, 0, -4928), 0), 100000000, 0, -4927)), 0, 2), "longident_loc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -4936), (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -4935), 0), 100000000, 0, -4934), 0), 100000000, 0, -4933), 0), 100000000, 0, -4932)), ((((0, "module_binding", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -4941), (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -4940), 0), 100000000, 0, -4939), 0), 100000000, 0, -4938), 0), 100000000, 0, -4937)), 0, 1), "module_declaration", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -4946), (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -4945), 0), 100000000, 0, -4944), 0), 100000000, 0, -4943), 0), 100000000, 0, -4942)), 0, 2), "module_expr", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -4951), (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -4950), 0), 100000000, 0, -4949), 0), 100000000, 0, -4948), 0), 100000000, 0, -4947)), ((0, "module_expr_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -4956), (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -4955), 0), 100000000, 0, -4954), 0), 100000000, 0, -4953), 0), 100000000, 0, -4952)), 0, 1), "module_substitution", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -4961), (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -4960), 0), 100000000, 0, -4959), 0), 100000000, 0, -4958), 0), 100000000, 0, -4957)), 0, 2), 3), "module_type", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -4966), (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -4965), 0), 100000000, 0, -4964), 0), 100000000, 0, -4963), 0), 100000000, 0, -4962)), ((0, "module_type_declaration", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -4971), (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -4970), 0), 100000000, 0, -4969), 0), 100000000, 0, -4968), 0), 100000000, 0, -4967)), 0, 1), "module_type_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -4976), (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -4975), 0), 100000000, 0, -4974), 0), 100000000, 0, -4973), 0), 100000000, 0, -4972)), 0, 2), 4), 5), "mutable_flag", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -4981), (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -4980), 0), 100000000, 0, -4979), 0), 100000000, 0, -4978), 0), 100000000, 0, -4977)), ((0, "object_field", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -4986), (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -4985), 0), 100000000, 0, -4984), 0), 100000000, 0, -4983), 0), 100000000, 0, -4982)), 0, 1), "object_field_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -4991), (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -4990), 0), 100000000, 0, -4989), 0), 100000000, 0, -4988), 0), 100000000, 0, -4987)), (((0, "open_declaration", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -4996), (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -4995), 0), 100000000, 0, -4994), 0), 100000000, 0, -4993), 0), 100000000, 0, -4992)), 0, 1), "open_description", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -5001), (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -5000), 0), 100000000, 0, -4999), 0), 100000000, 0, -4998), 0), 100000000, 0, -4997)), 0, 2), "open_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -4219), (Tag9 (("a")), 100000000, 0, -4219), 0), 100000000, 0, -5009), 0), 100000000, 0, -5008), (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -4219)], (0)), 100000000, 0, -5007), (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -4219)], (0)), 100000000, 0, -5006), 0), 100000000, 0, -5005), 0), 100000000, 0, -5004), 0), 100000000, 0, -5003), [(Tag9 (("a")), 100000000, 0, -4219)]), 100000000, 0, -5002)), 0, 3), 4), 6), "option", (0, 0, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -4210), (Tag9 (("a")), 100000000, 0, -4210), 0), 100000000, 0, -5017), 0), 100000000, 0, -5016), (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -4210)], (0)), 100000000, 0, -5015), (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -4210)], (0)), 100000000, 0, -5014), 0), 100000000, 0, -5013), 0), 100000000, 0, -5012), 0), 100000000, 0, -5011), [(Tag9 (("a")), 100000000, 0, -4210)]), 100000000, 0, -5010)), (((((0, "override_flag", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -5022), (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -5021), 0), 100000000, 0, -5020), 0), 100000000, 0, -5019), 0), 100000000, 0, -5018)), 0, 1), "package_type", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -5027), (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -5026), 0), 100000000, 0, -5025), 0), 100000000, 0, -5024), 0), 100000000, 0, -5023)), (0, "pattern", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -5032), (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -5031), 0), 100000000, 0, -5030), 0), 100000000, 0, -5029), 0), 100000000, 0, -5028)), (0, "pattern_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -5037), (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -5036), 0), 100000000, 0, -5035), 0), 100000000, 0, -5034), 0), 100000000, 0, -5033)), 0, 1), 2), 3), "payload", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -5042), (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -5041), 0), 100000000, 0, -5040), 0), 100000000, 0, -5039), 0), 100000000, 0, -5038)), (0, "position", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -5047), (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -5046), 0), 100000000, 0, -5045), 0), 100000000, 0, -5044), 0), 100000000, 0, -5043)), (0, "private_flag", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -5052), (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -5051), 0), 100000000, 0, -5050), 0), 100000000, 0, -5049), 0), 100000000, 0, -5048)), 0, 1), 2), 4), "rec_flag", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -5057), (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -5056), 0), 100000000, 0, -5055), 0), 100000000, 0, -5054), 0), 100000000, 0, -5053)), ((0, "row_field", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -5062), (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -5061), 0), 100000000, 0, -5060), 0), 100000000, 0, -5059), 0), 100000000, 0, -5058)), 0, 1), "row_field_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -5067), (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -5066), 0), 100000000, 0, -5065), 0), 100000000, 0, -5064), 0), 100000000, 0, -5063)), (0, "signature", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -5072), (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -5071), 0), 100000000, 0, -5070), 0), 100000000, 0, -5069), 0), 100000000, 0, -5068)), (0, "signature_item", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -5077), (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -5076), 0), 100000000, 0, -5075), 0), 100000000, 0, -5074), 0), 100000000, 0, -5073)), (0, "signature_item_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -5082), (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -5081), 0), 100000000, 0, -5080), 0), 100000000, 0, -5079), 0), 100000000, 0, -5078)), 0, 1), 2), 3), 4), 5), "string", (0, 0, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5087), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5086), 0), 100000000, 0, -5085), 0), 100000000, 0, -5084), 0), 100000000, 0, -5083)), ((((0, "structure", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -5092), (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -5091), 0), 100000000, 0, -5090), 0), 100000000, 0, -5089), 0), 100000000, 0, -5088)), 0, 1), "structure_item", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -5097), (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -5096), 0), 100000000, 0, -5095), 0), 100000000, 0, -5094), 0), 100000000, 0, -5093)), (0, "structure_item_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -5102), (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -5101), 0), 100000000, 0, -5100), 0), 100000000, 0, -5099), 0), 100000000, 0, -5098)), ((0, "toplevel_directive", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -5107), (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -5106), 0), 100000000, 0, -5105), 0), 100000000, 0, -5104), 0), 100000000, 0, -5103)), 0, 1), "toplevel_phrase", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -5112), (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -5111), 0), 100000000, 0, -5110), 0), 100000000, 0, -5109), 0), 100000000, 0, -5108)), 0, 2), 3), 4), "type_declaration", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -5117), (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -5116), 0), 100000000, 0, -5115), 0), 100000000, 0, -5114), 0), 100000000, 0, -5113)), ((0, "type_exception", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -5122), (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -5121), 0), 100000000, 0, -5120), 0), 100000000, 0, -5119), 0), 100000000, 0, -5118)), 0, 1), "type_extension", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -5127), (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -5126), 0), 100000000, 0, -5125), 0), 100000000, 0, -5124), 0), 100000000, 0, -5123)), 0, 2), 5), "type_kind", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -5132), (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -5131), 0), 100000000, 0, -5130), 0), 100000000, 0, -5129), 0), 100000000, 0, -5128)), (((0, "value_binding", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -5137), (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -5136), 0), 100000000, 0, -5135), 0), 100000000, 0, -5134), 0), 100000000, 0, -5133)), 0, 1), "value_description", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -5142), (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -5141), 0), 100000000, 0, -5140), 0), 100000000, 0, -5139), 0), 100000000, 0, -5138)), 0, 2), "variance", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -5147), (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -5146), 0), 100000000, 0, -5145), 0), 100000000, 0, -5144), 0), 100000000, 0, -5143)), (0, "virtual_flag", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -5152), (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -5151), 0), 100000000, 0, -5150), 0), 100000000, 0, -5149), 0), 100000000, 0, -5148)), (0, "with_constraint", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -5157), (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -5156), 0), 100000000, 0, -5155), 0), 100000000, 0, -5154), 0), 100000000, 0, -5153)), 0, 1), 2), 3), 6), 7), 8), 9))), (("map_with_context", 7456)), 0, [63], (("ast/ast.ml", 5622, 213084, 213084), ("ast/ast.ml", 6918, 262757, 262762), 0), 0, Tag1 ("Ppxlib_ast__Ast", 5077)), 1, 0); Tag6 (("map_with_context", 7455), ([((("ctx")), 100000000, 0, -4073)], Tag1 (((Tag4 ((Tag5 ("bool", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4547), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4546), 0), 100000000, 0, -4545), 0), 100000000, 0, -4544), 0), 100000000, 0, -4543), (Tag5 ("char", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -4532), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -4531), 0), 100000000, 0, -4530), 0), 100000000, 0, -4529), 0), 100000000, 0, -4528), (Tag5 ("int", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -4349), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -4348), 0), 100000000, 0, -4347), 0), 100000000, 0, -4346), 0), 100000000, 0, -4345), (Tag5 ("list", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -4322), (Tag9 (("a")), 100000000, 0, -4322), 0), 100000000, 0, -4329), 0), 100000000, 0, -4328), (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -4322)], (0)), 100000000, 0, -4327), (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -4322)], (0)), 100000000, 0, -4326), 0), 100000000, 0, -4325), 0), 100000000, 0, -4324), 0), 100000000, 0, -4323), [(Tag9 (("a")), 100000000, 0, -4322)]), 100000000, 0, -4321), (Tag5 ("option", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -4210), (Tag9 (("a")), 100000000, 0, -4210), 0), 100000000, 0, -4217), 0), 100000000, 0, -4216), (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -4210)], (0)), 100000000, 0, -4215), (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -4210)], (0)), 100000000, 0, -4214), 0), 100000000, 0, -4213), 0), 100000000, 0, -4212), 0), 100000000, 0, -4211), [(Tag9 (("a")), 100000000, 0, -4210)]), 100000000, 0, -4209), (Tag5 ("string", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4143), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4142), 0), 100000000, 0, -4141), 0), 100000000, 0, -4140), 0), 100000000, 0, -4139), (Tag5 ("position", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -4183), (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -4182), 0), 100000000, 0, -4181), 0), 100000000, 0, -4180), 0), 100000000, 0, -4179), (Tag5 ("location", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -4311), (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -4310), 0), 100000000, 0, -4309), 0), 100000000, 0, -4308), 0), 100000000, 0, -4307), (Tag5 ("location_stack", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -4306), (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -4305), 0), 100000000, 0, -4304), 0), 100000000, 0, -4303), 0), 100000000, 0, -4302), (Tag5 ("loc", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -4313), (Tag9 (("a")), 100000000, 0, -4313), 0), 100000000, 0, -4320), 0), 100000000, 0, -4319), (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -4313)], (0)), 100000000, 0, -4318), (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -4313)], (0)), 100000000, 0, -4317), 0), 100000000, 0, -4316), 0), 100000000, 0, -4315), 0), 100000000, 0, -4314), [(Tag9 (("a")), 100000000, 0, -4313)]), 100000000, 0, -4312), (Tag5 ("longident", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -4301), (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -4300), 0), 100000000, 0, -4299), 0), 100000000, 0, -4298), 0), 100000000, 0, -4297), (Tag5 ("longident_loc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -4296), (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -4295), 0), 100000000, 0, -4294), 0), 100000000, 0, -4293), 0), 100000000, 0, -4292), (Tag5 ("rec_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -4173), (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -4172), 0), 100000000, 0, -4171), 0), 100000000, 0, -4170), 0), 100000000, 0, -4169), (Tag5 ("direction_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -4418), (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -4417), 0), 100000000, 0, -4416), 0), 100000000, 0, -4415), 0), 100000000, 0, -4414), (Tag5 ("private_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -4178), (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -4177), 0), 100000000, 0, -4176), 0), 100000000, 0, -4175), 0), 100000000, 0, -4174), (Tag5 ("mutable_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -4251), (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -4250), 0), 100000000, 0, -4249), 0), 100000000, 0, -4248), 0), 100000000, 0, -4247), (Tag5 ("virtual_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -4078), (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -4077), 0), 100000000, 0, -4076), 0), 100000000, 0, -4075), 0), 100000000, 0, -4074), (Tag5 ("override_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -4208), (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -4207), 0), 100000000, 0, -4206), 0), 100000000, 0, -4205), 0), 100000000, 0, -4204), (Tag5 ("closed_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -4448), (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -4447), 0), 100000000, 0, -4446), 0), 100000000, 0, -4445), 0), 100000000, 0, -4444), (Tag5 ("label", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -4344), (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -4343), 0), 100000000, 0, -4342), 0), 100000000, 0, -4341), 0), 100000000, 0, -4340), (Tag5 ("arg_label", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -4567), (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -4566), 0), 100000000, 0, -4565), 0), 100000000, 0, -4564), 0), 100000000, 0, -4563), (Tag5 ("variance", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -4083), (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -4082), 0), 100000000, 0, -4081), 0), 100000000, 0, -4080), 0), 100000000, 0, -4079), (Tag5 ("injectivity", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -4354), (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -4353), 0), 100000000, 0, -4352), 0), 100000000, 0, -4351), 0), 100000000, 0, -4350), (Tag5 ("constant", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -4443), (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -4442), 0), 100000000, 0, -4441), 0), 100000000, 0, -4440), 0), 100000000, 0, -4439), (Tag5 ("attribute", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -4562), (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -4561), 0), 100000000, 0, -4560), 0), 100000000, 0, -4559), 0), 100000000, 0, -4558), (Tag5 ("extension", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -4393), (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -4392), 0), 100000000, 0, -4391), 0), 100000000, 0, -4390), 0), 100000000, 0, -4389), (Tag5 ("attributes", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -4557), (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -4556), 0), 100000000, 0, -4555), 0), 100000000, 0, -4554), 0), 100000000, 0, -4553), (Tag5 ("payload", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -4188), (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -4187), 0), 100000000, 0, -4186), 0), 100000000, 0, -4185), 0), 100000000, 0, -4184), (Tag5 ("core_type", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -4428), (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -4427), 0), 100000000, 0, -4426), 0), 100000000, 0, -4425), 0), 100000000, 0, -4424), (Tag5 ("core_type_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -4423), (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -4422), 0), 100000000, 0, -4421), 0), 100000000, 0, -4420), 0), 100000000, 0, -4419), (Tag5 ("package_type", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -4203), (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -4202), 0), 100000000, 0, -4201), 0), 100000000, 0, -4200), 0), 100000000, 0, -4199), (Tag5 ("row_field", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -4168), (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -4167), 0), 100000000, 0, -4166), 0), 100000000, 0, -4165), 0), 100000000, 0, -4164), (Tag5 ("row_field_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -4163), (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -4162), 0), 100000000, 0, -4161), 0), 100000000, 0, -4160), 0), 100000000, 0, -4159), (Tag5 ("object_field", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -4246), (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -4245), 0), 100000000, 0, -4244), 0), 100000000, 0, -4243), 0), 100000000, 0, -4242), (Tag5 ("object_field_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -4241), (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -4240), 0), 100000000, 0, -4239), 0), 100000000, 0, -4238), 0), 100000000, 0, -4237), (Tag5 ("pattern", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -4198), (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -4197), 0), 100000000, 0, -4196), 0), 100000000, 0, -4195), 0), 100000000, 0, -4194), (Tag5 ("pattern_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -4193), (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -4192), 0), 100000000, 0, -4191), 0), 100000000, 0, -4190), 0), 100000000, 0, -4189), (Tag5 ("expression", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -4403), (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -4402), 0), 100000000, 0, -4401), 0), 100000000, 0, -4400), 0), 100000000, 0, -4399), (Tag5 ("expression_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -4398), (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -4397), 0), 100000000, 0, -4396), 0), 100000000, 0, -4395), 0), 100000000, 0, -4394), (Tag5 ("case", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -4542), (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -4541), 0), 100000000, 0, -4540), 0), 100000000, 0, -4539), 0), 100000000, 0, -4538), (Tag5 ("letop", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -4334), (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -4333), 0), 100000000, 0, -4332), 0), 100000000, 0, -4331), 0), 100000000, 0, -4330), (Tag5 ("binding_op", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -4552), (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -4551), 0), 100000000, 0, -4550), 0), 100000000, 0, -4549), 0), 100000000, 0, -4548), (Tag5 ("value_description", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -4088), (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -4087), 0), 100000000, 0, -4086), 0), 100000000, 0, -4085), 0), 100000000, 0, -4084), (Tag5 ("type_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -4113), (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -4112), 0), 100000000, 0, -4111), 0), 100000000, 0, -4110), 0), 100000000, 0, -4109), (Tag5 ("type_kind", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -4098), (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -4097), 0), 100000000, 0, -4096), 0), 100000000, 0, -4095), 0), 100000000, 0, -4094), (Tag5 ("label_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -4339), (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -4338), 0), 100000000, 0, -4337), 0), 100000000, 0, -4336), 0), 100000000, 0, -4335), (Tag5 ("constructor_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -4433), (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -4432), 0), 100000000, 0, -4431), 0), 100000000, 0, -4430), 0), 100000000, 0, -4429), (Tag5 ("constructor_arguments", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -4438), (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -4437), 0), 100000000, 0, -4436), 0), 100000000, 0, -4435), 0), 100000000, 0, -4434), (Tag5 ("type_extension", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -4103), (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -4102), 0), 100000000, 0, -4101), 0), 100000000, 0, -4100), 0), 100000000, 0, -4099), (Tag5 ("extension_constructor", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -4388), (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -4387), 0), 100000000, 0, -4386), 0), 100000000, 0, -4385), 0), 100000000, 0, -4384), (Tag5 ("type_exception", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -4108), (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -4107), 0), 100000000, 0, -4106), 0), 100000000, 0, -4105), 0), 100000000, 0, -4104), (Tag5 ("extension_constructor_kind", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -4383), (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -4382), 0), 100000000, 0, -4381), 0), 100000000, 0, -4380), 0), 100000000, 0, -4379), (Tag5 ("class_type", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -4473), (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -4472), 0), 100000000, 0, -4471), 0), 100000000, 0, -4470), 0), 100000000, 0, -4469), (Tag5 ("class_type_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -4463), (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -4462), 0), 100000000, 0, -4461), 0), 100000000, 0, -4460), 0), 100000000, 0, -4459), (Tag5 ("class_signature", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -4483), (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -4482), 0), 100000000, 0, -4481), 0), 100000000, 0, -4480), 0), 100000000, 0, -4479), (Tag5 ("class_type_field", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -4458), (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -4457), 0), 100000000, 0, -4456), 0), 100000000, 0, -4455), 0), 100000000, 0, -4454), (Tag5 ("class_type_field_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -4453), (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -4452), 0), 100000000, 0, -4451), 0), 100000000, 0, -4450), 0), 100000000, 0, -4449), (Tag5 ("class_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -4485), (Tag9 (("a")), 100000000, 0, -4485), 0), 100000000, 0, -4492), 0), 100000000, 0, -4491), (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -4485)], (0)), 100000000, 0, -4490), (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -4485)], (0)), 100000000, 0, -4489), 0), 100000000, 0, -4488), 0), 100000000, 0, -4487), 0), 100000000, 0, -4486), [(Tag9 (("a")), 100000000, 0, -4485)]), 100000000, 0, -4484), (Tag5 ("class_description", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -4522), (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -4521), 0), 100000000, 0, -4520), 0), 100000000, 0, -4519), 0), 100000000, 0, -4518), (Tag5 ("class_type_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -4468), (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -4467), 0), 100000000, 0, -4466), 0), 100000000, 0, -4465), 0), 100000000, 0, -4464), (Tag5 ("class_expr", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -4517), (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -4516), 0), 100000000, 0, -4515), 0), 100000000, 0, -4514), 0), 100000000, 0, -4513), (Tag5 ("class_expr_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -4512), (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -4511), 0), 100000000, 0, -4510), 0), 100000000, 0, -4509), 0), 100000000, 0, -4508), (Tag5 ("class_structure", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -4478), (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -4477), 0), 100000000, 0, -4476), 0), 100000000, 0, -4475), 0), 100000000, 0, -4474), (Tag5 ("class_field", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -4507), (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -4506), 0), 100000000, 0, -4505), 0), 100000000, 0, -4504), 0), 100000000, 0, -4503), (Tag5 ("class_field_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -4502), (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -4501), 0), 100000000, 0, -4500), 0), 100000000, 0, -4499), 0), 100000000, 0, -4498), (Tag5 ("class_field_kind", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -4497), (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -4496), 0), 100000000, 0, -4495), 0), 100000000, 0, -4494), 0), 100000000, 0, -4493), (Tag5 ("class_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -4527), (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -4526), 0), 100000000, 0, -4525), 0), 100000000, 0, -4524), 0), 100000000, 0, -4523), (Tag5 ("module_type", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -4266), (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -4265), 0), 100000000, 0, -4264), 0), 100000000, 0, -4263), 0), 100000000, 0, -4262), (Tag5 ("module_type_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -4256), (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -4255), 0), 100000000, 0, -4254), 0), 100000000, 0, -4253), 0), 100000000, 0, -4252), (Tag5 ("functor_parameter", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -4378), (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -4377), 0), 100000000, 0, -4376), 0), 100000000, 0, -4375), 0), 100000000, 0, -4374), (Tag5 ("signature", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -4158), (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -4157), 0), 100000000, 0, -4156), 0), 100000000, 0, -4155), 0), 100000000, 0, -4154), (Tag5 ("signature_item", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -4153), (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -4152), 0), 100000000, 0, -4151), 0), 100000000, 0, -4150), 0), 100000000, 0, -4149), (Tag5 ("signature_item_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -4148), (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -4147), 0), 100000000, 0, -4146), 0), 100000000, 0, -4145), 0), 100000000, 0, -4144), (Tag5 ("module_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -4286), (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -4285), 0), 100000000, 0, -4284), 0), 100000000, 0, -4283), 0), 100000000, 0, -4282), (Tag5 ("module_substitution", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -4271), (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -4270), 0), 100000000, 0, -4269), 0), 100000000, 0, -4268), 0), 100000000, 0, -4267), (Tag5 ("module_type_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -4261), (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -4260), 0), 100000000, 0, -4259), 0), 100000000, 0, -4258), 0), 100000000, 0, -4257), (Tag5 ("open_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -4219), (Tag9 (("a")), 100000000, 0, -4219), 0), 100000000, 0, -4226), 0), 100000000, 0, -4225), (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -4219)], (0)), 100000000, 0, -4224), (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -4219)], (0)), 100000000, 0, -4223), 0), 100000000, 0, -4222), 0), 100000000, 0, -4221), 0), 100000000, 0, -4220), [(Tag9 (("a")), 100000000, 0, -4219)]), 100000000, 0, -4218), (Tag5 ("open_description", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -4231), (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -4230), 0), 100000000, 0, -4229), 0), 100000000, 0, -4228), 0), 100000000, 0, -4227), (Tag5 ("open_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -4236), (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -4235), 0), 100000000, 0, -4234), 0), 100000000, 0, -4233), 0), 100000000, 0, -4232), (Tag5 ("include_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -4356), (Tag9 (("a")), 100000000, 0, -4356), 0), 100000000, 0, -4363), 0), 100000000, 0, -4362), (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -4356)], (0)), 100000000, 0, -4361), (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -4356)], (0)), 100000000, 0, -4360), 0), 100000000, 0, -4359), 0), 100000000, 0, -4358), 0), 100000000, 0, -4357), [(Tag9 (("a")), 100000000, 0, -4356)]), 100000000, 0, -4355), (Tag5 ("include_description", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -4368), (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -4367), 0), 100000000, 0, -4366), 0), 100000000, 0, -4365), 0), 100000000, 0, -4364), (Tag5 ("include_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -4373), (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -4372), 0), 100000000, 0, -4371), 0), 100000000, 0, -4370), 0), 100000000, 0, -4369), (Tag5 ("with_constraint", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -4072), (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -4071), 0), 100000000, 0, -4070), 0), 100000000, 0, -4069), 0), 100000000, 0, -4068), (Tag5 ("module_expr", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -4281), (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -4280), 0), 100000000, 0, -4279), 0), 100000000, 0, -4278), 0), 100000000, 0, -4277), (Tag5 ("module_expr_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -4276), (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -4275), 0), 100000000, 0, -4274), 0), 100000000, 0, -4273), 0), 100000000, 0, -4272), (Tag5 ("structure", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -4138), (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -4137), 0), 100000000, 0, -4136), 0), 100000000, 0, -4135), 0), 100000000, 0, -4134), (Tag5 ("structure_item", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -4133), (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -4132), 0), 100000000, 0, -4131), 0), 100000000, 0, -4130), 0), 100000000, 0, -4129), (Tag5 ("structure_item_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -4128), (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -4127), 0), 100000000, 0, -4126), 0), 100000000, 0, -4125), 0), 100000000, 0, -4124), (Tag5 ("value_binding", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -4093), (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -4092), 0), 100000000, 0, -4091), 0), 100000000, 0, -4090), 0), 100000000, 0, -4089), (Tag5 ("module_binding", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -4291), (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -4290), 0), 100000000, 0, -4289), 0), 100000000, 0, -4288), 0), 100000000, 0, -4287), (Tag5 ("toplevel_phrase", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -4118), (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -4117), 0), 100000000, 0, -4116), 0), 100000000, 0, -4115), 0), 100000000, 0, -4114), (Tag5 ("toplevel_directive", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -4123), (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -4122), 0), 100000000, 0, -4121), 0), 100000000, 0, -4120), 0), 100000000, 0, -4119), (Tag5 ("directive_argument", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -4413), (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -4412), 0), 100000000, 0, -4411), 0), 100000000, 0, -4410), 0), 100000000, 0, -4409), (Tag5 ("directive_argument_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -4408), (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -4407), 0), 100000000, 0, -4406), 0), 100000000, 0, -4405), 0), 100000000, 0, -4404), (Tag5 ("cases", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -4537), (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -4536), 0), 100000000, 0, -4535), 0), 100000000, 0, -4534), 0), 100000000, 0, -4533), ((0), 100000000, 0, -5158)), 100000000, 0, -5254)), 100000000, 0, -5253)), 100000000, 0, -5252)), 100000000, 0, -5251)), 100000000, 0, -5250)), 100000000, 0, -5249)), 100000000, 0, -5248)), 100000000, 0, -5247)), 100000000, 0, -5246)), 100000000, 0, -5245)), 100000000, 0, -5244)), 100000000, 0, -5243)), 100000000, 0, -5242)), 100000000, 0, -5241)), 100000000, 0, -5240)), 100000000, 0, -5239)), 100000000, 0, -5238)), 100000000, 0, -5237)), 100000000, 0, -5236)), 100000000, 0, -5235)), 100000000, 0, -5234)), 100000000, 0, -5233)), 100000000, 0, -5232)), 100000000, 0, -5231)), 100000000, 0, -5230)), 100000000, 0, -5229)), 100000000, 0, -5228)), 100000000, 0, -5227)), 100000000, 0, -5226)), 100000000, 0, -5225)), 100000000, 0, -5224)), 100000000, 0, -5223)), 100000000, 0, -5222)), 100000000, 0, -5221)), 100000000, 0, -5220)), 100000000, 0, -5219)), 100000000, 0, -5218)), 100000000, 0, -5217)), 100000000, 0, -5216)), 100000000, 0, -5215)), 100000000, 0, -5214)), 100000000, 0, -5213)), 100000000, 0, -5212)), 100000000, 0, -5211)), 100000000, 0, -5210)), 100000000, 0, -5209)), 100000000, 0, -5208)), 100000000, 0, -5207)), 100000000, 0, -5206)), 100000000, 0, -5205)), 100000000, 0, -5204)), 100000000, 0, -5203)), 100000000, 0, -5202)), 100000000, 0, -5201)), 100000000, 0, -5200)), 100000000, 0, -5199)), 100000000, 0, -5198)), 100000000, 0, -5197)), 100000000, 0, -5196)), 100000000, 0, -5195)), 100000000, 0, -5194)), 100000000, 0, -5193)), 100000000, 0, -5192)), 100000000, 0, -5191)), 100000000, 0, -5190)), 100000000, 0, -5189)), 100000000, 0, -5188)), 100000000, 0, -5187)), 100000000, 0, -5186)), 100000000, 0, -5185)), 100000000, 0, -5184)), 100000000, 0, -5183)), 100000000, 0, -5182)), 100000000, 0, -5181)), 100000000, 0, -5180)), 100000000, 0, -5179)), 100000000, 0, -5178)), 100000000, 0, -5177)), 100000000, 0, -5176)), 100000000, 0, -5175)), 100000000, 0, -5174)), 100000000, 0, -5173)), 100000000, 0, -5172)), 100000000, 0, -5171)), 100000000, 0, -5170)), 100000000, 0, -5169)), 100000000, 0, -5168)), 100000000, 0, -5167)), 100000000, 0, -5166)), 100000000, 0, -5165)), 100000000, 0, -5164)), 100000000, 0, -5163)), 100000000, 0, -5162)), 100000000, 0, -5161)), 100000000, 0, -5160), (([(("map_with_context", 7456)); ((0), 100000000, 0, -5158); ((("ctx")), 100000000, 0, -4073)]))), 100000000, 0, -5159), ((0), 100000000, 0, -5158), 0, (((((0, "arg_label", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -4669), (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -4668), 0), 100000000, 0, -4667), 0), 100000000, 0, -4666), 0), 100000000, 0, -4665)), 0, 1), "attribute", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -4674), (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -4673), 0), 100000000, 0, -4672), 0), 100000000, 0, -4671), 0), 100000000, 0, -4670)), ((0, "attributes", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -4679), (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -4678), 0), 100000000, 0, -4677), 0), 100000000, 0, -4676), 0), 100000000, 0, -4675)), (0, "binding_op", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -4684), (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -4683), 0), 100000000, 0, -4682), 0), 100000000, 0, -4681), 0), 100000000, 0, -4680)), 0, 1), 2), "bool", (0, 0, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4689), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4688), 0), 100000000, 0, -4687), 0), 100000000, 0, -4686), 0), 100000000, 0, -4685)), (0, "case", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -4694), (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -4693), 0), 100000000, 0, -4692), 0), 100000000, 0, -4691), 0), 100000000, 0, -4690)), (0, "cases", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -4699), (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -4698), 0), 100000000, 0, -4697), 0), 100000000, 0, -4696), 0), 100000000, 0, -4695)), 0, 1), 2), 3), 4), "char", (0, 0, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -4704), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -4703), 0), 100000000, 0, -4702), 0), 100000000, 0, -4701), 0), 100000000, 0, -4700)), ((((((0, "class_declaration", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -4709), (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -4708), 0), 100000000, 0, -4707), 0), 100000000, 0, -4706), 0), 100000000, 0, -4705)), 0, 1), "class_description", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -4714), (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -4713), 0), 100000000, 0, -4712), 0), 100000000, 0, -4711), 0), 100000000, 0, -4710)), 0, 2), "class_expr", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -4719), (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -4718), 0), 100000000, 0, -4717), 0), 100000000, 0, -4716), 0), 100000000, 0, -4715)), (0, "class_expr_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -4724), (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -4723), 0), 100000000, 0, -4722), 0), 100000000, 0, -4721), 0), 100000000, 0, -4720)), 0, 1), 3), "class_field", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -4729), (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -4728), 0), 100000000, 0, -4727), 0), 100000000, 0, -4726), 0), 100000000, 0, -4725)), ((0, "class_field_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -4734), (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -4733), 0), 100000000, 0, -4732), 0), 100000000, 0, -4731), 0), 100000000, 0, -4730)), (0, "class_field_kind", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -4739), (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -4738), 0), 100000000, 0, -4737), 0), 100000000, 0, -4736), 0), 100000000, 0, -4735)), 0, 1), 2), "class_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -4485), (Tag9 (("a")), 100000000, 0, -4485), 0), 100000000, 0, -4747), 0), 100000000, 0, -4746), (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -4485)], (0)), 100000000, 0, -4745), (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -4485)], (0)), 100000000, 0, -4744), 0), 100000000, 0, -4743), 0), 100000000, 0, -4742), 0), 100000000, 0, -4741), [(Tag9 (("a")), 100000000, 0, -4485)]), 100000000, 0, -4740)), 0, 3), 4), "class_signature", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -4752), (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -4751), 0), 100000000, 0, -4750), 0), 100000000, 0, -4749), 0), 100000000, 0, -4748)), ((0, "class_structure", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -4757), (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -4756), 0), 100000000, 0, -4755), 0), 100000000, 0, -4754), 0), 100000000, 0, -4753)), 0, 1), "class_type", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -4762), (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -4761), 0), 100000000, 0, -4760), 0), 100000000, 0, -4759), 0), 100000000, 0, -4758)), (0, "class_type_declaration", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -4767), (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -4766), 0), 100000000, 0, -4765), 0), 100000000, 0, -4764), 0), 100000000, 0, -4763)), 0, 1), 2), 5), "class_type_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -4772), (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -4771), 0), 100000000, 0, -4770), 0), 100000000, 0, -4769), 0), 100000000, 0, -4768)), (((0, "class_type_field", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -4777), (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -4776), 0), 100000000, 0, -4775), 0), 100000000, 0, -4774), 0), 100000000, 0, -4773)), (0, "class_type_field_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -4782), (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -4781), 0), 100000000, 0, -4780), 0), 100000000, 0, -4779), 0), 100000000, 0, -4778)), 0, 1), 2), "closed_flag", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -4787), (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -4786), 0), 100000000, 0, -4785), 0), 100000000, 0, -4784), 0), 100000000, 0, -4783)), 0, 3), "constant", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -4792), (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -4791), 0), 100000000, 0, -4790), 0), 100000000, 0, -4789), 0), 100000000, 0, -4788)), (((0, "constructor_arguments", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -4797), (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -4796), 0), 100000000, 0, -4795), 0), 100000000, 0, -4794), 0), 100000000, 0, -4793)), 0, 1), "constructor_declaration", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -4802), (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -4801), 0), 100000000, 0, -4800), 0), 100000000, 0, -4799), 0), 100000000, 0, -4798)), 0, 2), "core_type", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -4807), (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -4806), 0), 100000000, 0, -4805), 0), 100000000, 0, -4804), 0), 100000000, 0, -4803)), (0, "core_type_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -4812), (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -4811), 0), 100000000, 0, -4810), 0), 100000000, 0, -4809), 0), 100000000, 0, -4808)), 0, 1), 3), 4), 6), 7), "direction_flag", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -4817), (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -4816), 0), 100000000, 0, -4815), 0), 100000000, 0, -4814), 0), 100000000, 0, -4813)), ((((0, "directive_argument", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -4822), (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -4821), 0), 100000000, 0, -4820), 0), 100000000, 0, -4819), 0), 100000000, 0, -4818)), (0, "directive_argument_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -4827), (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -4826), 0), 100000000, 0, -4825), 0), 100000000, 0, -4824), 0), 100000000, 0, -4823)), 0, 1), 2), "expression", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -4832), (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -4831), 0), 100000000, 0, -4830), 0), 100000000, 0, -4829), 0), 100000000, 0, -4828)), (0, "expression_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -4837), (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -4836), 0), 100000000, 0, -4835), 0), 100000000, 0, -4834), 0), 100000000, 0, -4833)), 0, 1), 3), "extension", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -4842), (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -4841), 0), 100000000, 0, -4840), 0), 100000000, 0, -4839), 0), 100000000, 0, -4838)), (((0, "extension_constructor", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -4847), (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -4846), 0), 100000000, 0, -4845), 0), 100000000, 0, -4844), 0), 100000000, 0, -4843)), 0, 1), "extension_constructor_kind", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -4852), (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -4851), 0), 100000000, 0, -4850), 0), 100000000, 0, -4849), 0), 100000000, 0, -4848)), 0, 2), "functor_parameter", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -4857), (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -4856), 0), 100000000, 0, -4855), 0), 100000000, 0, -4854), 0), 100000000, 0, -4853)), (((0, "include_declaration", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -4862), (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -4861), 0), 100000000, 0, -4860), 0), 100000000, 0, -4859), 0), 100000000, 0, -4858)), 0, 1), "include_description", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -4867), (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -4866), 0), 100000000, 0, -4865), 0), 100000000, 0, -4864), 0), 100000000, 0, -4863)), 0, 2), "include_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -4356), (Tag9 (("a")), 100000000, 0, -4356), 0), 100000000, 0, -4875), 0), 100000000, 0, -4874), (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -4356)], (0)), 100000000, 0, -4873), (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -4356)], (0)), 100000000, 0, -4872), 0), 100000000, 0, -4871), 0), 100000000, 0, -4870), 0), 100000000, 0, -4869), [(Tag9 (("a")), 100000000, 0, -4356)]), 100000000, 0, -4868)), (0, "injectivity", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -4880), (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -4879), 0), 100000000, 0, -4878), 0), 100000000, 0, -4877), 0), 100000000, 0, -4876)), 0, 1), 3), 4), 5), "int", (0, 0, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -4885), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -4884), 0), 100000000, 0, -4883), 0), 100000000, 0, -4882), 0), 100000000, 0, -4881)), ((0, "label", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -4890), (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -4889), 0), 100000000, 0, -4888), 0), 100000000, 0, -4887), 0), 100000000, 0, -4886)), ((0, "label_declaration", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -4895), (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -4894), 0), 100000000, 0, -4893), 0), 100000000, 0, -4892), 0), 100000000, 0, -4891)), 0, 1), "letop", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -4900), (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -4899), 0), 100000000, 0, -4898), 0), 100000000, 0, -4897), 0), 100000000, 0, -4896)), 0, 2), 3), "list", (0, 0, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -4322), (Tag9 (("a")), 100000000, 0, -4322), 0), 100000000, 0, -4908), 0), 100000000, 0, -4907), (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -4322)], (0)), 100000000, 0, -4906), (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -4322)], (0)), 100000000, 0, -4905), 0), 100000000, 0, -4904), 0), 100000000, 0, -4903), 0), 100000000, 0, -4902), [(Tag9 (("a")), 100000000, 0, -4322)]), 100000000, 0, -4901)), (0, "loc", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -4313), (Tag9 (("a")), 100000000, 0, -4313), 0), 100000000, 0, -4916), 0), 100000000, 0, -4915), (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -4313)], (0)), 100000000, 0, -4914), (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -4313)], (0)), 100000000, 0, -4913), 0), 100000000, 0, -4912), 0), 100000000, 0, -4911), 0), 100000000, 0, -4910), [(Tag9 (("a")), 100000000, 0, -4313)]), 100000000, 0, -4909)), 0, 1), 4), 6), 8), "location", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -4921), (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -4920), 0), 100000000, 0, -4919), 0), 100000000, 0, -4918), 0), 100000000, 0, -4917)), (((((0, "location_stack", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -4926), (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -4925), 0), 100000000, 0, -4924), 0), 100000000, 0, -4923), 0), 100000000, 0, -4922)), 0, 1), "longident", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -4931), (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -4930), 0), 100000000, 0, -4929), 0), 100000000, 0, -4928), 0), 100000000, 0, -4927)), 0, 2), "longident_loc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -4936), (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -4935), 0), 100000000, 0, -4934), 0), 100000000, 0, -4933), 0), 100000000, 0, -4932)), ((((0, "module_binding", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -4941), (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -4940), 0), 100000000, 0, -4939), 0), 100000000, 0, -4938), 0), 100000000, 0, -4937)), 0, 1), "module_declaration", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -4946), (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -4945), 0), 100000000, 0, -4944), 0), 100000000, 0, -4943), 0), 100000000, 0, -4942)), 0, 2), "module_expr", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -4951), (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -4950), 0), 100000000, 0, -4949), 0), 100000000, 0, -4948), 0), 100000000, 0, -4947)), ((0, "module_expr_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -4956), (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -4955), 0), 100000000, 0, -4954), 0), 100000000, 0, -4953), 0), 100000000, 0, -4952)), 0, 1), "module_substitution", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -4961), (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -4960), 0), 100000000, 0, -4959), 0), 100000000, 0, -4958), 0), 100000000, 0, -4957)), 0, 2), 3), "module_type", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -4966), (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -4965), 0), 100000000, 0, -4964), 0), 100000000, 0, -4963), 0), 100000000, 0, -4962)), ((0, "module_type_declaration", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -4971), (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -4970), 0), 100000000, 0, -4969), 0), 100000000, 0, -4968), 0), 100000000, 0, -4967)), 0, 1), "module_type_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -4976), (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -4975), 0), 100000000, 0, -4974), 0), 100000000, 0, -4973), 0), 100000000, 0, -4972)), 0, 2), 4), 5), "mutable_flag", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -4981), (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -4980), 0), 100000000, 0, -4979), 0), 100000000, 0, -4978), 0), 100000000, 0, -4977)), ((0, "object_field", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -4986), (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -4985), 0), 100000000, 0, -4984), 0), 100000000, 0, -4983), 0), 100000000, 0, -4982)), 0, 1), "object_field_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -4991), (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -4990), 0), 100000000, 0, -4989), 0), 100000000, 0, -4988), 0), 100000000, 0, -4987)), (((0, "open_declaration", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -4996), (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -4995), 0), 100000000, 0, -4994), 0), 100000000, 0, -4993), 0), 100000000, 0, -4992)), 0, 1), "open_description", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -5001), (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -5000), 0), 100000000, 0, -4999), 0), 100000000, 0, -4998), 0), 100000000, 0, -4997)), 0, 2), "open_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -4219), (Tag9 (("a")), 100000000, 0, -4219), 0), 100000000, 0, -5009), 0), 100000000, 0, -5008), (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -4219)], (0)), 100000000, 0, -5007), (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -4219)], (0)), 100000000, 0, -5006), 0), 100000000, 0, -5005), 0), 100000000, 0, -5004), 0), 100000000, 0, -5003), [(Tag9 (("a")), 100000000, 0, -4219)]), 100000000, 0, -5002)), 0, 3), 4), 6), "option", (0, 0, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -4210), (Tag9 (("a")), 100000000, 0, -4210), 0), 100000000, 0, -5017), 0), 100000000, 0, -5016), (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -4210)], (0)), 100000000, 0, -5015), (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -4210)], (0)), 100000000, 0, -5014), 0), 100000000, 0, -5013), 0), 100000000, 0, -5012), 0), 100000000, 0, -5011), [(Tag9 (("a")), 100000000, 0, -4210)]), 100000000, 0, -5010)), (((((0, "override_flag", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -5022), (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -5021), 0), 100000000, 0, -5020), 0), 100000000, 0, -5019), 0), 100000000, 0, -5018)), 0, 1), "package_type", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -5027), (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -5026), 0), 100000000, 0, -5025), 0), 100000000, 0, -5024), 0), 100000000, 0, -5023)), (0, "pattern", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -5032), (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -5031), 0), 100000000, 0, -5030), 0), 100000000, 0, -5029), 0), 100000000, 0, -5028)), (0, "pattern_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -5037), (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -5036), 0), 100000000, 0, -5035), 0), 100000000, 0, -5034), 0), 100000000, 0, -5033)), 0, 1), 2), 3), "payload", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -5042), (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -5041), 0), 100000000, 0, -5040), 0), 100000000, 0, -5039), 0), 100000000, 0, -5038)), (0, "position", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -5047), (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -5046), 0), 100000000, 0, -5045), 0), 100000000, 0, -5044), 0), 100000000, 0, -5043)), (0, "private_flag", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -5052), (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -5051), 0), 100000000, 0, -5050), 0), 100000000, 0, -5049), 0), 100000000, 0, -5048)), 0, 1), 2), 4), "rec_flag", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -5057), (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -5056), 0), 100000000, 0, -5055), 0), 100000000, 0, -5054), 0), 100000000, 0, -5053)), ((0, "row_field", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -5062), (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -5061), 0), 100000000, 0, -5060), 0), 100000000, 0, -5059), 0), 100000000, 0, -5058)), 0, 1), "row_field_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -5067), (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -5066), 0), 100000000, 0, -5065), 0), 100000000, 0, -5064), 0), 100000000, 0, -5063)), (0, "signature", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -5072), (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -5071), 0), 100000000, 0, -5070), 0), 100000000, 0, -5069), 0), 100000000, 0, -5068)), (0, "signature_item", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -5077), (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -5076), 0), 100000000, 0, -5075), 0), 100000000, 0, -5074), 0), 100000000, 0, -5073)), (0, "signature_item_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -5082), (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -5081), 0), 100000000, 0, -5080), 0), 100000000, 0, -5079), 0), 100000000, 0, -5078)), 0, 1), 2), 3), 4), 5), "string", (0, 0, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5087), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5086), 0), 100000000, 0, -5085), 0), 100000000, 0, -5084), 0), 100000000, 0, -5083)), ((((0, "structure", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -5092), (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -5091), 0), 100000000, 0, -5090), 0), 100000000, 0, -5089), 0), 100000000, 0, -5088)), 0, 1), "structure_item", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -5097), (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -5096), 0), 100000000, 0, -5095), 0), 100000000, 0, -5094), 0), 100000000, 0, -5093)), (0, "structure_item_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -5102), (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -5101), 0), 100000000, 0, -5100), 0), 100000000, 0, -5099), 0), 100000000, 0, -5098)), ((0, "toplevel_directive", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -5107), (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -5106), 0), 100000000, 0, -5105), 0), 100000000, 0, -5104), 0), 100000000, 0, -5103)), 0, 1), "toplevel_phrase", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -5112), (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -5111), 0), 100000000, 0, -5110), 0), 100000000, 0, -5109), 0), 100000000, 0, -5108)), 0, 2), 3), 4), "type_declaration", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -5117), (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -5116), 0), 100000000, 0, -5115), 0), 100000000, 0, -5114), 0), 100000000, 0, -5113)), ((0, "type_exception", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -5122), (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -5121), 0), 100000000, 0, -5120), 0), 100000000, 0, -5119), 0), 100000000, 0, -5118)), 0, 1), "type_extension", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -5127), (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -5126), 0), 100000000, 0, -5125), 0), 100000000, 0, -5124), 0), 100000000, 0, -5123)), 0, 2), 5), "type_kind", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -5132), (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -5131), 0), 100000000, 0, -5130), 0), 100000000, 0, -5129), 0), 100000000, 0, -5128)), (((0, "value_binding", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -5137), (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -5136), 0), 100000000, 0, -5135), 0), 100000000, 0, -5134), 0), 100000000, 0, -5133)), 0, 1), "value_description", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -5142), (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -5141), 0), 100000000, 0, -5140), 0), 100000000, 0, -5139), 0), 100000000, 0, -5138)), 0, 2), "variance", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -5147), (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -5146), 0), 100000000, 0, -5145), 0), 100000000, 0, -5144), 0), 100000000, 0, -5143)), (0, "virtual_flag", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -5152), (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -5151), 0), 100000000, 0, -5150), 0), 100000000, 0, -5149), 0), 100000000, 0, -5148)), (0, "with_constraint", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -5157), (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -5156), 0), 100000000, 0, -5155), 0), 100000000, 0, -5154), 0), 100000000, 0, -5153)), 0, 1), 2), 3), 6), 7), 8), 9))), (("map_with_context", 7456)), ([((("ctx")), 100000000, 0, -4073)], 1, 0, 1, ((Tag4 ((Tag5 ("bool", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4547), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4546), 0), 100000000, 0, -4545), 0), 100000000, 0, -4544), 0), 100000000, 0, -4543), (Tag5 ("char", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -4532), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -4531), 0), 100000000, 0, -4530), 0), 100000000, 0, -4529), 0), 100000000, 0, -4528), (Tag5 ("int", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -4349), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -4348), 0), 100000000, 0, -4347), 0), 100000000, 0, -4346), 0), 100000000, 0, -4345), (Tag5 ("list", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -4322), (Tag9 (("a")), 100000000, 0, -4322), 0), 100000000, 0, -4329), 0), 100000000, 0, -4328), (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -4322)], (0)), 100000000, 0, -4327), (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -4322)], (0)), 100000000, 0, -4326), 0), 100000000, 0, -4325), 0), 100000000, 0, -4324), 0), 100000000, 0, -4323), [(Tag9 (("a")), 100000000, 0, -4322)]), 100000000, 0, -4321), (Tag5 ("option", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -4210), (Tag9 (("a")), 100000000, 0, -4210), 0), 100000000, 0, -4217), 0), 100000000, 0, -4216), (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -4210)], (0)), 100000000, 0, -4215), (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -4210)], (0)), 100000000, 0, -4214), 0), 100000000, 0, -4213), 0), 100000000, 0, -4212), 0), 100000000, 0, -4211), [(Tag9 (("a")), 100000000, 0, -4210)]), 100000000, 0, -4209), (Tag5 ("string", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4143), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4142), 0), 100000000, 0, -4141), 0), 100000000, 0, -4140), 0), 100000000, 0, -4139), (Tag5 ("position", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -4183), (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -4182), 0), 100000000, 0, -4181), 0), 100000000, 0, -4180), 0), 100000000, 0, -4179), (Tag5 ("location", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -4311), (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -4310), 0), 100000000, 0, -4309), 0), 100000000, 0, -4308), 0), 100000000, 0, -4307), (Tag5 ("location_stack", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -4306), (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -4305), 0), 100000000, 0, -4304), 0), 100000000, 0, -4303), 0), 100000000, 0, -4302), (Tag5 ("loc", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -4313), (Tag9 (("a")), 100000000, 0, -4313), 0), 100000000, 0, -4320), 0), 100000000, 0, -4319), (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -4313)], (0)), 100000000, 0, -4318), (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -4313)], (0)), 100000000, 0, -4317), 0), 100000000, 0, -4316), 0), 100000000, 0, -4315), 0), 100000000, 0, -4314), [(Tag9 (("a")), 100000000, 0, -4313)]), 100000000, 0, -4312), (Tag5 ("longident", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -4301), (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -4300), 0), 100000000, 0, -4299), 0), 100000000, 0, -4298), 0), 100000000, 0, -4297), (Tag5 ("longident_loc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -4296), (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -4295), 0), 100000000, 0, -4294), 0), 100000000, 0, -4293), 0), 100000000, 0, -4292), (Tag5 ("rec_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -4173), (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -4172), 0), 100000000, 0, -4171), 0), 100000000, 0, -4170), 0), 100000000, 0, -4169), (Tag5 ("direction_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -4418), (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -4417), 0), 100000000, 0, -4416), 0), 100000000, 0, -4415), 0), 100000000, 0, -4414), (Tag5 ("private_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -4178), (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -4177), 0), 100000000, 0, -4176), 0), 100000000, 0, -4175), 0), 100000000, 0, -4174), (Tag5 ("mutable_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -4251), (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -4250), 0), 100000000, 0, -4249), 0), 100000000, 0, -4248), 0), 100000000, 0, -4247), (Tag5 ("virtual_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -4078), (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -4077), 0), 100000000, 0, -4076), 0), 100000000, 0, -4075), 0), 100000000, 0, -4074), (Tag5 ("override_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -4208), (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -4207), 0), 100000000, 0, -4206), 0), 100000000, 0, -4205), 0), 100000000, 0, -4204), (Tag5 ("closed_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -4448), (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -4447), 0), 100000000, 0, -4446), 0), 100000000, 0, -4445), 0), 100000000, 0, -4444), (Tag5 ("label", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -4344), (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -4343), 0), 100000000, 0, -4342), 0), 100000000, 0, -4341), 0), 100000000, 0, -4340), (Tag5 ("arg_label", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -4567), (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -4566), 0), 100000000, 0, -4565), 0), 100000000, 0, -4564), 0), 100000000, 0, -4563), (Tag5 ("variance", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -4083), (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -4082), 0), 100000000, 0, -4081), 0), 100000000, 0, -4080), 0), 100000000, 0, -4079), (Tag5 ("injectivity", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -4354), (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -4353), 0), 100000000, 0, -4352), 0), 100000000, 0, -4351), 0), 100000000, 0, -4350), (Tag5 ("constant", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -4443), (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -4442), 0), 100000000, 0, -4441), 0), 100000000, 0, -4440), 0), 100000000, 0, -4439), (Tag5 ("attribute", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -4562), (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -4561), 0), 100000000, 0, -4560), 0), 100000000, 0, -4559), 0), 100000000, 0, -4558), (Tag5 ("extension", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -4393), (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -4392), 0), 100000000, 0, -4391), 0), 100000000, 0, -4390), 0), 100000000, 0, -4389), (Tag5 ("attributes", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -4557), (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -4556), 0), 100000000, 0, -4555), 0), 100000000, 0, -4554), 0), 100000000, 0, -4553), (Tag5 ("payload", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -4188), (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -4187), 0), 100000000, 0, -4186), 0), 100000000, 0, -4185), 0), 100000000, 0, -4184), (Tag5 ("core_type", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -4428), (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -4427), 0), 100000000, 0, -4426), 0), 100000000, 0, -4425), 0), 100000000, 0, -4424), (Tag5 ("core_type_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -4423), (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -4422), 0), 100000000, 0, -4421), 0), 100000000, 0, -4420), 0), 100000000, 0, -4419), (Tag5 ("package_type", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -4203), (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -4202), 0), 100000000, 0, -4201), 0), 100000000, 0, -4200), 0), 100000000, 0, -4199), (Tag5 ("row_field", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -4168), (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -4167), 0), 100000000, 0, -4166), 0), 100000000, 0, -4165), 0), 100000000, 0, -4164), (Tag5 ("row_field_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -4163), (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -4162), 0), 100000000, 0, -4161), 0), 100000000, 0, -4160), 0), 100000000, 0, -4159), (Tag5 ("object_field", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -4246), (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -4245), 0), 100000000, 0, -4244), 0), 100000000, 0, -4243), 0), 100000000, 0, -4242), (Tag5 ("object_field_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -4241), (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -4240), 0), 100000000, 0, -4239), 0), 100000000, 0, -4238), 0), 100000000, 0, -4237), (Tag5 ("pattern", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -4198), (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -4197), 0), 100000000, 0, -4196), 0), 100000000, 0, -4195), 0), 100000000, 0, -4194), (Tag5 ("pattern_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -4193), (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -4192), 0), 100000000, 0, -4191), 0), 100000000, 0, -4190), 0), 100000000, 0, -4189), (Tag5 ("expression", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -4403), (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -4402), 0), 100000000, 0, -4401), 0), 100000000, 0, -4400), 0), 100000000, 0, -4399), (Tag5 ("expression_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -4398), (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -4397), 0), 100000000, 0, -4396), 0), 100000000, 0, -4395), 0), 100000000, 0, -4394), (Tag5 ("case", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -4542), (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -4541), 0), 100000000, 0, -4540), 0), 100000000, 0, -4539), 0), 100000000, 0, -4538), (Tag5 ("letop", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -4334), (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -4333), 0), 100000000, 0, -4332), 0), 100000000, 0, -4331), 0), 100000000, 0, -4330), (Tag5 ("binding_op", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -4552), (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -4551), 0), 100000000, 0, -4550), 0), 100000000, 0, -4549), 0), 100000000, 0, -4548), (Tag5 ("value_description", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -4088), (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -4087), 0), 100000000, 0, -4086), 0), 100000000, 0, -4085), 0), 100000000, 0, -4084), (Tag5 ("type_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -4113), (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -4112), 0), 100000000, 0, -4111), 0), 100000000, 0, -4110), 0), 100000000, 0, -4109), (Tag5 ("type_kind", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -4098), (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -4097), 0), 100000000, 0, -4096), 0), 100000000, 0, -4095), 0), 100000000, 0, -4094), (Tag5 ("label_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -4339), (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -4338), 0), 100000000, 0, -4337), 0), 100000000, 0, -4336), 0), 100000000, 0, -4335), (Tag5 ("constructor_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -4433), (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -4432), 0), 100000000, 0, -4431), 0), 100000000, 0, -4430), 0), 100000000, 0, -4429), (Tag5 ("constructor_arguments", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -4438), (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -4437), 0), 100000000, 0, -4436), 0), 100000000, 0, -4435), 0), 100000000, 0, -4434), (Tag5 ("type_extension", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -4103), (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -4102), 0), 100000000, 0, -4101), 0), 100000000, 0, -4100), 0), 100000000, 0, -4099), (Tag5 ("extension_constructor", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -4388), (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -4387), 0), 100000000, 0, -4386), 0), 100000000, 0, -4385), 0), 100000000, 0, -4384), (Tag5 ("type_exception", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -4108), (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -4107), 0), 100000000, 0, -4106), 0), 100000000, 0, -4105), 0), 100000000, 0, -4104), (Tag5 ("extension_constructor_kind", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -4383), (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -4382), 0), 100000000, 0, -4381), 0), 100000000, 0, -4380), 0), 100000000, 0, -4379), (Tag5 ("class_type", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -4473), (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -4472), 0), 100000000, 0, -4471), 0), 100000000, 0, -4470), 0), 100000000, 0, -4469), (Tag5 ("class_type_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -4463), (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -4462), 0), 100000000, 0, -4461), 0), 100000000, 0, -4460), 0), 100000000, 0, -4459), (Tag5 ("class_signature", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -4483), (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -4482), 0), 100000000, 0, -4481), 0), 100000000, 0, -4480), 0), 100000000, 0, -4479), (Tag5 ("class_type_field", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -4458), (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -4457), 0), 100000000, 0, -4456), 0), 100000000, 0, -4455), 0), 100000000, 0, -4454), (Tag5 ("class_type_field_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -4453), (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -4452), 0), 100000000, 0, -4451), 0), 100000000, 0, -4450), 0), 100000000, 0, -4449), (Tag5 ("class_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -4485), (Tag9 (("a")), 100000000, 0, -4485), 0), 100000000, 0, -4492), 0), 100000000, 0, -4491), (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -4485)], (0)), 100000000, 0, -4490), (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -4485)], (0)), 100000000, 0, -4489), 0), 100000000, 0, -4488), 0), 100000000, 0, -4487), 0), 100000000, 0, -4486), [(Tag9 (("a")), 100000000, 0, -4485)]), 100000000, 0, -4484), (Tag5 ("class_description", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -4522), (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -4521), 0), 100000000, 0, -4520), 0), 100000000, 0, -4519), 0), 100000000, 0, -4518), (Tag5 ("class_type_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -4468), (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -4467), 0), 100000000, 0, -4466), 0), 100000000, 0, -4465), 0), 100000000, 0, -4464), (Tag5 ("class_expr", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -4517), (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -4516), 0), 100000000, 0, -4515), 0), 100000000, 0, -4514), 0), 100000000, 0, -4513), (Tag5 ("class_expr_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -4512), (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -4511), 0), 100000000, 0, -4510), 0), 100000000, 0, -4509), 0), 100000000, 0, -4508), (Tag5 ("class_structure", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -4478), (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -4477), 0), 100000000, 0, -4476), 0), 100000000, 0, -4475), 0), 100000000, 0, -4474), (Tag5 ("class_field", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -4507), (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -4506), 0), 100000000, 0, -4505), 0), 100000000, 0, -4504), 0), 100000000, 0, -4503), (Tag5 ("class_field_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -4502), (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -4501), 0), 100000000, 0, -4500), 0), 100000000, 0, -4499), 0), 100000000, 0, -4498), (Tag5 ("class_field_kind", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -4497), (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -4496), 0), 100000000, 0, -4495), 0), 100000000, 0, -4494), 0), 100000000, 0, -4493), (Tag5 ("class_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -4527), (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -4526), 0), 100000000, 0, -4525), 0), 100000000, 0, -4524), 0), 100000000, 0, -4523), (Tag5 ("module_type", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -4266), (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -4265), 0), 100000000, 0, -4264), 0), 100000000, 0, -4263), 0), 100000000, 0, -4262), (Tag5 ("module_type_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -4256), (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -4255), 0), 100000000, 0, -4254), 0), 100000000, 0, -4253), 0), 100000000, 0, -4252), (Tag5 ("functor_parameter", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -4378), (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -4377), 0), 100000000, 0, -4376), 0), 100000000, 0, -4375), 0), 100000000, 0, -4374), (Tag5 ("signature", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -4158), (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -4157), 0), 100000000, 0, -4156), 0), 100000000, 0, -4155), 0), 100000000, 0, -4154), (Tag5 ("signature_item", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -4153), (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -4152), 0), 100000000, 0, -4151), 0), 100000000, 0, -4150), 0), 100000000, 0, -4149), (Tag5 ("signature_item_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -4148), (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -4147), 0), 100000000, 0, -4146), 0), 100000000, 0, -4145), 0), 100000000, 0, -4144), (Tag5 ("module_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -4286), (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -4285), 0), 100000000, 0, -4284), 0), 100000000, 0, -4283), 0), 100000000, 0, -4282), (Tag5 ("module_substitution", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -4271), (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -4270), 0), 100000000, 0, -4269), 0), 100000000, 0, -4268), 0), 100000000, 0, -4267), (Tag5 ("module_type_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -4261), (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -4260), 0), 100000000, 0, -4259), 0), 100000000, 0, -4258), 0), 100000000, 0, -4257), (Tag5 ("open_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -4219), (Tag9 (("a")), 100000000, 0, -4219), 0), 100000000, 0, -4226), 0), 100000000, 0, -4225), (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -4219)], (0)), 100000000, 0, -4224), (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -4219)], (0)), 100000000, 0, -4223), 0), 100000000, 0, -4222), 0), 100000000, 0, -4221), 0), 100000000, 0, -4220), [(Tag9 (("a")), 100000000, 0, -4219)]), 100000000, 0, -4218), (Tag5 ("open_description", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -4231), (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -4230), 0), 100000000, 0, -4229), 0), 100000000, 0, -4228), 0), 100000000, 0, -4227), (Tag5 ("open_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -4236), (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -4235), 0), 100000000, 0, -4234), 0), 100000000, 0, -4233), 0), 100000000, 0, -4232), (Tag5 ("include_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -4356), (Tag9 (("a")), 100000000, 0, -4356), 0), 100000000, 0, -4363), 0), 100000000, 0, -4362), (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -4356)], (0)), 100000000, 0, -4361), (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -4356)], (0)), 100000000, 0, -4360), 0), 100000000, 0, -4359), 0), 100000000, 0, -4358), 0), 100000000, 0, -4357), [(Tag9 (("a")), 100000000, 0, -4356)]), 100000000, 0, -4355), (Tag5 ("include_description", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -4368), (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -4367), 0), 100000000, 0, -4366), 0), 100000000, 0, -4365), 0), 100000000, 0, -4364), (Tag5 ("include_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -4373), (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -4372), 0), 100000000, 0, -4371), 0), 100000000, 0, -4370), 0), 100000000, 0, -4369), (Tag5 ("with_constraint", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -4072), (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -4071), 0), 100000000, 0, -4070), 0), 100000000, 0, -4069), 0), 100000000, 0, -4068), (Tag5 ("module_expr", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -4281), (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -4280), 0), 100000000, 0, -4279), 0), 100000000, 0, -4278), 0), 100000000, 0, -4277), (Tag5 ("module_expr_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -4276), (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -4275), 0), 100000000, 0, -4274), 0), 100000000, 0, -4273), 0), 100000000, 0, -4272), (Tag5 ("structure", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -4138), (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -4137), 0), 100000000, 0, -4136), 0), 100000000, 0, -4135), 0), 100000000, 0, -4134), (Tag5 ("structure_item", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -4133), (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -4132), 0), 100000000, 0, -4131), 0), 100000000, 0, -4130), 0), 100000000, 0, -4129), (Tag5 ("structure_item_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -4128), (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -4127), 0), 100000000, 0, -4126), 0), 100000000, 0, -4125), 0), 100000000, 0, -4124), (Tag5 ("value_binding", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -4093), (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -4092), 0), 100000000, 0, -4091), 0), 100000000, 0, -4090), 0), 100000000, 0, -4089), (Tag5 ("module_binding", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -4291), (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -4290), 0), 100000000, 0, -4289), 0), 100000000, 0, -4288), 0), 100000000, 0, -4287), (Tag5 ("toplevel_phrase", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -4118), (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -4117), 0), 100000000, 0, -4116), 0), 100000000, 0, -4115), 0), 100000000, 0, -4114), (Tag5 ("toplevel_directive", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -4123), (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -4122), 0), 100000000, 0, -4121), 0), 100000000, 0, -4120), 0), 100000000, 0, -4119), (Tag5 ("directive_argument", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -4413), (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -4412), 0), 100000000, 0, -4411), 0), 100000000, 0, -4410), 0), 100000000, 0, -4409), (Tag5 ("directive_argument_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -4408), (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -4407), 0), 100000000, 0, -4406), 0), 100000000, 0, -4405), 0), 100000000, 0, -4404), (Tag5 ("cases", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -4537), (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -4536), 0), 100000000, 0, -4535), 0), 100000000, 0, -4534), 0), 100000000, 0, -4533), ((0), 100000000, 0, -4664)), 100000000, 0, -4663)), 100000000, 0, -4662)), 100000000, 0, -4661)), 100000000, 0, -4660)), 100000000, 0, -4659)), 100000000, 0, -4658)), 100000000, 0, -4657)), 100000000, 0, -4656)), 100000000, 0, -4655)), 100000000, 0, -4654)), 100000000, 0, -4653)), 100000000, 0, -4652)), 100000000, 0, -4651)), 100000000, 0, -4650)), 100000000, 0, -4649)), 100000000, 0, -4648)), 100000000, 0, -4647)), 100000000, 0, -4646)), 100000000, 0, -4645)), 100000000, 0, -4644)), 100000000, 0, -4643)), 100000000, 0, -4642)), 100000000, 0, -4641)), 100000000, 0, -4640)), 100000000, 0, -4639)), 100000000, 0, -4638)), 100000000, 0, -4637)), 100000000, 0, -4636)), 100000000, 0, -4635)), 100000000, 0, -4634)), 100000000, 0, -4633)), 100000000, 0, -4632)), 100000000, 0, -4631)), 100000000, 0, -4630)), 100000000, 0, -4629)), 100000000, 0, -4628)), 100000000, 0, -4627)), 100000000, 0, -4626)), 100000000, 0, -4625)), 100000000, 0, -4624)), 100000000, 0, -4623)), 100000000, 0, -4622)), 100000000, 0, -4621)), 100000000, 0, -4620)), 100000000, 0, -4619)), 100000000, 0, -4618)), 100000000, 0, -4617)), 100000000, 0, -4616)), 100000000, 0, -4615)), 100000000, 0, -4614)), 100000000, 0, -4613)), 100000000, 0, -4612)), 100000000, 0, -4611)), 100000000, 0, -4610)), 100000000, 0, -4609)), 100000000, 0, -4608)), 100000000, 0, -4607)), 100000000, 0, -4606)), 100000000, 0, -4605)), 100000000, 0, -4604)), 100000000, 0, -4603)), 100000000, 0, -4602)), 100000000, 0, -4601)), 100000000, 0, -4600)), 100000000, 0, -4599)), 100000000, 0, -4598)), 100000000, 0, -4597)), 100000000, 0, -4596)), 100000000, 0, -4595)), 100000000, 0, -4594)), 100000000, 0, -4593)), 100000000, 0, -4592)), 100000000, 0, -4591)), 100000000, 0, -4590)), 100000000, 0, -4589)), 100000000, 0, -4588)), 100000000, 0, -4587)), 100000000, 0, -4586)), 100000000, 0, -4585)), 100000000, 0, -4584)), 100000000, 0, -4583)), 100000000, 0, -4582)), 100000000, 0, -4581)), 100000000, 0, -4580)), 100000000, 0, -4579)), 100000000, 0, -4578)), 100000000, 0, -4577)), 100000000, 0, -4576)), 100000000, 0, -4575)), 100000000, 0, -4574)), 100000000, 0, -4573)), 100000000, 0, -4572)), 100000000, 0, -4571)), 100000000, 0, -4570)), 100000000, 0, -4569), (([(("map_with_context", 7456)); ((0), 100000000, 0, -4664); ((("ctx")), 100000000, 0, -4073)]))), 100000000, 0, -4568)), [63], [2], 0, 0, (("ast/ast.ml", 5622, 213084, 213084), ("ast/ast.ml", 6918, 262757, 262762), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 5077)), [63], (("ast/ast.ml", 5622, 213084, 213084), ("ast/ast.ml", 6918, 262757, 262762), 0), 0, Tag1 ("Ppxlib_ast__Ast", 5077)), 1, 0); Tag1 (("map_with_context", 7456), ([((("ctx")), 100000000, 0, -4073)], 1, 0, 1, ((Tag4 ((Tag5 ("arg_label", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -4567), (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -4566), 0), 100000000, 0, -4565), 0), 100000000, 0, -4564), 0), 100000000, 0, -4563), (Tag5 ("attribute", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -4562), (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -4561), 0), 100000000, 0, -4560), 0), 100000000, 0, -4559), 0), 100000000, 0, -4558), (Tag5 ("attributes", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -4557), (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -4556), 0), 100000000, 0, -4555), 0), 100000000, 0, -4554), 0), 100000000, 0, -4553), (Tag5 ("binding_op", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -4552), (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -4551), 0), 100000000, 0, -4550), 0), 100000000, 0, -4549), 0), 100000000, 0, -4548), (Tag5 ("bool", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4547), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4546), 0), 100000000, 0, -4545), 0), 100000000, 0, -4544), 0), 100000000, 0, -4543), (Tag5 ("case", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -4542), (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -4541), 0), 100000000, 0, -4540), 0), 100000000, 0, -4539), 0), 100000000, 0, -4538), (Tag5 ("cases", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -4537), (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -4536), 0), 100000000, 0, -4535), 0), 100000000, 0, -4534), 0), 100000000, 0, -4533), (Tag5 ("char", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -4532), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -4531), 0), 100000000, 0, -4530), 0), 100000000, 0, -4529), 0), 100000000, 0, -4528), (Tag5 ("class_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -4527), (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -4526), 0), 100000000, 0, -4525), 0), 100000000, 0, -4524), 0), 100000000, 0, -4523), (Tag5 ("class_description", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -4522), (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -4521), 0), 100000000, 0, -4520), 0), 100000000, 0, -4519), 0), 100000000, 0, -4518), (Tag5 ("class_expr", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -4517), (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -4516), 0), 100000000, 0, -4515), 0), 100000000, 0, -4514), 0), 100000000, 0, -4513), (Tag5 ("class_expr_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -4512), (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -4511), 0), 100000000, 0, -4510), 0), 100000000, 0, -4509), 0), 100000000, 0, -4508), (Tag5 ("class_field", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -4507), (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -4506), 0), 100000000, 0, -4505), 0), 100000000, 0, -4504), 0), 100000000, 0, -4503), (Tag5 ("class_field_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -4502), (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -4501), 0), 100000000, 0, -4500), 0), 100000000, 0, -4499), 0), 100000000, 0, -4498), (Tag5 ("class_field_kind", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -4497), (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -4496), 0), 100000000, 0, -4495), 0), 100000000, 0, -4494), 0), 100000000, 0, -4493), (Tag5 ("class_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -4485), (Tag9 (("a")), 100000000, 0, -4485), 0), 100000000, 0, -4492), 0), 100000000, 0, -4491), (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -4485)], (0)), 100000000, 0, -4490), (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -4485)], (0)), 100000000, 0, -4489), 0), 100000000, 0, -4488), 0), 100000000, 0, -4487), 0), 100000000, 0, -4486), [(Tag9 (("a")), 100000000, 0, -4485)]), 100000000, 0, -4484), (Tag5 ("class_signature", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -4483), (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -4482), 0), 100000000, 0, -4481), 0), 100000000, 0, -4480), 0), 100000000, 0, -4479), (Tag5 ("class_structure", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -4478), (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -4477), 0), 100000000, 0, -4476), 0), 100000000, 0, -4475), 0), 100000000, 0, -4474), (Tag5 ("class_type", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -4473), (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -4472), 0), 100000000, 0, -4471), 0), 100000000, 0, -4470), 0), 100000000, 0, -4469), (Tag5 ("class_type_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -4468), (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -4467), 0), 100000000, 0, -4466), 0), 100000000, 0, -4465), 0), 100000000, 0, -4464), (Tag5 ("class_type_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -4463), (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -4462), 0), 100000000, 0, -4461), 0), 100000000, 0, -4460), 0), 100000000, 0, -4459), (Tag5 ("class_type_field", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -4458), (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -4457), 0), 100000000, 0, -4456), 0), 100000000, 0, -4455), 0), 100000000, 0, -4454), (Tag5 ("class_type_field_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -4453), (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -4452), 0), 100000000, 0, -4451), 0), 100000000, 0, -4450), 0), 100000000, 0, -4449), (Tag5 ("closed_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -4448), (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -4447), 0), 100000000, 0, -4446), 0), 100000000, 0, -4445), 0), 100000000, 0, -4444), (Tag5 ("constant", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -4443), (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -4442), 0), 100000000, 0, -4441), 0), 100000000, 0, -4440), 0), 100000000, 0, -4439), (Tag5 ("constructor_arguments", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -4438), (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -4437), 0), 100000000, 0, -4436), 0), 100000000, 0, -4435), 0), 100000000, 0, -4434), (Tag5 ("constructor_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -4433), (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -4432), 0), 100000000, 0, -4431), 0), 100000000, 0, -4430), 0), 100000000, 0, -4429), (Tag5 ("core_type", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -4428), (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -4427), 0), 100000000, 0, -4426), 0), 100000000, 0, -4425), 0), 100000000, 0, -4424), (Tag5 ("core_type_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -4423), (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -4422), 0), 100000000, 0, -4421), 0), 100000000, 0, -4420), 0), 100000000, 0, -4419), (Tag5 ("direction_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -4418), (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -4417), 0), 100000000, 0, -4416), 0), 100000000, 0, -4415), 0), 100000000, 0, -4414), (Tag5 ("directive_argument", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -4413), (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -4412), 0), 100000000, 0, -4411), 0), 100000000, 0, -4410), 0), 100000000, 0, -4409), (Tag5 ("directive_argument_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -4408), (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -4407), 0), 100000000, 0, -4406), 0), 100000000, 0, -4405), 0), 100000000, 0, -4404), (Tag5 ("expression", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -4403), (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -4402), 0), 100000000, 0, -4401), 0), 100000000, 0, -4400), 0), 100000000, 0, -4399), (Tag5 ("expression_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -4398), (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -4397), 0), 100000000, 0, -4396), 0), 100000000, 0, -4395), 0), 100000000, 0, -4394), (Tag5 ("extension", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -4393), (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -4392), 0), 100000000, 0, -4391), 0), 100000000, 0, -4390), 0), 100000000, 0, -4389), (Tag5 ("extension_constructor", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -4388), (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -4387), 0), 100000000, 0, -4386), 0), 100000000, 0, -4385), 0), 100000000, 0, -4384), (Tag5 ("extension_constructor_kind", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -4383), (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -4382), 0), 100000000, 0, -4381), 0), 100000000, 0, -4380), 0), 100000000, 0, -4379), (Tag5 ("functor_parameter", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -4378), (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -4377), 0), 100000000, 0, -4376), 0), 100000000, 0, -4375), 0), 100000000, 0, -4374), (Tag5 ("include_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -4373), (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -4372), 0), 100000000, 0, -4371), 0), 100000000, 0, -4370), 0), 100000000, 0, -4369), (Tag5 ("include_description", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -4368), (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -4367), 0), 100000000, 0, -4366), 0), 100000000, 0, -4365), 0), 100000000, 0, -4364), (Tag5 ("include_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -4356), (Tag9 (("a")), 100000000, 0, -4356), 0), 100000000, 0, -4363), 0), 100000000, 0, -4362), (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -4356)], (0)), 100000000, 0, -4361), (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -4356)], (0)), 100000000, 0, -4360), 0), 100000000, 0, -4359), 0), 100000000, 0, -4358), 0), 100000000, 0, -4357), [(Tag9 (("a")), 100000000, 0, -4356)]), 100000000, 0, -4355), (Tag5 ("injectivity", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -4354), (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -4353), 0), 100000000, 0, -4352), 0), 100000000, 0, -4351), 0), 100000000, 0, -4350), (Tag5 ("int", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -4349), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -4348), 0), 100000000, 0, -4347), 0), 100000000, 0, -4346), 0), 100000000, 0, -4345), (Tag5 ("label", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -4344), (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -4343), 0), 100000000, 0, -4342), 0), 100000000, 0, -4341), 0), 100000000, 0, -4340), (Tag5 ("label_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -4339), (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -4338), 0), 100000000, 0, -4337), 0), 100000000, 0, -4336), 0), 100000000, 0, -4335), (Tag5 ("letop", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -4334), (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -4333), 0), 100000000, 0, -4332), 0), 100000000, 0, -4331), 0), 100000000, 0, -4330), (Tag5 ("list", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -4322), (Tag9 (("a")), 100000000, 0, -4322), 0), 100000000, 0, -4329), 0), 100000000, 0, -4328), (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -4322)], (0)), 100000000, 0, -4327), (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -4322)], (0)), 100000000, 0, -4326), 0), 100000000, 0, -4325), 0), 100000000, 0, -4324), 0), 100000000, 0, -4323), [(Tag9 (("a")), 100000000, 0, -4322)]), 100000000, 0, -4321), (Tag5 ("loc", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -4313), (Tag9 (("a")), 100000000, 0, -4313), 0), 100000000, 0, -4320), 0), 100000000, 0, -4319), (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -4313)], (0)), 100000000, 0, -4318), (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -4313)], (0)), 100000000, 0, -4317), 0), 100000000, 0, -4316), 0), 100000000, 0, -4315), 0), 100000000, 0, -4314), [(Tag9 (("a")), 100000000, 0, -4313)]), 100000000, 0, -4312), (Tag5 ("location", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -4311), (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -4310), 0), 100000000, 0, -4309), 0), 100000000, 0, -4308), 0), 100000000, 0, -4307), (Tag5 ("location_stack", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -4306), (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -4305), 0), 100000000, 0, -4304), 0), 100000000, 0, -4303), 0), 100000000, 0, -4302), (Tag5 ("longident", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -4301), (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -4300), 0), 100000000, 0, -4299), 0), 100000000, 0, -4298), 0), 100000000, 0, -4297), (Tag5 ("longident_loc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -4296), (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -4295), 0), 100000000, 0, -4294), 0), 100000000, 0, -4293), 0), 100000000, 0, -4292), (Tag5 ("module_binding", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -4291), (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -4290), 0), 100000000, 0, -4289), 0), 100000000, 0, -4288), 0), 100000000, 0, -4287), (Tag5 ("module_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -4286), (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -4285), 0), 100000000, 0, -4284), 0), 100000000, 0, -4283), 0), 100000000, 0, -4282), (Tag5 ("module_expr", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -4281), (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -4280), 0), 100000000, 0, -4279), 0), 100000000, 0, -4278), 0), 100000000, 0, -4277), (Tag5 ("module_expr_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -4276), (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -4275), 0), 100000000, 0, -4274), 0), 100000000, 0, -4273), 0), 100000000, 0, -4272), (Tag5 ("module_substitution", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -4271), (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -4270), 0), 100000000, 0, -4269), 0), 100000000, 0, -4268), 0), 100000000, 0, -4267), (Tag5 ("module_type", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -4266), (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -4265), 0), 100000000, 0, -4264), 0), 100000000, 0, -4263), 0), 100000000, 0, -4262), (Tag5 ("module_type_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -4261), (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -4260), 0), 100000000, 0, -4259), 0), 100000000, 0, -4258), 0), 100000000, 0, -4257), (Tag5 ("module_type_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -4256), (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -4255), 0), 100000000, 0, -4254), 0), 100000000, 0, -4253), 0), 100000000, 0, -4252), (Tag5 ("mutable_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -4251), (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -4250), 0), 100000000, 0, -4249), 0), 100000000, 0, -4248), 0), 100000000, 0, -4247), (Tag5 ("object_field", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -4246), (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -4245), 0), 100000000, 0, -4244), 0), 100000000, 0, -4243), 0), 100000000, 0, -4242), (Tag5 ("object_field_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -4241), (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -4240), 0), 100000000, 0, -4239), 0), 100000000, 0, -4238), 0), 100000000, 0, -4237), (Tag5 ("open_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -4236), (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -4235), 0), 100000000, 0, -4234), 0), 100000000, 0, -4233), 0), 100000000, 0, -4232), (Tag5 ("open_description", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -4231), (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -4230), 0), 100000000, 0, -4229), 0), 100000000, 0, -4228), 0), 100000000, 0, -4227), (Tag5 ("open_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -4219), (Tag9 (("a")), 100000000, 0, -4219), 0), 100000000, 0, -4226), 0), 100000000, 0, -4225), (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -4219)], (0)), 100000000, 0, -4224), (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -4219)], (0)), 100000000, 0, -4223), 0), 100000000, 0, -4222), 0), 100000000, 0, -4221), 0), 100000000, 0, -4220), [(Tag9 (("a")), 100000000, 0, -4219)]), 100000000, 0, -4218), (Tag5 ("option", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -4210), (Tag9 (("a")), 100000000, 0, -4210), 0), 100000000, 0, -4217), 0), 100000000, 0, -4216), (Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -4210)], (0)), 100000000, 0, -4215), (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -4210)], (0)), 100000000, 0, -4214), 0), 100000000, 0, -4213), 0), 100000000, 0, -4212), 0), 100000000, 0, -4211), [(Tag9 (("a")), 100000000, 0, -4210)]), 100000000, 0, -4209), (Tag5 ("override_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -4208), (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -4207), 0), 100000000, 0, -4206), 0), 100000000, 0, -4205), 0), 100000000, 0, -4204), (Tag5 ("package_type", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -4203), (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -4202), 0), 100000000, 0, -4201), 0), 100000000, 0, -4200), 0), 100000000, 0, -4199), (Tag5 ("pattern", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -4198), (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -4197), 0), 100000000, 0, -4196), 0), 100000000, 0, -4195), 0), 100000000, 0, -4194), (Tag5 ("pattern_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -4193), (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -4192), 0), 100000000, 0, -4191), 0), 100000000, 0, -4190), 0), 100000000, 0, -4189), (Tag5 ("payload", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -4188), (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -4187), 0), 100000000, 0, -4186), 0), 100000000, 0, -4185), 0), 100000000, 0, -4184), (Tag5 ("position", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -4183), (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -4182), 0), 100000000, 0, -4181), 0), 100000000, 0, -4180), 0), 100000000, 0, -4179), (Tag5 ("private_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -4178), (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -4177), 0), 100000000, 0, -4176), 0), 100000000, 0, -4175), 0), 100000000, 0, -4174), (Tag5 ("rec_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -4173), (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -4172), 0), 100000000, 0, -4171), 0), 100000000, 0, -4170), 0), 100000000, 0, -4169), (Tag5 ("row_field", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -4168), (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -4167), 0), 100000000, 0, -4166), 0), 100000000, 0, -4165), 0), 100000000, 0, -4164), (Tag5 ("row_field_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -4163), (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -4162), 0), 100000000, 0, -4161), 0), 100000000, 0, -4160), 0), 100000000, 0, -4159), (Tag5 ("signature", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -4158), (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -4157), 0), 100000000, 0, -4156), 0), 100000000, 0, -4155), 0), 100000000, 0, -4154), (Tag5 ("signature_item", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -4153), (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -4152), 0), 100000000, 0, -4151), 0), 100000000, 0, -4150), 0), 100000000, 0, -4149), (Tag5 ("signature_item_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -4148), (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -4147), 0), 100000000, 0, -4146), 0), 100000000, 0, -4145), 0), 100000000, 0, -4144), (Tag5 ("string", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4143), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4142), 0), 100000000, 0, -4141), 0), 100000000, 0, -4140), 0), 100000000, 0, -4139), (Tag5 ("structure", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -4138), (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -4137), 0), 100000000, 0, -4136), 0), 100000000, 0, -4135), 0), 100000000, 0, -4134), (Tag5 ("structure_item", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -4133), (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -4132), 0), 100000000, 0, -4131), 0), 100000000, 0, -4130), 0), 100000000, 0, -4129), (Tag5 ("structure_item_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -4128), (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -4127), 0), 100000000, 0, -4126), 0), 100000000, 0, -4125), 0), 100000000, 0, -4124), (Tag5 ("toplevel_directive", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -4123), (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -4122), 0), 100000000, 0, -4121), 0), 100000000, 0, -4120), 0), 100000000, 0, -4119), (Tag5 ("toplevel_phrase", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -4118), (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -4117), 0), 100000000, 0, -4116), 0), 100000000, 0, -4115), 0), 100000000, 0, -4114), (Tag5 ("type_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -4113), (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -4112), 0), 100000000, 0, -4111), 0), 100000000, 0, -4110), 0), 100000000, 0, -4109), (Tag5 ("type_exception", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -4108), (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -4107), 0), 100000000, 0, -4106), 0), 100000000, 0, -4105), 0), 100000000, 0, -4104), (Tag5 ("type_extension", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -4103), (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -4102), 0), 100000000, 0, -4101), 0), 100000000, 0, -4100), 0), 100000000, 0, -4099), (Tag5 ("type_kind", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -4098), (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -4097), 0), 100000000, 0, -4096), 0), 100000000, 0, -4095), 0), 100000000, 0, -4094), (Tag5 ("value_binding", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -4093), (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -4092), 0), 100000000, 0, -4091), 0), 100000000, 0, -4090), 0), 100000000, 0, -4089), (Tag5 ("value_description", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -4088), (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -4087), 0), 100000000, 0, -4086), 0), 100000000, 0, -4085), 0), 100000000, 0, -4084), (Tag5 ("variance", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -4083), (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -4082), 0), 100000000, 0, -4081), 0), 100000000, 0, -4080), 0), 100000000, 0, -4079), (Tag5 ("virtual_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -4078), (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -4077), 0), 100000000, 0, -4076), 0), 100000000, 0, -4075), 0), 100000000, 0, -4074), (Tag5 ("with_constraint", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -4072), (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -4071), 0), 100000000, 0, -4070), 0), 100000000, 0, -4069), 0), 100000000, 0, -4068), (0, 100000000, 0, -4067)), 100000000, 0, -4066)), 100000000, 0, -4065)), 100000000, 0, -4064)), 100000000, 0, -4063)), 100000000, 0, -4062)), 100000000, 0, -4061)), 100000000, 0, -4060)), 100000000, 0, -4059)), 100000000, 0, -4058)), 100000000, 0, -4057)), 100000000, 0, -4056)), 100000000, 0, -4055)), 100000000, 0, -4054)), 100000000, 0, -4053)), 100000000, 0, -4052)), 100000000, 0, -4051)), 100000000, 0, -4050)), 100000000, 0, -4049)), 100000000, 0, -4048)), 100000000, 0, -4047)), 100000000, 0, -4046)), 100000000, 0, -4045)), 100000000, 0, -4044)), 100000000, 0, -4043)), 100000000, 0, -4042)), 100000000, 0, -4041)), 100000000, 0, -4040)), 100000000, 0, -4039)), 100000000, 0, -4038)), 100000000, 0, -4037)), 100000000, 0, -4036)), 100000000, 0, -4035)), 100000000, 0, -4034)), 100000000, 0, -4033)), 100000000, 0, -4032)), 100000000, 0, -4031)), 100000000, 0, -4030)), 100000000, 0, -4029)), 100000000, 0, -4028)), 100000000, 0, -4027)), 100000000, 0, -4026)), 100000000, 0, -4025)), 100000000, 0, -4024)), 100000000, 0, -4023)), 100000000, 0, -4022)), 100000000, 0, -4021)), 100000000, 0, -4020)), 100000000, 0, -4019)), 100000000, 0, -4018)), 100000000, 0, -4017)), 100000000, 0, -4016)), 100000000, 0, -4015)), 100000000, 0, -4014)), 100000000, 0, -4013)), 100000000, 0, -4012)), 100000000, 0, -4011)), 100000000, 0, -4010)), 100000000, 0, -4009)), 100000000, 0, -4008)), 100000000, 0, -4007)), 100000000, 0, -4006)), 100000000, 0, -4005)), 100000000, 0, -4004)), 100000000, 0, -4003)), 100000000, 0, -4002)), 100000000, 0, -4001)), 100000000, 0, -4000)), 100000000, 0, -3999)), 100000000, 0, -3998)), 100000000, 0, -3997)), 100000000, 0, -3996)), 100000000, 0, -3995)), 100000000, 0, -3994)), 100000000, 0, -3993)), 100000000, 0, -3992)), 100000000, 0, -3991)), 100000000, 0, -3990)), 100000000, 0, -3989)), 100000000, 0, -3988)), 100000000, 0, -3987)), 100000000, 0, -3986)), 100000000, 0, -3985)), 100000000, 0, -3984)), 100000000, 0, -3983)), 100000000, 0, -3982)), 100000000, 0, -3981)), 100000000, 0, -3980)), 100000000, 0, -3979)), 100000000, 0, -3978)), 100000000, 0, -3977)), 100000000, 0, -3976)), 100000000, 0, -3975)), 100000000, 0, -3974)), 100000000, 0, -3973)), 100000000, 0, -3972), (0)), 100000000, 0, -3971)), [63], [2], 0, 0, (("ast/ast.ml", 5622, 213084, 213084), ("ast/ast.ml", 6918, 262757, 262762), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 5077)), 1, 0); Tag5 (("lift", 7457), ([((("res")), 100000000, 0, -3146)], Tag1 (((Tag4 ((Tag5 ("record", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3212); ((("res")), 100000000, 0, -3146)]), 100000000, 0, -3211)], (0)), 100000000, 0, -3210), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3209), 0), 100000000, 0, -3208), (Tag5 ("constr", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3382), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("res")), 100000000, 0, -3146)], (0)), 100000000, 0, -3381), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3380), 0), 100000000, 0, -3379), 0), 100000000, 0, -3378), (Tag5 ("tuple", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("res")), 100000000, 0, -3146)], (0)), 100000000, 0, -3174), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3173), 0), 100000000, 0, -3172), (Tag5 ("bool", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3448), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3447), 0), 100000000, 0, -3446), (Tag5 ("char", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -3439), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3438), 0), 100000000, 0, -3437), (Tag5 ("int", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3323), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3322), 0), 100000000, 0, -3321), (Tag5 ("list", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -3307), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3311), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -3307)], (0)), 100000000, 0, -3310), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3309), 0), 100000000, 0, -3308), [(Tag9 (("a")), 100000000, 0, -3307)]), 100000000, 0, -3306), (Tag5 ("option", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -3238), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3242), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -3238)], (0)), 100000000, 0, -3241), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3240), 0), 100000000, 0, -3239), [(Tag9 (("a")), 100000000, 0, -3238)]), 100000000, 0, -3237), (Tag5 ("string", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3192), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3191), 0), 100000000, 0, -3190), (Tag5 ("position", 1, (Tag10 ((Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -3221), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3220), 0), 100000000, 0, -3219), (Tag5 ("location", 1, (Tag10 ((Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -3299), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3298), 0), 100000000, 0, -3297), (Tag5 ("location_stack", 1, (Tag10 ((Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -3296), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3295), 0), 100000000, 0, -3294), (Tag5 ("loc", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -3301), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3305), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -3301)], (0)), 100000000, 0, -3304), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3303), 0), 100000000, 0, -3302), [(Tag9 (("a")), 100000000, 0, -3301)]), 100000000, 0, -3300), (Tag5 ("longident", 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -3293), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3292), 0), 100000000, 0, -3291), (Tag5 ("longident_loc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -3290), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3289), 0), 100000000, 0, -3288), (Tag5 ("rec_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -3215), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3214), 0), 100000000, 0, -3213), (Tag5 ("direction_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -3365), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3364), 0), 100000000, 0, -3363), (Tag5 ("private_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -3218), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3217), 0), 100000000, 0, -3216), (Tag5 ("mutable_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -3263), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3262), 0), 100000000, 0, -3261), (Tag5 ("virtual_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -3150), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3149), 0), 100000000, 0, -3148), (Tag5 ("override_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -3236), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3235), 0), 100000000, 0, -3234), (Tag5 ("closed_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -3388), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3387), 0), 100000000, 0, -3386), (Tag5 ("label", 1, (Tag10 ((Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -3320), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3319), 0), 100000000, 0, -3318), (Tag5 ("arg_label", 1, (Tag10 ((Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -3460), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3459), 0), 100000000, 0, -3458), (Tag5 ("variance", 1, (Tag10 ((Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -3153), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3152), 0), 100000000, 0, -3151), (Tag5 ("injectivity", 1, (Tag10 ((Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -3326), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3325), 0), 100000000, 0, -3324), (Tag5 ("constant", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -3385), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3384), 0), 100000000, 0, -3383), (Tag5 ("attribute", 1, (Tag10 ((Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -3457), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3456), 0), 100000000, 0, -3455), (Tag5 ("extension", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -3350), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3349), 0), 100000000, 0, -3348), (Tag5 ("attributes", 1, (Tag10 ((Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -3454), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3453), 0), 100000000, 0, -3452), (Tag5 ("payload", 1, (Tag10 ((Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -3224), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3223), 0), 100000000, 0, -3222), (Tag5 ("core_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -3371), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3370), 0), 100000000, 0, -3369), (Tag5 ("core_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -3368), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3367), 0), 100000000, 0, -3366), (Tag5 ("package_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -3233), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3232), 0), 100000000, 0, -3231), (Tag5 ("row_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -3207), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3206), 0), 100000000, 0, -3205), (Tag5 ("row_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -3204), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3203), 0), 100000000, 0, -3202), (Tag5 ("object_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -3260), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3259), 0), 100000000, 0, -3258), (Tag5 ("object_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -3257), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3256), 0), 100000000, 0, -3255), (Tag5 ("pattern", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -3230), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3229), 0), 100000000, 0, -3228), (Tag5 ("pattern_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -3227), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3226), 0), 100000000, 0, -3225), (Tag5 ("expression", 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -3356), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3355), 0), 100000000, 0, -3354), (Tag5 ("expression_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -3353), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3352), 0), 100000000, 0, -3351), (Tag5 ("case", 1, (Tag10 ((Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -3445), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3444), 0), 100000000, 0, -3443), (Tag5 ("letop", 1, (Tag10 ((Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -3314), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3313), 0), 100000000, 0, -3312), (Tag5 ("binding_op", 1, (Tag10 ((Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -3451), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3450), 0), 100000000, 0, -3449), (Tag5 ("value_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -3156), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3155), 0), 100000000, 0, -3154), (Tag5 ("type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -3171), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3170), 0), 100000000, 0, -3169), (Tag5 ("type_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -3162), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3161), 0), 100000000, 0, -3160), (Tag5 ("label_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -3317), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3316), 0), 100000000, 0, -3315), (Tag5 ("constructor_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -3374), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3373), 0), 100000000, 0, -3372), (Tag5 ("constructor_arguments", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -3377), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3376), 0), 100000000, 0, -3375), (Tag5 ("type_extension", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -3165), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3164), 0), 100000000, 0, -3163), (Tag5 ("extension_constructor", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -3347), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3346), 0), 100000000, 0, -3345), (Tag5 ("type_exception", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -3168), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3167), 0), 100000000, 0, -3166), (Tag5 ("extension_constructor_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -3344), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3343), 0), 100000000, 0, -3342), (Tag5 ("class_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -3403), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3402), 0), 100000000, 0, -3401), (Tag5 ("class_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -3397), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3396), 0), 100000000, 0, -3395), (Tag5 ("class_signature", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -3409), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3408), 0), 100000000, 0, -3407), (Tag5 ("class_type_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -3394), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3393), 0), 100000000, 0, -3392), (Tag5 ("class_type_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -3391), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3390), 0), 100000000, 0, -3389), (Tag5 ("class_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -3411), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3415), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -3411)], (0)), 100000000, 0, -3414), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3413), 0), 100000000, 0, -3412), [(Tag9 (("a")), 100000000, 0, -3411)]), 100000000, 0, -3410), (Tag5 ("class_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -3433), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3432), 0), 100000000, 0, -3431), (Tag5 ("class_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -3400), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3399), 0), 100000000, 0, -3398), (Tag5 ("class_expr", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -3430), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3429), 0), 100000000, 0, -3428), (Tag5 ("class_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -3427), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3426), 0), 100000000, 0, -3425), (Tag5 ("class_structure", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -3406), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3405), 0), 100000000, 0, -3404), (Tag5 ("class_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -3424), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3423), 0), 100000000, 0, -3422), (Tag5 ("class_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -3421), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3420), 0), 100000000, 0, -3419), (Tag5 ("class_field_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -3418), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3417), 0), 100000000, 0, -3416), (Tag5 ("class_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -3436), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3435), 0), 100000000, 0, -3434), (Tag5 ("module_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -3272), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3271), 0), 100000000, 0, -3270), (Tag5 ("module_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -3266), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3265), 0), 100000000, 0, -3264), (Tag5 ("functor_parameter", 1, (Tag10 ((Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -3341), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3340), 0), 100000000, 0, -3339), (Tag5 ("signature", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -3201), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3200), 0), 100000000, 0, -3199), (Tag5 ("signature_item", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -3198), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3197), 0), 100000000, 0, -3196), (Tag5 ("signature_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -3195), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3194), 0), 100000000, 0, -3193), (Tag5 ("module_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -3284), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3283), 0), 100000000, 0, -3282), (Tag5 ("module_substitution", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -3275), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3274), 0), 100000000, 0, -3273), (Tag5 ("module_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -3269), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3268), 0), 100000000, 0, -3267), (Tag5 ("open_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -3244), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3248), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -3244)], (0)), 100000000, 0, -3247), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3246), 0), 100000000, 0, -3245), [(Tag9 (("a")), 100000000, 0, -3244)]), 100000000, 0, -3243), (Tag5 ("open_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -3251), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3250), 0), 100000000, 0, -3249), (Tag5 ("open_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -3254), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3253), 0), 100000000, 0, -3252), (Tag5 ("include_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -3328), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3332), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -3328)], (0)), 100000000, 0, -3331), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3330), 0), 100000000, 0, -3329), [(Tag9 (("a")), 100000000, 0, -3328)]), 100000000, 0, -3327), (Tag5 ("include_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -3335), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3334), 0), 100000000, 0, -3333), (Tag5 ("include_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -3338), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3337), 0), 100000000, 0, -3336), (Tag5 ("with_constraint", 1, (Tag10 ((Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -3147), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3145), 0), 100000000, 0, -3144), (Tag5 ("module_expr", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -3281), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3280), 0), 100000000, 0, -3279), (Tag5 ("module_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -3278), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3277), 0), 100000000, 0, -3276), (Tag5 ("structure", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -3189), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3188), 0), 100000000, 0, -3187), (Tag5 ("structure_item", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -3186), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3185), 0), 100000000, 0, -3184), (Tag5 ("structure_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -3183), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3182), 0), 100000000, 0, -3181), (Tag5 ("value_binding", 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -3159), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3158), 0), 100000000, 0, -3157), (Tag5 ("module_binding", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -3287), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3286), 0), 100000000, 0, -3285), (Tag5 ("toplevel_phrase", 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -3177), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3176), 0), 100000000, 0, -3175), (Tag5 ("toplevel_directive", 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -3180), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3179), 0), 100000000, 0, -3178), (Tag5 ("directive_argument", 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -3362), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3361), 0), 100000000, 0, -3360), (Tag5 ("directive_argument_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -3359), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3358), 0), 100000000, 0, -3357), (Tag5 ("cases", 1, (Tag10 ((Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -3442), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3441), 0), 100000000, 0, -3440), ((0), 100000000, 0, -3871)), 100000000, 0, -3970)), 100000000, 0, -3969)), 100000000, 0, -3968)), 100000000, 0, -3967)), 100000000, 0, -3966)), 100000000, 0, -3965)), 100000000, 0, -3964)), 100000000, 0, -3963)), 100000000, 0, -3962)), 100000000, 0, -3961)), 100000000, 0, -3960)), 100000000, 0, -3959)), 100000000, 0, -3958)), 100000000, 0, -3957)), 100000000, 0, -3956)), 100000000, 0, -3955)), 100000000, 0, -3954)), 100000000, 0, -3953)), 100000000, 0, -3952)), 100000000, 0, -3951)), 100000000, 0, -3950)), 100000000, 0, -3949)), 100000000, 0, -3948)), 100000000, 0, -3947)), 100000000, 0, -3946)), 100000000, 0, -3945)), 100000000, 0, -3944)), 100000000, 0, -3943)), 100000000, 0, -3942)), 100000000, 0, -3941)), 100000000, 0, -3940)), 100000000, 0, -3939)), 100000000, 0, -3938)), 100000000, 0, -3937)), 100000000, 0, -3936)), 100000000, 0, -3935)), 100000000, 0, -3934)), 100000000, 0, -3933)), 100000000, 0, -3932)), 100000000, 0, -3931)), 100000000, 0, -3930)), 100000000, 0, -3929)), 100000000, 0, -3928)), 100000000, 0, -3927)), 100000000, 0, -3926)), 100000000, 0, -3925)), 100000000, 0, -3924)), 100000000, 0, -3923)), 100000000, 0, -3922)), 100000000, 0, -3921)), 100000000, 0, -3920)), 100000000, 0, -3919)), 100000000, 0, -3918)), 100000000, 0, -3917)), 100000000, 0, -3916)), 100000000, 0, -3915)), 100000000, 0, -3914)), 100000000, 0, -3913)), 100000000, 0, -3912)), 100000000, 0, -3911)), 100000000, 0, -3910)), 100000000, 0, -3909)), 100000000, 0, -3908)), 100000000, 0, -3907)), 100000000, 0, -3906)), 100000000, 0, -3905)), 100000000, 0, -3904)), 100000000, 0, -3903)), 100000000, 0, -3902)), 100000000, 0, -3901)), 100000000, 0, -3900)), 100000000, 0, -3899)), 100000000, 0, -3898)), 100000000, 0, -3897)), 100000000, 0, -3896)), 100000000, 0, -3895)), 100000000, 0, -3894)), 100000000, 0, -3893)), 100000000, 0, -3892)), 100000000, 0, -3891)), 100000000, 0, -3890)), 100000000, 0, -3889)), 100000000, 0, -3888)), 100000000, 0, -3887)), 100000000, 0, -3886)), 100000000, 0, -3885)), 100000000, 0, -3884)), 100000000, 0, -3883)), 100000000, 0, -3882)), 100000000, 0, -3881)), 100000000, 0, -3880)), 100000000, 0, -3879)), 100000000, 0, -3878)), 100000000, 0, -3877)), 100000000, 0, -3876)), 100000000, 0, -3875)), 100000000, 0, -3874)), 100000000, 0, -3873), (([(("lift", 7459)); ((0), 100000000, 0, -3871); ((("res")), 100000000, 0, -3146)]))), 100000000, 0, -3872), ((0), 100000000, 0, -3871), 0, ((((((0, "arg_label", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -3563), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3562), 0), 100000000, 0, -3561)), 0, 1), "attribute", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -3566), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3565), 0), 100000000, 0, -3564)), (0, "attributes", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -3569), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3568), 0), 100000000, 0, -3567)), (0, "binding_op", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -3572), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3571), 0), 100000000, 0, -3570)), 0, 1), 2), 3), "bool", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3575), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3574), 0), 100000000, 0, -3573)), ((0, "case", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -3578), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3577), 0), 100000000, 0, -3576)), (0, "cases", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -3581), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3580), 0), 100000000, 0, -3579)), 0, 1), 2), "char", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -3584), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3583), 0), 100000000, 0, -3582)), (0, "class_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -3587), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3586), 0), 100000000, 0, -3585)), 0, 1), 3), 4), "class_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -3590), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3589), 0), 100000000, 0, -3588)), ((((0, "class_expr", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -3593), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3592), 0), 100000000, 0, -3591)), 0, 1), "class_expr_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -3596), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3595), 0), 100000000, 0, -3594)), (0, "class_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -3599), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3598), 0), 100000000, 0, -3597)), (0, "class_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -3602), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3601), 0), 100000000, 0, -3600)), (0, "class_field_kind", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -3605), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3604), 0), 100000000, 0, -3603)), 0, 1), 2), 3), 4), "class_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -3411), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3610), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -3411)], (0)), 100000000, 0, -3609), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3608), 0), 100000000, 0, -3607), [(Tag9 (("a")), 100000000, 0, -3411)]), 100000000, 0, -3606)), (0, "class_signature", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -3613), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3612), 0), 100000000, 0, -3611)), (0, "class_structure", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -3616), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3615), 0), 100000000, 0, -3614)), 0, 1), 2), 5), "class_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -3619), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3618), 0), 100000000, 0, -3617)), (((0, "class_type_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -3622), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3621), 0), 100000000, 0, -3620)), 0, 1), "class_type_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -3625), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3624), 0), 100000000, 0, -3623)), (0, "class_type_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -3628), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3627), 0), 100000000, 0, -3626)), (0, "class_type_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -3631), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3630), 0), 100000000, 0, -3629)), 0, 1), 2), 3), "closed_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -3634), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3633), 0), 100000000, 0, -3632)), (0, "constant", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -3637), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3636), 0), 100000000, 0, -3635)), 0, 1), 4), 6), 7), "constr", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3642), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("res")), 100000000, 0, -3146)], (0)), 100000000, 0, -3641), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3640), 0), 100000000, 0, -3639), 0), 100000000, 0, -3638)), ((((0, "constructor_arguments", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -3645), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3644), 0), 100000000, 0, -3643)), 0, 1), "constructor_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -3648), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3647), 0), 100000000, 0, -3646)), 0, 2), "core_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -3651), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3650), 0), 100000000, 0, -3649)), (0, "core_type_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -3654), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3653), 0), 100000000, 0, -3652)), 0, 1), 3), "direction_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -3657), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3656), 0), 100000000, 0, -3655)), (((0, "directive_argument", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -3660), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3659), 0), 100000000, 0, -3658)), (0, "directive_argument_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -3663), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3662), 0), 100000000, 0, -3661)), 0, 1), 2), "expression", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -3666), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3665), 0), 100000000, 0, -3664)), (0, "expression_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -3669), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3668), 0), 100000000, 0, -3667)), 0, 1), 3), "extension", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -3672), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3671), 0), 100000000, 0, -3670)), (((0, "extension_constructor", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -3675), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3674), 0), 100000000, 0, -3673)), 0, 1), "extension_constructor_kind", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -3678), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3677), 0), 100000000, 0, -3676)), 0, 2), "functor_parameter", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -3681), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3680), 0), 100000000, 0, -3679)), (((0, "include_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -3684), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3683), 0), 100000000, 0, -3682)), 0, 1), "include_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -3687), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3686), 0), 100000000, 0, -3685)), 0, 2), "include_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -3328), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3692), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -3328)], (0)), 100000000, 0, -3691), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3690), 0), 100000000, 0, -3689), [(Tag9 (("a")), 100000000, 0, -3328)]), 100000000, 0, -3688)), (0, "injectivity", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -3695), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3694), 0), 100000000, 0, -3693)), 0, 1), 3), 4), 5), 6), 8), "int", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3698), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3697), 0), 100000000, 0, -3696)), ((((0, "label", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -3701), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3700), 0), 100000000, 0, -3699)), ((0, "label_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -3704), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3703), 0), 100000000, 0, -3702)), 0, 1), "letop", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -3707), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3706), 0), 100000000, 0, -3705)), 0, 2), 3), "list", (0, 0, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -3307), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3712), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -3307)], (0)), 100000000, 0, -3711), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3710), 0), 100000000, 0, -3709), [(Tag9 (("a")), 100000000, 0, -3307)]), 100000000, 0, -3708)), (0, "loc", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -3301), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3717), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -3301)], (0)), 100000000, 0, -3716), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3715), 0), 100000000, 0, -3714), [(Tag9 (("a")), 100000000, 0, -3301)]), 100000000, 0, -3713)), 0, 1), 4), "location", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -3720), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3719), 0), 100000000, 0, -3718)), ((((0, "location_stack", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -3723), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3722), 0), 100000000, 0, -3721)), 0, 1), "longident", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -3726), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3725), 0), 100000000, 0, -3724)), 0, 2), "longident_loc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -3729), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3728), 0), 100000000, 0, -3727)), ((((0, "module_binding", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -3732), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3731), 0), 100000000, 0, -3730)), 0, 1), "module_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -3735), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3734), 0), 100000000, 0, -3733)), 0, 2), "module_expr", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -3738), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3737), 0), 100000000, 0, -3736)), ((0, "module_expr_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -3741), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3740), 0), 100000000, 0, -3739)), 0, 1), "module_substitution", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -3744), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3743), 0), 100000000, 0, -3742)), 0, 2), 3), "module_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -3747), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3746), 0), 100000000, 0, -3745)), ((0, "module_type_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -3750), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3749), 0), 100000000, 0, -3748)), 0, 1), "module_type_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -3753), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3752), 0), 100000000, 0, -3751)), 0, 2), 4), 5), "mutable_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -3756), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3755), 0), 100000000, 0, -3754)), ((0, "object_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -3759), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3758), 0), 100000000, 0, -3757)), 0, 1), "object_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -3762), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3761), 0), 100000000, 0, -3760)), (((0, "open_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -3765), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3764), 0), 100000000, 0, -3763)), 0, 1), "open_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -3768), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3767), 0), 100000000, 0, -3766)), 0, 2), "open_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -3244), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3773), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -3244)], (0)), 100000000, 0, -3772), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3771), 0), 100000000, 0, -3770), [(Tag9 (("a")), 100000000, 0, -3244)]), 100000000, 0, -3769)), 0, 3), 4), 6), 7), "option", (0, 0, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -3238), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3778), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -3238)], (0)), 100000000, 0, -3777), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3776), 0), 100000000, 0, -3775), [(Tag9 (("a")), 100000000, 0, -3238)]), 100000000, 0, -3774)), ((((0, "override_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -3781), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3780), 0), 100000000, 0, -3779)), 0, 1), "package_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -3784), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3783), 0), 100000000, 0, -3782)), ((0, "pattern", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -3787), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3786), 0), 100000000, 0, -3785)), (0, "pattern_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -3790), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3789), 0), 100000000, 0, -3788)), 0, 1), 2), "payload", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -3793), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3792), 0), 100000000, 0, -3791)), 0, 3), 4), "position", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -3796), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3795), 0), 100000000, 0, -3794)), ((0, "private_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -3799), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3798), 0), 100000000, 0, -3797)), 0, 1), "rec_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -3802), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3801), 0), 100000000, 0, -3800)), 0, 2), 5), "record", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3807); ((("res")), 100000000, 0, -3146)]), 100000000, 0, -3806)], (0)), 100000000, 0, -3805), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3804), 0), 100000000, 0, -3803)), ((((0, "row_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -3810), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3809), 0), 100000000, 0, -3808)), 0, 1), "row_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -3813), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3812), 0), 100000000, 0, -3811)), (0, "signature", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -3816), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3815), 0), 100000000, 0, -3814)), 0, 1), 2), "signature_item", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -3819), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3818), 0), 100000000, 0, -3817)), (((0, "signature_item_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -3822), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3821), 0), 100000000, 0, -3820)), 0, 1), "string", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3825), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3824), 0), 100000000, 0, -3823)), (0, "structure", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -3828), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3827), 0), 100000000, 0, -3826)), 0, 1), 2), "structure_item", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -3831), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3830), 0), 100000000, 0, -3829)), (0, "structure_item_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -3834), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3833), 0), 100000000, 0, -3832)), ((0, "toplevel_directive", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -3837), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3836), 0), 100000000, 0, -3835)), 0, 1), "toplevel_phrase", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -3840), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3839), 0), 100000000, 0, -3838)), 0, 2), 3), 4), 5), "tuple", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("res")), 100000000, 0, -3146)], (0)), 100000000, 0, -3843), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3842), 0), 100000000, 0, -3841)), ((0, "type_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -3846), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3845), 0), 100000000, 0, -3844)), ((0, "type_exception", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -3849), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3848), 0), 100000000, 0, -3847)), 0, 1), "type_extension", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -3852), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3851), 0), 100000000, 0, -3850)), 0, 2), 3), "type_kind", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -3855), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3854), 0), 100000000, 0, -3853)), (((0, "value_binding", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -3858), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3857), 0), 100000000, 0, -3856)), 0, 1), "value_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -3861), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3860), 0), 100000000, 0, -3859)), 0, 2), "variance", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -3864), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3863), 0), 100000000, 0, -3862)), (0, "virtual_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -3867), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3866), 0), 100000000, 0, -3865)), (0, "with_constraint", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -3870), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3869), 0), 100000000, 0, -3868)), 0, 1), 2), 3), 4), 6), 7), 8), 9))), (("lift", 7459)), 0, [63], (("ast/ast.ml", 6920, 262764, 262764), ("ast/ast.ml", 8400, 317679, 317684), 0), 0, Tag1 ("Ppxlib_ast__Ast", 6315)), 1, 0); Tag6 (("lift", 7458), ([((("res")), 100000000, 0, -3146)], Tag1 (((Tag4 ((Tag5 ("record", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3212); ((("res")), 100000000, 0, -3146)]), 100000000, 0, -3211)], (0)), 100000000, 0, -3210), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3209), 0), 100000000, 0, -3208), (Tag5 ("constr", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3382), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("res")), 100000000, 0, -3146)], (0)), 100000000, 0, -3381), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3380), 0), 100000000, 0, -3379), 0), 100000000, 0, -3378), (Tag5 ("tuple", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("res")), 100000000, 0, -3146)], (0)), 100000000, 0, -3174), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3173), 0), 100000000, 0, -3172), (Tag5 ("bool", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3448), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3447), 0), 100000000, 0, -3446), (Tag5 ("char", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -3439), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3438), 0), 100000000, 0, -3437), (Tag5 ("int", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3323), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3322), 0), 100000000, 0, -3321), (Tag5 ("list", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -3307), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3311), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -3307)], (0)), 100000000, 0, -3310), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3309), 0), 100000000, 0, -3308), [(Tag9 (("a")), 100000000, 0, -3307)]), 100000000, 0, -3306), (Tag5 ("option", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -3238), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3242), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -3238)], (0)), 100000000, 0, -3241), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3240), 0), 100000000, 0, -3239), [(Tag9 (("a")), 100000000, 0, -3238)]), 100000000, 0, -3237), (Tag5 ("string", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3192), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3191), 0), 100000000, 0, -3190), (Tag5 ("position", 1, (Tag10 ((Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -3221), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3220), 0), 100000000, 0, -3219), (Tag5 ("location", 1, (Tag10 ((Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -3299), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3298), 0), 100000000, 0, -3297), (Tag5 ("location_stack", 1, (Tag10 ((Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -3296), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3295), 0), 100000000, 0, -3294), (Tag5 ("loc", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -3301), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3305), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -3301)], (0)), 100000000, 0, -3304), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3303), 0), 100000000, 0, -3302), [(Tag9 (("a")), 100000000, 0, -3301)]), 100000000, 0, -3300), (Tag5 ("longident", 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -3293), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3292), 0), 100000000, 0, -3291), (Tag5 ("longident_loc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -3290), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3289), 0), 100000000, 0, -3288), (Tag5 ("rec_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -3215), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3214), 0), 100000000, 0, -3213), (Tag5 ("direction_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -3365), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3364), 0), 100000000, 0, -3363), (Tag5 ("private_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -3218), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3217), 0), 100000000, 0, -3216), (Tag5 ("mutable_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -3263), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3262), 0), 100000000, 0, -3261), (Tag5 ("virtual_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -3150), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3149), 0), 100000000, 0, -3148), (Tag5 ("override_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -3236), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3235), 0), 100000000, 0, -3234), (Tag5 ("closed_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -3388), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3387), 0), 100000000, 0, -3386), (Tag5 ("label", 1, (Tag10 ((Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -3320), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3319), 0), 100000000, 0, -3318), (Tag5 ("arg_label", 1, (Tag10 ((Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -3460), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3459), 0), 100000000, 0, -3458), (Tag5 ("variance", 1, (Tag10 ((Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -3153), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3152), 0), 100000000, 0, -3151), (Tag5 ("injectivity", 1, (Tag10 ((Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -3326), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3325), 0), 100000000, 0, -3324), (Tag5 ("constant", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -3385), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3384), 0), 100000000, 0, -3383), (Tag5 ("attribute", 1, (Tag10 ((Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -3457), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3456), 0), 100000000, 0, -3455), (Tag5 ("extension", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -3350), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3349), 0), 100000000, 0, -3348), (Tag5 ("attributes", 1, (Tag10 ((Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -3454), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3453), 0), 100000000, 0, -3452), (Tag5 ("payload", 1, (Tag10 ((Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -3224), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3223), 0), 100000000, 0, -3222), (Tag5 ("core_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -3371), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3370), 0), 100000000, 0, -3369), (Tag5 ("core_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -3368), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3367), 0), 100000000, 0, -3366), (Tag5 ("package_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -3233), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3232), 0), 100000000, 0, -3231), (Tag5 ("row_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -3207), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3206), 0), 100000000, 0, -3205), (Tag5 ("row_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -3204), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3203), 0), 100000000, 0, -3202), (Tag5 ("object_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -3260), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3259), 0), 100000000, 0, -3258), (Tag5 ("object_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -3257), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3256), 0), 100000000, 0, -3255), (Tag5 ("pattern", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -3230), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3229), 0), 100000000, 0, -3228), (Tag5 ("pattern_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -3227), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3226), 0), 100000000, 0, -3225), (Tag5 ("expression", 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -3356), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3355), 0), 100000000, 0, -3354), (Tag5 ("expression_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -3353), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3352), 0), 100000000, 0, -3351), (Tag5 ("case", 1, (Tag10 ((Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -3445), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3444), 0), 100000000, 0, -3443), (Tag5 ("letop", 1, (Tag10 ((Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -3314), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3313), 0), 100000000, 0, -3312), (Tag5 ("binding_op", 1, (Tag10 ((Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -3451), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3450), 0), 100000000, 0, -3449), (Tag5 ("value_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -3156), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3155), 0), 100000000, 0, -3154), (Tag5 ("type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -3171), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3170), 0), 100000000, 0, -3169), (Tag5 ("type_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -3162), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3161), 0), 100000000, 0, -3160), (Tag5 ("label_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -3317), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3316), 0), 100000000, 0, -3315), (Tag5 ("constructor_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -3374), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3373), 0), 100000000, 0, -3372), (Tag5 ("constructor_arguments", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -3377), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3376), 0), 100000000, 0, -3375), (Tag5 ("type_extension", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -3165), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3164), 0), 100000000, 0, -3163), (Tag5 ("extension_constructor", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -3347), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3346), 0), 100000000, 0, -3345), (Tag5 ("type_exception", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -3168), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3167), 0), 100000000, 0, -3166), (Tag5 ("extension_constructor_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -3344), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3343), 0), 100000000, 0, -3342), (Tag5 ("class_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -3403), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3402), 0), 100000000, 0, -3401), (Tag5 ("class_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -3397), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3396), 0), 100000000, 0, -3395), (Tag5 ("class_signature", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -3409), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3408), 0), 100000000, 0, -3407), (Tag5 ("class_type_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -3394), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3393), 0), 100000000, 0, -3392), (Tag5 ("class_type_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -3391), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3390), 0), 100000000, 0, -3389), (Tag5 ("class_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -3411), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3415), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -3411)], (0)), 100000000, 0, -3414), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3413), 0), 100000000, 0, -3412), [(Tag9 (("a")), 100000000, 0, -3411)]), 100000000, 0, -3410), (Tag5 ("class_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -3433), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3432), 0), 100000000, 0, -3431), (Tag5 ("class_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -3400), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3399), 0), 100000000, 0, -3398), (Tag5 ("class_expr", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -3430), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3429), 0), 100000000, 0, -3428), (Tag5 ("class_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -3427), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3426), 0), 100000000, 0, -3425), (Tag5 ("class_structure", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -3406), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3405), 0), 100000000, 0, -3404), (Tag5 ("class_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -3424), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3423), 0), 100000000, 0, -3422), (Tag5 ("class_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -3421), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3420), 0), 100000000, 0, -3419), (Tag5 ("class_field_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -3418), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3417), 0), 100000000, 0, -3416), (Tag5 ("class_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -3436), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3435), 0), 100000000, 0, -3434), (Tag5 ("module_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -3272), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3271), 0), 100000000, 0, -3270), (Tag5 ("module_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -3266), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3265), 0), 100000000, 0, -3264), (Tag5 ("functor_parameter", 1, (Tag10 ((Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -3341), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3340), 0), 100000000, 0, -3339), (Tag5 ("signature", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -3201), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3200), 0), 100000000, 0, -3199), (Tag5 ("signature_item", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -3198), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3197), 0), 100000000, 0, -3196), (Tag5 ("signature_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -3195), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3194), 0), 100000000, 0, -3193), (Tag5 ("module_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -3284), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3283), 0), 100000000, 0, -3282), (Tag5 ("module_substitution", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -3275), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3274), 0), 100000000, 0, -3273), (Tag5 ("module_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -3269), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3268), 0), 100000000, 0, -3267), (Tag5 ("open_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -3244), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3248), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -3244)], (0)), 100000000, 0, -3247), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3246), 0), 100000000, 0, -3245), [(Tag9 (("a")), 100000000, 0, -3244)]), 100000000, 0, -3243), (Tag5 ("open_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -3251), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3250), 0), 100000000, 0, -3249), (Tag5 ("open_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -3254), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3253), 0), 100000000, 0, -3252), (Tag5 ("include_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -3328), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3332), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -3328)], (0)), 100000000, 0, -3331), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3330), 0), 100000000, 0, -3329), [(Tag9 (("a")), 100000000, 0, -3328)]), 100000000, 0, -3327), (Tag5 ("include_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -3335), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3334), 0), 100000000, 0, -3333), (Tag5 ("include_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -3338), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3337), 0), 100000000, 0, -3336), (Tag5 ("with_constraint", 1, (Tag10 ((Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -3147), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3145), 0), 100000000, 0, -3144), (Tag5 ("module_expr", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -3281), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3280), 0), 100000000, 0, -3279), (Tag5 ("module_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -3278), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3277), 0), 100000000, 0, -3276), (Tag5 ("structure", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -3189), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3188), 0), 100000000, 0, -3187), (Tag5 ("structure_item", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -3186), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3185), 0), 100000000, 0, -3184), (Tag5 ("structure_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -3183), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3182), 0), 100000000, 0, -3181), (Tag5 ("value_binding", 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -3159), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3158), 0), 100000000, 0, -3157), (Tag5 ("module_binding", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -3287), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3286), 0), 100000000, 0, -3285), (Tag5 ("toplevel_phrase", 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -3177), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3176), 0), 100000000, 0, -3175), (Tag5 ("toplevel_directive", 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -3180), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3179), 0), 100000000, 0, -3178), (Tag5 ("directive_argument", 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -3362), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3361), 0), 100000000, 0, -3360), (Tag5 ("directive_argument_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -3359), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3358), 0), 100000000, 0, -3357), (Tag5 ("cases", 1, (Tag10 ((Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -3442), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3441), 0), 100000000, 0, -3440), ((0), 100000000, 0, -3871)), 100000000, 0, -3970)), 100000000, 0, -3969)), 100000000, 0, -3968)), 100000000, 0, -3967)), 100000000, 0, -3966)), 100000000, 0, -3965)), 100000000, 0, -3964)), 100000000, 0, -3963)), 100000000, 0, -3962)), 100000000, 0, -3961)), 100000000, 0, -3960)), 100000000, 0, -3959)), 100000000, 0, -3958)), 100000000, 0, -3957)), 100000000, 0, -3956)), 100000000, 0, -3955)), 100000000, 0, -3954)), 100000000, 0, -3953)), 100000000, 0, -3952)), 100000000, 0, -3951)), 100000000, 0, -3950)), 100000000, 0, -3949)), 100000000, 0, -3948)), 100000000, 0, -3947)), 100000000, 0, -3946)), 100000000, 0, -3945)), 100000000, 0, -3944)), 100000000, 0, -3943)), 100000000, 0, -3942)), 100000000, 0, -3941)), 100000000, 0, -3940)), 100000000, 0, -3939)), 100000000, 0, -3938)), 100000000, 0, -3937)), 100000000, 0, -3936)), 100000000, 0, -3935)), 100000000, 0, -3934)), 100000000, 0, -3933)), 100000000, 0, -3932)), 100000000, 0, -3931)), 100000000, 0, -3930)), 100000000, 0, -3929)), 100000000, 0, -3928)), 100000000, 0, -3927)), 100000000, 0, -3926)), 100000000, 0, -3925)), 100000000, 0, -3924)), 100000000, 0, -3923)), 100000000, 0, -3922)), 100000000, 0, -3921)), 100000000, 0, -3920)), 100000000, 0, -3919)), 100000000, 0, -3918)), 100000000, 0, -3917)), 100000000, 0, -3916)), 100000000, 0, -3915)), 100000000, 0, -3914)), 100000000, 0, -3913)), 100000000, 0, -3912)), 100000000, 0, -3911)), 100000000, 0, -3910)), 100000000, 0, -3909)), 100000000, 0, -3908)), 100000000, 0, -3907)), 100000000, 0, -3906)), 100000000, 0, -3905)), 100000000, 0, -3904)), 100000000, 0, -3903)), 100000000, 0, -3902)), 100000000, 0, -3901)), 100000000, 0, -3900)), 100000000, 0, -3899)), 100000000, 0, -3898)), 100000000, 0, -3897)), 100000000, 0, -3896)), 100000000, 0, -3895)), 100000000, 0, -3894)), 100000000, 0, -3893)), 100000000, 0, -3892)), 100000000, 0, -3891)), 100000000, 0, -3890)), 100000000, 0, -3889)), 100000000, 0, -3888)), 100000000, 0, -3887)), 100000000, 0, -3886)), 100000000, 0, -3885)), 100000000, 0, -3884)), 100000000, 0, -3883)), 100000000, 0, -3882)), 100000000, 0, -3881)), 100000000, 0, -3880)), 100000000, 0, -3879)), 100000000, 0, -3878)), 100000000, 0, -3877)), 100000000, 0, -3876)), 100000000, 0, -3875)), 100000000, 0, -3874)), 100000000, 0, -3873), (([(("lift", 7459)); ((0), 100000000, 0, -3871); ((("res")), 100000000, 0, -3146)]))), 100000000, 0, -3872), ((0), 100000000, 0, -3871), 0, ((((((0, "arg_label", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -3563), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3562), 0), 100000000, 0, -3561)), 0, 1), "attribute", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -3566), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3565), 0), 100000000, 0, -3564)), (0, "attributes", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -3569), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3568), 0), 100000000, 0, -3567)), (0, "binding_op", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -3572), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3571), 0), 100000000, 0, -3570)), 0, 1), 2), 3), "bool", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3575), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3574), 0), 100000000, 0, -3573)), ((0, "case", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -3578), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3577), 0), 100000000, 0, -3576)), (0, "cases", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -3581), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3580), 0), 100000000, 0, -3579)), 0, 1), 2), "char", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -3584), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3583), 0), 100000000, 0, -3582)), (0, "class_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -3587), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3586), 0), 100000000, 0, -3585)), 0, 1), 3), 4), "class_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -3590), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3589), 0), 100000000, 0, -3588)), ((((0, "class_expr", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -3593), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3592), 0), 100000000, 0, -3591)), 0, 1), "class_expr_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -3596), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3595), 0), 100000000, 0, -3594)), (0, "class_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -3599), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3598), 0), 100000000, 0, -3597)), (0, "class_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -3602), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3601), 0), 100000000, 0, -3600)), (0, "class_field_kind", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -3605), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3604), 0), 100000000, 0, -3603)), 0, 1), 2), 3), 4), "class_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -3411), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3610), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -3411)], (0)), 100000000, 0, -3609), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3608), 0), 100000000, 0, -3607), [(Tag9 (("a")), 100000000, 0, -3411)]), 100000000, 0, -3606)), (0, "class_signature", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -3613), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3612), 0), 100000000, 0, -3611)), (0, "class_structure", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -3616), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3615), 0), 100000000, 0, -3614)), 0, 1), 2), 5), "class_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -3619), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3618), 0), 100000000, 0, -3617)), (((0, "class_type_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -3622), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3621), 0), 100000000, 0, -3620)), 0, 1), "class_type_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -3625), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3624), 0), 100000000, 0, -3623)), (0, "class_type_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -3628), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3627), 0), 100000000, 0, -3626)), (0, "class_type_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -3631), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3630), 0), 100000000, 0, -3629)), 0, 1), 2), 3), "closed_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -3634), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3633), 0), 100000000, 0, -3632)), (0, "constant", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -3637), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3636), 0), 100000000, 0, -3635)), 0, 1), 4), 6), 7), "constr", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3642), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("res")), 100000000, 0, -3146)], (0)), 100000000, 0, -3641), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3640), 0), 100000000, 0, -3639), 0), 100000000, 0, -3638)), ((((0, "constructor_arguments", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -3645), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3644), 0), 100000000, 0, -3643)), 0, 1), "constructor_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -3648), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3647), 0), 100000000, 0, -3646)), 0, 2), "core_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -3651), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3650), 0), 100000000, 0, -3649)), (0, "core_type_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -3654), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3653), 0), 100000000, 0, -3652)), 0, 1), 3), "direction_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -3657), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3656), 0), 100000000, 0, -3655)), (((0, "directive_argument", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -3660), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3659), 0), 100000000, 0, -3658)), (0, "directive_argument_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -3663), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3662), 0), 100000000, 0, -3661)), 0, 1), 2), "expression", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -3666), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3665), 0), 100000000, 0, -3664)), (0, "expression_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -3669), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3668), 0), 100000000, 0, -3667)), 0, 1), 3), "extension", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -3672), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3671), 0), 100000000, 0, -3670)), (((0, "extension_constructor", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -3675), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3674), 0), 100000000, 0, -3673)), 0, 1), "extension_constructor_kind", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -3678), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3677), 0), 100000000, 0, -3676)), 0, 2), "functor_parameter", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -3681), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3680), 0), 100000000, 0, -3679)), (((0, "include_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -3684), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3683), 0), 100000000, 0, -3682)), 0, 1), "include_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -3687), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3686), 0), 100000000, 0, -3685)), 0, 2), "include_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -3328), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3692), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -3328)], (0)), 100000000, 0, -3691), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3690), 0), 100000000, 0, -3689), [(Tag9 (("a")), 100000000, 0, -3328)]), 100000000, 0, -3688)), (0, "injectivity", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -3695), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3694), 0), 100000000, 0, -3693)), 0, 1), 3), 4), 5), 6), 8), "int", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3698), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3697), 0), 100000000, 0, -3696)), ((((0, "label", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -3701), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3700), 0), 100000000, 0, -3699)), ((0, "label_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -3704), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3703), 0), 100000000, 0, -3702)), 0, 1), "letop", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -3707), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3706), 0), 100000000, 0, -3705)), 0, 2), 3), "list", (0, 0, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -3307), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3712), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -3307)], (0)), 100000000, 0, -3711), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3710), 0), 100000000, 0, -3709), [(Tag9 (("a")), 100000000, 0, -3307)]), 100000000, 0, -3708)), (0, "loc", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -3301), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3717), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -3301)], (0)), 100000000, 0, -3716), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3715), 0), 100000000, 0, -3714), [(Tag9 (("a")), 100000000, 0, -3301)]), 100000000, 0, -3713)), 0, 1), 4), "location", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -3720), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3719), 0), 100000000, 0, -3718)), ((((0, "location_stack", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -3723), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3722), 0), 100000000, 0, -3721)), 0, 1), "longident", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -3726), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3725), 0), 100000000, 0, -3724)), 0, 2), "longident_loc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -3729), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3728), 0), 100000000, 0, -3727)), ((((0, "module_binding", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -3732), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3731), 0), 100000000, 0, -3730)), 0, 1), "module_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -3735), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3734), 0), 100000000, 0, -3733)), 0, 2), "module_expr", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -3738), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3737), 0), 100000000, 0, -3736)), ((0, "module_expr_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -3741), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3740), 0), 100000000, 0, -3739)), 0, 1), "module_substitution", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -3744), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3743), 0), 100000000, 0, -3742)), 0, 2), 3), "module_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -3747), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3746), 0), 100000000, 0, -3745)), ((0, "module_type_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -3750), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3749), 0), 100000000, 0, -3748)), 0, 1), "module_type_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -3753), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3752), 0), 100000000, 0, -3751)), 0, 2), 4), 5), "mutable_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -3756), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3755), 0), 100000000, 0, -3754)), ((0, "object_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -3759), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3758), 0), 100000000, 0, -3757)), 0, 1), "object_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -3762), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3761), 0), 100000000, 0, -3760)), (((0, "open_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -3765), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3764), 0), 100000000, 0, -3763)), 0, 1), "open_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -3768), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3767), 0), 100000000, 0, -3766)), 0, 2), "open_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -3244), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3773), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -3244)], (0)), 100000000, 0, -3772), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3771), 0), 100000000, 0, -3770), [(Tag9 (("a")), 100000000, 0, -3244)]), 100000000, 0, -3769)), 0, 3), 4), 6), 7), "option", (0, 0, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -3238), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3778), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -3238)], (0)), 100000000, 0, -3777), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3776), 0), 100000000, 0, -3775), [(Tag9 (("a")), 100000000, 0, -3238)]), 100000000, 0, -3774)), ((((0, "override_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -3781), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3780), 0), 100000000, 0, -3779)), 0, 1), "package_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -3784), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3783), 0), 100000000, 0, -3782)), ((0, "pattern", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -3787), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3786), 0), 100000000, 0, -3785)), (0, "pattern_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -3790), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3789), 0), 100000000, 0, -3788)), 0, 1), 2), "payload", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -3793), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3792), 0), 100000000, 0, -3791)), 0, 3), 4), "position", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -3796), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3795), 0), 100000000, 0, -3794)), ((0, "private_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -3799), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3798), 0), 100000000, 0, -3797)), 0, 1), "rec_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -3802), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3801), 0), 100000000, 0, -3800)), 0, 2), 5), "record", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3807); ((("res")), 100000000, 0, -3146)]), 100000000, 0, -3806)], (0)), 100000000, 0, -3805), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3804), 0), 100000000, 0, -3803)), ((((0, "row_field", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -3810), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3809), 0), 100000000, 0, -3808)), 0, 1), "row_field_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -3813), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3812), 0), 100000000, 0, -3811)), (0, "signature", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -3816), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3815), 0), 100000000, 0, -3814)), 0, 1), 2), "signature_item", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -3819), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3818), 0), 100000000, 0, -3817)), (((0, "signature_item_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -3822), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3821), 0), 100000000, 0, -3820)), 0, 1), "string", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3825), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3824), 0), 100000000, 0, -3823)), (0, "structure", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -3828), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3827), 0), 100000000, 0, -3826)), 0, 1), 2), "structure_item", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -3831), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3830), 0), 100000000, 0, -3829)), (0, "structure_item_desc", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -3834), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3833), 0), 100000000, 0, -3832)), ((0, "toplevel_directive", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -3837), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3836), 0), 100000000, 0, -3835)), 0, 1), "toplevel_phrase", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -3840), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3839), 0), 100000000, 0, -3838)), 0, 2), 3), 4), 5), "tuple", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("res")), 100000000, 0, -3146)], (0)), 100000000, 0, -3843), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3842), 0), 100000000, 0, -3841)), ((0, "type_declaration", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -3846), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3845), 0), 100000000, 0, -3844)), ((0, "type_exception", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -3849), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3848), 0), 100000000, 0, -3847)), 0, 1), "type_extension", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -3852), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3851), 0), 100000000, 0, -3850)), 0, 2), 3), "type_kind", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -3855), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3854), 0), 100000000, 0, -3853)), (((0, "value_binding", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -3858), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3857), 0), 100000000, 0, -3856)), 0, 1), "value_description", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -3861), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3860), 0), 100000000, 0, -3859)), 0, 2), "variance", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -3864), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3863), 0), 100000000, 0, -3862)), (0, "virtual_flag", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -3867), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3866), 0), 100000000, 0, -3865)), (0, "with_constraint", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -3870), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3869), 0), 100000000, 0, -3868)), 0, 1), 2), 3), 4), 6), 7), 8), 9))), (("lift", 7459)), ([((("res")), 100000000, 0, -3146)], 1, 0, 1, ((Tag4 ((Tag5 ("record", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3212); ((("res")), 100000000, 0, -3146)]), 100000000, 0, -3211)], (0)), 100000000, 0, -3210), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3209), 0), 100000000, 0, -3208), (Tag5 ("constr", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3382), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("res")), 100000000, 0, -3146)], (0)), 100000000, 0, -3381), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3380), 0), 100000000, 0, -3379), 0), 100000000, 0, -3378), (Tag5 ("tuple", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("res")), 100000000, 0, -3146)], (0)), 100000000, 0, -3174), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3173), 0), 100000000, 0, -3172), (Tag5 ("bool", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3448), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3447), 0), 100000000, 0, -3446), (Tag5 ("char", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -3439), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3438), 0), 100000000, 0, -3437), (Tag5 ("int", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3323), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3322), 0), 100000000, 0, -3321), (Tag5 ("list", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -3307), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3311), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -3307)], (0)), 100000000, 0, -3310), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3309), 0), 100000000, 0, -3308), [(Tag9 (("a")), 100000000, 0, -3307)]), 100000000, 0, -3306), (Tag5 ("option", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -3238), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3242), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -3238)], (0)), 100000000, 0, -3241), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3240), 0), 100000000, 0, -3239), [(Tag9 (("a")), 100000000, 0, -3238)]), 100000000, 0, -3237), (Tag5 ("string", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3192), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3191), 0), 100000000, 0, -3190), (Tag5 ("position", 1, (Tag10 ((Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -3221), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3220), 0), 100000000, 0, -3219), (Tag5 ("location", 1, (Tag10 ((Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -3299), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3298), 0), 100000000, 0, -3297), (Tag5 ("location_stack", 1, (Tag10 ((Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -3296), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3295), 0), 100000000, 0, -3294), (Tag5 ("loc", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -3301), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3305), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -3301)], (0)), 100000000, 0, -3304), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3303), 0), 100000000, 0, -3302), [(Tag9 (("a")), 100000000, 0, -3301)]), 100000000, 0, -3300), (Tag5 ("longident", 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -3293), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3292), 0), 100000000, 0, -3291), (Tag5 ("longident_loc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -3290), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3289), 0), 100000000, 0, -3288), (Tag5 ("rec_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -3215), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3214), 0), 100000000, 0, -3213), (Tag5 ("direction_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -3365), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3364), 0), 100000000, 0, -3363), (Tag5 ("private_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -3218), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3217), 0), 100000000, 0, -3216), (Tag5 ("mutable_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -3263), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3262), 0), 100000000, 0, -3261), (Tag5 ("virtual_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -3150), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3149), 0), 100000000, 0, -3148), (Tag5 ("override_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -3236), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3235), 0), 100000000, 0, -3234), (Tag5 ("closed_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -3388), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3387), 0), 100000000, 0, -3386), (Tag5 ("label", 1, (Tag10 ((Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -3320), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3319), 0), 100000000, 0, -3318), (Tag5 ("arg_label", 1, (Tag10 ((Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -3460), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3459), 0), 100000000, 0, -3458), (Tag5 ("variance", 1, (Tag10 ((Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -3153), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3152), 0), 100000000, 0, -3151), (Tag5 ("injectivity", 1, (Tag10 ((Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -3326), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3325), 0), 100000000, 0, -3324), (Tag5 ("constant", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -3385), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3384), 0), 100000000, 0, -3383), (Tag5 ("attribute", 1, (Tag10 ((Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -3457), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3456), 0), 100000000, 0, -3455), (Tag5 ("extension", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -3350), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3349), 0), 100000000, 0, -3348), (Tag5 ("attributes", 1, (Tag10 ((Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -3454), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3453), 0), 100000000, 0, -3452), (Tag5 ("payload", 1, (Tag10 ((Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -3224), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3223), 0), 100000000, 0, -3222), (Tag5 ("core_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -3371), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3370), 0), 100000000, 0, -3369), (Tag5 ("core_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -3368), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3367), 0), 100000000, 0, -3366), (Tag5 ("package_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -3233), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3232), 0), 100000000, 0, -3231), (Tag5 ("row_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -3207), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3206), 0), 100000000, 0, -3205), (Tag5 ("row_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -3204), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3203), 0), 100000000, 0, -3202), (Tag5 ("object_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -3260), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3259), 0), 100000000, 0, -3258), (Tag5 ("object_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -3257), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3256), 0), 100000000, 0, -3255), (Tag5 ("pattern", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -3230), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3229), 0), 100000000, 0, -3228), (Tag5 ("pattern_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -3227), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3226), 0), 100000000, 0, -3225), (Tag5 ("expression", 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -3356), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3355), 0), 100000000, 0, -3354), (Tag5 ("expression_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -3353), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3352), 0), 100000000, 0, -3351), (Tag5 ("case", 1, (Tag10 ((Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -3445), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3444), 0), 100000000, 0, -3443), (Tag5 ("letop", 1, (Tag10 ((Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -3314), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3313), 0), 100000000, 0, -3312), (Tag5 ("binding_op", 1, (Tag10 ((Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -3451), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3450), 0), 100000000, 0, -3449), (Tag5 ("value_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -3156), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3155), 0), 100000000, 0, -3154), (Tag5 ("type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -3171), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3170), 0), 100000000, 0, -3169), (Tag5 ("type_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -3162), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3161), 0), 100000000, 0, -3160), (Tag5 ("label_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -3317), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3316), 0), 100000000, 0, -3315), (Tag5 ("constructor_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -3374), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3373), 0), 100000000, 0, -3372), (Tag5 ("constructor_arguments", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -3377), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3376), 0), 100000000, 0, -3375), (Tag5 ("type_extension", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -3165), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3164), 0), 100000000, 0, -3163), (Tag5 ("extension_constructor", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -3347), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3346), 0), 100000000, 0, -3345), (Tag5 ("type_exception", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -3168), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3167), 0), 100000000, 0, -3166), (Tag5 ("extension_constructor_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -3344), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3343), 0), 100000000, 0, -3342), (Tag5 ("class_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -3403), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3402), 0), 100000000, 0, -3401), (Tag5 ("class_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -3397), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3396), 0), 100000000, 0, -3395), (Tag5 ("class_signature", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -3409), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3408), 0), 100000000, 0, -3407), (Tag5 ("class_type_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -3394), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3393), 0), 100000000, 0, -3392), (Tag5 ("class_type_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -3391), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3390), 0), 100000000, 0, -3389), (Tag5 ("class_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -3411), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3415), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -3411)], (0)), 100000000, 0, -3414), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3413), 0), 100000000, 0, -3412), [(Tag9 (("a")), 100000000, 0, -3411)]), 100000000, 0, -3410), (Tag5 ("class_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -3433), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3432), 0), 100000000, 0, -3431), (Tag5 ("class_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -3400), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3399), 0), 100000000, 0, -3398), (Tag5 ("class_expr", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -3430), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3429), 0), 100000000, 0, -3428), (Tag5 ("class_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -3427), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3426), 0), 100000000, 0, -3425), (Tag5 ("class_structure", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -3406), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3405), 0), 100000000, 0, -3404), (Tag5 ("class_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -3424), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3423), 0), 100000000, 0, -3422), (Tag5 ("class_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -3421), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3420), 0), 100000000, 0, -3419), (Tag5 ("class_field_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -3418), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3417), 0), 100000000, 0, -3416), (Tag5 ("class_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -3436), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3435), 0), 100000000, 0, -3434), (Tag5 ("module_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -3272), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3271), 0), 100000000, 0, -3270), (Tag5 ("module_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -3266), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3265), 0), 100000000, 0, -3264), (Tag5 ("functor_parameter", 1, (Tag10 ((Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -3341), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3340), 0), 100000000, 0, -3339), (Tag5 ("signature", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -3201), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3200), 0), 100000000, 0, -3199), (Tag5 ("signature_item", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -3198), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3197), 0), 100000000, 0, -3196), (Tag5 ("signature_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -3195), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3194), 0), 100000000, 0, -3193), (Tag5 ("module_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -3284), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3283), 0), 100000000, 0, -3282), (Tag5 ("module_substitution", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -3275), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3274), 0), 100000000, 0, -3273), (Tag5 ("module_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -3269), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3268), 0), 100000000, 0, -3267), (Tag5 ("open_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -3244), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3248), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -3244)], (0)), 100000000, 0, -3247), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3246), 0), 100000000, 0, -3245), [(Tag9 (("a")), 100000000, 0, -3244)]), 100000000, 0, -3243), (Tag5 ("open_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -3251), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3250), 0), 100000000, 0, -3249), (Tag5 ("open_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -3254), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3253), 0), 100000000, 0, -3252), (Tag5 ("include_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -3328), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3332), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -3328)], (0)), 100000000, 0, -3331), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3330), 0), 100000000, 0, -3329), [(Tag9 (("a")), 100000000, 0, -3328)]), 100000000, 0, -3327), (Tag5 ("include_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -3335), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3334), 0), 100000000, 0, -3333), (Tag5 ("include_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -3338), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3337), 0), 100000000, 0, -3336), (Tag5 ("with_constraint", 1, (Tag10 ((Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -3147), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3145), 0), 100000000, 0, -3144), (Tag5 ("module_expr", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -3281), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3280), 0), 100000000, 0, -3279), (Tag5 ("module_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -3278), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3277), 0), 100000000, 0, -3276), (Tag5 ("structure", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -3189), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3188), 0), 100000000, 0, -3187), (Tag5 ("structure_item", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -3186), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3185), 0), 100000000, 0, -3184), (Tag5 ("structure_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -3183), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3182), 0), 100000000, 0, -3181), (Tag5 ("value_binding", 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -3159), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3158), 0), 100000000, 0, -3157), (Tag5 ("module_binding", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -3287), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3286), 0), 100000000, 0, -3285), (Tag5 ("toplevel_phrase", 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -3177), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3176), 0), 100000000, 0, -3175), (Tag5 ("toplevel_directive", 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -3180), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3179), 0), 100000000, 0, -3178), (Tag5 ("directive_argument", 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -3362), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3361), 0), 100000000, 0, -3360), (Tag5 ("directive_argument_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -3359), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3358), 0), 100000000, 0, -3357), (Tag5 ("cases", 1, (Tag10 ((Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -3442), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3441), 0), 100000000, 0, -3440), ((0), 100000000, 0, -3560)), 100000000, 0, -3559)), 100000000, 0, -3558)), 100000000, 0, -3557)), 100000000, 0, -3556)), 100000000, 0, -3555)), 100000000, 0, -3554)), 100000000, 0, -3553)), 100000000, 0, -3552)), 100000000, 0, -3551)), 100000000, 0, -3550)), 100000000, 0, -3549)), 100000000, 0, -3548)), 100000000, 0, -3547)), 100000000, 0, -3546)), 100000000, 0, -3545)), 100000000, 0, -3544)), 100000000, 0, -3543)), 100000000, 0, -3542)), 100000000, 0, -3541)), 100000000, 0, -3540)), 100000000, 0, -3539)), 100000000, 0, -3538)), 100000000, 0, -3537)), 100000000, 0, -3536)), 100000000, 0, -3535)), 100000000, 0, -3534)), 100000000, 0, -3533)), 100000000, 0, -3532)), 100000000, 0, -3531)), 100000000, 0, -3530)), 100000000, 0, -3529)), 100000000, 0, -3528)), 100000000, 0, -3527)), 100000000, 0, -3526)), 100000000, 0, -3525)), 100000000, 0, -3524)), 100000000, 0, -3523)), 100000000, 0, -3522)), 100000000, 0, -3521)), 100000000, 0, -3520)), 100000000, 0, -3519)), 100000000, 0, -3518)), 100000000, 0, -3517)), 100000000, 0, -3516)), 100000000, 0, -3515)), 100000000, 0, -3514)), 100000000, 0, -3513)), 100000000, 0, -3512)), 100000000, 0, -3511)), 100000000, 0, -3510)), 100000000, 0, -3509)), 100000000, 0, -3508)), 100000000, 0, -3507)), 100000000, 0, -3506)), 100000000, 0, -3505)), 100000000, 0, -3504)), 100000000, 0, -3503)), 100000000, 0, -3502)), 100000000, 0, -3501)), 100000000, 0, -3500)), 100000000, 0, -3499)), 100000000, 0, -3498)), 100000000, 0, -3497)), 100000000, 0, -3496)), 100000000, 0, -3495)), 100000000, 0, -3494)), 100000000, 0, -3493)), 100000000, 0, -3492)), 100000000, 0, -3491)), 100000000, 0, -3490)), 100000000, 0, -3489)), 100000000, 0, -3488)), 100000000, 0, -3487)), 100000000, 0, -3486)), 100000000, 0, -3485)), 100000000, 0, -3484)), 100000000, 0, -3483)), 100000000, 0, -3482)), 100000000, 0, -3481)), 100000000, 0, -3480)), 100000000, 0, -3479)), 100000000, 0, -3478)), 100000000, 0, -3477)), 100000000, 0, -3476)), 100000000, 0, -3475)), 100000000, 0, -3474)), 100000000, 0, -3473)), 100000000, 0, -3472)), 100000000, 0, -3471)), 100000000, 0, -3470)), 100000000, 0, -3469)), 100000000, 0, -3468)), 100000000, 0, -3467)), 100000000, 0, -3466)), 100000000, 0, -3465)), 100000000, 0, -3464)), 100000000, 0, -3463)), 100000000, 0, -3462), (([(("lift", 7459)); ((0), 100000000, 0, -3560); ((("res")), 100000000, 0, -3146)]))), 100000000, 0, -3461)), [63], [2], 0, 0, (("ast/ast.ml", 6920, 262764, 262764), ("ast/ast.ml", 8400, 317679, 317684), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 6315)), [63], (("ast/ast.ml", 6920, 262764, 262764), ("ast/ast.ml", 8400, 317679, 317684), 0), 0, Tag1 ("Ppxlib_ast__Ast", 6315)), 1, 0); Tag1 (("lift", 7459), ([((("res")), 100000000, 0, -3146)], 1, 0, 1, ((Tag4 ((Tag5 ("arg_label", 1, (Tag10 ((Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -3460), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3459), 0), 100000000, 0, -3458), (Tag5 ("attribute", 1, (Tag10 ((Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -3457), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3456), 0), 100000000, 0, -3455), (Tag5 ("attributes", 1, (Tag10 ((Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -3454), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3453), 0), 100000000, 0, -3452), (Tag5 ("binding_op", 1, (Tag10 ((Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -3451), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3450), 0), 100000000, 0, -3449), (Tag5 ("bool", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3448), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3447), 0), 100000000, 0, -3446), (Tag5 ("case", 1, (Tag10 ((Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -3445), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3444), 0), 100000000, 0, -3443), (Tag5 ("cases", 1, (Tag10 ((Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -3442), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3441), 0), 100000000, 0, -3440), (Tag5 ("char", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -3439), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3438), 0), 100000000, 0, -3437), (Tag5 ("class_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -3436), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3435), 0), 100000000, 0, -3434), (Tag5 ("class_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -3433), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3432), 0), 100000000, 0, -3431), (Tag5 ("class_expr", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -3430), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3429), 0), 100000000, 0, -3428), (Tag5 ("class_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -3427), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3426), 0), 100000000, 0, -3425), (Tag5 ("class_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -3424), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3423), 0), 100000000, 0, -3422), (Tag5 ("class_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -3421), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3420), 0), 100000000, 0, -3419), (Tag5 ("class_field_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -3418), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3417), 0), 100000000, 0, -3416), (Tag5 ("class_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -3411), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3415), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -3411)], (0)), 100000000, 0, -3414), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3413), 0), 100000000, 0, -3412), [(Tag9 (("a")), 100000000, 0, -3411)]), 100000000, 0, -3410), (Tag5 ("class_signature", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -3409), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3408), 0), 100000000, 0, -3407), (Tag5 ("class_structure", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -3406), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3405), 0), 100000000, 0, -3404), (Tag5 ("class_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -3403), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3402), 0), 100000000, 0, -3401), (Tag5 ("class_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -3400), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3399), 0), 100000000, 0, -3398), (Tag5 ("class_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -3397), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3396), 0), 100000000, 0, -3395), (Tag5 ("class_type_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -3394), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3393), 0), 100000000, 0, -3392), (Tag5 ("class_type_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -3391), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3390), 0), 100000000, 0, -3389), (Tag5 ("closed_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -3388), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3387), 0), 100000000, 0, -3386), (Tag5 ("constant", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -3385), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3384), 0), 100000000, 0, -3383), (Tag5 ("constr", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3382), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("res")), 100000000, 0, -3146)], (0)), 100000000, 0, -3381), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3380), 0), 100000000, 0, -3379), 0), 100000000, 0, -3378), (Tag5 ("constructor_arguments", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -3377), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3376), 0), 100000000, 0, -3375), (Tag5 ("constructor_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -3374), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3373), 0), 100000000, 0, -3372), (Tag5 ("core_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -3371), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3370), 0), 100000000, 0, -3369), (Tag5 ("core_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -3368), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3367), 0), 100000000, 0, -3366), (Tag5 ("direction_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -3365), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3364), 0), 100000000, 0, -3363), (Tag5 ("directive_argument", 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -3362), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3361), 0), 100000000, 0, -3360), (Tag5 ("directive_argument_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -3359), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3358), 0), 100000000, 0, -3357), (Tag5 ("expression", 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -3356), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3355), 0), 100000000, 0, -3354), (Tag5 ("expression_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -3353), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3352), 0), 100000000, 0, -3351), (Tag5 ("extension", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -3350), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3349), 0), 100000000, 0, -3348), (Tag5 ("extension_constructor", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -3347), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3346), 0), 100000000, 0, -3345), (Tag5 ("extension_constructor_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -3344), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3343), 0), 100000000, 0, -3342), (Tag5 ("functor_parameter", 1, (Tag10 ((Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -3341), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3340), 0), 100000000, 0, -3339), (Tag5 ("include_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -3338), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3337), 0), 100000000, 0, -3336), (Tag5 ("include_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -3335), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3334), 0), 100000000, 0, -3333), (Tag5 ("include_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -3328), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3332), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -3328)], (0)), 100000000, 0, -3331), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3330), 0), 100000000, 0, -3329), [(Tag9 (("a")), 100000000, 0, -3328)]), 100000000, 0, -3327), (Tag5 ("injectivity", 1, (Tag10 ((Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -3326), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3325), 0), 100000000, 0, -3324), (Tag5 ("int", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3323), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3322), 0), 100000000, 0, -3321), (Tag5 ("label", 1, (Tag10 ((Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -3320), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3319), 0), 100000000, 0, -3318), (Tag5 ("label_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -3317), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3316), 0), 100000000, 0, -3315), (Tag5 ("letop", 1, (Tag10 ((Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -3314), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3313), 0), 100000000, 0, -3312), (Tag5 ("list", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -3307), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3311), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -3307)], (0)), 100000000, 0, -3310), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3309), 0), 100000000, 0, -3308), [(Tag9 (("a")), 100000000, 0, -3307)]), 100000000, 0, -3306), (Tag5 ("loc", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -3301), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3305), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -3301)], (0)), 100000000, 0, -3304), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3303), 0), 100000000, 0, -3302), [(Tag9 (("a")), 100000000, 0, -3301)]), 100000000, 0, -3300), (Tag5 ("location", 1, (Tag10 ((Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -3299), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3298), 0), 100000000, 0, -3297), (Tag5 ("location_stack", 1, (Tag10 ((Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -3296), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3295), 0), 100000000, 0, -3294), (Tag5 ("longident", 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -3293), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3292), 0), 100000000, 0, -3291), (Tag5 ("longident_loc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -3290), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3289), 0), 100000000, 0, -3288), (Tag5 ("module_binding", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -3287), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3286), 0), 100000000, 0, -3285), (Tag5 ("module_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -3284), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3283), 0), 100000000, 0, -3282), (Tag5 ("module_expr", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -3281), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3280), 0), 100000000, 0, -3279), (Tag5 ("module_expr_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -3278), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3277), 0), 100000000, 0, -3276), (Tag5 ("module_substitution", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -3275), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3274), 0), 100000000, 0, -3273), (Tag5 ("module_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -3272), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3271), 0), 100000000, 0, -3270), (Tag5 ("module_type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -3269), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3268), 0), 100000000, 0, -3267), (Tag5 ("module_type_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -3266), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3265), 0), 100000000, 0, -3264), (Tag5 ("mutable_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -3263), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3262), 0), 100000000, 0, -3261), (Tag5 ("object_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -3260), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3259), 0), 100000000, 0, -3258), (Tag5 ("object_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -3257), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3256), 0), 100000000, 0, -3255), (Tag5 ("open_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -3254), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3253), 0), 100000000, 0, -3252), (Tag5 ("open_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -3251), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3250), 0), 100000000, 0, -3249), (Tag5 ("open_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -3244), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3248), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -3244)], (0)), 100000000, 0, -3247), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3246), 0), 100000000, 0, -3245), [(Tag9 (("a")), 100000000, 0, -3244)]), 100000000, 0, -3243), (Tag5 ("option", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -3238), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3242), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -3238)], (0)), 100000000, 0, -3241), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3240), 0), 100000000, 0, -3239), [(Tag9 (("a")), 100000000, 0, -3238)]), 100000000, 0, -3237), (Tag5 ("override_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -3236), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3235), 0), 100000000, 0, -3234), (Tag5 ("package_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -3233), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3232), 0), 100000000, 0, -3231), (Tag5 ("pattern", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -3230), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3229), 0), 100000000, 0, -3228), (Tag5 ("pattern_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -3227), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3226), 0), 100000000, 0, -3225), (Tag5 ("payload", 1, (Tag10 ((Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -3224), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3223), 0), 100000000, 0, -3222), (Tag5 ("position", 1, (Tag10 ((Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -3221), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3220), 0), 100000000, 0, -3219), (Tag5 ("private_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -3218), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3217), 0), 100000000, 0, -3216), (Tag5 ("rec_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -3215), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3214), 0), 100000000, 0, -3213), (Tag5 ("record", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3212); ((("res")), 100000000, 0, -3146)]), 100000000, 0, -3211)], (0)), 100000000, 0, -3210), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3209), 0), 100000000, 0, -3208), (Tag5 ("row_field", 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -3207), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3206), 0), 100000000, 0, -3205), (Tag5 ("row_field_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -3204), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3203), 0), 100000000, 0, -3202), (Tag5 ("signature", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -3201), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3200), 0), 100000000, 0, -3199), (Tag5 ("signature_item", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -3198), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3197), 0), 100000000, 0, -3196), (Tag5 ("signature_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -3195), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3194), 0), 100000000, 0, -3193), (Tag5 ("string", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3192), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3191), 0), 100000000, 0, -3190), (Tag5 ("structure", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -3189), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3188), 0), 100000000, 0, -3187), (Tag5 ("structure_item", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -3186), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3185), 0), 100000000, 0, -3184), (Tag5 ("structure_item_desc", 1, (Tag10 ((Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -3183), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3182), 0), 100000000, 0, -3181), (Tag5 ("toplevel_directive", 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -3180), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3179), 0), 100000000, 0, -3178), (Tag5 ("toplevel_phrase", 1, (Tag10 ((Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -3177), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3176), 0), 100000000, 0, -3175), (Tag5 ("tuple", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("res")), 100000000, 0, -3146)], (0)), 100000000, 0, -3174), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3173), 0), 100000000, 0, -3172), (Tag5 ("type_declaration", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -3171), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3170), 0), 100000000, 0, -3169), (Tag5 ("type_exception", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -3168), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3167), 0), 100000000, 0, -3166), (Tag5 ("type_extension", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -3165), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3164), 0), 100000000, 0, -3163), (Tag5 ("type_kind", 1, (Tag10 ((Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -3162), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3161), 0), 100000000, 0, -3160), (Tag5 ("value_binding", 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -3159), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3158), 0), 100000000, 0, -3157), (Tag5 ("value_description", 1, (Tag10 ((Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -3156), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3155), 0), 100000000, 0, -3154), (Tag5 ("variance", 1, (Tag10 ((Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -3153), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3152), 0), 100000000, 0, -3151), (Tag5 ("virtual_flag", 1, (Tag10 ((Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -3150), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3149), 0), 100000000, 0, -3148), (Tag5 ("with_constraint", 1, (Tag10 ((Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -3147), ((("res")), 100000000, 0, -3146), 0), 100000000, 0, -3145), 0), 100000000, 0, -3144), (0, 100000000, 0, -3143)), 100000000, 0, -3142)), 100000000, 0, -3141)), 100000000, 0, -3140)), 100000000, 0, -3139)), 100000000, 0, -3138)), 100000000, 0, -3137)), 100000000, 0, -3136)), 100000000, 0, -3135)), 100000000, 0, -3134)), 100000000, 0, -3133)), 100000000, 0, -3132)), 100000000, 0, -3131)), 100000000, 0, -3130)), 100000000, 0, -3129)), 100000000, 0, -3128)), 100000000, 0, -3127)), 100000000, 0, -3126)), 100000000, 0, -3125)), 100000000, 0, -3124)), 100000000, 0, -3123)), 100000000, 0, -3122)), 100000000, 0, -3121)), 100000000, 0, -3120)), 100000000, 0, -3119)), 100000000, 0, -3118)), 100000000, 0, -3117)), 100000000, 0, -3116)), 100000000, 0, -3115)), 100000000, 0, -3114)), 100000000, 0, -3113)), 100000000, 0, -3112)), 100000000, 0, -3111)), 100000000, 0, -3110)), 100000000, 0, -3109)), 100000000, 0, -3108)), 100000000, 0, -3107)), 100000000, 0, -3106)), 100000000, 0, -3105)), 100000000, 0, -3104)), 100000000, 0, -3103)), 100000000, 0, -3102)), 100000000, 0, -3101)), 100000000, 0, -3100)), 100000000, 0, -3099)), 100000000, 0, -3098)), 100000000, 0, -3097)), 100000000, 0, -3096)), 100000000, 0, -3095)), 100000000, 0, -3094)), 100000000, 0, -3093)), 100000000, 0, -3092)), 100000000, 0, -3091)), 100000000, 0, -3090)), 100000000, 0, -3089)), 100000000, 0, -3088)), 100000000, 0, -3087)), 100000000, 0, -3086)), 100000000, 0, -3085)), 100000000, 0, -3084)), 100000000, 0, -3083)), 100000000, 0, -3082)), 100000000, 0, -3081)), 100000000, 0, -3080)), 100000000, 0, -3079)), 100000000, 0, -3078)), 100000000, 0, -3077)), 100000000, 0, -3076)), 100000000, 0, -3075)), 100000000, 0, -3074)), 100000000, 0, -3073)), 100000000, 0, -3072)), 100000000, 0, -3071)), 100000000, 0, -3070)), 100000000, 0, -3069)), 100000000, 0, -3068)), 100000000, 0, -3067)), 100000000, 0, -3066)), 100000000, 0, -3065)), 100000000, 0, -3064)), 100000000, 0, -3063)), 100000000, 0, -3062)), 100000000, 0, -3061)), 100000000, 0, -3060)), 100000000, 0, -3059)), 100000000, 0, -3058)), 100000000, 0, -3057)), 100000000, 0, -3056)), 100000000, 0, -3055)), 100000000, 0, -3054)), 100000000, 0, -3053)), 100000000, 0, -3052)), 100000000, 0, -3051)), 100000000, 0, -3050)), 100000000, 0, -3049)), 100000000, 0, -3048)), 100000000, 0, -3047)), 100000000, 0, -3046)), 100000000, 0, -3045), (0)), 100000000, 0, -3044)), [63], [2], 0, 0, (("ast/ast.ml", 6920, 262764, 262764), ("ast/ast.ml", 8400, 317679, 317684), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 6315)), 1, 0); Tag5 (("lift_map_with_context", 7460), ([((("ctx")), 100000000, 0, -1614); ((("res")), 100000000, 0, -1612)], Tag1 (((Tag4 ((Tag5 ("record", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1738); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1737)], (0)), 100000000, 0, -1736), ((("res")), 100000000, 0, -1612), 0), 100000000, 0, -1735), 0), 100000000, 0, -1734), 0), 100000000, 0, -1733), (Tag5 ("constr", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2073), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("res")), 100000000, 0, -1612)], (0)), 100000000, 0, -2072), ((("res")), 100000000, 0, -1612), 0), 100000000, 0, -2071), 0), 100000000, 0, -2070), 0), 100000000, 0, -2069), 0), 100000000, 0, -2068), (Tag5 ("tuple", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("res")), 100000000, 0, -1612)], (0)), 100000000, 0, -1666), ((("res")), 100000000, 0, -1612), 0), 100000000, 0, -1665), 0), 100000000, 0, -1664), 0), 100000000, 0, -1663), (Tag5 ("other", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -1788), ((("res")), 100000000, 0, -1612), 0), 100000000, 0, -1790), 0), 100000000, 0, -1789), [(Tag9 (("a")), 100000000, 0, -1788)]), 100000000, 0, -1787), (Tag5 ("bool", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2204), (Tag2 ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2203); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2202), 0), 100000000, 0, -2201), 0), 100000000, 0, -2200), 0), 100000000, 0, -2199), (Tag5 ("char", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -2186), (Tag2 ([(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -2185); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2184), 0), 100000000, 0, -2183), 0), 100000000, 0, -2182), 0), 100000000, 0, -2181), (Tag5 ("int", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1960), (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1959); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1958), 0), 100000000, 0, -1957), 0), 100000000, 0, -1956), 0), 100000000, 0, -1955), (Tag5 ("list", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -1927), (Tag2 ([(Tag9 (("a")), 100000000, 0, -1927); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1936), 0), 100000000, 0, -1935), 0), 100000000, 0, -1934), (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -1927)], (0)), 100000000, 0, -1933), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -1927)], (0)), 100000000, 0, -1932); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1931), 0), 100000000, 0, -1930), 0), 100000000, 0, -1929), 0), 100000000, 0, -1928), [(Tag9 (("a")), 100000000, 0, -1927)]), 100000000, 0, -1926), (Tag5 ("option", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -1792), (Tag2 ([(Tag9 (("a")), 100000000, 0, -1792); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1801), 0), 100000000, 0, -1800), 0), 100000000, 0, -1799), (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -1792)], (0)), 100000000, 0, -1798), (Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -1792)], (0)), 100000000, 0, -1797); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1796), 0), 100000000, 0, -1795), 0), 100000000, 0, -1794), 0), 100000000, 0, -1793), [(Tag9 (("a")), 100000000, 0, -1792)]), 100000000, 0, -1791), (Tag5 ("string", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1702), (Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1701); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1700), 0), 100000000, 0, -1699), 0), 100000000, 0, -1698), 0), 100000000, 0, -1697), (Tag5 ("position", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -1756), (Tag2 ([(Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -1755); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1754), 0), 100000000, 0, -1753), 0), 100000000, 0, -1752), 0), 100000000, 0, -1751), (Tag5 ("location", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -1914), (Tag2 ([(Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -1913); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1912), 0), 100000000, 0, -1911), 0), 100000000, 0, -1910), 0), 100000000, 0, -1909), (Tag5 ("location_stack", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -1908), (Tag2 ([(Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -1907); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1906), 0), 100000000, 0, -1905), 0), 100000000, 0, -1904), 0), 100000000, 0, -1903), (Tag5 ("loc", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -1916), (Tag2 ([(Tag9 (("a")), 100000000, 0, -1916); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1925), 0), 100000000, 0, -1924), 0), 100000000, 0, -1923), (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -1916)], (0)), 100000000, 0, -1922), (Tag2 ([(Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -1916)], (0)), 100000000, 0, -1921); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1920), 0), 100000000, 0, -1919), 0), 100000000, 0, -1918), 0), 100000000, 0, -1917), [(Tag9 (("a")), 100000000, 0, -1916)]), 100000000, 0, -1915), (Tag5 ("longident", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -1902), (Tag2 ([(Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -1901); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1900), 0), 100000000, 0, -1899), 0), 100000000, 0, -1898), 0), 100000000, 0, -1897), (Tag5 ("longident_loc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -1896), (Tag2 ([(Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -1895); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1894), 0), 100000000, 0, -1893), 0), 100000000, 0, -1892), 0), 100000000, 0, -1891), (Tag5 ("rec_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -1744), (Tag2 ([(Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -1743); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1742), 0), 100000000, 0, -1741), 0), 100000000, 0, -1740), 0), 100000000, 0, -1739), (Tag5 ("direction_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -2043), (Tag2 ([(Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -2042); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2041), 0), 100000000, 0, -2040), 0), 100000000, 0, -2039), 0), 100000000, 0, -2038), (Tag5 ("private_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -1750), (Tag2 ([(Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -1749); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1748), 0), 100000000, 0, -1747), 0), 100000000, 0, -1746), 0), 100000000, 0, -1745), (Tag5 ("mutable_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -1842), (Tag2 ([(Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -1841); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1840), 0), 100000000, 0, -1839), 0), 100000000, 0, -1838), 0), 100000000, 0, -1837), (Tag5 ("virtual_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -1620), (Tag2 ([(Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -1619); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1618), 0), 100000000, 0, -1617), 0), 100000000, 0, -1616), 0), 100000000, 0, -1615), (Tag5 ("override_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -1786), (Tag2 ([(Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -1785); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1784), 0), 100000000, 0, -1783), 0), 100000000, 0, -1782), 0), 100000000, 0, -1781), (Tag5 ("closed_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -2085), (Tag2 ([(Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -2084); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2083), 0), 100000000, 0, -2082), 0), 100000000, 0, -2081), 0), 100000000, 0, -2080), (Tag5 ("label", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -1954), (Tag2 ([(Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -1953); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1952), 0), 100000000, 0, -1951), 0), 100000000, 0, -1950), 0), 100000000, 0, -1949), (Tag5 ("arg_label", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -2228), (Tag2 ([(Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -2227); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2226), 0), 100000000, 0, -2225), 0), 100000000, 0, -2224), 0), 100000000, 0, -2223), (Tag5 ("variance", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -1626), (Tag2 ([(Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -1625); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1624), 0), 100000000, 0, -1623), 0), 100000000, 0, -1622), 0), 100000000, 0, -1621), (Tag5 ("injectivity", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -1966), (Tag2 ([(Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -1965); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1964), 0), 100000000, 0, -1963), 0), 100000000, 0, -1962), 0), 100000000, 0, -1961), (Tag5 ("constant", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -2079), (Tag2 ([(Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -2078); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2077), 0), 100000000, 0, -2076), 0), 100000000, 0, -2075), 0), 100000000, 0, -2074), (Tag5 ("attribute", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -2222), (Tag2 ([(Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -2221); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2220), 0), 100000000, 0, -2219), 0), 100000000, 0, -2218), 0), 100000000, 0, -2217), (Tag5 ("extension", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -2013), (Tag2 ([(Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -2012); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2011), 0), 100000000, 0, -2010), 0), 100000000, 0, -2009), 0), 100000000, 0, -2008), (Tag5 ("attributes", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -2216), (Tag2 ([(Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -2215); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2214), 0), 100000000, 0, -2213), 0), 100000000, 0, -2212), 0), 100000000, 0, -2211), (Tag5 ("payload", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -1762), (Tag2 ([(Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -1761); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1760), 0), 100000000, 0, -1759), 0), 100000000, 0, -1758), 0), 100000000, 0, -1757), (Tag5 ("core_type", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -2055), (Tag2 ([(Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -2054); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2053), 0), 100000000, 0, -2052), 0), 100000000, 0, -2051), 0), 100000000, 0, -2050), (Tag5 ("core_type_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -2049), (Tag2 ([(Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -2048); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2047), 0), 100000000, 0, -2046), 0), 100000000, 0, -2045), 0), 100000000, 0, -2044), (Tag5 ("package_type", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -1780), (Tag2 ([(Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -1779); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1778), 0), 100000000, 0, -1777), 0), 100000000, 0, -1776), 0), 100000000, 0, -1775), (Tag5 ("row_field", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -1732), (Tag2 ([(Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -1731); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1730), 0), 100000000, 0, -1729), 0), 100000000, 0, -1728), 0), 100000000, 0, -1727), (Tag5 ("row_field_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -1726), (Tag2 ([(Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -1725); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1724), 0), 100000000, 0, -1723), 0), 100000000, 0, -1722), 0), 100000000, 0, -1721), (Tag5 ("object_field", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -1836), (Tag2 ([(Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -1835); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1834), 0), 100000000, 0, -1833), 0), 100000000, 0, -1832), 0), 100000000, 0, -1831), (Tag5 ("object_field_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -1830), (Tag2 ([(Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -1829); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1828), 0), 100000000, 0, -1827), 0), 100000000, 0, -1826), 0), 100000000, 0, -1825), (Tag5 ("pattern", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -1774), (Tag2 ([(Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -1773); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1772), 0), 100000000, 0, -1771), 0), 100000000, 0, -1770), 0), 100000000, 0, -1769), (Tag5 ("pattern_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -1768), (Tag2 ([(Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -1767); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1766), 0), 100000000, 0, -1765), 0), 100000000, 0, -1764), 0), 100000000, 0, -1763), (Tag5 ("expression", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -2025), (Tag2 ([(Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -2024); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2023), 0), 100000000, 0, -2022), 0), 100000000, 0, -2021), 0), 100000000, 0, -2020), (Tag5 ("expression_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -2019), (Tag2 ([(Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -2018); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2017), 0), 100000000, 0, -2016), 0), 100000000, 0, -2015), 0), 100000000, 0, -2014), (Tag5 ("case", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -2198), (Tag2 ([(Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -2197); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2196), 0), 100000000, 0, -2195), 0), 100000000, 0, -2194), 0), 100000000, 0, -2193), (Tag5 ("letop", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -1942), (Tag2 ([(Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -1941); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1940), 0), 100000000, 0, -1939), 0), 100000000, 0, -1938), 0), 100000000, 0, -1937), (Tag5 ("binding_op", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -2210), (Tag2 ([(Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -2209); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2208), 0), 100000000, 0, -2207), 0), 100000000, 0, -2206), 0), 100000000, 0, -2205), (Tag5 ("value_description", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -1632), (Tag2 ([(Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -1631); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1630), 0), 100000000, 0, -1629), 0), 100000000, 0, -1628), 0), 100000000, 0, -1627), (Tag5 ("type_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -1662), (Tag2 ([(Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -1661); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1660), 0), 100000000, 0, -1659), 0), 100000000, 0, -1658), 0), 100000000, 0, -1657), (Tag5 ("type_kind", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -1644), (Tag2 ([(Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -1643); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1642), 0), 100000000, 0, -1641), 0), 100000000, 0, -1640), 0), 100000000, 0, -1639), (Tag5 ("label_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -1948), (Tag2 ([(Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -1947); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1946), 0), 100000000, 0, -1945), 0), 100000000, 0, -1944), 0), 100000000, 0, -1943), (Tag5 ("constructor_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -2061), (Tag2 ([(Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -2060); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2059), 0), 100000000, 0, -2058), 0), 100000000, 0, -2057), 0), 100000000, 0, -2056), (Tag5 ("constructor_arguments", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -2067), (Tag2 ([(Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -2066); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2065), 0), 100000000, 0, -2064), 0), 100000000, 0, -2063), 0), 100000000, 0, -2062), (Tag5 ("type_extension", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -1650), (Tag2 ([(Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -1649); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1648), 0), 100000000, 0, -1647), 0), 100000000, 0, -1646), 0), 100000000, 0, -1645), (Tag5 ("extension_constructor", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -2007), (Tag2 ([(Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -2006); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2005), 0), 100000000, 0, -2004), 0), 100000000, 0, -2003), 0), 100000000, 0, -2002), (Tag5 ("type_exception", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -1656), (Tag2 ([(Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -1655); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1654), 0), 100000000, 0, -1653), 0), 100000000, 0, -1652), 0), 100000000, 0, -1651), (Tag5 ("extension_constructor_kind", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -2001), (Tag2 ([(Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -2000); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1999), 0), 100000000, 0, -1998), 0), 100000000, 0, -1997), 0), 100000000, 0, -1996), (Tag5 ("class_type", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -2115), (Tag2 ([(Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -2114); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2113), 0), 100000000, 0, -2112), 0), 100000000, 0, -2111), 0), 100000000, 0, -2110), (Tag5 ("class_type_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -2103), (Tag2 ([(Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -2102); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2101), 0), 100000000, 0, -2100), 0), 100000000, 0, -2099), 0), 100000000, 0, -2098), (Tag5 ("class_signature", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -2127), (Tag2 ([(Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -2126); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2125), 0), 100000000, 0, -2124), 0), 100000000, 0, -2123), 0), 100000000, 0, -2122), (Tag5 ("class_type_field", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -2097), (Tag2 ([(Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -2096); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2095), 0), 100000000, 0, -2094), 0), 100000000, 0, -2093), 0), 100000000, 0, -2092), (Tag5 ("class_type_field_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -2091), (Tag2 ([(Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -2090); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2089), 0), 100000000, 0, -2088), 0), 100000000, 0, -2087), 0), 100000000, 0, -2086), (Tag5 ("class_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -2129), (Tag2 ([(Tag9 (("a")), 100000000, 0, -2129); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2138), 0), 100000000, 0, -2137), 0), 100000000, 0, -2136), (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -2129)], (0)), 100000000, 0, -2135), (Tag2 ([(Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -2129)], (0)), 100000000, 0, -2134); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2133), 0), 100000000, 0, -2132), 0), 100000000, 0, -2131), 0), 100000000, 0, -2130), [(Tag9 (("a")), 100000000, 0, -2129)]), 100000000, 0, -2128), (Tag5 ("class_description", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -2174), (Tag2 ([(Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -2173); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2172), 0), 100000000, 0, -2171), 0), 100000000, 0, -2170), 0), 100000000, 0, -2169), (Tag5 ("class_type_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -2109), (Tag2 ([(Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -2108); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2107), 0), 100000000, 0, -2106), 0), 100000000, 0, -2105), 0), 100000000, 0, -2104), (Tag5 ("class_expr", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -2168), (Tag2 ([(Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -2167); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2166), 0), 100000000, 0, -2165), 0), 100000000, 0, -2164), 0), 100000000, 0, -2163), (Tag5 ("class_expr_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -2162), (Tag2 ([(Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -2161); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2160), 0), 100000000, 0, -2159), 0), 100000000, 0, -2158), 0), 100000000, 0, -2157), (Tag5 ("class_structure", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -2121), (Tag2 ([(Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -2120); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2119), 0), 100000000, 0, -2118), 0), 100000000, 0, -2117), 0), 100000000, 0, -2116), (Tag5 ("class_field", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -2156), (Tag2 ([(Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -2155); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2154), 0), 100000000, 0, -2153), 0), 100000000, 0, -2152), 0), 100000000, 0, -2151), (Tag5 ("class_field_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -2150), (Tag2 ([(Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -2149); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2148), 0), 100000000, 0, -2147), 0), 100000000, 0, -2146), 0), 100000000, 0, -2145), (Tag5 ("class_field_kind", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -2144), (Tag2 ([(Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -2143); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2142), 0), 100000000, 0, -2141), 0), 100000000, 0, -2140), 0), 100000000, 0, -2139), (Tag5 ("class_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -2180), (Tag2 ([(Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -2179); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2178), 0), 100000000, 0, -2177), 0), 100000000, 0, -2176), 0), 100000000, 0, -2175), (Tag5 ("module_type", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -1860), (Tag2 ([(Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -1859); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1858), 0), 100000000, 0, -1857), 0), 100000000, 0, -1856), 0), 100000000, 0, -1855), (Tag5 ("module_type_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -1848), (Tag2 ([(Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -1847); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1846), 0), 100000000, 0, -1845), 0), 100000000, 0, -1844), 0), 100000000, 0, -1843), (Tag5 ("functor_parameter", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -1995), (Tag2 ([(Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -1994); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1993), 0), 100000000, 0, -1992), 0), 100000000, 0, -1991), 0), 100000000, 0, -1990), (Tag5 ("signature", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -1720), (Tag2 ([(Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -1719); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1718), 0), 100000000, 0, -1717), 0), 100000000, 0, -1716), 0), 100000000, 0, -1715), (Tag5 ("signature_item", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -1714), (Tag2 ([(Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -1713); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1712), 0), 100000000, 0, -1711), 0), 100000000, 0, -1710), 0), 100000000, 0, -1709), (Tag5 ("signature_item_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -1708), (Tag2 ([(Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -1707); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1706), 0), 100000000, 0, -1705), 0), 100000000, 0, -1704), 0), 100000000, 0, -1703), (Tag5 ("module_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -1884), (Tag2 ([(Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -1883); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1882), 0), 100000000, 0, -1881), 0), 100000000, 0, -1880), 0), 100000000, 0, -1879), (Tag5 ("module_substitution", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -1866), (Tag2 ([(Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -1865); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1864), 0), 100000000, 0, -1863), 0), 100000000, 0, -1862), 0), 100000000, 0, -1861), (Tag5 ("module_type_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -1854), (Tag2 ([(Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -1853); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1852), 0), 100000000, 0, -1851), 0), 100000000, 0, -1850), 0), 100000000, 0, -1849), (Tag5 ("open_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -1803), (Tag2 ([(Tag9 (("a")), 100000000, 0, -1803); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1812), 0), 100000000, 0, -1811), 0), 100000000, 0, -1810), (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -1803)], (0)), 100000000, 0, -1809), (Tag2 ([(Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -1803)], (0)), 100000000, 0, -1808); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1807), 0), 100000000, 0, -1806), 0), 100000000, 0, -1805), 0), 100000000, 0, -1804), [(Tag9 (("a")), 100000000, 0, -1803)]), 100000000, 0, -1802), (Tag5 ("open_description", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -1818), (Tag2 ([(Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -1817); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1816), 0), 100000000, 0, -1815), 0), 100000000, 0, -1814), 0), 100000000, 0, -1813), (Tag5 ("open_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -1824), (Tag2 ([(Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -1823); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1822), 0), 100000000, 0, -1821), 0), 100000000, 0, -1820), 0), 100000000, 0, -1819), (Tag5 ("include_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -1968), (Tag2 ([(Tag9 (("a")), 100000000, 0, -1968); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1977), 0), 100000000, 0, -1976), 0), 100000000, 0, -1975), (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -1968)], (0)), 100000000, 0, -1974), (Tag2 ([(Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -1968)], (0)), 100000000, 0, -1973); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1972), 0), 100000000, 0, -1971), 0), 100000000, 0, -1970), 0), 100000000, 0, -1969), [(Tag9 (("a")), 100000000, 0, -1968)]), 100000000, 0, -1967), (Tag5 ("include_description", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -1983), (Tag2 ([(Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -1982); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1981), 0), 100000000, 0, -1980), 0), 100000000, 0, -1979), 0), 100000000, 0, -1978), (Tag5 ("include_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -1989), (Tag2 ([(Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -1988); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1987), 0), 100000000, 0, -1986), 0), 100000000, 0, -1985), 0), 100000000, 0, -1984), (Tag5 ("with_constraint", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -1613), (Tag2 ([(Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -1611); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1610), 0), 100000000, 0, -1609), 0), 100000000, 0, -1608), 0), 100000000, 0, -1607), (Tag5 ("module_expr", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -1878), (Tag2 ([(Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -1877); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1876), 0), 100000000, 0, -1875), 0), 100000000, 0, -1874), 0), 100000000, 0, -1873), (Tag5 ("module_expr_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -1872), (Tag2 ([(Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -1871); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1870), 0), 100000000, 0, -1869), 0), 100000000, 0, -1868), 0), 100000000, 0, -1867), (Tag5 ("structure", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -1696), (Tag2 ([(Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -1695); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1694), 0), 100000000, 0, -1693), 0), 100000000, 0, -1692), 0), 100000000, 0, -1691), (Tag5 ("structure_item", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -1690), (Tag2 ([(Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -1689); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1688), 0), 100000000, 0, -1687), 0), 100000000, 0, -1686), 0), 100000000, 0, -1685), (Tag5 ("structure_item_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -1684), (Tag2 ([(Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -1683); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1682), 0), 100000000, 0, -1681), 0), 100000000, 0, -1680), 0), 100000000, 0, -1679), (Tag5 ("value_binding", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -1638), (Tag2 ([(Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -1637); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1636), 0), 100000000, 0, -1635), 0), 100000000, 0, -1634), 0), 100000000, 0, -1633), (Tag5 ("module_binding", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -1890), (Tag2 ([(Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -1889); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1888), 0), 100000000, 0, -1887), 0), 100000000, 0, -1886), 0), 100000000, 0, -1885), (Tag5 ("toplevel_phrase", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -1672), (Tag2 ([(Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -1671); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1670), 0), 100000000, 0, -1669), 0), 100000000, 0, -1668), 0), 100000000, 0, -1667), (Tag5 ("toplevel_directive", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -1678), (Tag2 ([(Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -1677); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1676), 0), 100000000, 0, -1675), 0), 100000000, 0, -1674), 0), 100000000, 0, -1673), (Tag5 ("directive_argument", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -2037), (Tag2 ([(Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -2036); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2035), 0), 100000000, 0, -2034), 0), 100000000, 0, -2033), 0), 100000000, 0, -2032), (Tag5 ("directive_argument_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -2031), (Tag2 ([(Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -2030); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2029), 0), 100000000, 0, -2028), 0), 100000000, 0, -2027), 0), 100000000, 0, -2026), (Tag5 ("cases", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -2192), (Tag2 ([(Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -2191); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2190), 0), 100000000, 0, -2189), 0), 100000000, 0, -2188), 0), 100000000, 0, -2187), ((0), 100000000, 0, -2943)), 100000000, 0, -3043)), 100000000, 0, -3042)), 100000000, 0, -3041)), 100000000, 0, -3040)), 100000000, 0, -3039)), 100000000, 0, -3038)), 100000000, 0, -3037)), 100000000, 0, -3036)), 100000000, 0, -3035)), 100000000, 0, -3034)), 100000000, 0, -3033)), 100000000, 0, -3032)), 100000000, 0, -3031)), 100000000, 0, -3030)), 100000000, 0, -3029)), 100000000, 0, -3028)), 100000000, 0, -3027)), 100000000, 0, -3026)), 100000000, 0, -3025)), 100000000, 0, -3024)), 100000000, 0, -3023)), 100000000, 0, -3022)), 100000000, 0, -3021)), 100000000, 0, -3020)), 100000000, 0, -3019)), 100000000, 0, -3018)), 100000000, 0, -3017)), 100000000, 0, -3016)), 100000000, 0, -3015)), 100000000, 0, -3014)), 100000000, 0, -3013)), 100000000, 0, -3012)), 100000000, 0, -3011)), 100000000, 0, -3010)), 100000000, 0, -3009)), 100000000, 0, -3008)), 100000000, 0, -3007)), 100000000, 0, -3006)), 100000000, 0, -3005)), 100000000, 0, -3004)), 100000000, 0, -3003)), 100000000, 0, -3002)), 100000000, 0, -3001)), 100000000, 0, -3000)), 100000000, 0, -2999)), 100000000, 0, -2998)), 100000000, 0, -2997)), 100000000, 0, -2996)), 100000000, 0, -2995)), 100000000, 0, -2994)), 100000000, 0, -2993)), 100000000, 0, -2992)), 100000000, 0, -2991)), 100000000, 0, -2990)), 100000000, 0, -2989)), 100000000, 0, -2988)), 100000000, 0, -2987)), 100000000, 0, -2986)), 100000000, 0, -2985)), 100000000, 0, -2984)), 100000000, 0, -2983)), 100000000, 0, -2982)), 100000000, 0, -2981)), 100000000, 0, -2980)), 100000000, 0, -2979)), 100000000, 0, -2978)), 100000000, 0, -2977)), 100000000, 0, -2976)), 100000000, 0, -2975)), 100000000, 0, -2974)), 100000000, 0, -2973)), 100000000, 0, -2972)), 100000000, 0, -2971)), 100000000, 0, -2970)), 100000000, 0, -2969)), 100000000, 0, -2968)), 100000000, 0, -2967)), 100000000, 0, -2966)), 100000000, 0, -2965)), 100000000, 0, -2964)), 100000000, 0, -2963)), 100000000, 0, -2962)), 100000000, 0, -2961)), 100000000, 0, -2960)), 100000000, 0, -2959)), 100000000, 0, -2958)), 100000000, 0, -2957)), 100000000, 0, -2956)), 100000000, 0, -2955)), 100000000, 0, -2954)), 100000000, 0, -2953)), 100000000, 0, -2952)), 100000000, 0, -2951)), 100000000, 0, -2950)), 100000000, 0, -2949)), 100000000, 0, -2948)), 100000000, 0, -2947)), 100000000, 0, -2946)), 100000000, 0, -2945), (([(("lift_map_with_context", 7462)); ((0), 100000000, 0, -2943); ((("ctx")), 100000000, 0, -1614); ((("res")), 100000000, 0, -1612)]))), 100000000, 0, -2944), ((0), 100000000, 0, -2943), 0, ((((((0, "arg_label", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -2335), (Tag2 ([(Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -2334); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2333), 0), 100000000, 0, -2332), 0), 100000000, 0, -2331), 0), 100000000, 0, -2330)), 0, 1), "attribute", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -2341), (Tag2 ([(Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -2340); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2339), 0), 100000000, 0, -2338), 0), 100000000, 0, -2337), 0), 100000000, 0, -2336)), (0, "attributes", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -2347), (Tag2 ([(Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -2346); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2345), 0), 100000000, 0, -2344), 0), 100000000, 0, -2343), 0), 100000000, 0, -2342)), (0, "binding_op", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -2353), (Tag2 ([(Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -2352); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2351), 0), 100000000, 0, -2350), 0), 100000000, 0, -2349), 0), 100000000, 0, -2348)), 0, 1), 2), 3), "bool", (0, 0, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2359), (Tag2 ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2358); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2357), 0), 100000000, 0, -2356), 0), 100000000, 0, -2355), 0), 100000000, 0, -2354)), ((0, "case", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -2365), (Tag2 ([(Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -2364); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2363), 0), 100000000, 0, -2362), 0), 100000000, 0, -2361), 0), 100000000, 0, -2360)), (0, "cases", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -2371), (Tag2 ([(Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -2370); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2369), 0), 100000000, 0, -2368), 0), 100000000, 0, -2367), 0), 100000000, 0, -2366)), 0, 1), 2), "char", (0, 0, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -2377), (Tag2 ([(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -2376); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2375), 0), 100000000, 0, -2374), 0), 100000000, 0, -2373), 0), 100000000, 0, -2372)), (0, "class_declaration", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -2383), (Tag2 ([(Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -2382); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2381), 0), 100000000, 0, -2380), 0), 100000000, 0, -2379), 0), 100000000, 0, -2378)), 0, 1), 3), 4), "class_description", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -2389), (Tag2 ([(Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -2388); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2387), 0), 100000000, 0, -2386), 0), 100000000, 0, -2385), 0), 100000000, 0, -2384)), ((((0, "class_expr", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -2395), (Tag2 ([(Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -2394); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2393), 0), 100000000, 0, -2392), 0), 100000000, 0, -2391), 0), 100000000, 0, -2390)), 0, 1), "class_expr_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -2401), (Tag2 ([(Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -2400); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2399), 0), 100000000, 0, -2398), 0), 100000000, 0, -2397), 0), 100000000, 0, -2396)), (0, "class_field", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -2407), (Tag2 ([(Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -2406); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2405), 0), 100000000, 0, -2404), 0), 100000000, 0, -2403), 0), 100000000, 0, -2402)), (0, "class_field_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -2413), (Tag2 ([(Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -2412); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2411), 0), 100000000, 0, -2410), 0), 100000000, 0, -2409), 0), 100000000, 0, -2408)), (0, "class_field_kind", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -2419), (Tag2 ([(Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -2418); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2417), 0), 100000000, 0, -2416), 0), 100000000, 0, -2415), 0), 100000000, 0, -2414)), 0, 1), 2), 3), 4), "class_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -2129), (Tag2 ([(Tag9 (("a")), 100000000, 0, -2129); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2429), 0), 100000000, 0, -2428), 0), 100000000, 0, -2427), (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -2129)], (0)), 100000000, 0, -2426), (Tag2 ([(Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -2129)], (0)), 100000000, 0, -2425); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2424), 0), 100000000, 0, -2423), 0), 100000000, 0, -2422), 0), 100000000, 0, -2421), [(Tag9 (("a")), 100000000, 0, -2129)]), 100000000, 0, -2420)), (0, "class_signature", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -2435), (Tag2 ([(Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -2434); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2433), 0), 100000000, 0, -2432), 0), 100000000, 0, -2431), 0), 100000000, 0, -2430)), (0, "class_structure", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -2441), (Tag2 ([(Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -2440); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2439), 0), 100000000, 0, -2438), 0), 100000000, 0, -2437), 0), 100000000, 0, -2436)), 0, 1), 2), 5), "class_type", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -2447), (Tag2 ([(Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -2446); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2445), 0), 100000000, 0, -2444), 0), 100000000, 0, -2443), 0), 100000000, 0, -2442)), (((0, "class_type_declaration", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -2453), (Tag2 ([(Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -2452); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2451), 0), 100000000, 0, -2450), 0), 100000000, 0, -2449), 0), 100000000, 0, -2448)), 0, 1), "class_type_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -2459), (Tag2 ([(Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -2458); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2457), 0), 100000000, 0, -2456), 0), 100000000, 0, -2455), 0), 100000000, 0, -2454)), (0, "class_type_field", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -2465), (Tag2 ([(Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -2464); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2463), 0), 100000000, 0, -2462), 0), 100000000, 0, -2461), 0), 100000000, 0, -2460)), (0, "class_type_field_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -2471), (Tag2 ([(Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -2470); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2469), 0), 100000000, 0, -2468), 0), 100000000, 0, -2467), 0), 100000000, 0, -2466)), 0, 1), 2), 3), "closed_flag", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -2477), (Tag2 ([(Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -2476); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2475), 0), 100000000, 0, -2474), 0), 100000000, 0, -2473), 0), 100000000, 0, -2472)), (0, "constant", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -2483), (Tag2 ([(Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -2482); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2481), 0), 100000000, 0, -2480), 0), 100000000, 0, -2479), 0), 100000000, 0, -2478)), 0, 1), 4), 6), 7), "constr", (0, 0, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2489), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("res")), 100000000, 0, -1612)], (0)), 100000000, 0, -2488), ((("res")), 100000000, 0, -1612), 0), 100000000, 0, -2487), 0), 100000000, 0, -2486), 0), 100000000, 0, -2485), 0), 100000000, 0, -2484)), (((((0, "constructor_arguments", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -2495), (Tag2 ([(Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -2494); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2493), 0), 100000000, 0, -2492), 0), 100000000, 0, -2491), 0), 100000000, 0, -2490)), 0, 1), "constructor_declaration", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -2501), (Tag2 ([(Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -2500); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2499), 0), 100000000, 0, -2498), 0), 100000000, 0, -2497), 0), 100000000, 0, -2496)), 0, 2), "core_type", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -2507), (Tag2 ([(Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -2506); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2505), 0), 100000000, 0, -2504), 0), 100000000, 0, -2503), 0), 100000000, 0, -2502)), (0, "core_type_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -2513), (Tag2 ([(Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -2512); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2511), 0), 100000000, 0, -2510), 0), 100000000, 0, -2509), 0), 100000000, 0, -2508)), 0, 1), 3), "direction_flag", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -2519), (Tag2 ([(Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -2518); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2517), 0), 100000000, 0, -2516), 0), 100000000, 0, -2515), 0), 100000000, 0, -2514)), (((0, "directive_argument", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -2525), (Tag2 ([(Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -2524); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2523), 0), 100000000, 0, -2522), 0), 100000000, 0, -2521), 0), 100000000, 0, -2520)), (0, "directive_argument_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -2531), (Tag2 ([(Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -2530); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2529), 0), 100000000, 0, -2528), 0), 100000000, 0, -2527), 0), 100000000, 0, -2526)), 0, 1), 2), "expression", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -2537), (Tag2 ([(Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -2536); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2535), 0), 100000000, 0, -2534), 0), 100000000, 0, -2533), 0), 100000000, 0, -2532)), (0, "expression_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -2543), (Tag2 ([(Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -2542); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2541), 0), 100000000, 0, -2540), 0), 100000000, 0, -2539), 0), 100000000, 0, -2538)), 0, 1), 3), "extension", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -2549), (Tag2 ([(Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -2548); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2547), 0), 100000000, 0, -2546), 0), 100000000, 0, -2545), 0), 100000000, 0, -2544)), ((0, "extension_constructor", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -2555), (Tag2 ([(Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -2554); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2553), 0), 100000000, 0, -2552), 0), 100000000, 0, -2551), 0), 100000000, 0, -2550)), 0, 1), "extension_constructor_kind", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -2561), (Tag2 ([(Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -2560); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2559), 0), 100000000, 0, -2558), 0), 100000000, 0, -2557), 0), 100000000, 0, -2556)), ((0, "functor_parameter", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -2567), (Tag2 ([(Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -2566); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2565), 0), 100000000, 0, -2564), 0), 100000000, 0, -2563), 0), 100000000, 0, -2562)), (0, "include_declaration", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -2573), (Tag2 ([(Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -2572); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2571), 0), 100000000, 0, -2570), 0), 100000000, 0, -2569), 0), 100000000, 0, -2568)), 0, 1), 2), "include_description", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -2579), (Tag2 ([(Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -2578); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2577), 0), 100000000, 0, -2576), 0), 100000000, 0, -2575), 0), 100000000, 0, -2574)), (0, "include_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -1968), (Tag2 ([(Tag9 (("a")), 100000000, 0, -1968); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2589), 0), 100000000, 0, -2588), 0), 100000000, 0, -2587), (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -1968)], (0)), 100000000, 0, -2586), (Tag2 ([(Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -1968)], (0)), 100000000, 0, -2585); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2584), 0), 100000000, 0, -2583), 0), 100000000, 0, -2582), 0), 100000000, 0, -2581), [(Tag9 (("a")), 100000000, 0, -1968)]), 100000000, 0, -2580)), 0, 1), 3), 4), 5), 6), "injectivity", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -2595), (Tag2 ([(Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -2594); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2593), 0), 100000000, 0, -2592), 0), 100000000, 0, -2591), 0), 100000000, 0, -2590)), (((0, "int", (0, 0, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2601), (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2600); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2599), 0), 100000000, 0, -2598), 0), 100000000, 0, -2597), 0), 100000000, 0, -2596)), 0, 1), "label", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -2607), (Tag2 ([(Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -2606); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2605), 0), 100000000, 0, -2604), 0), 100000000, 0, -2603), 0), 100000000, 0, -2602)), ((0, "label_declaration", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -2613), (Tag2 ([(Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -2612); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2611), 0), 100000000, 0, -2610), 0), 100000000, 0, -2609), 0), 100000000, 0, -2608)), 0, 1), "letop", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -2619), (Tag2 ([(Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -2618); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2617), 0), 100000000, 0, -2616), 0), 100000000, 0, -2615), 0), 100000000, 0, -2614)), 0, 2), 3), "list", (0, 0, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -1927), (Tag2 ([(Tag9 (("a")), 100000000, 0, -1927); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2629), 0), 100000000, 0, -2628), 0), 100000000, 0, -2627), (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -1927)], (0)), 100000000, 0, -2626), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -1927)], (0)), 100000000, 0, -2625); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2624), 0), 100000000, 0, -2623), 0), 100000000, 0, -2622), 0), 100000000, 0, -2621), [(Tag9 (("a")), 100000000, 0, -1927)]), 100000000, 0, -2620)), ((0, "loc", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -1916), (Tag2 ([(Tag9 (("a")), 100000000, 0, -1916); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2639), 0), 100000000, 0, -2638), 0), 100000000, 0, -2637), (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -1916)], (0)), 100000000, 0, -2636), (Tag2 ([(Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -1916)], (0)), 100000000, 0, -2635); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2634), 0), 100000000, 0, -2633), 0), 100000000, 0, -2632), 0), 100000000, 0, -2631), [(Tag9 (("a")), 100000000, 0, -1916)]), 100000000, 0, -2630)), 0, 1), "location", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -2645), (Tag2 ([(Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -2644); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2643), 0), 100000000, 0, -2642), 0), 100000000, 0, -2641), 0), 100000000, 0, -2640)), 0, 2), 4), 7), 8), "location_stack", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -2651), (Tag2 ([(Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -2650); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2649), 0), 100000000, 0, -2648), 0), 100000000, 0, -2647), 0), 100000000, 0, -2646)), (((((0, "longident", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -2657), (Tag2 ([(Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -2656); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2655), 0), 100000000, 0, -2654), 0), 100000000, 0, -2653), 0), 100000000, 0, -2652)), 0, 1), "longident_loc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -2663), (Tag2 ([(Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -2662); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2661), 0), 100000000, 0, -2660), 0), 100000000, 0, -2659), 0), 100000000, 0, -2658)), (0, "module_binding", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -2669), (Tag2 ([(Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -2668); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2667), 0), 100000000, 0, -2666), 0), 100000000, 0, -2665), 0), 100000000, 0, -2664)), 0, 1), 2), "module_declaration", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -2675), (Tag2 ([(Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -2674); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2673), 0), 100000000, 0, -2672), 0), 100000000, 0, -2671), 0), 100000000, 0, -2670)), (((0, "module_expr", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -2681), (Tag2 ([(Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -2680); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2679), 0), 100000000, 0, -2678), 0), 100000000, 0, -2677), 0), 100000000, 0, -2676)), (0, "module_expr_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -2687), (Tag2 ([(Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -2686); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2685), 0), 100000000, 0, -2684), 0), 100000000, 0, -2683), 0), 100000000, 0, -2682)), 0, 1), 2), "module_substitution", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -2693), (Tag2 ([(Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -2692); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2691), 0), 100000000, 0, -2690), 0), 100000000, 0, -2689), 0), 100000000, 0, -2688)), 0, 3), "module_type", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -2699), (Tag2 ([(Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -2698); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2697), 0), 100000000, 0, -2696), 0), 100000000, 0, -2695), 0), 100000000, 0, -2694)), ((0, "module_type_declaration", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -2705), (Tag2 ([(Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -2704); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2703), 0), 100000000, 0, -2702), 0), 100000000, 0, -2701), 0), 100000000, 0, -2700)), 0, 1), "module_type_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -2711), (Tag2 ([(Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -2710); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2709), 0), 100000000, 0, -2708), 0), 100000000, 0, -2707), 0), 100000000, 0, -2706)), 0, 2), 4), 5), "mutable_flag", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -2717), (Tag2 ([(Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -2716); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2715), 0), 100000000, 0, -2714), 0), 100000000, 0, -2713), 0), 100000000, 0, -2712)), ((0, "object_field", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -2723), (Tag2 ([(Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -2722); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2721), 0), 100000000, 0, -2720), 0), 100000000, 0, -2719), 0), 100000000, 0, -2718)), 0, 1), "object_field_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -2729), (Tag2 ([(Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -2728); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2727), 0), 100000000, 0, -2726), 0), 100000000, 0, -2725), 0), 100000000, 0, -2724)), (((0, "open_declaration", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -2735), (Tag2 ([(Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -2734); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2733), 0), 100000000, 0, -2732), 0), 100000000, 0, -2731), 0), 100000000, 0, -2730)), 0, 1), "open_description", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -2741), (Tag2 ([(Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -2740); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2739), 0), 100000000, 0, -2738), 0), 100000000, 0, -2737), 0), 100000000, 0, -2736)), 0, 2), "open_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -1803), (Tag2 ([(Tag9 (("a")), 100000000, 0, -1803); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2751), 0), 100000000, 0, -2750), 0), 100000000, 0, -2749), (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -1803)], (0)), 100000000, 0, -2748), (Tag2 ([(Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -1803)], (0)), 100000000, 0, -2747); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2746), 0), 100000000, 0, -2745), 0), 100000000, 0, -2744), 0), 100000000, 0, -2743), [(Tag9 (("a")), 100000000, 0, -1803)]), 100000000, 0, -2742)), (0, "option", (0, 0, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -1792), (Tag2 ([(Tag9 (("a")), 100000000, 0, -1792); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2761), 0), 100000000, 0, -2760), 0), 100000000, 0, -2759), (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -1792)], (0)), 100000000, 0, -2758), (Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -1792)], (0)), 100000000, 0, -2757); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2756), 0), 100000000, 0, -2755), 0), 100000000, 0, -2754), 0), 100000000, 0, -2753), [(Tag9 (("a")), 100000000, 0, -1792)]), 100000000, 0, -2752)), 0, 1), 3), 4), 6), "other", (0, 0, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -1788), ((("res")), 100000000, 0, -1612), 0), 100000000, 0, -2764), 0), 100000000, 0, -2763), [(Tag9 (("a")), 100000000, 0, -1788)]), 100000000, 0, -2762)), ((((0, "override_flag", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -2770), (Tag2 ([(Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -2769); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2768), 0), 100000000, 0, -2767), 0), 100000000, 0, -2766), 0), 100000000, 0, -2765)), 0, 1), "package_type", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -2776), (Tag2 ([(Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -2775); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2774), 0), 100000000, 0, -2773), 0), 100000000, 0, -2772), 0), 100000000, 0, -2771)), ((0, "pattern", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -2782), (Tag2 ([(Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -2781); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2780), 0), 100000000, 0, -2779), 0), 100000000, 0, -2778), 0), 100000000, 0, -2777)), (0, "pattern_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -2788), (Tag2 ([(Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -2787); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2786), 0), 100000000, 0, -2785), 0), 100000000, 0, -2784), 0), 100000000, 0, -2783)), 0, 1), 2), "payload", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -2794), (Tag2 ([(Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -2793); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2792), 0), 100000000, 0, -2791), 0), 100000000, 0, -2790), 0), 100000000, 0, -2789)), 0, 3), 4), "position", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -2800), (Tag2 ([(Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -2799); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2798), 0), 100000000, 0, -2797), 0), 100000000, 0, -2796), 0), 100000000, 0, -2795)), ((0, "private_flag", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -2806), (Tag2 ([(Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -2805); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2804), 0), 100000000, 0, -2803), 0), 100000000, 0, -2802), 0), 100000000, 0, -2801)), 0, 1), "rec_flag", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -2812), (Tag2 ([(Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -2811); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2810), 0), 100000000, 0, -2809), 0), 100000000, 0, -2808), 0), 100000000, 0, -2807)), 0, 2), 5), "record", (0, 0, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2818); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2817)], (0)), 100000000, 0, -2816), ((("res")), 100000000, 0, -1612), 0), 100000000, 0, -2815), 0), 100000000, 0, -2814), 0), 100000000, 0, -2813)), ((((0, "row_field", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -2824), (Tag2 ([(Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -2823); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2822), 0), 100000000, 0, -2821), 0), 100000000, 0, -2820), 0), 100000000, 0, -2819)), 0, 1), "row_field_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -2830), (Tag2 ([(Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -2829); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2828), 0), 100000000, 0, -2827), 0), 100000000, 0, -2826), 0), 100000000, 0, -2825)), (0, "signature", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -2836), (Tag2 ([(Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -2835); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2834), 0), 100000000, 0, -2833), 0), 100000000, 0, -2832), 0), 100000000, 0, -2831)), 0, 1), 2), "signature_item", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -2842), (Tag2 ([(Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -2841); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2840), 0), 100000000, 0, -2839), 0), 100000000, 0, -2838), 0), 100000000, 0, -2837)), (((0, "signature_item_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -2848), (Tag2 ([(Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -2847); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2846), 0), 100000000, 0, -2845), 0), 100000000, 0, -2844), 0), 100000000, 0, -2843)), 0, 1), "string", (0, 0, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2854), (Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2853); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2852), 0), 100000000, 0, -2851), 0), 100000000, 0, -2850), 0), 100000000, 0, -2849)), (0, "structure", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -2860), (Tag2 ([(Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -2859); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2858), 0), 100000000, 0, -2857), 0), 100000000, 0, -2856), 0), 100000000, 0, -2855)), 0, 1), 2), "structure_item", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -2866), (Tag2 ([(Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -2865); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2864), 0), 100000000, 0, -2863), 0), 100000000, 0, -2862), 0), 100000000, 0, -2861)), (0, "structure_item_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -2872), (Tag2 ([(Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -2871); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2870), 0), 100000000, 0, -2869), 0), 100000000, 0, -2868), 0), 100000000, 0, -2867)), ((0, "toplevel_directive", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -2878), (Tag2 ([(Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -2877); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2876), 0), 100000000, 0, -2875), 0), 100000000, 0, -2874), 0), 100000000, 0, -2873)), 0, 1), "toplevel_phrase", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -2884), (Tag2 ([(Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -2883); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2882), 0), 100000000, 0, -2881), 0), 100000000, 0, -2880), 0), 100000000, 0, -2879)), 0, 2), 3), 4), 5), "tuple", (0, 0, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("res")), 100000000, 0, -1612)], (0)), 100000000, 0, -2888), ((("res")), 100000000, 0, -1612), 0), 100000000, 0, -2887), 0), 100000000, 0, -2886), 0), 100000000, 0, -2885)), ((0, "type_declaration", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -2894), (Tag2 ([(Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -2893); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2892), 0), 100000000, 0, -2891), 0), 100000000, 0, -2890), 0), 100000000, 0, -2889)), ((0, "type_exception", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -2900), (Tag2 ([(Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -2899); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2898), 0), 100000000, 0, -2897), 0), 100000000, 0, -2896), 0), 100000000, 0, -2895)), 0, 1), "type_extension", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -2906), (Tag2 ([(Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -2905); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2904), 0), 100000000, 0, -2903), 0), 100000000, 0, -2902), 0), 100000000, 0, -2901)), 0, 2), 3), "type_kind", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -2912), (Tag2 ([(Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -2911); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2910), 0), 100000000, 0, -2909), 0), 100000000, 0, -2908), 0), 100000000, 0, -2907)), (((0, "value_binding", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -2918), (Tag2 ([(Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -2917); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2916), 0), 100000000, 0, -2915), 0), 100000000, 0, -2914), 0), 100000000, 0, -2913)), 0, 1), "value_description", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -2924), (Tag2 ([(Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -2923); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2922), 0), 100000000, 0, -2921), 0), 100000000, 0, -2920), 0), 100000000, 0, -2919)), 0, 2), "variance", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -2930), (Tag2 ([(Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -2929); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2928), 0), 100000000, 0, -2927), 0), 100000000, 0, -2926), 0), 100000000, 0, -2925)), (0, "virtual_flag", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -2936), (Tag2 ([(Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -2935); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2934), 0), 100000000, 0, -2933), 0), 100000000, 0, -2932), 0), 100000000, 0, -2931)), (0, "with_constraint", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -2942), (Tag2 ([(Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -2941); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2940), 0), 100000000, 0, -2939), 0), 100000000, 0, -2938), 0), 100000000, 0, -2937)), 0, 1), 2), 3), 4), 6), 7), 8), 9))), (("lift_map_with_context", 7462)), 0, [63; 63], (("ast/ast.ml", 8402, 317686, 317686), ("ast/ast.ml", 10382, 402632, 402637), 0), 0, Tag1 ("Ppxlib_ast__Ast", 7458)), 1, 0); Tag6 (("lift_map_with_context", 7461), ([((("ctx")), 100000000, 0, -1614); ((("res")), 100000000, 0, -1612)], Tag1 (((Tag4 ((Tag5 ("record", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1738); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1737)], (0)), 100000000, 0, -1736), ((("res")), 100000000, 0, -1612), 0), 100000000, 0, -1735), 0), 100000000, 0, -1734), 0), 100000000, 0, -1733), (Tag5 ("constr", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2073), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("res")), 100000000, 0, -1612)], (0)), 100000000, 0, -2072), ((("res")), 100000000, 0, -1612), 0), 100000000, 0, -2071), 0), 100000000, 0, -2070), 0), 100000000, 0, -2069), 0), 100000000, 0, -2068), (Tag5 ("tuple", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("res")), 100000000, 0, -1612)], (0)), 100000000, 0, -1666), ((("res")), 100000000, 0, -1612), 0), 100000000, 0, -1665), 0), 100000000, 0, -1664), 0), 100000000, 0, -1663), (Tag5 ("other", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -1788), ((("res")), 100000000, 0, -1612), 0), 100000000, 0, -1790), 0), 100000000, 0, -1789), [(Tag9 (("a")), 100000000, 0, -1788)]), 100000000, 0, -1787), (Tag5 ("bool", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2204), (Tag2 ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2203); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2202), 0), 100000000, 0, -2201), 0), 100000000, 0, -2200), 0), 100000000, 0, -2199), (Tag5 ("char", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -2186), (Tag2 ([(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -2185); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2184), 0), 100000000, 0, -2183), 0), 100000000, 0, -2182), 0), 100000000, 0, -2181), (Tag5 ("int", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1960), (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1959); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1958), 0), 100000000, 0, -1957), 0), 100000000, 0, -1956), 0), 100000000, 0, -1955), (Tag5 ("list", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -1927), (Tag2 ([(Tag9 (("a")), 100000000, 0, -1927); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1936), 0), 100000000, 0, -1935), 0), 100000000, 0, -1934), (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -1927)], (0)), 100000000, 0, -1933), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -1927)], (0)), 100000000, 0, -1932); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1931), 0), 100000000, 0, -1930), 0), 100000000, 0, -1929), 0), 100000000, 0, -1928), [(Tag9 (("a")), 100000000, 0, -1927)]), 100000000, 0, -1926), (Tag5 ("option", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -1792), (Tag2 ([(Tag9 (("a")), 100000000, 0, -1792); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1801), 0), 100000000, 0, -1800), 0), 100000000, 0, -1799), (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -1792)], (0)), 100000000, 0, -1798), (Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -1792)], (0)), 100000000, 0, -1797); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1796), 0), 100000000, 0, -1795), 0), 100000000, 0, -1794), 0), 100000000, 0, -1793), [(Tag9 (("a")), 100000000, 0, -1792)]), 100000000, 0, -1791), (Tag5 ("string", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1702), (Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1701); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1700), 0), 100000000, 0, -1699), 0), 100000000, 0, -1698), 0), 100000000, 0, -1697), (Tag5 ("position", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -1756), (Tag2 ([(Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -1755); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1754), 0), 100000000, 0, -1753), 0), 100000000, 0, -1752), 0), 100000000, 0, -1751), (Tag5 ("location", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -1914), (Tag2 ([(Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -1913); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1912), 0), 100000000, 0, -1911), 0), 100000000, 0, -1910), 0), 100000000, 0, -1909), (Tag5 ("location_stack", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -1908), (Tag2 ([(Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -1907); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1906), 0), 100000000, 0, -1905), 0), 100000000, 0, -1904), 0), 100000000, 0, -1903), (Tag5 ("loc", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -1916), (Tag2 ([(Tag9 (("a")), 100000000, 0, -1916); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1925), 0), 100000000, 0, -1924), 0), 100000000, 0, -1923), (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -1916)], (0)), 100000000, 0, -1922), (Tag2 ([(Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -1916)], (0)), 100000000, 0, -1921); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1920), 0), 100000000, 0, -1919), 0), 100000000, 0, -1918), 0), 100000000, 0, -1917), [(Tag9 (("a")), 100000000, 0, -1916)]), 100000000, 0, -1915), (Tag5 ("longident", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -1902), (Tag2 ([(Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -1901); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1900), 0), 100000000, 0, -1899), 0), 100000000, 0, -1898), 0), 100000000, 0, -1897), (Tag5 ("longident_loc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -1896), (Tag2 ([(Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -1895); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1894), 0), 100000000, 0, -1893), 0), 100000000, 0, -1892), 0), 100000000, 0, -1891), (Tag5 ("rec_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -1744), (Tag2 ([(Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -1743); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1742), 0), 100000000, 0, -1741), 0), 100000000, 0, -1740), 0), 100000000, 0, -1739), (Tag5 ("direction_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -2043), (Tag2 ([(Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -2042); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2041), 0), 100000000, 0, -2040), 0), 100000000, 0, -2039), 0), 100000000, 0, -2038), (Tag5 ("private_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -1750), (Tag2 ([(Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -1749); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1748), 0), 100000000, 0, -1747), 0), 100000000, 0, -1746), 0), 100000000, 0, -1745), (Tag5 ("mutable_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -1842), (Tag2 ([(Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -1841); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1840), 0), 100000000, 0, -1839), 0), 100000000, 0, -1838), 0), 100000000, 0, -1837), (Tag5 ("virtual_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -1620), (Tag2 ([(Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -1619); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1618), 0), 100000000, 0, -1617), 0), 100000000, 0, -1616), 0), 100000000, 0, -1615), (Tag5 ("override_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -1786), (Tag2 ([(Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -1785); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1784), 0), 100000000, 0, -1783), 0), 100000000, 0, -1782), 0), 100000000, 0, -1781), (Tag5 ("closed_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -2085), (Tag2 ([(Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -2084); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2083), 0), 100000000, 0, -2082), 0), 100000000, 0, -2081), 0), 100000000, 0, -2080), (Tag5 ("label", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -1954), (Tag2 ([(Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -1953); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1952), 0), 100000000, 0, -1951), 0), 100000000, 0, -1950), 0), 100000000, 0, -1949), (Tag5 ("arg_label", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -2228), (Tag2 ([(Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -2227); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2226), 0), 100000000, 0, -2225), 0), 100000000, 0, -2224), 0), 100000000, 0, -2223), (Tag5 ("variance", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -1626), (Tag2 ([(Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -1625); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1624), 0), 100000000, 0, -1623), 0), 100000000, 0, -1622), 0), 100000000, 0, -1621), (Tag5 ("injectivity", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -1966), (Tag2 ([(Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -1965); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1964), 0), 100000000, 0, -1963), 0), 100000000, 0, -1962), 0), 100000000, 0, -1961), (Tag5 ("constant", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -2079), (Tag2 ([(Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -2078); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2077), 0), 100000000, 0, -2076), 0), 100000000, 0, -2075), 0), 100000000, 0, -2074), (Tag5 ("attribute", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -2222), (Tag2 ([(Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -2221); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2220), 0), 100000000, 0, -2219), 0), 100000000, 0, -2218), 0), 100000000, 0, -2217), (Tag5 ("extension", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -2013), (Tag2 ([(Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -2012); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2011), 0), 100000000, 0, -2010), 0), 100000000, 0, -2009), 0), 100000000, 0, -2008), (Tag5 ("attributes", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -2216), (Tag2 ([(Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -2215); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2214), 0), 100000000, 0, -2213), 0), 100000000, 0, -2212), 0), 100000000, 0, -2211), (Tag5 ("payload", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -1762), (Tag2 ([(Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -1761); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1760), 0), 100000000, 0, -1759), 0), 100000000, 0, -1758), 0), 100000000, 0, -1757), (Tag5 ("core_type", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -2055), (Tag2 ([(Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -2054); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2053), 0), 100000000, 0, -2052), 0), 100000000, 0, -2051), 0), 100000000, 0, -2050), (Tag5 ("core_type_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -2049), (Tag2 ([(Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -2048); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2047), 0), 100000000, 0, -2046), 0), 100000000, 0, -2045), 0), 100000000, 0, -2044), (Tag5 ("package_type", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -1780), (Tag2 ([(Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -1779); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1778), 0), 100000000, 0, -1777), 0), 100000000, 0, -1776), 0), 100000000, 0, -1775), (Tag5 ("row_field", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -1732), (Tag2 ([(Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -1731); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1730), 0), 100000000, 0, -1729), 0), 100000000, 0, -1728), 0), 100000000, 0, -1727), (Tag5 ("row_field_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -1726), (Tag2 ([(Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -1725); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1724), 0), 100000000, 0, -1723), 0), 100000000, 0, -1722), 0), 100000000, 0, -1721), (Tag5 ("object_field", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -1836), (Tag2 ([(Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -1835); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1834), 0), 100000000, 0, -1833), 0), 100000000, 0, -1832), 0), 100000000, 0, -1831), (Tag5 ("object_field_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -1830), (Tag2 ([(Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -1829); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1828), 0), 100000000, 0, -1827), 0), 100000000, 0, -1826), 0), 100000000, 0, -1825), (Tag5 ("pattern", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -1774), (Tag2 ([(Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -1773); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1772), 0), 100000000, 0, -1771), 0), 100000000, 0, -1770), 0), 100000000, 0, -1769), (Tag5 ("pattern_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -1768), (Tag2 ([(Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -1767); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1766), 0), 100000000, 0, -1765), 0), 100000000, 0, -1764), 0), 100000000, 0, -1763), (Tag5 ("expression", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -2025), (Tag2 ([(Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -2024); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2023), 0), 100000000, 0, -2022), 0), 100000000, 0, -2021), 0), 100000000, 0, -2020), (Tag5 ("expression_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -2019), (Tag2 ([(Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -2018); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2017), 0), 100000000, 0, -2016), 0), 100000000, 0, -2015), 0), 100000000, 0, -2014), (Tag5 ("case", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -2198), (Tag2 ([(Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -2197); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2196), 0), 100000000, 0, -2195), 0), 100000000, 0, -2194), 0), 100000000, 0, -2193), (Tag5 ("letop", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -1942), (Tag2 ([(Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -1941); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1940), 0), 100000000, 0, -1939), 0), 100000000, 0, -1938), 0), 100000000, 0, -1937), (Tag5 ("binding_op", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -2210), (Tag2 ([(Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -2209); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2208), 0), 100000000, 0, -2207), 0), 100000000, 0, -2206), 0), 100000000, 0, -2205), (Tag5 ("value_description", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -1632), (Tag2 ([(Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -1631); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1630), 0), 100000000, 0, -1629), 0), 100000000, 0, -1628), 0), 100000000, 0, -1627), (Tag5 ("type_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -1662), (Tag2 ([(Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -1661); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1660), 0), 100000000, 0, -1659), 0), 100000000, 0, -1658), 0), 100000000, 0, -1657), (Tag5 ("type_kind", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -1644), (Tag2 ([(Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -1643); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1642), 0), 100000000, 0, -1641), 0), 100000000, 0, -1640), 0), 100000000, 0, -1639), (Tag5 ("label_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -1948), (Tag2 ([(Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -1947); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1946), 0), 100000000, 0, -1945), 0), 100000000, 0, -1944), 0), 100000000, 0, -1943), (Tag5 ("constructor_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -2061), (Tag2 ([(Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -2060); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2059), 0), 100000000, 0, -2058), 0), 100000000, 0, -2057), 0), 100000000, 0, -2056), (Tag5 ("constructor_arguments", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -2067), (Tag2 ([(Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -2066); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2065), 0), 100000000, 0, -2064), 0), 100000000, 0, -2063), 0), 100000000, 0, -2062), (Tag5 ("type_extension", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -1650), (Tag2 ([(Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -1649); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1648), 0), 100000000, 0, -1647), 0), 100000000, 0, -1646), 0), 100000000, 0, -1645), (Tag5 ("extension_constructor", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -2007), (Tag2 ([(Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -2006); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2005), 0), 100000000, 0, -2004), 0), 100000000, 0, -2003), 0), 100000000, 0, -2002), (Tag5 ("type_exception", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -1656), (Tag2 ([(Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -1655); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1654), 0), 100000000, 0, -1653), 0), 100000000, 0, -1652), 0), 100000000, 0, -1651), (Tag5 ("extension_constructor_kind", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -2001), (Tag2 ([(Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -2000); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1999), 0), 100000000, 0, -1998), 0), 100000000, 0, -1997), 0), 100000000, 0, -1996), (Tag5 ("class_type", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -2115), (Tag2 ([(Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -2114); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2113), 0), 100000000, 0, -2112), 0), 100000000, 0, -2111), 0), 100000000, 0, -2110), (Tag5 ("class_type_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -2103), (Tag2 ([(Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -2102); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2101), 0), 100000000, 0, -2100), 0), 100000000, 0, -2099), 0), 100000000, 0, -2098), (Tag5 ("class_signature", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -2127), (Tag2 ([(Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -2126); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2125), 0), 100000000, 0, -2124), 0), 100000000, 0, -2123), 0), 100000000, 0, -2122), (Tag5 ("class_type_field", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -2097), (Tag2 ([(Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -2096); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2095), 0), 100000000, 0, -2094), 0), 100000000, 0, -2093), 0), 100000000, 0, -2092), (Tag5 ("class_type_field_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -2091), (Tag2 ([(Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -2090); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2089), 0), 100000000, 0, -2088), 0), 100000000, 0, -2087), 0), 100000000, 0, -2086), (Tag5 ("class_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -2129), (Tag2 ([(Tag9 (("a")), 100000000, 0, -2129); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2138), 0), 100000000, 0, -2137), 0), 100000000, 0, -2136), (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -2129)], (0)), 100000000, 0, -2135), (Tag2 ([(Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -2129)], (0)), 100000000, 0, -2134); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2133), 0), 100000000, 0, -2132), 0), 100000000, 0, -2131), 0), 100000000, 0, -2130), [(Tag9 (("a")), 100000000, 0, -2129)]), 100000000, 0, -2128), (Tag5 ("class_description", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -2174), (Tag2 ([(Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -2173); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2172), 0), 100000000, 0, -2171), 0), 100000000, 0, -2170), 0), 100000000, 0, -2169), (Tag5 ("class_type_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -2109), (Tag2 ([(Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -2108); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2107), 0), 100000000, 0, -2106), 0), 100000000, 0, -2105), 0), 100000000, 0, -2104), (Tag5 ("class_expr", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -2168), (Tag2 ([(Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -2167); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2166), 0), 100000000, 0, -2165), 0), 100000000, 0, -2164), 0), 100000000, 0, -2163), (Tag5 ("class_expr_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -2162), (Tag2 ([(Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -2161); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2160), 0), 100000000, 0, -2159), 0), 100000000, 0, -2158), 0), 100000000, 0, -2157), (Tag5 ("class_structure", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -2121), (Tag2 ([(Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -2120); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2119), 0), 100000000, 0, -2118), 0), 100000000, 0, -2117), 0), 100000000, 0, -2116), (Tag5 ("class_field", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -2156), (Tag2 ([(Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -2155); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2154), 0), 100000000, 0, -2153), 0), 100000000, 0, -2152), 0), 100000000, 0, -2151), (Tag5 ("class_field_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -2150), (Tag2 ([(Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -2149); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2148), 0), 100000000, 0, -2147), 0), 100000000, 0, -2146), 0), 100000000, 0, -2145), (Tag5 ("class_field_kind", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -2144), (Tag2 ([(Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -2143); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2142), 0), 100000000, 0, -2141), 0), 100000000, 0, -2140), 0), 100000000, 0, -2139), (Tag5 ("class_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -2180), (Tag2 ([(Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -2179); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2178), 0), 100000000, 0, -2177), 0), 100000000, 0, -2176), 0), 100000000, 0, -2175), (Tag5 ("module_type", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -1860), (Tag2 ([(Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -1859); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1858), 0), 100000000, 0, -1857), 0), 100000000, 0, -1856), 0), 100000000, 0, -1855), (Tag5 ("module_type_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -1848), (Tag2 ([(Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -1847); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1846), 0), 100000000, 0, -1845), 0), 100000000, 0, -1844), 0), 100000000, 0, -1843), (Tag5 ("functor_parameter", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -1995), (Tag2 ([(Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -1994); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1993), 0), 100000000, 0, -1992), 0), 100000000, 0, -1991), 0), 100000000, 0, -1990), (Tag5 ("signature", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -1720), (Tag2 ([(Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -1719); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1718), 0), 100000000, 0, -1717), 0), 100000000, 0, -1716), 0), 100000000, 0, -1715), (Tag5 ("signature_item", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -1714), (Tag2 ([(Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -1713); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1712), 0), 100000000, 0, -1711), 0), 100000000, 0, -1710), 0), 100000000, 0, -1709), (Tag5 ("signature_item_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -1708), (Tag2 ([(Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -1707); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1706), 0), 100000000, 0, -1705), 0), 100000000, 0, -1704), 0), 100000000, 0, -1703), (Tag5 ("module_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -1884), (Tag2 ([(Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -1883); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1882), 0), 100000000, 0, -1881), 0), 100000000, 0, -1880), 0), 100000000, 0, -1879), (Tag5 ("module_substitution", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -1866), (Tag2 ([(Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -1865); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1864), 0), 100000000, 0, -1863), 0), 100000000, 0, -1862), 0), 100000000, 0, -1861), (Tag5 ("module_type_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -1854), (Tag2 ([(Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -1853); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1852), 0), 100000000, 0, -1851), 0), 100000000, 0, -1850), 0), 100000000, 0, -1849), (Tag5 ("open_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -1803), (Tag2 ([(Tag9 (("a")), 100000000, 0, -1803); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1812), 0), 100000000, 0, -1811), 0), 100000000, 0, -1810), (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -1803)], (0)), 100000000, 0, -1809), (Tag2 ([(Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -1803)], (0)), 100000000, 0, -1808); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1807), 0), 100000000, 0, -1806), 0), 100000000, 0, -1805), 0), 100000000, 0, -1804), [(Tag9 (("a")), 100000000, 0, -1803)]), 100000000, 0, -1802), (Tag5 ("open_description", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -1818), (Tag2 ([(Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -1817); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1816), 0), 100000000, 0, -1815), 0), 100000000, 0, -1814), 0), 100000000, 0, -1813), (Tag5 ("open_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -1824), (Tag2 ([(Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -1823); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1822), 0), 100000000, 0, -1821), 0), 100000000, 0, -1820), 0), 100000000, 0, -1819), (Tag5 ("include_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -1968), (Tag2 ([(Tag9 (("a")), 100000000, 0, -1968); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1977), 0), 100000000, 0, -1976), 0), 100000000, 0, -1975), (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -1968)], (0)), 100000000, 0, -1974), (Tag2 ([(Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -1968)], (0)), 100000000, 0, -1973); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1972), 0), 100000000, 0, -1971), 0), 100000000, 0, -1970), 0), 100000000, 0, -1969), [(Tag9 (("a")), 100000000, 0, -1968)]), 100000000, 0, -1967), (Tag5 ("include_description", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -1983), (Tag2 ([(Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -1982); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1981), 0), 100000000, 0, -1980), 0), 100000000, 0, -1979), 0), 100000000, 0, -1978), (Tag5 ("include_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -1989), (Tag2 ([(Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -1988); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1987), 0), 100000000, 0, -1986), 0), 100000000, 0, -1985), 0), 100000000, 0, -1984), (Tag5 ("with_constraint", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -1613), (Tag2 ([(Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -1611); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1610), 0), 100000000, 0, -1609), 0), 100000000, 0, -1608), 0), 100000000, 0, -1607), (Tag5 ("module_expr", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -1878), (Tag2 ([(Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -1877); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1876), 0), 100000000, 0, -1875), 0), 100000000, 0, -1874), 0), 100000000, 0, -1873), (Tag5 ("module_expr_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -1872), (Tag2 ([(Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -1871); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1870), 0), 100000000, 0, -1869), 0), 100000000, 0, -1868), 0), 100000000, 0, -1867), (Tag5 ("structure", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -1696), (Tag2 ([(Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -1695); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1694), 0), 100000000, 0, -1693), 0), 100000000, 0, -1692), 0), 100000000, 0, -1691), (Tag5 ("structure_item", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -1690), (Tag2 ([(Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -1689); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1688), 0), 100000000, 0, -1687), 0), 100000000, 0, -1686), 0), 100000000, 0, -1685), (Tag5 ("structure_item_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -1684), (Tag2 ([(Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -1683); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1682), 0), 100000000, 0, -1681), 0), 100000000, 0, -1680), 0), 100000000, 0, -1679), (Tag5 ("value_binding", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -1638), (Tag2 ([(Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -1637); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1636), 0), 100000000, 0, -1635), 0), 100000000, 0, -1634), 0), 100000000, 0, -1633), (Tag5 ("module_binding", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -1890), (Tag2 ([(Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -1889); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1888), 0), 100000000, 0, -1887), 0), 100000000, 0, -1886), 0), 100000000, 0, -1885), (Tag5 ("toplevel_phrase", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -1672), (Tag2 ([(Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -1671); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1670), 0), 100000000, 0, -1669), 0), 100000000, 0, -1668), 0), 100000000, 0, -1667), (Tag5 ("toplevel_directive", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -1678), (Tag2 ([(Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -1677); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1676), 0), 100000000, 0, -1675), 0), 100000000, 0, -1674), 0), 100000000, 0, -1673), (Tag5 ("directive_argument", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -2037), (Tag2 ([(Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -2036); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2035), 0), 100000000, 0, -2034), 0), 100000000, 0, -2033), 0), 100000000, 0, -2032), (Tag5 ("directive_argument_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -2031), (Tag2 ([(Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -2030); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2029), 0), 100000000, 0, -2028), 0), 100000000, 0, -2027), 0), 100000000, 0, -2026), (Tag5 ("cases", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -2192), (Tag2 ([(Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -2191); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2190), 0), 100000000, 0, -2189), 0), 100000000, 0, -2188), 0), 100000000, 0, -2187), ((0), 100000000, 0, -2943)), 100000000, 0, -3043)), 100000000, 0, -3042)), 100000000, 0, -3041)), 100000000, 0, -3040)), 100000000, 0, -3039)), 100000000, 0, -3038)), 100000000, 0, -3037)), 100000000, 0, -3036)), 100000000, 0, -3035)), 100000000, 0, -3034)), 100000000, 0, -3033)), 100000000, 0, -3032)), 100000000, 0, -3031)), 100000000, 0, -3030)), 100000000, 0, -3029)), 100000000, 0, -3028)), 100000000, 0, -3027)), 100000000, 0, -3026)), 100000000, 0, -3025)), 100000000, 0, -3024)), 100000000, 0, -3023)), 100000000, 0, -3022)), 100000000, 0, -3021)), 100000000, 0, -3020)), 100000000, 0, -3019)), 100000000, 0, -3018)), 100000000, 0, -3017)), 100000000, 0, -3016)), 100000000, 0, -3015)), 100000000, 0, -3014)), 100000000, 0, -3013)), 100000000, 0, -3012)), 100000000, 0, -3011)), 100000000, 0, -3010)), 100000000, 0, -3009)), 100000000, 0, -3008)), 100000000, 0, -3007)), 100000000, 0, -3006)), 100000000, 0, -3005)), 100000000, 0, -3004)), 100000000, 0, -3003)), 100000000, 0, -3002)), 100000000, 0, -3001)), 100000000, 0, -3000)), 100000000, 0, -2999)), 100000000, 0, -2998)), 100000000, 0, -2997)), 100000000, 0, -2996)), 100000000, 0, -2995)), 100000000, 0, -2994)), 100000000, 0, -2993)), 100000000, 0, -2992)), 100000000, 0, -2991)), 100000000, 0, -2990)), 100000000, 0, -2989)), 100000000, 0, -2988)), 100000000, 0, -2987)), 100000000, 0, -2986)), 100000000, 0, -2985)), 100000000, 0, -2984)), 100000000, 0, -2983)), 100000000, 0, -2982)), 100000000, 0, -2981)), 100000000, 0, -2980)), 100000000, 0, -2979)), 100000000, 0, -2978)), 100000000, 0, -2977)), 100000000, 0, -2976)), 100000000, 0, -2975)), 100000000, 0, -2974)), 100000000, 0, -2973)), 100000000, 0, -2972)), 100000000, 0, -2971)), 100000000, 0, -2970)), 100000000, 0, -2969)), 100000000, 0, -2968)), 100000000, 0, -2967)), 100000000, 0, -2966)), 100000000, 0, -2965)), 100000000, 0, -2964)), 100000000, 0, -2963)), 100000000, 0, -2962)), 100000000, 0, -2961)), 100000000, 0, -2960)), 100000000, 0, -2959)), 100000000, 0, -2958)), 100000000, 0, -2957)), 100000000, 0, -2956)), 100000000, 0, -2955)), 100000000, 0, -2954)), 100000000, 0, -2953)), 100000000, 0, -2952)), 100000000, 0, -2951)), 100000000, 0, -2950)), 100000000, 0, -2949)), 100000000, 0, -2948)), 100000000, 0, -2947)), 100000000, 0, -2946)), 100000000, 0, -2945), (([(("lift_map_with_context", 7462)); ((0), 100000000, 0, -2943); ((("ctx")), 100000000, 0, -1614); ((("res")), 100000000, 0, -1612)]))), 100000000, 0, -2944), ((0), 100000000, 0, -2943), 0, ((((((0, "arg_label", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -2335), (Tag2 ([(Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -2334); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2333), 0), 100000000, 0, -2332), 0), 100000000, 0, -2331), 0), 100000000, 0, -2330)), 0, 1), "attribute", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -2341), (Tag2 ([(Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -2340); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2339), 0), 100000000, 0, -2338), 0), 100000000, 0, -2337), 0), 100000000, 0, -2336)), (0, "attributes", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -2347), (Tag2 ([(Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -2346); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2345), 0), 100000000, 0, -2344), 0), 100000000, 0, -2343), 0), 100000000, 0, -2342)), (0, "binding_op", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -2353), (Tag2 ([(Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -2352); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2351), 0), 100000000, 0, -2350), 0), 100000000, 0, -2349), 0), 100000000, 0, -2348)), 0, 1), 2), 3), "bool", (0, 0, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2359), (Tag2 ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2358); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2357), 0), 100000000, 0, -2356), 0), 100000000, 0, -2355), 0), 100000000, 0, -2354)), ((0, "case", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -2365), (Tag2 ([(Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -2364); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2363), 0), 100000000, 0, -2362), 0), 100000000, 0, -2361), 0), 100000000, 0, -2360)), (0, "cases", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -2371), (Tag2 ([(Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -2370); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2369), 0), 100000000, 0, -2368), 0), 100000000, 0, -2367), 0), 100000000, 0, -2366)), 0, 1), 2), "char", (0, 0, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -2377), (Tag2 ([(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -2376); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2375), 0), 100000000, 0, -2374), 0), 100000000, 0, -2373), 0), 100000000, 0, -2372)), (0, "class_declaration", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -2383), (Tag2 ([(Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -2382); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2381), 0), 100000000, 0, -2380), 0), 100000000, 0, -2379), 0), 100000000, 0, -2378)), 0, 1), 3), 4), "class_description", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -2389), (Tag2 ([(Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -2388); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2387), 0), 100000000, 0, -2386), 0), 100000000, 0, -2385), 0), 100000000, 0, -2384)), ((((0, "class_expr", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -2395), (Tag2 ([(Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -2394); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2393), 0), 100000000, 0, -2392), 0), 100000000, 0, -2391), 0), 100000000, 0, -2390)), 0, 1), "class_expr_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -2401), (Tag2 ([(Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -2400); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2399), 0), 100000000, 0, -2398), 0), 100000000, 0, -2397), 0), 100000000, 0, -2396)), (0, "class_field", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -2407), (Tag2 ([(Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -2406); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2405), 0), 100000000, 0, -2404), 0), 100000000, 0, -2403), 0), 100000000, 0, -2402)), (0, "class_field_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -2413), (Tag2 ([(Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -2412); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2411), 0), 100000000, 0, -2410), 0), 100000000, 0, -2409), 0), 100000000, 0, -2408)), (0, "class_field_kind", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -2419), (Tag2 ([(Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -2418); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2417), 0), 100000000, 0, -2416), 0), 100000000, 0, -2415), 0), 100000000, 0, -2414)), 0, 1), 2), 3), 4), "class_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -2129), (Tag2 ([(Tag9 (("a")), 100000000, 0, -2129); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2429), 0), 100000000, 0, -2428), 0), 100000000, 0, -2427), (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -2129)], (0)), 100000000, 0, -2426), (Tag2 ([(Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -2129)], (0)), 100000000, 0, -2425); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2424), 0), 100000000, 0, -2423), 0), 100000000, 0, -2422), 0), 100000000, 0, -2421), [(Tag9 (("a")), 100000000, 0, -2129)]), 100000000, 0, -2420)), (0, "class_signature", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -2435), (Tag2 ([(Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -2434); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2433), 0), 100000000, 0, -2432), 0), 100000000, 0, -2431), 0), 100000000, 0, -2430)), (0, "class_structure", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -2441), (Tag2 ([(Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -2440); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2439), 0), 100000000, 0, -2438), 0), 100000000, 0, -2437), 0), 100000000, 0, -2436)), 0, 1), 2), 5), "class_type", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -2447), (Tag2 ([(Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -2446); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2445), 0), 100000000, 0, -2444), 0), 100000000, 0, -2443), 0), 100000000, 0, -2442)), (((0, "class_type_declaration", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -2453), (Tag2 ([(Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -2452); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2451), 0), 100000000, 0, -2450), 0), 100000000, 0, -2449), 0), 100000000, 0, -2448)), 0, 1), "class_type_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -2459), (Tag2 ([(Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -2458); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2457), 0), 100000000, 0, -2456), 0), 100000000, 0, -2455), 0), 100000000, 0, -2454)), (0, "class_type_field", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -2465), (Tag2 ([(Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -2464); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2463), 0), 100000000, 0, -2462), 0), 100000000, 0, -2461), 0), 100000000, 0, -2460)), (0, "class_type_field_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -2471), (Tag2 ([(Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -2470); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2469), 0), 100000000, 0, -2468), 0), 100000000, 0, -2467), 0), 100000000, 0, -2466)), 0, 1), 2), 3), "closed_flag", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -2477), (Tag2 ([(Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -2476); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2475), 0), 100000000, 0, -2474), 0), 100000000, 0, -2473), 0), 100000000, 0, -2472)), (0, "constant", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -2483), (Tag2 ([(Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -2482); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2481), 0), 100000000, 0, -2480), 0), 100000000, 0, -2479), 0), 100000000, 0, -2478)), 0, 1), 4), 6), 7), "constr", (0, 0, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2489), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("res")), 100000000, 0, -1612)], (0)), 100000000, 0, -2488), ((("res")), 100000000, 0, -1612), 0), 100000000, 0, -2487), 0), 100000000, 0, -2486), 0), 100000000, 0, -2485), 0), 100000000, 0, -2484)), (((((0, "constructor_arguments", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -2495), (Tag2 ([(Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -2494); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2493), 0), 100000000, 0, -2492), 0), 100000000, 0, -2491), 0), 100000000, 0, -2490)), 0, 1), "constructor_declaration", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -2501), (Tag2 ([(Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -2500); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2499), 0), 100000000, 0, -2498), 0), 100000000, 0, -2497), 0), 100000000, 0, -2496)), 0, 2), "core_type", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -2507), (Tag2 ([(Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -2506); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2505), 0), 100000000, 0, -2504), 0), 100000000, 0, -2503), 0), 100000000, 0, -2502)), (0, "core_type_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -2513), (Tag2 ([(Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -2512); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2511), 0), 100000000, 0, -2510), 0), 100000000, 0, -2509), 0), 100000000, 0, -2508)), 0, 1), 3), "direction_flag", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -2519), (Tag2 ([(Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -2518); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2517), 0), 100000000, 0, -2516), 0), 100000000, 0, -2515), 0), 100000000, 0, -2514)), (((0, "directive_argument", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -2525), (Tag2 ([(Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -2524); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2523), 0), 100000000, 0, -2522), 0), 100000000, 0, -2521), 0), 100000000, 0, -2520)), (0, "directive_argument_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -2531), (Tag2 ([(Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -2530); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2529), 0), 100000000, 0, -2528), 0), 100000000, 0, -2527), 0), 100000000, 0, -2526)), 0, 1), 2), "expression", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -2537), (Tag2 ([(Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -2536); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2535), 0), 100000000, 0, -2534), 0), 100000000, 0, -2533), 0), 100000000, 0, -2532)), (0, "expression_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -2543), (Tag2 ([(Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -2542); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2541), 0), 100000000, 0, -2540), 0), 100000000, 0, -2539), 0), 100000000, 0, -2538)), 0, 1), 3), "extension", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -2549), (Tag2 ([(Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -2548); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2547), 0), 100000000, 0, -2546), 0), 100000000, 0, -2545), 0), 100000000, 0, -2544)), ((0, "extension_constructor", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -2555), (Tag2 ([(Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -2554); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2553), 0), 100000000, 0, -2552), 0), 100000000, 0, -2551), 0), 100000000, 0, -2550)), 0, 1), "extension_constructor_kind", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -2561), (Tag2 ([(Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -2560); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2559), 0), 100000000, 0, -2558), 0), 100000000, 0, -2557), 0), 100000000, 0, -2556)), ((0, "functor_parameter", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -2567), (Tag2 ([(Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -2566); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2565), 0), 100000000, 0, -2564), 0), 100000000, 0, -2563), 0), 100000000, 0, -2562)), (0, "include_declaration", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -2573), (Tag2 ([(Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -2572); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2571), 0), 100000000, 0, -2570), 0), 100000000, 0, -2569), 0), 100000000, 0, -2568)), 0, 1), 2), "include_description", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -2579), (Tag2 ([(Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -2578); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2577), 0), 100000000, 0, -2576), 0), 100000000, 0, -2575), 0), 100000000, 0, -2574)), (0, "include_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -1968), (Tag2 ([(Tag9 (("a")), 100000000, 0, -1968); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2589), 0), 100000000, 0, -2588), 0), 100000000, 0, -2587), (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -1968)], (0)), 100000000, 0, -2586), (Tag2 ([(Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -1968)], (0)), 100000000, 0, -2585); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2584), 0), 100000000, 0, -2583), 0), 100000000, 0, -2582), 0), 100000000, 0, -2581), [(Tag9 (("a")), 100000000, 0, -1968)]), 100000000, 0, -2580)), 0, 1), 3), 4), 5), 6), "injectivity", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -2595), (Tag2 ([(Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -2594); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2593), 0), 100000000, 0, -2592), 0), 100000000, 0, -2591), 0), 100000000, 0, -2590)), (((0, "int", (0, 0, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2601), (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2600); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2599), 0), 100000000, 0, -2598), 0), 100000000, 0, -2597), 0), 100000000, 0, -2596)), 0, 1), "label", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -2607), (Tag2 ([(Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -2606); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2605), 0), 100000000, 0, -2604), 0), 100000000, 0, -2603), 0), 100000000, 0, -2602)), ((0, "label_declaration", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -2613), (Tag2 ([(Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -2612); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2611), 0), 100000000, 0, -2610), 0), 100000000, 0, -2609), 0), 100000000, 0, -2608)), 0, 1), "letop", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -2619), (Tag2 ([(Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -2618); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2617), 0), 100000000, 0, -2616), 0), 100000000, 0, -2615), 0), 100000000, 0, -2614)), 0, 2), 3), "list", (0, 0, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -1927), (Tag2 ([(Tag9 (("a")), 100000000, 0, -1927); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2629), 0), 100000000, 0, -2628), 0), 100000000, 0, -2627), (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -1927)], (0)), 100000000, 0, -2626), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -1927)], (0)), 100000000, 0, -2625); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2624), 0), 100000000, 0, -2623), 0), 100000000, 0, -2622), 0), 100000000, 0, -2621), [(Tag9 (("a")), 100000000, 0, -1927)]), 100000000, 0, -2620)), ((0, "loc", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -1916), (Tag2 ([(Tag9 (("a")), 100000000, 0, -1916); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2639), 0), 100000000, 0, -2638), 0), 100000000, 0, -2637), (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -1916)], (0)), 100000000, 0, -2636), (Tag2 ([(Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -1916)], (0)), 100000000, 0, -2635); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2634), 0), 100000000, 0, -2633), 0), 100000000, 0, -2632), 0), 100000000, 0, -2631), [(Tag9 (("a")), 100000000, 0, -1916)]), 100000000, 0, -2630)), 0, 1), "location", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -2645), (Tag2 ([(Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -2644); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2643), 0), 100000000, 0, -2642), 0), 100000000, 0, -2641), 0), 100000000, 0, -2640)), 0, 2), 4), 7), 8), "location_stack", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -2651), (Tag2 ([(Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -2650); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2649), 0), 100000000, 0, -2648), 0), 100000000, 0, -2647), 0), 100000000, 0, -2646)), (((((0, "longident", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -2657), (Tag2 ([(Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -2656); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2655), 0), 100000000, 0, -2654), 0), 100000000, 0, -2653), 0), 100000000, 0, -2652)), 0, 1), "longident_loc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -2663), (Tag2 ([(Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -2662); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2661), 0), 100000000, 0, -2660), 0), 100000000, 0, -2659), 0), 100000000, 0, -2658)), (0, "module_binding", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -2669), (Tag2 ([(Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -2668); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2667), 0), 100000000, 0, -2666), 0), 100000000, 0, -2665), 0), 100000000, 0, -2664)), 0, 1), 2), "module_declaration", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -2675), (Tag2 ([(Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -2674); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2673), 0), 100000000, 0, -2672), 0), 100000000, 0, -2671), 0), 100000000, 0, -2670)), (((0, "module_expr", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -2681), (Tag2 ([(Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -2680); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2679), 0), 100000000, 0, -2678), 0), 100000000, 0, -2677), 0), 100000000, 0, -2676)), (0, "module_expr_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -2687), (Tag2 ([(Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -2686); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2685), 0), 100000000, 0, -2684), 0), 100000000, 0, -2683), 0), 100000000, 0, -2682)), 0, 1), 2), "module_substitution", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -2693), (Tag2 ([(Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -2692); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2691), 0), 100000000, 0, -2690), 0), 100000000, 0, -2689), 0), 100000000, 0, -2688)), 0, 3), "module_type", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -2699), (Tag2 ([(Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -2698); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2697), 0), 100000000, 0, -2696), 0), 100000000, 0, -2695), 0), 100000000, 0, -2694)), ((0, "module_type_declaration", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -2705), (Tag2 ([(Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -2704); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2703), 0), 100000000, 0, -2702), 0), 100000000, 0, -2701), 0), 100000000, 0, -2700)), 0, 1), "module_type_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -2711), (Tag2 ([(Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -2710); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2709), 0), 100000000, 0, -2708), 0), 100000000, 0, -2707), 0), 100000000, 0, -2706)), 0, 2), 4), 5), "mutable_flag", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -2717), (Tag2 ([(Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -2716); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2715), 0), 100000000, 0, -2714), 0), 100000000, 0, -2713), 0), 100000000, 0, -2712)), ((0, "object_field", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -2723), (Tag2 ([(Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -2722); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2721), 0), 100000000, 0, -2720), 0), 100000000, 0, -2719), 0), 100000000, 0, -2718)), 0, 1), "object_field_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -2729), (Tag2 ([(Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -2728); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2727), 0), 100000000, 0, -2726), 0), 100000000, 0, -2725), 0), 100000000, 0, -2724)), (((0, "open_declaration", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -2735), (Tag2 ([(Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -2734); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2733), 0), 100000000, 0, -2732), 0), 100000000, 0, -2731), 0), 100000000, 0, -2730)), 0, 1), "open_description", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -2741), (Tag2 ([(Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -2740); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2739), 0), 100000000, 0, -2738), 0), 100000000, 0, -2737), 0), 100000000, 0, -2736)), 0, 2), "open_infos", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -1803), (Tag2 ([(Tag9 (("a")), 100000000, 0, -1803); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2751), 0), 100000000, 0, -2750), 0), 100000000, 0, -2749), (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -1803)], (0)), 100000000, 0, -2748), (Tag2 ([(Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -1803)], (0)), 100000000, 0, -2747); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2746), 0), 100000000, 0, -2745), 0), 100000000, 0, -2744), 0), 100000000, 0, -2743), [(Tag9 (("a")), 100000000, 0, -1803)]), 100000000, 0, -2742)), (0, "option", (0, 0, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -1792), (Tag2 ([(Tag9 (("a")), 100000000, 0, -1792); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2761), 0), 100000000, 0, -2760), 0), 100000000, 0, -2759), (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -1792)], (0)), 100000000, 0, -2758), (Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -1792)], (0)), 100000000, 0, -2757); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2756), 0), 100000000, 0, -2755), 0), 100000000, 0, -2754), 0), 100000000, 0, -2753), [(Tag9 (("a")), 100000000, 0, -1792)]), 100000000, 0, -2752)), 0, 1), 3), 4), 6), "other", (0, 0, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -1788), ((("res")), 100000000, 0, -1612), 0), 100000000, 0, -2764), 0), 100000000, 0, -2763), [(Tag9 (("a")), 100000000, 0, -1788)]), 100000000, 0, -2762)), ((((0, "override_flag", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -2770), (Tag2 ([(Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -2769); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2768), 0), 100000000, 0, -2767), 0), 100000000, 0, -2766), 0), 100000000, 0, -2765)), 0, 1), "package_type", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -2776), (Tag2 ([(Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -2775); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2774), 0), 100000000, 0, -2773), 0), 100000000, 0, -2772), 0), 100000000, 0, -2771)), ((0, "pattern", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -2782), (Tag2 ([(Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -2781); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2780), 0), 100000000, 0, -2779), 0), 100000000, 0, -2778), 0), 100000000, 0, -2777)), (0, "pattern_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -2788), (Tag2 ([(Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -2787); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2786), 0), 100000000, 0, -2785), 0), 100000000, 0, -2784), 0), 100000000, 0, -2783)), 0, 1), 2), "payload", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -2794), (Tag2 ([(Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -2793); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2792), 0), 100000000, 0, -2791), 0), 100000000, 0, -2790), 0), 100000000, 0, -2789)), 0, 3), 4), "position", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -2800), (Tag2 ([(Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -2799); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2798), 0), 100000000, 0, -2797), 0), 100000000, 0, -2796), 0), 100000000, 0, -2795)), ((0, "private_flag", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -2806), (Tag2 ([(Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -2805); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2804), 0), 100000000, 0, -2803), 0), 100000000, 0, -2802), 0), 100000000, 0, -2801)), 0, 1), "rec_flag", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -2812), (Tag2 ([(Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -2811); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2810), 0), 100000000, 0, -2809), 0), 100000000, 0, -2808), 0), 100000000, 0, -2807)), 0, 2), 5), "record", (0, 0, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2818); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2817)], (0)), 100000000, 0, -2816), ((("res")), 100000000, 0, -1612), 0), 100000000, 0, -2815), 0), 100000000, 0, -2814), 0), 100000000, 0, -2813)), ((((0, "row_field", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -2824), (Tag2 ([(Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -2823); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2822), 0), 100000000, 0, -2821), 0), 100000000, 0, -2820), 0), 100000000, 0, -2819)), 0, 1), "row_field_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -2830), (Tag2 ([(Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -2829); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2828), 0), 100000000, 0, -2827), 0), 100000000, 0, -2826), 0), 100000000, 0, -2825)), (0, "signature", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -2836), (Tag2 ([(Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -2835); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2834), 0), 100000000, 0, -2833), 0), 100000000, 0, -2832), 0), 100000000, 0, -2831)), 0, 1), 2), "signature_item", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -2842), (Tag2 ([(Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -2841); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2840), 0), 100000000, 0, -2839), 0), 100000000, 0, -2838), 0), 100000000, 0, -2837)), (((0, "signature_item_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -2848), (Tag2 ([(Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -2847); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2846), 0), 100000000, 0, -2845), 0), 100000000, 0, -2844), 0), 100000000, 0, -2843)), 0, 1), "string", (0, 0, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2854), (Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2853); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2852), 0), 100000000, 0, -2851), 0), 100000000, 0, -2850), 0), 100000000, 0, -2849)), (0, "structure", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -2860), (Tag2 ([(Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -2859); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2858), 0), 100000000, 0, -2857), 0), 100000000, 0, -2856), 0), 100000000, 0, -2855)), 0, 1), 2), "structure_item", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -2866), (Tag2 ([(Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -2865); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2864), 0), 100000000, 0, -2863), 0), 100000000, 0, -2862), 0), 100000000, 0, -2861)), (0, "structure_item_desc", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -2872), (Tag2 ([(Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -2871); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2870), 0), 100000000, 0, -2869), 0), 100000000, 0, -2868), 0), 100000000, 0, -2867)), ((0, "toplevel_directive", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -2878), (Tag2 ([(Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -2877); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2876), 0), 100000000, 0, -2875), 0), 100000000, 0, -2874), 0), 100000000, 0, -2873)), 0, 1), "toplevel_phrase", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -2884), (Tag2 ([(Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -2883); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2882), 0), 100000000, 0, -2881), 0), 100000000, 0, -2880), 0), 100000000, 0, -2879)), 0, 2), 3), 4), 5), "tuple", (0, 0, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("res")), 100000000, 0, -1612)], (0)), 100000000, 0, -2888), ((("res")), 100000000, 0, -1612), 0), 100000000, 0, -2887), 0), 100000000, 0, -2886), 0), 100000000, 0, -2885)), ((0, "type_declaration", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -2894), (Tag2 ([(Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -2893); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2892), 0), 100000000, 0, -2891), 0), 100000000, 0, -2890), 0), 100000000, 0, -2889)), ((0, "type_exception", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -2900), (Tag2 ([(Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -2899); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2898), 0), 100000000, 0, -2897), 0), 100000000, 0, -2896), 0), 100000000, 0, -2895)), 0, 1), "type_extension", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -2906), (Tag2 ([(Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -2905); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2904), 0), 100000000, 0, -2903), 0), 100000000, 0, -2902), 0), 100000000, 0, -2901)), 0, 2), 3), "type_kind", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -2912), (Tag2 ([(Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -2911); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2910), 0), 100000000, 0, -2909), 0), 100000000, 0, -2908), 0), 100000000, 0, -2907)), (((0, "value_binding", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -2918), (Tag2 ([(Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -2917); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2916), 0), 100000000, 0, -2915), 0), 100000000, 0, -2914), 0), 100000000, 0, -2913)), 0, 1), "value_description", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -2924), (Tag2 ([(Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -2923); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2922), 0), 100000000, 0, -2921), 0), 100000000, 0, -2920), 0), 100000000, 0, -2919)), 0, 2), "variance", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -2930), (Tag2 ([(Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -2929); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2928), 0), 100000000, 0, -2927), 0), 100000000, 0, -2926), 0), 100000000, 0, -2925)), (0, "virtual_flag", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -2936), (Tag2 ([(Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -2935); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2934), 0), 100000000, 0, -2933), 0), 100000000, 0, -2932), 0), 100000000, 0, -2931)), (0, "with_constraint", (0, 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -2942), (Tag2 ([(Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -2941); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2940), 0), 100000000, 0, -2939), 0), 100000000, 0, -2938), 0), 100000000, 0, -2937)), 0, 1), 2), 3), 4), 6), 7), 8), 9))), (("lift_map_with_context", 7462)), ([((("ctx")), 100000000, 0, -1614); ((("res")), 100000000, 0, -1612)], 2, 0, 1, ((Tag4 ((Tag5 ("record", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1738); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1737)], (0)), 100000000, 0, -1736), ((("res")), 100000000, 0, -1612), 0), 100000000, 0, -1735), 0), 100000000, 0, -1734), 0), 100000000, 0, -1733), (Tag5 ("constr", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2073), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("res")), 100000000, 0, -1612)], (0)), 100000000, 0, -2072), ((("res")), 100000000, 0, -1612), 0), 100000000, 0, -2071), 0), 100000000, 0, -2070), 0), 100000000, 0, -2069), 0), 100000000, 0, -2068), (Tag5 ("tuple", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("res")), 100000000, 0, -1612)], (0)), 100000000, 0, -1666), ((("res")), 100000000, 0, -1612), 0), 100000000, 0, -1665), 0), 100000000, 0, -1664), 0), 100000000, 0, -1663), (Tag5 ("other", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -1788), ((("res")), 100000000, 0, -1612), 0), 100000000, 0, -1790), 0), 100000000, 0, -1789), [(Tag9 (("a")), 100000000, 0, -1788)]), 100000000, 0, -1787), (Tag5 ("bool", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2204), (Tag2 ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2203); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2202), 0), 100000000, 0, -2201), 0), 100000000, 0, -2200), 0), 100000000, 0, -2199), (Tag5 ("char", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -2186), (Tag2 ([(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -2185); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2184), 0), 100000000, 0, -2183), 0), 100000000, 0, -2182), 0), 100000000, 0, -2181), (Tag5 ("int", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1960), (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1959); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1958), 0), 100000000, 0, -1957), 0), 100000000, 0, -1956), 0), 100000000, 0, -1955), (Tag5 ("list", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -1927), (Tag2 ([(Tag9 (("a")), 100000000, 0, -1927); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1936), 0), 100000000, 0, -1935), 0), 100000000, 0, -1934), (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -1927)], (0)), 100000000, 0, -1933), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -1927)], (0)), 100000000, 0, -1932); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1931), 0), 100000000, 0, -1930), 0), 100000000, 0, -1929), 0), 100000000, 0, -1928), [(Tag9 (("a")), 100000000, 0, -1927)]), 100000000, 0, -1926), (Tag5 ("option", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -1792), (Tag2 ([(Tag9 (("a")), 100000000, 0, -1792); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1801), 0), 100000000, 0, -1800), 0), 100000000, 0, -1799), (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -1792)], (0)), 100000000, 0, -1798), (Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -1792)], (0)), 100000000, 0, -1797); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1796), 0), 100000000, 0, -1795), 0), 100000000, 0, -1794), 0), 100000000, 0, -1793), [(Tag9 (("a")), 100000000, 0, -1792)]), 100000000, 0, -1791), (Tag5 ("string", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1702), (Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1701); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1700), 0), 100000000, 0, -1699), 0), 100000000, 0, -1698), 0), 100000000, 0, -1697), (Tag5 ("position", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -1756), (Tag2 ([(Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -1755); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1754), 0), 100000000, 0, -1753), 0), 100000000, 0, -1752), 0), 100000000, 0, -1751), (Tag5 ("location", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -1914), (Tag2 ([(Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -1913); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1912), 0), 100000000, 0, -1911), 0), 100000000, 0, -1910), 0), 100000000, 0, -1909), (Tag5 ("location_stack", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -1908), (Tag2 ([(Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -1907); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1906), 0), 100000000, 0, -1905), 0), 100000000, 0, -1904), 0), 100000000, 0, -1903), (Tag5 ("loc", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -1916), (Tag2 ([(Tag9 (("a")), 100000000, 0, -1916); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1925), 0), 100000000, 0, -1924), 0), 100000000, 0, -1923), (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -1916)], (0)), 100000000, 0, -1922), (Tag2 ([(Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -1916)], (0)), 100000000, 0, -1921); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1920), 0), 100000000, 0, -1919), 0), 100000000, 0, -1918), 0), 100000000, 0, -1917), [(Tag9 (("a")), 100000000, 0, -1916)]), 100000000, 0, -1915), (Tag5 ("longident", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -1902), (Tag2 ([(Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -1901); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1900), 0), 100000000, 0, -1899), 0), 100000000, 0, -1898), 0), 100000000, 0, -1897), (Tag5 ("longident_loc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -1896), (Tag2 ([(Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -1895); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1894), 0), 100000000, 0, -1893), 0), 100000000, 0, -1892), 0), 100000000, 0, -1891), (Tag5 ("rec_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -1744), (Tag2 ([(Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -1743); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1742), 0), 100000000, 0, -1741), 0), 100000000, 0, -1740), 0), 100000000, 0, -1739), (Tag5 ("direction_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -2043), (Tag2 ([(Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -2042); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2041), 0), 100000000, 0, -2040), 0), 100000000, 0, -2039), 0), 100000000, 0, -2038), (Tag5 ("private_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -1750), (Tag2 ([(Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -1749); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1748), 0), 100000000, 0, -1747), 0), 100000000, 0, -1746), 0), 100000000, 0, -1745), (Tag5 ("mutable_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -1842), (Tag2 ([(Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -1841); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1840), 0), 100000000, 0, -1839), 0), 100000000, 0, -1838), 0), 100000000, 0, -1837), (Tag5 ("virtual_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -1620), (Tag2 ([(Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -1619); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1618), 0), 100000000, 0, -1617), 0), 100000000, 0, -1616), 0), 100000000, 0, -1615), (Tag5 ("override_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -1786), (Tag2 ([(Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -1785); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1784), 0), 100000000, 0, -1783), 0), 100000000, 0, -1782), 0), 100000000, 0, -1781), (Tag5 ("closed_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -2085), (Tag2 ([(Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -2084); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2083), 0), 100000000, 0, -2082), 0), 100000000, 0, -2081), 0), 100000000, 0, -2080), (Tag5 ("label", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -1954), (Tag2 ([(Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -1953); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1952), 0), 100000000, 0, -1951), 0), 100000000, 0, -1950), 0), 100000000, 0, -1949), (Tag5 ("arg_label", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -2228), (Tag2 ([(Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -2227); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2226), 0), 100000000, 0, -2225), 0), 100000000, 0, -2224), 0), 100000000, 0, -2223), (Tag5 ("variance", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -1626), (Tag2 ([(Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -1625); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1624), 0), 100000000, 0, -1623), 0), 100000000, 0, -1622), 0), 100000000, 0, -1621), (Tag5 ("injectivity", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -1966), (Tag2 ([(Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -1965); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1964), 0), 100000000, 0, -1963), 0), 100000000, 0, -1962), 0), 100000000, 0, -1961), (Tag5 ("constant", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -2079), (Tag2 ([(Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -2078); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2077), 0), 100000000, 0, -2076), 0), 100000000, 0, -2075), 0), 100000000, 0, -2074), (Tag5 ("attribute", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -2222), (Tag2 ([(Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -2221); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2220), 0), 100000000, 0, -2219), 0), 100000000, 0, -2218), 0), 100000000, 0, -2217), (Tag5 ("extension", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -2013), (Tag2 ([(Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -2012); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2011), 0), 100000000, 0, -2010), 0), 100000000, 0, -2009), 0), 100000000, 0, -2008), (Tag5 ("attributes", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -2216), (Tag2 ([(Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -2215); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2214), 0), 100000000, 0, -2213), 0), 100000000, 0, -2212), 0), 100000000, 0, -2211), (Tag5 ("payload", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -1762), (Tag2 ([(Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -1761); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1760), 0), 100000000, 0, -1759), 0), 100000000, 0, -1758), 0), 100000000, 0, -1757), (Tag5 ("core_type", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -2055), (Tag2 ([(Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -2054); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2053), 0), 100000000, 0, -2052), 0), 100000000, 0, -2051), 0), 100000000, 0, -2050), (Tag5 ("core_type_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -2049), (Tag2 ([(Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -2048); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2047), 0), 100000000, 0, -2046), 0), 100000000, 0, -2045), 0), 100000000, 0, -2044), (Tag5 ("package_type", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -1780), (Tag2 ([(Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -1779); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1778), 0), 100000000, 0, -1777), 0), 100000000, 0, -1776), 0), 100000000, 0, -1775), (Tag5 ("row_field", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -1732), (Tag2 ([(Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -1731); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1730), 0), 100000000, 0, -1729), 0), 100000000, 0, -1728), 0), 100000000, 0, -1727), (Tag5 ("row_field_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -1726), (Tag2 ([(Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -1725); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1724), 0), 100000000, 0, -1723), 0), 100000000, 0, -1722), 0), 100000000, 0, -1721), (Tag5 ("object_field", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -1836), (Tag2 ([(Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -1835); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1834), 0), 100000000, 0, -1833), 0), 100000000, 0, -1832), 0), 100000000, 0, -1831), (Tag5 ("object_field_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -1830), (Tag2 ([(Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -1829); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1828), 0), 100000000, 0, -1827), 0), 100000000, 0, -1826), 0), 100000000, 0, -1825), (Tag5 ("pattern", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -1774), (Tag2 ([(Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -1773); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1772), 0), 100000000, 0, -1771), 0), 100000000, 0, -1770), 0), 100000000, 0, -1769), (Tag5 ("pattern_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -1768), (Tag2 ([(Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -1767); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1766), 0), 100000000, 0, -1765), 0), 100000000, 0, -1764), 0), 100000000, 0, -1763), (Tag5 ("expression", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -2025), (Tag2 ([(Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -2024); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2023), 0), 100000000, 0, -2022), 0), 100000000, 0, -2021), 0), 100000000, 0, -2020), (Tag5 ("expression_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -2019), (Tag2 ([(Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -2018); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2017), 0), 100000000, 0, -2016), 0), 100000000, 0, -2015), 0), 100000000, 0, -2014), (Tag5 ("case", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -2198), (Tag2 ([(Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -2197); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2196), 0), 100000000, 0, -2195), 0), 100000000, 0, -2194), 0), 100000000, 0, -2193), (Tag5 ("letop", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -1942), (Tag2 ([(Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -1941); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1940), 0), 100000000, 0, -1939), 0), 100000000, 0, -1938), 0), 100000000, 0, -1937), (Tag5 ("binding_op", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -2210), (Tag2 ([(Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -2209); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2208), 0), 100000000, 0, -2207), 0), 100000000, 0, -2206), 0), 100000000, 0, -2205), (Tag5 ("value_description", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -1632), (Tag2 ([(Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -1631); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1630), 0), 100000000, 0, -1629), 0), 100000000, 0, -1628), 0), 100000000, 0, -1627), (Tag5 ("type_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -1662), (Tag2 ([(Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -1661); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1660), 0), 100000000, 0, -1659), 0), 100000000, 0, -1658), 0), 100000000, 0, -1657), (Tag5 ("type_kind", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -1644), (Tag2 ([(Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -1643); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1642), 0), 100000000, 0, -1641), 0), 100000000, 0, -1640), 0), 100000000, 0, -1639), (Tag5 ("label_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -1948), (Tag2 ([(Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -1947); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1946), 0), 100000000, 0, -1945), 0), 100000000, 0, -1944), 0), 100000000, 0, -1943), (Tag5 ("constructor_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -2061), (Tag2 ([(Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -2060); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2059), 0), 100000000, 0, -2058), 0), 100000000, 0, -2057), 0), 100000000, 0, -2056), (Tag5 ("constructor_arguments", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -2067), (Tag2 ([(Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -2066); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2065), 0), 100000000, 0, -2064), 0), 100000000, 0, -2063), 0), 100000000, 0, -2062), (Tag5 ("type_extension", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -1650), (Tag2 ([(Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -1649); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1648), 0), 100000000, 0, -1647), 0), 100000000, 0, -1646), 0), 100000000, 0, -1645), (Tag5 ("extension_constructor", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -2007), (Tag2 ([(Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -2006); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2005), 0), 100000000, 0, -2004), 0), 100000000, 0, -2003), 0), 100000000, 0, -2002), (Tag5 ("type_exception", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -1656), (Tag2 ([(Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -1655); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1654), 0), 100000000, 0, -1653), 0), 100000000, 0, -1652), 0), 100000000, 0, -1651), (Tag5 ("extension_constructor_kind", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -2001), (Tag2 ([(Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -2000); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1999), 0), 100000000, 0, -1998), 0), 100000000, 0, -1997), 0), 100000000, 0, -1996), (Tag5 ("class_type", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -2115), (Tag2 ([(Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -2114); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2113), 0), 100000000, 0, -2112), 0), 100000000, 0, -2111), 0), 100000000, 0, -2110), (Tag5 ("class_type_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -2103), (Tag2 ([(Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -2102); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2101), 0), 100000000, 0, -2100), 0), 100000000, 0, -2099), 0), 100000000, 0, -2098), (Tag5 ("class_signature", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -2127), (Tag2 ([(Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -2126); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2125), 0), 100000000, 0, -2124), 0), 100000000, 0, -2123), 0), 100000000, 0, -2122), (Tag5 ("class_type_field", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -2097), (Tag2 ([(Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -2096); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2095), 0), 100000000, 0, -2094), 0), 100000000, 0, -2093), 0), 100000000, 0, -2092), (Tag5 ("class_type_field_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -2091), (Tag2 ([(Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -2090); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2089), 0), 100000000, 0, -2088), 0), 100000000, 0, -2087), 0), 100000000, 0, -2086), (Tag5 ("class_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -2129), (Tag2 ([(Tag9 (("a")), 100000000, 0, -2129); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2138), 0), 100000000, 0, -2137), 0), 100000000, 0, -2136), (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -2129)], (0)), 100000000, 0, -2135), (Tag2 ([(Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -2129)], (0)), 100000000, 0, -2134); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2133), 0), 100000000, 0, -2132), 0), 100000000, 0, -2131), 0), 100000000, 0, -2130), [(Tag9 (("a")), 100000000, 0, -2129)]), 100000000, 0, -2128), (Tag5 ("class_description", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -2174), (Tag2 ([(Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -2173); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2172), 0), 100000000, 0, -2171), 0), 100000000, 0, -2170), 0), 100000000, 0, -2169), (Tag5 ("class_type_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -2109), (Tag2 ([(Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -2108); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2107), 0), 100000000, 0, -2106), 0), 100000000, 0, -2105), 0), 100000000, 0, -2104), (Tag5 ("class_expr", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -2168), (Tag2 ([(Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -2167); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2166), 0), 100000000, 0, -2165), 0), 100000000, 0, -2164), 0), 100000000, 0, -2163), (Tag5 ("class_expr_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -2162), (Tag2 ([(Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -2161); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2160), 0), 100000000, 0, -2159), 0), 100000000, 0, -2158), 0), 100000000, 0, -2157), (Tag5 ("class_structure", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -2121), (Tag2 ([(Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -2120); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2119), 0), 100000000, 0, -2118), 0), 100000000, 0, -2117), 0), 100000000, 0, -2116), (Tag5 ("class_field", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -2156), (Tag2 ([(Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -2155); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2154), 0), 100000000, 0, -2153), 0), 100000000, 0, -2152), 0), 100000000, 0, -2151), (Tag5 ("class_field_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -2150), (Tag2 ([(Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -2149); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2148), 0), 100000000, 0, -2147), 0), 100000000, 0, -2146), 0), 100000000, 0, -2145), (Tag5 ("class_field_kind", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -2144), (Tag2 ([(Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -2143); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2142), 0), 100000000, 0, -2141), 0), 100000000, 0, -2140), 0), 100000000, 0, -2139), (Tag5 ("class_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -2180), (Tag2 ([(Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -2179); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2178), 0), 100000000, 0, -2177), 0), 100000000, 0, -2176), 0), 100000000, 0, -2175), (Tag5 ("module_type", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -1860), (Tag2 ([(Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -1859); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1858), 0), 100000000, 0, -1857), 0), 100000000, 0, -1856), 0), 100000000, 0, -1855), (Tag5 ("module_type_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -1848), (Tag2 ([(Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -1847); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1846), 0), 100000000, 0, -1845), 0), 100000000, 0, -1844), 0), 100000000, 0, -1843), (Tag5 ("functor_parameter", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -1995), (Tag2 ([(Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -1994); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1993), 0), 100000000, 0, -1992), 0), 100000000, 0, -1991), 0), 100000000, 0, -1990), (Tag5 ("signature", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -1720), (Tag2 ([(Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -1719); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1718), 0), 100000000, 0, -1717), 0), 100000000, 0, -1716), 0), 100000000, 0, -1715), (Tag5 ("signature_item", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -1714), (Tag2 ([(Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -1713); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1712), 0), 100000000, 0, -1711), 0), 100000000, 0, -1710), 0), 100000000, 0, -1709), (Tag5 ("signature_item_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -1708), (Tag2 ([(Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -1707); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1706), 0), 100000000, 0, -1705), 0), 100000000, 0, -1704), 0), 100000000, 0, -1703), (Tag5 ("module_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -1884), (Tag2 ([(Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -1883); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1882), 0), 100000000, 0, -1881), 0), 100000000, 0, -1880), 0), 100000000, 0, -1879), (Tag5 ("module_substitution", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -1866), (Tag2 ([(Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -1865); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1864), 0), 100000000, 0, -1863), 0), 100000000, 0, -1862), 0), 100000000, 0, -1861), (Tag5 ("module_type_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -1854), (Tag2 ([(Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -1853); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1852), 0), 100000000, 0, -1851), 0), 100000000, 0, -1850), 0), 100000000, 0, -1849), (Tag5 ("open_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -1803), (Tag2 ([(Tag9 (("a")), 100000000, 0, -1803); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1812), 0), 100000000, 0, -1811), 0), 100000000, 0, -1810), (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -1803)], (0)), 100000000, 0, -1809), (Tag2 ([(Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -1803)], (0)), 100000000, 0, -1808); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1807), 0), 100000000, 0, -1806), 0), 100000000, 0, -1805), 0), 100000000, 0, -1804), [(Tag9 (("a")), 100000000, 0, -1803)]), 100000000, 0, -1802), (Tag5 ("open_description", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -1818), (Tag2 ([(Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -1817); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1816), 0), 100000000, 0, -1815), 0), 100000000, 0, -1814), 0), 100000000, 0, -1813), (Tag5 ("open_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -1824), (Tag2 ([(Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -1823); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1822), 0), 100000000, 0, -1821), 0), 100000000, 0, -1820), 0), 100000000, 0, -1819), (Tag5 ("include_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -1968), (Tag2 ([(Tag9 (("a")), 100000000, 0, -1968); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1977), 0), 100000000, 0, -1976), 0), 100000000, 0, -1975), (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -1968)], (0)), 100000000, 0, -1974), (Tag2 ([(Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -1968)], (0)), 100000000, 0, -1973); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1972), 0), 100000000, 0, -1971), 0), 100000000, 0, -1970), 0), 100000000, 0, -1969), [(Tag9 (("a")), 100000000, 0, -1968)]), 100000000, 0, -1967), (Tag5 ("include_description", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -1983), (Tag2 ([(Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -1982); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1981), 0), 100000000, 0, -1980), 0), 100000000, 0, -1979), 0), 100000000, 0, -1978), (Tag5 ("include_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -1989), (Tag2 ([(Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -1988); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1987), 0), 100000000, 0, -1986), 0), 100000000, 0, -1985), 0), 100000000, 0, -1984), (Tag5 ("with_constraint", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -1613), (Tag2 ([(Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -1611); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1610), 0), 100000000, 0, -1609), 0), 100000000, 0, -1608), 0), 100000000, 0, -1607), (Tag5 ("module_expr", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -1878), (Tag2 ([(Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -1877); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1876), 0), 100000000, 0, -1875), 0), 100000000, 0, -1874), 0), 100000000, 0, -1873), (Tag5 ("module_expr_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -1872), (Tag2 ([(Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -1871); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1870), 0), 100000000, 0, -1869), 0), 100000000, 0, -1868), 0), 100000000, 0, -1867), (Tag5 ("structure", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -1696), (Tag2 ([(Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -1695); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1694), 0), 100000000, 0, -1693), 0), 100000000, 0, -1692), 0), 100000000, 0, -1691), (Tag5 ("structure_item", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -1690), (Tag2 ([(Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -1689); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1688), 0), 100000000, 0, -1687), 0), 100000000, 0, -1686), 0), 100000000, 0, -1685), (Tag5 ("structure_item_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -1684), (Tag2 ([(Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -1683); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1682), 0), 100000000, 0, -1681), 0), 100000000, 0, -1680), 0), 100000000, 0, -1679), (Tag5 ("value_binding", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -1638), (Tag2 ([(Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -1637); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1636), 0), 100000000, 0, -1635), 0), 100000000, 0, -1634), 0), 100000000, 0, -1633), (Tag5 ("module_binding", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -1890), (Tag2 ([(Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -1889); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1888), 0), 100000000, 0, -1887), 0), 100000000, 0, -1886), 0), 100000000, 0, -1885), (Tag5 ("toplevel_phrase", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -1672), (Tag2 ([(Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -1671); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1670), 0), 100000000, 0, -1669), 0), 100000000, 0, -1668), 0), 100000000, 0, -1667), (Tag5 ("toplevel_directive", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -1678), (Tag2 ([(Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -1677); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1676), 0), 100000000, 0, -1675), 0), 100000000, 0, -1674), 0), 100000000, 0, -1673), (Tag5 ("directive_argument", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -2037), (Tag2 ([(Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -2036); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2035), 0), 100000000, 0, -2034), 0), 100000000, 0, -2033), 0), 100000000, 0, -2032), (Tag5 ("directive_argument_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -2031), (Tag2 ([(Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -2030); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2029), 0), 100000000, 0, -2028), 0), 100000000, 0, -2027), 0), 100000000, 0, -2026), (Tag5 ("cases", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -2192), (Tag2 ([(Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -2191); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2190), 0), 100000000, 0, -2189), 0), 100000000, 0, -2188), 0), 100000000, 0, -2187), ((0), 100000000, 0, -2329)), 100000000, 0, -2328)), 100000000, 0, -2327)), 100000000, 0, -2326)), 100000000, 0, -2325)), 100000000, 0, -2324)), 100000000, 0, -2323)), 100000000, 0, -2322)), 100000000, 0, -2321)), 100000000, 0, -2320)), 100000000, 0, -2319)), 100000000, 0, -2318)), 100000000, 0, -2317)), 100000000, 0, -2316)), 100000000, 0, -2315)), 100000000, 0, -2314)), 100000000, 0, -2313)), 100000000, 0, -2312)), 100000000, 0, -2311)), 100000000, 0, -2310)), 100000000, 0, -2309)), 100000000, 0, -2308)), 100000000, 0, -2307)), 100000000, 0, -2306)), 100000000, 0, -2305)), 100000000, 0, -2304)), 100000000, 0, -2303)), 100000000, 0, -2302)), 100000000, 0, -2301)), 100000000, 0, -2300)), 100000000, 0, -2299)), 100000000, 0, -2298)), 100000000, 0, -2297)), 100000000, 0, -2296)), 100000000, 0, -2295)), 100000000, 0, -2294)), 100000000, 0, -2293)), 100000000, 0, -2292)), 100000000, 0, -2291)), 100000000, 0, -2290)), 100000000, 0, -2289)), 100000000, 0, -2288)), 100000000, 0, -2287)), 100000000, 0, -2286)), 100000000, 0, -2285)), 100000000, 0, -2284)), 100000000, 0, -2283)), 100000000, 0, -2282)), 100000000, 0, -2281)), 100000000, 0, -2280)), 100000000, 0, -2279)), 100000000, 0, -2278)), 100000000, 0, -2277)), 100000000, 0, -2276)), 100000000, 0, -2275)), 100000000, 0, -2274)), 100000000, 0, -2273)), 100000000, 0, -2272)), 100000000, 0, -2271)), 100000000, 0, -2270)), 100000000, 0, -2269)), 100000000, 0, -2268)), 100000000, 0, -2267)), 100000000, 0, -2266)), 100000000, 0, -2265)), 100000000, 0, -2264)), 100000000, 0, -2263)), 100000000, 0, -2262)), 100000000, 0, -2261)), 100000000, 0, -2260)), 100000000, 0, -2259)), 100000000, 0, -2258)), 100000000, 0, -2257)), 100000000, 0, -2256)), 100000000, 0, -2255)), 100000000, 0, -2254)), 100000000, 0, -2253)), 100000000, 0, -2252)), 100000000, 0, -2251)), 100000000, 0, -2250)), 100000000, 0, -2249)), 100000000, 0, -2248)), 100000000, 0, -2247)), 100000000, 0, -2246)), 100000000, 0, -2245)), 100000000, 0, -2244)), 100000000, 0, -2243)), 100000000, 0, -2242)), 100000000, 0, -2241)), 100000000, 0, -2240)), 100000000, 0, -2239)), 100000000, 0, -2238)), 100000000, 0, -2237)), 100000000, 0, -2236)), 100000000, 0, -2235)), 100000000, 0, -2234)), 100000000, 0, -2233)), 100000000, 0, -2232)), 100000000, 0, -2231)), 100000000, 0, -2230), (([(("lift_map_with_context", 7462)); ((0), 100000000, 0, -2329); ((("ctx")), 100000000, 0, -1614); ((("res")), 100000000, 0, -1612)]))), 100000000, 0, -2229)), [63; 63], [2; 2], 0, 0, (("ast/ast.ml", 8402, 317686, 317686), ("ast/ast.ml", 10382, 402632, 402637), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 7458)), [63; 63], (("ast/ast.ml", 8402, 317686, 317686), ("ast/ast.ml", 10382, 402632, 402637), 0), 0, Tag1 ("Ppxlib_ast__Ast", 7458)), 1, 0); Tag1 (("lift_map_with_context", 7462), ([((("ctx")), 100000000, 0, -1614); ((("res")), 100000000, 0, -1612)], 2, 0, 1, ((Tag4 ((Tag5 ("arg_label", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -2228), (Tag2 ([(Tag3 ((("arg_label", 7367)), 0, (0)), 100000000, 0, -2227); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2226), 0), 100000000, 0, -2225), 0), 100000000, 0, -2224), 0), 100000000, 0, -2223), (Tag5 ("attribute", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -2222), (Tag2 ([(Tag3 ((("attribute", 7371)), 0, (0)), 100000000, 0, -2221); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2220), 0), 100000000, 0, -2219), 0), 100000000, 0, -2218), 0), 100000000, 0, -2217), (Tag5 ("attributes", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -2216), (Tag2 ([(Tag3 ((("attributes", 7373)), 0, (0)), 100000000, 0, -2215); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2214), 0), 100000000, 0, -2213), 0), 100000000, 0, -2212), 0), 100000000, 0, -2211), (Tag5 ("binding_op", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -2210), (Tag2 ([(Tag3 ((("binding_op", 7388)), 0, (0)), 100000000, 0, -2209); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2208), 0), 100000000, 0, -2207), 0), 100000000, 0, -2206), 0), 100000000, 0, -2205), (Tag5 ("bool", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2204), (Tag2 ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2203); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2202), 0), 100000000, 0, -2201), 0), 100000000, 0, -2200), 0), 100000000, 0, -2199), (Tag5 ("case", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -2198), (Tag2 ([(Tag3 ((("case", 7386)), 0, (0)), 100000000, 0, -2197); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2196), 0), 100000000, 0, -2195), 0), 100000000, 0, -2194), 0), 100000000, 0, -2193), (Tag5 ("cases", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -2192), (Tag2 ([(Tag3 ((("cases", 7441)), 0, (0)), 100000000, 0, -2191); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2190), 0), 100000000, 0, -2189), 0), 100000000, 0, -2188), 0), 100000000, 0, -2187), (Tag5 ("char", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -2186), (Tag2 ([(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -2185); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2184), 0), 100000000, 0, -2183), 0), 100000000, 0, -2182), 0), 100000000, 0, -2181), (Tag5 ("class_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -2180), (Tag2 ([(Tag3 ((("class_declaration", 7413)), 0, (0)), 100000000, 0, -2179); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2178), 0), 100000000, 0, -2177), 0), 100000000, 0, -2176), 0), 100000000, 0, -2175), (Tag5 ("class_description", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -2174), (Tag2 ([(Tag3 ((("class_description", 7405)), 0, (0)), 100000000, 0, -2173); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2172), 0), 100000000, 0, -2171), 0), 100000000, 0, -2170), 0), 100000000, 0, -2169), (Tag5 ("class_expr", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -2168), (Tag2 ([(Tag3 ((("class_expr", 7407)), 0, (0)), 100000000, 0, -2167); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2166), 0), 100000000, 0, -2165), 0), 100000000, 0, -2164), 0), 100000000, 0, -2163), (Tag5 ("class_expr_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -2162), (Tag2 ([(Tag3 ((("class_expr_desc", 7408)), 0, (0)), 100000000, 0, -2161); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2160), 0), 100000000, 0, -2159), 0), 100000000, 0, -2158), 0), 100000000, 0, -2157), (Tag5 ("class_field", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -2156), (Tag2 ([(Tag3 ((("class_field", 7410)), 0, (0)), 100000000, 0, -2155); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2154), 0), 100000000, 0, -2153), 0), 100000000, 0, -2152), 0), 100000000, 0, -2151), (Tag5 ("class_field_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -2150), (Tag2 ([(Tag3 ((("class_field_desc", 7411)), 0, (0)), 100000000, 0, -2149); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2148), 0), 100000000, 0, -2147), 0), 100000000, 0, -2146), 0), 100000000, 0, -2145), (Tag5 ("class_field_kind", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -2144), (Tag2 ([(Tag3 ((("class_field_kind", 7412)), 0, (0)), 100000000, 0, -2143); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2142), 0), 100000000, 0, -2141), 0), 100000000, 0, -2140), 0), 100000000, 0, -2139), (Tag5 ("class_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -2129), (Tag2 ([(Tag9 (("a")), 100000000, 0, -2129); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2138), 0), 100000000, 0, -2137), 0), 100000000, 0, -2136), (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -2129)], (0)), 100000000, 0, -2135), (Tag2 ([(Tag3 ((("class_infos", 7404)), [(Tag9 (("a")), 100000000, 0, -2129)], (0)), 100000000, 0, -2134); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2133), 0), 100000000, 0, -2132), 0), 100000000, 0, -2131), 0), 100000000, 0, -2130), [(Tag9 (("a")), 100000000, 0, -2129)]), 100000000, 0, -2128), (Tag5 ("class_signature", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -2127), (Tag2 ([(Tag3 ((("class_signature", 7401)), 0, (0)), 100000000, 0, -2126); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2125), 0), 100000000, 0, -2124), 0), 100000000, 0, -2123), 0), 100000000, 0, -2122), (Tag5 ("class_structure", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -2121), (Tag2 ([(Tag3 ((("class_structure", 7409)), 0, (0)), 100000000, 0, -2120); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2119), 0), 100000000, 0, -2118), 0), 100000000, 0, -2117), 0), 100000000, 0, -2116), (Tag5 ("class_type", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -2115), (Tag2 ([(Tag3 ((("class_type", 7399)), 0, (0)), 100000000, 0, -2114); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2113), 0), 100000000, 0, -2112), 0), 100000000, 0, -2111), 0), 100000000, 0, -2110), (Tag5 ("class_type_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -2109), (Tag2 ([(Tag3 ((("class_type_declaration", 7406)), 0, (0)), 100000000, 0, -2108); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2107), 0), 100000000, 0, -2106), 0), 100000000, 0, -2105), 0), 100000000, 0, -2104), (Tag5 ("class_type_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -2103), (Tag2 ([(Tag3 ((("class_type_desc", 7400)), 0, (0)), 100000000, 0, -2102); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2101), 0), 100000000, 0, -2100), 0), 100000000, 0, -2099), 0), 100000000, 0, -2098), (Tag5 ("class_type_field", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -2097), (Tag2 ([(Tag3 ((("class_type_field", 7402)), 0, (0)), 100000000, 0, -2096); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2095), 0), 100000000, 0, -2094), 0), 100000000, 0, -2093), 0), 100000000, 0, -2092), (Tag5 ("class_type_field_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -2091), (Tag2 ([(Tag3 ((("class_type_field_desc", 7403)), 0, (0)), 100000000, 0, -2090); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2089), 0), 100000000, 0, -2088), 0), 100000000, 0, -2087), 0), 100000000, 0, -2086), (Tag5 ("closed_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -2085), (Tag2 ([(Tag3 ((("closed_flag", 7365)), 0, (0)), 100000000, 0, -2084); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2083), 0), 100000000, 0, -2082), 0), 100000000, 0, -2081), 0), 100000000, 0, -2080), (Tag5 ("constant", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -2079), (Tag2 ([(Tag3 ((("constant", 7370)), 0, (0)), 100000000, 0, -2078); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2077), 0), 100000000, 0, -2076), 0), 100000000, 0, -2075), 0), 100000000, 0, -2074), (Tag5 ("constr", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2073), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("res")), 100000000, 0, -1612)], (0)), 100000000, 0, -2072), ((("res")), 100000000, 0, -1612), 0), 100000000, 0, -2071), 0), 100000000, 0, -2070), 0), 100000000, 0, -2069), 0), 100000000, 0, -2068), (Tag5 ("constructor_arguments", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -2067), (Tag2 ([(Tag3 ((("constructor_arguments", 7394)), 0, (0)), 100000000, 0, -2066); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2065), 0), 100000000, 0, -2064), 0), 100000000, 0, -2063), 0), 100000000, 0, -2062), (Tag5 ("constructor_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -2061), (Tag2 ([(Tag3 ((("constructor_declaration", 7393)), 0, (0)), 100000000, 0, -2060); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2059), 0), 100000000, 0, -2058), 0), 100000000, 0, -2057), 0), 100000000, 0, -2056), (Tag5 ("core_type", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -2055), (Tag2 ([(Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -2054); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2053), 0), 100000000, 0, -2052), 0), 100000000, 0, -2051), 0), 100000000, 0, -2050), (Tag5 ("core_type_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -2049), (Tag2 ([(Tag3 ((("core_type_desc", 7376)), 0, (0)), 100000000, 0, -2048); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2047), 0), 100000000, 0, -2046), 0), 100000000, 0, -2045), 0), 100000000, 0, -2044), (Tag5 ("direction_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -2043), (Tag2 ([(Tag3 ((("direction_flag", 7360)), 0, (0)), 100000000, 0, -2042); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2041), 0), 100000000, 0, -2040), 0), 100000000, 0, -2039), 0), 100000000, 0, -2038), (Tag5 ("directive_argument", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -2037), (Tag2 ([(Tag3 ((("directive_argument", 7439)), 0, (0)), 100000000, 0, -2036); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2035), 0), 100000000, 0, -2034), 0), 100000000, 0, -2033), 0), 100000000, 0, -2032), (Tag5 ("directive_argument_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -2031), (Tag2 ([(Tag3 ((("directive_argument_desc", 7440)), 0, (0)), 100000000, 0, -2030); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2029), 0), 100000000, 0, -2028), 0), 100000000, 0, -2027), 0), 100000000, 0, -2026), (Tag5 ("expression", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -2025), (Tag2 ([(Tag3 ((("expression", 7384)), 0, (0)), 100000000, 0, -2024); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2023), 0), 100000000, 0, -2022), 0), 100000000, 0, -2021), 0), 100000000, 0, -2020), (Tag5 ("expression_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -2019), (Tag2 ([(Tag3 ((("expression_desc", 7385)), 0, (0)), 100000000, 0, -2018); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2017), 0), 100000000, 0, -2016), 0), 100000000, 0, -2015), 0), 100000000, 0, -2014), (Tag5 ("extension", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -2013), (Tag2 ([(Tag3 ((("extension", 7372)), 0, (0)), 100000000, 0, -2012); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2011), 0), 100000000, 0, -2010), 0), 100000000, 0, -2009), 0), 100000000, 0, -2008), (Tag5 ("extension_constructor", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -2007), (Tag2 ([(Tag3 ((("extension_constructor", 7396)), 0, (0)), 100000000, 0, -2006); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -2005), 0), 100000000, 0, -2004), 0), 100000000, 0, -2003), 0), 100000000, 0, -2002), (Tag5 ("extension_constructor_kind", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -2001), (Tag2 ([(Tag3 ((("extension_constructor_kind", 7398)), 0, (0)), 100000000, 0, -2000); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1999), 0), 100000000, 0, -1998), 0), 100000000, 0, -1997), 0), 100000000, 0, -1996), (Tag5 ("functor_parameter", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -1995), (Tag2 ([(Tag3 ((("functor_parameter", 7416)), 0, (0)), 100000000, 0, -1994); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1993), 0), 100000000, 0, -1992), 0), 100000000, 0, -1991), 0), 100000000, 0, -1990), (Tag5 ("include_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -1989), (Tag2 ([(Tag3 ((("include_declaration", 7428)), 0, (0)), 100000000, 0, -1988); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1987), 0), 100000000, 0, -1986), 0), 100000000, 0, -1985), 0), 100000000, 0, -1984), (Tag5 ("include_description", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -1983), (Tag2 ([(Tag3 ((("include_description", 7427)), 0, (0)), 100000000, 0, -1982); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1981), 0), 100000000, 0, -1980), 0), 100000000, 0, -1979), 0), 100000000, 0, -1978), (Tag5 ("include_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -1968), (Tag2 ([(Tag9 (("a")), 100000000, 0, -1968); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1977), 0), 100000000, 0, -1976), 0), 100000000, 0, -1975), (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -1968)], (0)), 100000000, 0, -1974), (Tag2 ([(Tag3 ((("include_infos", 7426)), [(Tag9 (("a")), 100000000, 0, -1968)], (0)), 100000000, 0, -1973); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1972), 0), 100000000, 0, -1971), 0), 100000000, 0, -1970), 0), 100000000, 0, -1969), [(Tag9 (("a")), 100000000, 0, -1968)]), 100000000, 0, -1967), (Tag5 ("injectivity", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -1966), (Tag2 ([(Tag3 ((("injectivity", 7369)), 0, (0)), 100000000, 0, -1965); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1964), 0), 100000000, 0, -1963), 0), 100000000, 0, -1962), 0), 100000000, 0, -1961), (Tag5 ("int", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1960), (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1959); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1958), 0), 100000000, 0, -1957), 0), 100000000, 0, -1956), 0), 100000000, 0, -1955), (Tag5 ("label", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -1954), (Tag2 ([(Tag3 ((("label", 7366)), 0, (0)), 100000000, 0, -1953); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1952), 0), 100000000, 0, -1951), 0), 100000000, 0, -1950), 0), 100000000, 0, -1949), (Tag5 ("label_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -1948), (Tag2 ([(Tag3 ((("label_declaration", 7392)), 0, (0)), 100000000, 0, -1947); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1946), 0), 100000000, 0, -1945), 0), 100000000, 0, -1944), 0), 100000000, 0, -1943), (Tag5 ("letop", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -1942), (Tag2 ([(Tag3 ((("letop", 7387)), 0, (0)), 100000000, 0, -1941); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1940), 0), 100000000, 0, -1939), 0), 100000000, 0, -1938), 0), 100000000, 0, -1937), (Tag5 ("list", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -1927), (Tag2 ([(Tag9 (("a")), 100000000, 0, -1927); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1936), 0), 100000000, 0, -1935), 0), 100000000, 0, -1934), (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -1927)], (0)), 100000000, 0, -1933), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag9 (("a")), 100000000, 0, -1927)], (0)), 100000000, 0, -1932); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1931), 0), 100000000, 0, -1930), 0), 100000000, 0, -1929), 0), 100000000, 0, -1928), [(Tag9 (("a")), 100000000, 0, -1927)]), 100000000, 0, -1926), (Tag5 ("loc", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -1916), (Tag2 ([(Tag9 (("a")), 100000000, 0, -1916); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1925), 0), 100000000, 0, -1924), 0), 100000000, 0, -1923), (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -1916)], (0)), 100000000, 0, -1922), (Tag2 ([(Tag3 ((("loc", 7356)), [(Tag9 (("a")), 100000000, 0, -1916)], (0)), 100000000, 0, -1921); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1920), 0), 100000000, 0, -1919), 0), 100000000, 0, -1918), 0), 100000000, 0, -1917), [(Tag9 (("a")), 100000000, 0, -1916)]), 100000000, 0, -1915), (Tag5 ("location", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -1914), (Tag2 ([(Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -1913); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1912), 0), 100000000, 0, -1911), 0), 100000000, 0, -1910), 0), 100000000, 0, -1909), (Tag5 ("location_stack", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -1908), (Tag2 ([(Tag3 ((("location_stack", 7355)), 0, (0)), 100000000, 0, -1907); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1906), 0), 100000000, 0, -1905), 0), 100000000, 0, -1904), 0), 100000000, 0, -1903), (Tag5 ("longident", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -1902), (Tag2 ([(Tag3 ((("longident", 7357)), 0, (0)), 100000000, 0, -1901); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1900), 0), 100000000, 0, -1899), 0), 100000000, 0, -1898), 0), 100000000, 0, -1897), (Tag5 ("longident_loc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -1896), (Tag2 ([(Tag3 ((("longident_loc", 7358)), 0, (0)), 100000000, 0, -1895); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1894), 0), 100000000, 0, -1893), 0), 100000000, 0, -1892), 0), 100000000, 0, -1891), (Tag5 ("module_binding", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -1890), (Tag2 ([(Tag3 ((("module_binding", 7436)), 0, (0)), 100000000, 0, -1889); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1888), 0), 100000000, 0, -1887), 0), 100000000, 0, -1886), 0), 100000000, 0, -1885), (Tag5 ("module_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -1884), (Tag2 ([(Tag3 ((("module_declaration", 7420)), 0, (0)), 100000000, 0, -1883); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1882), 0), 100000000, 0, -1881), 0), 100000000, 0, -1880), 0), 100000000, 0, -1879), (Tag5 ("module_expr", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -1878), (Tag2 ([(Tag3 ((("module_expr", 7430)), 0, (0)), 100000000, 0, -1877); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1876), 0), 100000000, 0, -1875), 0), 100000000, 0, -1874), 0), 100000000, 0, -1873), (Tag5 ("module_expr_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -1872), (Tag2 ([(Tag3 ((("module_expr_desc", 7431)), 0, (0)), 100000000, 0, -1871); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1870), 0), 100000000, 0, -1869), 0), 100000000, 0, -1868), 0), 100000000, 0, -1867), (Tag5 ("module_substitution", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -1866), (Tag2 ([(Tag3 ((("module_substitution", 7421)), 0, (0)), 100000000, 0, -1865); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1864), 0), 100000000, 0, -1863), 0), 100000000, 0, -1862), 0), 100000000, 0, -1861), (Tag5 ("module_type", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -1860), (Tag2 ([(Tag3 ((("module_type", 7414)), 0, (0)), 100000000, 0, -1859); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1858), 0), 100000000, 0, -1857), 0), 100000000, 0, -1856), 0), 100000000, 0, -1855), (Tag5 ("module_type_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -1854), (Tag2 ([(Tag3 ((("module_type_declaration", 7422)), 0, (0)), 100000000, 0, -1853); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1852), 0), 100000000, 0, -1851), 0), 100000000, 0, -1850), 0), 100000000, 0, -1849), (Tag5 ("module_type_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -1848), (Tag2 ([(Tag3 ((("module_type_desc", 7415)), 0, (0)), 100000000, 0, -1847); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1846), 0), 100000000, 0, -1845), 0), 100000000, 0, -1844), 0), 100000000, 0, -1843), (Tag5 ("mutable_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -1842), (Tag2 ([(Tag3 ((("mutable_flag", 7362)), 0, (0)), 100000000, 0, -1841); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1840), 0), 100000000, 0, -1839), 0), 100000000, 0, -1838), 0), 100000000, 0, -1837), (Tag5 ("object_field", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -1836), (Tag2 ([(Tag3 ((("object_field", 7380)), 0, (0)), 100000000, 0, -1835); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1834), 0), 100000000, 0, -1833), 0), 100000000, 0, -1832), 0), 100000000, 0, -1831), (Tag5 ("object_field_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -1830), (Tag2 ([(Tag3 ((("object_field_desc", 7381)), 0, (0)), 100000000, 0, -1829); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1828), 0), 100000000, 0, -1827), 0), 100000000, 0, -1826), 0), 100000000, 0, -1825), (Tag5 ("open_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -1824), (Tag2 ([(Tag3 ((("open_declaration", 7425)), 0, (0)), 100000000, 0, -1823); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1822), 0), 100000000, 0, -1821), 0), 100000000, 0, -1820), 0), 100000000, 0, -1819), (Tag5 ("open_description", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -1818), (Tag2 ([(Tag3 ((("open_description", 7424)), 0, (0)), 100000000, 0, -1817); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1816), 0), 100000000, 0, -1815), 0), 100000000, 0, -1814), 0), 100000000, 0, -1813), (Tag5 ("open_infos", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -1803), (Tag2 ([(Tag9 (("a")), 100000000, 0, -1803); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1812), 0), 100000000, 0, -1811), 0), 100000000, 0, -1810), (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -1803)], (0)), 100000000, 0, -1809), (Tag2 ([(Tag3 ((("open_infos", 7423)), [(Tag9 (("a")), 100000000, 0, -1803)], (0)), 100000000, 0, -1808); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1807), 0), 100000000, 0, -1806), 0), 100000000, 0, -1805), 0), 100000000, 0, -1804), [(Tag9 (("a")), 100000000, 0, -1803)]), 100000000, 0, -1802), (Tag5 ("option", 1, (Tag10 ((Tag1 (0, (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -1792), (Tag2 ([(Tag9 (("a")), 100000000, 0, -1792); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1801), 0), 100000000, 0, -1800), 0), 100000000, 0, -1799), (Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -1792)], (0)), 100000000, 0, -1798), (Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -1792)], (0)), 100000000, 0, -1797); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1796), 0), 100000000, 0, -1795), 0), 100000000, 0, -1794), 0), 100000000, 0, -1793), [(Tag9 (("a")), 100000000, 0, -1792)]), 100000000, 0, -1791), (Tag5 ("other", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag9 (("a")), 100000000, 0, -1788), ((("res")), 100000000, 0, -1612), 0), 100000000, 0, -1790), 0), 100000000, 0, -1789), [(Tag9 (("a")), 100000000, 0, -1788)]), 100000000, 0, -1787), (Tag5 ("override_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -1786), (Tag2 ([(Tag3 ((("override_flag", 7364)), 0, (0)), 100000000, 0, -1785); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1784), 0), 100000000, 0, -1783), 0), 100000000, 0, -1782), 0), 100000000, 0, -1781), (Tag5 ("package_type", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -1780), (Tag2 ([(Tag3 ((("package_type", 7377)), 0, (0)), 100000000, 0, -1779); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1778), 0), 100000000, 0, -1777), 0), 100000000, 0, -1776), 0), 100000000, 0, -1775), (Tag5 ("pattern", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -1774), (Tag2 ([(Tag3 ((("pattern", 7382)), 0, (0)), 100000000, 0, -1773); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1772), 0), 100000000, 0, -1771), 0), 100000000, 0, -1770), 0), 100000000, 0, -1769), (Tag5 ("pattern_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -1768), (Tag2 ([(Tag3 ((("pattern_desc", 7383)), 0, (0)), 100000000, 0, -1767); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1766), 0), 100000000, 0, -1765), 0), 100000000, 0, -1764), 0), 100000000, 0, -1763), (Tag5 ("payload", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -1762), (Tag2 ([(Tag3 ((("payload", 7374)), 0, (0)), 100000000, 0, -1761); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1760), 0), 100000000, 0, -1759), 0), 100000000, 0, -1758), 0), 100000000, 0, -1757), (Tag5 ("position", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -1756), (Tag2 ([(Tag3 ((("position", 7353)), 0, (0)), 100000000, 0, -1755); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1754), 0), 100000000, 0, -1753), 0), 100000000, 0, -1752), 0), 100000000, 0, -1751), (Tag5 ("private_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -1750), (Tag2 ([(Tag3 ((("private_flag", 7361)), 0, (0)), 100000000, 0, -1749); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1748), 0), 100000000, 0, -1747), 0), 100000000, 0, -1746), 0), 100000000, 0, -1745), (Tag5 ("rec_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -1744), (Tag2 ([(Tag3 ((("rec_flag", 7359)), 0, (0)), 100000000, 0, -1743); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1742), 0), 100000000, 0, -1741), 0), 100000000, 0, -1740), 0), 100000000, 0, -1739), (Tag5 ("record", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1738); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1737)], (0)), 100000000, 0, -1736), ((("res")), 100000000, 0, -1612), 0), 100000000, 0, -1735), 0), 100000000, 0, -1734), 0), 100000000, 0, -1733), (Tag5 ("row_field", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -1732), (Tag2 ([(Tag3 ((("row_field", 7378)), 0, (0)), 100000000, 0, -1731); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1730), 0), 100000000, 0, -1729), 0), 100000000, 0, -1728), 0), 100000000, 0, -1727), (Tag5 ("row_field_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -1726), (Tag2 ([(Tag3 ((("row_field_desc", 7379)), 0, (0)), 100000000, 0, -1725); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1724), 0), 100000000, 0, -1723), 0), 100000000, 0, -1722), 0), 100000000, 0, -1721), (Tag5 ("signature", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -1720), (Tag2 ([(Tag3 ((("signature", 7417)), 0, (0)), 100000000, 0, -1719); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1718), 0), 100000000, 0, -1717), 0), 100000000, 0, -1716), 0), 100000000, 0, -1715), (Tag5 ("signature_item", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -1714), (Tag2 ([(Tag3 ((("signature_item", 7418)), 0, (0)), 100000000, 0, -1713); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1712), 0), 100000000, 0, -1711), 0), 100000000, 0, -1710), 0), 100000000, 0, -1709), (Tag5 ("signature_item_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -1708), (Tag2 ([(Tag3 ((("signature_item_desc", 7419)), 0, (0)), 100000000, 0, -1707); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1706), 0), 100000000, 0, -1705), 0), 100000000, 0, -1704), 0), 100000000, 0, -1703), (Tag5 ("string", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1702), (Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1701); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1700), 0), 100000000, 0, -1699), 0), 100000000, 0, -1698), 0), 100000000, 0, -1697), (Tag5 ("structure", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -1696), (Tag2 ([(Tag3 ((("structure", 7432)), 0, (0)), 100000000, 0, -1695); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1694), 0), 100000000, 0, -1693), 0), 100000000, 0, -1692), 0), 100000000, 0, -1691), (Tag5 ("structure_item", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -1690), (Tag2 ([(Tag3 ((("structure_item", 7433)), 0, (0)), 100000000, 0, -1689); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1688), 0), 100000000, 0, -1687), 0), 100000000, 0, -1686), 0), 100000000, 0, -1685), (Tag5 ("structure_item_desc", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -1684), (Tag2 ([(Tag3 ((("structure_item_desc", 7434)), 0, (0)), 100000000, 0, -1683); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1682), 0), 100000000, 0, -1681), 0), 100000000, 0, -1680), 0), 100000000, 0, -1679), (Tag5 ("toplevel_directive", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -1678), (Tag2 ([(Tag3 ((("toplevel_directive", 7438)), 0, (0)), 100000000, 0, -1677); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1676), 0), 100000000, 0, -1675), 0), 100000000, 0, -1674), 0), 100000000, 0, -1673), (Tag5 ("toplevel_phrase", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -1672), (Tag2 ([(Tag3 ((("toplevel_phrase", 7437)), 0, (0)), 100000000, 0, -1671); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1670), 0), 100000000, 0, -1669), 0), 100000000, 0, -1668), 0), 100000000, 0, -1667), (Tag5 ("tuple", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("res")), 100000000, 0, -1612)], (0)), 100000000, 0, -1666), ((("res")), 100000000, 0, -1612), 0), 100000000, 0, -1665), 0), 100000000, 0, -1664), 0), 100000000, 0, -1663), (Tag5 ("type_declaration", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -1662), (Tag2 ([(Tag3 ((("type_declaration", 7390)), 0, (0)), 100000000, 0, -1661); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1660), 0), 100000000, 0, -1659), 0), 100000000, 0, -1658), 0), 100000000, 0, -1657), (Tag5 ("type_exception", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -1656), (Tag2 ([(Tag3 ((("type_exception", 7397)), 0, (0)), 100000000, 0, -1655); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1654), 0), 100000000, 0, -1653), 0), 100000000, 0, -1652), 0), 100000000, 0, -1651), (Tag5 ("type_extension", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -1650), (Tag2 ([(Tag3 ((("type_extension", 7395)), 0, (0)), 100000000, 0, -1649); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1648), 0), 100000000, 0, -1647), 0), 100000000, 0, -1646), 0), 100000000, 0, -1645), (Tag5 ("type_kind", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -1644), (Tag2 ([(Tag3 ((("type_kind", 7391)), 0, (0)), 100000000, 0, -1643); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1642), 0), 100000000, 0, -1641), 0), 100000000, 0, -1640), 0), 100000000, 0, -1639), (Tag5 ("value_binding", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -1638), (Tag2 ([(Tag3 ((("value_binding", 7435)), 0, (0)), 100000000, 0, -1637); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1636), 0), 100000000, 0, -1635), 0), 100000000, 0, -1634), 0), 100000000, 0, -1633), (Tag5 ("value_description", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -1632), (Tag2 ([(Tag3 ((("value_description", 7389)), 0, (0)), 100000000, 0, -1631); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1630), 0), 100000000, 0, -1629), 0), 100000000, 0, -1628), 0), 100000000, 0, -1627), (Tag5 ("variance", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -1626), (Tag2 ([(Tag3 ((("variance", 7368)), 0, (0)), 100000000, 0, -1625); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1624), 0), 100000000, 0, -1623), 0), 100000000, 0, -1622), 0), 100000000, 0, -1621), (Tag5 ("virtual_flag", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -1620), (Tag2 ([(Tag3 ((("virtual_flag", 7363)), 0, (0)), 100000000, 0, -1619); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1618), 0), 100000000, 0, -1617), 0), 100000000, 0, -1616), 0), 100000000, 0, -1615), (Tag5 ("with_constraint", 1, (Tag10 ((Tag1 (0, ((("ctx")), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -1613), (Tag2 ([(Tag3 ((("with_constraint", 7429)), 0, (0)), 100000000, 0, -1611); ((("res")), 100000000, 0, -1612)]), 100000000, 0, -1610), 0), 100000000, 0, -1609), 0), 100000000, 0, -1608), 0), 100000000, 0, -1607), (0, 100000000, 0, -1606)), 100000000, 0, -1605)), 100000000, 0, -1604)), 100000000, 0, -1603)), 100000000, 0, -1602)), 100000000, 0, -1601)), 100000000, 0, -1600)), 100000000, 0, -1599)), 100000000, 0, -1598)), 100000000, 0, -1597)), 100000000, 0, -1596)), 100000000, 0, -1595)), 100000000, 0, -1594)), 100000000, 0, -1593)), 100000000, 0, -1592)), 100000000, 0, -1591)), 100000000, 0, -1590)), 100000000, 0, -1589)), 100000000, 0, -1588)), 100000000, 0, -1587)), 100000000, 0, -1586)), 100000000, 0, -1585)), 100000000, 0, -1584)), 100000000, 0, -1583)), 100000000, 0, -1582)), 100000000, 0, -1581)), 100000000, 0, -1580)), 100000000, 0, -1579)), 100000000, 0, -1578)), 100000000, 0, -1577)), 100000000, 0, -1576)), 100000000, 0, -1575)), 100000000, 0, -1574)), 100000000, 0, -1573)), 100000000, 0, -1572)), 100000000, 0, -1571)), 100000000, 0, -1570)), 100000000, 0, -1569)), 100000000, 0, -1568)), 100000000, 0, -1567)), 100000000, 0, -1566)), 100000000, 0, -1565)), 100000000, 0, -1564)), 100000000, 0, -1563)), 100000000, 0, -1562)), 100000000, 0, -1561)), 100000000, 0, -1560)), 100000000, 0, -1559)), 100000000, 0, -1558)), 100000000, 0, -1557)), 100000000, 0, -1556)), 100000000, 0, -1555)), 100000000, 0, -1554)), 100000000, 0, -1553)), 100000000, 0, -1552)), 100000000, 0, -1551)), 100000000, 0, -1550)), 100000000, 0, -1549)), 100000000, 0, -1548)), 100000000, 0, -1547)), 100000000, 0, -1546)), 100000000, 0, -1545)), 100000000, 0, -1544)), 100000000, 0, -1543)), 100000000, 0, -1542)), 100000000, 0, -1541)), 100000000, 0, -1540)), 100000000, 0, -1539)), 100000000, 0, -1538)), 100000000, 0, -1537)), 100000000, 0, -1536)), 100000000, 0, -1535)), 100000000, 0, -1534)), 100000000, 0, -1533)), 100000000, 0, -1532)), 100000000, 0, -1531)), 100000000, 0, -1530)), 100000000, 0, -1529)), 100000000, 0, -1528)), 100000000, 0, -1527)), 100000000, 0, -1526)), 100000000, 0, -1525)), 100000000, 0, -1524)), 100000000, 0, -1523)), 100000000, 0, -1522)), 100000000, 0, -1521)), 100000000, 0, -1520)), 100000000, 0, -1519)), 100000000, 0, -1518)), 100000000, 0, -1517)), 100000000, 0, -1516)), 100000000, 0, -1515)), 100000000, 0, -1514)), 100000000, 0, -1513)), 100000000, 0, -1512)), 100000000, 0, -1511)), 100000000, 0, -1510)), 100000000, 0, -1509)), 100000000, 0, -1508)), 100000000, 0, -1507), (0)), 100000000, 0, -1506)), [63; 63], [2; 2], 0, 0, (("ast/ast.ml", 8402, 317686, 317686), ("ast/ast.ml", 10382, 402632, 402637), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Ast", 7458)), 1, 0); Tag3 (("Do_not_use_directly", 7463), 1, (Tag3 (Tag1 ((Tag2 ("Ocaml_shadow")), "Do_not_use_directly")), 0, (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 0)), 0, 0); Tag3 (("Afl_instrument", 7464), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 2, 40, 87), ("src/shadow/ocaml_shadow.ml", 2, 40, 97), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Afl_instrument instead", (("src/shadow/ocaml_shadow.ml", 2, 40, 99), ("src/shadow/ocaml_shadow.ml", 2, 40, 185), 0), 0)), (("src/shadow/ocaml_shadow.ml", 2, 40, 98), ("src/shadow/ocaml_shadow.ml", 2, 40, 186), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 2, 40, 98), ("src/shadow/ocaml_shadow.ml", 2, 40, 186), 0))]), (("src/shadow/ocaml_shadow.ml", 2, 40, 84), ("src/shadow/ocaml_shadow.ml", 2, 40, 187), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 1)), 0, 0); Tag3 (("Alias_analysis", 7465), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 3, 188, 235), ("src/shadow/ocaml_shadow.ml", 3, 188, 245), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Alias_analysis instead", (("src/shadow/ocaml_shadow.ml", 3, 188, 247), ("src/shadow/ocaml_shadow.ml", 3, 188, 333), 0), 0)), (("src/shadow/ocaml_shadow.ml", 3, 188, 246), ("src/shadow/ocaml_shadow.ml", 3, 188, 334), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 3, 188, 246), ("src/shadow/ocaml_shadow.ml", 3, 188, 334), 0))]), (("src/shadow/ocaml_shadow.ml", 3, 188, 232), ("src/shadow/ocaml_shadow.ml", 3, 188, 335), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 2)), 0, 0); Tag3 (("Allocated_const", 7466), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 4, 336, 384), ("src/shadow/ocaml_shadow.ml", 4, 336, 394), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Allocated_const instead", (("src/shadow/ocaml_shadow.ml", 4, 336, 396), ("src/shadow/ocaml_shadow.ml", 4, 336, 483), 0), 0)), (("src/shadow/ocaml_shadow.ml", 4, 336, 395), ("src/shadow/ocaml_shadow.ml", 4, 336, 484), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 4, 336, 395), ("src/shadow/ocaml_shadow.ml", 4, 336, 484), 0))]), (("src/shadow/ocaml_shadow.ml", 4, 336, 381), ("src/shadow/ocaml_shadow.ml", 4, 336, 485), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 3)), 0, 0); Tag3 (("Annot", 7467), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 5, 486, 524), ("src/shadow/ocaml_shadow.ml", 5, 486, 534), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated", (("src/shadow/ocaml_shadow.ml", 5, 486, 536), ("src/shadow/ocaml_shadow.ml", 5, 486, 580), 0), 0)), (("src/shadow/ocaml_shadow.ml", 5, 486, 535), ("src/shadow/ocaml_shadow.ml", 5, 486, 581), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 5, 486, 535), ("src/shadow/ocaml_shadow.ml", 5, 486, 581), 0))]), (("src/shadow/ocaml_shadow.ml", 5, 486, 521), ("src/shadow/ocaml_shadow.ml", 5, 486, 582), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 4)), 0, 0); Tag3 (("Arch", 7468), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 6, 583, 620), ("src/shadow/ocaml_shadow.ml", 6, 583, 630), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Arch instead", (("src/shadow/ocaml_shadow.ml", 6, 583, 632), ("src/shadow/ocaml_shadow.ml", 6, 583, 708), 0), 0)), (("src/shadow/ocaml_shadow.ml", 6, 583, 631), ("src/shadow/ocaml_shadow.ml", 6, 583, 709), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 6, 583, 631), ("src/shadow/ocaml_shadow.ml", 6, 583, 709), 0))]), (("src/shadow/ocaml_shadow.ml", 6, 583, 617), ("src/shadow/ocaml_shadow.ml", 6, 583, 710), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 5)), 0, 0); Tag3 (("Arg_helper", 7469), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 7, 711, 754), ("src/shadow/ocaml_shadow.ml", 7, 711, 764), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Arg_helper instead", (("src/shadow/ocaml_shadow.ml", 7, 711, 766), ("src/shadow/ocaml_shadow.ml", 7, 711, 847), 0), 0)), (("src/shadow/ocaml_shadow.ml", 7, 711, 765), ("src/shadow/ocaml_shadow.ml", 7, 711, 848), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 7, 711, 765), ("src/shadow/ocaml_shadow.ml", 7, 711, 848), 0))]), (("src/shadow/ocaml_shadow.ml", 7, 711, 751), ("src/shadow/ocaml_shadow.ml", 7, 711, 849), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 6)), 0, 0); Tag3 (("Asmgen", 7470), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 8, 850, 889), ("src/shadow/ocaml_shadow.ml", 8, 850, 899), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Asmgen instead", (("src/shadow/ocaml_shadow.ml", 8, 850, 901), ("src/shadow/ocaml_shadow.ml", 8, 850, 979), 0), 0)), (("src/shadow/ocaml_shadow.ml", 8, 850, 900), ("src/shadow/ocaml_shadow.ml", 8, 850, 980), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 8, 850, 900), ("src/shadow/ocaml_shadow.ml", 8, 850, 980), 0))]), (("src/shadow/ocaml_shadow.ml", 8, 850, 886), ("src/shadow/ocaml_shadow.ml", 8, 850, 981), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 7)), 0, 0); Tag3 (("Asmlibrarian", 7471), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 9, 982, 1027), ("src/shadow/ocaml_shadow.ml", 9, 982, 1037), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Asmlibrarian instead", (("src/shadow/ocaml_shadow.ml", 9, 982, 1039), ("src/shadow/ocaml_shadow.ml", 9, 982, 1123), 0), 0)), (("src/shadow/ocaml_shadow.ml", 9, 982, 1038), ("src/shadow/ocaml_shadow.ml", 9, 982, 1124), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 9, 982, 1038), ("src/shadow/ocaml_shadow.ml", 9, 982, 1124), 0))]), (("src/shadow/ocaml_shadow.ml", 9, 982, 1024), ("src/shadow/ocaml_shadow.ml", 9, 982, 1125), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 8)), 0, 0); Tag3 (("Asmlink", 7472), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 10, 1126, 1166), ("src/shadow/ocaml_shadow.ml", 10, 1126, 1176), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Asmlink instead", (("src/shadow/ocaml_shadow.ml", 10, 1126, 1178), ("src/shadow/ocaml_shadow.ml", 10, 1126, 1257), 0), 0)), (("src/shadow/ocaml_shadow.ml", 10, 1126, 1177), ("src/shadow/ocaml_shadow.ml", 10, 1126, 1258), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 10, 1126, 1177), ("src/shadow/ocaml_shadow.ml", 10, 1126, 1258), 0))]), (("src/shadow/ocaml_shadow.ml", 10, 1126, 1163), ("src/shadow/ocaml_shadow.ml", 10, 1126, 1259), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 9)), 0, 0); Tag3 (("Asmpackager", 7473), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 11, 1260, 1304), ("src/shadow/ocaml_shadow.ml", 11, 1260, 1314), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Asmpackager instead", (("src/shadow/ocaml_shadow.ml", 11, 1260, 1316), ("src/shadow/ocaml_shadow.ml", 11, 1260, 1399), 0), 0)), (("src/shadow/ocaml_shadow.ml", 11, 1260, 1315), ("src/shadow/ocaml_shadow.ml", 11, 1260, 1400), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 11, 1260, 1315), ("src/shadow/ocaml_shadow.ml", 11, 1260, 1400), 0))]), (("src/shadow/ocaml_shadow.ml", 11, 1260, 1301), ("src/shadow/ocaml_shadow.ml", 11, 1260, 1401), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 10)), 0, 0); Tag3 (("Ast_invariants", 7474), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 13, 1541, 1588), ("src/shadow/ocaml_shadow.ml", 13, 1541, 1598), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Ast_invariants instead", (("src/shadow/ocaml_shadow.ml", 13, 1541, 1600), ("src/shadow/ocaml_shadow.ml", 13, 1541, 1685), 0), 0)), (("src/shadow/ocaml_shadow.ml", 13, 1541, 1599), ("src/shadow/ocaml_shadow.ml", 13, 1541, 1686), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 13, 1541, 1599), ("src/shadow/ocaml_shadow.ml", 13, 1541, 1686), 0))]), (("src/shadow/ocaml_shadow.ml", 13, 1541, 1585), ("src/shadow/ocaml_shadow.ml", 13, 1541, 1687), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 12)), 0, 0); Tag3 (("Ast_iterator", 7475), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 14, 1688, 1733), ("src/shadow/ocaml_shadow.ml", 14, 1688, 1743), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Ast_iterator instead", (("src/shadow/ocaml_shadow.ml", 14, 1688, 1745), ("src/shadow/ocaml_shadow.ml", 14, 1688, 1828), 0), 0)), (("src/shadow/ocaml_shadow.ml", 14, 1688, 1744), ("src/shadow/ocaml_shadow.ml", 14, 1688, 1829), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 14, 1688, 1744), ("src/shadow/ocaml_shadow.ml", 14, 1688, 1829), 0))]), (("src/shadow/ocaml_shadow.ml", 14, 1688, 1730), ("src/shadow/ocaml_shadow.ml", 14, 1688, 1830), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 13)), 0, 0); Tag3 (("Ast_mapper", 7476), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 15, 1831, 1874), ("src/shadow/ocaml_shadow.ml", 15, 1831, 1884), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Ast_mapper instead", (("src/shadow/ocaml_shadow.ml", 15, 1831, 1886), ("src/shadow/ocaml_shadow.ml", 15, 1831, 1967), 0), 0)), (("src/shadow/ocaml_shadow.ml", 15, 1831, 1885), ("src/shadow/ocaml_shadow.ml", 15, 1831, 1968), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 15, 1831, 1885), ("src/shadow/ocaml_shadow.ml", 15, 1831, 1968), 0))]), (("src/shadow/ocaml_shadow.ml", 15, 1831, 1871), ("src/shadow/ocaml_shadow.ml", 15, 1831, 1969), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 14)), 0, 0); Tag3 (("Attr_helper", 7477), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 17, 2070, 2114), ("src/shadow/ocaml_shadow.ml", 17, 2070, 2124), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Attr_helper instead", (("src/shadow/ocaml_shadow.ml", 17, 2070, 2126), ("src/shadow/ocaml_shadow.ml", 17, 2070, 2208), 0), 0)), (("src/shadow/ocaml_shadow.ml", 17, 2070, 2125), ("src/shadow/ocaml_shadow.ml", 17, 2070, 2209), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 17, 2070, 2125), ("src/shadow/ocaml_shadow.ml", 17, 2070, 2209), 0))]), (("src/shadow/ocaml_shadow.ml", 17, 2070, 2111), ("src/shadow/ocaml_shadow.ml", 17, 2070, 2210), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 16)), 0, 0); Tag3 (("Augment_specialised_args", 7478), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 18, 2211, 2268), ("src/shadow/ocaml_shadow.ml", 18, 2211, 2278), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Augment_specialised_args instead", (("src/shadow/ocaml_shadow.ml", 18, 2211, 2280), ("src/shadow/ocaml_shadow.ml", 18, 2211, 2376), 0), 0)), (("src/shadow/ocaml_shadow.ml", 18, 2211, 2279), ("src/shadow/ocaml_shadow.ml", 18, 2211, 2377), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 18, 2211, 2279), ("src/shadow/ocaml_shadow.ml", 18, 2211, 2377), 0))]), (("src/shadow/ocaml_shadow.ml", 18, 2211, 2265), ("src/shadow/ocaml_shadow.ml", 18, 2211, 2378), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 17)), 0, 0); Tag3 (("Backend_intf", 7479), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 19, 2379, 2424), ("src/shadow/ocaml_shadow.ml", 19, 2379, 2434), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated", (("src/shadow/ocaml_shadow.ml", 19, 2379, 2436), ("src/shadow/ocaml_shadow.ml", 19, 2379, 2480), 0), 0)), (("src/shadow/ocaml_shadow.ml", 19, 2379, 2435), ("src/shadow/ocaml_shadow.ml", 19, 2379, 2481), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 19, 2379, 2435), ("src/shadow/ocaml_shadow.ml", 19, 2379, 2481), 0))]), (("src/shadow/ocaml_shadow.ml", 19, 2379, 2421), ("src/shadow/ocaml_shadow.ml", 19, 2379, 2482), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 18)), 0, 0); Tag3 (("Backend_var", 7480), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 20, 2483, 2527), ("src/shadow/ocaml_shadow.ml", 20, 2483, 2537), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Backend_var instead", (("src/shadow/ocaml_shadow.ml", 20, 2483, 2539), ("src/shadow/ocaml_shadow.ml", 20, 2483, 2622), 0), 0)), (("src/shadow/ocaml_shadow.ml", 20, 2483, 2538), ("src/shadow/ocaml_shadow.ml", 20, 2483, 2623), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 20, 2483, 2538), ("src/shadow/ocaml_shadow.ml", 20, 2483, 2623), 0))]), (("src/shadow/ocaml_shadow.ml", 20, 2483, 2524), ("src/shadow/ocaml_shadow.ml", 20, 2483, 2624), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 19)), 0, 0); Tag3 (("Binutils", 7481), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 21, 2625, 2666), ("src/shadow/ocaml_shadow.ml", 21, 2625, 2676), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Binutils instead", (("src/shadow/ocaml_shadow.ml", 21, 2625, 2678), ("src/shadow/ocaml_shadow.ml", 21, 2625, 2757), 0), 0)), (("src/shadow/ocaml_shadow.ml", 21, 2625, 2677), ("src/shadow/ocaml_shadow.ml", 21, 2625, 2758), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 21, 2625, 2677), ("src/shadow/ocaml_shadow.ml", 21, 2625, 2758), 0))]), (("src/shadow/ocaml_shadow.ml", 21, 2625, 2663), ("src/shadow/ocaml_shadow.ml", 21, 2625, 2759), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 20)), 0, 0); Tag3 (("Branch_relaxation", 7482), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 22, 2760, 2810), ("src/shadow/ocaml_shadow.ml", 22, 2760, 2820), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Branch_relaxation instead", (("src/shadow/ocaml_shadow.ml", 22, 2760, 2822), ("src/shadow/ocaml_shadow.ml", 22, 2760, 2911), 0), 0)), (("src/shadow/ocaml_shadow.ml", 22, 2760, 2821), ("src/shadow/ocaml_shadow.ml", 22, 2760, 2912), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 22, 2760, 2821), ("src/shadow/ocaml_shadow.ml", 22, 2760, 2912), 0))]), (("src/shadow/ocaml_shadow.ml", 22, 2760, 2807), ("src/shadow/ocaml_shadow.ml", 22, 2760, 2913), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 21)), 0, 0); Tag3 (("Branch_relaxation_intf", 7483), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 23, 2914, 2969), ("src/shadow/ocaml_shadow.ml", 23, 2914, 2979), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated", (("src/shadow/ocaml_shadow.ml", 23, 2914, 2981), ("src/shadow/ocaml_shadow.ml", 23, 2914, 3025), 0), 0)), (("src/shadow/ocaml_shadow.ml", 23, 2914, 2980), ("src/shadow/ocaml_shadow.ml", 23, 2914, 3026), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 23, 2914, 2980), ("src/shadow/ocaml_shadow.ml", 23, 2914, 3026), 0))]), (("src/shadow/ocaml_shadow.ml", 23, 2914, 2966), ("src/shadow/ocaml_shadow.ml", 23, 2914, 3027), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 22)), 0, 0); Tag3 (("Btype", 7484), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 24, 3028, 3066), ("src/shadow/ocaml_shadow.ml", 24, 3028, 3076), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Btype instead", (("src/shadow/ocaml_shadow.ml", 24, 3028, 3078), ("src/shadow/ocaml_shadow.ml", 24, 3028, 3154), 0), 0)), (("src/shadow/ocaml_shadow.ml", 24, 3028, 3077), ("src/shadow/ocaml_shadow.ml", 24, 3028, 3155), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 24, 3028, 3077), ("src/shadow/ocaml_shadow.ml", 24, 3028, 3155), 0))]), (("src/shadow/ocaml_shadow.ml", 24, 3028, 3063), ("src/shadow/ocaml_shadow.ml", 24, 3028, 3156), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 23)), 0, 0); Tag3 (("Build_export_info", 7485), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 25, 3157, 3207), ("src/shadow/ocaml_shadow.ml", 25, 3157, 3217), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Build_export_info instead", (("src/shadow/ocaml_shadow.ml", 25, 3157, 3219), ("src/shadow/ocaml_shadow.ml", 25, 3157, 3308), 0), 0)), (("src/shadow/ocaml_shadow.ml", 25, 3157, 3218), ("src/shadow/ocaml_shadow.ml", 25, 3157, 3309), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 25, 3157, 3218), ("src/shadow/ocaml_shadow.ml", 25, 3157, 3309), 0))]), (("src/shadow/ocaml_shadow.ml", 25, 3157, 3204), ("src/shadow/ocaml_shadow.ml", 25, 3157, 3310), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 24)), 0, 0); Tag3 (("Build_path_prefix_map", 7486), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 26, 3311, 3365), ("src/shadow/ocaml_shadow.ml", 26, 3311, 3375), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Build_path_prefix_map instead", (("src/shadow/ocaml_shadow.ml", 26, 3311, 3377), ("src/shadow/ocaml_shadow.ml", 26, 3311, 3469), 0), 0)), (("src/shadow/ocaml_shadow.ml", 26, 3311, 3376), ("src/shadow/ocaml_shadow.ml", 26, 3311, 3470), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 26, 3311, 3376), ("src/shadow/ocaml_shadow.ml", 26, 3311, 3470), 0))]), (("src/shadow/ocaml_shadow.ml", 26, 3311, 3362), ("src/shadow/ocaml_shadow.ml", 26, 3311, 3471), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 25)), 0, 0); Tag3 (("Builtin_attributes", 7487), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 27, 3472, 3523), ("src/shadow/ocaml_shadow.ml", 27, 3472, 3533), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Builtin_attributes instead", (("src/shadow/ocaml_shadow.ml", 27, 3472, 3535), ("src/shadow/ocaml_shadow.ml", 27, 3472, 3624), 0), 0)), (("src/shadow/ocaml_shadow.ml", 27, 3472, 3534), ("src/shadow/ocaml_shadow.ml", 27, 3472, 3625), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 27, 3472, 3534), ("src/shadow/ocaml_shadow.ml", 27, 3472, 3625), 0))]), (("src/shadow/ocaml_shadow.ml", 27, 3472, 3520), ("src/shadow/ocaml_shadow.ml", 27, 3472, 3626), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 26)), 0, 0); Tag3 (("Bytegen", 7488), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 28, 3627, 3667), ("src/shadow/ocaml_shadow.ml", 28, 3627, 3677), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_bytecomp.Bytegen instead", (("src/shadow/ocaml_shadow.ml", 28, 3627, 3679), ("src/shadow/ocaml_shadow.ml", 28, 3627, 3759), 0), 0)), (("src/shadow/ocaml_shadow.ml", 28, 3627, 3678), ("src/shadow/ocaml_shadow.ml", 28, 3627, 3760), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 28, 3627, 3678), ("src/shadow/ocaml_shadow.ml", 28, 3627, 3760), 0))]), (("src/shadow/ocaml_shadow.ml", 28, 3627, 3664), ("src/shadow/ocaml_shadow.ml", 28, 3627, 3761), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 27)), 0, 0); Tag3 (("Bytelibrarian", 7489), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 29, 3762, 3808), ("src/shadow/ocaml_shadow.ml", 29, 3762, 3818), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_bytecomp.Bytelibrarian instead", (("src/shadow/ocaml_shadow.ml", 29, 3762, 3820), ("src/shadow/ocaml_shadow.ml", 29, 3762, 3906), 0), 0)), (("src/shadow/ocaml_shadow.ml", 29, 3762, 3819), ("src/shadow/ocaml_shadow.ml", 29, 3762, 3907), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 29, 3762, 3819), ("src/shadow/ocaml_shadow.ml", 29, 3762, 3907), 0))]), (("src/shadow/ocaml_shadow.ml", 29, 3762, 3805), ("src/shadow/ocaml_shadow.ml", 29, 3762, 3908), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 28)), 0, 0); Tag3 (("Bytelink", 7490), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 30, 3909, 3950), ("src/shadow/ocaml_shadow.ml", 30, 3909, 3960), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_bytecomp.Bytelink instead", (("src/shadow/ocaml_shadow.ml", 30, 3909, 3962), ("src/shadow/ocaml_shadow.ml", 30, 3909, 4043), 0), 0)), (("src/shadow/ocaml_shadow.ml", 30, 3909, 3961), ("src/shadow/ocaml_shadow.ml", 30, 3909, 4044), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 30, 3909, 3961), ("src/shadow/ocaml_shadow.ml", 30, 3909, 4044), 0))]), (("src/shadow/ocaml_shadow.ml", 30, 3909, 3947), ("src/shadow/ocaml_shadow.ml", 30, 3909, 4045), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 29)), 0, 0); Tag3 (("Bytepackager", 7491), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 31, 4046, 4091), ("src/shadow/ocaml_shadow.ml", 31, 4046, 4101), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_bytecomp.Bytepackager instead", (("src/shadow/ocaml_shadow.ml", 31, 4046, 4103), ("src/shadow/ocaml_shadow.ml", 31, 4046, 4188), 0), 0)), (("src/shadow/ocaml_shadow.ml", 31, 4046, 4102), ("src/shadow/ocaml_shadow.ml", 31, 4046, 4189), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 31, 4046, 4102), ("src/shadow/ocaml_shadow.ml", 31, 4046, 4189), 0))]), (("src/shadow/ocaml_shadow.ml", 31, 4046, 4088), ("src/shadow/ocaml_shadow.ml", 31, 4046, 4190), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 30)), 0, 0); Tag3 (("Bytesections", 7492), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 32, 4191, 4236), ("src/shadow/ocaml_shadow.ml", 32, 4191, 4246), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Bytesections instead", (("src/shadow/ocaml_shadow.ml", 32, 4191, 4248), ("src/shadow/ocaml_shadow.ml", 32, 4191, 4331), 0), 0)), (("src/shadow/ocaml_shadow.ml", 32, 4191, 4247), ("src/shadow/ocaml_shadow.ml", 32, 4191, 4332), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 32, 4191, 4247), ("src/shadow/ocaml_shadow.ml", 32, 4191, 4332), 0))]), (("src/shadow/ocaml_shadow.ml", 32, 4191, 4233), ("src/shadow/ocaml_shadow.ml", 32, 4191, 4333), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 31)), 0, 0); Tag3 (("CSE", 7493), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 33, 4334, 4370), ("src/shadow/ocaml_shadow.ml", 33, 4334, 4380), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.CSE instead", (("src/shadow/ocaml_shadow.ml", 33, 4334, 4382), ("src/shadow/ocaml_shadow.ml", 33, 4334, 4457), 0), 0)), (("src/shadow/ocaml_shadow.ml", 33, 4334, 4381), ("src/shadow/ocaml_shadow.ml", 33, 4334, 4458), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 33, 4334, 4381), ("src/shadow/ocaml_shadow.ml", 33, 4334, 4458), 0))]), (("src/shadow/ocaml_shadow.ml", 33, 4334, 4367), ("src/shadow/ocaml_shadow.ml", 33, 4334, 4459), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 32)), 0, 0); Tag3 (("CSEgen", 7494), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 34, 4460, 4499), ("src/shadow/ocaml_shadow.ml", 34, 4460, 4509), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.CSEgen instead", (("src/shadow/ocaml_shadow.ml", 34, 4460, 4511), ("src/shadow/ocaml_shadow.ml", 34, 4460, 4589), 0), 0)), (("src/shadow/ocaml_shadow.ml", 34, 4460, 4510), ("src/shadow/ocaml_shadow.ml", 34, 4460, 4590), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 34, 4460, 4510), ("src/shadow/ocaml_shadow.ml", 34, 4460, 4590), 0))]), (("src/shadow/ocaml_shadow.ml", 34, 4460, 4496), ("src/shadow/ocaml_shadow.ml", 34, 4460, 4591), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 33)), 0, 0); Tag3 (("CamlinternalMenhirLib", 7495), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 35, 4592, 4646), ("src/shadow/ocaml_shadow.ml", 35, 4592, 4656), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.CamlinternalMenhirLib instead", (("src/shadow/ocaml_shadow.ml", 35, 4592, 4658), ("src/shadow/ocaml_shadow.ml", 35, 4592, 4750), 0), 0)), (("src/shadow/ocaml_shadow.ml", 35, 4592, 4657), ("src/shadow/ocaml_shadow.ml", 35, 4592, 4751), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 35, 4592, 4657), ("src/shadow/ocaml_shadow.ml", 35, 4592, 4751), 0))]), (("src/shadow/ocaml_shadow.ml", 35, 4592, 4643), ("src/shadow/ocaml_shadow.ml", 35, 4592, 4752), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 34)), 0, 0); Tag3 (("Ccomp", 7496), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 36, 4753, 4791), ("src/shadow/ocaml_shadow.ml", 36, 4753, 4801), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Ccomp instead", (("src/shadow/ocaml_shadow.ml", 36, 4753, 4803), ("src/shadow/ocaml_shadow.ml", 36, 4753, 4879), 0), 0)), (("src/shadow/ocaml_shadow.ml", 36, 4753, 4802), ("src/shadow/ocaml_shadow.ml", 36, 4753, 4880), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 36, 4753, 4802), ("src/shadow/ocaml_shadow.ml", 36, 4753, 4880), 0))]), (("src/shadow/ocaml_shadow.ml", 36, 4753, 4788), ("src/shadow/ocaml_shadow.ml", 36, 4753, 4881), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 35)), 0, 0); Tag3 (("Clambda", 7497), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 37, 4882, 4922), ("src/shadow/ocaml_shadow.ml", 37, 4882, 4932), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Clambda instead", (("src/shadow/ocaml_shadow.ml", 37, 4882, 4934), ("src/shadow/ocaml_shadow.ml", 37, 4882, 5013), 0), 0)), (("src/shadow/ocaml_shadow.ml", 37, 4882, 4933), ("src/shadow/ocaml_shadow.ml", 37, 4882, 5014), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 37, 4882, 4933), ("src/shadow/ocaml_shadow.ml", 37, 4882, 5014), 0))]), (("src/shadow/ocaml_shadow.ml", 37, 4882, 4919), ("src/shadow/ocaml_shadow.ml", 37, 4882, 5015), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 36)), 0, 0); Tag3 (("Clambda_primitives", 7498), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 38, 5016, 5067), ("src/shadow/ocaml_shadow.ml", 38, 5016, 5077), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Clambda_primitives instead", (("src/shadow/ocaml_shadow.ml", 38, 5016, 5079), ("src/shadow/ocaml_shadow.ml", 38, 5016, 5169), 0), 0)), (("src/shadow/ocaml_shadow.ml", 38, 5016, 5078), ("src/shadow/ocaml_shadow.ml", 38, 5016, 5170), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 38, 5016, 5078), ("src/shadow/ocaml_shadow.ml", 38, 5016, 5170), 0))]), (("src/shadow/ocaml_shadow.ml", 38, 5016, 5064), ("src/shadow/ocaml_shadow.ml", 38, 5016, 5171), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 37)), 0, 0); Tag3 (("Clflags", 7499), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 39, 5172, 5212), ("src/shadow/ocaml_shadow.ml", 39, 5172, 5222), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Clflags instead", (("src/shadow/ocaml_shadow.ml", 39, 5172, 5224), ("src/shadow/ocaml_shadow.ml", 39, 5172, 5302), 0), 0)), (("src/shadow/ocaml_shadow.ml", 39, 5172, 5223), ("src/shadow/ocaml_shadow.ml", 39, 5172, 5303), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 39, 5172, 5223), ("src/shadow/ocaml_shadow.ml", 39, 5172, 5303), 0))]), (("src/shadow/ocaml_shadow.ml", 39, 5172, 5209), ("src/shadow/ocaml_shadow.ml", 39, 5172, 5304), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 38)), 0, 0); Tag3 (("Closure", 7500), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 40, 5305, 5345), ("src/shadow/ocaml_shadow.ml", 40, 5305, 5355), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Closure instead", (("src/shadow/ocaml_shadow.ml", 40, 5305, 5357), ("src/shadow/ocaml_shadow.ml", 40, 5305, 5436), 0), 0)), (("src/shadow/ocaml_shadow.ml", 40, 5305, 5356), ("src/shadow/ocaml_shadow.ml", 40, 5305, 5437), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 40, 5305, 5356), ("src/shadow/ocaml_shadow.ml", 40, 5305, 5437), 0))]), (("src/shadow/ocaml_shadow.ml", 40, 5305, 5342), ("src/shadow/ocaml_shadow.ml", 40, 5305, 5438), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 39)), 0, 0); Tag3 (("Closure_conversion", 7501), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 41, 5439, 5490), ("src/shadow/ocaml_shadow.ml", 41, 5439, 5500), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Closure_conversion instead", (("src/shadow/ocaml_shadow.ml", 41, 5439, 5502), ("src/shadow/ocaml_shadow.ml", 41, 5439, 5592), 0), 0)), (("src/shadow/ocaml_shadow.ml", 41, 5439, 5501), ("src/shadow/ocaml_shadow.ml", 41, 5439, 5593), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 41, 5439, 5501), ("src/shadow/ocaml_shadow.ml", 41, 5439, 5593), 0))]), (("src/shadow/ocaml_shadow.ml", 41, 5439, 5487), ("src/shadow/ocaml_shadow.ml", 41, 5439, 5594), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 40)), 0, 0); Tag3 (("Closure_conversion_aux", 7502), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 42, 5595, 5650), ("src/shadow/ocaml_shadow.ml", 42, 5595, 5660), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Closure_conversion_aux instead", (("src/shadow/ocaml_shadow.ml", 42, 5595, 5662), ("src/shadow/ocaml_shadow.ml", 42, 5595, 5756), 0), 0)), (("src/shadow/ocaml_shadow.ml", 42, 5595, 5661), ("src/shadow/ocaml_shadow.ml", 42, 5595, 5757), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 42, 5595, 5661), ("src/shadow/ocaml_shadow.ml", 42, 5595, 5757), 0))]), (("src/shadow/ocaml_shadow.ml", 42, 5595, 5647), ("src/shadow/ocaml_shadow.ml", 42, 5595, 5758), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 41)), 0, 0); Tag3 (("Closure_element", 7503), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 43, 5759, 5807), ("src/shadow/ocaml_shadow.ml", 43, 5759, 5817), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Closure_element instead", (("src/shadow/ocaml_shadow.ml", 43, 5759, 5819), ("src/shadow/ocaml_shadow.ml", 43, 5759, 5906), 0), 0)), (("src/shadow/ocaml_shadow.ml", 43, 5759, 5818), ("src/shadow/ocaml_shadow.ml", 43, 5759, 5907), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 43, 5759, 5818), ("src/shadow/ocaml_shadow.ml", 43, 5759, 5907), 0))]), (("src/shadow/ocaml_shadow.ml", 43, 5759, 5804), ("src/shadow/ocaml_shadow.ml", 43, 5759, 5908), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 42)), 0, 0); Tag3 (("Closure_id", 7504), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 44, 5909, 5952), ("src/shadow/ocaml_shadow.ml", 44, 5909, 5962), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Closure_id instead", (("src/shadow/ocaml_shadow.ml", 44, 5909, 5964), ("src/shadow/ocaml_shadow.ml", 44, 5909, 6046), 0), 0)), (("src/shadow/ocaml_shadow.ml", 44, 5909, 5963), ("src/shadow/ocaml_shadow.ml", 44, 5909, 6047), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 44, 5909, 5963), ("src/shadow/ocaml_shadow.ml", 44, 5909, 6047), 0))]), (("src/shadow/ocaml_shadow.ml", 44, 5909, 5949), ("src/shadow/ocaml_shadow.ml", 44, 5909, 6048), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 43)), 0, 0); Tag3 (("Closure_middle_end", 7505), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 45, 6049, 6100), ("src/shadow/ocaml_shadow.ml", 45, 6049, 6110), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Closure_middle_end instead", (("src/shadow/ocaml_shadow.ml", 45, 6049, 6112), ("src/shadow/ocaml_shadow.ml", 45, 6049, 6202), 0), 0)), (("src/shadow/ocaml_shadow.ml", 45, 6049, 6111), ("src/shadow/ocaml_shadow.ml", 45, 6049, 6203), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 45, 6049, 6111), ("src/shadow/ocaml_shadow.ml", 45, 6049, 6203), 0))]), (("src/shadow/ocaml_shadow.ml", 45, 6049, 6097), ("src/shadow/ocaml_shadow.ml", 45, 6049, 6204), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 44)), 0, 0); Tag3 (("Closure_offsets", 7506), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 46, 6205, 6253), ("src/shadow/ocaml_shadow.ml", 46, 6205, 6263), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Closure_offsets instead", (("src/shadow/ocaml_shadow.ml", 46, 6205, 6265), ("src/shadow/ocaml_shadow.ml", 46, 6205, 6352), 0), 0)), (("src/shadow/ocaml_shadow.ml", 46, 6205, 6264), ("src/shadow/ocaml_shadow.ml", 46, 6205, 6353), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 46, 6205, 6264), ("src/shadow/ocaml_shadow.ml", 46, 6205, 6353), 0))]), (("src/shadow/ocaml_shadow.ml", 46, 6205, 6250), ("src/shadow/ocaml_shadow.ml", 46, 6205, 6354), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 45)), 0, 0); Tag3 (("Closure_origin", 7507), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 47, 6355, 6402), ("src/shadow/ocaml_shadow.ml", 47, 6355, 6412), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Closure_origin instead", (("src/shadow/ocaml_shadow.ml", 47, 6355, 6414), ("src/shadow/ocaml_shadow.ml", 47, 6355, 6500), 0), 0)), (("src/shadow/ocaml_shadow.ml", 47, 6355, 6413), ("src/shadow/ocaml_shadow.ml", 47, 6355, 6501), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 47, 6355, 6413), ("src/shadow/ocaml_shadow.ml", 47, 6355, 6501), 0))]), (("src/shadow/ocaml_shadow.ml", 47, 6355, 6399), ("src/shadow/ocaml_shadow.ml", 47, 6355, 6502), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 46)), 0, 0); Tag3 (("Cmi_format", 7508), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 48, 6503, 6546), ("src/shadow/ocaml_shadow.ml", 48, 6503, 6556), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Cmi_format instead", (("src/shadow/ocaml_shadow.ml", 48, 6503, 6558), ("src/shadow/ocaml_shadow.ml", 48, 6503, 6639), 0), 0)), (("src/shadow/ocaml_shadow.ml", 48, 6503, 6557), ("src/shadow/ocaml_shadow.ml", 48, 6503, 6640), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 48, 6503, 6557), ("src/shadow/ocaml_shadow.ml", 48, 6503, 6640), 0))]), (("src/shadow/ocaml_shadow.ml", 48, 6503, 6543), ("src/shadow/ocaml_shadow.ml", 48, 6503, 6641), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 47)), 0, 0); Tag3 (("Cmm", 7509), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 49, 6642, 6678), ("src/shadow/ocaml_shadow.ml", 49, 6642, 6688), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Cmm instead", (("src/shadow/ocaml_shadow.ml", 49, 6642, 6690), ("src/shadow/ocaml_shadow.ml", 49, 6642, 6765), 0), 0)), (("src/shadow/ocaml_shadow.ml", 49, 6642, 6689), ("src/shadow/ocaml_shadow.ml", 49, 6642, 6766), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 49, 6642, 6689), ("src/shadow/ocaml_shadow.ml", 49, 6642, 6766), 0))]), (("src/shadow/ocaml_shadow.ml", 49, 6642, 6675), ("src/shadow/ocaml_shadow.ml", 49, 6642, 6767), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 48)), 0, 0); Tag3 (("Cmm_helpers", 7510), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 50, 6768, 6812), ("src/shadow/ocaml_shadow.ml", 50, 6768, 6822), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Cmm_helpers instead", (("src/shadow/ocaml_shadow.ml", 50, 6768, 6824), ("src/shadow/ocaml_shadow.ml", 50, 6768, 6907), 0), 0)), (("src/shadow/ocaml_shadow.ml", 50, 6768, 6823), ("src/shadow/ocaml_shadow.ml", 50, 6768, 6908), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 50, 6768, 6823), ("src/shadow/ocaml_shadow.ml", 50, 6768, 6908), 0))]), (("src/shadow/ocaml_shadow.ml", 50, 6768, 6809), ("src/shadow/ocaml_shadow.ml", 50, 6768, 6909), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 49)), 0, 0); Tag3 (("Cmm_invariants", 7511), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 51, 6910, 6957), ("src/shadow/ocaml_shadow.ml", 51, 6910, 6967), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Cmm_invariants instead", (("src/shadow/ocaml_shadow.ml", 51, 6910, 6969), ("src/shadow/ocaml_shadow.ml", 51, 6910, 7055), 0), 0)), (("src/shadow/ocaml_shadow.ml", 51, 6910, 6968), ("src/shadow/ocaml_shadow.ml", 51, 6910, 7056), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 51, 6910, 6968), ("src/shadow/ocaml_shadow.ml", 51, 6910, 7056), 0))]), (("src/shadow/ocaml_shadow.ml", 51, 6910, 6954), ("src/shadow/ocaml_shadow.ml", 51, 6910, 7057), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 50)), 0, 0); Tag3 (("Cmmgen", 7512), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 52, 7058, 7097), ("src/shadow/ocaml_shadow.ml", 52, 7058, 7107), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Cmmgen instead", (("src/shadow/ocaml_shadow.ml", 52, 7058, 7109), ("src/shadow/ocaml_shadow.ml", 52, 7058, 7187), 0), 0)), (("src/shadow/ocaml_shadow.ml", 52, 7058, 7108), ("src/shadow/ocaml_shadow.ml", 52, 7058, 7188), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 52, 7058, 7108), ("src/shadow/ocaml_shadow.ml", 52, 7058, 7188), 0))]), (("src/shadow/ocaml_shadow.ml", 52, 7058, 7094), ("src/shadow/ocaml_shadow.ml", 52, 7058, 7189), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 51)), 0, 0); Tag3 (("Cmmgen_state", 7513), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 53, 7190, 7235), ("src/shadow/ocaml_shadow.ml", 53, 7190, 7245), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Cmmgen_state instead", (("src/shadow/ocaml_shadow.ml", 53, 7190, 7247), ("src/shadow/ocaml_shadow.ml", 53, 7190, 7331), 0), 0)), (("src/shadow/ocaml_shadow.ml", 53, 7190, 7246), ("src/shadow/ocaml_shadow.ml", 53, 7190, 7332), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 53, 7190, 7246), ("src/shadow/ocaml_shadow.ml", 53, 7190, 7332), 0))]), (("src/shadow/ocaml_shadow.ml", 53, 7190, 7232), ("src/shadow/ocaml_shadow.ml", 53, 7190, 7333), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 52)), 0, 0); Tag3 (("Cmo_format", 7514), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 54, 7334, 7377), ("src/shadow/ocaml_shadow.ml", 54, 7334, 7387), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated", (("src/shadow/ocaml_shadow.ml", 54, 7334, 7389), ("src/shadow/ocaml_shadow.ml", 54, 7334, 7433), 0), 0)), (("src/shadow/ocaml_shadow.ml", 54, 7334, 7388), ("src/shadow/ocaml_shadow.ml", 54, 7334, 7434), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 54, 7334, 7388), ("src/shadow/ocaml_shadow.ml", 54, 7334, 7434), 0))]), (("src/shadow/ocaml_shadow.ml", 54, 7334, 7374), ("src/shadow/ocaml_shadow.ml", 54, 7334, 7435), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 53)), 0, 0); Tag3 (("Cmt2annot", 7515), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 55, 7436, 7478), ("src/shadow/ocaml_shadow.ml", 55, 7436, 7488), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Cmt2annot instead", (("src/shadow/ocaml_shadow.ml", 55, 7436, 7490), ("src/shadow/ocaml_shadow.ml", 55, 7436, 7570), 0), 0)), (("src/shadow/ocaml_shadow.ml", 55, 7436, 7489), ("src/shadow/ocaml_shadow.ml", 55, 7436, 7571), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 55, 7436, 7489), ("src/shadow/ocaml_shadow.ml", 55, 7436, 7571), 0))]), (("src/shadow/ocaml_shadow.ml", 55, 7436, 7475), ("src/shadow/ocaml_shadow.ml", 55, 7436, 7572), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 54)), 0, 0); Tag3 (("Cmt_format", 7516), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 56, 7573, 7616), ("src/shadow/ocaml_shadow.ml", 56, 7573, 7626), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Cmt_format instead", (("src/shadow/ocaml_shadow.ml", 56, 7573, 7628), ("src/shadow/ocaml_shadow.ml", 56, 7573, 7709), 0), 0)), (("src/shadow/ocaml_shadow.ml", 56, 7573, 7627), ("src/shadow/ocaml_shadow.ml", 56, 7573, 7710), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 56, 7573, 7627), ("src/shadow/ocaml_shadow.ml", 56, 7573, 7710), 0))]), (("src/shadow/ocaml_shadow.ml", 56, 7573, 7613), ("src/shadow/ocaml_shadow.ml", 56, 7573, 7711), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 55)), 0, 0); Tag3 (("Cmx_format", 7517), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 57, 7712, 7755), ("src/shadow/ocaml_shadow.ml", 57, 7712, 7765), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated", (("src/shadow/ocaml_shadow.ml", 57, 7712, 7767), ("src/shadow/ocaml_shadow.ml", 57, 7712, 7811), 0), 0)), (("src/shadow/ocaml_shadow.ml", 57, 7712, 7766), ("src/shadow/ocaml_shadow.ml", 57, 7712, 7812), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 57, 7712, 7766), ("src/shadow/ocaml_shadow.ml", 57, 7712, 7812), 0))]), (("src/shadow/ocaml_shadow.ml", 57, 7712, 7752), ("src/shadow/ocaml_shadow.ml", 57, 7712, 7813), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 56)), 0, 0); Tag3 (("Cmxs_format", 7518), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 58, 7814, 7858), ("src/shadow/ocaml_shadow.ml", 58, 7814, 7868), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated", (("src/shadow/ocaml_shadow.ml", 58, 7814, 7870), ("src/shadow/ocaml_shadow.ml", 58, 7814, 7914), 0), 0)), (("src/shadow/ocaml_shadow.ml", 58, 7814, 7869), ("src/shadow/ocaml_shadow.ml", 58, 7814, 7915), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 58, 7814, 7869), ("src/shadow/ocaml_shadow.ml", 58, 7814, 7915), 0))]), (("src/shadow/ocaml_shadow.ml", 58, 7814, 7855), ("src/shadow/ocaml_shadow.ml", 58, 7814, 7916), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 57)), 0, 0); Tag3 (("Coloring", 7519), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 59, 7917, 7958), ("src/shadow/ocaml_shadow.ml", 59, 7917, 7968), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Coloring instead", (("src/shadow/ocaml_shadow.ml", 59, 7917, 7970), ("src/shadow/ocaml_shadow.ml", 59, 7917, 8050), 0), 0)), (("src/shadow/ocaml_shadow.ml", 59, 7917, 7969), ("src/shadow/ocaml_shadow.ml", 59, 7917, 8051), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 59, 7917, 7969), ("src/shadow/ocaml_shadow.ml", 59, 7917, 8051), 0))]), (("src/shadow/ocaml_shadow.ml", 59, 7917, 7955), ("src/shadow/ocaml_shadow.ml", 59, 7917, 8052), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 58)), 0, 0); Tag3 (("Comballoc", 7520), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 60, 8053, 8095), ("src/shadow/ocaml_shadow.ml", 60, 8053, 8105), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Comballoc instead", (("src/shadow/ocaml_shadow.ml", 60, 8053, 8107), ("src/shadow/ocaml_shadow.ml", 60, 8053, 8188), 0), 0)), (("src/shadow/ocaml_shadow.ml", 60, 8053, 8106), ("src/shadow/ocaml_shadow.ml", 60, 8053, 8189), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 60, 8053, 8106), ("src/shadow/ocaml_shadow.ml", 60, 8053, 8189), 0))]), (("src/shadow/ocaml_shadow.ml", 60, 8053, 8092), ("src/shadow/ocaml_shadow.ml", 60, 8053, 8190), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 59)), 0, 0); Tag3 (("Compenv", 7521), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 61, 8191, 8231), ("src/shadow/ocaml_shadow.ml", 61, 8191, 8241), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Compenv instead", (("src/shadow/ocaml_shadow.ml", 61, 8191, 8243), ("src/shadow/ocaml_shadow.ml", 61, 8191, 8321), 0), 0)), (("src/shadow/ocaml_shadow.ml", 61, 8191, 8242), ("src/shadow/ocaml_shadow.ml", 61, 8191, 8322), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 61, 8191, 8242), ("src/shadow/ocaml_shadow.ml", 61, 8191, 8322), 0))]), (("src/shadow/ocaml_shadow.ml", 61, 8191, 8228), ("src/shadow/ocaml_shadow.ml", 61, 8191, 8323), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 60)), 0, 0); Tag3 (("Compilation_unit", 7522), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 62, 8324, 8373), ("src/shadow/ocaml_shadow.ml", 62, 8324, 8383), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Compilation_unit instead", (("src/shadow/ocaml_shadow.ml", 62, 8324, 8385), ("src/shadow/ocaml_shadow.ml", 62, 8324, 8473), 0), 0)), (("src/shadow/ocaml_shadow.ml", 62, 8324, 8384), ("src/shadow/ocaml_shadow.ml", 62, 8324, 8474), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 62, 8324, 8384), ("src/shadow/ocaml_shadow.ml", 62, 8324, 8474), 0))]), (("src/shadow/ocaml_shadow.ml", 62, 8324, 8370), ("src/shadow/ocaml_shadow.ml", 62, 8324, 8475), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 61)), 0, 0); Tag3 (("Compile", 7523), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 63, 8476, 8516), ("src/shadow/ocaml_shadow.ml", 63, 8476, 8526), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_bytecomp.Compile instead", (("src/shadow/ocaml_shadow.ml", 63, 8476, 8528), ("src/shadow/ocaml_shadow.ml", 63, 8476, 8608), 0), 0)), (("src/shadow/ocaml_shadow.ml", 63, 8476, 8527), ("src/shadow/ocaml_shadow.ml", 63, 8476, 8609), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 63, 8476, 8527), ("src/shadow/ocaml_shadow.ml", 63, 8476, 8609), 0))]), (("src/shadow/ocaml_shadow.ml", 63, 8476, 8513), ("src/shadow/ocaml_shadow.ml", 63, 8476, 8610), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 62)), 0, 0); Tag3 (("Compile_common", 7524), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 64, 8611, 8658), ("src/shadow/ocaml_shadow.ml", 64, 8611, 8668), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Compile_common instead", (("src/shadow/ocaml_shadow.ml", 64, 8611, 8670), ("src/shadow/ocaml_shadow.ml", 64, 8611, 8755), 0), 0)), (("src/shadow/ocaml_shadow.ml", 64, 8611, 8669), ("src/shadow/ocaml_shadow.ml", 64, 8611, 8756), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 64, 8611, 8669), ("src/shadow/ocaml_shadow.ml", 64, 8611, 8756), 0))]), (("src/shadow/ocaml_shadow.ml", 64, 8611, 8655), ("src/shadow/ocaml_shadow.ml", 64, 8611, 8757), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 63)), 0, 0); Tag3 (("Compilenv", 7525), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 65, 8758, 8800), ("src/shadow/ocaml_shadow.ml", 65, 8758, 8810), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Compilenv instead", (("src/shadow/ocaml_shadow.ml", 65, 8758, 8812), ("src/shadow/ocaml_shadow.ml", 65, 8758, 8893), 0), 0)), (("src/shadow/ocaml_shadow.ml", 65, 8758, 8811), ("src/shadow/ocaml_shadow.ml", 65, 8758, 8894), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 65, 8758, 8811), ("src/shadow/ocaml_shadow.ml", 65, 8758, 8894), 0))]), (("src/shadow/ocaml_shadow.ml", 65, 8758, 8797), ("src/shadow/ocaml_shadow.ml", 65, 8758, 8895), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 64)), 0, 0); Tag3 (("Compmisc", 7526), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 66, 8896, 8937), ("src/shadow/ocaml_shadow.ml", 66, 8896, 8947), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Compmisc instead", (("src/shadow/ocaml_shadow.ml", 66, 8896, 8949), ("src/shadow/ocaml_shadow.ml", 66, 8896, 9028), 0), 0)), (("src/shadow/ocaml_shadow.ml", 66, 8896, 8948), ("src/shadow/ocaml_shadow.ml", 66, 8896, 9029), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 66, 8896, 8948), ("src/shadow/ocaml_shadow.ml", 66, 8896, 9029), 0))]), (("src/shadow/ocaml_shadow.ml", 66, 8896, 8934), ("src/shadow/ocaml_shadow.ml", 66, 8896, 9030), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 65)), 0, 0); Tag3 (("Compression", 7527), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 67, 9031, 9075), ("src/shadow/ocaml_shadow.ml", 67, 9031, 9085), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Compression instead", (("src/shadow/ocaml_shadow.ml", 67, 9031, 9087), ("src/shadow/ocaml_shadow.ml", 67, 9031, 9169), 0), 0)), (("src/shadow/ocaml_shadow.ml", 67, 9031, 9086), ("src/shadow/ocaml_shadow.ml", 67, 9031, 9170), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 67, 9031, 9086), ("src/shadow/ocaml_shadow.ml", 67, 9031, 9170), 0))]), (("src/shadow/ocaml_shadow.ml", 67, 9031, 9072), ("src/shadow/ocaml_shadow.ml", 67, 9031, 9171), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 66)), 0, 0); Tag3 (("Config", 7528), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 68, 9172, 9211), ("src/shadow/ocaml_shadow.ml", 68, 9172, 9221), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Config instead", (("src/shadow/ocaml_shadow.ml", 68, 9172, 9223), ("src/shadow/ocaml_shadow.ml", 68, 9172, 9300), 0), 0)), (("src/shadow/ocaml_shadow.ml", 68, 9172, 9222), ("src/shadow/ocaml_shadow.ml", 68, 9172, 9301), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 68, 9172, 9222), ("src/shadow/ocaml_shadow.ml", 68, 9172, 9301), 0))]), (("src/shadow/ocaml_shadow.ml", 68, 9172, 9208), ("src/shadow/ocaml_shadow.ml", 68, 9172, 9302), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 67)), 0, 0); Tag3 (("Config_boot", 7529), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 69, 9303, 9347), ("src/shadow/ocaml_shadow.ml", 69, 9303, 9357), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated", (("src/shadow/ocaml_shadow.ml", 69, 9303, 9359), ("src/shadow/ocaml_shadow.ml", 69, 9303, 9403), 0), 0)), (("src/shadow/ocaml_shadow.ml", 69, 9303, 9358), ("src/shadow/ocaml_shadow.ml", 69, 9303, 9404), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 69, 9303, 9358), ("src/shadow/ocaml_shadow.ml", 69, 9303, 9404), 0))]), (("src/shadow/ocaml_shadow.ml", 69, 9303, 9344), ("src/shadow/ocaml_shadow.ml", 69, 9303, 9405), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 68)), 0, 0); Tag3 (("Config_main", 7530), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 70, 9406, 9450), ("src/shadow/ocaml_shadow.ml", 70, 9406, 9460), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated", (("src/shadow/ocaml_shadow.ml", 70, 9406, 9462), ("src/shadow/ocaml_shadow.ml", 70, 9406, 9506), 0), 0)), (("src/shadow/ocaml_shadow.ml", 70, 9406, 9461), ("src/shadow/ocaml_shadow.ml", 70, 9406, 9507), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 70, 9406, 9461), ("src/shadow/ocaml_shadow.ml", 70, 9406, 9507), 0))]), (("src/shadow/ocaml_shadow.ml", 70, 9406, 9447), ("src/shadow/ocaml_shadow.ml", 70, 9406, 9508), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 69)), 0, 0); Tag3 (("Consistbl", 7531), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 71, 9509, 9551), ("src/shadow/ocaml_shadow.ml", 71, 9509, 9561), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Consistbl instead", (("src/shadow/ocaml_shadow.ml", 71, 9509, 9563), ("src/shadow/ocaml_shadow.ml", 71, 9509, 9643), 0), 0)), (("src/shadow/ocaml_shadow.ml", 71, 9509, 9562), ("src/shadow/ocaml_shadow.ml", 71, 9509, 9644), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 71, 9509, 9562), ("src/shadow/ocaml_shadow.ml", 71, 9509, 9644), 0))]), (("src/shadow/ocaml_shadow.ml", 71, 9509, 9548), ("src/shadow/ocaml_shadow.ml", 71, 9509, 9645), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 70)), 0, 0); Tag3 (("Convert_primitives", 7532), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 72, 9646, 9697), ("src/shadow/ocaml_shadow.ml", 72, 9646, 9707), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Convert_primitives instead", (("src/shadow/ocaml_shadow.ml", 72, 9646, 9709), ("src/shadow/ocaml_shadow.ml", 72, 9646, 9799), 0), 0)), (("src/shadow/ocaml_shadow.ml", 72, 9646, 9708), ("src/shadow/ocaml_shadow.ml", 72, 9646, 9800), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 72, 9646, 9708), ("src/shadow/ocaml_shadow.ml", 72, 9646, 9800), 0))]), (("src/shadow/ocaml_shadow.ml", 72, 9646, 9694), ("src/shadow/ocaml_shadow.ml", 72, 9646, 9801), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 71)), 0, 0); Tag3 (("Ctype", 7533), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 73, 9802, 9840), ("src/shadow/ocaml_shadow.ml", 73, 9802, 9850), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Ctype instead", (("src/shadow/ocaml_shadow.ml", 73, 9802, 9852), ("src/shadow/ocaml_shadow.ml", 73, 9802, 9928), 0), 0)), (("src/shadow/ocaml_shadow.ml", 73, 9802, 9851), ("src/shadow/ocaml_shadow.ml", 73, 9802, 9929), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 73, 9802, 9851), ("src/shadow/ocaml_shadow.ml", 73, 9802, 9929), 0))]), (("src/shadow/ocaml_shadow.ml", 73, 9802, 9837), ("src/shadow/ocaml_shadow.ml", 73, 9802, 9930), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 72)), 0, 0); Tag3 (("Dataflow", 7534), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 74, 9931, 9972), ("src/shadow/ocaml_shadow.ml", 74, 9931, 9982), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Dataflow instead", (("src/shadow/ocaml_shadow.ml", 74, 9931, 9984), ("src/shadow/ocaml_shadow.ml", 74, 9931, 10064), 0), 0)), (("src/shadow/ocaml_shadow.ml", 74, 9931, 9983), ("src/shadow/ocaml_shadow.ml", 74, 9931, 10065), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 74, 9931, 9983), ("src/shadow/ocaml_shadow.ml", 74, 9931, 10065), 0))]), (("src/shadow/ocaml_shadow.ml", 74, 9931, 9969), ("src/shadow/ocaml_shadow.ml", 74, 9931, 10066), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 73)), 0, 0); Tag3 (("Datarepr", 7535), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 75, 10067, 10108), ("src/shadow/ocaml_shadow.ml", 75, 10067, 10118), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Datarepr instead", (("src/shadow/ocaml_shadow.ml", 75, 10067, 10120), ("src/shadow/ocaml_shadow.ml", 75, 10067, 10199), 0), 0)), (("src/shadow/ocaml_shadow.ml", 75, 10067, 10119), ("src/shadow/ocaml_shadow.ml", 75, 10067, 10200), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 75, 10067, 10119), ("src/shadow/ocaml_shadow.ml", 75, 10067, 10200), 0))]), (("src/shadow/ocaml_shadow.ml", 75, 10067, 10105), ("src/shadow/ocaml_shadow.ml", 75, 10067, 10201), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 74)), 0, 0); Tag3 (("Deadcode", 7536), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 76, 10202, 10243), ("src/shadow/ocaml_shadow.ml", 76, 10202, 10253), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Deadcode instead", (("src/shadow/ocaml_shadow.ml", 76, 10202, 10255), ("src/shadow/ocaml_shadow.ml", 76, 10202, 10335), 0), 0)), (("src/shadow/ocaml_shadow.ml", 76, 10202, 10254), ("src/shadow/ocaml_shadow.ml", 76, 10202, 10336), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 76, 10202, 10254), ("src/shadow/ocaml_shadow.ml", 76, 10202, 10336), 0))]), (("src/shadow/ocaml_shadow.ml", 76, 10202, 10240), ("src/shadow/ocaml_shadow.ml", 76, 10202, 10337), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 75)), 0, 0); Tag3 (("Debuginfo", 7537), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 77, 10338, 10380), ("src/shadow/ocaml_shadow.ml", 77, 10338, 10390), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Debuginfo instead", (("src/shadow/ocaml_shadow.ml", 77, 10338, 10392), ("src/shadow/ocaml_shadow.ml", 77, 10338, 10472), 0), 0)), (("src/shadow/ocaml_shadow.ml", 77, 10338, 10391), ("src/shadow/ocaml_shadow.ml", 77, 10338, 10473), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 77, 10338, 10391), ("src/shadow/ocaml_shadow.ml", 77, 10338, 10473), 0))]), (("src/shadow/ocaml_shadow.ml", 77, 10338, 10377), ("src/shadow/ocaml_shadow.ml", 77, 10338, 10474), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 76)), 0, 0); Tag3 (("Depend", 7538), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 78, 10475, 10514), ("src/shadow/ocaml_shadow.ml", 78, 10475, 10524), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Depend instead", (("src/shadow/ocaml_shadow.ml", 78, 10475, 10526), ("src/shadow/ocaml_shadow.ml", 78, 10475, 10603), 0), 0)), (("src/shadow/ocaml_shadow.ml", 78, 10475, 10525), ("src/shadow/ocaml_shadow.ml", 78, 10475, 10604), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 78, 10475, 10525), ("src/shadow/ocaml_shadow.ml", 78, 10475, 10604), 0))]), (("src/shadow/ocaml_shadow.ml", 78, 10475, 10511), ("src/shadow/ocaml_shadow.ml", 78, 10475, 10605), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 77)), 0, 0); Tag3 (("Diffing", 7539), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 79, 10606, 10646), ("src/shadow/ocaml_shadow.ml", 79, 10606, 10656), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Diffing instead", (("src/shadow/ocaml_shadow.ml", 79, 10606, 10658), ("src/shadow/ocaml_shadow.ml", 79, 10606, 10736), 0), 0)), (("src/shadow/ocaml_shadow.ml", 79, 10606, 10657), ("src/shadow/ocaml_shadow.ml", 79, 10606, 10737), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 79, 10606, 10657), ("src/shadow/ocaml_shadow.ml", 79, 10606, 10737), 0))]), (("src/shadow/ocaml_shadow.ml", 79, 10606, 10643), ("src/shadow/ocaml_shadow.ml", 79, 10606, 10738), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 78)), 0, 0); Tag3 (("Diffing_with_keys", 7540), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 80, 10739, 10789), ("src/shadow/ocaml_shadow.ml", 80, 10739, 10799), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Diffing_with_keys instead", (("src/shadow/ocaml_shadow.ml", 80, 10739, 10801), ("src/shadow/ocaml_shadow.ml", 80, 10739, 10889), 0), 0)), (("src/shadow/ocaml_shadow.ml", 80, 10739, 10800), ("src/shadow/ocaml_shadow.ml", 80, 10739, 10890), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 80, 10739, 10800), ("src/shadow/ocaml_shadow.ml", 80, 10739, 10890), 0))]), (("src/shadow/ocaml_shadow.ml", 80, 10739, 10786), ("src/shadow/ocaml_shadow.ml", 80, 10739, 10891), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 79)), 0, 0); Tag3 (("Dll", 7541), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 81, 10892, 10928), ("src/shadow/ocaml_shadow.ml", 81, 10892, 10938), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Dll instead", (("src/shadow/ocaml_shadow.ml", 81, 10892, 10940), ("src/shadow/ocaml_shadow.ml", 81, 10892, 11014), 0), 0)), (("src/shadow/ocaml_shadow.ml", 81, 10892, 10939), ("src/shadow/ocaml_shadow.ml", 81, 10892, 11015), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 81, 10892, 10939), ("src/shadow/ocaml_shadow.ml", 81, 10892, 11015), 0))]), (("src/shadow/ocaml_shadow.ml", 81, 10892, 10925), ("src/shadow/ocaml_shadow.ml", 81, 10892, 11016), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 80)), 0, 0); Tag3 (("Domainstate", 7542), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 83, 11156, 11200), ("src/shadow/ocaml_shadow.ml", 83, 11156, 11210), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Domainstate instead", (("src/shadow/ocaml_shadow.ml", 83, 11156, 11212), ("src/shadow/ocaml_shadow.ml", 83, 11156, 11294), 0), 0)), (("src/shadow/ocaml_shadow.ml", 83, 11156, 11211), ("src/shadow/ocaml_shadow.ml", 83, 11156, 11295), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 83, 11156, 11211), ("src/shadow/ocaml_shadow.ml", 83, 11156, 11295), 0))]), (("src/shadow/ocaml_shadow.ml", 83, 11156, 11197), ("src/shadow/ocaml_shadow.ml", 83, 11156, 11296), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 82)), 0, 0); Tag3 (("Effect_analysis", 7543), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 84, 11297, 11345), ("src/shadow/ocaml_shadow.ml", 84, 11297, 11355), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Effect_analysis instead", (("src/shadow/ocaml_shadow.ml", 84, 11297, 11357), ("src/shadow/ocaml_shadow.ml", 84, 11297, 11444), 0), 0)), (("src/shadow/ocaml_shadow.ml", 84, 11297, 11356), ("src/shadow/ocaml_shadow.ml", 84, 11297, 11445), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 84, 11297, 11356), ("src/shadow/ocaml_shadow.ml", 84, 11297, 11445), 0))]), (("src/shadow/ocaml_shadow.ml", 84, 11297, 11342), ("src/shadow/ocaml_shadow.ml", 84, 11297, 11446), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 83)), 0, 0); Tag3 (("Emit", 7544), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 85, 11447, 11484), ("src/shadow/ocaml_shadow.ml", 85, 11447, 11494), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Emit instead", (("src/shadow/ocaml_shadow.ml", 85, 11447, 11496), ("src/shadow/ocaml_shadow.ml", 85, 11447, 11572), 0), 0)), (("src/shadow/ocaml_shadow.ml", 85, 11447, 11495), ("src/shadow/ocaml_shadow.ml", 85, 11447, 11573), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 85, 11447, 11495), ("src/shadow/ocaml_shadow.ml", 85, 11447, 11573), 0))]), (("src/shadow/ocaml_shadow.ml", 85, 11447, 11481), ("src/shadow/ocaml_shadow.ml", 85, 11447, 11574), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 84)), 0, 0); Tag3 (("Emitaux", 7545), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 86, 11575, 11615), ("src/shadow/ocaml_shadow.ml", 86, 11575, 11625), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Emitaux instead", (("src/shadow/ocaml_shadow.ml", 86, 11575, 11627), ("src/shadow/ocaml_shadow.ml", 86, 11575, 11706), 0), 0)), (("src/shadow/ocaml_shadow.ml", 86, 11575, 11626), ("src/shadow/ocaml_shadow.ml", 86, 11575, 11707), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 86, 11575, 11626), ("src/shadow/ocaml_shadow.ml", 86, 11575, 11707), 0))]), (("src/shadow/ocaml_shadow.ml", 86, 11575, 11612), ("src/shadow/ocaml_shadow.ml", 86, 11575, 11708), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 85)), 0, 0); Tag3 (("Emitcode", 7546), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 87, 11709, 11750), ("src/shadow/ocaml_shadow.ml", 87, 11709, 11760), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_bytecomp.Emitcode instead", (("src/shadow/ocaml_shadow.ml", 87, 11709, 11762), ("src/shadow/ocaml_shadow.ml", 87, 11709, 11843), 0), 0)), (("src/shadow/ocaml_shadow.ml", 87, 11709, 11761), ("src/shadow/ocaml_shadow.ml", 87, 11709, 11844), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 87, 11709, 11761), ("src/shadow/ocaml_shadow.ml", 87, 11709, 11844), 0))]), (("src/shadow/ocaml_shadow.ml", 87, 11709, 11747), ("src/shadow/ocaml_shadow.ml", 87, 11709, 11845), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 86)), 0, 0); Tag3 (("Emitenv", 7547), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 88, 11846, 11886), ("src/shadow/ocaml_shadow.ml", 88, 11846, 11896), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated", (("src/shadow/ocaml_shadow.ml", 88, 11846, 11898), ("src/shadow/ocaml_shadow.ml", 88, 11846, 11942), 0), 0)), (("src/shadow/ocaml_shadow.ml", 88, 11846, 11897), ("src/shadow/ocaml_shadow.ml", 88, 11846, 11943), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 88, 11846, 11897), ("src/shadow/ocaml_shadow.ml", 88, 11846, 11943), 0))]), (("src/shadow/ocaml_shadow.ml", 88, 11846, 11883), ("src/shadow/ocaml_shadow.ml", 88, 11846, 11944), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 87)), 0, 0); Tag3 (("Env", 7548), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 89, 11945, 11981), ("src/shadow/ocaml_shadow.ml", 89, 11945, 11991), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Env instead", (("src/shadow/ocaml_shadow.ml", 89, 11945, 11993), ("src/shadow/ocaml_shadow.ml", 89, 11945, 12067), 0), 0)), (("src/shadow/ocaml_shadow.ml", 89, 11945, 11992), ("src/shadow/ocaml_shadow.ml", 89, 11945, 12068), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 89, 11945, 11992), ("src/shadow/ocaml_shadow.ml", 89, 11945, 12068), 0))]), (("src/shadow/ocaml_shadow.ml", 89, 11945, 11978), ("src/shadow/ocaml_shadow.ml", 89, 11945, 12069), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 88)), 0, 0); Tag3 (("Envaux", 7549), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 90, 12070, 12109), ("src/shadow/ocaml_shadow.ml", 90, 12070, 12119), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Envaux instead", (("src/shadow/ocaml_shadow.ml", 90, 12070, 12121), ("src/shadow/ocaml_shadow.ml", 90, 12070, 12198), 0), 0)), (("src/shadow/ocaml_shadow.ml", 90, 12070, 12120), ("src/shadow/ocaml_shadow.ml", 90, 12070, 12199), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 90, 12070, 12120), ("src/shadow/ocaml_shadow.ml", 90, 12070, 12199), 0))]), (("src/shadow/ocaml_shadow.ml", 90, 12070, 12106), ("src/shadow/ocaml_shadow.ml", 90, 12070, 12200), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 89)), 0, 0); Tag3 (("Errors", 7550), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 91, 12201, 12240), ("src/shadow/ocaml_shadow.ml", 91, 12201, 12250), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_bytecomp.Errors instead", (("src/shadow/ocaml_shadow.ml", 91, 12201, 12252), ("src/shadow/ocaml_shadow.ml", 91, 12201, 12331), 0), 0)), (("src/shadow/ocaml_shadow.ml", 91, 12201, 12251), ("src/shadow/ocaml_shadow.ml", 91, 12201, 12332), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 91, 12201, 12251), ("src/shadow/ocaml_shadow.ml", 91, 12201, 12332), 0))]), (("src/shadow/ocaml_shadow.ml", 91, 12201, 12237), ("src/shadow/ocaml_shadow.ml", 91, 12201, 12333), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 90)), 0, 0); Tag3 (("Errortrace", 7551), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 92, 12334, 12377), ("src/shadow/ocaml_shadow.ml", 92, 12334, 12387), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Errortrace instead", (("src/shadow/ocaml_shadow.ml", 92, 12334, 12389), ("src/shadow/ocaml_shadow.ml", 92, 12334, 12470), 0), 0)), (("src/shadow/ocaml_shadow.ml", 92, 12334, 12388), ("src/shadow/ocaml_shadow.ml", 92, 12334, 12471), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 92, 12334, 12388), ("src/shadow/ocaml_shadow.ml", 92, 12334, 12471), 0))]), (("src/shadow/ocaml_shadow.ml", 92, 12334, 12374), ("src/shadow/ocaml_shadow.ml", 92, 12334, 12472), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 91)), 0, 0); Tag3 (("Export_id", 7552), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 93, 12473, 12515), ("src/shadow/ocaml_shadow.ml", 93, 12473, 12525), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Export_id instead", (("src/shadow/ocaml_shadow.ml", 93, 12473, 12527), ("src/shadow/ocaml_shadow.ml", 93, 12473, 12608), 0), 0)), (("src/shadow/ocaml_shadow.ml", 93, 12473, 12526), ("src/shadow/ocaml_shadow.ml", 93, 12473, 12609), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 93, 12473, 12526), ("src/shadow/ocaml_shadow.ml", 93, 12473, 12609), 0))]), (("src/shadow/ocaml_shadow.ml", 93, 12473, 12512), ("src/shadow/ocaml_shadow.ml", 93, 12473, 12610), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 92)), 0, 0); Tag3 (("Export_info", 7553), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 94, 12611, 12655), ("src/shadow/ocaml_shadow.ml", 94, 12611, 12665), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Export_info instead", (("src/shadow/ocaml_shadow.ml", 94, 12611, 12667), ("src/shadow/ocaml_shadow.ml", 94, 12611, 12750), 0), 0)), (("src/shadow/ocaml_shadow.ml", 94, 12611, 12666), ("src/shadow/ocaml_shadow.ml", 94, 12611, 12751), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 94, 12611, 12666), ("src/shadow/ocaml_shadow.ml", 94, 12611, 12751), 0))]), (("src/shadow/ocaml_shadow.ml", 94, 12611, 12652), ("src/shadow/ocaml_shadow.ml", 94, 12611, 12752), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 93)), 0, 0); Tag3 (("Export_info_for_pack", 7554), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 95, 12753, 12806), ("src/shadow/ocaml_shadow.ml", 95, 12753, 12816), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Export_info_for_pack instead", (("src/shadow/ocaml_shadow.ml", 95, 12753, 12818), ("src/shadow/ocaml_shadow.ml", 95, 12753, 12910), 0), 0)), (("src/shadow/ocaml_shadow.ml", 95, 12753, 12817), ("src/shadow/ocaml_shadow.ml", 95, 12753, 12911), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 95, 12753, 12817), ("src/shadow/ocaml_shadow.ml", 95, 12753, 12911), 0))]), (("src/shadow/ocaml_shadow.ml", 95, 12753, 12803), ("src/shadow/ocaml_shadow.ml", 95, 12753, 12912), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 94)), 0, 0); Tag3 (("Expunge", 7555), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 96, 12913, 12953), ("src/shadow/ocaml_shadow.ml", 96, 12913, 12963), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated", (("src/shadow/ocaml_shadow.ml", 96, 12913, 12965), ("src/shadow/ocaml_shadow.ml", 96, 12913, 13009), 0), 0)), (("src/shadow/ocaml_shadow.ml", 96, 12913, 12964), ("src/shadow/ocaml_shadow.ml", 96, 12913, 13010), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 96, 12913, 12964), ("src/shadow/ocaml_shadow.ml", 96, 12913, 13010), 0))]), (("src/shadow/ocaml_shadow.ml", 96, 12913, 12950), ("src/shadow/ocaml_shadow.ml", 96, 12913, 13011), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 95)), 0, 0); Tag3 (("Extract_projections", 7556), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 97, 13012, 13064), ("src/shadow/ocaml_shadow.ml", 97, 13012, 13074), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Extract_projections instead", (("src/shadow/ocaml_shadow.ml", 97, 13012, 13076), ("src/shadow/ocaml_shadow.ml", 97, 13012, 13167), 0), 0)), (("src/shadow/ocaml_shadow.ml", 97, 13012, 13075), ("src/shadow/ocaml_shadow.ml", 97, 13012, 13168), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 97, 13012, 13075), ("src/shadow/ocaml_shadow.ml", 97, 13012, 13168), 0))]), (("src/shadow/ocaml_shadow.ml", 97, 13012, 13061), ("src/shadow/ocaml_shadow.ml", 97, 13012, 13169), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 96)), 0, 0); Tag3 (("Find_recursive_functions", 7557), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 98, 13170, 13227), ("src/shadow/ocaml_shadow.ml", 98, 13170, 13237), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Find_recursive_functions instead", (("src/shadow/ocaml_shadow.ml", 98, 13170, 13239), ("src/shadow/ocaml_shadow.ml", 98, 13170, 13335), 0), 0)), (("src/shadow/ocaml_shadow.ml", 98, 13170, 13238), ("src/shadow/ocaml_shadow.ml", 98, 13170, 13336), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 98, 13170, 13238), ("src/shadow/ocaml_shadow.ml", 98, 13170, 13336), 0))]), (("src/shadow/ocaml_shadow.ml", 98, 13170, 13224), ("src/shadow/ocaml_shadow.ml", 98, 13170, 13337), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 97)), 0, 0); Tag3 (("Flambda", 7558), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 99, 13338, 13378), ("src/shadow/ocaml_shadow.ml", 99, 13338, 13388), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Flambda instead", (("src/shadow/ocaml_shadow.ml", 99, 13338, 13390), ("src/shadow/ocaml_shadow.ml", 99, 13338, 13469), 0), 0)), (("src/shadow/ocaml_shadow.ml", 99, 13338, 13389), ("src/shadow/ocaml_shadow.ml", 99, 13338, 13470), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 99, 13338, 13389), ("src/shadow/ocaml_shadow.ml", 99, 13338, 13470), 0))]), (("src/shadow/ocaml_shadow.ml", 99, 13338, 13375), ("src/shadow/ocaml_shadow.ml", 99, 13338, 13471), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 98)), 0, 0); Tag3 (("Flambda_invariants", 7559), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 100, 13472, 13523), ("src/shadow/ocaml_shadow.ml", 100, 13472, 13533), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Flambda_invariants instead", (("src/shadow/ocaml_shadow.ml", 100, 13472, 13535), ("src/shadow/ocaml_shadow.ml", 100, 13472, 13625), 0), 0)), (("src/shadow/ocaml_shadow.ml", 100, 13472, 13534), ("src/shadow/ocaml_shadow.ml", 100, 13472, 13626), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 100, 13472, 13534), ("src/shadow/ocaml_shadow.ml", 100, 13472, 13626), 0))]), (("src/shadow/ocaml_shadow.ml", 100, 13472, 13520), ("src/shadow/ocaml_shadow.ml", 100, 13472, 13627), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 99)), 0, 0); Tag3 (("Flambda_iterators", 7560), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 101, 13628, 13678), ("src/shadow/ocaml_shadow.ml", 101, 13628, 13688), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Flambda_iterators instead", (("src/shadow/ocaml_shadow.ml", 101, 13628, 13690), ("src/shadow/ocaml_shadow.ml", 101, 13628, 13779), 0), 0)), (("src/shadow/ocaml_shadow.ml", 101, 13628, 13689), ("src/shadow/ocaml_shadow.ml", 101, 13628, 13780), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 101, 13628, 13689), ("src/shadow/ocaml_shadow.ml", 101, 13628, 13780), 0))]), (("src/shadow/ocaml_shadow.ml", 101, 13628, 13675), ("src/shadow/ocaml_shadow.ml", 101, 13628, 13781), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 100)), 0, 0); Tag3 (("Flambda_middle_end", 7561), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 102, 13782, 13833), ("src/shadow/ocaml_shadow.ml", 102, 13782, 13843), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Flambda_middle_end instead", (("src/shadow/ocaml_shadow.ml", 102, 13782, 13845), ("src/shadow/ocaml_shadow.ml", 102, 13782, 13935), 0), 0)), (("src/shadow/ocaml_shadow.ml", 102, 13782, 13844), ("src/shadow/ocaml_shadow.ml", 102, 13782, 13936), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 102, 13782, 13844), ("src/shadow/ocaml_shadow.ml", 102, 13782, 13936), 0))]), (("src/shadow/ocaml_shadow.ml", 102, 13782, 13830), ("src/shadow/ocaml_shadow.ml", 102, 13782, 13937), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 101)), 0, 0); Tag3 (("Flambda_to_clambda", 7562), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 103, 13938, 13989), ("src/shadow/ocaml_shadow.ml", 103, 13938, 13999), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Flambda_to_clambda instead", (("src/shadow/ocaml_shadow.ml", 103, 13938, 14001), ("src/shadow/ocaml_shadow.ml", 103, 13938, 14091), 0), 0)), (("src/shadow/ocaml_shadow.ml", 103, 13938, 14000), ("src/shadow/ocaml_shadow.ml", 103, 13938, 14092), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 103, 13938, 14000), ("src/shadow/ocaml_shadow.ml", 103, 13938, 14092), 0))]), (("src/shadow/ocaml_shadow.ml", 103, 13938, 13986), ("src/shadow/ocaml_shadow.ml", 103, 13938, 14093), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 102)), 0, 0); Tag3 (("Flambda_utils", 7563), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 104, 14094, 14140), ("src/shadow/ocaml_shadow.ml", 104, 14094, 14150), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Flambda_utils instead", (("src/shadow/ocaml_shadow.ml", 104, 14094, 14152), ("src/shadow/ocaml_shadow.ml", 104, 14094, 14237), 0), 0)), (("src/shadow/ocaml_shadow.ml", 104, 14094, 14151), ("src/shadow/ocaml_shadow.ml", 104, 14094, 14238), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 104, 14094, 14151), ("src/shadow/ocaml_shadow.ml", 104, 14094, 14238), 0))]), (("src/shadow/ocaml_shadow.ml", 104, 14094, 14137), ("src/shadow/ocaml_shadow.ml", 104, 14094, 14239), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 103)), 0, 0); Tag3 (("Freshening", 7564), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 105, 14240, 14283), ("src/shadow/ocaml_shadow.ml", 105, 14240, 14293), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Freshening instead", (("src/shadow/ocaml_shadow.ml", 105, 14240, 14295), ("src/shadow/ocaml_shadow.ml", 105, 14240, 14377), 0), 0)), (("src/shadow/ocaml_shadow.ml", 105, 14240, 14294), ("src/shadow/ocaml_shadow.ml", 105, 14240, 14378), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 105, 14240, 14294), ("src/shadow/ocaml_shadow.ml", 105, 14240, 14378), 0))]), (("src/shadow/ocaml_shadow.ml", 105, 14240, 14280), ("src/shadow/ocaml_shadow.ml", 105, 14240, 14379), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 104)), 0, 0); Tag3 (("Genprintval", 7565), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 106, 14380, 14424), ("src/shadow/ocaml_shadow.ml", 106, 14380, 14434), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_toplevel.Genprintval instead", (("src/shadow/ocaml_shadow.ml", 106, 14380, 14436), ("src/shadow/ocaml_shadow.ml", 106, 14380, 14520), 0), 0)), (("src/shadow/ocaml_shadow.ml", 106, 14380, 14435), ("src/shadow/ocaml_shadow.ml", 106, 14380, 14521), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 106, 14380, 14435), ("src/shadow/ocaml_shadow.ml", 106, 14380, 14521), 0))]), (("src/shadow/ocaml_shadow.ml", 106, 14380, 14421), ("src/shadow/ocaml_shadow.ml", 106, 14380, 14522), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 105)), 0, 0); Tag3 (("Id_types", 7566), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 107, 14523, 14564), ("src/shadow/ocaml_shadow.ml", 107, 14523, 14574), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Id_types instead", (("src/shadow/ocaml_shadow.ml", 107, 14523, 14576), ("src/shadow/ocaml_shadow.ml", 107, 14523, 14656), 0), 0)), (("src/shadow/ocaml_shadow.ml", 107, 14523, 14575), ("src/shadow/ocaml_shadow.ml", 107, 14523, 14657), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 107, 14523, 14575), ("src/shadow/ocaml_shadow.ml", 107, 14523, 14657), 0))]), (("src/shadow/ocaml_shadow.ml", 107, 14523, 14561), ("src/shadow/ocaml_shadow.ml", 107, 14523, 14658), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 106)), 0, 0); Tag3 (("Ident", 7567), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 108, 14659, 14697), ("src/shadow/ocaml_shadow.ml", 108, 14659, 14707), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Ident instead", (("src/shadow/ocaml_shadow.ml", 108, 14659, 14709), ("src/shadow/ocaml_shadow.ml", 108, 14659, 14785), 0), 0)), (("src/shadow/ocaml_shadow.ml", 108, 14659, 14708), ("src/shadow/ocaml_shadow.ml", 108, 14659, 14786), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 108, 14659, 14708), ("src/shadow/ocaml_shadow.ml", 108, 14659, 14786), 0))]), (("src/shadow/ocaml_shadow.ml", 108, 14659, 14694), ("src/shadow/ocaml_shadow.ml", 108, 14659, 14787), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 107)), 0, 0); Tag3 (("Import_approx", 7568), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 110, 14931, 14977), ("src/shadow/ocaml_shadow.ml", 110, 14931, 14987), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Import_approx instead", (("src/shadow/ocaml_shadow.ml", 110, 14931, 14989), ("src/shadow/ocaml_shadow.ml", 110, 14931, 15074), 0), 0)), (("src/shadow/ocaml_shadow.ml", 110, 14931, 14988), ("src/shadow/ocaml_shadow.ml", 110, 14931, 15075), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 110, 14931, 14988), ("src/shadow/ocaml_shadow.ml", 110, 14931, 15075), 0))]), (("src/shadow/ocaml_shadow.ml", 110, 14931, 14974), ("src/shadow/ocaml_shadow.ml", 110, 14931, 15076), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 109)), 0, 0); Tag3 (("Includeclass", 7569), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 111, 15077, 15122), ("src/shadow/ocaml_shadow.ml", 111, 15077, 15132), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Includeclass instead", (("src/shadow/ocaml_shadow.ml", 111, 15077, 15134), ("src/shadow/ocaml_shadow.ml", 111, 15077, 15217), 0), 0)), (("src/shadow/ocaml_shadow.ml", 111, 15077, 15133), ("src/shadow/ocaml_shadow.ml", 111, 15077, 15218), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 111, 15077, 15133), ("src/shadow/ocaml_shadow.ml", 111, 15077, 15218), 0))]), (("src/shadow/ocaml_shadow.ml", 111, 15077, 15119), ("src/shadow/ocaml_shadow.ml", 111, 15077, 15219), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 110)), 0, 0); Tag3 (("Includecore", 7570), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 112, 15220, 15264), ("src/shadow/ocaml_shadow.ml", 112, 15220, 15274), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Includecore instead", (("src/shadow/ocaml_shadow.ml", 112, 15220, 15276), ("src/shadow/ocaml_shadow.ml", 112, 15220, 15358), 0), 0)), (("src/shadow/ocaml_shadow.ml", 112, 15220, 15275), ("src/shadow/ocaml_shadow.ml", 112, 15220, 15359), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 112, 15220, 15275), ("src/shadow/ocaml_shadow.ml", 112, 15220, 15359), 0))]), (("src/shadow/ocaml_shadow.ml", 112, 15220, 15261), ("src/shadow/ocaml_shadow.ml", 112, 15220, 15360), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 111)), 0, 0); Tag3 (("Includemod", 7571), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 113, 15361, 15404), ("src/shadow/ocaml_shadow.ml", 113, 15361, 15414), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Includemod instead", (("src/shadow/ocaml_shadow.ml", 113, 15361, 15416), ("src/shadow/ocaml_shadow.ml", 113, 15361, 15497), 0), 0)), (("src/shadow/ocaml_shadow.ml", 113, 15361, 15415), ("src/shadow/ocaml_shadow.ml", 113, 15361, 15498), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 113, 15361, 15415), ("src/shadow/ocaml_shadow.ml", 113, 15361, 15498), 0))]), (("src/shadow/ocaml_shadow.ml", 113, 15361, 15401), ("src/shadow/ocaml_shadow.ml", 113, 15361, 15499), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 112)), 0, 0); Tag3 (("Includemod_errorprinter", 7572), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 114, 15500, 15556), ("src/shadow/ocaml_shadow.ml", 114, 15500, 15566), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Includemod_errorprinter instead", (("src/shadow/ocaml_shadow.ml", 114, 15500, 15568), ("src/shadow/ocaml_shadow.ml", 114, 15500, 15662), 0), 0)), (("src/shadow/ocaml_shadow.ml", 114, 15500, 15567), ("src/shadow/ocaml_shadow.ml", 114, 15500, 15663), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 114, 15500, 15567), ("src/shadow/ocaml_shadow.ml", 114, 15500, 15663), 0))]), (("src/shadow/ocaml_shadow.ml", 114, 15500, 15553), ("src/shadow/ocaml_shadow.ml", 114, 15500, 15664), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 113)), 0, 0); Tag3 (("Inconstant_idents", 7573), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 115, 15665, 15715), ("src/shadow/ocaml_shadow.ml", 115, 15665, 15725), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Inconstant_idents instead", (("src/shadow/ocaml_shadow.ml", 115, 15665, 15727), ("src/shadow/ocaml_shadow.ml", 115, 15665, 15816), 0), 0)), (("src/shadow/ocaml_shadow.ml", 115, 15665, 15726), ("src/shadow/ocaml_shadow.ml", 115, 15665, 15817), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 115, 15665, 15726), ("src/shadow/ocaml_shadow.ml", 115, 15665, 15817), 0))]), (("src/shadow/ocaml_shadow.ml", 115, 15665, 15712), ("src/shadow/ocaml_shadow.ml", 115, 15665, 15818), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 114)), 0, 0); Tag3 (("Initialize_symbol_to_let_symbol", 7574), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 116, 15819, 15883), ("src/shadow/ocaml_shadow.ml", 116, 15819, 15893), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Initialize_symbol_to_let_symbol instead", (("src/shadow/ocaml_shadow.ml", 116, 15819, 15895), ("src/shadow/ocaml_shadow.ml", 116, 15819, 15998), 0), 0)), (("src/shadow/ocaml_shadow.ml", 116, 15819, 15894), ("src/shadow/ocaml_shadow.ml", 116, 15819, 15999), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 116, 15819, 15894), ("src/shadow/ocaml_shadow.ml", 116, 15819, 15999), 0))]), (("src/shadow/ocaml_shadow.ml", 116, 15819, 15880), ("src/shadow/ocaml_shadow.ml", 116, 15819, 16000), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 115)), 0, 0); Tag3 (("Inline_and_simplify", 7575), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 117, 16001, 16053), ("src/shadow/ocaml_shadow.ml", 117, 16001, 16063), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Inline_and_simplify instead", (("src/shadow/ocaml_shadow.ml", 117, 16001, 16065), ("src/shadow/ocaml_shadow.ml", 117, 16001, 16156), 0), 0)), (("src/shadow/ocaml_shadow.ml", 117, 16001, 16064), ("src/shadow/ocaml_shadow.ml", 117, 16001, 16157), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 117, 16001, 16064), ("src/shadow/ocaml_shadow.ml", 117, 16001, 16157), 0))]), (("src/shadow/ocaml_shadow.ml", 117, 16001, 16050), ("src/shadow/ocaml_shadow.ml", 117, 16001, 16158), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 116)), 0, 0); Tag3 (("Inline_and_simplify_aux", 7576), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 118, 16159, 16215), ("src/shadow/ocaml_shadow.ml", 118, 16159, 16225), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Inline_and_simplify_aux instead", (("src/shadow/ocaml_shadow.ml", 118, 16159, 16227), ("src/shadow/ocaml_shadow.ml", 118, 16159, 16322), 0), 0)), (("src/shadow/ocaml_shadow.ml", 118, 16159, 16226), ("src/shadow/ocaml_shadow.ml", 118, 16159, 16323), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 118, 16159, 16226), ("src/shadow/ocaml_shadow.ml", 118, 16159, 16323), 0))]), (("src/shadow/ocaml_shadow.ml", 118, 16159, 16212), ("src/shadow/ocaml_shadow.ml", 118, 16159, 16324), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 117)), 0, 0); Tag3 (("Inlining_cost", 7577), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 119, 16325, 16371), ("src/shadow/ocaml_shadow.ml", 119, 16325, 16381), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Inlining_cost instead", (("src/shadow/ocaml_shadow.ml", 119, 16325, 16383), ("src/shadow/ocaml_shadow.ml", 119, 16325, 16468), 0), 0)), (("src/shadow/ocaml_shadow.ml", 119, 16325, 16382), ("src/shadow/ocaml_shadow.ml", 119, 16325, 16469), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 119, 16325, 16382), ("src/shadow/ocaml_shadow.ml", 119, 16325, 16469), 0))]), (("src/shadow/ocaml_shadow.ml", 119, 16325, 16368), ("src/shadow/ocaml_shadow.ml", 119, 16325, 16470), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 118)), 0, 0); Tag3 (("Inlining_decision", 7578), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 120, 16471, 16521), ("src/shadow/ocaml_shadow.ml", 120, 16471, 16531), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Inlining_decision instead", (("src/shadow/ocaml_shadow.ml", 120, 16471, 16533), ("src/shadow/ocaml_shadow.ml", 120, 16471, 16622), 0), 0)), (("src/shadow/ocaml_shadow.ml", 120, 16471, 16532), ("src/shadow/ocaml_shadow.ml", 120, 16471, 16623), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 120, 16471, 16532), ("src/shadow/ocaml_shadow.ml", 120, 16471, 16623), 0))]), (("src/shadow/ocaml_shadow.ml", 120, 16471, 16518), ("src/shadow/ocaml_shadow.ml", 120, 16471, 16624), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 119)), 0, 0); Tag3 (("Inlining_decision_intf", 7579), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 121, 16625, 16680), ("src/shadow/ocaml_shadow.ml", 121, 16625, 16690), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated", (("src/shadow/ocaml_shadow.ml", 121, 16625, 16692), ("src/shadow/ocaml_shadow.ml", 121, 16625, 16736), 0), 0)), (("src/shadow/ocaml_shadow.ml", 121, 16625, 16691), ("src/shadow/ocaml_shadow.ml", 121, 16625, 16737), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 121, 16625, 16691), ("src/shadow/ocaml_shadow.ml", 121, 16625, 16737), 0))]), (("src/shadow/ocaml_shadow.ml", 121, 16625, 16677), ("src/shadow/ocaml_shadow.ml", 121, 16625, 16738), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 120)), 0, 0); Tag3 (("Inlining_stats", 7580), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 122, 16739, 16786), ("src/shadow/ocaml_shadow.ml", 122, 16739, 16796), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Inlining_stats instead", (("src/shadow/ocaml_shadow.ml", 122, 16739, 16798), ("src/shadow/ocaml_shadow.ml", 122, 16739, 16884), 0), 0)), (("src/shadow/ocaml_shadow.ml", 122, 16739, 16797), ("src/shadow/ocaml_shadow.ml", 122, 16739, 16885), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 122, 16739, 16797), ("src/shadow/ocaml_shadow.ml", 122, 16739, 16885), 0))]), (("src/shadow/ocaml_shadow.ml", 122, 16739, 16783), ("src/shadow/ocaml_shadow.ml", 122, 16739, 16886), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 121)), 0, 0); Tag3 (("Inlining_stats_types", 7581), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 123, 16887, 16940), ("src/shadow/ocaml_shadow.ml", 123, 16887, 16950), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Inlining_stats_types instead", (("src/shadow/ocaml_shadow.ml", 123, 16887, 16952), ("src/shadow/ocaml_shadow.ml", 123, 16887, 17044), 0), 0)), (("src/shadow/ocaml_shadow.ml", 123, 16887, 16951), ("src/shadow/ocaml_shadow.ml", 123, 16887, 17045), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 123, 16887, 16951), ("src/shadow/ocaml_shadow.ml", 123, 16887, 17045), 0))]), (("src/shadow/ocaml_shadow.ml", 123, 16887, 16937), ("src/shadow/ocaml_shadow.ml", 123, 16887, 17046), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 122)), 0, 0); Tag3 (("Inlining_transforms", 7582), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 124, 17047, 17099), ("src/shadow/ocaml_shadow.ml", 124, 17047, 17109), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Inlining_transforms instead", (("src/shadow/ocaml_shadow.ml", 124, 17047, 17111), ("src/shadow/ocaml_shadow.ml", 124, 17047, 17202), 0), 0)), (("src/shadow/ocaml_shadow.ml", 124, 17047, 17110), ("src/shadow/ocaml_shadow.ml", 124, 17047, 17203), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 124, 17047, 17110), ("src/shadow/ocaml_shadow.ml", 124, 17047, 17203), 0))]), (("src/shadow/ocaml_shadow.ml", 124, 17047, 17096), ("src/shadow/ocaml_shadow.ml", 124, 17047, 17204), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 123)), 0, 0); Tag3 (("Instruct", 7583), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 125, 17205, 17246), ("src/shadow/ocaml_shadow.ml", 125, 17205, 17256), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_bytecomp.Instruct instead", (("src/shadow/ocaml_shadow.ml", 125, 17205, 17258), ("src/shadow/ocaml_shadow.ml", 125, 17205, 17339), 0), 0)), (("src/shadow/ocaml_shadow.ml", 125, 17205, 17257), ("src/shadow/ocaml_shadow.ml", 125, 17205, 17340), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 125, 17205, 17257), ("src/shadow/ocaml_shadow.ml", 125, 17205, 17340), 0))]), (("src/shadow/ocaml_shadow.ml", 125, 17205, 17243), ("src/shadow/ocaml_shadow.ml", 125, 17205, 17341), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 124)), 0, 0); Tag3 (("Int_replace_polymorphic_compare", 7584), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 126, 17342, 17406), ("src/shadow/ocaml_shadow.ml", 126, 17342, 17416), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Int_replace_polymorphic_compare instead", (("src/shadow/ocaml_shadow.ml", 126, 17342, 17418), ("src/shadow/ocaml_shadow.ml", 126, 17342, 17520), 0), 0)), (("src/shadow/ocaml_shadow.ml", 126, 17342, 17417), ("src/shadow/ocaml_shadow.ml", 126, 17342, 17521), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 126, 17342, 17417), ("src/shadow/ocaml_shadow.ml", 126, 17342, 17521), 0))]), (("src/shadow/ocaml_shadow.ml", 126, 17342, 17403), ("src/shadow/ocaml_shadow.ml", 126, 17342, 17522), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 125)), 0, 0); Tag3 (("Interf", 7585), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 127, 17523, 17562), ("src/shadow/ocaml_shadow.ml", 127, 17523, 17572), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Interf instead", (("src/shadow/ocaml_shadow.ml", 127, 17523, 17574), ("src/shadow/ocaml_shadow.ml", 127, 17523, 17652), 0), 0)), (("src/shadow/ocaml_shadow.ml", 127, 17523, 17573), ("src/shadow/ocaml_shadow.ml", 127, 17523, 17653), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 127, 17523, 17573), ("src/shadow/ocaml_shadow.ml", 127, 17523, 17653), 0))]), (("src/shadow/ocaml_shadow.ml", 127, 17523, 17559), ("src/shadow/ocaml_shadow.ml", 127, 17523, 17654), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 126)), 0, 0); Tag3 (("Internal_variable_names", 7586), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 128, 17655, 17711), ("src/shadow/ocaml_shadow.ml", 128, 17655, 17721), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Internal_variable_names instead", (("src/shadow/ocaml_shadow.ml", 128, 17655, 17723), ("src/shadow/ocaml_shadow.ml", 128, 17655, 17818), 0), 0)), (("src/shadow/ocaml_shadow.ml", 128, 17655, 17722), ("src/shadow/ocaml_shadow.ml", 128, 17655, 17819), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 128, 17655, 17722), ("src/shadow/ocaml_shadow.ml", 128, 17655, 17819), 0))]), (("src/shadow/ocaml_shadow.ml", 128, 17655, 17708), ("src/shadow/ocaml_shadow.ml", 128, 17655, 17820), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 127)), 0, 0); Tag3 (("Interval", 7587), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 129, 17821, 17862), ("src/shadow/ocaml_shadow.ml", 129, 17821, 17872), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Interval instead", (("src/shadow/ocaml_shadow.ml", 129, 17821, 17874), ("src/shadow/ocaml_shadow.ml", 129, 17821, 17954), 0), 0)), (("src/shadow/ocaml_shadow.ml", 129, 17821, 17873), ("src/shadow/ocaml_shadow.ml", 129, 17821, 17955), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 129, 17821, 17873), ("src/shadow/ocaml_shadow.ml", 129, 17821, 17955), 0))]), (("src/shadow/ocaml_shadow.ml", 129, 17821, 17859), ("src/shadow/ocaml_shadow.ml", 129, 17821, 17956), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 128)), 0, 0); Tag3 (("Invariant_params", 7588), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 130, 17957, 18006), ("src/shadow/ocaml_shadow.ml", 130, 17957, 18016), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Invariant_params instead", (("src/shadow/ocaml_shadow.ml", 130, 17957, 18018), ("src/shadow/ocaml_shadow.ml", 130, 17957, 18106), 0), 0)), (("src/shadow/ocaml_shadow.ml", 130, 17957, 18017), ("src/shadow/ocaml_shadow.ml", 130, 17957, 18107), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 130, 17957, 18017), ("src/shadow/ocaml_shadow.ml", 130, 17957, 18107), 0))]), (("src/shadow/ocaml_shadow.ml", 130, 17957, 18003), ("src/shadow/ocaml_shadow.ml", 130, 17957, 18108), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 129)), 0, 0); Tag3 (("Lambda", 7589), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 131, 18109, 18148), ("src/shadow/ocaml_shadow.ml", 131, 18109, 18158), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Lambda instead", (("src/shadow/ocaml_shadow.ml", 131, 18109, 18160), ("src/shadow/ocaml_shadow.ml", 131, 18109, 18237), 0), 0)), (("src/shadow/ocaml_shadow.ml", 131, 18109, 18159), ("src/shadow/ocaml_shadow.ml", 131, 18109, 18238), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 131, 18109, 18159), ("src/shadow/ocaml_shadow.ml", 131, 18109, 18238), 0))]), (("src/shadow/ocaml_shadow.ml", 131, 18109, 18145), ("src/shadow/ocaml_shadow.ml", 131, 18109, 18239), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 130)), 0, 0); Tag3 (("Lazy_backtrack", 7590), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 132, 18240, 18287), ("src/shadow/ocaml_shadow.ml", 132, 18240, 18297), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Lazy_backtrack instead", (("src/shadow/ocaml_shadow.ml", 132, 18240, 18299), ("src/shadow/ocaml_shadow.ml", 132, 18240, 18384), 0), 0)), (("src/shadow/ocaml_shadow.ml", 132, 18240, 18298), ("src/shadow/ocaml_shadow.ml", 132, 18240, 18385), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 132, 18240, 18298), ("src/shadow/ocaml_shadow.ml", 132, 18240, 18385), 0))]), (("src/shadow/ocaml_shadow.ml", 132, 18240, 18284), ("src/shadow/ocaml_shadow.ml", 132, 18240, 18386), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 131)), 0, 0); Tag3 (("Lift_code", 7591), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 134, 18516, 18558), ("src/shadow/ocaml_shadow.ml", 134, 18516, 18568), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Lift_code instead", (("src/shadow/ocaml_shadow.ml", 134, 18516, 18570), ("src/shadow/ocaml_shadow.ml", 134, 18516, 18651), 0), 0)), (("src/shadow/ocaml_shadow.ml", 134, 18516, 18569), ("src/shadow/ocaml_shadow.ml", 134, 18516, 18652), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 134, 18516, 18569), ("src/shadow/ocaml_shadow.ml", 134, 18516, 18652), 0))]), (("src/shadow/ocaml_shadow.ml", 134, 18516, 18555), ("src/shadow/ocaml_shadow.ml", 134, 18516, 18653), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 133)), 0, 0); Tag3 (("Lift_constants", 7592), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 135, 18654, 18701), ("src/shadow/ocaml_shadow.ml", 135, 18654, 18711), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Lift_constants instead", (("src/shadow/ocaml_shadow.ml", 135, 18654, 18713), ("src/shadow/ocaml_shadow.ml", 135, 18654, 18799), 0), 0)), (("src/shadow/ocaml_shadow.ml", 135, 18654, 18712), ("src/shadow/ocaml_shadow.ml", 135, 18654, 18800), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 135, 18654, 18712), ("src/shadow/ocaml_shadow.ml", 135, 18654, 18800), 0))]), (("src/shadow/ocaml_shadow.ml", 135, 18654, 18698), ("src/shadow/ocaml_shadow.ml", 135, 18654, 18801), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 134)), 0, 0); Tag3 (("Lift_let_to_initialize_symbol", 7593), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 136, 18802, 18864), ("src/shadow/ocaml_shadow.ml", 136, 18802, 18874), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Lift_let_to_initialize_symbol instead", (("src/shadow/ocaml_shadow.ml", 136, 18802, 18876), ("src/shadow/ocaml_shadow.ml", 136, 18802, 18977), 0), 0)), (("src/shadow/ocaml_shadow.ml", 136, 18802, 18875), ("src/shadow/ocaml_shadow.ml", 136, 18802, 18978), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 136, 18802, 18875), ("src/shadow/ocaml_shadow.ml", 136, 18802, 18978), 0))]), (("src/shadow/ocaml_shadow.ml", 136, 18802, 18861), ("src/shadow/ocaml_shadow.ml", 136, 18802, 18979), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 135)), 0, 0); Tag3 (("Linear", 7594), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 137, 18980, 19019), ("src/shadow/ocaml_shadow.ml", 137, 18980, 19029), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Linear instead", (("src/shadow/ocaml_shadow.ml", 137, 18980, 19031), ("src/shadow/ocaml_shadow.ml", 137, 18980, 19109), 0), 0)), (("src/shadow/ocaml_shadow.ml", 137, 18980, 19030), ("src/shadow/ocaml_shadow.ml", 137, 18980, 19110), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 137, 18980, 19030), ("src/shadow/ocaml_shadow.ml", 137, 18980, 19110), 0))]), (("src/shadow/ocaml_shadow.ml", 137, 18980, 19016), ("src/shadow/ocaml_shadow.ml", 137, 18980, 19111), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 136)), 0, 0); Tag3 (("Linear_format", 7595), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 138, 19112, 19158), ("src/shadow/ocaml_shadow.ml", 138, 19112, 19168), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Linear_format instead", (("src/shadow/ocaml_shadow.ml", 138, 19112, 19170), ("src/shadow/ocaml_shadow.ml", 138, 19112, 19255), 0), 0)), (("src/shadow/ocaml_shadow.ml", 138, 19112, 19169), ("src/shadow/ocaml_shadow.ml", 138, 19112, 19256), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 138, 19112, 19169), ("src/shadow/ocaml_shadow.ml", 138, 19112, 19256), 0))]), (("src/shadow/ocaml_shadow.ml", 138, 19112, 19155), ("src/shadow/ocaml_shadow.ml", 138, 19112, 19257), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 137)), 0, 0); Tag3 (("Linearize", 7596), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 139, 19258, 19300), ("src/shadow/ocaml_shadow.ml", 139, 19258, 19310), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Linearize instead", (("src/shadow/ocaml_shadow.ml", 139, 19258, 19312), ("src/shadow/ocaml_shadow.ml", 139, 19258, 19393), 0), 0)), (("src/shadow/ocaml_shadow.ml", 139, 19258, 19311), ("src/shadow/ocaml_shadow.ml", 139, 19258, 19394), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 139, 19258, 19311), ("src/shadow/ocaml_shadow.ml", 139, 19258, 19394), 0))]), (("src/shadow/ocaml_shadow.ml", 139, 19258, 19297), ("src/shadow/ocaml_shadow.ml", 139, 19258, 19395), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 138)), 0, 0); Tag3 (("Linkage_name", 7597), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 140, 19396, 19441), ("src/shadow/ocaml_shadow.ml", 140, 19396, 19451), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Linkage_name instead", (("src/shadow/ocaml_shadow.ml", 140, 19396, 19453), ("src/shadow/ocaml_shadow.ml", 140, 19396, 19537), 0), 0)), (("src/shadow/ocaml_shadow.ml", 140, 19396, 19452), ("src/shadow/ocaml_shadow.ml", 140, 19396, 19538), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 140, 19396, 19452), ("src/shadow/ocaml_shadow.ml", 140, 19396, 19538), 0))]), (("src/shadow/ocaml_shadow.ml", 140, 19396, 19438), ("src/shadow/ocaml_shadow.ml", 140, 19396, 19539), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 139)), 0, 0); Tag3 (("Linscan", 7598), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 141, 19540, 19580), ("src/shadow/ocaml_shadow.ml", 141, 19540, 19590), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Linscan instead", (("src/shadow/ocaml_shadow.ml", 141, 19540, 19592), ("src/shadow/ocaml_shadow.ml", 141, 19540, 19671), 0), 0)), (("src/shadow/ocaml_shadow.ml", 141, 19540, 19591), ("src/shadow/ocaml_shadow.ml", 141, 19540, 19672), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 141, 19540, 19591), ("src/shadow/ocaml_shadow.ml", 141, 19540, 19672), 0))]), (("src/shadow/ocaml_shadow.ml", 141, 19540, 19577), ("src/shadow/ocaml_shadow.ml", 141, 19540, 19673), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 140)), 0, 0); Tag3 (("Liveness", 7599), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 142, 19674, 19715), ("src/shadow/ocaml_shadow.ml", 142, 19674, 19725), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Liveness instead", (("src/shadow/ocaml_shadow.ml", 142, 19674, 19727), ("src/shadow/ocaml_shadow.ml", 142, 19674, 19807), 0), 0)), (("src/shadow/ocaml_shadow.ml", 142, 19674, 19726), ("src/shadow/ocaml_shadow.ml", 142, 19674, 19808), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 142, 19674, 19726), ("src/shadow/ocaml_shadow.ml", 142, 19674, 19808), 0))]), (("src/shadow/ocaml_shadow.ml", 142, 19674, 19712), ("src/shadow/ocaml_shadow.ml", 142, 19674, 19809), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 141)), 0, 0); Tag3 (("Load_path", 7600), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 143, 19810, 19852), ("src/shadow/ocaml_shadow.ml", 143, 19810, 19862), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Load_path instead", (("src/shadow/ocaml_shadow.ml", 143, 19810, 19864), ("src/shadow/ocaml_shadow.ml", 143, 19810, 19944), 0), 0)), (("src/shadow/ocaml_shadow.ml", 143, 19810, 19863), ("src/shadow/ocaml_shadow.ml", 143, 19810, 19945), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 143, 19810, 19863), ("src/shadow/ocaml_shadow.ml", 143, 19810, 19945), 0))]), (("src/shadow/ocaml_shadow.ml", 143, 19810, 19849), ("src/shadow/ocaml_shadow.ml", 143, 19810, 19946), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 142)), 0, 0); Tag3 (("Local_store", 7601), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 144, 19947, 19991), ("src/shadow/ocaml_shadow.ml", 144, 19947, 20001), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Local_store instead", (("src/shadow/ocaml_shadow.ml", 144, 19947, 20003), ("src/shadow/ocaml_shadow.ml", 144, 19947, 20085), 0), 0)), (("src/shadow/ocaml_shadow.ml", 144, 19947, 20002), ("src/shadow/ocaml_shadow.ml", 144, 19947, 20086), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 144, 19947, 20002), ("src/shadow/ocaml_shadow.ml", 144, 19947, 20086), 0))]), (("src/shadow/ocaml_shadow.ml", 144, 19947, 19988), ("src/shadow/ocaml_shadow.ml", 144, 19947, 20087), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 143)), 0, 0); Tag3 (("Mach", 7602), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 147, 20360, 20397), ("src/shadow/ocaml_shadow.ml", 147, 20360, 20407), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Mach instead", (("src/shadow/ocaml_shadow.ml", 147, 20360, 20409), ("src/shadow/ocaml_shadow.ml", 147, 20360, 20485), 0), 0)), (("src/shadow/ocaml_shadow.ml", 147, 20360, 20408), ("src/shadow/ocaml_shadow.ml", 147, 20360, 20486), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 147, 20360, 20408), ("src/shadow/ocaml_shadow.ml", 147, 20360, 20486), 0))]), (("src/shadow/ocaml_shadow.ml", 147, 20360, 20394), ("src/shadow/ocaml_shadow.ml", 147, 20360, 20487), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 146)), 0, 0); Tag3 (("Main", 7603), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 148, 20488, 20525), ("src/shadow/ocaml_shadow.ml", 148, 20488, 20535), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated", (("src/shadow/ocaml_shadow.ml", 148, 20488, 20537), ("src/shadow/ocaml_shadow.ml", 148, 20488, 20581), 0), 0)), (("src/shadow/ocaml_shadow.ml", 148, 20488, 20536), ("src/shadow/ocaml_shadow.ml", 148, 20488, 20582), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 148, 20488, 20536), ("src/shadow/ocaml_shadow.ml", 148, 20488, 20582), 0))]), (("src/shadow/ocaml_shadow.ml", 148, 20488, 20522), ("src/shadow/ocaml_shadow.ml", 148, 20488, 20583), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 147)), 0, 0); Tag3 (("Main_args", 7604), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 149, 20584, 20626), ("src/shadow/ocaml_shadow.ml", 149, 20584, 20636), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Main_args instead", (("src/shadow/ocaml_shadow.ml", 149, 20584, 20638), ("src/shadow/ocaml_shadow.ml", 149, 20584, 20718), 0), 0)), (("src/shadow/ocaml_shadow.ml", 149, 20584, 20637), ("src/shadow/ocaml_shadow.ml", 149, 20584, 20719), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 149, 20584, 20637), ("src/shadow/ocaml_shadow.ml", 149, 20584, 20719), 0))]), (("src/shadow/ocaml_shadow.ml", 149, 20584, 20623), ("src/shadow/ocaml_shadow.ml", 149, 20584, 20720), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 148)), 0, 0); Tag3 (("Maindriver", 7605), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 150, 20721, 20764), ("src/shadow/ocaml_shadow.ml", 150, 20721, 20774), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_bytecomp.Maindriver instead", (("src/shadow/ocaml_shadow.ml", 150, 20721, 20776), ("src/shadow/ocaml_shadow.ml", 150, 20721, 20859), 0), 0)), (("src/shadow/ocaml_shadow.ml", 150, 20721, 20775), ("src/shadow/ocaml_shadow.ml", 150, 20721, 20860), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 150, 20721, 20775), ("src/shadow/ocaml_shadow.ml", 150, 20721, 20860), 0))]), (("src/shadow/ocaml_shadow.ml", 150, 20721, 20761), ("src/shadow/ocaml_shadow.ml", 150, 20721, 20861), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 149)), 0, 0); Tag3 (("Makedepend", 7606), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 151, 20862, 20905), ("src/shadow/ocaml_shadow.ml", 151, 20862, 20915), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Makedepend instead", (("src/shadow/ocaml_shadow.ml", 151, 20862, 20917), ("src/shadow/ocaml_shadow.ml", 151, 20862, 20998), 0), 0)), (("src/shadow/ocaml_shadow.ml", 151, 20862, 20916), ("src/shadow/ocaml_shadow.ml", 151, 20862, 20999), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 151, 20862, 20916), ("src/shadow/ocaml_shadow.ml", 151, 20862, 20999), 0))]), (("src/shadow/ocaml_shadow.ml", 151, 20862, 20902), ("src/shadow/ocaml_shadow.ml", 151, 20862, 21000), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 150)), 0, 0); Tag3 (("Matching", 7607), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 152, 21001, 21042), ("src/shadow/ocaml_shadow.ml", 152, 21001, 21052), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Matching instead", (("src/shadow/ocaml_shadow.ml", 152, 21001, 21054), ("src/shadow/ocaml_shadow.ml", 152, 21001, 21133), 0), 0)), (("src/shadow/ocaml_shadow.ml", 152, 21001, 21053), ("src/shadow/ocaml_shadow.ml", 152, 21001, 21134), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 152, 21001, 21053), ("src/shadow/ocaml_shadow.ml", 152, 21001, 21134), 0))]), (("src/shadow/ocaml_shadow.ml", 152, 21001, 21039), ("src/shadow/ocaml_shadow.ml", 152, 21001, 21135), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 151)), 0, 0); Tag3 (("Meta", 7608), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 153, 21136, 21173), ("src/shadow/ocaml_shadow.ml", 153, 21136, 21183), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Meta instead", (("src/shadow/ocaml_shadow.ml", 153, 21136, 21185), ("src/shadow/ocaml_shadow.ml", 153, 21136, 21260), 0), 0)), (("src/shadow/ocaml_shadow.ml", 153, 21136, 21184), ("src/shadow/ocaml_shadow.ml", 153, 21136, 21261), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 153, 21136, 21184), ("src/shadow/ocaml_shadow.ml", 153, 21136, 21261), 0))]), (("src/shadow/ocaml_shadow.ml", 153, 21136, 21170), ("src/shadow/ocaml_shadow.ml", 153, 21136, 21262), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 152)), 0, 0); Tag3 (("Misc", 7609), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 154, 21263, 21300), ("src/shadow/ocaml_shadow.ml", 154, 21263, 21310), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Misc instead", (("src/shadow/ocaml_shadow.ml", 154, 21263, 21312), ("src/shadow/ocaml_shadow.ml", 154, 21263, 21387), 0), 0)), (("src/shadow/ocaml_shadow.ml", 154, 21263, 21311), ("src/shadow/ocaml_shadow.ml", 154, 21263, 21388), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 154, 21263, 21311), ("src/shadow/ocaml_shadow.ml", 154, 21263, 21388), 0))]), (("src/shadow/ocaml_shadow.ml", 154, 21263, 21297), ("src/shadow/ocaml_shadow.ml", 154, 21263, 21389), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 153)), 0, 0); Tag3 (("Mtype", 7610), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 155, 21390, 21428), ("src/shadow/ocaml_shadow.ml", 155, 21390, 21438), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Mtype instead", (("src/shadow/ocaml_shadow.ml", 155, 21390, 21440), ("src/shadow/ocaml_shadow.ml", 155, 21390, 21516), 0), 0)), (("src/shadow/ocaml_shadow.ml", 155, 21390, 21439), ("src/shadow/ocaml_shadow.ml", 155, 21390, 21517), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 155, 21390, 21439), ("src/shadow/ocaml_shadow.ml", 155, 21390, 21517), 0))]), (("src/shadow/ocaml_shadow.ml", 155, 21390, 21425), ("src/shadow/ocaml_shadow.ml", 155, 21390, 21518), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 154)), 0, 0); Tag3 (("Mutable_variable", 7611), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 156, 21519, 21568), ("src/shadow/ocaml_shadow.ml", 156, 21519, 21578), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Mutable_variable instead", (("src/shadow/ocaml_shadow.ml", 156, 21519, 21580), ("src/shadow/ocaml_shadow.ml", 156, 21519, 21668), 0), 0)), (("src/shadow/ocaml_shadow.ml", 156, 21519, 21579), ("src/shadow/ocaml_shadow.ml", 156, 21519, 21669), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 156, 21519, 21579), ("src/shadow/ocaml_shadow.ml", 156, 21519, 21669), 0))]), (("src/shadow/ocaml_shadow.ml", 156, 21519, 21565), ("src/shadow/ocaml_shadow.ml", 156, 21519, 21670), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 155)), 0, 0); Tag3 (("Numbers", 7612), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 157, 21671, 21711), ("src/shadow/ocaml_shadow.ml", 157, 21671, 21721), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Numbers instead", (("src/shadow/ocaml_shadow.ml", 157, 21671, 21723), ("src/shadow/ocaml_shadow.ml", 157, 21671, 21801), 0), 0)), (("src/shadow/ocaml_shadow.ml", 157, 21671, 21722), ("src/shadow/ocaml_shadow.ml", 157, 21671, 21802), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 157, 21671, 21722), ("src/shadow/ocaml_shadow.ml", 157, 21671, 21802), 0))]), (("src/shadow/ocaml_shadow.ml", 157, 21671, 21708), ("src/shadow/ocaml_shadow.ml", 157, 21671, 21803), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 156)), 0, 0); Tag3 (("Opcodes", 7613), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 158, 21804, 21844), ("src/shadow/ocaml_shadow.ml", 158, 21804, 21854), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Opcodes instead", (("src/shadow/ocaml_shadow.ml", 158, 21804, 21856), ("src/shadow/ocaml_shadow.ml", 158, 21804, 21934), 0), 0)), (("src/shadow/ocaml_shadow.ml", 158, 21804, 21855), ("src/shadow/ocaml_shadow.ml", 158, 21804, 21935), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 158, 21804, 21855), ("src/shadow/ocaml_shadow.ml", 158, 21804, 21935), 0))]), (("src/shadow/ocaml_shadow.ml", 158, 21804, 21841), ("src/shadow/ocaml_shadow.ml", 158, 21804, 21936), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 157)), 0, 0); Tag3 (("Oprint", 7614), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 159, 21937, 21976), ("src/shadow/ocaml_shadow.ml", 159, 21937, 21986), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Oprint instead", (("src/shadow/ocaml_shadow.ml", 159, 21937, 21988), ("src/shadow/ocaml_shadow.ml", 159, 21937, 22065), 0), 0)), (("src/shadow/ocaml_shadow.ml", 159, 21937, 21987), ("src/shadow/ocaml_shadow.ml", 159, 21937, 22066), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 159, 21937, 21987), ("src/shadow/ocaml_shadow.ml", 159, 21937, 22066), 0))]), (("src/shadow/ocaml_shadow.ml", 159, 21937, 21973), ("src/shadow/ocaml_shadow.ml", 159, 21937, 22067), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 158)), 0, 0); Tag3 (("Optcompile", 7615), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 160, 22068, 22111), ("src/shadow/ocaml_shadow.ml", 160, 22068, 22121), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Optcompile instead", (("src/shadow/ocaml_shadow.ml", 160, 22068, 22123), ("src/shadow/ocaml_shadow.ml", 160, 22068, 22205), 0), 0)), (("src/shadow/ocaml_shadow.ml", 160, 22068, 22122), ("src/shadow/ocaml_shadow.ml", 160, 22068, 22206), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 160, 22068, 22122), ("src/shadow/ocaml_shadow.ml", 160, 22068, 22206), 0))]), (("src/shadow/ocaml_shadow.ml", 160, 22068, 22108), ("src/shadow/ocaml_shadow.ml", 160, 22068, 22207), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 159)), 0, 0); Tag3 (("Opterrors", 7616), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 161, 22208, 22250), ("src/shadow/ocaml_shadow.ml", 161, 22208, 22260), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Opterrors instead", (("src/shadow/ocaml_shadow.ml", 161, 22208, 22262), ("src/shadow/ocaml_shadow.ml", 161, 22208, 22343), 0), 0)), (("src/shadow/ocaml_shadow.ml", 161, 22208, 22261), ("src/shadow/ocaml_shadow.ml", 161, 22208, 22344), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 161, 22208, 22261), ("src/shadow/ocaml_shadow.ml", 161, 22208, 22344), 0))]), (("src/shadow/ocaml_shadow.ml", 161, 22208, 22247), ("src/shadow/ocaml_shadow.ml", 161, 22208, 22345), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 160)), 0, 0); Tag3 (("Optmain", 7617), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 162, 22346, 22386), ("src/shadow/ocaml_shadow.ml", 162, 22346, 22396), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated", (("src/shadow/ocaml_shadow.ml", 162, 22346, 22398), ("src/shadow/ocaml_shadow.ml", 162, 22346, 22442), 0), 0)), (("src/shadow/ocaml_shadow.ml", 162, 22346, 22397), ("src/shadow/ocaml_shadow.ml", 162, 22346, 22443), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 162, 22346, 22397), ("src/shadow/ocaml_shadow.ml", 162, 22346, 22443), 0))]), (("src/shadow/ocaml_shadow.ml", 162, 22346, 22383), ("src/shadow/ocaml_shadow.ml", 162, 22346, 22444), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 161)), 0, 0); Tag3 (("Optmaindriver", 7618), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 163, 22445, 22491), ("src/shadow/ocaml_shadow.ml", 163, 22445, 22501), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Optmaindriver instead", (("src/shadow/ocaml_shadow.ml", 163, 22445, 22503), ("src/shadow/ocaml_shadow.ml", 163, 22445, 22588), 0), 0)), (("src/shadow/ocaml_shadow.ml", 163, 22445, 22502), ("src/shadow/ocaml_shadow.ml", 163, 22445, 22589), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 163, 22445, 22502), ("src/shadow/ocaml_shadow.ml", 163, 22445, 22589), 0))]), (("src/shadow/ocaml_shadow.ml", 163, 22445, 22488), ("src/shadow/ocaml_shadow.ml", 163, 22445, 22590), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 162)), 0, 0); Tag3 (("Outcometree", 7619), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 164, 22591, 22635), ("src/shadow/ocaml_shadow.ml", 164, 22591, 22645), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated", (("src/shadow/ocaml_shadow.ml", 164, 22591, 22647), ("src/shadow/ocaml_shadow.ml", 164, 22591, 22691), 0), 0)), (("src/shadow/ocaml_shadow.ml", 164, 22591, 22646), ("src/shadow/ocaml_shadow.ml", 164, 22591, 22692), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 164, 22591, 22646), ("src/shadow/ocaml_shadow.ml", 164, 22591, 22692), 0))]), (("src/shadow/ocaml_shadow.ml", 164, 22591, 22632), ("src/shadow/ocaml_shadow.ml", 164, 22591, 22693), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 163)), 0, 0); Tag3 (("Parameter", 7620), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 165, 22694, 22736), ("src/shadow/ocaml_shadow.ml", 165, 22694, 22746), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Parameter instead", (("src/shadow/ocaml_shadow.ml", 165, 22694, 22748), ("src/shadow/ocaml_shadow.ml", 165, 22694, 22829), 0), 0)), (("src/shadow/ocaml_shadow.ml", 165, 22694, 22747), ("src/shadow/ocaml_shadow.ml", 165, 22694, 22830), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 165, 22694, 22747), ("src/shadow/ocaml_shadow.ml", 165, 22694, 22830), 0))]), (("src/shadow/ocaml_shadow.ml", 165, 22694, 22733), ("src/shadow/ocaml_shadow.ml", 165, 22694, 22831), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 164)), 0, 0); Tag3 (("Parmatch", 7621), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 166, 22832, 22873), ("src/shadow/ocaml_shadow.ml", 166, 22832, 22883), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Parmatch instead", (("src/shadow/ocaml_shadow.ml", 166, 22832, 22885), ("src/shadow/ocaml_shadow.ml", 166, 22832, 22964), 0), 0)), (("src/shadow/ocaml_shadow.ml", 166, 22832, 22884), ("src/shadow/ocaml_shadow.ml", 166, 22832, 22965), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 166, 22832, 22884), ("src/shadow/ocaml_shadow.ml", 166, 22832, 22965), 0))]), (("src/shadow/ocaml_shadow.ml", 166, 22832, 22870), ("src/shadow/ocaml_shadow.ml", 166, 22832, 22966), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 165)), 0, 0); Tag3 (("Parser", 7622), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 168, 23096, 23135), ("src/shadow/ocaml_shadow.ml", 168, 23096, 23145), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Parser instead", (("src/shadow/ocaml_shadow.ml", 168, 23096, 23147), ("src/shadow/ocaml_shadow.ml", 168, 23096, 23224), 0), 0)), (("src/shadow/ocaml_shadow.ml", 168, 23096, 23146), ("src/shadow/ocaml_shadow.ml", 168, 23096, 23225), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 168, 23096, 23146), ("src/shadow/ocaml_shadow.ml", 168, 23096, 23225), 0))]), (("src/shadow/ocaml_shadow.ml", 168, 23096, 23132), ("src/shadow/ocaml_shadow.ml", 168, 23096, 23226), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 167)), 0, 0); Tag3 (("Pass_wrapper", 7623), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 170, 23328, 23373), ("src/shadow/ocaml_shadow.ml", 170, 23328, 23383), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Pass_wrapper instead", (("src/shadow/ocaml_shadow.ml", 170, 23328, 23385), ("src/shadow/ocaml_shadow.ml", 170, 23328, 23469), 0), 0)), (("src/shadow/ocaml_shadow.ml", 170, 23328, 23384), ("src/shadow/ocaml_shadow.ml", 170, 23328, 23470), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 170, 23328, 23384), ("src/shadow/ocaml_shadow.ml", 170, 23328, 23470), 0))]), (("src/shadow/ocaml_shadow.ml", 170, 23328, 23370), ("src/shadow/ocaml_shadow.ml", 170, 23328, 23471), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 169)), 0, 0); Tag3 (("Path", 7624), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 171, 23472, 23509), ("src/shadow/ocaml_shadow.ml", 171, 23472, 23519), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Path instead", (("src/shadow/ocaml_shadow.ml", 171, 23472, 23521), ("src/shadow/ocaml_shadow.ml", 171, 23472, 23596), 0), 0)), (("src/shadow/ocaml_shadow.ml", 171, 23472, 23520), ("src/shadow/ocaml_shadow.ml", 171, 23472, 23597), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 171, 23472, 23520), ("src/shadow/ocaml_shadow.ml", 171, 23472, 23597), 0))]), (("src/shadow/ocaml_shadow.ml", 171, 23472, 23506), ("src/shadow/ocaml_shadow.ml", 171, 23472, 23598), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 170)), 0, 0); Tag3 (("Patterns", 7625), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 172, 23599, 23640), ("src/shadow/ocaml_shadow.ml", 172, 23599, 23650), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Patterns instead", (("src/shadow/ocaml_shadow.ml", 172, 23599, 23652), ("src/shadow/ocaml_shadow.ml", 172, 23599, 23731), 0), 0)), (("src/shadow/ocaml_shadow.ml", 172, 23599, 23651), ("src/shadow/ocaml_shadow.ml", 172, 23599, 23732), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 172, 23599, 23651), ("src/shadow/ocaml_shadow.ml", 172, 23599, 23732), 0))]), (("src/shadow/ocaml_shadow.ml", 172, 23599, 23637), ("src/shadow/ocaml_shadow.ml", 172, 23599, 23733), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 171)), 0, 0); Tag3 (("Persistent_env", 7626), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 173, 23734, 23781), ("src/shadow/ocaml_shadow.ml", 173, 23734, 23791), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Persistent_env instead", (("src/shadow/ocaml_shadow.ml", 173, 23734, 23793), ("src/shadow/ocaml_shadow.ml", 173, 23734, 23878), 0), 0)), (("src/shadow/ocaml_shadow.ml", 173, 23734, 23792), ("src/shadow/ocaml_shadow.ml", 173, 23734, 23879), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 173, 23734, 23792), ("src/shadow/ocaml_shadow.ml", 173, 23734, 23879), 0))]), (("src/shadow/ocaml_shadow.ml", 173, 23734, 23778), ("src/shadow/ocaml_shadow.ml", 173, 23734, 23880), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 172)), 0, 0); Tag3 (("Polling", 7627), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 174, 23881, 23921), ("src/shadow/ocaml_shadow.ml", 174, 23881, 23931), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Polling instead", (("src/shadow/ocaml_shadow.ml", 174, 23881, 23933), ("src/shadow/ocaml_shadow.ml", 174, 23881, 24012), 0), 0)), (("src/shadow/ocaml_shadow.ml", 174, 23881, 23932), ("src/shadow/ocaml_shadow.ml", 174, 23881, 24013), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 174, 23881, 23932), ("src/shadow/ocaml_shadow.ml", 174, 23881, 24013), 0))]), (("src/shadow/ocaml_shadow.ml", 174, 23881, 23918), ("src/shadow/ocaml_shadow.ml", 174, 23881, 24014), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 173)), 0, 0); Tag3 (("Pparse", 7628), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 175, 24015, 24054), ("src/shadow/ocaml_shadow.ml", 175, 24015, 24064), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Pparse instead", (("src/shadow/ocaml_shadow.ml", 175, 24015, 24066), ("src/shadow/ocaml_shadow.ml", 175, 24015, 24143), 0), 0)), (("src/shadow/ocaml_shadow.ml", 175, 24015, 24065), ("src/shadow/ocaml_shadow.ml", 175, 24015, 24144), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 175, 24015, 24065), ("src/shadow/ocaml_shadow.ml", 175, 24015, 24144), 0))]), (("src/shadow/ocaml_shadow.ml", 175, 24015, 24051), ("src/shadow/ocaml_shadow.ml", 175, 24015, 24145), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 174)), 0, 0); Tag3 (("Predef", 7629), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 177, 24283, 24322), ("src/shadow/ocaml_shadow.ml", 177, 24283, 24332), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Predef instead", (("src/shadow/ocaml_shadow.ml", 177, 24283, 24334), ("src/shadow/ocaml_shadow.ml", 177, 24283, 24411), 0), 0)), (("src/shadow/ocaml_shadow.ml", 177, 24283, 24333), ("src/shadow/ocaml_shadow.ml", 177, 24283, 24412), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 177, 24283, 24333), ("src/shadow/ocaml_shadow.ml", 177, 24283, 24412), 0))]), (("src/shadow/ocaml_shadow.ml", 177, 24283, 24319), ("src/shadow/ocaml_shadow.ml", 177, 24283, 24413), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 176)), 0, 0); Tag3 (("Primitive", 7630), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 178, 24414, 24456), ("src/shadow/ocaml_shadow.ml", 178, 24414, 24466), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Primitive instead", (("src/shadow/ocaml_shadow.ml", 178, 24414, 24468), ("src/shadow/ocaml_shadow.ml", 178, 24414, 24548), 0), 0)), (("src/shadow/ocaml_shadow.ml", 178, 24414, 24467), ("src/shadow/ocaml_shadow.ml", 178, 24414, 24549), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 178, 24414, 24467), ("src/shadow/ocaml_shadow.ml", 178, 24414, 24549), 0))]), (("src/shadow/ocaml_shadow.ml", 178, 24414, 24453), ("src/shadow/ocaml_shadow.ml", 178, 24414, 24550), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 177)), 0, 0); Tag3 (("Printast", 7631), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 179, 24551, 24592), ("src/shadow/ocaml_shadow.ml", 179, 24551, 24602), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Printast instead", (("src/shadow/ocaml_shadow.ml", 179, 24551, 24604), ("src/shadow/ocaml_shadow.ml", 179, 24551, 24683), 0), 0)), (("src/shadow/ocaml_shadow.ml", 179, 24551, 24603), ("src/shadow/ocaml_shadow.ml", 179, 24551, 24684), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 179, 24551, 24603), ("src/shadow/ocaml_shadow.ml", 179, 24551, 24684), 0))]), (("src/shadow/ocaml_shadow.ml", 179, 24551, 24589), ("src/shadow/ocaml_shadow.ml", 179, 24551, 24685), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 178)), 0, 0); Tag3 (("Printclambda", 7632), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 180, 24686, 24731), ("src/shadow/ocaml_shadow.ml", 180, 24686, 24741), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Printclambda instead", (("src/shadow/ocaml_shadow.ml", 180, 24686, 24743), ("src/shadow/ocaml_shadow.ml", 180, 24686, 24827), 0), 0)), (("src/shadow/ocaml_shadow.ml", 180, 24686, 24742), ("src/shadow/ocaml_shadow.ml", 180, 24686, 24828), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 180, 24686, 24742), ("src/shadow/ocaml_shadow.ml", 180, 24686, 24828), 0))]), (("src/shadow/ocaml_shadow.ml", 180, 24686, 24728), ("src/shadow/ocaml_shadow.ml", 180, 24686, 24829), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 179)), 0, 0); Tag3 (("Printclambda_primitives", 7633), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 181, 24830, 24886), ("src/shadow/ocaml_shadow.ml", 181, 24830, 24896), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Printclambda_primitives instead", (("src/shadow/ocaml_shadow.ml", 181, 24830, 24898), ("src/shadow/ocaml_shadow.ml", 181, 24830, 24993), 0), 0)), (("src/shadow/ocaml_shadow.ml", 181, 24830, 24897), ("src/shadow/ocaml_shadow.ml", 181, 24830, 24994), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 181, 24830, 24897), ("src/shadow/ocaml_shadow.ml", 181, 24830, 24994), 0))]), (("src/shadow/ocaml_shadow.ml", 181, 24830, 24883), ("src/shadow/ocaml_shadow.ml", 181, 24830, 24995), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 180)), 0, 0); Tag3 (("Printcmm", 7634), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 182, 24996, 25037), ("src/shadow/ocaml_shadow.ml", 182, 24996, 25047), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Printcmm instead", (("src/shadow/ocaml_shadow.ml", 182, 24996, 25049), ("src/shadow/ocaml_shadow.ml", 182, 24996, 25129), 0), 0)), (("src/shadow/ocaml_shadow.ml", 182, 24996, 25048), ("src/shadow/ocaml_shadow.ml", 182, 24996, 25130), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 182, 24996, 25048), ("src/shadow/ocaml_shadow.ml", 182, 24996, 25130), 0))]), (("src/shadow/ocaml_shadow.ml", 182, 24996, 25034), ("src/shadow/ocaml_shadow.ml", 182, 24996, 25131), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 181)), 0, 0); Tag3 (("Printinstr", 7635), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 183, 25132, 25175), ("src/shadow/ocaml_shadow.ml", 183, 25132, 25185), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_bytecomp.Printinstr instead", (("src/shadow/ocaml_shadow.ml", 183, 25132, 25187), ("src/shadow/ocaml_shadow.ml", 183, 25132, 25270), 0), 0)), (("src/shadow/ocaml_shadow.ml", 183, 25132, 25186), ("src/shadow/ocaml_shadow.ml", 183, 25132, 25271), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 183, 25132, 25186), ("src/shadow/ocaml_shadow.ml", 183, 25132, 25271), 0))]), (("src/shadow/ocaml_shadow.ml", 183, 25132, 25172), ("src/shadow/ocaml_shadow.ml", 183, 25132, 25272), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 182)), 0, 0); Tag3 (("Printlambda", 7636), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 184, 25273, 25317), ("src/shadow/ocaml_shadow.ml", 184, 25273, 25327), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Printlambda instead", (("src/shadow/ocaml_shadow.ml", 184, 25273, 25329), ("src/shadow/ocaml_shadow.ml", 184, 25273, 25411), 0), 0)), (("src/shadow/ocaml_shadow.ml", 184, 25273, 25328), ("src/shadow/ocaml_shadow.ml", 184, 25273, 25412), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 184, 25273, 25328), ("src/shadow/ocaml_shadow.ml", 184, 25273, 25412), 0))]), (("src/shadow/ocaml_shadow.ml", 184, 25273, 25314), ("src/shadow/ocaml_shadow.ml", 184, 25273, 25413), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 183)), 0, 0); Tag3 (("Printlinear", 7637), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 185, 25414, 25458), ("src/shadow/ocaml_shadow.ml", 185, 25414, 25468), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Printlinear instead", (("src/shadow/ocaml_shadow.ml", 185, 25414, 25470), ("src/shadow/ocaml_shadow.ml", 185, 25414, 25553), 0), 0)), (("src/shadow/ocaml_shadow.ml", 185, 25414, 25469), ("src/shadow/ocaml_shadow.ml", 185, 25414, 25554), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 185, 25414, 25469), ("src/shadow/ocaml_shadow.ml", 185, 25414, 25554), 0))]), (("src/shadow/ocaml_shadow.ml", 185, 25414, 25455), ("src/shadow/ocaml_shadow.ml", 185, 25414, 25555), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 184)), 0, 0); Tag3 (("Printmach", 7638), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 186, 25556, 25598), ("src/shadow/ocaml_shadow.ml", 186, 25556, 25608), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Printmach instead", (("src/shadow/ocaml_shadow.ml", 186, 25556, 25610), ("src/shadow/ocaml_shadow.ml", 186, 25556, 25691), 0), 0)), (("src/shadow/ocaml_shadow.ml", 186, 25556, 25609), ("src/shadow/ocaml_shadow.ml", 186, 25556, 25692), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 186, 25556, 25609), ("src/shadow/ocaml_shadow.ml", 186, 25556, 25692), 0))]), (("src/shadow/ocaml_shadow.ml", 186, 25556, 25595), ("src/shadow/ocaml_shadow.ml", 186, 25556, 25693), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 185)), 0, 0); Tag3 (("Printpat", 7639), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 187, 25694, 25735), ("src/shadow/ocaml_shadow.ml", 187, 25694, 25745), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Printpat instead", (("src/shadow/ocaml_shadow.ml", 187, 25694, 25747), ("src/shadow/ocaml_shadow.ml", 187, 25694, 25826), 0), 0)), (("src/shadow/ocaml_shadow.ml", 187, 25694, 25746), ("src/shadow/ocaml_shadow.ml", 187, 25694, 25827), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 187, 25694, 25746), ("src/shadow/ocaml_shadow.ml", 187, 25694, 25827), 0))]), (("src/shadow/ocaml_shadow.ml", 187, 25694, 25732), ("src/shadow/ocaml_shadow.ml", 187, 25694, 25828), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 186)), 0, 0); Tag3 (("Printtyp", 7640), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 188, 25829, 25870), ("src/shadow/ocaml_shadow.ml", 188, 25829, 25880), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Printtyp instead", (("src/shadow/ocaml_shadow.ml", 188, 25829, 25882), ("src/shadow/ocaml_shadow.ml", 188, 25829, 25961), 0), 0)), (("src/shadow/ocaml_shadow.ml", 188, 25829, 25881), ("src/shadow/ocaml_shadow.ml", 188, 25829, 25962), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 188, 25829, 25881), ("src/shadow/ocaml_shadow.ml", 188, 25829, 25962), 0))]), (("src/shadow/ocaml_shadow.ml", 188, 25829, 25867), ("src/shadow/ocaml_shadow.ml", 188, 25829, 25963), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 187)), 0, 0); Tag3 (("Printtyped", 7641), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 189, 25964, 26007), ("src/shadow/ocaml_shadow.ml", 189, 25964, 26017), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Printtyped instead", (("src/shadow/ocaml_shadow.ml", 189, 25964, 26019), ("src/shadow/ocaml_shadow.ml", 189, 25964, 26100), 0), 0)), (("src/shadow/ocaml_shadow.ml", 189, 25964, 26018), ("src/shadow/ocaml_shadow.ml", 189, 25964, 26101), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 189, 25964, 26018), ("src/shadow/ocaml_shadow.ml", 189, 25964, 26101), 0))]), (("src/shadow/ocaml_shadow.ml", 189, 25964, 26004), ("src/shadow/ocaml_shadow.ml", 189, 25964, 26102), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 188)), 0, 0); Tag3 (("Proc", 7642), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 190, 26103, 26140), ("src/shadow/ocaml_shadow.ml", 190, 26103, 26150), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Proc instead", (("src/shadow/ocaml_shadow.ml", 190, 26103, 26152), ("src/shadow/ocaml_shadow.ml", 190, 26103, 26228), 0), 0)), (("src/shadow/ocaml_shadow.ml", 190, 26103, 26151), ("src/shadow/ocaml_shadow.ml", 190, 26103, 26229), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 190, 26103, 26151), ("src/shadow/ocaml_shadow.ml", 190, 26103, 26229), 0))]), (("src/shadow/ocaml_shadow.ml", 190, 26103, 26137), ("src/shadow/ocaml_shadow.ml", 190, 26103, 26230), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 189)), 0, 0); Tag3 (("Profile", 7643), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 191, 26231, 26271), ("src/shadow/ocaml_shadow.ml", 191, 26231, 26281), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Profile instead", (("src/shadow/ocaml_shadow.ml", 191, 26231, 26283), ("src/shadow/ocaml_shadow.ml", 191, 26231, 26361), 0), 0)), (("src/shadow/ocaml_shadow.ml", 191, 26231, 26282), ("src/shadow/ocaml_shadow.ml", 191, 26231, 26362), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 191, 26231, 26282), ("src/shadow/ocaml_shadow.ml", 191, 26231, 26362), 0))]), (("src/shadow/ocaml_shadow.ml", 191, 26231, 26268), ("src/shadow/ocaml_shadow.ml", 191, 26231, 26363), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 190)), 0, 0); Tag3 (("Projection", 7644), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 192, 26364, 26407), ("src/shadow/ocaml_shadow.ml", 192, 26364, 26417), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Projection instead", (("src/shadow/ocaml_shadow.ml", 192, 26364, 26419), ("src/shadow/ocaml_shadow.ml", 192, 26364, 26501), 0), 0)), (("src/shadow/ocaml_shadow.ml", 192, 26364, 26418), ("src/shadow/ocaml_shadow.ml", 192, 26364, 26502), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 192, 26364, 26418), ("src/shadow/ocaml_shadow.ml", 192, 26364, 26502), 0))]), (("src/shadow/ocaml_shadow.ml", 192, 26364, 26404), ("src/shadow/ocaml_shadow.ml", 192, 26364, 26503), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 191)), 0, 0); Tag3 (("Rec_check", 7645), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 193, 26504, 26546), ("src/shadow/ocaml_shadow.ml", 193, 26504, 26556), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Rec_check instead", (("src/shadow/ocaml_shadow.ml", 193, 26504, 26558), ("src/shadow/ocaml_shadow.ml", 193, 26504, 26638), 0), 0)), (("src/shadow/ocaml_shadow.ml", 193, 26504, 26557), ("src/shadow/ocaml_shadow.ml", 193, 26504, 26639), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 193, 26504, 26557), ("src/shadow/ocaml_shadow.ml", 193, 26504, 26639), 0))]), (("src/shadow/ocaml_shadow.ml", 193, 26504, 26543), ("src/shadow/ocaml_shadow.ml", 193, 26504, 26640), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 192)), 0, 0); Tag3 (("Ref_to_variables", 7646), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 194, 26641, 26690), ("src/shadow/ocaml_shadow.ml", 194, 26641, 26700), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Ref_to_variables instead", (("src/shadow/ocaml_shadow.ml", 194, 26641, 26702), ("src/shadow/ocaml_shadow.ml", 194, 26641, 26790), 0), 0)), (("src/shadow/ocaml_shadow.ml", 194, 26641, 26701), ("src/shadow/ocaml_shadow.ml", 194, 26641, 26791), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 194, 26641, 26701), ("src/shadow/ocaml_shadow.ml", 194, 26641, 26791), 0))]), (("src/shadow/ocaml_shadow.ml", 194, 26641, 26687), ("src/shadow/ocaml_shadow.ml", 194, 26641, 26792), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 193)), 0, 0); Tag3 (("Reg", 7647), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 195, 26793, 26829), ("src/shadow/ocaml_shadow.ml", 195, 26793, 26839), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Reg instead", (("src/shadow/ocaml_shadow.ml", 195, 26793, 26841), ("src/shadow/ocaml_shadow.ml", 195, 26793, 26916), 0), 0)), (("src/shadow/ocaml_shadow.ml", 195, 26793, 26840), ("src/shadow/ocaml_shadow.ml", 195, 26793, 26917), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 195, 26793, 26840), ("src/shadow/ocaml_shadow.ml", 195, 26793, 26917), 0))]), (("src/shadow/ocaml_shadow.ml", 195, 26793, 26826), ("src/shadow/ocaml_shadow.ml", 195, 26793, 26918), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 194)), 0, 0); Tag3 (("Reload", 7648), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 196, 26919, 26958), ("src/shadow/ocaml_shadow.ml", 196, 26919, 26968), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Reload instead", (("src/shadow/ocaml_shadow.ml", 196, 26919, 26970), ("src/shadow/ocaml_shadow.ml", 196, 26919, 27048), 0), 0)), (("src/shadow/ocaml_shadow.ml", 196, 26919, 26969), ("src/shadow/ocaml_shadow.ml", 196, 26919, 27049), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 196, 26919, 26969), ("src/shadow/ocaml_shadow.ml", 196, 26919, 27049), 0))]), (("src/shadow/ocaml_shadow.ml", 196, 26919, 26955), ("src/shadow/ocaml_shadow.ml", 196, 26919, 27050), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 195)), 0, 0); Tag3 (("Reloadgen", 7649), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 197, 27051, 27093), ("src/shadow/ocaml_shadow.ml", 197, 27051, 27103), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Reloadgen instead", (("src/shadow/ocaml_shadow.ml", 197, 27051, 27105), ("src/shadow/ocaml_shadow.ml", 197, 27051, 27186), 0), 0)), (("src/shadow/ocaml_shadow.ml", 197, 27051, 27104), ("src/shadow/ocaml_shadow.ml", 197, 27051, 27187), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 197, 27051, 27104), ("src/shadow/ocaml_shadow.ml", 197, 27051, 27187), 0))]), (("src/shadow/ocaml_shadow.ml", 197, 27051, 27090), ("src/shadow/ocaml_shadow.ml", 197, 27051, 27188), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 196)), 0, 0); Tag3 (("Remove_free_vars_equal_to_args", 7650), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 198, 27189, 27252), ("src/shadow/ocaml_shadow.ml", 198, 27189, 27262), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Remove_free_vars_equal_to_args instead", (("src/shadow/ocaml_shadow.ml", 198, 27189, 27264), ("src/shadow/ocaml_shadow.ml", 198, 27189, 27366), 0), 0)), (("src/shadow/ocaml_shadow.ml", 198, 27189, 27263), ("src/shadow/ocaml_shadow.ml", 198, 27189, 27367), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 198, 27189, 27263), ("src/shadow/ocaml_shadow.ml", 198, 27189, 27367), 0))]), (("src/shadow/ocaml_shadow.ml", 198, 27189, 27249), ("src/shadow/ocaml_shadow.ml", 198, 27189, 27368), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 197)), 0, 0); Tag3 (("Remove_unused_arguments", 7651), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 199, 27369, 27425), ("src/shadow/ocaml_shadow.ml", 199, 27369, 27435), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Remove_unused_arguments instead", (("src/shadow/ocaml_shadow.ml", 199, 27369, 27437), ("src/shadow/ocaml_shadow.ml", 199, 27369, 27532), 0), 0)), (("src/shadow/ocaml_shadow.ml", 199, 27369, 27436), ("src/shadow/ocaml_shadow.ml", 199, 27369, 27533), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 199, 27369, 27436), ("src/shadow/ocaml_shadow.ml", 199, 27369, 27533), 0))]), (("src/shadow/ocaml_shadow.ml", 199, 27369, 27422), ("src/shadow/ocaml_shadow.ml", 199, 27369, 27534), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 198)), 0, 0); Tag3 (("Remove_unused_closure_vars", 7652), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 200, 27535, 27594), ("src/shadow/ocaml_shadow.ml", 200, 27535, 27604), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Remove_unused_closure_vars instead", (("src/shadow/ocaml_shadow.ml", 200, 27535, 27606), ("src/shadow/ocaml_shadow.ml", 200, 27535, 27704), 0), 0)), (("src/shadow/ocaml_shadow.ml", 200, 27535, 27605), ("src/shadow/ocaml_shadow.ml", 200, 27535, 27705), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 200, 27535, 27605), ("src/shadow/ocaml_shadow.ml", 200, 27535, 27705), 0))]), (("src/shadow/ocaml_shadow.ml", 200, 27535, 27591), ("src/shadow/ocaml_shadow.ml", 200, 27535, 27706), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 199)), 0, 0); Tag3 (("Remove_unused_program_constructs", 7653), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 201, 27707, 27772), ("src/shadow/ocaml_shadow.ml", 201, 27707, 27782), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Remove_unused_program_constructs instead", (("src/shadow/ocaml_shadow.ml", 201, 27707, 27784), ("src/shadow/ocaml_shadow.ml", 201, 27707, 27888), 0), 0)), (("src/shadow/ocaml_shadow.ml", 201, 27707, 27783), ("src/shadow/ocaml_shadow.ml", 201, 27707, 27889), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 201, 27707, 27783), ("src/shadow/ocaml_shadow.ml", 201, 27707, 27889), 0))]), (("src/shadow/ocaml_shadow.ml", 201, 27707, 27769), ("src/shadow/ocaml_shadow.ml", 201, 27707, 27890), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 200)), 0, 0); Tag3 (("Runtimedef", 7654), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 202, 27891, 27934), ("src/shadow/ocaml_shadow.ml", 202, 27891, 27944), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Runtimedef instead", (("src/shadow/ocaml_shadow.ml", 202, 27891, 27946), ("src/shadow/ocaml_shadow.ml", 202, 27891, 28027), 0), 0)), (("src/shadow/ocaml_shadow.ml", 202, 27891, 27945), ("src/shadow/ocaml_shadow.ml", 202, 27891, 28028), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 202, 27891, 27945), ("src/shadow/ocaml_shadow.ml", 202, 27891, 28028), 0))]), (("src/shadow/ocaml_shadow.ml", 202, 27891, 27931), ("src/shadow/ocaml_shadow.ml", 202, 27891, 28029), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 201)), 0, 0); Tag3 (("Schedgen", 7655), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 203, 28030, 28071), ("src/shadow/ocaml_shadow.ml", 203, 28030, 28081), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Schedgen instead", (("src/shadow/ocaml_shadow.ml", 203, 28030, 28083), ("src/shadow/ocaml_shadow.ml", 203, 28030, 28163), 0), 0)), (("src/shadow/ocaml_shadow.ml", 203, 28030, 28082), ("src/shadow/ocaml_shadow.ml", 203, 28030, 28164), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 203, 28030, 28082), ("src/shadow/ocaml_shadow.ml", 203, 28030, 28164), 0))]), (("src/shadow/ocaml_shadow.ml", 203, 28030, 28068), ("src/shadow/ocaml_shadow.ml", 203, 28030, 28165), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 202)), 0, 0); Tag3 (("Scheduling", 7656), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 204, 28166, 28209), ("src/shadow/ocaml_shadow.ml", 204, 28166, 28219), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Scheduling instead", (("src/shadow/ocaml_shadow.ml", 204, 28166, 28221), ("src/shadow/ocaml_shadow.ml", 204, 28166, 28303), 0), 0)), (("src/shadow/ocaml_shadow.ml", 204, 28166, 28220), ("src/shadow/ocaml_shadow.ml", 204, 28166, 28304), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 204, 28166, 28220), ("src/shadow/ocaml_shadow.ml", 204, 28166, 28304), 0))]), (("src/shadow/ocaml_shadow.ml", 204, 28166, 28206), ("src/shadow/ocaml_shadow.ml", 204, 28166, 28305), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 203)), 0, 0); Tag3 (("Selectgen", 7657), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 205, 28306, 28348), ("src/shadow/ocaml_shadow.ml", 205, 28306, 28358), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Selectgen instead", (("src/shadow/ocaml_shadow.ml", 205, 28306, 28360), ("src/shadow/ocaml_shadow.ml", 205, 28306, 28441), 0), 0)), (("src/shadow/ocaml_shadow.ml", 205, 28306, 28359), ("src/shadow/ocaml_shadow.ml", 205, 28306, 28442), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 205, 28306, 28359), ("src/shadow/ocaml_shadow.ml", 205, 28306, 28442), 0))]), (("src/shadow/ocaml_shadow.ml", 205, 28306, 28345), ("src/shadow/ocaml_shadow.ml", 205, 28306, 28443), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 204)), 0, 0); Tag3 (("Selection", 7658), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 206, 28444, 28486), ("src/shadow/ocaml_shadow.ml", 206, 28444, 28496), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Selection instead", (("src/shadow/ocaml_shadow.ml", 206, 28444, 28498), ("src/shadow/ocaml_shadow.ml", 206, 28444, 28579), 0), 0)), (("src/shadow/ocaml_shadow.ml", 206, 28444, 28497), ("src/shadow/ocaml_shadow.ml", 206, 28444, 28580), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 206, 28444, 28497), ("src/shadow/ocaml_shadow.ml", 206, 28444, 28580), 0))]), (("src/shadow/ocaml_shadow.ml", 206, 28444, 28483), ("src/shadow/ocaml_shadow.ml", 206, 28444, 28581), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 205)), 0, 0); Tag3 (("Semantics_of_primitives", 7659), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 207, 28582, 28638), ("src/shadow/ocaml_shadow.ml", 207, 28582, 28648), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Semantics_of_primitives instead", (("src/shadow/ocaml_shadow.ml", 207, 28582, 28650), ("src/shadow/ocaml_shadow.ml", 207, 28582, 28745), 0), 0)), (("src/shadow/ocaml_shadow.ml", 207, 28582, 28649), ("src/shadow/ocaml_shadow.ml", 207, 28582, 28746), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 207, 28582, 28649), ("src/shadow/ocaml_shadow.ml", 207, 28582, 28746), 0))]), (("src/shadow/ocaml_shadow.ml", 207, 28582, 28635), ("src/shadow/ocaml_shadow.ml", 207, 28582, 28747), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 206)), 0, 0); Tag3 (("Set_of_closures_id", 7660), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 208, 28748, 28799), ("src/shadow/ocaml_shadow.ml", 208, 28748, 28809), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Set_of_closures_id instead", (("src/shadow/ocaml_shadow.ml", 208, 28748, 28811), ("src/shadow/ocaml_shadow.ml", 208, 28748, 28901), 0), 0)), (("src/shadow/ocaml_shadow.ml", 208, 28748, 28810), ("src/shadow/ocaml_shadow.ml", 208, 28748, 28902), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 208, 28748, 28810), ("src/shadow/ocaml_shadow.ml", 208, 28748, 28902), 0))]), (("src/shadow/ocaml_shadow.ml", 208, 28748, 28796), ("src/shadow/ocaml_shadow.ml", 208, 28748, 28903), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 207)), 0, 0); Tag3 (("Set_of_closures_origin", 7661), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 209, 28904, 28959), ("src/shadow/ocaml_shadow.ml", 209, 28904, 28969), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Set_of_closures_origin instead", (("src/shadow/ocaml_shadow.ml", 209, 28904, 28971), ("src/shadow/ocaml_shadow.ml", 209, 28904, 29065), 0), 0)), (("src/shadow/ocaml_shadow.ml", 209, 28904, 28970), ("src/shadow/ocaml_shadow.ml", 209, 28904, 29066), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 209, 28904, 28970), ("src/shadow/ocaml_shadow.ml", 209, 28904, 29066), 0))]), (("src/shadow/ocaml_shadow.ml", 209, 28904, 28956), ("src/shadow/ocaml_shadow.ml", 209, 28904, 29067), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 208)), 0, 0); Tag3 (("Shape", 7662), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 210, 29068, 29106), ("src/shadow/ocaml_shadow.ml", 210, 29068, 29116), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Shape instead", (("src/shadow/ocaml_shadow.ml", 210, 29068, 29118), ("src/shadow/ocaml_shadow.ml", 210, 29068, 29194), 0), 0)), (("src/shadow/ocaml_shadow.ml", 210, 29068, 29117), ("src/shadow/ocaml_shadow.ml", 210, 29068, 29195), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 210, 29068, 29117), ("src/shadow/ocaml_shadow.ml", 210, 29068, 29195), 0))]), (("src/shadow/ocaml_shadow.ml", 210, 29068, 29103), ("src/shadow/ocaml_shadow.ml", 210, 29068, 29196), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 209)), 0, 0); Tag3 (("Share_constants", 7663), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 211, 29197, 29245), ("src/shadow/ocaml_shadow.ml", 211, 29197, 29255), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Share_constants instead", (("src/shadow/ocaml_shadow.ml", 211, 29197, 29257), ("src/shadow/ocaml_shadow.ml", 211, 29197, 29344), 0), 0)), (("src/shadow/ocaml_shadow.ml", 211, 29197, 29256), ("src/shadow/ocaml_shadow.ml", 211, 29197, 29345), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 211, 29197, 29256), ("src/shadow/ocaml_shadow.ml", 211, 29197, 29345), 0))]), (("src/shadow/ocaml_shadow.ml", 211, 29197, 29242), ("src/shadow/ocaml_shadow.ml", 211, 29197, 29346), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 210)), 0, 0); Tag3 (("Signature_group", 7664), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 212, 29347, 29395), ("src/shadow/ocaml_shadow.ml", 212, 29347, 29405), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Signature_group instead", (("src/shadow/ocaml_shadow.ml", 212, 29347, 29407), ("src/shadow/ocaml_shadow.ml", 212, 29347, 29493), 0), 0)), (("src/shadow/ocaml_shadow.ml", 212, 29347, 29406), ("src/shadow/ocaml_shadow.ml", 212, 29347, 29494), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 212, 29347, 29406), ("src/shadow/ocaml_shadow.ml", 212, 29347, 29494), 0))]), (("src/shadow/ocaml_shadow.ml", 212, 29347, 29392), ("src/shadow/ocaml_shadow.ml", 212, 29347, 29495), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 211)), 0, 0); Tag3 (("Simple_value_approx", 7665), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 213, 29496, 29548), ("src/shadow/ocaml_shadow.ml", 213, 29496, 29558), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Simple_value_approx instead", (("src/shadow/ocaml_shadow.ml", 213, 29496, 29560), ("src/shadow/ocaml_shadow.ml", 213, 29496, 29651), 0), 0)), (("src/shadow/ocaml_shadow.ml", 213, 29496, 29559), ("src/shadow/ocaml_shadow.ml", 213, 29496, 29652), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 213, 29496, 29559), ("src/shadow/ocaml_shadow.ml", 213, 29496, 29652), 0))]), (("src/shadow/ocaml_shadow.ml", 213, 29496, 29545), ("src/shadow/ocaml_shadow.ml", 213, 29496, 29653), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 212)), 0, 0); Tag3 (("Simplif", 7666), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 214, 29654, 29694), ("src/shadow/ocaml_shadow.ml", 214, 29654, 29704), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Simplif instead", (("src/shadow/ocaml_shadow.ml", 214, 29654, 29706), ("src/shadow/ocaml_shadow.ml", 214, 29654, 29784), 0), 0)), (("src/shadow/ocaml_shadow.ml", 214, 29654, 29705), ("src/shadow/ocaml_shadow.ml", 214, 29654, 29785), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 214, 29654, 29705), ("src/shadow/ocaml_shadow.ml", 214, 29654, 29785), 0))]), (("src/shadow/ocaml_shadow.ml", 214, 29654, 29691), ("src/shadow/ocaml_shadow.ml", 214, 29654, 29786), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 213)), 0, 0); Tag3 (("Simplify_boxed_integer_ops", 7667), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 215, 29787, 29846), ("src/shadow/ocaml_shadow.ml", 215, 29787, 29856), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Simplify_boxed_integer_ops instead", (("src/shadow/ocaml_shadow.ml", 215, 29787, 29858), ("src/shadow/ocaml_shadow.ml", 215, 29787, 29956), 0), 0)), (("src/shadow/ocaml_shadow.ml", 215, 29787, 29857), ("src/shadow/ocaml_shadow.ml", 215, 29787, 29957), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 215, 29787, 29857), ("src/shadow/ocaml_shadow.ml", 215, 29787, 29957), 0))]), (("src/shadow/ocaml_shadow.ml", 215, 29787, 29843), ("src/shadow/ocaml_shadow.ml", 215, 29787, 29958), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 214)), 0, 0); Tag3 (("Simplify_boxed_integer_ops_intf", 7668), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 216, 29959, 30023), ("src/shadow/ocaml_shadow.ml", 216, 29959, 30033), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated", (("src/shadow/ocaml_shadow.ml", 216, 29959, 30035), ("src/shadow/ocaml_shadow.ml", 216, 29959, 30079), 0), 0)), (("src/shadow/ocaml_shadow.ml", 216, 29959, 30034), ("src/shadow/ocaml_shadow.ml", 216, 29959, 30080), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 216, 29959, 30034), ("src/shadow/ocaml_shadow.ml", 216, 29959, 30080), 0))]), (("src/shadow/ocaml_shadow.ml", 216, 29959, 30020), ("src/shadow/ocaml_shadow.ml", 216, 29959, 30081), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 215)), 0, 0); Tag3 (("Simplify_common", 7669), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 217, 30082, 30130), ("src/shadow/ocaml_shadow.ml", 217, 30082, 30140), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Simplify_common instead", (("src/shadow/ocaml_shadow.ml", 217, 30082, 30142), ("src/shadow/ocaml_shadow.ml", 217, 30082, 30229), 0), 0)), (("src/shadow/ocaml_shadow.ml", 217, 30082, 30141), ("src/shadow/ocaml_shadow.ml", 217, 30082, 30230), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 217, 30082, 30141), ("src/shadow/ocaml_shadow.ml", 217, 30082, 30230), 0))]), (("src/shadow/ocaml_shadow.ml", 217, 30082, 30127), ("src/shadow/ocaml_shadow.ml", 217, 30082, 30231), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 216)), 0, 0); Tag3 (("Simplify_primitives", 7670), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 218, 30232, 30284), ("src/shadow/ocaml_shadow.ml", 218, 30232, 30294), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Simplify_primitives instead", (("src/shadow/ocaml_shadow.ml", 218, 30232, 30296), ("src/shadow/ocaml_shadow.ml", 218, 30232, 30387), 0), 0)), (("src/shadow/ocaml_shadow.ml", 218, 30232, 30295), ("src/shadow/ocaml_shadow.ml", 218, 30232, 30388), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 218, 30232, 30295), ("src/shadow/ocaml_shadow.ml", 218, 30232, 30388), 0))]), (("src/shadow/ocaml_shadow.ml", 218, 30232, 30281), ("src/shadow/ocaml_shadow.ml", 218, 30232, 30389), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 217)), 0, 0); Tag3 (("Spill", 7671), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 219, 30390, 30428), ("src/shadow/ocaml_shadow.ml", 219, 30390, 30438), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Spill instead", (("src/shadow/ocaml_shadow.ml", 219, 30390, 30440), ("src/shadow/ocaml_shadow.ml", 219, 30390, 30517), 0), 0)), (("src/shadow/ocaml_shadow.ml", 219, 30390, 30439), ("src/shadow/ocaml_shadow.ml", 219, 30390, 30518), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 219, 30390, 30439), ("src/shadow/ocaml_shadow.ml", 219, 30390, 30518), 0))]), (("src/shadow/ocaml_shadow.ml", 219, 30390, 30425), ("src/shadow/ocaml_shadow.ml", 219, 30390, 30519), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 218)), 0, 0); Tag3 (("Split", 7672), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 220, 30520, 30558), ("src/shadow/ocaml_shadow.ml", 220, 30520, 30568), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Split instead", (("src/shadow/ocaml_shadow.ml", 220, 30520, 30570), ("src/shadow/ocaml_shadow.ml", 220, 30520, 30647), 0), 0)), (("src/shadow/ocaml_shadow.ml", 220, 30520, 30569), ("src/shadow/ocaml_shadow.ml", 220, 30520, 30648), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 220, 30520, 30569), ("src/shadow/ocaml_shadow.ml", 220, 30520, 30648), 0))]), (("src/shadow/ocaml_shadow.ml", 220, 30520, 30555), ("src/shadow/ocaml_shadow.ml", 220, 30520, 30649), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 219)), 0, 0); Tag3 (("Static_exception", 7673), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 221, 30650, 30699), ("src/shadow/ocaml_shadow.ml", 221, 30650, 30709), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Static_exception instead", (("src/shadow/ocaml_shadow.ml", 221, 30650, 30711), ("src/shadow/ocaml_shadow.ml", 221, 30650, 30799), 0), 0)), (("src/shadow/ocaml_shadow.ml", 221, 30650, 30710), ("src/shadow/ocaml_shadow.ml", 221, 30650, 30800), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 221, 30650, 30710), ("src/shadow/ocaml_shadow.ml", 221, 30650, 30800), 0))]), (("src/shadow/ocaml_shadow.ml", 221, 30650, 30696), ("src/shadow/ocaml_shadow.ml", 221, 30650, 30801), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 220)), 0, 0); Tag3 (("Strmatch", 7674), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 222, 30802, 30843), ("src/shadow/ocaml_shadow.ml", 222, 30802, 30853), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Strmatch instead", (("src/shadow/ocaml_shadow.ml", 222, 30802, 30855), ("src/shadow/ocaml_shadow.ml", 222, 30802, 30935), 0), 0)), (("src/shadow/ocaml_shadow.ml", 222, 30802, 30854), ("src/shadow/ocaml_shadow.ml", 222, 30802, 30936), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 222, 30802, 30854), ("src/shadow/ocaml_shadow.ml", 222, 30802, 30936), 0))]), (("src/shadow/ocaml_shadow.ml", 222, 30802, 30840), ("src/shadow/ocaml_shadow.ml", 222, 30802, 30937), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 221)), 0, 0); Tag3 (("Strongly_connected_components", 7675), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 223, 30938, 31000), ("src/shadow/ocaml_shadow.ml", 223, 30938, 31010), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Strongly_connected_components instead", (("src/shadow/ocaml_shadow.ml", 223, 30938, 31012), ("src/shadow/ocaml_shadow.ml", 223, 30938, 31112), 0), 0)), (("src/shadow/ocaml_shadow.ml", 223, 30938, 31011), ("src/shadow/ocaml_shadow.ml", 223, 30938, 31113), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 223, 30938, 31011), ("src/shadow/ocaml_shadow.ml", 223, 30938, 31113), 0))]), (("src/shadow/ocaml_shadow.ml", 223, 30938, 30997), ("src/shadow/ocaml_shadow.ml", 223, 30938, 31114), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 222)), 0, 0); Tag3 (("Stypes", 7676), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 224, 31115, 31154), ("src/shadow/ocaml_shadow.ml", 224, 31115, 31164), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Stypes instead", (("src/shadow/ocaml_shadow.ml", 224, 31115, 31166), ("src/shadow/ocaml_shadow.ml", 224, 31115, 31243), 0), 0)), (("src/shadow/ocaml_shadow.ml", 224, 31115, 31165), ("src/shadow/ocaml_shadow.ml", 224, 31115, 31244), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 224, 31115, 31165), ("src/shadow/ocaml_shadow.ml", 224, 31115, 31244), 0))]), (("src/shadow/ocaml_shadow.ml", 224, 31115, 31151), ("src/shadow/ocaml_shadow.ml", 224, 31115, 31245), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 223)), 0, 0); Tag3 (("Subst", 7677), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 225, 31246, 31284), ("src/shadow/ocaml_shadow.ml", 225, 31246, 31294), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Subst instead", (("src/shadow/ocaml_shadow.ml", 225, 31246, 31296), ("src/shadow/ocaml_shadow.ml", 225, 31246, 31372), 0), 0)), (("src/shadow/ocaml_shadow.ml", 225, 31246, 31295), ("src/shadow/ocaml_shadow.ml", 225, 31246, 31373), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 225, 31246, 31295), ("src/shadow/ocaml_shadow.ml", 225, 31246, 31373), 0))]), (("src/shadow/ocaml_shadow.ml", 225, 31246, 31281), ("src/shadow/ocaml_shadow.ml", 225, 31246, 31374), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 224)), 0, 0); Tag3 (("Switch", 7678), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 226, 31375, 31414), ("src/shadow/ocaml_shadow.ml", 226, 31375, 31424), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Switch instead", (("src/shadow/ocaml_shadow.ml", 226, 31375, 31426), ("src/shadow/ocaml_shadow.ml", 226, 31375, 31503), 0), 0)), (("src/shadow/ocaml_shadow.ml", 226, 31375, 31425), ("src/shadow/ocaml_shadow.ml", 226, 31375, 31504), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 226, 31375, 31425), ("src/shadow/ocaml_shadow.ml", 226, 31375, 31504), 0))]), (("src/shadow/ocaml_shadow.ml", 226, 31375, 31411), ("src/shadow/ocaml_shadow.ml", 226, 31375, 31505), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 225)), 0, 0); Tag3 (("Symbol", 7679), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 227, 31506, 31545), ("src/shadow/ocaml_shadow.ml", 227, 31506, 31555), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Symbol instead", (("src/shadow/ocaml_shadow.ml", 227, 31506, 31557), ("src/shadow/ocaml_shadow.ml", 227, 31506, 31635), 0), 0)), (("src/shadow/ocaml_shadow.ml", 227, 31506, 31556), ("src/shadow/ocaml_shadow.ml", 227, 31506, 31636), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 227, 31506, 31556), ("src/shadow/ocaml_shadow.ml", 227, 31506, 31636), 0))]), (("src/shadow/ocaml_shadow.ml", 227, 31506, 31542), ("src/shadow/ocaml_shadow.ml", 227, 31506, 31637), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 226)), 0, 0); Tag3 (("Symtable", 7680), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 228, 31638, 31679), ("src/shadow/ocaml_shadow.ml", 228, 31638, 31689), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Symtable instead", (("src/shadow/ocaml_shadow.ml", 228, 31638, 31691), ("src/shadow/ocaml_shadow.ml", 228, 31638, 31770), 0), 0)), (("src/shadow/ocaml_shadow.ml", 228, 31638, 31690), ("src/shadow/ocaml_shadow.ml", 228, 31638, 31771), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 228, 31638, 31690), ("src/shadow/ocaml_shadow.ml", 228, 31638, 31771), 0))]), (("src/shadow/ocaml_shadow.ml", 228, 31638, 31676), ("src/shadow/ocaml_shadow.ml", 228, 31638, 31772), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 227)), 0, 0); Tag3 (("Tag", 7681), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 230, 31910, 31946), ("src/shadow/ocaml_shadow.ml", 230, 31910, 31956), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Tag instead", (("src/shadow/ocaml_shadow.ml", 230, 31910, 31958), ("src/shadow/ocaml_shadow.ml", 230, 31910, 32033), 0), 0)), (("src/shadow/ocaml_shadow.ml", 230, 31910, 31957), ("src/shadow/ocaml_shadow.ml", 230, 31910, 32034), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 230, 31910, 31957), ("src/shadow/ocaml_shadow.ml", 230, 31910, 32034), 0))]), (("src/shadow/ocaml_shadow.ml", 230, 31910, 31943), ("src/shadow/ocaml_shadow.ml", 230, 31910, 32035), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 229)), 0, 0); Tag3 (("Targetint", 7682), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 231, 32036, 32078), ("src/shadow/ocaml_shadow.ml", 231, 32036, 32088), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Targetint instead", (("src/shadow/ocaml_shadow.ml", 231, 32036, 32090), ("src/shadow/ocaml_shadow.ml", 231, 32036, 32170), 0), 0)), (("src/shadow/ocaml_shadow.ml", 231, 32036, 32089), ("src/shadow/ocaml_shadow.ml", 231, 32036, 32171), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 231, 32036, 32089), ("src/shadow/ocaml_shadow.ml", 231, 32036, 32171), 0))]), (("src/shadow/ocaml_shadow.ml", 231, 32036, 32075), ("src/shadow/ocaml_shadow.ml", 231, 32036, 32172), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 230)), 0, 0); Tag3 (("Tast_iterator", 7683), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 232, 32173, 32219), ("src/shadow/ocaml_shadow.ml", 232, 32173, 32229), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Tast_iterator instead", (("src/shadow/ocaml_shadow.ml", 232, 32173, 32231), ("src/shadow/ocaml_shadow.ml", 232, 32173, 32315), 0), 0)), (("src/shadow/ocaml_shadow.ml", 232, 32173, 32230), ("src/shadow/ocaml_shadow.ml", 232, 32173, 32316), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 232, 32173, 32230), ("src/shadow/ocaml_shadow.ml", 232, 32173, 32316), 0))]), (("src/shadow/ocaml_shadow.ml", 232, 32173, 32216), ("src/shadow/ocaml_shadow.ml", 232, 32173, 32317), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 231)), 0, 0); Tag3 (("Tast_mapper", 7684), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 233, 32318, 32362), ("src/shadow/ocaml_shadow.ml", 233, 32318, 32372), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Tast_mapper instead", (("src/shadow/ocaml_shadow.ml", 233, 32318, 32374), ("src/shadow/ocaml_shadow.ml", 233, 32318, 32456), 0), 0)), (("src/shadow/ocaml_shadow.ml", 233, 32318, 32373), ("src/shadow/ocaml_shadow.ml", 233, 32318, 32457), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 233, 32318, 32373), ("src/shadow/ocaml_shadow.ml", 233, 32318, 32457), 0))]), (("src/shadow/ocaml_shadow.ml", 233, 32318, 32359), ("src/shadow/ocaml_shadow.ml", 233, 32318, 32458), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 232)), 0, 0); Tag3 (("Terminfo", 7685), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 234, 32459, 32500), ("src/shadow/ocaml_shadow.ml", 234, 32459, 32510), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Terminfo instead", (("src/shadow/ocaml_shadow.ml", 234, 32459, 32512), ("src/shadow/ocaml_shadow.ml", 234, 32459, 32591), 0), 0)), (("src/shadow/ocaml_shadow.ml", 234, 32459, 32511), ("src/shadow/ocaml_shadow.ml", 234, 32459, 32592), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 234, 32459, 32511), ("src/shadow/ocaml_shadow.ml", 234, 32459, 32592), 0))]), (("src/shadow/ocaml_shadow.ml", 234, 32459, 32497), ("src/shadow/ocaml_shadow.ml", 234, 32459, 32593), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 233)), 0, 0); Tag3 (("Tmc", 7686), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 235, 32594, 32630), ("src/shadow/ocaml_shadow.ml", 235, 32594, 32640), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Tmc instead", (("src/shadow/ocaml_shadow.ml", 235, 32594, 32642), ("src/shadow/ocaml_shadow.ml", 235, 32594, 32716), 0), 0)), (("src/shadow/ocaml_shadow.ml", 235, 32594, 32641), ("src/shadow/ocaml_shadow.ml", 235, 32594, 32717), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 235, 32594, 32641), ("src/shadow/ocaml_shadow.ml", 235, 32594, 32717), 0))]), (("src/shadow/ocaml_shadow.ml", 235, 32594, 32627), ("src/shadow/ocaml_shadow.ml", 235, 32594, 32718), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 234)), 0, 0); Tag3 (("Topcommon", 7687), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 236, 32719, 32761), ("src/shadow/ocaml_shadow.ml", 236, 32719, 32771), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_toplevel.Topcommon instead", (("src/shadow/ocaml_shadow.ml", 236, 32719, 32773), ("src/shadow/ocaml_shadow.ml", 236, 32719, 32855), 0), 0)), (("src/shadow/ocaml_shadow.ml", 236, 32719, 32772), ("src/shadow/ocaml_shadow.ml", 236, 32719, 32856), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 236, 32719, 32772), ("src/shadow/ocaml_shadow.ml", 236, 32719, 32856), 0))]), (("src/shadow/ocaml_shadow.ml", 236, 32719, 32758), ("src/shadow/ocaml_shadow.ml", 236, 32719, 32857), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 235)), 0, 0); Tag3 (("Topdirs", 7688), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 237, 32858, 32898), ("src/shadow/ocaml_shadow.ml", 237, 32858, 32908), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_toplevel.Topdirs instead", (("src/shadow/ocaml_shadow.ml", 237, 32858, 32910), ("src/shadow/ocaml_shadow.ml", 237, 32858, 32990), 0), 0)), (("src/shadow/ocaml_shadow.ml", 237, 32858, 32909), ("src/shadow/ocaml_shadow.ml", 237, 32858, 32991), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 237, 32858, 32909), ("src/shadow/ocaml_shadow.ml", 237, 32858, 32991), 0))]), (("src/shadow/ocaml_shadow.ml", 237, 32858, 32895), ("src/shadow/ocaml_shadow.ml", 237, 32858, 32992), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 236)), 0, 0); Tag3 (("Topeval", 7689), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 238, 32993, 33033), ("src/shadow/ocaml_shadow.ml", 238, 32993, 33043), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_toplevel.Topeval instead", (("src/shadow/ocaml_shadow.ml", 238, 32993, 33045), ("src/shadow/ocaml_shadow.ml", 238, 32993, 33125), 0), 0)), (("src/shadow/ocaml_shadow.ml", 238, 32993, 33044), ("src/shadow/ocaml_shadow.ml", 238, 32993, 33126), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 238, 32993, 33044), ("src/shadow/ocaml_shadow.ml", 238, 32993, 33126), 0))]), (("src/shadow/ocaml_shadow.ml", 238, 32993, 33030), ("src/shadow/ocaml_shadow.ml", 238, 32993, 33127), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 237)), 0, 0); Tag3 (("Tophooks", 7690), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 239, 33128, 33169), ("src/shadow/ocaml_shadow.ml", 239, 33128, 33179), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated", (("src/shadow/ocaml_shadow.ml", 239, 33128, 33181), ("src/shadow/ocaml_shadow.ml", 239, 33128, 33225), 0), 0)), (("src/shadow/ocaml_shadow.ml", 239, 33128, 33180), ("src/shadow/ocaml_shadow.ml", 239, 33128, 33226), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 239, 33128, 33180), ("src/shadow/ocaml_shadow.ml", 239, 33128, 33226), 0))]), (("src/shadow/ocaml_shadow.ml", 239, 33128, 33166), ("src/shadow/ocaml_shadow.ml", 239, 33128, 33227), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 238)), 0, 0); Tag3 (("Toploop", 7691), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 240, 33228, 33268), ("src/shadow/ocaml_shadow.ml", 240, 33228, 33278), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_toplevel.Toploop instead", (("src/shadow/ocaml_shadow.ml", 240, 33228, 33280), ("src/shadow/ocaml_shadow.ml", 240, 33228, 33360), 0), 0)), (("src/shadow/ocaml_shadow.ml", 240, 33228, 33279), ("src/shadow/ocaml_shadow.ml", 240, 33228, 33361), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 240, 33228, 33279), ("src/shadow/ocaml_shadow.ml", 240, 33228, 33361), 0))]), (("src/shadow/ocaml_shadow.ml", 240, 33228, 33265), ("src/shadow/ocaml_shadow.ml", 240, 33228, 33362), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 239)), 0, 0); Tag3 (("Topmain", 7692), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 241, 33363, 33403), ("src/shadow/ocaml_shadow.ml", 241, 33363, 33413), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_toplevel.Topmain instead", (("src/shadow/ocaml_shadow.ml", 241, 33363, 33415), ("src/shadow/ocaml_shadow.ml", 241, 33363, 33495), 0), 0)), (("src/shadow/ocaml_shadow.ml", 241, 33363, 33414), ("src/shadow/ocaml_shadow.ml", 241, 33363, 33496), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 241, 33363, 33414), ("src/shadow/ocaml_shadow.ml", 241, 33363, 33496), 0))]), (("src/shadow/ocaml_shadow.ml", 241, 33363, 33400), ("src/shadow/ocaml_shadow.ml", 241, 33363, 33497), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 240)), 0, 0); Tag3 (("Topprinters", 7693), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 242, 33498, 33542), ("src/shadow/ocaml_shadow.ml", 242, 33498, 33552), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_toplevel.Topprinters instead", (("src/shadow/ocaml_shadow.ml", 242, 33498, 33554), ("src/shadow/ocaml_shadow.ml", 242, 33498, 33638), 0), 0)), (("src/shadow/ocaml_shadow.ml", 242, 33498, 33553), ("src/shadow/ocaml_shadow.ml", 242, 33498, 33639), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 242, 33498, 33553), ("src/shadow/ocaml_shadow.ml", 242, 33498, 33639), 0))]), (("src/shadow/ocaml_shadow.ml", 242, 33498, 33539), ("src/shadow/ocaml_shadow.ml", 242, 33498, 33640), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 241)), 0, 0); Tag3 (("Topstart", 7694), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 243, 33641, 33682), ("src/shadow/ocaml_shadow.ml", 243, 33641, 33692), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated", (("src/shadow/ocaml_shadow.ml", 243, 33641, 33694), ("src/shadow/ocaml_shadow.ml", 243, 33641, 33738), 0), 0)), (("src/shadow/ocaml_shadow.ml", 243, 33641, 33693), ("src/shadow/ocaml_shadow.ml", 243, 33641, 33739), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 243, 33641, 33693), ("src/shadow/ocaml_shadow.ml", 243, 33641, 33739), 0))]), (("src/shadow/ocaml_shadow.ml", 243, 33641, 33679), ("src/shadow/ocaml_shadow.ml", 243, 33641, 33740), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 242)), 0, 0); Tag3 (("Trace", 7695), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 244, 33741, 33779), ("src/shadow/ocaml_shadow.ml", 244, 33741, 33789), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_toplevel.Trace instead", (("src/shadow/ocaml_shadow.ml", 244, 33741, 33791), ("src/shadow/ocaml_shadow.ml", 244, 33741, 33869), 0), 0)), (("src/shadow/ocaml_shadow.ml", 244, 33741, 33790), ("src/shadow/ocaml_shadow.ml", 244, 33741, 33870), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 244, 33741, 33790), ("src/shadow/ocaml_shadow.ml", 244, 33741, 33870), 0))]), (("src/shadow/ocaml_shadow.ml", 244, 33741, 33776), ("src/shadow/ocaml_shadow.ml", 244, 33741, 33871), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 243)), 0, 0); Tag3 (("Translattribute", 7696), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 245, 33872, 33920), ("src/shadow/ocaml_shadow.ml", 245, 33872, 33930), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Translattribute instead", (("src/shadow/ocaml_shadow.ml", 245, 33872, 33932), ("src/shadow/ocaml_shadow.ml", 245, 33872, 34018), 0), 0)), (("src/shadow/ocaml_shadow.ml", 245, 33872, 33931), ("src/shadow/ocaml_shadow.ml", 245, 33872, 34019), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 245, 33872, 33931), ("src/shadow/ocaml_shadow.ml", 245, 33872, 34019), 0))]), (("src/shadow/ocaml_shadow.ml", 245, 33872, 33917), ("src/shadow/ocaml_shadow.ml", 245, 33872, 34020), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 244)), 0, 0); Tag3 (("Translclass", 7697), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 246, 34021, 34065), ("src/shadow/ocaml_shadow.ml", 246, 34021, 34075), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Translclass instead", (("src/shadow/ocaml_shadow.ml", 246, 34021, 34077), ("src/shadow/ocaml_shadow.ml", 246, 34021, 34159), 0), 0)), (("src/shadow/ocaml_shadow.ml", 246, 34021, 34076), ("src/shadow/ocaml_shadow.ml", 246, 34021, 34160), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 246, 34021, 34076), ("src/shadow/ocaml_shadow.ml", 246, 34021, 34160), 0))]), (("src/shadow/ocaml_shadow.ml", 246, 34021, 34062), ("src/shadow/ocaml_shadow.ml", 246, 34021, 34161), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 245)), 0, 0); Tag3 (("Translcore", 7698), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 247, 34162, 34205), ("src/shadow/ocaml_shadow.ml", 247, 34162, 34215), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Translcore instead", (("src/shadow/ocaml_shadow.ml", 247, 34162, 34217), ("src/shadow/ocaml_shadow.ml", 247, 34162, 34298), 0), 0)), (("src/shadow/ocaml_shadow.ml", 247, 34162, 34216), ("src/shadow/ocaml_shadow.ml", 247, 34162, 34299), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 247, 34162, 34216), ("src/shadow/ocaml_shadow.ml", 247, 34162, 34299), 0))]), (("src/shadow/ocaml_shadow.ml", 247, 34162, 34202), ("src/shadow/ocaml_shadow.ml", 247, 34162, 34300), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 246)), 0, 0); Tag3 (("Translmod", 7699), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 248, 34301, 34343), ("src/shadow/ocaml_shadow.ml", 248, 34301, 34353), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Translmod instead", (("src/shadow/ocaml_shadow.ml", 248, 34301, 34355), ("src/shadow/ocaml_shadow.ml", 248, 34301, 34435), 0), 0)), (("src/shadow/ocaml_shadow.ml", 248, 34301, 34354), ("src/shadow/ocaml_shadow.ml", 248, 34301, 34436), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 248, 34301, 34354), ("src/shadow/ocaml_shadow.ml", 248, 34301, 34436), 0))]), (("src/shadow/ocaml_shadow.ml", 248, 34301, 34340), ("src/shadow/ocaml_shadow.ml", 248, 34301, 34437), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 247)), 0, 0); Tag3 (("Translobj", 7700), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 249, 34438, 34480), ("src/shadow/ocaml_shadow.ml", 249, 34438, 34490), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Translobj instead", (("src/shadow/ocaml_shadow.ml", 249, 34438, 34492), ("src/shadow/ocaml_shadow.ml", 249, 34438, 34572), 0), 0)), (("src/shadow/ocaml_shadow.ml", 249, 34438, 34491), ("src/shadow/ocaml_shadow.ml", 249, 34438, 34573), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 249, 34438, 34491), ("src/shadow/ocaml_shadow.ml", 249, 34438, 34573), 0))]), (("src/shadow/ocaml_shadow.ml", 249, 34438, 34477), ("src/shadow/ocaml_shadow.ml", 249, 34438, 34574), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 248)), 0, 0); Tag3 (("Translprim", 7701), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 250, 34575, 34618), ("src/shadow/ocaml_shadow.ml", 250, 34575, 34628), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Translprim instead", (("src/shadow/ocaml_shadow.ml", 250, 34575, 34630), ("src/shadow/ocaml_shadow.ml", 250, 34575, 34711), 0), 0)), (("src/shadow/ocaml_shadow.ml", 250, 34575, 34629), ("src/shadow/ocaml_shadow.ml", 250, 34575, 34712), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 250, 34575, 34629), ("src/shadow/ocaml_shadow.ml", 250, 34575, 34712), 0))]), (("src/shadow/ocaml_shadow.ml", 250, 34575, 34615), ("src/shadow/ocaml_shadow.ml", 250, 34575, 34713), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 249)), 0, 0); Tag3 (("Traverse_for_exported_symbols", 7702), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 251, 34714, 34776), ("src/shadow/ocaml_shadow.ml", 251, 34714, 34786), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Traverse_for_exported_symbols instead", (("src/shadow/ocaml_shadow.ml", 251, 34714, 34788), ("src/shadow/ocaml_shadow.ml", 251, 34714, 34889), 0), 0)), (("src/shadow/ocaml_shadow.ml", 251, 34714, 34787), ("src/shadow/ocaml_shadow.ml", 251, 34714, 34890), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 251, 34714, 34787), ("src/shadow/ocaml_shadow.ml", 251, 34714, 34890), 0))]), (("src/shadow/ocaml_shadow.ml", 251, 34714, 34773), ("src/shadow/ocaml_shadow.ml", 251, 34714, 34891), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 250)), 0, 0); Tag3 (("Type_immediacy", 7703), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 252, 34892, 34939), ("src/shadow/ocaml_shadow.ml", 252, 34892, 34949), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Type_immediacy instead", (("src/shadow/ocaml_shadow.ml", 252, 34892, 34951), ("src/shadow/ocaml_shadow.ml", 252, 34892, 35036), 0), 0)), (("src/shadow/ocaml_shadow.ml", 252, 34892, 34950), ("src/shadow/ocaml_shadow.ml", 252, 34892, 35037), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 252, 34892, 34950), ("src/shadow/ocaml_shadow.ml", 252, 34892, 35037), 0))]), (("src/shadow/ocaml_shadow.ml", 252, 34892, 34936), ("src/shadow/ocaml_shadow.ml", 252, 34892, 35038), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 251)), 0, 0); Tag3 (("Typeclass", 7704), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 253, 35039, 35081), ("src/shadow/ocaml_shadow.ml", 253, 35039, 35091), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Typeclass instead", (("src/shadow/ocaml_shadow.ml", 253, 35039, 35093), ("src/shadow/ocaml_shadow.ml", 253, 35039, 35173), 0), 0)), (("src/shadow/ocaml_shadow.ml", 253, 35039, 35092), ("src/shadow/ocaml_shadow.ml", 253, 35039, 35174), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 253, 35039, 35092), ("src/shadow/ocaml_shadow.ml", 253, 35039, 35174), 0))]), (("src/shadow/ocaml_shadow.ml", 253, 35039, 35078), ("src/shadow/ocaml_shadow.ml", 253, 35039, 35175), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 252)), 0, 0); Tag3 (("Typecore", 7705), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 254, 35176, 35217), ("src/shadow/ocaml_shadow.ml", 254, 35176, 35227), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Typecore instead", (("src/shadow/ocaml_shadow.ml", 254, 35176, 35229), ("src/shadow/ocaml_shadow.ml", 254, 35176, 35308), 0), 0)), (("src/shadow/ocaml_shadow.ml", 254, 35176, 35228), ("src/shadow/ocaml_shadow.ml", 254, 35176, 35309), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 254, 35176, 35228), ("src/shadow/ocaml_shadow.ml", 254, 35176, 35309), 0))]), (("src/shadow/ocaml_shadow.ml", 254, 35176, 35214), ("src/shadow/ocaml_shadow.ml", 254, 35176, 35310), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 253)), 0, 0); Tag3 (("Typedecl", 7706), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 255, 35311, 35352), ("src/shadow/ocaml_shadow.ml", 255, 35311, 35362), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Typedecl instead", (("src/shadow/ocaml_shadow.ml", 255, 35311, 35364), ("src/shadow/ocaml_shadow.ml", 255, 35311, 35443), 0), 0)), (("src/shadow/ocaml_shadow.ml", 255, 35311, 35363), ("src/shadow/ocaml_shadow.ml", 255, 35311, 35444), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 255, 35311, 35363), ("src/shadow/ocaml_shadow.ml", 255, 35311, 35444), 0))]), (("src/shadow/ocaml_shadow.ml", 255, 35311, 35349), ("src/shadow/ocaml_shadow.ml", 255, 35311, 35445), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 254)), 0, 0); Tag3 (("Typedecl_immediacy", 7707), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 256, 35446, 35497), ("src/shadow/ocaml_shadow.ml", 256, 35446, 35507), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Typedecl_immediacy instead", (("src/shadow/ocaml_shadow.ml", 256, 35446, 35509), ("src/shadow/ocaml_shadow.ml", 256, 35446, 35598), 0), 0)), (("src/shadow/ocaml_shadow.ml", 256, 35446, 35508), ("src/shadow/ocaml_shadow.ml", 256, 35446, 35599), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 256, 35446, 35508), ("src/shadow/ocaml_shadow.ml", 256, 35446, 35599), 0))]), (("src/shadow/ocaml_shadow.ml", 256, 35446, 35494), ("src/shadow/ocaml_shadow.ml", 256, 35446, 35600), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 255)), 0, 0); Tag3 (("Typedecl_properties", 7708), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 257, 35601, 35653), ("src/shadow/ocaml_shadow.ml", 257, 35601, 35663), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Typedecl_properties instead", (("src/shadow/ocaml_shadow.ml", 257, 35601, 35665), ("src/shadow/ocaml_shadow.ml", 257, 35601, 35755), 0), 0)), (("src/shadow/ocaml_shadow.ml", 257, 35601, 35664), ("src/shadow/ocaml_shadow.ml", 257, 35601, 35756), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 257, 35601, 35664), ("src/shadow/ocaml_shadow.ml", 257, 35601, 35756), 0))]), (("src/shadow/ocaml_shadow.ml", 257, 35601, 35650), ("src/shadow/ocaml_shadow.ml", 257, 35601, 35757), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 256)), 0, 0); Tag3 (("Typedecl_separability", 7709), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 258, 35758, 35812), ("src/shadow/ocaml_shadow.ml", 258, 35758, 35822), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Typedecl_separability instead", (("src/shadow/ocaml_shadow.ml", 258, 35758, 35824), ("src/shadow/ocaml_shadow.ml", 258, 35758, 35916), 0), 0)), (("src/shadow/ocaml_shadow.ml", 258, 35758, 35823), ("src/shadow/ocaml_shadow.ml", 258, 35758, 35917), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 258, 35758, 35823), ("src/shadow/ocaml_shadow.ml", 258, 35758, 35917), 0))]), (("src/shadow/ocaml_shadow.ml", 258, 35758, 35809), ("src/shadow/ocaml_shadow.ml", 258, 35758, 35918), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 257)), 0, 0); Tag3 (("Typedecl_unboxed", 7710), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 259, 35919, 35968), ("src/shadow/ocaml_shadow.ml", 259, 35919, 35978), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Typedecl_unboxed instead", (("src/shadow/ocaml_shadow.ml", 259, 35919, 35980), ("src/shadow/ocaml_shadow.ml", 259, 35919, 36067), 0), 0)), (("src/shadow/ocaml_shadow.ml", 259, 35919, 35979), ("src/shadow/ocaml_shadow.ml", 259, 35919, 36068), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 259, 35919, 35979), ("src/shadow/ocaml_shadow.ml", 259, 35919, 36068), 0))]), (("src/shadow/ocaml_shadow.ml", 259, 35919, 35965), ("src/shadow/ocaml_shadow.ml", 259, 35919, 36069), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 258)), 0, 0); Tag3 (("Typedecl_variance", 7711), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 260, 36070, 36120), ("src/shadow/ocaml_shadow.ml", 260, 36070, 36130), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Typedecl_variance instead", (("src/shadow/ocaml_shadow.ml", 260, 36070, 36132), ("src/shadow/ocaml_shadow.ml", 260, 36070, 36220), 0), 0)), (("src/shadow/ocaml_shadow.ml", 260, 36070, 36131), ("src/shadow/ocaml_shadow.ml", 260, 36070, 36221), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 260, 36070, 36131), ("src/shadow/ocaml_shadow.ml", 260, 36070, 36221), 0))]), (("src/shadow/ocaml_shadow.ml", 260, 36070, 36117), ("src/shadow/ocaml_shadow.ml", 260, 36070, 36222), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 259)), 0, 0); Tag3 (("Typedtree", 7712), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 261, 36223, 36265), ("src/shadow/ocaml_shadow.ml", 261, 36223, 36275), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Typedtree instead", (("src/shadow/ocaml_shadow.ml", 261, 36223, 36277), ("src/shadow/ocaml_shadow.ml", 261, 36223, 36357), 0), 0)), (("src/shadow/ocaml_shadow.ml", 261, 36223, 36276), ("src/shadow/ocaml_shadow.ml", 261, 36223, 36358), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 261, 36223, 36276), ("src/shadow/ocaml_shadow.ml", 261, 36223, 36358), 0))]), (("src/shadow/ocaml_shadow.ml", 261, 36223, 36262), ("src/shadow/ocaml_shadow.ml", 261, 36223, 36359), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 260)), 0, 0); Tag3 (("Typemod", 7713), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 262, 36360, 36400), ("src/shadow/ocaml_shadow.ml", 262, 36360, 36410), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Typemod instead", (("src/shadow/ocaml_shadow.ml", 262, 36360, 36412), ("src/shadow/ocaml_shadow.ml", 262, 36360, 36490), 0), 0)), (("src/shadow/ocaml_shadow.ml", 262, 36360, 36411), ("src/shadow/ocaml_shadow.ml", 262, 36360, 36491), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 262, 36360, 36411), ("src/shadow/ocaml_shadow.ml", 262, 36360, 36491), 0))]), (("src/shadow/ocaml_shadow.ml", 262, 36360, 36397), ("src/shadow/ocaml_shadow.ml", 262, 36360, 36492), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 261)), 0, 0); Tag3 (("Typeopt", 7714), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 263, 36493, 36533), ("src/shadow/ocaml_shadow.ml", 263, 36493, 36543), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Typeopt instead", (("src/shadow/ocaml_shadow.ml", 263, 36493, 36545), ("src/shadow/ocaml_shadow.ml", 263, 36493, 36623), 0), 0)), (("src/shadow/ocaml_shadow.ml", 263, 36493, 36544), ("src/shadow/ocaml_shadow.ml", 263, 36493, 36624), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 263, 36493, 36544), ("src/shadow/ocaml_shadow.ml", 263, 36493, 36624), 0))]), (("src/shadow/ocaml_shadow.ml", 263, 36493, 36530), ("src/shadow/ocaml_shadow.ml", 263, 36493, 36625), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 262)), 0, 0); Tag3 (("Types", 7715), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 264, 36626, 36664), ("src/shadow/ocaml_shadow.ml", 264, 36626, 36674), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Types instead", (("src/shadow/ocaml_shadow.ml", 264, 36626, 36676), ("src/shadow/ocaml_shadow.ml", 264, 36626, 36752), 0), 0)), (("src/shadow/ocaml_shadow.ml", 264, 36626, 36675), ("src/shadow/ocaml_shadow.ml", 264, 36626, 36753), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 264, 36626, 36675), ("src/shadow/ocaml_shadow.ml", 264, 36626, 36753), 0))]), (("src/shadow/ocaml_shadow.ml", 264, 36626, 36661), ("src/shadow/ocaml_shadow.ml", 264, 36626, 36754), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 263)), 0, 0); Tag3 (("Typetexp", 7716), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 265, 36755, 36796), ("src/shadow/ocaml_shadow.ml", 265, 36755, 36806), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Typetexp instead", (("src/shadow/ocaml_shadow.ml", 265, 36755, 36808), ("src/shadow/ocaml_shadow.ml", 265, 36755, 36887), 0), 0)), (("src/shadow/ocaml_shadow.ml", 265, 36755, 36807), ("src/shadow/ocaml_shadow.ml", 265, 36755, 36888), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 265, 36755, 36807), ("src/shadow/ocaml_shadow.ml", 265, 36755, 36888), 0))]), (("src/shadow/ocaml_shadow.ml", 265, 36755, 36793), ("src/shadow/ocaml_shadow.ml", 265, 36755, 36889), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 264)), 0, 0); Tag3 (("Un_anf", 7717), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 266, 36890, 36929), ("src/shadow/ocaml_shadow.ml", 266, 36890, 36939), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Un_anf instead", (("src/shadow/ocaml_shadow.ml", 266, 36890, 36941), ("src/shadow/ocaml_shadow.ml", 266, 36890, 37019), 0), 0)), (("src/shadow/ocaml_shadow.ml", 266, 36890, 36940), ("src/shadow/ocaml_shadow.ml", 266, 36890, 37020), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 266, 36890, 36940), ("src/shadow/ocaml_shadow.ml", 266, 36890, 37020), 0))]), (("src/shadow/ocaml_shadow.ml", 266, 36890, 36926), ("src/shadow/ocaml_shadow.ml", 266, 36890, 37021), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 265)), 0, 0); Tag3 (("Unbox_closures", 7718), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 267, 37022, 37069), ("src/shadow/ocaml_shadow.ml", 267, 37022, 37079), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Unbox_closures instead", (("src/shadow/ocaml_shadow.ml", 267, 37022, 37081), ("src/shadow/ocaml_shadow.ml", 267, 37022, 37167), 0), 0)), (("src/shadow/ocaml_shadow.ml", 267, 37022, 37080), ("src/shadow/ocaml_shadow.ml", 267, 37022, 37168), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 267, 37022, 37080), ("src/shadow/ocaml_shadow.ml", 267, 37022, 37168), 0))]), (("src/shadow/ocaml_shadow.ml", 267, 37022, 37066), ("src/shadow/ocaml_shadow.ml", 267, 37022, 37169), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 266)), 0, 0); Tag3 (("Unbox_free_vars_of_closures", 7719), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 268, 37170, 37230), ("src/shadow/ocaml_shadow.ml", 268, 37170, 37240), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Unbox_free_vars_of_closures instead", (("src/shadow/ocaml_shadow.ml", 268, 37170, 37242), ("src/shadow/ocaml_shadow.ml", 268, 37170, 37341), 0), 0)), (("src/shadow/ocaml_shadow.ml", 268, 37170, 37241), ("src/shadow/ocaml_shadow.ml", 268, 37170, 37342), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 268, 37170, 37241), ("src/shadow/ocaml_shadow.ml", 268, 37170, 37342), 0))]), (("src/shadow/ocaml_shadow.ml", 268, 37170, 37227), ("src/shadow/ocaml_shadow.ml", 268, 37170, 37343), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 267)), 0, 0); Tag3 (("Unbox_specialised_args", 7720), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 269, 37344, 37399), ("src/shadow/ocaml_shadow.ml", 269, 37344, 37409), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Unbox_specialised_args instead", (("src/shadow/ocaml_shadow.ml", 269, 37344, 37411), ("src/shadow/ocaml_shadow.ml", 269, 37344, 37505), 0), 0)), (("src/shadow/ocaml_shadow.ml", 269, 37344, 37410), ("src/shadow/ocaml_shadow.ml", 269, 37344, 37506), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 269, 37344, 37410), ("src/shadow/ocaml_shadow.ml", 269, 37344, 37506), 0))]), (("src/shadow/ocaml_shadow.ml", 269, 37344, 37396), ("src/shadow/ocaml_shadow.ml", 269, 37344, 37507), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 268)), 0, 0); Tag3 (("Untypeast", 7721), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 270, 37508, 37550), ("src/shadow/ocaml_shadow.ml", 270, 37508, 37560), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Untypeast instead", (("src/shadow/ocaml_shadow.ml", 270, 37508, 37562), ("src/shadow/ocaml_shadow.ml", 270, 37508, 37642), 0), 0)), (("src/shadow/ocaml_shadow.ml", 270, 37508, 37561), ("src/shadow/ocaml_shadow.ml", 270, 37508, 37643), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 270, 37508, 37561), ("src/shadow/ocaml_shadow.ml", 270, 37508, 37643), 0))]), (("src/shadow/ocaml_shadow.ml", 270, 37508, 37547), ("src/shadow/ocaml_shadow.ml", 270, 37508, 37644), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 269)), 0, 0); Tag3 (("Var_within_closure", 7722), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 271, 37645, 37696), ("src/shadow/ocaml_shadow.ml", 271, 37645, 37706), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Var_within_closure instead", (("src/shadow/ocaml_shadow.ml", 271, 37645, 37708), ("src/shadow/ocaml_shadow.ml", 271, 37645, 37798), 0), 0)), (("src/shadow/ocaml_shadow.ml", 271, 37645, 37707), ("src/shadow/ocaml_shadow.ml", 271, 37645, 37799), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 271, 37645, 37707), ("src/shadow/ocaml_shadow.ml", 271, 37645, 37799), 0))]), (("src/shadow/ocaml_shadow.ml", 271, 37645, 37693), ("src/shadow/ocaml_shadow.ml", 271, 37645, 37800), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 270)), 0, 0); Tag3 (("Variable", 7723), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 272, 37801, 37842), ("src/shadow/ocaml_shadow.ml", 272, 37801, 37852), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.Variable instead", (("src/shadow/ocaml_shadow.ml", 272, 37801, 37854), ("src/shadow/ocaml_shadow.ml", 272, 37801, 37934), 0), 0)), (("src/shadow/ocaml_shadow.ml", 272, 37801, 37853), ("src/shadow/ocaml_shadow.ml", 272, 37801, 37935), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 272, 37801, 37853), ("src/shadow/ocaml_shadow.ml", 272, 37801, 37935), 0))]), (("src/shadow/ocaml_shadow.ml", 272, 37801, 37839), ("src/shadow/ocaml_shadow.ml", 272, 37801, 37936), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 271)), 0, 0); Tag3 (("Warnings", 7724), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 273, 37937, 37978), ("src/shadow/ocaml_shadow.ml", 273, 37937, 37988), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_common.Warnings instead", (("src/shadow/ocaml_shadow.ml", 273, 37937, 37990), ("src/shadow/ocaml_shadow.ml", 273, 37937, 38069), 0), 0)), (("src/shadow/ocaml_shadow.ml", 273, 37937, 37989), ("src/shadow/ocaml_shadow.ml", 273, 37937, 38070), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 273, 37937, 37989), ("src/shadow/ocaml_shadow.ml", 273, 37937, 38070), 0))]), (("src/shadow/ocaml_shadow.ml", 273, 37937, 37975), ("src/shadow/ocaml_shadow.ml", 273, 37937, 38071), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 272)), 0, 0); Tag3 (("X86_ast", 7725), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 274, 38072, 38112), ("src/shadow/ocaml_shadow.ml", 274, 38072, 38122), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated", (("src/shadow/ocaml_shadow.ml", 274, 38072, 38124), ("src/shadow/ocaml_shadow.ml", 274, 38072, 38168), 0), 0)), (("src/shadow/ocaml_shadow.ml", 274, 38072, 38123), ("src/shadow/ocaml_shadow.ml", 274, 38072, 38169), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 274, 38072, 38123), ("src/shadow/ocaml_shadow.ml", 274, 38072, 38169), 0))]), (("src/shadow/ocaml_shadow.ml", 274, 38072, 38109), ("src/shadow/ocaml_shadow.ml", 274, 38072, 38170), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 273)), 0, 0); Tag3 (("X86_dsl", 7726), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 275, 38171, 38211), ("src/shadow/ocaml_shadow.ml", 275, 38171, 38221), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.X86_dsl instead", (("src/shadow/ocaml_shadow.ml", 275, 38171, 38223), ("src/shadow/ocaml_shadow.ml", 275, 38171, 38302), 0), 0)), (("src/shadow/ocaml_shadow.ml", 275, 38171, 38222), ("src/shadow/ocaml_shadow.ml", 275, 38171, 38303), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 275, 38171, 38222), ("src/shadow/ocaml_shadow.ml", 275, 38171, 38303), 0))]), (("src/shadow/ocaml_shadow.ml", 275, 38171, 38208), ("src/shadow/ocaml_shadow.ml", 275, 38171, 38304), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 274)), 0, 0); Tag3 (("X86_gas", 7727), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 276, 38305, 38345), ("src/shadow/ocaml_shadow.ml", 276, 38305, 38355), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.X86_gas instead", (("src/shadow/ocaml_shadow.ml", 276, 38305, 38357), ("src/shadow/ocaml_shadow.ml", 276, 38305, 38436), 0), 0)), (("src/shadow/ocaml_shadow.ml", 276, 38305, 38356), ("src/shadow/ocaml_shadow.ml", 276, 38305, 38437), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 276, 38305, 38356), ("src/shadow/ocaml_shadow.ml", 276, 38305, 38437), 0))]), (("src/shadow/ocaml_shadow.ml", 276, 38305, 38342), ("src/shadow/ocaml_shadow.ml", 276, 38305, 38438), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 275)), 0, 0); Tag3 (("X86_masm", 7728), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 277, 38439, 38480), ("src/shadow/ocaml_shadow.ml", 277, 38439, 38490), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.X86_masm instead", (("src/shadow/ocaml_shadow.ml", 277, 38439, 38492), ("src/shadow/ocaml_shadow.ml", 277, 38439, 38572), 0), 0)), (("src/shadow/ocaml_shadow.ml", 277, 38439, 38491), ("src/shadow/ocaml_shadow.ml", 277, 38439, 38573), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 277, 38439, 38491), ("src/shadow/ocaml_shadow.ml", 277, 38439, 38573), 0))]), (("src/shadow/ocaml_shadow.ml", 277, 38439, 38477), ("src/shadow/ocaml_shadow.ml", 277, 38439, 38574), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 276)), 0, 0); Tag3 (("X86_proc", 7729), 1, (Tag3 ((("Do_not_use_directly", 7463))), [(("deprecated", (("src/shadow/ocaml_shadow.ml", 278, 38575, 38616), ("src/shadow/ocaml_shadow.ml", 278, 38575, 38626), 0)), ([([(Tag1 (Tag2 ("Accessing this module directly is deprecated, use Ocaml_optcomp.X86_proc instead", (("src/shadow/ocaml_shadow.ml", 278, 38575, 38628), ("src/shadow/ocaml_shadow.ml", 278, 38575, 38708), 0), 0)), (("src/shadow/ocaml_shadow.ml", 278, 38575, 38627), ("src/shadow/ocaml_shadow.ml", 278, 38575, 38709), 0), 0, 0)], (("src/shadow/ocaml_shadow.ml", 278, 38575, 38627), ("src/shadow/ocaml_shadow.ml", 278, 38575, 38709), 0))]), (("src/shadow/ocaml_shadow.ml", 278, 38575, 38613), ("src/shadow/ocaml_shadow.ml", 278, 38575, 38710), 0))], (("src/ppxlib.ml", 88, 2405, 2411), ("src/ppxlib.ml", 101, 2872, 2912), 0), Tag1 ("Ocaml_shadow", 277)), 0, 0); Tag3 (("Ppxlib_private", 7730), 0, (Tag3 (Tag1 ((Tag2 ("Ppxlib")), "Ppxlib_private")), 0, (("src/ppxlib.ml", 107, 2977, 2977), ("src/ppxlib.ml", 110, 3054, 3057), 0), Tag1 ("Ppxlib", 29)), 0, 0); Tag3 (("Located", 7731), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__Ast_builder")), "Default"), "Located")), 0, (("src/ast_builder.mli", 17, 509, 511), ("src/ast_builder.mli", 19, 557, 621), 0), Tag1 ("Ppxlib__Ast_builder", 1)), 0, 0); (("attribute", 7732), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1505), (Tag1 (("name"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1504)], (0)), 100000000, 0, -1503), (Tag1 (("payload"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "payload"), 0, (0)), 100000000, 0, -1502), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "attribute"), 0, (0)), 100000000, 0, -1501), 0), 100000000, 0, -1500), 0), 100000000, 0, -1499), 0), 100000000, 0, -1498), 0, (("src/ast_builder_generated.ml", 4, 32, 40), ("src/ast_builder_generated.ml", 4, 32, 49), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 0)), 0); (("binding_op", 7733), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1497), (Tag1 (("op"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1496)], (0)), 100000000, 0, -1495), (Tag1 (("pat"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -1494), (Tag1 (("exp"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1493), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "binding_op"), 0, (0)), 100000000, 0, -1492), 0), 100000000, 0, -1491), 0), 100000000, 0, -1490), 0), 100000000, 0, -1489), 0), 100000000, 0, -1488), 0, (("src/ast_builder_generated.ml", 6, 142, 150), ("src/ast_builder_generated.ml", 6, 142, 160), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 4)), 0); (("case", 7734), ((Tag1 (("lhs"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -1487), (Tag1 (("guard"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1486)], (0)), 100000000, 0, -1485), (Tag1 (("rhs"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1484), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "case"), 0, (0)), 100000000, 0, -1483), 0), 100000000, 0, -1482), 0), 100000000, 0, -1481), 0), 100000000, 0, -1480), 0, (("src/ast_builder_generated.ml", 8, 257, 265), ("src/ast_builder_generated.ml", 8, 257, 269), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 9)), 0); (("pcl_constr", 7735), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1479), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "longident_loc"), 0, (0)), 100000000, 0, -1478), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -1477)], (0)), 100000000, 0, -1476), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_expr"), 0, (0)), 100000000, 0, -1475), 0), 100000000, 0, -1474), 0), 100000000, 0, -1473), 0), 100000000, 0, -1472), 0, (("src/ast_builder_generated.ml", 10, 347, 355), ("src/ast_builder_generated.ml", 10, 347, 365), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 13)), 0); (("pcl_structure", 7736), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1471), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_structure"), 0, (0)), 100000000, 0, -1470), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_expr"), 0, (0)), 100000000, 0, -1469), 0), 100000000, 0, -1468), 0), 100000000, 0, -1467), 0, (("src/ast_builder_generated.ml", 13, 465, 473), ("src/ast_builder_generated.ml", 13, 465, 486), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 17)), 0); (("pcl_fun", 7737), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1466), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "arg_label"), 0, (0)), 100000000, 0, -1465), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1464)], (0)), 100000000, 0, -1463), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -1462), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_expr"), 0, (0)), 100000000, 0, -1461), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_expr"), 0, (0)), 100000000, 0, -1461), 0), 100000000, 0, -1460), 0), 100000000, 0, -1459), 0), 100000000, 0, -1458), 0), 100000000, 0, -1457), 0), 100000000, 0, -1456), 0, (("src/ast_builder_generated.ml", 15, 574, 582), ("src/ast_builder_generated.ml", 15, 574, 589), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 20)), 0); (("pcl_apply", 7738), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1455), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_expr"), 0, (0)), 100000000, 0, -1450), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "arg_label"), 0, (0)), 100000000, 0, -1453); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1454)]), 100000000, 0, -1452)], (0)), 100000000, 0, -1451), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_expr"), 0, (0)), 100000000, 0, -1450), 0), 100000000, 0, -1449), 0), 100000000, 0, -1448), 0), 100000000, 0, -1447), 0, (("src/ast_builder_generated.ml", 21, 724, 732), ("src/ast_builder_generated.ml", 21, 724, 741), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 26)), 0); (("pcl_let", 7739), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1446), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "rec_flag"), 0, (0)), 100000000, 0, -1445), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "value_binding"), 0, (0)), 100000000, 0, -1444)], (0)), 100000000, 0, -1443), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_expr"), 0, (0)), 100000000, 0, -1442), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_expr"), 0, (0)), 100000000, 0, -1442), 0), 100000000, 0, -1441), 0), 100000000, 0, -1440), 0), 100000000, 0, -1439), 0), 100000000, 0, -1438), 0, (("src/ast_builder_generated.ml", 23, 834, 842), ("src/ast_builder_generated.ml", 23, 834, 849), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 30)), 0); (("pcl_constraint", 7740), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1437), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_expr"), 0, (0)), 100000000, 0, -1435), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_type"), 0, (0)), 100000000, 0, -1436), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_expr"), 0, (0)), 100000000, 0, -1435), 0), 100000000, 0, -1434), 0), 100000000, 0, -1433), 0), 100000000, 0, -1432), 0, (("src/ast_builder_generated.ml", 26, 953, 961), ("src/ast_builder_generated.ml", 26, 953, 975), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 35)), 0); (("pcl_extension", 7741), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1431), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "extension"), 0, (0)), 100000000, 0, -1430), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_expr"), 0, (0)), 100000000, 0, -1429), 0), 100000000, 0, -1428), 0), 100000000, 0, -1427), 0, (("src/ast_builder_generated.ml", 32, 1103, 1111), ("src/ast_builder_generated.ml", 32, 1103, 1124), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 39)), 0); (("pcl_open", 7742), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1426), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "open_description"), 0, (0)), 100000000, 0, -1425), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_expr"), 0, (0)), 100000000, 0, -1424), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_expr"), 0, (0)), 100000000, 0, -1424), 0), 100000000, 0, -1423), 0), 100000000, 0, -1422), 0), 100000000, 0, -1421), 0, (("src/ast_builder_generated.ml", 34, 1212, 1220), ("src/ast_builder_generated.ml", 34, 1212, 1228), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 42)), 0); (("pcf_inherit", 7743), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1420), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "override_flag"), 0, (0)), 100000000, 0, -1419), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_expr"), 0, (0)), 100000000, 0, -1418), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1417)], (0)), 100000000, 0, -1416)], (0)), 100000000, 0, -1415), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_field"), 0, (0)), 100000000, 0, -1414), 0), 100000000, 0, -1413), 0), 100000000, 0, -1412), 0), 100000000, 0, -1411), 0), 100000000, 0, -1410), 0, (("src/ast_builder_generated.ml", 36, 1320, 1328), ("src/ast_builder_generated.ml", 36, 1320, 1339), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 46)), 0); (("pcf_val", 7744), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1409), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "loc"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "label"), 0, (0)), 100000000, 0, -1406)], (0)), 100000000, 0, -1405); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "mutable_flag"), 0, (0)), 100000000, 0, -1407); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_field_kind"), 0, (0)), 100000000, 0, -1408)]), 100000000, 0, -1404), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_field"), 0, (0)), 100000000, 0, -1403), 0), 100000000, 0, -1402), 0), 100000000, 0, -1401), 0, (("src/ast_builder_generated.ml", 42, 1471, 1479), ("src/ast_builder_generated.ml", 42, 1471, 1486), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 51)), 0); (("pcf_method", 7745), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1400), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "loc"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "label"), 0, (0)), 100000000, 0, -1397)], (0)), 100000000, 0, -1396); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "private_flag"), 0, (0)), 100000000, 0, -1398); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_field_kind"), 0, (0)), 100000000, 0, -1399)]), 100000000, 0, -1395), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_field"), 0, (0)), 100000000, 0, -1394), 0), 100000000, 0, -1393), 0), 100000000, 0, -1392), 0, (("src/ast_builder_generated.ml", 44, 1568, 1576), ("src/ast_builder_generated.ml", 44, 1568, 1586), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 54)), 0); (("pcf_constraint", 7746), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1391), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -1389); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -1390)]), 100000000, 0, -1388), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_field"), 0, (0)), 100000000, 0, -1387), 0), 100000000, 0, -1386), 0), 100000000, 0, -1385), 0, (("src/ast_builder_generated.ml", 46, 1671, 1679), ("src/ast_builder_generated.ml", 46, 1671, 1693), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 57)), 0); (("pcf_initializer", 7747), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1384), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1383), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_field"), 0, (0)), 100000000, 0, -1382), 0), 100000000, 0, -1381), 0), 100000000, 0, -1380), 0, (("src/ast_builder_generated.ml", 48, 1782, 1790), ("src/ast_builder_generated.ml", 48, 1782, 1805), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 60)), 0); (("pcf_attribute", 7748), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1379), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "attribute"), 0, (0)), 100000000, 0, -1378), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_field"), 0, (0)), 100000000, 0, -1377), 0), 100000000, 0, -1376), 0), 100000000, 0, -1375), 0, (("src/ast_builder_generated.ml", 50, 1895, 1903), ("src/ast_builder_generated.ml", 50, 1895, 1916), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 63)), 0); (("pcf_extension", 7749), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1374), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "extension"), 0, (0)), 100000000, 0, -1373), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_field"), 0, (0)), 100000000, 0, -1372), 0), 100000000, 0, -1371), 0), 100000000, 0, -1370), 0, (("src/ast_builder_generated.ml", 52, 2004, 2012), ("src/ast_builder_generated.ml", 52, 2004, 2025), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 66)), 0); (("class_infos", 7750), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1369), (Tag1 (("virt"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "virtual_flag"), 0, (0)), 100000000, 0, -1368), (Tag1 (("params"), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -1364); (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "variance"), 0, (0)), 100000000, 0, -1366); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "injectivity"), 0, (0)), 100000000, 0, -1367)]), 100000000, 0, -1365)]), 100000000, 0, -1363)], (0)), 100000000, 0, -1362), (Tag1 (("name"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1361)], (0)), 100000000, 0, -1360), (Tag1 (("expr"), ((0), 100000000, 0, -1359), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_infos"), [((0), 100000000, 0, -1359)], (0)), 100000000, 0, -1358), 0), 100000000, 0, -1357), 0), 100000000, 0, -1356), 0), 100000000, 0, -1355), 0), 100000000, 0, -1354), 0), 100000000, 0, -1353), 0, (("src/ast_builder_generated.ml", 54, 2113, 2121), ("src/ast_builder_generated.ml", 54, 2113, 2132), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 69)), 0); (("class_signature", 7751), ((Tag1 (("self"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -1352), (Tag1 (("fields"), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_type_field"), 0, (0)), 100000000, 0, -1351)], (0)), 100000000, 0, -1350), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_signature"), 0, (0)), 100000000, 0, -1349), 0), 100000000, 0, -1348), 0), 100000000, 0, -1347), 0, (("src/ast_builder_generated.ml", 63, 2342, 2350), ("src/ast_builder_generated.ml", 63, 2342, 2365), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 75)), 0); (("class_structure", 7752), ((Tag1 (("self"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -1346), (Tag1 (("fields"), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_field"), 0, (0)), 100000000, 0, -1345)], (0)), 100000000, 0, -1344), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_structure"), 0, (0)), 100000000, 0, -1343), 0), 100000000, 0, -1342), 0), 100000000, 0, -1341), 0, (("src/ast_builder_generated.ml", 65, 2435, 2443), ("src/ast_builder_generated.ml", 65, 2435, 2458), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 78)), 0); (("pcty_constr", 7753), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1340), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "longident_loc"), 0, (0)), 100000000, 0, -1339), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -1338)], (0)), 100000000, 0, -1337), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_type"), 0, (0)), 100000000, 0, -1336), 0), 100000000, 0, -1335), 0), 100000000, 0, -1334), 0), 100000000, 0, -1333), 0, (("src/ast_builder_generated.ml", 67, 2528, 2536), ("src/ast_builder_generated.ml", 67, 2528, 2547), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 81)), 0); (("pcty_signature", 7754), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1332), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_signature"), 0, (0)), 100000000, 0, -1331), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_type"), 0, (0)), 100000000, 0, -1330), 0), 100000000, 0, -1329), 0), 100000000, 0, -1328), 0, (("src/ast_builder_generated.ml", 73, 2675, 2683), ("src/ast_builder_generated.ml", 73, 2675, 2697), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 85)), 0); (("pcty_arrow", 7755), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1327), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "arg_label"), 0, (0)), 100000000, 0, -1326), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -1325), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_type"), 0, (0)), 100000000, 0, -1324), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_type"), 0, (0)), 100000000, 0, -1324), 0), 100000000, 0, -1323), 0), 100000000, 0, -1322), 0), 100000000, 0, -1321), 0), 100000000, 0, -1320), 0, (("src/ast_builder_generated.ml", 76, 2795, 2803), ("src/ast_builder_generated.ml", 76, 2795, 2813), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 88)), 0); (("pcty_extension", 7756), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1319), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "extension"), 0, (0)), 100000000, 0, -1318), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_type"), 0, (0)), 100000000, 0, -1317), 0), 100000000, 0, -1316), 0), 100000000, 0, -1315), 0, (("src/ast_builder_generated.ml", 82, 2947, 2955), ("src/ast_builder_generated.ml", 82, 2947, 2969), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 93)), 0); (("pcty_open", 7757), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1314), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "open_description"), 0, (0)), 100000000, 0, -1313), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_type"), 0, (0)), 100000000, 0, -1312), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_type"), 0, (0)), 100000000, 0, -1312), 0), 100000000, 0, -1311), 0), 100000000, 0, -1310), 0), 100000000, 0, -1309), 0, (("src/ast_builder_generated.ml", 85, 3067, 3075), ("src/ast_builder_generated.ml", 85, 3067, 3084), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 96)), 0); (("pctf_inherit", 7758), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1308), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_type"), 0, (0)), 100000000, 0, -1307), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_type_field"), 0, (0)), 100000000, 0, -1306), 0), 100000000, 0, -1305), 0), 100000000, 0, -1304), 0, (("src/ast_builder_generated.ml", 91, 3210, 3218), ("src/ast_builder_generated.ml", 91, 3210, 3230), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 100)), 0); (("pctf_val", 7759), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1303), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "loc"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "label"), 0, (0)), 100000000, 0, -1299)], (0)), 100000000, 0, -1298); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "mutable_flag"), 0, (0)), 100000000, 0, -1300); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "virtual_flag"), 0, (0)), 100000000, 0, -1301); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -1302)]), 100000000, 0, -1297), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_type_field"), 0, (0)), 100000000, 0, -1296), 0), 100000000, 0, -1295), 0), 100000000, 0, -1294), 0, (("src/ast_builder_generated.ml", 93, 3320, 3328), ("src/ast_builder_generated.ml", 93, 3320, 3336), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 103)), 0); (("pctf_method", 7760), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1293), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "loc"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "label"), 0, (0)), 100000000, 0, -1289)], (0)), 100000000, 0, -1288); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "private_flag"), 0, (0)), 100000000, 0, -1290); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "virtual_flag"), 0, (0)), 100000000, 0, -1291); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -1292)]), 100000000, 0, -1287), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_type_field"), 0, (0)), 100000000, 0, -1286), 0), 100000000, 0, -1285), 0), 100000000, 0, -1284), 0, (("src/ast_builder_generated.ml", 95, 3422, 3430), ("src/ast_builder_generated.ml", 95, 3422, 3441), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 106)), 0); (("pctf_constraint", 7761), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1283), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -1281); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -1282)]), 100000000, 0, -1280), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_type_field"), 0, (0)), 100000000, 0, -1279), 0), 100000000, 0, -1278), 0), 100000000, 0, -1277), 0, (("src/ast_builder_generated.ml", 97, 3530, 3538), ("src/ast_builder_generated.ml", 97, 3530, 3553), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 109)), 0); (("pctf_attribute", 7762), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1276), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "attribute"), 0, (0)), 100000000, 0, -1275), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_type_field"), 0, (0)), 100000000, 0, -1274), 0), 100000000, 0, -1273), 0), 100000000, 0, -1272), 0, (("src/ast_builder_generated.ml", 103, 3676, 3684), ("src/ast_builder_generated.ml", 103, 3676, 3698), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 112)), 0); (("pctf_extension", 7763), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1271), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "extension"), 0, (0)), 100000000, 0, -1270), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_type_field"), 0, (0)), 100000000, 0, -1269), 0), 100000000, 0, -1268), 0), 100000000, 0, -1267), 0, (("src/ast_builder_generated.ml", 106, 3796, 3804), ("src/ast_builder_generated.ml", 106, 3796, 3818), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 115)), 0); (("ptyp_any", 7764), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1266), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -1265), 0), 100000000, 0, -1264), 0, (("src/ast_builder_generated.ml", 118, 4148, 4156), ("src/ast_builder_generated.ml", 118, 4148, 4164), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 124)), 0); (("ptyp_var", 7765), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1263), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1262), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -1261), 0), 100000000, 0, -1260), 0), 100000000, 0, -1259), 0, (("src/ast_builder_generated.ml", 125, 4301, 4309), ("src/ast_builder_generated.ml", 125, 4301, 4317), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 126)), 0); (("ptyp_arrow", 7766), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1258), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "arg_label"), 0, (0)), 100000000, 0, -1257), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -1255), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -1256), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -1255), 0), 100000000, 0, -1254), 0), 100000000, 0, -1253), 0), 100000000, 0, -1252), 0), 100000000, 0, -1251), 0, (("src/ast_builder_generated.ml", 132, 4462, 4470), ("src/ast_builder_generated.ml", 132, 4462, 4480), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 129)), 0); (("ptyp_tuple", 7767), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1250), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -1249)], (0)), 100000000, 0, -1248), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -1247), 0), 100000000, 0, -1246), 0), 100000000, 0, -1245), 0, (("src/ast_builder_generated.ml", 139, 4643, 4651), ("src/ast_builder_generated.ml", 139, 4643, 4661), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 134)), 0); (("ptyp_constr", 7768), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1244), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "longident_loc"), 0, (0)), 100000000, 0, -1243), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -1242)], (0)), 100000000, 0, -1241), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -1240), 0), 100000000, 0, -1239), 0), 100000000, 0, -1238), 0), 100000000, 0, -1237), 0, (("src/ast_builder_generated.ml", 146, 4808, 4816), ("src/ast_builder_generated.ml", 146, 4808, 4827), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 137)), 0); (("ptyp_object", 7769), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1236), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "object_field"), 0, (0)), 100000000, 0, -1235)], (0)), 100000000, 0, -1234), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "closed_flag"), 0, (0)), 100000000, 0, -1233), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -1232), 0), 100000000, 0, -1231), 0), 100000000, 0, -1230), 0), 100000000, 0, -1229), 0, (("src/ast_builder_generated.ml", 153, 4984, 4992), ("src/ast_builder_generated.ml", 153, 4984, 5003), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 141)), 0); (("ptyp_class", 7770), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1228), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "longident_loc"), 0, (0)), 100000000, 0, -1227), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -1226)], (0)), 100000000, 0, -1225), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -1224), 0), 100000000, 0, -1223), 0), 100000000, 0, -1222), 0), 100000000, 0, -1221), 0, (("src/ast_builder_generated.ml", 160, 5160, 5168), ("src/ast_builder_generated.ml", 160, 5160, 5178), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 145)), 0); (("ptyp_alias", 7771), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1220), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -1218), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1219), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -1218), 0), 100000000, 0, -1217), 0), 100000000, 0, -1216), 0), 100000000, 0, -1215), 0, (("src/ast_builder_generated.ml", 167, 5334, 5342), ("src/ast_builder_generated.ml", 167, 5334, 5352), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 149)), 0); (("ptyp_variant", 7772), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1214), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "row_field"), 0, (0)), 100000000, 0, -1213)], (0)), 100000000, 0, -1212), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "closed_flag"), 0, (0)), 100000000, 0, -1211), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "label"), 0, (0)), 100000000, 0, -1210)], (0)), 100000000, 0, -1209)], (0)), 100000000, 0, -1208), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -1207), 0), 100000000, 0, -1206), 0), 100000000, 0, -1205), 0), 100000000, 0, -1204), 0), 100000000, 0, -1203), 0, (("src/ast_builder_generated.ml", 174, 5508, 5516), ("src/ast_builder_generated.ml", 174, 5508, 5528), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 153)), 0); (("ptyp_poly", 7773), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1202), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1201)], (0)), 100000000, 0, -1200)], (0)), 100000000, 0, -1199), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -1198), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -1198), 0), 100000000, 0, -1197), 0), 100000000, 0, -1196), 0), 100000000, 0, -1195), 0, (("src/ast_builder_generated.ml", 181, 5693, 5701), ("src/ast_builder_generated.ml", 181, 5693, 5710), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 158)), 0); (("ptyp_package", 7774), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1194), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "package_type"), 0, (0)), 100000000, 0, -1193), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -1192), 0), 100000000, 0, -1191), 0), 100000000, 0, -1190), 0, (("src/ast_builder_generated.ml", 188, 5865, 5873), ("src/ast_builder_generated.ml", 188, 5865, 5885), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 162)), 0); (("ptyp_extension", 7775), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1189), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "extension"), 0, (0)), 100000000, 0, -1188), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -1187), 0), 100000000, 0, -1186), 0), 100000000, 0, -1185), 0, (("src/ast_builder_generated.ml", 195, 6034, 6042), ("src/ast_builder_generated.ml", 195, 6034, 6056), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 165)), 0); (("pdir_string", 7776), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1184), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1183), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "directive_argument"), 0, (0)), 100000000, 0, -1182), 0), 100000000, 0, -1181), 0), 100000000, 0, -1180), 0, (("src/ast_builder_generated.ml", 202, 6207, 6215), ("src/ast_builder_generated.ml", 202, 6207, 6226), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 168)), 0); (("pdir_int", 7777), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1179), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1178), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1177)], (0)), 100000000, 0, -1176), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "directive_argument"), 0, (0)), 100000000, 0, -1175), 0), 100000000, 0, -1174), 0), 100000000, 0, -1173), 0), 100000000, 0, -1172), 0, (("src/ast_builder_generated.ml", 204, 6295, 6303), ("src/ast_builder_generated.ml", 204, 6295, 6311), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 171)), 0); (("pdir_ident", 7778), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1171), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "longident"), 0, (0)), 100000000, 0, -1170), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "directive_argument"), 0, (0)), 100000000, 0, -1169), 0), 100000000, 0, -1168), 0), 100000000, 0, -1167), 0, (("src/ast_builder_generated.ml", 206, 6386, 6394), ("src/ast_builder_generated.ml", 206, 6386, 6404), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 175)), 0); (("pdir_bool", 7779), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1166), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1165), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "directive_argument"), 0, (0)), 100000000, 0, -1164), 0), 100000000, 0, -1163), 0), 100000000, 0, -1162), 0, (("src/ast_builder_generated.ml", 208, 6472, 6480), ("src/ast_builder_generated.ml", 208, 6472, 6489), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 178)), 0); (("pexp_ident", 7780), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1161), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "longident_loc"), 0, (0)), 100000000, 0, -1160), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1159), 0), 100000000, 0, -1158), 0), 100000000, 0, -1157), 0, (("src/ast_builder_generated.ml", 209, 6550, 6558), ("src/ast_builder_generated.ml", 209, 6550, 6568), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 181)), 0); (("pexp_constant", 7781), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1156), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "constant"), 0, (0)), 100000000, 0, -1155), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1154), 0), 100000000, 0, -1153), 0), 100000000, 0, -1152), 0, (("src/ast_builder_generated.ml", 216, 6715, 6723), ("src/ast_builder_generated.ml", 216, 6715, 6736), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 184)), 0); (("pexp_let", 7782), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1151), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "rec_flag"), 0, (0)), 100000000, 0, -1150), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "value_binding"), 0, (0)), 100000000, 0, -1149)], (0)), 100000000, 0, -1148), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1147), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1147), 0), 100000000, 0, -1146), 0), 100000000, 0, -1145), 0), 100000000, 0, -1144), 0), 100000000, 0, -1143), 0, (("src/ast_builder_generated.ml", 223, 6886, 6894), ("src/ast_builder_generated.ml", 223, 6886, 6902), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 187)), 0); (("pexp_function", 7783), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1142), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "cases"), 0, (0)), 100000000, 0, -1141), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1140), 0), 100000000, 0, -1139), 0), 100000000, 0, -1138), 0, (("src/ast_builder_generated.ml", 230, 7063, 7071), ("src/ast_builder_generated.ml", 230, 7063, 7084), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 192)), 0); (("pexp_fun", 7784), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1137), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "arg_label"), 0, (0)), 100000000, 0, -1136), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1135)], (0)), 100000000, 0, -1134), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -1133), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1132), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1132), 0), 100000000, 0, -1131), 0), 100000000, 0, -1130), 0), 100000000, 0, -1129), 0), 100000000, 0, -1128), 0), 100000000, 0, -1127), 0, (("src/ast_builder_generated.ml", 237, 7234, 7242), ("src/ast_builder_generated.ml", 237, 7234, 7250), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 195)), 0); (("pexp_apply", 7785), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1126), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1121), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "arg_label"), 0, (0)), 100000000, 0, -1124); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1125)]), 100000000, 0, -1123)], (0)), 100000000, 0, -1122), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1121), 0), 100000000, 0, -1120), 0), 100000000, 0, -1119), 0), 100000000, 0, -1118), 0, (("src/ast_builder_generated.ml", 244, 7418, 7426), ("src/ast_builder_generated.ml", 244, 7418, 7436), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 201)), 0); (("pexp_match", 7786), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1117), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1115), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "cases"), 0, (0)), 100000000, 0, -1116), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1115), 0), 100000000, 0, -1114), 0), 100000000, 0, -1113), 0), 100000000, 0, -1112), 0, (("src/ast_builder_generated.ml", 251, 7592, 7600), ("src/ast_builder_generated.ml", 251, 7592, 7610), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 205)), 0); (("pexp_try", 7787), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1111), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1109), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "cases"), 0, (0)), 100000000, 0, -1110), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1109), 0), 100000000, 0, -1108), 0), 100000000, 0, -1107), 0), 100000000, 0, -1106), 0, (("src/ast_builder_generated.ml", 258, 7766, 7774), ("src/ast_builder_generated.ml", 258, 7766, 7782), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 209)), 0); (("pexp_tuple", 7788), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1105), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1104)], (0)), 100000000, 0, -1103), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1102), 0), 100000000, 0, -1101), 0), 100000000, 0, -1100), 0, (("src/ast_builder_generated.ml", 265, 7936, 7944), ("src/ast_builder_generated.ml", 265, 7936, 7954), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 213)), 0); (("pexp_construct", 7789), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1099), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "longident_loc"), 0, (0)), 100000000, 0, -1098), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1097)], (0)), 100000000, 0, -1096), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1095), 0), 100000000, 0, -1094), 0), 100000000, 0, -1093), 0), 100000000, 0, -1092), 0, (("src/ast_builder_generated.ml", 272, 8101, 8109), ("src/ast_builder_generated.ml", 272, 8101, 8123), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 216)), 0); (("pexp_variant", 7790), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1091), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "label"), 0, (0)), 100000000, 0, -1090), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1089)], (0)), 100000000, 0, -1088), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1087), 0), 100000000, 0, -1086), 0), 100000000, 0, -1085), 0), 100000000, 0, -1084), 0, (("src/ast_builder_generated.ml", 279, 8283, 8291), ("src/ast_builder_generated.ml", 279, 8283, 8303), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 220)), 0); (("pexp_record", 7791), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1083), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "longident_loc"), 0, (0)), 100000000, 0, -1081); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1082)]), 100000000, 0, -1080)], (0)), 100000000, 0, -1079), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1078)], (0)), 100000000, 0, -1077), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1076), 0), 100000000, 0, -1075), 0), 100000000, 0, -1074), 0), 100000000, 0, -1073), 0, (("src/ast_builder_generated.ml", 286, 8461, 8469), ("src/ast_builder_generated.ml", 286, 8461, 8480), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 224)), 0); (("pexp_field", 7792), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1072), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1070), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "longident_loc"), 0, (0)), 100000000, 0, -1071), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1070), 0), 100000000, 0, -1069), 0), 100000000, 0, -1068), 0), 100000000, 0, -1067), 0, (("src/ast_builder_generated.ml", 293, 8637, 8645), ("src/ast_builder_generated.ml", 293, 8637, 8655), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 228)), 0); (("pexp_setfield", 7793), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1066), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1063), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "longident_loc"), 0, (0)), 100000000, 0, -1065), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1064), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1063), 0), 100000000, 0, -1062), 0), 100000000, 0, -1061), 0), 100000000, 0, -1060), 0), 100000000, 0, -1059), 0, (("src/ast_builder_generated.ml", 300, 8811, 8819), ("src/ast_builder_generated.ml", 300, 8811, 8832), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 232)), 0); (("pexp_array", 7794), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1058), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1057)], (0)), 100000000, 0, -1056), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1055), 0), 100000000, 0, -1054), 0), 100000000, 0, -1053), 0, (("src/ast_builder_generated.ml", 307, 8998, 9006), ("src/ast_builder_generated.ml", 307, 8998, 9016), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 237)), 0); (("pexp_ifthenelse", 7795), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1052), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1048), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1051), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1050)], (0)), 100000000, 0, -1049), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1048), 0), 100000000, 0, -1047), 0), 100000000, 0, -1046), 0), 100000000, 0, -1045), 0), 100000000, 0, -1044), 0, (("src/ast_builder_generated.ml", 314, 9163, 9171), ("src/ast_builder_generated.ml", 314, 9163, 9186), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 240)), 0); (("pexp_sequence", 7796), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1043), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1041), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1042), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1041), 0), 100000000, 0, -1040), 0), 100000000, 0, -1039), 0), 100000000, 0, -1038), 0, (("src/ast_builder_generated.ml", 321, 9354, 9362), ("src/ast_builder_generated.ml", 321, 9354, 9375), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 245)), 0); (("pexp_while", 7797), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1037), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1035), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1036), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1035), 0), 100000000, 0, -1034), 0), 100000000, 0, -1033), 0), 100000000, 0, -1032), 0, (("src/ast_builder_generated.ml", 328, 9534, 9542), ("src/ast_builder_generated.ml", 328, 9534, 9552), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 249)), 0); (("pexp_for", 7798), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1031), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -1030), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1026), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1029), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "direction_flag"), 0, (0)), 100000000, 0, -1028), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1027), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1026), 0), 100000000, 0, -1025), 0), 100000000, 0, -1024), 0), 100000000, 0, -1023), 0), 100000000, 0, -1022), 0), 100000000, 0, -1021), 0), 100000000, 0, -1020), 0, (("src/ast_builder_generated.ml", 335, 9708, 9716), ("src/ast_builder_generated.ml", 335, 9708, 9724), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 253)), 0); (("pexp_constraint", 7799), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1019), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1017), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -1018), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1017), 0), 100000000, 0, -1016), 0), 100000000, 0, -1015), 0), 100000000, 0, -1014), 0, (("src/ast_builder_generated.ml", 342, 9899, 9907), ("src/ast_builder_generated.ml", 342, 9899, 9922), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 260)), 0); (("pexp_coerce", 7800), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1013), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1009), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -1012)], (0)), 100000000, 0, -1011), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -1010), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1009), 0), 100000000, 0, -1008), 0), 100000000, 0, -1007), 0), 100000000, 0, -1006), 0), 100000000, 0, -1005), 0, (("src/ast_builder_generated.ml", 349, 10083, 10091), ("src/ast_builder_generated.ml", 349, 10083, 10102), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 264)), 0); (("pexp_send", 7801), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -1004), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1001), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "loc"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "label"), 0, (0)), 100000000, 0, -1003)], (0)), 100000000, 0, -1002), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -1001), 0), 100000000, 0, -1000), 0), 100000000, 0, -999), 0), 100000000, 0, -998), 0, (("src/ast_builder_generated.ml", 356, 10266, 10274), ("src/ast_builder_generated.ml", 356, 10266, 10283), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 269)), 0); (("pexp_new", 7802), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -997), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "longident_loc"), 0, (0)), 100000000, 0, -996), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -995), 0), 100000000, 0, -994), 0), 100000000, 0, -993), 0, (("src/ast_builder_generated.ml", 363, 10438, 10446), ("src/ast_builder_generated.ml", 363, 10438, 10454), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 273)), 0); (("pexp_setinstvar", 7803), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -992), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "loc"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "label"), 0, (0)), 100000000, 0, -991)], (0)), 100000000, 0, -990), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -989), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -989), 0), 100000000, 0, -988), 0), 100000000, 0, -987), 0), 100000000, 0, -986), 0, (("src/ast_builder_generated.ml", 370, 10599, 10607), ("src/ast_builder_generated.ml", 370, 10599, 10622), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 276)), 0); (("pexp_override", 7804), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -985), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "loc"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "label"), 0, (0)), 100000000, 0, -983)], (0)), 100000000, 0, -982); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -984)]), 100000000, 0, -981)], (0)), 100000000, 0, -980), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -979), 0), 100000000, 0, -978), 0), 100000000, 0, -977), 0, (("src/ast_builder_generated.ml", 377, 10783, 10791), ("src/ast_builder_generated.ml", 377, 10783, 10804), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 280)), 0); (("pexp_letmodule", 7805), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -976), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "loc"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -975)], (0)), 100000000, 0, -974)], (0)), 100000000, 0, -973), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "module_expr"), 0, (0)), 100000000, 0, -972), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -971), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -971), 0), 100000000, 0, -970), 0), 100000000, 0, -969), 0), 100000000, 0, -968), 0), 100000000, 0, -967), 0, (("src/ast_builder_generated.ml", 384, 10954, 10962), ("src/ast_builder_generated.ml", 384, 10954, 10976), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 283)), 0); (("pexp_letexception", 7806), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -966), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "extension_constructor"), 0, (0)), 100000000, 0, -965), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -964), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -964), 0), 100000000, 0, -963), 0), 100000000, 0, -962), 0), 100000000, 0, -961), 0, (("src/ast_builder_generated.ml", 391, 11143, 11151), ("src/ast_builder_generated.ml", 391, 11143, 11168), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 288)), 0); (("pexp_assert", 7807), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -960), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -959), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -959), 0), 100000000, 0, -958), 0), 100000000, 0, -957), 0, (("src/ast_builder_generated.ml", 398, 11331, 11339), ("src/ast_builder_generated.ml", 398, 11331, 11350), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 292)), 0); (("pexp_lazy", 7808), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -956), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -955), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -955), 0), 100000000, 0, -954), 0), 100000000, 0, -953), 0, (("src/ast_builder_generated.ml", 405, 11498, 11506), ("src/ast_builder_generated.ml", 405, 11498, 11515), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 295)), 0); (("pexp_poly", 7809), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -952), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -949), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -951)], (0)), 100000000, 0, -950), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -949), 0), 100000000, 0, -948), 0), 100000000, 0, -947), 0), 100000000, 0, -946), 0, (("src/ast_builder_generated.ml", 412, 11661, 11669), ("src/ast_builder_generated.ml", 412, 11661, 11678), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 298)), 0); (("pexp_object", 7810), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -945), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_structure"), 0, (0)), 100000000, 0, -944), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -943), 0), 100000000, 0, -942), 0), 100000000, 0, -941), 0, (("src/ast_builder_generated.ml", 419, 11833, 11841), ("src/ast_builder_generated.ml", 419, 11833, 11852), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 302)), 0); (("pexp_newtype", 7811), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -940), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -939)], (0)), 100000000, 0, -938), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -937), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -937), 0), 100000000, 0, -936), 0), 100000000, 0, -935), 0), 100000000, 0, -934), 0, (("src/ast_builder_generated.ml", 426, 12000, 12008), ("src/ast_builder_generated.ml", 426, 12000, 12020), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 305)), 0); (("pexp_pack", 7812), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -933), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "module_expr"), 0, (0)), 100000000, 0, -932), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -931), 0), 100000000, 0, -930), 0), 100000000, 0, -929), 0, (("src/ast_builder_generated.ml", 433, 12178, 12186), ("src/ast_builder_generated.ml", 433, 12178, 12195), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 309)), 0); (("pexp_open", 7813), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -928), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "open_declaration"), 0, (0)), 100000000, 0, -927), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -926), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -926), 0), 100000000, 0, -925), 0), 100000000, 0, -924), 0), 100000000, 0, -923), 0, (("src/ast_builder_generated.ml", 440, 12341, 12349), ("src/ast_builder_generated.ml", 440, 12341, 12358), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 312)), 0); (("pexp_letop", 7814), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -922), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "letop"), 0, (0)), 100000000, 0, -921), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -920), 0), 100000000, 0, -919), 0), 100000000, 0, -918), 0, (("src/ast_builder_generated.ml", 447, 12513, 12521), ("src/ast_builder_generated.ml", 447, 12513, 12531), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 316)), 0); (("pexp_extension", 7815), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -917), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "extension"), 0, (0)), 100000000, 0, -916), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -915), 0), 100000000, 0, -914), 0), 100000000, 0, -913), 0, (("src/ast_builder_generated.ml", 454, 12678, 12686), ("src/ast_builder_generated.ml", 454, 12678, 12700), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 319)), 0); (("pexp_unreachable", 7816), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -912), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -911), 0), 100000000, 0, -910), 0, (("src/ast_builder_generated.ml", 461, 12851, 12859), ("src/ast_builder_generated.ml", 461, 12851, 12875), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 322)), 0); (("extension_constructor", 7817), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -909), (Tag1 (("name"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -908)], (0)), 100000000, 0, -907), (Tag1 (("kind"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "extension_constructor_kind"), 0, (0)), 100000000, 0, -906), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "extension_constructor"), 0, (0)), 100000000, 0, -905), 0), 100000000, 0, -904), 0), 100000000, 0, -903), 0), 100000000, 0, -902), 0, (("src/ast_builder_generated.ml", 468, 13020, 13028), ("src/ast_builder_generated.ml", 468, 13020, 13049), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 324)), 0); (("include_infos", 7818), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -901), (Tag1 (0, ((0), 100000000, 0, -900), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "include_infos"), [((0), 100000000, 0, -900)], (0)), 100000000, 0, -899), 0), 100000000, 0, -898), 0), 100000000, 0, -897), 0, (("src/ast_builder_generated.ml", 475, 13193, 13201), ("src/ast_builder_generated.ml", 475, 13193, 13214), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 328)), 0); (("label_declaration", 7819), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -896), (Tag1 (("name"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -895)], (0)), 100000000, 0, -894), (Tag1 (("mutable_"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "mutable_flag"), 0, (0)), 100000000, 0, -893), (Tag1 (("type_"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -892), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "label_declaration"), 0, (0)), 100000000, 0, -891), 0), 100000000, 0, -890), 0), 100000000, 0, -889), 0), 100000000, 0, -888), 0), 100000000, 0, -887), 0, (("src/ast_builder_generated.ml", 477, 13295, 13303), ("src/ast_builder_generated.ml", 477, 13295, 13320), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 331)), 0); (("letop", 7820), ((Tag1 (("let_"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "binding_op"), 0, (0)), 100000000, 0, -886), (Tag1 (("ands"), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "binding_op"), 0, (0)), 100000000, 0, -886)], (0)), 100000000, 0, -885), (Tag1 (("body"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -884), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "letop"), 0, (0)), 100000000, 0, -883), 0), 100000000, 0, -882), 0), 100000000, 0, -881), 0), 100000000, 0, -880), 0, (("src/ast_builder_generated.ml", 485, 13505, 13513), ("src/ast_builder_generated.ml", 485, 13505, 13518), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 336)), 0); (("location", 7821), ((Tag1 (("start"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "position"), 0, (0)), 100000000, 0, -879), (Tag1 (("end_"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "position"), 0, (0)), 100000000, 0, -879), (Tag1 (("ghost"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -878), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -877), 0), 100000000, 0, -876), 0), 100000000, 0, -875), 0), 100000000, 0, -874), 0, (("src/ast_builder_generated.ml", 486, 13563, 13571), ("src/ast_builder_generated.ml", 486, 13563, 13579), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 340)), 0); (("module_binding", 7822), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -873), (Tag1 (("name"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "loc"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -872)], (0)), 100000000, 0, -871)], (0)), 100000000, 0, -870), (Tag1 (("expr"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "module_expr"), 0, (0)), 100000000, 0, -869), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "module_binding"), 0, (0)), 100000000, 0, -868), 0), 100000000, 0, -867), 0), 100000000, 0, -866), 0), 100000000, 0, -865), 0, (("src/ast_builder_generated.ml", 488, 13668, 13676), ("src/ast_builder_generated.ml", 488, 13668, 13690), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 344)), 0); (("module_declaration", 7823), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -864), (Tag1 (("name"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "loc"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -863)], (0)), 100000000, 0, -862)], (0)), 100000000, 0, -861), (Tag1 (("type_"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "module_type"), 0, (0)), 100000000, 0, -860), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "module_declaration"), 0, (0)), 100000000, 0, -859), 0), 100000000, 0, -858), 0), 100000000, 0, -857), 0), 100000000, 0, -856), 0, (("src/ast_builder_generated.ml", 491, 13798, 13806), ("src/ast_builder_generated.ml", 491, 13798, 13824), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 348)), 0); (("pmod_ident", 7824), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -855), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "longident_loc"), 0, (0)), 100000000, 0, -854), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "module_expr"), 0, (0)), 100000000, 0, -853), 0), 100000000, 0, -852), 0), 100000000, 0, -851), 0, (("src/ast_builder_generated.ml", 494, 13934, 13942), ("src/ast_builder_generated.ml", 494, 13934, 13952), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 352)), 0); (("pmod_structure", 7825), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -850), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "structure"), 0, (0)), 100000000, 0, -849), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "module_expr"), 0, (0)), 100000000, 0, -848), 0), 100000000, 0, -847), 0), 100000000, 0, -846), 0, (("src/ast_builder_generated.ml", 496, 14040, 14048), ("src/ast_builder_generated.ml", 496, 14040, 14062), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 355)), 0); (("pmod_functor", 7826), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -845), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "functor_parameter"), 0, (0)), 100000000, 0, -844), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "module_expr"), 0, (0)), 100000000, 0, -843), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "module_expr"), 0, (0)), 100000000, 0, -843), 0), 100000000, 0, -842), 0), 100000000, 0, -841), 0), 100000000, 0, -840), 0, (("src/ast_builder_generated.ml", 499, 14160, 14168), ("src/ast_builder_generated.ml", 499, 14160, 14180), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 358)), 0); (("pmod_apply", 7827), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -839), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "module_expr"), 0, (0)), 100000000, 0, -837), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "module_expr"), 0, (0)), 100000000, 0, -838), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "module_expr"), 0, (0)), 100000000, 0, -837), 0), 100000000, 0, -836), 0), 100000000, 0, -835), 0), 100000000, 0, -834), 0, (("src/ast_builder_generated.ml", 505, 14309, 14317), ("src/ast_builder_generated.ml", 505, 14309, 14327), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 362)), 0); (("pmod_constraint", 7828), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -833), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "module_expr"), 0, (0)), 100000000, 0, -831), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "module_type"), 0, (0)), 100000000, 0, -832), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "module_expr"), 0, (0)), 100000000, 0, -831), 0), 100000000, 0, -830), 0), 100000000, 0, -829), 0), 100000000, 0, -828), 0, (("src/ast_builder_generated.ml", 511, 14454, 14462), ("src/ast_builder_generated.ml", 511, 14454, 14477), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 366)), 0); (("pmod_unpack", 7829), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -827), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -826), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "module_expr"), 0, (0)), 100000000, 0, -825), 0), 100000000, 0, -824), 0), 100000000, 0, -823), 0, (("src/ast_builder_generated.ml", 517, 14609, 14617), ("src/ast_builder_generated.ml", 517, 14609, 14628), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 370)), 0); (("pmod_extension", 7830), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -822), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "extension"), 0, (0)), 100000000, 0, -821), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "module_expr"), 0, (0)), 100000000, 0, -820), 0), 100000000, 0, -819), 0), 100000000, 0, -818), 0, (("src/ast_builder_generated.ml", 519, 14717, 14725), ("src/ast_builder_generated.ml", 519, 14717, 14739), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 373)), 0); (("module_substitution", 7831), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -817), (Tag1 (("name"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -816)], (0)), 100000000, 0, -815), (Tag1 (("manifest"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "longident_loc"), 0, (0)), 100000000, 0, -814), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "module_substitution"), 0, (0)), 100000000, 0, -813), 0), 100000000, 0, -812), 0), 100000000, 0, -811), 0), 100000000, 0, -810), 0, (("src/ast_builder_generated.ml", 522, 14837, 14845), ("src/ast_builder_generated.ml", 522, 14837, 14864), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 376)), 0); (("pmty_ident", 7832), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -809), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "longident_loc"), 0, (0)), 100000000, 0, -808), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "module_type"), 0, (0)), 100000000, 0, -807), 0), 100000000, 0, -806), 0), 100000000, 0, -805), 0, (("src/ast_builder_generated.ml", 529, 15016, 15024), ("src/ast_builder_generated.ml", 529, 15016, 15034), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 380)), 0); (("pmty_signature", 7833), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -804), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "signature"), 0, (0)), 100000000, 0, -803), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "module_type"), 0, (0)), 100000000, 0, -802), 0), 100000000, 0, -801), 0), 100000000, 0, -800), 0, (("src/ast_builder_generated.ml", 531, 15122, 15130), ("src/ast_builder_generated.ml", 531, 15122, 15144), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 383)), 0); (("pmty_functor", 7834), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -799), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "functor_parameter"), 0, (0)), 100000000, 0, -798), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "module_type"), 0, (0)), 100000000, 0, -797), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "module_type"), 0, (0)), 100000000, 0, -797), 0), 100000000, 0, -796), 0), 100000000, 0, -795), 0), 100000000, 0, -794), 0, (("src/ast_builder_generated.ml", 534, 15242, 15250), ("src/ast_builder_generated.ml", 534, 15242, 15262), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 386)), 0); (("pmty_with", 7835), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -793), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "module_type"), 0, (0)), 100000000, 0, -790), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "with_constraint"), 0, (0)), 100000000, 0, -792)], (0)), 100000000, 0, -791), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "module_type"), 0, (0)), 100000000, 0, -790), 0), 100000000, 0, -789), 0), 100000000, 0, -788), 0), 100000000, 0, -787), 0, (("src/ast_builder_generated.ml", 540, 15391, 15399), ("src/ast_builder_generated.ml", 540, 15391, 15408), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 390)), 0); (("pmty_typeof", 7836), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -786), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "module_expr"), 0, (0)), 100000000, 0, -785), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "module_type"), 0, (0)), 100000000, 0, -784), 0), 100000000, 0, -783), 0), 100000000, 0, -782), 0, (("src/ast_builder_generated.ml", 546, 15534, 15542), ("src/ast_builder_generated.ml", 546, 15534, 15553), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 394)), 0); (("pmty_extension", 7837), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -781), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "extension"), 0, (0)), 100000000, 0, -780), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "module_type"), 0, (0)), 100000000, 0, -779), 0), 100000000, 0, -778), 0), 100000000, 0, -777), 0, (("src/ast_builder_generated.ml", 548, 15642, 15650), ("src/ast_builder_generated.ml", 548, 15642, 15664), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 397)), 0); (("pmty_alias", 7838), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -776), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "longident_loc"), 0, (0)), 100000000, 0, -775), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "module_type"), 0, (0)), 100000000, 0, -774), 0), 100000000, 0, -773), 0), 100000000, 0, -772), 0, (("src/ast_builder_generated.ml", 551, 15762, 15770), ("src/ast_builder_generated.ml", 551, 15762, 15780), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 400)), 0); (("module_type_declaration", 7839), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -771), (Tag1 (("name"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -770)], (0)), 100000000, 0, -769), (Tag1 (("type_"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "module_type"), 0, (0)), 100000000, 0, -768)], (0)), 100000000, 0, -767), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "module_type_declaration"), 0, (0)), 100000000, 0, -766), 0), 100000000, 0, -765), 0), 100000000, 0, -764), 0), 100000000, 0, -763), 0, (("src/ast_builder_generated.ml", 553, 15868, 15876), ("src/ast_builder_generated.ml", 553, 15868, 15899), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 403)), 0); (("otag", 7840), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -762), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "loc"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "label"), 0, (0)), 100000000, 0, -761)], (0)), 100000000, 0, -760), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -759), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "object_field"), 0, (0)), 100000000, 0, -758), 0), 100000000, 0, -757), 0), 100000000, 0, -756), 0), 100000000, 0, -755), 0, (("src/ast_builder_generated.ml", 560, 16045, 16053), ("src/ast_builder_generated.ml", 560, 16045, 16057), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 407)), 0); (("oinherit", 7841), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -754), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -753), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "object_field"), 0, (0)), 100000000, 0, -752), 0), 100000000, 0, -751), 0), 100000000, 0, -750), 0, (("src/ast_builder_generated.ml", 562, 16145, 16153), ("src/ast_builder_generated.ml", 562, 16145, 16161), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 411)), 0); (("open_infos", 7842), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -749), (Tag1 (("expr"), ((0), 100000000, 0, -747), (Tag1 (("override"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "override_flag"), 0, (0)), 100000000, 0, -748), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "open_infos"), [((0), 100000000, 0, -747)], (0)), 100000000, 0, -746), 0), 100000000, 0, -745), 0), 100000000, 0, -744), 0), 100000000, 0, -743), 0, (("src/ast_builder_generated.ml", 564, 16244, 16252), ("src/ast_builder_generated.ml", 564, 16244, 16262), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 414)), 0); (("ppat_any", 7843), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -742), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -741), 0), 100000000, 0, -740), 0, (("src/ast_builder_generated.ml", 571, 16422, 16430), ("src/ast_builder_generated.ml", 571, 16422, 16438), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 418)), 0); (("ppat_var", 7844), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -739), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -738)], (0)), 100000000, 0, -737), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -736), 0), 100000000, 0, -735), 0), 100000000, 0, -734), 0, (("src/ast_builder_generated.ml", 578, 16575, 16583), ("src/ast_builder_generated.ml", 578, 16575, 16591), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 420)), 0); (("ppat_alias", 7845), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -733), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -730), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -732)], (0)), 100000000, 0, -731), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -730), 0), 100000000, 0, -729), 0), 100000000, 0, -728), 0), 100000000, 0, -727), 0, (("src/ast_builder_generated.ml", 585, 16736, 16744), ("src/ast_builder_generated.ml", 585, 16736, 16754), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 423)), 0); (("ppat_constant", 7846), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -726), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "constant"), 0, (0)), 100000000, 0, -725), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -724), 0), 100000000, 0, -723), 0), 100000000, 0, -722), 0, (("src/ast_builder_generated.ml", 592, 16910, 16918), ("src/ast_builder_generated.ml", 592, 16910, 16931), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 427)), 0); (("ppat_interval", 7847), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -721), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "constant"), 0, (0)), 100000000, 0, -720), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "constant"), 0, (0)), 100000000, 0, -719), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -718), 0), 100000000, 0, -717), 0), 100000000, 0, -716), 0), 100000000, 0, -715), 0, (("src/ast_builder_generated.ml", 599, 17081, 17089), ("src/ast_builder_generated.ml", 599, 17081, 17102), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 430)), 0); (("ppat_tuple", 7848), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -714), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -713)], (0)), 100000000, 0, -712), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -711), 0), 100000000, 0, -710), 0), 100000000, 0, -709), 0, (("src/ast_builder_generated.ml", 606, 17261, 17269), ("src/ast_builder_generated.ml", 606, 17261, 17279), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 434)), 0); (("ppat_variant", 7849), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -708), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "label"), 0, (0)), 100000000, 0, -707), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -706)], (0)), 100000000, 0, -705), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -704), 0), 100000000, 0, -703), 0), 100000000, 0, -702), 0), 100000000, 0, -701), 0, (("src/ast_builder_generated.ml", 620, 17608, 17616), ("src/ast_builder_generated.ml", 620, 17608, 17628), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 441)), 0); (("ppat_record", 7850), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -700), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "longident_loc"), 0, (0)), 100000000, 0, -698); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -699)]), 100000000, 0, -697)], (0)), 100000000, 0, -696), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "closed_flag"), 0, (0)), 100000000, 0, -695), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -694), 0), 100000000, 0, -693), 0), 100000000, 0, -692), 0), 100000000, 0, -691), 0, (("src/ast_builder_generated.ml", 627, 17786, 17794), ("src/ast_builder_generated.ml", 627, 17786, 17805), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 445)), 0); (("ppat_array", 7851), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -690), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -689)], (0)), 100000000, 0, -688), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -687), 0), 100000000, 0, -686), 0), 100000000, 0, -685), 0, (("src/ast_builder_generated.ml", 634, 17962, 17970), ("src/ast_builder_generated.ml", 634, 17962, 17980), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 449)), 0); (("ppat_or", 7852), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -684), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -682), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -683), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -682), 0), 100000000, 0, -681), 0), 100000000, 0, -680), 0), 100000000, 0, -679), 0, (("src/ast_builder_generated.ml", 641, 18127, 18135), ("src/ast_builder_generated.ml", 641, 18127, 18142), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 452)), 0); (("ppat_constraint", 7853), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -678), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -676), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -677), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -676), 0), 100000000, 0, -675), 0), 100000000, 0, -674), 0), 100000000, 0, -673), 0, (("src/ast_builder_generated.ml", 648, 18295, 18303), ("src/ast_builder_generated.ml", 648, 18295, 18318), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 456)), 0); (("ppat_type", 7854), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -672), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "longident_loc"), 0, (0)), 100000000, 0, -671), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -670), 0), 100000000, 0, -669), 0), 100000000, 0, -668), 0, (("src/ast_builder_generated.ml", 655, 18479, 18487), ("src/ast_builder_generated.ml", 655, 18479, 18496), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 460)), 0); (("ppat_lazy", 7855), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -667), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -666), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -666), 0), 100000000, 0, -665), 0), 100000000, 0, -664), 0, (("src/ast_builder_generated.ml", 662, 18642, 18650), ("src/ast_builder_generated.ml", 662, 18642, 18659), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 463)), 0); (("ppat_unpack", 7856), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -663), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "loc"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -662)], (0)), 100000000, 0, -661)], (0)), 100000000, 0, -660), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -659), 0), 100000000, 0, -658), 0), 100000000, 0, -657), 0, (("src/ast_builder_generated.ml", 669, 18805, 18813), ("src/ast_builder_generated.ml", 669, 18805, 18824), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 466)), 0); (("ppat_exception", 7857), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -656), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -655), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -655), 0), 100000000, 0, -654), 0), 100000000, 0, -653), 0, (("src/ast_builder_generated.ml", 676, 18972, 18980), ("src/ast_builder_generated.ml", 676, 18972, 18994), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 469)), 0); (("ppat_extension", 7858), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -652), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "extension"), 0, (0)), 100000000, 0, -651), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -650), 0), 100000000, 0, -649), 0), 100000000, 0, -648), 0, (("src/ast_builder_generated.ml", 683, 19145, 19153), ("src/ast_builder_generated.ml", 683, 19145, 19167), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 472)), 0); (("ppat_open", 7859), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -647), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "longident_loc"), 0, (0)), 100000000, 0, -646), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -645), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -645), 0), 100000000, 0, -644), 0), 100000000, 0, -643), 0), 100000000, 0, -642), 0, (("src/ast_builder_generated.ml", 690, 19318, 19326), ("src/ast_builder_generated.ml", 690, 19318, 19335), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 475)), 0); (("position", 7860), ((Tag1 (("fname"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -641), (Tag1 (("lnum"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -640), (Tag1 (("bol"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -639), (Tag1 (("cnum"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -638), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "position"), 0, (0)), 100000000, 0, -637), 0), 100000000, 0, -636), 0), 100000000, 0, -635), 0), 100000000, 0, -634), 0), 100000000, 0, -633), 0, (("src/ast_builder_generated.ml", 697, 19490, 19498), ("src/ast_builder_generated.ml", 697, 19490, 19506), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 479)), 0); (("rtag", 7861), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -632), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "loc"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "label"), 0, (0)), 100000000, 0, -631)], (0)), 100000000, 0, -630), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -629), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -628)], (0)), 100000000, 0, -627), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "row_field"), 0, (0)), 100000000, 0, -626), 0), 100000000, 0, -625), 0), 100000000, 0, -624), 0), 100000000, 0, -623), 0), 100000000, 0, -622), 0, (("src/ast_builder_generated.ml", 699, 19614, 19622), ("src/ast_builder_generated.ml", 699, 19614, 19626), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 484)), 0); (("rinherit", 7862), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -621), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -620), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "row_field"), 0, (0)), 100000000, 0, -619), 0), 100000000, 0, -618), 0), 100000000, 0, -617), 0, (("src/ast_builder_generated.ml", 701, 19721, 19729), ("src/ast_builder_generated.ml", 701, 19721, 19737), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 489)), 0); (("psig_value", 7863), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -616), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "value_description"), 0, (0)), 100000000, 0, -615), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "signature_item"), 0, (0)), 100000000, 0, -614), 0), 100000000, 0, -613), 0), 100000000, 0, -612), 0, (("src/ast_builder_generated.ml", 703, 19820, 19828), ("src/ast_builder_generated.ml", 703, 19820, 19838), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 492)), 0); (("psig_type", 7864), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -611), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "rec_flag"), 0, (0)), 100000000, 0, -610), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "type_declaration"), 0, (0)), 100000000, 0, -609)], (0)), 100000000, 0, -608), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "signature_item"), 0, (0)), 100000000, 0, -607), 0), 100000000, 0, -606), 0), 100000000, 0, -605), 0), 100000000, 0, -604), 0, (("src/ast_builder_generated.ml", 704, 19898, 19906), ("src/ast_builder_generated.ml", 704, 19898, 19915), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 495)), 0); (("psig_typesubst", 7865), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -603), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "type_declaration"), 0, (0)), 100000000, 0, -602)], (0)), 100000000, 0, -601), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "signature_item"), 0, (0)), 100000000, 0, -600), 0), 100000000, 0, -599), 0), 100000000, 0, -598), 0, (("src/ast_builder_generated.ml", 706, 19989, 19997), ("src/ast_builder_generated.ml", 706, 19989, 20011), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 499)), 0); (("psig_typext", 7866), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -597), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "type_extension"), 0, (0)), 100000000, 0, -596), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "signature_item"), 0, (0)), 100000000, 0, -595), 0), 100000000, 0, -594), 0), 100000000, 0, -593), 0, (("src/ast_builder_generated.ml", 708, 20081, 20089), ("src/ast_builder_generated.ml", 708, 20081, 20100), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 502)), 0); (("psig_exception", 7867), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -592), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "type_exception"), 0, (0)), 100000000, 0, -591), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "signature_item"), 0, (0)), 100000000, 0, -590), 0), 100000000, 0, -589), 0), 100000000, 0, -588), 0, (("src/ast_builder_generated.ml", 710, 20167, 20175), ("src/ast_builder_generated.ml", 710, 20167, 20189), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 505)), 0); (("psig_module", 7868), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -587), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "module_declaration"), 0, (0)), 100000000, 0, -586), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "signature_item"), 0, (0)), 100000000, 0, -585), 0), 100000000, 0, -584), 0), 100000000, 0, -583), 0, (("src/ast_builder_generated.ml", 712, 20259, 20267), ("src/ast_builder_generated.ml", 712, 20259, 20278), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 508)), 0); (("psig_modsubst", 7869), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -582), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "module_substitution"), 0, (0)), 100000000, 0, -581), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "signature_item"), 0, (0)), 100000000, 0, -580), 0), 100000000, 0, -579), 0), 100000000, 0, -578), 0, (("src/ast_builder_generated.ml", 714, 20345, 20353), ("src/ast_builder_generated.ml", 714, 20345, 20366), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 511)), 0); (("psig_recmodule", 7870), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -577), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "module_declaration"), 0, (0)), 100000000, 0, -576)], (0)), 100000000, 0, -575), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "signature_item"), 0, (0)), 100000000, 0, -574), 0), 100000000, 0, -573), 0), 100000000, 0, -572), 0, (("src/ast_builder_generated.ml", 716, 20435, 20443), ("src/ast_builder_generated.ml", 716, 20435, 20457), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 514)), 0); (("psig_modtype", 7871), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -571), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "module_type_declaration"), 0, (0)), 100000000, 0, -570), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "signature_item"), 0, (0)), 100000000, 0, -569), 0), 100000000, 0, -568), 0), 100000000, 0, -567), 0, (("src/ast_builder_generated.ml", 718, 20527, 20535), ("src/ast_builder_generated.ml", 718, 20527, 20547), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 517)), 0); (("psig_modtypesubst", 7872), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -566), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "module_type_declaration"), 0, (0)), 100000000, 0, -565), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "signature_item"), 0, (0)), 100000000, 0, -564), 0), 100000000, 0, -563), 0), 100000000, 0, -562), 0, (("src/ast_builder_generated.ml", 720, 20615, 20623), ("src/ast_builder_generated.ml", 720, 20615, 20640), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 520)), 0); (("psig_open", 7873), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -561), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "open_description"), 0, (0)), 100000000, 0, -560), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "signature_item"), 0, (0)), 100000000, 0, -559), 0), 100000000, 0, -558), 0), 100000000, 0, -557), 0, (("src/ast_builder_generated.ml", 722, 20713, 20721), ("src/ast_builder_generated.ml", 722, 20713, 20730), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 523)), 0); (("psig_include", 7874), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -556), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "include_description"), 0, (0)), 100000000, 0, -555), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "signature_item"), 0, (0)), 100000000, 0, -554), 0), 100000000, 0, -553), 0), 100000000, 0, -552), 0, (("src/ast_builder_generated.ml", 723, 20789, 20797), ("src/ast_builder_generated.ml", 723, 20789, 20809), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 526)), 0); (("psig_class", 7875), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -551), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_description"), 0, (0)), 100000000, 0, -550)], (0)), 100000000, 0, -549), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "signature_item"), 0, (0)), 100000000, 0, -548), 0), 100000000, 0, -547), 0), 100000000, 0, -546), 0, (("src/ast_builder_generated.ml", 725, 20877, 20885), ("src/ast_builder_generated.ml", 725, 20877, 20895), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 529)), 0); (("psig_class_type", 7876), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -545), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_type_declaration"), 0, (0)), 100000000, 0, -544)], (0)), 100000000, 0, -543), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "signature_item"), 0, (0)), 100000000, 0, -542), 0), 100000000, 0, -541), 0), 100000000, 0, -540), 0, (("src/ast_builder_generated.ml", 726, 20955, 20963), ("src/ast_builder_generated.ml", 726, 20955, 20978), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 532)), 0); (("psig_attribute", 7877), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -539), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "attribute"), 0, (0)), 100000000, 0, -538), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "signature_item"), 0, (0)), 100000000, 0, -537), 0), 100000000, 0, -536), 0), 100000000, 0, -535), 0, (("src/ast_builder_generated.ml", 728, 21049, 21057), ("src/ast_builder_generated.ml", 728, 21049, 21071), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 535)), 0); (("psig_extension", 7878), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -534), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "extension"), 0, (0)), 100000000, 0, -533), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "attributes"), 0, (0)), 100000000, 0, -532), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "signature_item"), 0, (0)), 100000000, 0, -531), 0), 100000000, 0, -530), 0), 100000000, 0, -529), 0), 100000000, 0, -528), 0, (("src/ast_builder_generated.ml", 730, 21141, 21149), ("src/ast_builder_generated.ml", 730, 21141, 21163), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 538)), 0); (("pstr_eval", 7879), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -527), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -526), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "attributes"), 0, (0)), 100000000, 0, -525), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "structure_item"), 0, (0)), 100000000, 0, -524), 0), 100000000, 0, -523), 0), 100000000, 0, -522), 0), 100000000, 0, -521), 0, (("src/ast_builder_generated.ml", 732, 21242, 21250), ("src/ast_builder_generated.ml", 732, 21242, 21259), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 542)), 0); (("pstr_value", 7880), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -520), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "rec_flag"), 0, (0)), 100000000, 0, -519), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "value_binding"), 0, (0)), 100000000, 0, -518)], (0)), 100000000, 0, -517), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "structure_item"), 0, (0)), 100000000, 0, -516), 0), 100000000, 0, -515), 0), 100000000, 0, -514), 0), 100000000, 0, -513), 0, (("src/ast_builder_generated.ml", 734, 21333, 21341), ("src/ast_builder_generated.ml", 734, 21333, 21351), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 546)), 0); (("pstr_primitive", 7881), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -512), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "value_description"), 0, (0)), 100000000, 0, -511), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "structure_item"), 0, (0)), 100000000, 0, -510), 0), 100000000, 0, -509), 0), 100000000, 0, -508), 0, (("src/ast_builder_generated.ml", 736, 21426, 21434), ("src/ast_builder_generated.ml", 736, 21426, 21448), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 550)), 0); (("pstr_type", 7882), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -507), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "rec_flag"), 0, (0)), 100000000, 0, -506), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "type_declaration"), 0, (0)), 100000000, 0, -505)], (0)), 100000000, 0, -504), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "structure_item"), 0, (0)), 100000000, 0, -503), 0), 100000000, 0, -502), 0), 100000000, 0, -501), 0), 100000000, 0, -500), 0, (("src/ast_builder_generated.ml", 738, 21518, 21526), ("src/ast_builder_generated.ml", 738, 21518, 21535), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 553)), 0); (("pstr_typext", 7883), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -499), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "type_extension"), 0, (0)), 100000000, 0, -498), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "structure_item"), 0, (0)), 100000000, 0, -497), 0), 100000000, 0, -496), 0), 100000000, 0, -495), 0, (("src/ast_builder_generated.ml", 740, 21609, 21617), ("src/ast_builder_generated.ml", 740, 21609, 21628), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 557)), 0); (("pstr_exception", 7884), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -494), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "type_exception"), 0, (0)), 100000000, 0, -493), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "structure_item"), 0, (0)), 100000000, 0, -492), 0), 100000000, 0, -491), 0), 100000000, 0, -490), 0, (("src/ast_builder_generated.ml", 742, 21695, 21703), ("src/ast_builder_generated.ml", 742, 21695, 21717), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 560)), 0); (("pstr_module", 7885), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -489), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "module_binding"), 0, (0)), 100000000, 0, -488), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "structure_item"), 0, (0)), 100000000, 0, -487), 0), 100000000, 0, -486), 0), 100000000, 0, -485), 0, (("src/ast_builder_generated.ml", 744, 21787, 21795), ("src/ast_builder_generated.ml", 744, 21787, 21806), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 563)), 0); (("pstr_recmodule", 7886), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -484), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "module_binding"), 0, (0)), 100000000, 0, -483)], (0)), 100000000, 0, -482), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "structure_item"), 0, (0)), 100000000, 0, -481), 0), 100000000, 0, -480), 0), 100000000, 0, -479), 0, (("src/ast_builder_generated.ml", 746, 21873, 21881), ("src/ast_builder_generated.ml", 746, 21873, 21895), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 566)), 0); (("pstr_modtype", 7887), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -478), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "module_type_declaration"), 0, (0)), 100000000, 0, -477), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "structure_item"), 0, (0)), 100000000, 0, -476), 0), 100000000, 0, -475), 0), 100000000, 0, -474), 0, (("src/ast_builder_generated.ml", 748, 21965, 21973), ("src/ast_builder_generated.ml", 748, 21965, 21985), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 569)), 0); (("pstr_open", 7888), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -473), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "open_declaration"), 0, (0)), 100000000, 0, -472), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "structure_item"), 0, (0)), 100000000, 0, -471), 0), 100000000, 0, -470), 0), 100000000, 0, -469), 0, (("src/ast_builder_generated.ml", 750, 22053, 22061), ("src/ast_builder_generated.ml", 750, 22053, 22070), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 572)), 0); (("pstr_class", 7889), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -468), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_declaration"), 0, (0)), 100000000, 0, -467)], (0)), 100000000, 0, -466), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "structure_item"), 0, (0)), 100000000, 0, -465), 0), 100000000, 0, -464), 0), 100000000, 0, -463), 0, (("src/ast_builder_generated.ml", 751, 22129, 22137), ("src/ast_builder_generated.ml", 751, 22129, 22147), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 575)), 0); (("pstr_class_type", 7890), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -462), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "class_type_declaration"), 0, (0)), 100000000, 0, -461)], (0)), 100000000, 0, -460), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "structure_item"), 0, (0)), 100000000, 0, -459), 0), 100000000, 0, -458), 0), 100000000, 0, -457), 0, (("src/ast_builder_generated.ml", 752, 22207, 22215), ("src/ast_builder_generated.ml", 752, 22207, 22230), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 578)), 0); (("pstr_include", 7891), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -456), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "include_declaration"), 0, (0)), 100000000, 0, -455), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "structure_item"), 0, (0)), 100000000, 0, -454), 0), 100000000, 0, -453), 0), 100000000, 0, -452), 0, (("src/ast_builder_generated.ml", 754, 22301, 22309), ("src/ast_builder_generated.ml", 754, 22301, 22321), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 581)), 0); (("pstr_attribute", 7892), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -451), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "attribute"), 0, (0)), 100000000, 0, -450), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "structure_item"), 0, (0)), 100000000, 0, -449), 0), 100000000, 0, -448), 0), 100000000, 0, -447), 0, (("src/ast_builder_generated.ml", 756, 22389, 22397), ("src/ast_builder_generated.ml", 756, 22389, 22411), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 584)), 0); (("pstr_extension", 7893), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -446), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "extension"), 0, (0)), 100000000, 0, -445), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "attributes"), 0, (0)), 100000000, 0, -444), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "structure_item"), 0, (0)), 100000000, 0, -443), 0), 100000000, 0, -442), 0), 100000000, 0, -441), 0), 100000000, 0, -440), 0, (("src/ast_builder_generated.ml", 758, 22481, 22489), ("src/ast_builder_generated.ml", 758, 22481, 22503), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 587)), 0); (("toplevel_directive", 7894), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -439), (Tag1 (("name"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -438)], (0)), 100000000, 0, -437), (Tag1 (("arg"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "directive_argument"), 0, (0)), 100000000, 0, -436)], (0)), 100000000, 0, -435), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "toplevel_directive"), 0, (0)), 100000000, 0, -434), 0), 100000000, 0, -433), 0), 100000000, 0, -432), 0), 100000000, 0, -431), 0, (("src/ast_builder_generated.ml", 760, 22582, 22590), ("src/ast_builder_generated.ml", 760, 22582, 22608), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 591)), 0); (("type_declaration", 7895), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -430), (Tag1 (("name"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -429)], (0)), 100000000, 0, -428), (Tag1 (("params"), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -424); (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "variance"), 0, (0)), 100000000, 0, -426); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "injectivity"), 0, (0)), 100000000, 0, -427)]), 100000000, 0, -425)]), 100000000, 0, -423)], (0)), 100000000, 0, -422), (Tag1 (("cstrs"), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -419); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -420); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -421)]), 100000000, 0, -418)], (0)), 100000000, 0, -417), (Tag1 (("kind"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "type_kind"), 0, (0)), 100000000, 0, -416), (Tag1 (("private_"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "private_flag"), 0, (0)), 100000000, 0, -415), (Tag1 (("manifest"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -414)], (0)), 100000000, 0, -413), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "type_declaration"), 0, (0)), 100000000, 0, -412), 0), 100000000, 0, -411), 0), 100000000, 0, -410), 0), 100000000, 0, -409), 0), 100000000, 0, -408), 0), 100000000, 0, -407), 0), 100000000, 0, -406), 0), 100000000, 0, -405), 0, (("src/ast_builder_generated.ml", 762, 22689, 22697), ("src/ast_builder_generated.ml", 762, 22689, 22713), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 595)), 0); (("type_exception", 7896), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -404), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "extension_constructor"), 0, (0)), 100000000, 0, -403), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "type_exception"), 0, (0)), 100000000, 0, -402), 0), 100000000, 0, -401), 0), 100000000, 0, -400), 0, (("src/ast_builder_generated.ml", 774, 23035, 23043), ("src/ast_builder_generated.ml", 774, 23035, 23057), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 603)), 0); (("type_extension", 7897), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -399), (Tag1 (("path"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "longident_loc"), 0, (0)), 100000000, 0, -398), (Tag1 (("params"), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -394); (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "variance"), 0, (0)), 100000000, 0, -396); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "injectivity"), 0, (0)), 100000000, 0, -397)]), 100000000, 0, -395)]), 100000000, 0, -393)], (0)), 100000000, 0, -392), (Tag1 (("constructors"), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "extension_constructor"), 0, (0)), 100000000, 0, -391)], (0)), 100000000, 0, -390), (Tag1 (("private_"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "private_flag"), 0, (0)), 100000000, 0, -389), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "type_extension"), 0, (0)), 100000000, 0, -388), 0), 100000000, 0, -387), 0), 100000000, 0, -386), 0), 100000000, 0, -385), 0), 100000000, 0, -384), 0), 100000000, 0, -383), 0, (("src/ast_builder_generated.ml", 780, 23193, 23201), ("src/ast_builder_generated.ml", 780, 23193, 23215), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 606)), 0); (("value_binding", 7898), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -382), (Tag1 (("pat"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -381), (Tag1 (("expr"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -380), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "value_binding"), 0, (0)), 100000000, 0, -379), 0), 100000000, 0, -378), 0), 100000000, 0, -377), 0), 100000000, 0, -376), 0, (("src/ast_builder_generated.ml", 789, 23478, 23486), ("src/ast_builder_generated.ml", 789, 23478, 23499), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 612)), 0); (("value_description", 7899), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -375), (Tag1 (("name"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -374)], (0)), 100000000, 0, -373), (Tag1 (("type_"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -372), (Tag1 (("prim"), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -371)], (0)), 100000000, 0, -370), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "value_description"), 0, (0)), 100000000, 0, -369), 0), 100000000, 0, -368), 0), 100000000, 0, -367), 0), 100000000, 0, -366), 0), 100000000, 0, -365), 0, (("src/ast_builder_generated.ml", 791, 23598, 23606), ("src/ast_builder_generated.ml", 791, 23598, 23623), 0), 0, Tag1 ("Ppxlib__Ast_builder_generated", 616)), 0); Tag3 (("Latest", 7900), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__Ast_builder")), "Default"), "Latest")), 0, (("src/ast_builder.mli", 23, 673, 675), ("src/ast_builder.mli", 46, 1552, 1557), 0), Tag1 ("Ppxlib__Ast_builder", 4)), 0, 0); (("ppat_construct", 7901), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -364), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "loc"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "longident"), 0, (0)), 100000000, 0, -363)], (0)), 100000000, 0, -362), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -361)], (0)), 100000000, 0, -360), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -359), 0), 100000000, 0, -358), 0), 100000000, 0, -357), 0), 100000000, 0, -356), 0, (("src/ast_builder.mli", 48, 1559, 1561), ("src/ast_builder.mli", 49, 1582, 1644), 0), 0, Tag1 ("Ppxlib__Ast_builder", 5)), 0); (("constructor_declaration", 7902), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "location"), 0, (0)), 100000000, 0, -355), (Tag1 (("name"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "loc"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "label"), 0, (0)), 100000000, 0, -354)], (0)), 100000000, 0, -353), (Tag1 (("args"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "constructor_arguments"), 0, (0)), 100000000, 0, -352), (Tag1 (("res"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -351)], (0)), 100000000, 0, -350), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "constructor_declaration"), 0, (0)), 100000000, 0, -349), 0), 100000000, 0, -348), 0), 100000000, 0, -347), 0), 100000000, 0, -346), 0), 100000000, 0, -345), 0, (("src/ast_builder.mli", 51, 1646, 1648), ("src/ast_builder.mli", 56, 1782, 1809), 0), 0, Tag1 ("Ppxlib__Ast_builder", 6)), 0); (("eint", 7903), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Ast_builder_intf"), "with_location"), [(Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -344), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -343), 0), 100000000, 0, -342)], (0)), 100000000, 0, -341), 0, (("src/ast_builder.mli", 59, 1821, 1825), ("src/ast_builder.mli", 60, 1861, 1925), 0), 0, Tag1 ("Ppxlib__Ast_builder_intf", 3)), 0); (("echar", 7904), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Ast_builder_intf"), "with_location"), [(Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -340), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -339), 0), 100000000, 0, -338)], (0)), 100000000, 0, -337), 0, (("src/ast_builder.mli", 59, 1821, 1825), ("src/ast_builder.mli", 60, 1861, 1925), 0), 0, Tag1 ("Ppxlib__Ast_builder_intf", 4)), 0); (("estring", 7905), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Ast_builder_intf"), "with_location"), [(Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -336), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -335), 0), 100000000, 0, -334)], (0)), 100000000, 0, -333), 0, (("src/ast_builder.mli", 59, 1821, 1825), ("src/ast_builder.mli", 60, 1861, 1925), 0), 0, Tag1 ("Ppxlib__Ast_builder_intf", 5)), 0); (("efloat", 7906), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Ast_builder_intf"), "with_location"), [(Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -332), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -331), 0), 100000000, 0, -330)], (0)), 100000000, 0, -329), 0, (("src/ast_builder.mli", 59, 1821, 1825), ("src/ast_builder.mli", 60, 1861, 1925), 0), 0, Tag1 ("Ppxlib__Ast_builder_intf", 6)), 0); (("eint32", 7907), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Ast_builder_intf"), "with_location"), [(Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -328), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -327), 0), 100000000, 0, -326)], (0)), 100000000, 0, -325), 0, (("src/ast_builder.mli", 59, 1821, 1825), ("src/ast_builder.mli", 60, 1861, 1925), 0), 0, Tag1 ("Ppxlib__Ast_builder_intf", 7)), 0); (("eint64", 7908), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Ast_builder_intf"), "with_location"), [(Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -324), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -323), 0), 100000000, 0, -322)], (0)), 100000000, 0, -321), 0, (("src/ast_builder.mli", 59, 1821, 1825), ("src/ast_builder.mli", 60, 1861, 1925), 0), 0, Tag1 ("Ppxlib__Ast_builder_intf", 8)), 0); (("enativeint", 7909), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Ast_builder_intf"), "with_location"), [(Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -320), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -319), 0), 100000000, 0, -318)], (0)), 100000000, 0, -317), 0, (("src/ast_builder.mli", 59, 1821, 1825), ("src/ast_builder.mli", 60, 1861, 1925), 0), 0, Tag1 ("Ppxlib__Ast_builder_intf", 9)), 0); (("ebool", 7910), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Ast_builder_intf"), "with_location"), [(Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -316), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -315), 0), 100000000, 0, -314)], (0)), 100000000, 0, -313), 0, (("src/ast_builder.mli", 59, 1821, 1825), ("src/ast_builder.mli", 60, 1861, 1925), 0), 0, Tag1 ("Ppxlib__Ast_builder_intf", 10)), 0); (("pint", 7911), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Ast_builder_intf"), "with_location"), [(Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -312), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -311), 0), 100000000, 0, -310)], (0)), 100000000, 0, -309), 0, (("src/ast_builder.mli", 59, 1821, 1825), ("src/ast_builder.mli", 60, 1861, 1925), 0), 0, Tag1 ("Ppxlib__Ast_builder_intf", 11)), 0); (("pchar", 7912), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Ast_builder_intf"), "with_location"), [(Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -308), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -307), 0), 100000000, 0, -306)], (0)), 100000000, 0, -305), 0, (("src/ast_builder.mli", 59, 1821, 1825), ("src/ast_builder.mli", 60, 1861, 1925), 0), 0, Tag1 ("Ppxlib__Ast_builder_intf", 12)), 0); (("pstring", 7913), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Ast_builder_intf"), "with_location"), [(Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -304), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -303), 0), 100000000, 0, -302)], (0)), 100000000, 0, -301), 0, (("src/ast_builder.mli", 59, 1821, 1825), ("src/ast_builder.mli", 60, 1861, 1925), 0), 0, Tag1 ("Ppxlib__Ast_builder_intf", 13)), 0); (("pfloat", 7914), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Ast_builder_intf"), "with_location"), [(Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -300), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -299), 0), 100000000, 0, -298)], (0)), 100000000, 0, -297), 0, (("src/ast_builder.mli", 59, 1821, 1825), ("src/ast_builder.mli", 60, 1861, 1925), 0), 0, Tag1 ("Ppxlib__Ast_builder_intf", 14)), 0); (("pint32", 7915), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Ast_builder_intf"), "with_location"), [(Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -296), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -295), 0), 100000000, 0, -294)], (0)), 100000000, 0, -293), 0, (("src/ast_builder.mli", 59, 1821, 1825), ("src/ast_builder.mli", 60, 1861, 1925), 0), 0, Tag1 ("Ppxlib__Ast_builder_intf", 15)), 0); (("pint64", 7916), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Ast_builder_intf"), "with_location"), [(Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -292), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -291), 0), 100000000, 0, -290)], (0)), 100000000, 0, -289), 0, (("src/ast_builder.mli", 59, 1821, 1825), ("src/ast_builder.mli", 60, 1861, 1925), 0), 0, Tag1 ("Ppxlib__Ast_builder_intf", 16)), 0); (("pnativeint", 7917), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Ast_builder_intf"), "with_location"), [(Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -288), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -287), 0), 100000000, 0, -286)], (0)), 100000000, 0, -285), 0, (("src/ast_builder.mli", 59, 1821, 1825), ("src/ast_builder.mli", 60, 1861, 1925), 0), 0, Tag1 ("Ppxlib__Ast_builder_intf", 17)), 0); (("pbool", 7918), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Ast_builder_intf"), "with_location"), [(Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -284), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -283), 0), 100000000, 0, -282)], (0)), 100000000, 0, -281), 0, (("src/ast_builder.mli", 59, 1821, 1825), ("src/ast_builder.mli", 60, 1861, 1925), 0), 0, Tag1 ("Ppxlib__Ast_builder_intf", 18)), 0); (("eunit", 7919), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Ast_builder_intf"), "with_location"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -280)], (0)), 100000000, 0, -279), 0, (("src/ast_builder.mli", 59, 1821, 1825), ("src/ast_builder.mli", 60, 1861, 1925), 0), 0, Tag1 ("Ppxlib__Ast_builder_intf", 19)), 0); (("punit", 7920), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Ast_builder_intf"), "with_location"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -278)], (0)), 100000000, 0, -277), 0, (("src/ast_builder.mli", 59, 1821, 1825), ("src/ast_builder.mli", 60, 1861, 1925), 0), 0, Tag1 ("Ppxlib__Ast_builder_intf", 20)), 0); (("evar", 7921), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Ast_builder_intf"), "with_location"), [(Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -276), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -275), 0), 100000000, 0, -274)], (0)), 100000000, 0, -273), 0, (("src/ast_builder.mli", 59, 1821, 1825), ("src/ast_builder.mli", 60, 1861, 1925), 0), 0, Tag1 ("Ppxlib__Ast_builder_intf", 21)), 0); (("pvar", 7922), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Ast_builder_intf"), "with_location"), [(Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -272), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -271), 0), 100000000, 0, -270)], (0)), 100000000, 0, -269), 0, (("src/ast_builder.mli", 59, 1821, 1825), ("src/ast_builder.mli", 60, 1861, 1925), 0), 0, Tag1 ("Ppxlib__Ast_builder_intf", 22)), 0); (("eapply", 7923), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Ast_builder_intf"), "with_location"), [(Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -268), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -267)], (0)), 100000000, 0, -266), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -265), 0), 100000000, 0, -264), 0), 100000000, 0, -263)], (0)), 100000000, 0, -262), 0, (("src/ast_builder.mli", 59, 1821, 1825), ("src/ast_builder.mli", 60, 1861, 1925), 0), 0, Tag1 ("Ppxlib__Ast_builder_intf", 23)), 0); (("eabstract", 7924), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Ast_builder_intf"), "with_location"), [(Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -261)], (0)), 100000000, 0, -260), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -259), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -258), 0), 100000000, 0, -257), 0), 100000000, 0, -256)], (0)), 100000000, 0, -255), 0, (("src/ast_builder.mli", 59, 1821, 1825), ("src/ast_builder.mli", 60, 1861, 1925), 0), 0, Tag1 ("Ppxlib__Ast_builder_intf", 24)), 0); (("esequence", 7925), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Ast_builder_intf"), "with_location"), [(Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -254)], (0)), 100000000, 0, -253), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -252), 0), 100000000, 0, -251)], (0)), 100000000, 0, -250), 0, (("src/ast_builder.mli", 59, 1821, 1825), ("src/ast_builder.mli", 60, 1861, 1925), 0), 0, Tag1 ("Ppxlib__Ast_builder_intf", 25)), 0); (("ppat_tuple_opt", 7926), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Ast_builder_intf"), "with_location"), [(Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -249)], (0)), 100000000, 0, -248), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -247)], (0)), 100000000, 0, -246), 0), 100000000, 0, -245)], (0)), 100000000, 0, -244), 0, (("src/ast_builder.mli", 59, 1821, 1825), ("src/ast_builder.mli", 60, 1861, 1925), 0), 0, Tag1 ("Ppxlib__Ast_builder_intf", 26)), 0); (("pexp_tuple_opt", 7927), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Ast_builder_intf"), "with_location"), [(Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -243)], (0)), 100000000, 0, -242), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -241)], (0)), 100000000, 0, -240), 0), 100000000, 0, -239)], (0)), 100000000, 0, -238), 0, (("src/ast_builder.mli", 59, 1821, 1825), ("src/ast_builder.mli", 60, 1861, 1925), 0), 0, Tag1 ("Ppxlib__Ast_builder_intf", 27)), 0); (("pconstruct", 7928), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "constructor_declaration"), 0, (0)), 100000000, 0, -237), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -236)], (0)), 100000000, 0, -235), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -234), 0), 100000000, 0, -233), 0), 100000000, 0, -232), 0, (("src/ast_builder.mli", 59, 1821, 1825), ("src/ast_builder.mli", 60, 1861, 1925), 0), 0, Tag1 ("Ppxlib__Ast_builder_intf", 28)), 0); (("econstruct", 7929), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "constructor_declaration"), 0, (0)), 100000000, 0, -231), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -230)], (0)), 100000000, 0, -229), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -228), 0), 100000000, 0, -227), 0), 100000000, 0, -226), 0, (("src/ast_builder.mli", 59, 1821, 1825), ("src/ast_builder.mli", 60, 1861, 1925), 0), 0, Tag1 ("Ppxlib__Ast_builder_intf", 29)), 0); (("elist", 7930), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Ast_builder_intf"), "with_location"), [(Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -225)], (0)), 100000000, 0, -224), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -223), 0), 100000000, 0, -222)], (0)), 100000000, 0, -221), 0, (("src/ast_builder.mli", 59, 1821, 1825), ("src/ast_builder.mli", 60, 1861, 1925), 0), 0, Tag1 ("Ppxlib__Ast_builder_intf", 30)), 0); (("plist", 7931), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Ast_builder_intf"), "with_location"), [(Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -220)], (0)), 100000000, 0, -219), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -218), 0), 100000000, 0, -217)], (0)), 100000000, 0, -216), 0, (("src/ast_builder.mli", 59, 1821, 1825), ("src/ast_builder.mli", 60, 1861, 1925), 0), 0, Tag1 ("Ppxlib__Ast_builder_intf", 31)), 0); (("pstr_value_list", 7932), ((Tag1 (("loc"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Location"), "t"), 0, (0)), 100000000, 0, -215), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Asttypes"), "rec_flag"), 0, (0)), 100000000, 0, -214), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "value_binding"), 0, (0)), 100000000, 0, -213)], (0)), 100000000, 0, -212), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "structure_item"), 0, (0)), 100000000, 0, -211)], (0)), 100000000, 0, -210), 0), 100000000, 0, -209), 0), 100000000, 0, -208), 0), 100000000, 0, -207), 0, (("src/ast_builder.mli", 59, 1821, 1825), ("src/ast_builder.mli", 60, 1861, 1925), 0), 0, Tag1 ("Ppxlib__Ast_builder_intf", 32)), 0); (("nonrec_type_declaration", 7933), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Ast_builder_intf"), "with_location"), [(Tag1 (("name"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Loc"), "t"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -206)], (0)), 100000000, 0, -205), (Tag1 (("params"), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -203); (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Asttypes"), "variance"), 0, (0)), 100000000, 0, -204)]), 100000000, 0, -202)], (0)), 100000000, 0, -201), (Tag1 (("cstrs"), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -198); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -199); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Location"), "t"), 0, (0)), 100000000, 0, -200)]), 100000000, 0, -197)], (0)), 100000000, 0, -196), (Tag1 (("kind"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "type_kind"), 0, (0)), 100000000, 0, -195), (Tag1 (("private_"), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Asttypes"), "private_flag"), 0, (0)), 100000000, 0, -194), (Tag1 (("manifest"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "core_type"), 0, (0)), 100000000, 0, -193)], (0)), 100000000, 0, -192), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "type_declaration"), 0, (0)), 100000000, 0, -191), 0), 100000000, 0, -190), 0), 100000000, 0, -189), 0), 100000000, 0, -188), 0), 100000000, 0, -187), 0), 100000000, 0, -186), 0), 100000000, 0, -185)], (0)), 100000000, 0, -184), 0, (("src/ast_builder.mli", 59, 1821, 1825), ("src/ast_builder.mli", 60, 1861, 1925), 0), [(("deprecated", (("src/ast_builder_intf.ml", 65, 2326, 2333), ("src/ast_builder_intf.ml", 65, 2326, 2343), 0)), ([([(Tag1 (Tag2 ("[since 2016-10] use Nonrecursive on the P(str|sig)_type instead", (("src/ast_builder_intf.ml", 66, 2344, 2351), ("src/ast_builder_intf.ml", 66, 2344, 2414), 0), 0)), (("src/ast_builder_intf.ml", 66, 2344, 2350), ("src/ast_builder_intf.ml", 66, 2344, 2415), 0), 0, 0)], (("src/ast_builder_intf.ml", 66, 2344, 2350), ("src/ast_builder_intf.ml", 66, 2344, 2415), 0))]), (("src/ast_builder_intf.ml", 65, 2326, 2330), ("src/ast_builder_intf.ml", 66, 2344, 2416), 0))], Tag1 ("Ppxlib__Ast_builder_intf", 33)), 0); (("unapplied_type_constr_conv", 7934), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Ast_builder_intf"), "with_location"), [(Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Loc"), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Longident"), "t"), 0, (0)), 100000000, 0, -183)], (0)), 100000000, 0, -182), (Tag1 (("f"), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -181), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -180), 0), 100000000, 0, -179), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -178), 0), 100000000, 0, -177), 0), 100000000, 0, -176)], (0)), 100000000, 0, -175), 0, (("src/ast_builder.mli", 59, 1821, 1825), ("src/ast_builder.mli", 60, 1861, 1925), 0), 0, Tag1 ("Ppxlib__Ast_builder_intf", 34)), 0); (("type_constr_conv", 7935), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Ast_builder_intf"), "with_location"), [(Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Loc"), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Longident"), "t"), 0, (0)), 100000000, 0, -174)], (0)), 100000000, 0, -173), (Tag1 (("f"), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -172), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -171), 0), 100000000, 0, -170), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -169)], (0)), 100000000, 0, -168), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -167), 0), 100000000, 0, -166), 0), 100000000, 0, -165), 0), 100000000, 0, -164)], (0)), 100000000, 0, -163), 0, (("src/ast_builder.mli", 59, 1821, 1825), ("src/ast_builder.mli", 60, 1861, 1925), 0), 0, Tag1 ("Ppxlib__Ast_builder_intf", 35)), 0); (("eta_reduce", 7936), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -162), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -161)], (0)), 100000000, 0, -160), 0), 100000000, 0, -159), 0, (("src/ast_builder.mli", 59, 1821, 1825), ("src/ast_builder.mli", 60, 1861, 1925), 0), 0, Tag1 ("Ppxlib__Ast_builder_intf", 36)), 0); (("eta_reduce_if_possible", 7937), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -158), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -157), 0), 100000000, 0, -156), 0, (("src/ast_builder.mli", 59, 1821, 1825), ("src/ast_builder.mli", 60, 1861, 1925), 0), 0, Tag1 ("Ppxlib__Ast_builder_intf", 37)), 0); (("eta_reduce_if_possible_and_nonrec", 7938), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -155), (Tag1 (("rec_flag"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "rec_flag"), 0, (0)), 100000000, 0, -154), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -153), 0), 100000000, 0, -152), 0), 100000000, 0, -151), 0, (("src/ast_builder.mli", 59, 1821, 1825), ("src/ast_builder.mli", 60, 1861, 1925), 0), 0, Tag1 ("Ppxlib__Ast_builder_intf", 38)), 0); (("^^", 7939), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format6"), [((0), 100000000, 0, -141); ((0), 100000000, 0, -142); ((0), 100000000, 0, -143); ((0), 100000000, 0, -144); ((0), 100000000, 0, -149); ((0), 100000000, 0, -148)], (0)), 100000000, 0, -150), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format6"), [((0), 100000000, 0, -148); ((0), 100000000, 0, -142); ((0), 100000000, 0, -143); ((0), 100000000, 0, -149); ((0), 100000000, 0, -145); ((0), 100000000, 0, -146)], (0)), 100000000, 0, -147), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format6"), [((0), 100000000, 0, -141); ((0), 100000000, 0, -142); ((0), 100000000, 0, -143); ((0), 100000000, 0, -144); ((0), 100000000, 0, -145); ((0), 100000000, 0, -146)], (0)), 100000000, 0, -140), 0), 100000000, 0, -139), 0), 100000000, 0, -138), 0, (("ppx_quickcheck/expander/import.ml", 7, 90, 94), ("ppx_quickcheck/expander/import.ml", 7, 90, 100), 0), 0, Tag1 ("Ppx_quickcheck_expander__Import", 0)), 0); (("error", 7940), ((Tag1 (("loc"), (Tag3 (Tag1 ((("Location", 7350)), "t"), 0, (0)), 100000000, 0, -137), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format6"), [((0), 100000000, 0, -132); (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Caml"), "Format"), "formatter"), 0, (0)), 100000000, 0, -134); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -135); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -135); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -135); ((0), 100000000, 0, -136)], (0)), 100000000, 0, -133), ((0), 100000000, 0, -132), 0), 100000000, 0, -131), 0), 100000000, 0, -130), 0, (("ppx_quickcheck/expander/import.ml", 8, 117, 121), ("ppx_quickcheck/expander/import.ml", 8, 117, 126), 0), 0, Tag1 ("Ppx_quickcheck_expander__Import", 1)), 0); (("invalid", 7941), ((Tag1 (("loc"), (Tag3 (Tag1 ((("Location", 7350)), "t"), 0, (0)), 100000000, 0, -129), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format6"), [((0), 100000000, 0, -124); (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Caml"), "Format"), "formatter"), 0, (0)), 100000000, 0, -126); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -127); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -127); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -127); ((0), 100000000, 0, -128)], (0)), 100000000, 0, -125), ((0), 100000000, 0, -124), 0), 100000000, 0, -123), 0), 100000000, 0, -122), 0, (("ppx_quickcheck/expander/import.ml", 9, 193, 197), ("ppx_quickcheck/expander/import.ml", 9, 193, 204), 0), 0, Tag1 ("Ppx_quickcheck_expander__Import", 4)), 0); (("unsupported", 7942), ((Tag1 (("loc"), (Tag3 (Tag1 ((("Location", 7350)), "t"), 0, (0)), 100000000, 0, -121), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format6"), [((0), 100000000, 0, -116); (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Caml"), "Format"), "formatter"), 0, (0)), 100000000, 0, -118); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -119); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -119); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -119); ((0), 100000000, 0, -120)], (0)), 100000000, 0, -117), ((0), 100000000, 0, -116), 0), 100000000, 0, -115), 0), 100000000, 0, -114), 0, (("ppx_quickcheck/expander/import.ml", 10, 255, 259), ("ppx_quickcheck/expander/import.ml", 10, 255, 270), 0), 0, Tag1 ("Ppx_quickcheck_expander__Import", 7)), 0); (("internal_error", 7943), ((Tag1 (("loc"), (Tag3 (Tag1 ((("Location", 7350)), "t"), 0, (0)), 100000000, 0, -113), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format6"), [((0), 100000000, 0, -108); (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "Caml"), "Format"), "formatter"), 0, (0)), 100000000, 0, -110); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -111); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -111); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -111); ((0), 100000000, 0, -112)], (0)), 100000000, 0, -109), ((0), 100000000, 0, -108), 0), 100000000, 0, -107), 0), 100000000, 0, -106), 0, (("ppx_quickcheck/expander/import.ml", 11, 318, 322), ("ppx_quickcheck/expander/import.ml", 11, 318, 336), 0), 0, Tag1 ("Ppx_quickcheck_expander__Import", 10)), 0); (("short_string_of_core_type", 7944), ((Tag1 (0, (Tag3 ((("core_type", 7375)), 0, (0)), 100000000, 0, -105), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -104), 0), 100000000, 0, -103), 0, (("ppx_quickcheck/expander/import.ml", 13, 388, 392), ("ppx_quickcheck/expander/import.ml", 13, 388, 417), 0), 0, Tag1 ("Ppx_quickcheck_expander__Import", 13)), 0); (("loc_map", 7945), ((Tag1 (0, (Tag3 ((("loc", 7356)), [((0), 100000000, 0, -101)], (0)), 100000000, 0, -102), (Tag1 (("f"), (Tag1 (0, ((0), 100000000, 0, -101), ((0), 100000000, 0, -99), (1)), 100000000, 0, -100), (Tag3 ((("loc", 7356)), [((0), 100000000, 0, -99)], (0)), 100000000, 0, -98), 0), 100000000, 0, -97), 0), 100000000, 0, -96), 0, (("ppx_quickcheck/expander/import.ml", 31, 958, 962), ("ppx_quickcheck/expander/import.ml", 31, 958, 969), 0), 0, Tag1 ("Ppx_quickcheck_expander__Import", 15)), 0); (("lident_loc", 7946), ((Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -95)], (0)), 100000000, 0, -94), (Tag3 ((("loc", 7356)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Longident"), "t"), 0, (0)), 100000000, 0, -93)], (0)), 100000000, 0, -92), 0), 100000000, 0, -91), 0, (("ppx_quickcheck/expander/import.ml", 32, 1009, 1013), ("ppx_quickcheck/expander/import.ml", 32, 1009, 1023), 0), 0, Tag1 ("Ppx_quickcheck_expander__Import", 19)), 0); (("prefixed_type_name", 7947), ((Tag1 (0, (Tag3 (Tag1 ((("String", 7101)), "t"), 0, (0)), 100000000, 0, -90), (Tag1 (0, (Tag3 (Tag1 ((("String", 7101)), "t"), 0, (0)), 100000000, 0, -90), (Tag3 (Tag1 ((("String", 7101)), "t"), 0, (0)), 100000000, 0, -90), 0), 100000000, 0, -89), 0), 100000000, 0, -88), 0, (("ppx_quickcheck/expander/import.ml", 34, 1045, 1049), ("ppx_quickcheck/expander/import.ml", 34, 1045, 1067), 0), 0, Tag1 ("Ppx_quickcheck_expander__Import", 20)), 0); (("generator_name", 7948), ((Tag1 (0, (Tag3 (Tag1 ((("String", 7101)), "t"), 0, (0)), 100000000, 0, -87), (Tag3 (Tag1 ((("String", 7101)), "t"), 0, (0)), 100000000, 0, -87), 0), 100000000, 0, -86), 0, (("ppx_quickcheck/expander/import.ml", 40, 1166, 1170), ("ppx_quickcheck/expander/import.ml", 40, 1166, 1184), 0), 0, Tag1 ("Ppx_quickcheck_expander__Import", 23)), 0); (("observer_name", 7949), ((Tag1 (0, (Tag3 (Tag1 ((("String", 7101)), "t"), 0, (0)), 100000000, 0, -85), (Tag3 (Tag1 ((("String", 7101)), "t"), 0, (0)), 100000000, 0, -85), 0), 100000000, 0, -84), 0, (("ppx_quickcheck/expander/import.ml", 41, 1249, 1253), ("ppx_quickcheck/expander/import.ml", 41, 1249, 1266), 0), 0, Tag1 ("Ppx_quickcheck_expander__Import", 25)), 0); (("shrinker_name", 7950), ((Tag1 (0, (Tag3 (Tag1 ((("String", 7101)), "t"), 0, (0)), 100000000, 0, -83), (Tag3 (Tag1 ((("String", 7101)), "t"), 0, (0)), 100000000, 0, -83), 0), 100000000, 0, -82), 0, (("ppx_quickcheck/expander/import.ml", 42, 1330, 1334), ("ppx_quickcheck/expander/import.ml", 42, 1330, 1347), 0), 0, Tag1 ("Ppx_quickcheck_expander__Import", 27)), 0); (("pname", 7951), ((Tag1 (0, (Tag3 ((("loc", 7356)), [((0), 100000000, 0, -80)], (0)), 100000000, 0, -81), (Tag1 (("f"), (Tag1 (0, ((0), 100000000, 0, -80), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -79), (1)), 100000000, 0, -78), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -77), 0), 100000000, 0, -76), 0), 100000000, 0, -75), 0, (("ppx_quickcheck/expander/import.ml", 43, 1411, 1415), ("ppx_quickcheck/expander/import.ml", 43, 1411, 1420), 0), 0, Tag1 ("Ppx_quickcheck_expander__Import", 29)), 0); (("ename", 7952), ((Tag1 (0, (Tag3 ((("loc", 7356)), [((0), 100000000, 0, -73)], (0)), 100000000, 0, -74), (Tag1 (("f"), (Tag1 (0, ((0), 100000000, 0, -73), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -72), (1)), 100000000, 0, -71), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -70), 0), 100000000, 0, -69), 0), 100000000, 0, -68), 0, (("ppx_quickcheck/expander/import.ml", 44, 1457, 1461), ("ppx_quickcheck/expander/import.ml", 44, 1457, 1466), 0), 0, Tag1 ("Ppx_quickcheck_expander__Import", 33)), 0); (("pgenerator", 7953), ((Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag3 (Tag1 ((("String", 7101)), "t"), 0, (0)), 100000000, 0, -67)], (0)), 100000000, 0, -66), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -65), 0), 100000000, 0, -64), 0, (("ppx_quickcheck/expander/import.ml", 45, 1503, 1507), ("ppx_quickcheck/expander/import.ml", 45, 1503, 1517), 0), 0, Tag1 ("Ppx_quickcheck_expander__Import", 37)), 0); (("pobserver", 7954), ((Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag3 (Tag1 ((("String", 7101)), "t"), 0, (0)), 100000000, 0, -63)], (0)), 100000000, 0, -62), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -61), 0), 100000000, 0, -60), 0, (("ppx_quickcheck/expander/import.ml", 46, 1544, 1548), ("ppx_quickcheck/expander/import.ml", 46, 1544, 1557), 0), 0, Tag1 ("Ppx_quickcheck_expander__Import", 38)), 0); (("pshrinker", 7955), ((Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag3 (Tag1 ((("String", 7101)), "t"), 0, (0)), 100000000, 0, -59)], (0)), 100000000, 0, -58), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -57), 0), 100000000, 0, -56), 0, (("ppx_quickcheck/expander/import.ml", 47, 1583, 1587), ("ppx_quickcheck/expander/import.ml", 47, 1583, 1596), 0), 0, Tag1 ("Ppx_quickcheck_expander__Import", 39)), 0); (("egenerator", 7956), ((Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag3 (Tag1 ((("String", 7101)), "t"), 0, (0)), 100000000, 0, -55)], (0)), 100000000, 0, -54), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -53), 0), 100000000, 0, -52), 0, (("ppx_quickcheck/expander/import.ml", 48, 1622, 1626), ("ppx_quickcheck/expander/import.ml", 48, 1622, 1636), 0), 0, Tag1 ("Ppx_quickcheck_expander__Import", 40)), 0); (("eobserver", 7957), ((Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag3 (Tag1 ((("String", 7101)), "t"), 0, (0)), 100000000, 0, -51)], (0)), 100000000, 0, -50), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -49), 0), 100000000, 0, -48), 0, (("ppx_quickcheck/expander/import.ml", 49, 1663, 1667), ("ppx_quickcheck/expander/import.ml", 49, 1663, 1676), 0), 0, Tag1 ("Ppx_quickcheck_expander__Import", 41)), 0); (("eshrinker", 7958), ((Tag1 (0, (Tag3 ((("loc", 7356)), [(Tag3 (Tag1 ((("String", 7101)), "t"), 0, (0)), 100000000, 0, -47)], (0)), 100000000, 0, -46), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -45), 0), 100000000, 0, -44), 0, (("ppx_quickcheck/expander/import.ml", 50, 1702, 1706), ("ppx_quickcheck/expander/import.ml", 50, 1702, 1715), 0), 0, Tag1 ("Ppx_quickcheck_expander__Import", 42)), 0); (("ptuple", 7959), ((Tag1 (("loc"), (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -43), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -42)], (0)), 100000000, 0, -41), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast")), "Ast"), "pattern"), 0, (0)), 100000000, 0, -40), 0), 100000000, 0, -39), 0), 100000000, 0, -38), 0, (("ppx_quickcheck/expander/import.ml", 52, 1742, 1746), ("ppx_quickcheck/expander/import.ml", 52, 1742, 1752), 0), 0, Tag1 ("Ppx_quickcheck_expander__Import", 43)), 0); (("gensym", 7960), ((Tag1 (0, (Tag3 (Tag1 ((("String", 7101)), "t"), 0, (0)), 100000000, 0, -37), (Tag1 (0, (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -36), (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -34); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -35)]), 100000000, 0, -33), 0), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("ppx_quickcheck/expander/import.ml", 61, 1918, 1922), ("ppx_quickcheck/expander/import.ml", 61, 1918, 1928), 0), 0, Tag1 ("Ppx_quickcheck_expander__Import", 47)), 0); (("gensyms", 7961), ((Tag1 (0, (Tag3 (Tag1 ((("String", 7101)), "t"), 0, (0)), 100000000, 0, -30), (Tag1 (0, (Tag3 (Tag1 ((("List", 7073)), "t"), [(Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -29)], (0)), 100000000, 0, -28), (Tag2 ([(Tag3 (Tag1 ((("List", 7073)), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -25)], (0)), 100000000, 0, -24); (Tag3 (Tag1 ((("List", 7073)), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -27)], (0)), 100000000, 0, -26)]), 100000000, 0, -23), 0), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("ppx_quickcheck/expander/import.ml", 67, 2074, 2078), ("ppx_quickcheck/expander/import.ml", 67, 2074, 2085), 0), 0, Tag1 ("Ppx_quickcheck_expander__Import", 52)), 0); (("gensymss", 7962), ((Tag1 (0, (Tag3 (Tag1 ((("String", 7101)), "t"), 0, (0)), 100000000, 0, -20), (Tag1 (0, (Tag3 (Tag1 ((("List", 7073)), "t"), [(Tag3 (Tag1 ((("List", 7073)), "t"), [(Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -19)], (0)), 100000000, 0, -18)], (0)), 100000000, 0, -17), (Tag2 ([(Tag3 (Tag1 ((("List", 7073)), "t"), [(Tag3 (Tag1 ((("List", 7073)), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "pattern"), 0, (0)), 100000000, 0, -13)], (0)), 100000000, 0, -12)], (0)), 100000000, 0, -11); (Tag3 (Tag1 ((("List", 7073)), "t"), [(Tag3 (Tag1 ((("List", 7073)), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -16)], (0)), 100000000, 0, -15)], (0)), 100000000, 0, -14)]), 100000000, 0, -10), 0), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("ppx_quickcheck/expander/import.ml", 69, 2156, 2160), ("ppx_quickcheck/expander/import.ml", 69, 2156, 2168), 0), 0, Tag1 ("Ppx_quickcheck_expander__Import", 55)), 0); (("fn_map_label", 7963), ((Tag1 (("loc"), (Tag3 ((("location", 7354)), 0, (0)), 100000000, 0, -7), (Tag1 (("from"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "arg_label"), 0, (0)), 100000000, 0, -6), (Tag1 (("to_"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "arg_label"), 0, (0)), 100000000, 0, -6), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "expression"), 0, (0)), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("ppx_quickcheck/expander/import.ml", 76, 2377, 2381), ("ppx_quickcheck/expander/import.ml", 76, 2377, 2393), 0), 0, Tag1 ("Ppx_quickcheck_expander__Import", 58)), 0)], "Ppx_quickcheck_expander__Import", [("Ppx_quickcheck_expander__Import", ("\129\133\217\193\254\175c\0249`\206\142\028\203\249\203")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Subst", ("\021\031\148\223\127\186\189\135\027}\145r\216\143\177\156")); ("Stdppx", ("=:\209>\156\207\149\181\248\131\161P-\254\025q")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__StringLabels", ("\134F\024\226\216Is#\223\230\234\169Z\206Gc")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Printexc", ("\217u\168\235\179oi\167\235\255\025\017%d\192s")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__ListLabels", ("*\194\012\191\020%\170\249m\002\180\178hk\205\220")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Char", ("\1794\1468\190\138\150g\231\240\140d\191.\212e")); ("Stdlib__BytesLabels", ("\145\128\000\239\186Z.\0310^\247\201\174\\\137R")); ("Stdlib__Bytes", ("C\134\194)\175\222\137p\205\246\244\r\241\164P\209")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib__Arg", ("\024%=\206\198p\149Y\007\004\216,&\254#\207")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("Sexplib0__Sexpable", ("\251${\207(\249/z\242\255\250^\141\156\210e")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv_error", ("kzv!\151~\198P\000\165\176d\007\251p\232")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("Profile", ("\201i\132?<qM\169\011\239@\142\202\182\023,")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Ppxlib_traverse_builtins", ("\237\218tx\250&^T{\197#\019<\250_\r")); ("Ppxlib_ast__Versions", ("\005+\189\023\165C\208\138FX6X\224\005\223\t")); ("Ppxlib_ast__Import", ("\027\222\n&\137\144M\230R\150g=Y\198\007\233")); ("Ppxlib_ast__Ast", ("?\026\134=\154d\183u\023\212\177\192\b]\250E")); ("Ppxlib_ast__", ("\182{\159J6;\249\149\208}`\139\002r\020x")); ("Ppxlib_ast", ("\002y:\229,^V\247~U\236~\232\131I\154")); ("Ppxlib__Utils", ("l\219q\2089\252\011\193\194^N&B\192T\223")); ("Ppxlib__Name", ("\202C\151nm\153EG\200\214[;s!)\140")); ("Ppxlib__Longident", ("\236#\230\012\180\203D\156\209\2282-p1H\132")); ("Ppxlib__Location", ("\r\139A\176n\135\029#\213\194&\153}\132\b\193")); ("Ppxlib__Loc", ("\183\208\004g\131\162\223\177\235#:\182\128\020\166\155")); ("Ppxlib__Import", ("\146|\185\205\005c\141\174\165\006\1517\177}\\\241")); ("Ppxlib__Expansion_context", ("\210<\144_\134\203\172\219N:6H\156{\220U")); ("Ppxlib__Common", (">S\244L\148\145\200\134\1298\249\200b\014\193\147")); ("Ppxlib__Code_path", ("\029\211r\143\213`\240\244{Na\007Ii^J")); ("Ppxlib__Attribute", ("\162~~\178\183\027\245`\231\215\181\235qHm\b")); ("Ppxlib__Ast_traverse0", ("r\177\171e\003\155\241]D\149FKy\174\023\225")); ("Ppxlib__Ast_traverse", ("B\b\r\176z\\s\1809\129\156\127?\011Qo")); ("Ppxlib__Ast_pattern_generated", (":\216\170\153\005\218jM\167\138\2111!\b\020K")); ("Ppxlib__Ast_pattern0", ("\255\203\196\229\159\201Q*\230\238\"\198(Q\154\029")); ("Ppxlib__Ast_pattern", ("\023,&Ow\159\019\144Rw\158\143\213Mo\203")); ("Ppxlib__Ast_builder_intf", ("f\195(\250\243~\149\026+d\219\173\244\185\189o")); ("Ppxlib__Ast_builder_generated", ("\209\002\237\243\187\251C^\172U\005n\179\024G\237")); ("Ppxlib__Ast_builder", ("{\157\238\130%\012\159\135\129\222gh)\157\206\214")); ("Ppxlib__", ("JQ\224\000Y\175_]O\b\254O\194|\017\237")); ("Ppxlib", ("\216\128\187K\006\011\165\149s\168&\180\1515\181\007")); ("Ppx_quickcheck_expander__", ("6\030\201\177\025\166`@\129\169QwLC\128\246")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Ocaml_shadow", ("\148\171\169\197\t\188z\207\155\180N\151 \195\173\206")); ("Ocaml_common", ("1\212\195\020\163\232\187\142G\192\221\180@\1278u")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Load_path", ("\012@\228l\230\164S\172h\1726X\020\252o}")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("Env", ("\021\n\181\142x\b\169j\227\"\017\248*\178\245\223")); ("Compmisc", ("B\127\\\174\004T\179\002\242}-C\214\152H*")); ("Cmi_format", ("6\177\bU\139\"\023\152=\249\135\174\b\011Cg")); ("Clflags", ("\162v\193G\199E|\029\023{\b\243]B\144;")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Base__Unit", ("\247\n\178\171]m\169\231\139\171\148\189\254\236l'")); ("Base__T", ("+t\159\169\027\152\205\235\003\237\133\177\024\n6'")); ("Base__Sys0", ("\206z\231\154s\\\136\2364\131\005\014\031\152m3")); ("Base__Stringable", ("\170\025\162\136\234\162\n\161\1491>\145\210@\237t")); ("Base__String0", ("\212\221L\220\245\255\162P\228\224\189\216\135H\149O")); ("Base__String", ("|q\181\r\14787\130\127\191\025\137\203\217\250\196")); ("Base__Staged", ("\203J\011+\249\0115\1338\023\209\142\159\240V.")); ("Base__Source_code_position0", ("_\003P6\254\029\206\005\130\136\180\019\145\230\000M")); ("Base__Sign_or_nan", ("\2287\251,\197\017qf\179Y\025h\190\131W%")); ("Base__Sign0", ("\152\138\204\175\244\128J\165\221\165\160\150y\1305i")); ("Base__Sign", ("^\255.Q;\215fi\134\192\182\241Z\2425l")); ("Base__Sexpable", ("\155?\169\178\246\242*\232\206\018Y\174\203h\217i")); ("Base__Sexp_with_comparable", ("\171\173\137y\1855\006y\146\248\141@@\191[W")); ("Base__Sexp", ("\154\187\171&\209=\153[\236\250!U\174`\190T")); ("Base__Sequence", ("{L\140\211\223\183\000\030\151\247FnY\196\210\201")); ("Base__Result", ("\204|\215\173FMa\2511<&\215T\194$\228")); ("Base__Ref", ("\250\254R\158s\203c\0025\029I6\149\179s\158")); ("Base__Random", (" \216\153fc\243\1430\155\211\169?\022\\\231\011")); ("Base__Printf", ("\000\196c,\214\127\226\174\220\190\253z!\242\028\250")); ("Base__Pretty_printer", ("\175\005\031\018\015a\159\220\154c'(a\239j\233")); ("Base__Ppx_hash_lib", ("\199\141\178\193\006\209L\007^\020(\131\224sn8")); ("Base__Ppx_enumerate_lib", ("G\171\178\012Em\142\235@\152fg\020\140~(")); ("Base__Ppx_compare_lib", ("\243\186~\233\228\199Ah\181.\223\004e\231\129S")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Or_error", ("\193\133)\bO\210\2517\168*\203\148\143\200\127\177")); ("Base__Option", ("\242!\176\142\168\247\163Jg\0254\180\224\\A\210")); ("Base__Nativeint", ("\252/\181U\214\229\029?.\130\145\237\"qFj")); ("Base__Monad_intf", ("\208\203\163\152\184O\130?\012:\168\247}\018\253\155")); ("Base__Monad", ("!\244\168\2352=\137Lm\219\129K\216\199\145\\")); ("Base__List", ("}\029h\158/\153\229\161]0\224Y\003Z\250\210")); ("Base__Lazy", ("@`\165\196 \235)\136ANe:p\169$\185")); ("Base__Invariant_intf", ("\213\204\238\235\236[\198\145\028\2392\015\243\177S\249")); ("Base__Invariant", ("\135\153\136\\\129SD\228\202l\255\152\139\253\015\201")); ("Base__Intable", ("\028\249=Y\003]\231qd\238\172\004b\170\142\255")); ("Base__Int_intf", ("\238Q\2457\239\156\018\183J\015\240\178\193b\166@")); ("Base__Int64", ("\252B\186\239\245\155\209\227\136CIX@\189\003\029")); ("Base__Int63_emul", ("'\210s\232\177\204\254\024C\215\014\231\210\227n\235")); ("Base__Int63", ("\165\016\236\214m\014a\226A{\191\235@O\1695")); ("Base__Int32", ("\244*\172\133\227\025$@\180\027\024\132\195yO\027")); ("Base__Int0", ("N\1310\012\227\254\000\255_\222!\018\016\003\1779")); ("Base__Int", ("\165Z\179\140\230$\131\175\209\172\214\"\170\214{\250")); ("Base__Info_intf", ("\184\209'\173\251\219\167X|v\188]\190o5X")); ("Base__Info", ("-\011\149\203\248\030\2301\1907\1630\189\128\209\170")); ("Base__Indexed_container_intf", ("\179\2213\145j\\\136\tl2\240\006\188j$r")); ("Base__Indexed_container", ("\196\246\213\141\196d\130\002\232\162\144y\149\236\145\218")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Import", ("\014\187\247\141\187\181\142g\176:s_,\181\219\209")); ("Base__Identifiable_intf", ("hK7}\187\129\022-r\233\241\192Q\161=j")); ("Base__Identifiable", ("L\020\162\189\228\217^\171\158H_\157\164c\130\242")); ("Base__Hashable_intf", ("\128\015G\244\135R\026\202\128F?)\193\004\195\181")); ("Base__Hashable", ("\027\187\158\245r}\018\193dbq\196\005\170g\252")); ("Base__Hash_intf", ("h\004P\218\1531G\127\212\208A\024\140\164iq")); ("Base__Hash", ("\206Rc\194\234{s3\248\165\024\162\203{\206\206")); ("Base__Globalize", ("<\243w~.\180\196t\159\193\174[\227\139\215G")); ("Base__Formatter", ("\193\149\030\140\154\1505b\162a`%\243\185'%")); ("Base__Floatable", ("\239\176\151\139\173ft(q\190\205\030C\170\197\177")); ("Base__Float", ("tR$\252\165\134g\024>\127\254\245\212-\018\141")); ("Base__Field", ("8In\234X\202\188G\186\208$\192\175\136\214v")); ("Base__Exn", ("?\191\202\221\228\185\154\127\240\191o\134\020\186b\173")); ("Base__Error", ("\199\218\231n\155/\159\156\146\247\148t\237\003\t\153")); ("Base__Equal", ("\193\217Z\127he\141N\000\1447\030\236%\131\b")); ("Base__Either0", ("!9-\011n\2077eZ\212\031c\227\029\206\t")); ("Base__Container_intf", ("\170vo*\208\209\141\219\196\168\236l\016\246\012c")); ("Base__Container", ("\191|>_\153W\235M\180uKz\214w`q")); ("Base__Comparisons", ("\196\196Y\"{\163~)\\G/\155:\004\141;")); ("Base__Comparator", ("\002\135z7b\025&\207\t\188\239&U3R\167")); ("Base__Comparable_intf", ("\252n\002\221\246\143r\235oJ\240\151\202\211\161\254")); ("Base__Comparable", (":\134'\156u#\215\225\129\191\162\229\200\185l\012")); ("Base__Char", ("\206\224\186\000'\157$\023\023\190\198{\250\141a\216")); ("Base__Bytes", ("\028\001\232X(\240\139\227s\152\156\138\023\030\r\188")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__Bool", ("\162+\012Rx\183c\226\131\190@Z\016q\138@")); ("Base__Blit_intf", ("\171\129\t\214\130\131O\210\251F\228.\168\004Vo")); ("Base__Blit", ("}g\242\161\000\216\132\220\195\230C\002jg\234j")); ("Base__Binary_searchable_intf", ("/\213\237\209\200\192$w\158\234\169\148\012\221W\019")); ("Base__Binary_searchable", ("V\022B_\233\194\145K\248\233\025\175U\155i\197")); ("Base__Backtrace", ("\212~\253E\024|\228\141\015\169\012\006\022\0065\181")); ("Base__Array", ("P\252F\172\242{\241\226#uu\207\2068\218\015")); ("Base__Applicative_intf", ("J\176\203\159\235N(\235\027\232\198+\224\205*A")); ("Base__Applicative", ("\157\024\176\241a\165\204\133\003s3\214\007\131\244\n")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158")); ("Base", ("\167SY\027Q9E\005r,\198\164\161\023\170\151")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216")); ("Astlib__Parse", ("\203iQ\135d.\147$\t\207\203C\131\175\193\171")); ("Astlib__Longident", ("\n\192\233\142\177n\225\191\238\161#\150\204n\"Y")); ("Astlib__Location", ("nn\153\250\162\2239\215\129\229e\026xg\000U")); ("Astlib__Ast_501", ("\207\"A\188\024\242Q\223\153\146\239\128\168h\148&")); ("Astlib__Ast_500", ("\202\202\240\178Ep\168 [f\246\t\162T\141\254")); ("Astlib__Ast_414", ("i\179p\208\134r\2177\243\167\157nF\235\143\179")); ("Astlib__Ast_413", ("\240P\019\205\016\157\177\177O)\172\193\028\192\011\190")); ("Astlib__Ast_412", (">\181S\020\t\004\1998\163p\025\210s\216\251\169")); ("Astlib__Ast_411", ("\030\186y\191\005D\180nv\183\b@1\225\168+")); ("Astlib__Ast_410", ("\023\030O]m0\005\214X\n/\226c\201\214\232")); ("Astlib__Ast_409", ("P\147I\234\185H\181\153\207\221\003\165\139\161\150\027")); ("Astlib__Ast_408", ("\225\220%%\162\188\006W\007\252\001X\158\165,\004")); ("Astlib__Ast_407", ("\163\202\2018`\230bGY\138/\021'\148:\018")); ("Astlib__Ast_406", ("v\152\031Q\232\244\141\011p\012\161\164hy\203\151")); ("Astlib__Ast_405", ("\145;\017\238\241\127\173z\138\142Q4>\198\186\207")); ("Astlib__Ast_404", ("I\027\143Zr\250\2468\193\167uOo\029\236\148")); ("Astlib__Ast_403", ("\206M\242\247\155X\251\127\002Ly\024\154\245\153\180")); ("Astlib__Ast_402", ("\178]\161\230\193\144:\005/\\~\127'|\207\189")); ("Astlib__", ("\246\155.n\143$\1435\bi\005\019C\219\191A")); ("Astlib", ("\002*Xp\193\003\201C\234Q\143\029\232\1569\007"))], [(0)])
to_:Ppxlib__.Import.arg_label -> Ppxlib__.Import.expression

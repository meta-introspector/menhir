type def =
    Expr of Js_of_ocaml_compiler.Code.expr
  | Phi of { known : Js_of_ocaml_compiler.Code.Var.Set.t; others : bool; }
type approx =
    Top
  | Values of { known : Js_of_ocaml_compiler.Code.Var.Set.t; others : bool; }
type escape_status = Escape | Escape_constant | No
type info = {
  info_defs : def array;
  info_approximation : approx Js_of_ocaml_compiler.Code.Var.Tbl.t;
  info_may_escape : Js_of_ocaml_compiler.Code.Var.ISet.t;
  info_variable_may_escape : escape_status array;
  info_return_vals :
    Js_of_ocaml_compiler.Code.Var.Set.t Js_of_ocaml_compiler.Code.Var.Map.t;
}
val f : fast:bool -> Js_of_ocaml_compiler.Code.program -> info
val exact_call : info -> Js_of_ocaml_compiler.Code.Var.t -> int -> bool
("DEBUG:rule", [Tag1 (("def", 677), (0, 0, Tag1 ([(("Expr", 368), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Js_of_ocaml_compiler")), "Code"), "expr"), 0, (0)), 100000000, 0, -31)]), 0, (("compiler/lib/global_flow.mli", 21, 853, 855), ("compiler/lib/global_flow.mli", 21, 853, 874), 0), 0, Tag1 ("Js_of_ocaml_compiler__Global_flow", 2)); (("Phi", 369), Tag1 ([(("known", 492), 0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Js_of_ocaml_compiler")), "Code"), "Var"), "Set"), "t"), 0, (0)), 100000000, 0, -32), (("compiler/lib/global_flow.mli", 23, 886, 894), ("compiler/lib/global_flow.mli", 24, 934, 941), 0), 0, Tag1 ("Js_of_ocaml_compiler__Global_flow", 4)); (("others", 493), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -33), (("compiler/lib/global_flow.mli", 24, 934, 942), ("compiler/lib/global_flow.mli", 24, 934, 955), 0), 0, Tag1 ("Js_of_ocaml_compiler__Global_flow", 5))]), 0, (("compiler/lib/global_flow.mli", 22, 875, 877), ("compiler/lib/global_flow.mli", 25, 991, 998), 0), 0, Tag1 ("Js_of_ocaml_compiler__Global_flow", 6))], 0), 1, 0, 0, 0, 0, 0, (("compiler/lib/global_flow.mli", 20, 842, 842), ("compiler/lib/global_flow.mli", 25, 991, 998), 0), 0, 0, 0, Tag1 ("Js_of_ocaml_compiler__Global_flow", 1)), 1, 0); Tag1 (("approx", 678), (0, 0, Tag1 ([(("Top", 540), (0), 0, (("compiler/lib/global_flow.mli", 28, 1014, 1016), ("compiler/lib/global_flow.mli", 28, 1014, 1021), 0), 0, Tag1 ("Js_of_ocaml_compiler__Global_flow", 13)); (("Values", 541), Tag1 ([(("known", 542), 0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Js_of_ocaml_compiler")), "Code"), "Var"), "Set"), "t"), 0, (0)), 100000000, 0, -29), (("compiler/lib/global_flow.mli", 30, 1036, 1044), ("compiler/lib/global_flow.mli", 31, 1092, 1099), 0), 0, Tag1 ("Js_of_ocaml_compiler__Global_flow", 14)); (("others", 543), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -30), (("compiler/lib/global_flow.mli", 31, 1092, 1100), ("compiler/lib/global_flow.mli", 31, 1092, 1113), 0), 0, Tag1 ("Js_of_ocaml_compiler__Global_flow", 15))]), 0, (("compiler/lib/global_flow.mli", 29, 1022, 1024), ("compiler/lib/global_flow.mli", 32, 1154, 1161), 0), 0, Tag1 ("Js_of_ocaml_compiler__Global_flow", 16))], 0), 1, 0, 0, 0, 0, 0, (("compiler/lib/global_flow.mli", 27, 1000, 1000), ("compiler/lib/global_flow.mli", 32, 1154, 1161), 0), 0, 0, 0, Tag1 ("Js_of_ocaml_compiler__Global_flow", 12)), 1, 0); Tag1 (("escape_status", 679), (0, 0, Tag1 ([(("Escape", 545), (0), 0, (("compiler/lib/global_flow.mli", 35, 1184, 1186), ("compiler/lib/global_flow.mli", 35, 1184, 1194), 0), 0, Tag1 ("Js_of_ocaml_compiler__Global_flow", 23)); (("Escape_constant", 546), (0), 0, (("compiler/lib/global_flow.mli", 36, 1195, 1197), ("compiler/lib/global_flow.mli", 36, 1195, 1214), 0), 0, Tag1 ("Js_of_ocaml_compiler__Global_flow", 24)); (("No", 547), (0), 0, (("compiler/lib/global_flow.mli", 37, 1267, 1269), ("compiler/lib/global_flow.mli", 37, 1267, 1273), 0), 0, Tag1 ("Js_of_ocaml_compiler__Global_flow", 25))], 0), 1, 0, 0, 0, 0, 0, (("compiler/lib/global_flow.mli", 34, 1163, 1163), ("compiler/lib/global_flow.mli", 37, 1267, 1273), 0), 0, 1, 0, Tag1 ("Js_of_ocaml_compiler__Global_flow", 22)), 1, 0); Tag1 (("info", 680), (0, 0, [[(("info_defs", 549), 0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("def", 677)), 0, (0)), 100000000, 0, -21)], (0)), 100000000, 0, -20), (("compiler/lib/global_flow.mli", 40, 1287, 1291), ("compiler/lib/global_flow.mli", 41, 1313, 1316), 0), 0, Tag1 ("Js_of_ocaml_compiler__Global_flow", 27)); (("info_approximation", 557), 0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Js_of_ocaml_compiler")), "Code"), "Var"), "Tbl"), "t"), [(Tag3 ((("approx", 678)), 0, (0)), 100000000, 0, -23)], (0)), 100000000, 0, -22), (("compiler/lib/global_flow.mli", 41, 1313, 1317), ("compiler/lib/global_flow.mli", 42, 1355, 1358), 0), 0, Tag1 ("Js_of_ocaml_compiler__Global_flow", 28)); (("info_may_escape", 566), 0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Js_of_ocaml_compiler")), "Code"), "Var"), "ISet"), "t"), 0, (0)), 100000000, 0, -24), (("compiler/lib/global_flow.mli", 42, 1355, 1359), ("compiler/lib/global_flow.mli", 43, 1388, 1391), 0), 0, Tag1 ("Js_of_ocaml_compiler__Global_flow", 29)); (("info_variable_may_escape", 567), 0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("escape_status", 679)), 0, (0)), 100000000, 0, -26)], (0)), 100000000, 0, -25), (("compiler/lib/global_flow.mli", 43, 1388, 1392), ("compiler/lib/global_flow.mli", 44, 1439, 1442), 0), 0, Tag1 ("Js_of_ocaml_compiler__Global_flow", 30)); (("info_return_vals", 613), 0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Js_of_ocaml_compiler")), "Code"), "Var"), "Map"), "t"), [(Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Js_of_ocaml_compiler")), "Code"), "Var"), "Set"), "t"), 0, (0)), 100000000, 0, -28)], (0)), 100000000, 0, -27), (("compiler/lib/global_flow.mli", 44, 1439, 1443), ("compiler/lib/global_flow.mli", 44, 1439, 1481), 0), 0, Tag1 ("Js_of_ocaml_compiler__Global_flow", 31))]], 1, 0, 0, 0, 0, 0, (("compiler/lib/global_flow.mli", 39, 1275, 1275), ("compiler/lib/global_flow.mli", 45, 1482, 1485), 0), 0, 0, 0, Tag1 ("Js_of_ocaml_compiler__Global_flow", 26)), 1, 0); (("f", 681), ((Tag1 (("fast"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -19), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Js_of_ocaml_compiler")), "Code"), "program"), 0, (0)), 100000000, 0, -18), (Tag3 ((("info", 680)), 0, (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0), 100000000, 0, -15), 0, (("compiler/lib/global_flow.mli", 47, 1487, 1487), ("compiler/lib/global_flow.mli", 47, 1487, 1528), 0), 0, Tag1 ("Js_of_ocaml_compiler__Global_flow", 32)), 0); (("exact_call", 682), ((Tag1 (0, (Tag3 ((("info", 680)), 0, (0)), 100000000, 0, -14), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Js_of_ocaml_compiler")), "Code"), "Var"), "t"), 0, (0)), 100000000, 0, -13), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -11), 0), 100000000, 0, -10), 0), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("compiler/lib/global_flow.mli", 49, 1530, 1530), ("compiler/lib/global_flow.mli", 49, 1530, 1575), 0), 0, Tag1 ("Js_of_ocaml_compiler__Global_flow", 33)), 0); (("function_arity", 683), ((Tag1 (0, (Tag3 ((("info", 680)), 0, (0)), 100000000, 0, -7), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Js_of_ocaml_compiler")), "Code"), "Var"), "t"), 0, (0)), 100000000, 0, -6), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -5)], (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("compiler/lib/global_flow.mli", 51, 1577, 1577), ("compiler/lib/global_flow.mli", 51, 1577, 1625), 0), 0, Tag1 ("Js_of_ocaml_compiler__Global_flow", 34)), 0)], "Js_of_ocaml_compiler__Global_flow", [("Js_of_ocaml_compiler__Global_flow", ("m\235\237@u\186b\1897\023\003\187\252\196)\192")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__StringLabels", ("\134F\024\226\216Is#\223\230\234\169Z\206Gc")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Random", ("\020\005Xq\171\026\218\152X\135\254\023\133zK\200")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Printexc", ("\217u\168\235\179oi\167\235\255\025\017%d\192s")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__ListLabels", ("*\194\012\191\020%\170\249m\002\180\178hk\205\220")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Fun", ("\234t\181\000iQ\251,\b\020$\224\233\160\142\210")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Filename", ("z\163\210n\195\247\255\129\029SI\180\152\141h ")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Char", ("\1794\1468\190\138\150g\231\240\140d\191.\212e")); ("Stdlib__BytesLabels", ("\145\128\000\239\186Z.\0310^\247\201\174\\\137R")); ("Stdlib__Bytes", ("C\134\194)\175\222\137p\205\246\244\r\241\164P\209")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__ArrayLabels", ("\029\143d\025\218v\003\007\212jC\235/\205\006\198")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Js_of_ocaml_compiler__Stdlib", ("\162;P\232\137\003\012\252\217E\227\201\001\204\163j")); ("Js_of_ocaml_compiler__Parse_info", ("`+\018\231C(v\197\016 .\222N\n\219\229")); ("Js_of_ocaml_compiler__Code", ("\016a\196PfGPO\142UB\129\019g#\027")); ("Js_of_ocaml_compiler", ("\140\150\022\231\129$!^\139\156\170\236r\184~q")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
val function_arity : info -> Js_of_ocaml_compiler.Code.Var.t -> int option

type coercion_class =
    FunClass
  | SortClass
  | RefClass of Libnames.qualid Constrexpr.or_by_notation
type goal_identifier = string
type scope_name = string
type goal_reference = OpenSubgoals | NthGoal of int | GoalId of Names.Id.t
type printable =
    PrintTypingFlags
  | PrintTables
  | PrintFullContext
  | PrintSectionContext of Libnames.qualid
  | PrintInspect of int
  | PrintGrammar of string list
  | PrintCustomGrammar of string
  | PrintKeywords
  | PrintLoadPath of Names.DirPath.t option
  | PrintLibraries
  | PrintModule of Libnames.qualid
  | PrintModuleType of Libnames.qualid
  | PrintNamespace of Names.DirPath.t
  | PrintMLLoadPath
  | PrintMLModules
  | PrintDebugGC
  | PrintName of Libnames.qualid Constrexpr.or_by_notation *
      UnivNames.univ_name_list option
  | PrintGraph
  | PrintClasses
  | PrintTypeclasses
  | PrintInstances of Libnames.qualid Constrexpr.or_by_notation
  | PrintCoercions
  | PrintCoercionPaths of coercion_class * coercion_class
  | PrintCanonicalConversions of
      Libnames.qualid Constrexpr.or_by_notation list
  | PrintUniverses of bool * Libnames.qualid list option * string option
  | PrintHint of Libnames.qualid Constrexpr.or_by_notation
  | PrintHintGoal
  | PrintHintDbName of string
  | PrintHintDb
  | PrintScopes
  | PrintScope of string
  | PrintVisibility of string option
  | PrintAbout of Libnames.qualid Constrexpr.or_by_notation *
      UnivNames.univ_name_list option * Goal_select.t option
  | PrintImplicit of Libnames.qualid Constrexpr.or_by_notation
  | PrintAssumptions of bool * bool *
      Libnames.qualid Constrexpr.or_by_notation
  | PrintStrategy of Libnames.qualid Constrexpr.or_by_notation option
  | PrintRegistered
  | PrintNotation of Constrexpr.notation_entry * string
type glob_search_where = InHyp | InConcl | Anywhere
type search_item =
    SearchSubPattern of (glob_search_where * bool) *
      Constrexpr.constr_pattern_expr
  | SearchString of (glob_search_where * bool) * string * scope_name option
  | SearchKind of Decls.logical_kind
type search_request =
    SearchLiteral of search_item
  | SearchDisjConj of (bool * search_request) list list
type searchable =
    SearchPattern of Constrexpr.constr_pattern_expr
  | SearchRewrite of Constrexpr.constr_pattern_expr
  | Search of (bool * search_request) list
type locatable =
    LocateAny of Libnames.qualid Constrexpr.or_by_notation
  | LocateTerm of Libnames.qualid Constrexpr.or_by_notation
  | LocateLibrary of Libnames.qualid
  | LocateModule of Libnames.qualid
  | LocateOther of string * Libnames.qualid
  | LocateFile of string
type showable =
    ShowGoal of goal_reference
  | ShowProof
  | ShowExistentials
  | ShowUniverses
  | ShowProofNames
  | ShowIntros of bool
  | ShowMatch of Libnames.qualid
type comment =
    CommentConstr of Constrexpr.constr_expr
  | CommentString of string
  | CommentInt of int
type search_restriction =
    SearchInside of Libnames.qualid list
  | SearchOutside of Libnames.qualid list
type verbose_flag = bool
type coercion_flag = AddCoercion | NoCoercion
type instance_flag = BackInstance | BackInstanceWarning | NoInstance
type export_flag = Lib.export_flag = Export | Import
type import_categories = {
  negative : bool;
  import_cats : string CAst.t list;
}
type export_with_cats = export_flag * import_categories option
type infix_flag = bool
type one_import_filter_name = Libnames.qualid * bool
type import_filter_expr =
    ImportAll
  | ImportNames of one_import_filter_name list
type locality_flag = bool
type option_setting =
    OptionUnset
  | OptionSetTrue
  | OptionSetInt of int
  | OptionSetString of string
type definition_expr =
    ProveBody of Constrexpr.local_binder_expr list * Constrexpr.constr_expr
  | DefineBody of Constrexpr.local_binder_expr list *
      Genredexpr.raw_red_expr option * Constrexpr.constr_expr *
      Constrexpr.constr_expr option
type notation_format = TextFormat of Names.lstring
type syntax_modifier =
    SetItemLevel of string list * Notation_term.notation_binder_kind option *
      Extend.production_level
  | SetItemScope of string list * scope_name
  | SetLevel of int
  | SetCustomEntry of string * int option
  | SetAssoc of Gramlib.Gramext.g_assoc
  | SetEntryType of string * Extend.simple_constr_prod_entry_key
  | SetOnlyParsing
  | SetOnlyPrinting
  | SetFormat of notation_format
type notation_enable_modifier =
    EnableNotationEntry of Constrexpr.notation_entry CAst.t
  | EnableNotationOnly of Notationextern.notation_use
  | EnableNotationAll
type notation_declaration = {
  ntn_decl_string : Names.lstring;
  ntn_decl_interp : Constrexpr.constr_expr;
  ntn_decl_scope : scope_name option;
  ntn_decl_modifiers : syntax_modifier CAst.t list;
}
type 'a fix_expr_gen = {
  fname : Names.lident;
  univs : Constrexpr.universe_decl_expr option;
  rec_order : 'a;
  binders : Constrexpr.local_binder_expr list;
  rtype : Constrexpr.constr_expr;
  body_def : Constrexpr.constr_expr option;
  notations : notation_declaration list;
}
type fixpoint_expr = Constrexpr.recursion_order_expr option fix_expr_gen
type cofixpoint_expr = unit fix_expr_gen
type local_decl_expr =
    AssumExpr of Names.lname * Constrexpr.local_binder_expr list *
      Constrexpr.constr_expr
  | DefExpr of Names.lname * Constrexpr.local_binder_expr list *
      Constrexpr.constr_expr * Constrexpr.constr_expr option
type inductive_kind =
    Inductive_kw
  | CoInductive
  | Variant
  | Record
  | Structure
  | Class of bool
type simple_binder = Names.lident list * Constrexpr.constr_expr
type class_binder = Names.lident * Constrexpr.constr_expr list
type 'a with_coercion = coercion_flag * 'a
type 'a with_coercion_instance =
    (Attributes.vernac_flags * coercion_flag * instance_flag) * 'a
type record_field_attr = {
  rf_coercion : coercion_flag;
  rf_reversible : bool option;
  rf_instance : instance_flag;
  rf_priority : int option;
  rf_locality : Goptions.option_locality;
  rf_notation : notation_declaration list;
  rf_canonical : bool;
}
type record_field_attr_unparsed = {
  rfu_attrs : Attributes.vernac_flags;
  rfu_coercion : coercion_flag;
  rfu_instance : instance_flag;
  rfu_priority : int option;
  rfu_notation : notation_declaration list;
}
type constructor_expr =
    (Names.lident * Constrexpr.constr_expr) with_coercion_instance
type constructor_list_or_record_decl_expr =
    Constructors of constructor_expr list
  | RecordDecl of Names.lident option *
      (local_decl_expr * record_field_attr_unparsed) list *
      Names.lident option
type inductive_params_expr =
    Constrexpr.local_binder_expr list *
    Constrexpr.local_binder_expr list option
type inductive_expr =
    Constrexpr.cumul_ident_decl with_coercion * inductive_params_expr *
    Constrexpr.constr_expr option * constructor_list_or_record_decl_expr
type one_inductive_expr =
    Names.lident * inductive_params_expr * Constrexpr.constr_expr option *
    constructor_expr list
type typeclass_constraint =
    Constrexpr.name_decl * Glob_term.binding_kind * Constrexpr.constr_expr
and typeclass_context = typeclass_constraint list
type proof_expr =
    Constrexpr.ident_decl *
    (Constrexpr.local_binder_expr list * Constrexpr.constr_expr)
type opacity_flag = Opaque | Transparent
type proof_end = Admitted | Proved of opacity_flag * Names.lident option
type scheme_type =
    SchemeInduction
  | SchemeMinimality
  | SchemeElimination
  | SchemeCase
type equality_scheme_type = SchemeBooleanEquality | SchemeEquality
type scheme = {
  sch_type : scheme_type;
  sch_qualid : Libnames.qualid Constrexpr.or_by_notation;
  sch_sort : Sorts.family;
}
type section_subset_expr =
    SsEmpty
  | SsType
  | SsSingl of Names.lident
  | SsCompl of section_subset_expr
  | SsUnion of section_subset_expr * section_subset_expr
  | SsSubstr of section_subset_expr * section_subset_expr
  | SsFwdClose of section_subset_expr
type register_kind = RegisterInline | RegisterCoqlib of Libnames.qualid
type module_ast_inl = Constrexpr.module_ast * Declaremods.inline
type module_binder =
    export_with_cats option * Names.lident list * module_ast_inl
type vernac_one_argument_status = {
  name : Names.Name.t;
  recarg_like : bool;
  notation_scope : string CAst.t list;
  implicit_status : Glob_term.binding_kind;
}
type vernac_argument_status =
    VolatileArg
  | BidiArg
  | RealArg of vernac_one_argument_status
type arguments_modifier =
    [ `Assert
    | `ClearBidiHint
    | `ClearImplicits
    | `ClearScopes
    | `DefaultImplicits
    | `ExtraScopes
    | `ReductionDontExposeCase
    | `ReductionNeverUnfold
    | `Rename ]
type extend_name = string * int
type discharge = DoDischarge | NoDischarge
type hint_info_expr =
    Constrexpr.constr_pattern_expr Typeclasses.hint_info_gen
type reference_or_constr =
    HintsReference of Libnames.qualid
  | HintsConstr of Constrexpr.constr_expr
type hints_expr =
    HintsResolve of (hint_info_expr * bool * reference_or_constr) list
  | HintsResolveIFF of bool * Libnames.qualid list * int option
  | HintsImmediate of reference_or_constr list
  | HintsUnfold of Libnames.qualid list
  | HintsTransparency of Libnames.qualid Hints.hints_transparency_target *
      bool
  | HintsMode of Libnames.qualid * Hints.hint_mode list
  | HintsConstructors of Libnames.qualid list
  | HintsExtern of int * Constrexpr.constr_expr option *
      Genarg.raw_generic_argument
type synterp_vernac_expr =
    VernacLoad of verbose_flag * string
  | VernacReservedNotation of infix_flag *
      (Names.lstring * syntax_modifier CAst.t list)
  | VernacNotation of infix_flag * notation_declaration
  | VernacDeclareCustomEntry of string
  | VernacBeginSection of Names.lident
  | VernacEndSegment of Names.lident
  | VernacRequire of Libnames.qualid option * export_with_cats option *
      (Libnames.qualid * import_filter_expr) list
  | VernacImport of export_with_cats *
      (Libnames.qualid * import_filter_expr) list
  | VernacDeclareModule of export_with_cats option * Names.lident *
      module_binder list * module_ast_inl
  | VernacDefineModule of export_with_cats option * Names.lident *
      module_binder list * module_ast_inl Declaremods.module_signature *
      module_ast_inl list
  | VernacDeclareModuleType of Names.lident * module_binder list *
      module_ast_inl list * module_ast_inl list
  | VernacInclude of module_ast_inl list
  | VernacDeclareMLModule of string list
  | VernacChdir of string option
  | VernacExtraDependency of Libnames.qualid * string * Names.Id.t option
  | VernacSetOption of bool * Goptions.option_name * option_setting
  | VernacProofMode of string
  | VernacExtend of extend_name * Genarg.raw_generic_argument list
type nonrec synpure_vernac_expr =
    VernacOpenCloseScope of bool * scope_name
  | VernacDeclareScope of scope_name
  | VernacDelimiters of scope_name * string option
  | VernacBindScope of scope_name * coercion_class list
  | VernacEnableNotation of bool *
      (string, Names.Id.t list * Libnames.qualid) Util.union option *
      Constrexpr.constr_expr option * notation_enable_modifier list *
      Constrexpr.notation_with_optional_scope option
  | VernacDefinition of (discharge * Decls.definition_object_kind) *
      Constrexpr.name_decl * definition_expr
  | VernacStartTheoremProof of Decls.theorem_kind * proof_expr list
  | VernacEndProof of proof_end
  | VernacExactProof of Constrexpr.constr_expr
  | VernacAssumption of (discharge * Decls.assumption_object_kind) *
      Declaremods.inline *
      (Constrexpr.ident_decl list * Constrexpr.constr_expr) with_coercion
      list
  | VernacInductive of inductive_kind *
      (inductive_expr * notation_declaration list) list
  | VernacFixpoint of discharge * fixpoint_expr list
  | VernacCoFixpoint of discharge * cofixpoint_expr list
  | VernacScheme of (Names.lident option * scheme) list
  | VernacSchemeEquality of equality_scheme_type *
      Libnames.qualid Constrexpr.or_by_notation
  | VernacCombinedScheme of Names.lident * Names.lident list
  | VernacUniverse of Names.lident list
  | VernacConstraint of Constrexpr.univ_constraint_expr list
  | VernacCanonical of Libnames.qualid Constrexpr.or_by_notation
  | VernacCoercion of Libnames.qualid Constrexpr.or_by_notation *
      (coercion_class * coercion_class) option
  | VernacIdentityCoercion of Names.lident * coercion_class * coercion_class
  | VernacNameSectionHypSet of Names.lident * section_subset_expr
  | VernacInstance of Constrexpr.name_decl *
      Constrexpr.local_binder_expr list * Constrexpr.constr_expr *
      (bool * Constrexpr.constr_expr) option * hint_info_expr
  | VernacDeclareInstance of Constrexpr.ident_decl *
      Constrexpr.local_binder_expr list * Constrexpr.constr_expr *
      hint_info_expr
  | VernacContext of Constrexpr.local_binder_expr list
  | VernacExistingInstance of (Libnames.qualid * hint_info_expr) list
  | VernacExistingClass of Libnames.qualid
  | VernacResetName of Names.lident
  | VernacResetInitial
  | VernacBack of int
  | VernacCreateHintDb of string * bool
  | VernacRemoveHints of string list * Libnames.qualid list
  | VernacHints of string list * hints_expr
  | VernacSyntacticDefinition of Names.lident *
      (Names.Id.t list * Constrexpr.constr_expr) *
      syntax_modifier CAst.t list
  | VernacArguments of Libnames.qualid Constrexpr.or_by_notation *
      vernac_argument_status list *
      (Names.Name.t * Glob_term.binding_kind) list list *
      arguments_modifier list
  | VernacReserve of simple_binder list
  | VernacGeneralizable of Names.lident list option
  | VernacSetOpacity of
      (Conv_oracle.level * Libnames.qualid Constrexpr.or_by_notation list)
  | VernacSetStrategy of
      (Conv_oracle.level * Libnames.qualid Constrexpr.or_by_notation list)
      list
  | VernacMemOption of Goptions.option_name * Goptions.table_value list
  | VernacPrintOption of Goptions.option_name
  | VernacCheckMayEval of Genredexpr.raw_red_expr option *
      Goal_select.t option * Constrexpr.constr_expr
  | VernacGlobalCheck of Constrexpr.constr_expr
  | VernacDeclareReduction of string * Genredexpr.raw_red_expr
  | VernacPrint of printable
  | VernacSearch of searchable * Goal_select.t option * search_restriction
  | VernacLocate of locatable
  | VernacRegister of Libnames.qualid * register_kind
  | VernacPrimitive of Constrexpr.ident_decl * CPrimitives.op_or_type *
      Constrexpr.constr_expr option
  | VernacComments of comment list
  | VernacAbort
  | VernacAbortAll
  | VernacRestart
  | VernacUndo of int
  | VernacUndoTo of int
  | VernacFocus of int option
  | VernacUnfocus
  | VernacUnfocused
  | VernacBullet of Proof_bullet.t
  | VernacSubproof of Goal_select.t option
  | VernacEndSubproof
  | VernacShow of showable
  | VernacCheckGuard
  | VernacValidateProof
  | VernacProof of Genarg.raw_generic_argument option *
      section_subset_expr option
  | VernacAddOption of Goptions.option_name * Goptions.table_value list
  | VernacRemoveOption of Goptions.option_name * Goptions.table_value list
type 'a vernac_expr_gen =
    VernacSynterp of 'a
  | VernacSynPure of synpure_vernac_expr
type vernac_expr = synterp_vernac_expr vernac_expr_gen
type control_flag =
    ControlTime
  | ControlRedirect of string
  | ControlTimeout of int
  | ControlFail
  | ControlSucceed
type ('a, 'b) vernac_control_gen_r = {
  control : 'a list;
  attrs : Attributes.vernac_flags;
  expr : 'b vernac_expr_gen;
}
and 'a vernac_control_gen = (control_flag, 'a) vernac_control_gen_r CAst.t
("DEBUG:rule", [Tag1 (("coercion_class", 1500), (0, 0, Tag1 ([(("FunClass", 440), (0), 0, (("vernac/vernacexpr.mli", 16, 768, 790), ("vernac/vernacexpr.mli", 16, 768, 798), 0), 0, Tag1 ("Vernacexpr", 1)); (("SortClass", 441), (0), 0, (("vernac/vernacexpr.mli", 16, 768, 799), ("vernac/vernacexpr.mli", 16, 768, 810), 0), 0, Tag1 ("Vernacexpr", 2)); (("RefClass", 442), ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "or_by_notation"), [(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -604)], (0)), 100000000, 0, -603)]), 0, (("vernac/vernacexpr.mli", 16, 768, 811), ("vernac/vernacexpr.mli", 16, 768, 846), 0), 0, Tag1 ("Vernacexpr", 3))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacexpr.mli", 16, 768, 768), ("vernac/vernacexpr.mli", 16, 768, 846), 0), 0, 0, 0, Tag1 ("Vernacexpr", 0)), 1, 0); Tag1 (("goal_identifier", 1501), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -602)), 0, 0, 0, 0, (("vernac/vernacexpr.mli", 18, 848, 848), ("vernac/vernacexpr.mli", 18, 848, 877), 0), 0, 0, 0, Tag1 ("Vernacexpr", 4)), 1, 0); Tag1 (("scope_name", 1502), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -601)), 0, 0, 0, 0, (("vernac/vernacexpr.mli", 19, 878, 878), ("vernac/vernacexpr.mli", 19, 878, 902), 0), 0, 0, 0, Tag1 ("Vernacexpr", 5)), 1, 0); Tag1 (("goal_reference", 1503), (0, 0, Tag1 ([(("OpenSubgoals", 455), (0), 0, (("vernac/vernacexpr.mli", 22, 926, 928), ("vernac/vernacexpr.mli", 22, 926, 942), 0), 0, Tag1 ("Vernacexpr", 7)); (("NthGoal", 456), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -599)]), 0, (("vernac/vernacexpr.mli", 23, 943, 945), ("vernac/vernacexpr.mli", 23, 943, 961), 0), 0, Tag1 ("Vernacexpr", 8)); (("GoalId", 457), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -600)]), 0, (("vernac/vernacexpr.mli", 24, 962, 964), ("vernac/vernacexpr.mli", 24, 962, 980), 0), 0, Tag1 ("Vernacexpr", 9))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacexpr.mli", 21, 904, 904), ("vernac/vernacexpr.mli", 24, 962, 980), 0), 0, 0, 0, Tag1 ("Vernacexpr", 6)), 1, 0); Tag1 (("printable", 1504), (0, 0, Tag1 ([(("PrintTypingFlags", 475), (0), 0, (("vernac/vernacexpr.mli", 27, 999, 1001), ("vernac/vernacexpr.mli", 27, 999, 1019), 0), 0, Tag1 ("Vernacexpr", 11)); (("PrintTables", 476), (0), 0, (("vernac/vernacexpr.mli", 28, 1020, 1022), ("vernac/vernacexpr.mli", 28, 1020, 1035), 0), 0, Tag1 ("Vernacexpr", 12)); (("PrintFullContext", 477), (0), 0, (("vernac/vernacexpr.mli", 29, 1036, 1038), ("vernac/vernacexpr.mli", 29, 1036, 1056), 0), 0, Tag1 ("Vernacexpr", 13)); (("PrintSectionContext", 478), ([(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -549)]), 0, (("vernac/vernacexpr.mli", 30, 1057, 1059), ("vernac/vernacexpr.mli", 30, 1057, 1090), 0), 0, Tag1 ("Vernacexpr", 14)); (("PrintInspect", 479), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -550)]), 0, (("vernac/vernacexpr.mli", 31, 1091, 1093), ("vernac/vernacexpr.mli", 31, 1091, 1114), 0), 0, Tag1 ("Vernacexpr", 15)); (("PrintGrammar", 480), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -552)], (0)), 100000000, 0, -551)]), 0, (("vernac/vernacexpr.mli", 32, 1115, 1117), ("vernac/vernacexpr.mli", 32, 1115, 1146), 0), 0, Tag1 ("Vernacexpr", 16)); (("PrintCustomGrammar", 481), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -553)]), 0, (("vernac/vernacexpr.mli", 33, 1147, 1149), ("vernac/vernacexpr.mli", 33, 1147, 1179), 0), 0, Tag1 ("Vernacexpr", 17)); (("PrintKeywords", 482), (0), 0, (("vernac/vernacexpr.mli", 34, 1180, 1182), ("vernac/vernacexpr.mli", 34, 1180, 1197), 0), 0, Tag1 ("Vernacexpr", 18)); (("PrintLoadPath", 483), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "DirPath"), "t"), 0, (0)), 100000000, 0, -555)], (0)), 100000000, 0, -554)]), 0, (("vernac/vernacexpr.mli", 35, 1198, 1200), ("vernac/vernacexpr.mli", 35, 1198, 1235), 0), 0, Tag1 ("Vernacexpr", 19)); (("PrintLibraries", 496), (0), 0, (("vernac/vernacexpr.mli", 36, 1236, 1238), ("vernac/vernacexpr.mli", 36, 1236, 1254), 0), 0, Tag1 ("Vernacexpr", 20)); (("PrintModule", 497), ([(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -556)]), 0, (("vernac/vernacexpr.mli", 37, 1255, 1257), ("vernac/vernacexpr.mli", 37, 1255, 1280), 0), 0, Tag1 ("Vernacexpr", 21)); (("PrintModuleType", 498), ([(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -557)]), 0, (("vernac/vernacexpr.mli", 38, 1281, 1283), ("vernac/vernacexpr.mli", 38, 1281, 1310), 0), 0, Tag1 ("Vernacexpr", 22)); (("PrintNamespace", 499), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "DirPath"), "t"), 0, (0)), 100000000, 0, -558)]), 0, (("vernac/vernacexpr.mli", 39, 1311, 1313), ("vernac/vernacexpr.mli", 39, 1311, 1342), 0), 0, Tag1 ("Vernacexpr", 23)); (("PrintMLLoadPath", 500), (0), 0, (("vernac/vernacexpr.mli", 40, 1343, 1345), ("vernac/vernacexpr.mli", 40, 1343, 1362), 0), 0, Tag1 ("Vernacexpr", 24)); (("PrintMLModules", 501), (0), 0, (("vernac/vernacexpr.mli", 41, 1363, 1365), ("vernac/vernacexpr.mli", 41, 1363, 1381), 0), 0, Tag1 ("Vernacexpr", 25)); (("PrintDebugGC", 502), (0), 0, (("vernac/vernacexpr.mli", 42, 1382, 1384), ("vernac/vernacexpr.mli", 42, 1382, 1398), 0), 0, Tag1 ("Vernacexpr", 26)); (("PrintName", 503), ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "or_by_notation"), [(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -560)], (0)), 100000000, 0, -559); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("UnivNames")), "univ_name_list"), 0, (0)), 100000000, 0, -562)], (0)), 100000000, 0, -561)]), 0, (("vernac/vernacexpr.mli", 43, 1399, 1401), ("vernac/vernacexpr.mli", 43, 1399, 1471), 0), 0, Tag1 ("Vernacexpr", 27)); (("PrintGraph", 509), (0), 0, (("vernac/vernacexpr.mli", 44, 1472, 1474), ("vernac/vernacexpr.mli", 44, 1472, 1486), 0), 0, Tag1 ("Vernacexpr", 28)); (("PrintClasses", 510), (0), 0, (("vernac/vernacexpr.mli", 45, 1487, 1489), ("vernac/vernacexpr.mli", 45, 1487, 1503), 0), 0, Tag1 ("Vernacexpr", 29)); (("PrintTypeclasses", 511), (0), 0, (("vernac/vernacexpr.mli", 46, 1504, 1506), ("vernac/vernacexpr.mli", 46, 1504, 1524), 0), 0, Tag1 ("Vernacexpr", 30)); (("PrintInstances", 512), ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "or_by_notation"), [(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -564)], (0)), 100000000, 0, -563)]), 0, (("vernac/vernacexpr.mli", 47, 1525, 1527), ("vernac/vernacexpr.mli", 47, 1525, 1568), 0), 0, Tag1 ("Vernacexpr", 31)); (("PrintCoercions", 513), (0), 0, (("vernac/vernacexpr.mli", 48, 1569, 1571), ("vernac/vernacexpr.mli", 48, 1569, 1587), 0), 0, Tag1 ("Vernacexpr", 32)); (("PrintCoercionPaths", 514), ([(Tag3 ((("coercion_class", 1500)), 0, (0)), 100000000, 0, -565); (Tag3 ((("coercion_class", 1500)), 0, (0)), 100000000, 0, -566)]), 0, (("vernac/vernacexpr.mli", 49, 1588, 1590), ("vernac/vernacexpr.mli", 49, 1588, 1645), 0), 0, Tag1 ("Vernacexpr", 33)); (("PrintCanonicalConversions", 515), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "or_by_notation"), [(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -569)], (0)), 100000000, 0, -568)], (0)), 100000000, 0, -567)]), 0, (("vernac/vernacexpr.mli", 50, 1646, 1648), ("vernac/vernacexpr.mli", 50, 1646, 1705), 0), 0, Tag1 ("Vernacexpr", 34)); (("PrintUniverses", 516), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -570); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -573)], (0)), 100000000, 0, -572)], (0)), 100000000, 0, -571); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -575)], (0)), 100000000, 0, -574)]), 0, (("vernac/vernacexpr.mli", 51, 1706, 1708), ("vernac/vernacexpr.mli", 51, 1706, 1769), 0), 0, Tag1 ("Vernacexpr", 35)); (("PrintHint", 517), ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "or_by_notation"), [(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -577)], (0)), 100000000, 0, -576)]), 0, (("vernac/vernacexpr.mli", 52, 1770, 1772), ("vernac/vernacexpr.mli", 52, 1770, 1808), 0), 0, Tag1 ("Vernacexpr", 36)); (("PrintHintGoal", 518), (0), 0, (("vernac/vernacexpr.mli", 53, 1809, 1811), ("vernac/vernacexpr.mli", 53, 1809, 1826), 0), 0, Tag1 ("Vernacexpr", 37)); (("PrintHintDbName", 519), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -578)]), 0, (("vernac/vernacexpr.mli", 54, 1827, 1829), ("vernac/vernacexpr.mli", 54, 1827, 1856), 0), 0, Tag1 ("Vernacexpr", 38)); (("PrintHintDb", 520), (0), 0, (("vernac/vernacexpr.mli", 55, 1857, 1859), ("vernac/vernacexpr.mli", 55, 1857, 1872), 0), 0, Tag1 ("Vernacexpr", 39)); (("PrintScopes", 521), (0), 0, (("vernac/vernacexpr.mli", 56, 1873, 1875), ("vernac/vernacexpr.mli", 56, 1873, 1888), 0), 0, Tag1 ("Vernacexpr", 40)); (("PrintScope", 522), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -579)]), 0, (("vernac/vernacexpr.mli", 57, 1889, 1891), ("vernac/vernacexpr.mli", 57, 1889, 1913), 0), 0, Tag1 ("Vernacexpr", 41)); (("PrintVisibility", 523), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -581)], (0)), 100000000, 0, -580)]), 0, (("vernac/vernacexpr.mli", 58, 1914, 1916), ("vernac/vernacexpr.mli", 58, 1914, 1950), 0), 0, Tag1 ("Vernacexpr", 42)); (("PrintAbout", 524), ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "or_by_notation"), [(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -583)], (0)), 100000000, 0, -582); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("UnivNames")), "univ_name_list"), 0, (0)), 100000000, 0, -585)], (0)), 100000000, 0, -584); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Goal_select")), "t"), 0, (0)), 100000000, 0, -587)], (0)), 100000000, 0, -586)]), 0, (("vernac/vernacexpr.mli", 59, 1951, 1953), ("vernac/vernacexpr.mli", 59, 1951, 2047), 0), 0, Tag1 ("Vernacexpr", 43)); (("PrintImplicit", 529), ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "or_by_notation"), [(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -589)], (0)), 100000000, 0, -588)]), 0, (("vernac/vernacexpr.mli", 60, 2048, 2050), ("vernac/vernacexpr.mli", 60, 2048, 2090), 0), 0, Tag1 ("Vernacexpr", 44)); (("PrintAssumptions", 530), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -590); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -591); (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "or_by_notation"), [(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -593)], (0)), 100000000, 0, -592)]), 0, (("vernac/vernacexpr.mli", 61, 2091, 2093), ("vernac/vernacexpr.mli", 61, 2091, 2150), 0), 0, Tag1 ("Vernacexpr", 45)); (("PrintStrategy", 531), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "or_by_notation"), [(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -596)], (0)), 100000000, 0, -595)], (0)), 100000000, 0, -594)]), 0, (("vernac/vernacexpr.mli", 62, 2151, 2153), ("vernac/vernacexpr.mli", 62, 2151, 2200), 0), 0, Tag1 ("Vernacexpr", 46)); (("PrintRegistered", 532), (0), 0, (("vernac/vernacexpr.mli", 63, 2201, 2203), ("vernac/vernacexpr.mli", 63, 2201, 2220), 0), 0, Tag1 ("Vernacexpr", 47)); (("PrintNotation", 533), ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "notation_entry"), 0, (0)), 100000000, 0, -597); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -598)]), 0, (("vernac/vernacexpr.mli", 64, 2221, 2223), ("vernac/vernacexpr.mli", 64, 2221, 2276), 0), 0, Tag1 ("Vernacexpr", 48))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacexpr.mli", 26, 982, 982), ("vernac/vernacexpr.mli", 64, 2221, 2276), 0), 0, 0, 0, Tag1 ("Vernacexpr", 10)), 1, 0); Tag1 (("glob_search_where", 1505), (0, 0, Tag1 ([(("InHyp", 544), (0), 0, (("vernac/vernacexpr.mli", 66, 2278, 2303), ("vernac/vernacexpr.mli", 66, 2278, 2308), 0), 0, Tag1 ("Vernacexpr", 50)); (("InConcl", 545), (0), 0, (("vernac/vernacexpr.mli", 66, 2278, 2309), ("vernac/vernacexpr.mli", 66, 2278, 2318), 0), 0, Tag1 ("Vernacexpr", 51)); (("Anywhere", 546), (0), 0, (("vernac/vernacexpr.mli", 66, 2278, 2319), ("vernac/vernacexpr.mli", 66, 2278, 2329), 0), 0, Tag1 ("Vernacexpr", 52))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacexpr.mli", 66, 2278, 2278), ("vernac/vernacexpr.mli", 66, 2278, 2329), 0), 0, 1, 0, Tag1 ("Vernacexpr", 49)), 1, 0); Tag1 (("search_item", 1506), (0, 0, Tag1 ([(("SearchSubPattern", 548), ([(Tag2 ([(Tag3 ((("glob_search_where", 1505)), 0, (0)), 100000000, 0, -539); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -540)]), 100000000, 0, -538); (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_pattern_expr"), 0, (0)), 100000000, 0, -541)]), 0, (("vernac/vernacexpr.mli", 69, 2350, 2352), ("vernac/vernacexpr.mli", 69, 2350, 2422), 0), 0, Tag1 ("Vernacexpr", 54)); (("SearchString", 549), ([(Tag2 ([(Tag3 ((("glob_search_where", 1505)), 0, (0)), 100000000, 0, -543); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -544)]), 100000000, 0, -542); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -545); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("scope_name", 1502)), 0, (0)), 100000000, 0, -547)], (0)), 100000000, 0, -546)]), 0, (("vernac/vernacexpr.mli", 70, 2423, 2425), ("vernac/vernacexpr.mli", 70, 2423, 2498), 0), 0, Tag1 ("Vernacexpr", 55)); (("SearchKind", 550), ([(Tag3 (Tag1 ((Tag2 ("Decls")), "logical_kind"), 0, (0)), 100000000, 0, -548)]), 0, (("vernac/vernacexpr.mli", 71, 2499, 2501), ("vernac/vernacexpr.mli", 71, 2499, 2535), 0), 0, Tag1 ("Vernacexpr", 56))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacexpr.mli", 68, 2331, 2331), ("vernac/vernacexpr.mli", 71, 2499, 2535), 0), 0, 0, 0, Tag1 ("Vernacexpr", 53)), 1, 0); Tag1 (("search_request", 1507), (0, 0, Tag1 ([(("SearchLiteral", 562), ([(Tag3 ((("search_item", 1506)), 0, (0)), 100000000, 0, -532)]), 0, (("vernac/vernacexpr.mli", 74, 2559, 2561), ("vernac/vernacexpr.mli", 74, 2559, 2591), 0), 0, Tag1 ("Vernacexpr", 58)); (("SearchDisjConj", 563), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -536); (Tag3 ((("search_request", 1507)), 0, (0)), 100000000, 0, -537)]), 100000000, 0, -535)], (0)), 100000000, 0, -534)], (0)), 100000000, 0, -533)]), 0, (("vernac/vernacexpr.mli", 75, 2592, 2594), ("vernac/vernacexpr.mli", 75, 2592, 2647), 0), 0, Tag1 ("Vernacexpr", 59))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacexpr.mli", 73, 2537, 2537), ("vernac/vernacexpr.mli", 75, 2592, 2647), 0), 0, 0, 0, Tag1 ("Vernacexpr", 57)), 1, 0); Tag1 (("searchable", 1508), (0, 0, Tag1 ([(("SearchPattern", 565), ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_pattern_expr"), 0, (0)), 100000000, 0, -526)]), 0, (("vernac/vernacexpr.mli", 78, 2667, 2669), ("vernac/vernacexpr.mli", 78, 2667, 2707), 0), 0, Tag1 ("Vernacexpr", 61)); (("SearchRewrite", 566), ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_pattern_expr"), 0, (0)), 100000000, 0, -527)]), 0, (("vernac/vernacexpr.mli", 79, 2708, 2710), ("vernac/vernacexpr.mli", 79, 2708, 2748), 0), 0, Tag1 ("Vernacexpr", 62)); (("Search", 567), ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -530); (Tag3 ((("search_request", 1507)), 0, (0)), 100000000, 0, -531)]), 100000000, 0, -529)], (0)), 100000000, 0, -528)]), 0, (("vernac/vernacexpr.mli", 80, 2749, 2751), ("vernac/vernacexpr.mli", 80, 2749, 2791), 0), 0, Tag1 ("Vernacexpr", 63))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacexpr.mli", 77, 2649, 2649), ("vernac/vernacexpr.mli", 80, 2749, 2791), 0), 0, 0, 0, Tag1 ("Vernacexpr", 60)), 1, 0); Tag1 (("locatable", 1509), (0, 0, Tag1 ([(("LocateAny", 569), ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "or_by_notation"), [(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -518)], (0)), 100000000, 0, -517)]), 0, (("vernac/vernacexpr.mli", 83, 2810, 2812), ("vernac/vernacexpr.mli", 83, 2810, 2848), 0), 0, Tag1 ("Vernacexpr", 65)); (("LocateTerm", 570), ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "or_by_notation"), [(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -520)], (0)), 100000000, 0, -519)]), 0, (("vernac/vernacexpr.mli", 84, 2849, 2851), ("vernac/vernacexpr.mli", 84, 2849, 2888), 0), 0, Tag1 ("Vernacexpr", 66)); (("LocateLibrary", 571), ([(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -521)]), 0, (("vernac/vernacexpr.mli", 85, 2889, 2891), ("vernac/vernacexpr.mli", 85, 2889, 2916), 0), 0, Tag1 ("Vernacexpr", 67)); (("LocateModule", 572), ([(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -522)]), 0, (("vernac/vernacexpr.mli", 86, 2917, 2919), ("vernac/vernacexpr.mli", 86, 2917, 2943), 0), 0, Tag1 ("Vernacexpr", 68)); (("LocateOther", 573), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -523); (Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -524)]), 0, (("vernac/vernacexpr.mli", 87, 2944, 2946), ("vernac/vernacexpr.mli", 87, 2944, 2978), 0), 0, Tag1 ("Vernacexpr", 69)); (("LocateFile", 574), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -525)]), 0, (("vernac/vernacexpr.mli", 88, 2979, 2981), ("vernac/vernacexpr.mli", 88, 2979, 3003), 0), 0, Tag1 ("Vernacexpr", 70))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacexpr.mli", 82, 2793, 2793), ("vernac/vernacexpr.mli", 88, 2979, 3003), 0), 0, 0, 0, Tag1 ("Vernacexpr", 64)), 1, 0); Tag1 (("showable", 1510), (0, 0, Tag1 ([(("ShowGoal", 576), ([(Tag3 ((("goal_reference", 1503)), 0, (0)), 100000000, 0, -514)]), 0, (("vernac/vernacexpr.mli", 91, 3021, 3023), ("vernac/vernacexpr.mli", 91, 3021, 3051), 0), 0, Tag1 ("Vernacexpr", 72)); (("ShowProof", 577), (0), 0, (("vernac/vernacexpr.mli", 92, 3052, 3054), ("vernac/vernacexpr.mli", 92, 3052, 3065), 0), 0, Tag1 ("Vernacexpr", 73)); (("ShowExistentials", 578), (0), 0, (("vernac/vernacexpr.mli", 93, 3066, 3068), ("vernac/vernacexpr.mli", 93, 3066, 3086), 0), 0, Tag1 ("Vernacexpr", 74)); (("ShowUniverses", 579), (0), 0, (("vernac/vernacexpr.mli", 94, 3087, 3089), ("vernac/vernacexpr.mli", 94, 3087, 3104), 0), 0, Tag1 ("Vernacexpr", 75)); (("ShowProofNames", 580), (0), 0, (("vernac/vernacexpr.mli", 95, 3105, 3107), ("vernac/vernacexpr.mli", 95, 3105, 3123), 0), 0, Tag1 ("Vernacexpr", 76)); (("ShowIntros", 581), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -515)]), 0, (("vernac/vernacexpr.mli", 96, 3124, 3126), ("vernac/vernacexpr.mli", 96, 3124, 3146), 0), 0, Tag1 ("Vernacexpr", 77)); (("ShowMatch", 582), ([(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -516)]), 0, (("vernac/vernacexpr.mli", 97, 3147, 3149), ("vernac/vernacexpr.mli", 97, 3147, 3170), 0), 0, Tag1 ("Vernacexpr", 78))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacexpr.mli", 90, 3005, 3005), ("vernac/vernacexpr.mli", 97, 3147, 3170), 0), 0, 0, 0, Tag1 ("Vernacexpr", 71)), 1, 0); Tag1 (("comment", 1511), (0, 0, Tag1 ([(("CommentConstr", 584), ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -511)]), 0, (("vernac/vernacexpr.mli", 100, 3187, 3189), ("vernac/vernacexpr.mli", 100, 3187, 3219), 0), 0, Tag1 ("Vernacexpr", 80)); (("CommentString", 585), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -512)]), 0, (("vernac/vernacexpr.mli", 101, 3220, 3222), ("vernac/vernacexpr.mli", 101, 3220, 3247), 0), 0, Tag1 ("Vernacexpr", 81)); (("CommentInt", 586), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -513)]), 0, (("vernac/vernacexpr.mli", 102, 3248, 3250), ("vernac/vernacexpr.mli", 102, 3248, 3269), 0), 0, Tag1 ("Vernacexpr", 82))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacexpr.mli", 99, 3172, 3172), ("vernac/vernacexpr.mli", 102, 3248, 3269), 0), 0, 0, 0, Tag1 ("Vernacexpr", 79)), 1, 0); Tag1 (("search_restriction", 1512), (0, 0, Tag1 ([(("SearchInside", 588), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -508)], (0)), 100000000, 0, -507)]), 0, (("vernac/vernacexpr.mli", 105, 3297, 3299), ("vernac/vernacexpr.mli", 105, 3297, 3328), 0), 0, Tag1 ("Vernacexpr", 84)); (("SearchOutside", 589), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -510)], (0)), 100000000, 0, -509)]), 0, (("vernac/vernacexpr.mli", 106, 3329, 3331), ("vernac/vernacexpr.mli", 106, 3329, 3361), 0), 0, Tag1 ("Vernacexpr", 85))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacexpr.mli", 104, 3271, 3271), ("vernac/vernacexpr.mli", 106, 3329, 3361), 0), 0, 0, 0, Tag1 ("Vernacexpr", 83)), 1, 0); Tag1 (("verbose_flag", 1513), (0, 0, 0, 1, ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -506)), 0, 0, 0, 0, (("vernac/vernacexpr.mli", 108, 3363, 3363), ("vernac/vernacexpr.mli", 108, 3363, 3389), 0), 0, 1, 0, Tag1 ("Vernacexpr", 86)), 1, 0); Tag1 (("coercion_flag", 1514), (0, 0, Tag1 ([(("AddCoercion", 592), (0), 0, (("vernac/vernacexpr.mli", 109, 3441, 3463), ("vernac/vernacexpr.mli", 109, 3441, 3474), 0), 0, Tag1 ("Vernacexpr", 88)); (("NoCoercion", 593), (0), 0, (("vernac/vernacexpr.mli", 109, 3441, 3475), ("vernac/vernacexpr.mli", 109, 3441, 3487), 0), 0, Tag1 ("Vernacexpr", 89))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacexpr.mli", 109, 3441, 3441), ("vernac/vernacexpr.mli", 109, 3441, 3487), 0), 0, 1, 0, Tag1 ("Vernacexpr", 87)), 1, 0); Tag1 (("instance_flag", 1515), (0, 0, Tag1 ([(("BackInstance", 595), (0), 0, (("vernac/vernacexpr.mli", 113, 3651, 3673), ("vernac/vernacexpr.mli", 113, 3651, 3685), 0), 0, Tag1 ("Vernacexpr", 91)); (("BackInstanceWarning", 596), (0), 0, (("vernac/vernacexpr.mli", 113, 3651, 3686), ("vernac/vernacexpr.mli", 113, 3651, 3707), 0), 0, Tag1 ("Vernacexpr", 92)); (("NoInstance", 597), (0), 0, (("vernac/vernacexpr.mli", 113, 3651, 3708), ("vernac/vernacexpr.mli", 113, 3651, 3720), 0), 0, Tag1 ("Vernacexpr", 93))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacexpr.mli", 113, 3651, 3651), ("vernac/vernacexpr.mli", 113, 3651, 3720), 0), 0, 1, 0, Tag1 ("Vernacexpr", 90)), 1, 0); Tag1 (("export_flag", 1516), (0, 0, Tag1 ([(("Export", 599), (0), 0, (("vernac/vernacexpr.mli", 115, 3722, 3759), ("vernac/vernacexpr.mli", 115, 3722, 3765), 0), 0, Tag1 ("Vernacexpr", 95)); (("Import", 600), (0), 0, (("vernac/vernacexpr.mli", 115, 3722, 3766), ("vernac/vernacexpr.mli", 115, 3722, 3774), 0), 0, Tag1 ("Vernacexpr", 96))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Lib")), "export_flag"), 0, (0)), 100000000, 0, -505)), 0, 0, 0, 0, (("vernac/vernacexpr.mli", 115, 3722, 3722), ("vernac/vernacexpr.mli", 115, 3722, 3774), 0), 0, 1, 0, Tag1 ("Vernacexpr", 94)), 1, 0); Tag1 (("import_categories", 1517), (0, 0, [[(("negative", 644), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -501), (("vernac/vernacexpr.mli", 118, 3803, 3805), ("vernac/vernacexpr.mli", 118, 3803, 3821), 0), 0, Tag1 ("Vernacexpr", 98)); (("import_cats", 645), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -504)], (0)), 100000000, 0, -503)], (0)), 100000000, 0, -502), (("vernac/vernacexpr.mli", 119, 3822, 3824), ("vernac/vernacexpr.mli", 119, 3822, 3857), 0), 0, Tag1 ("Vernacexpr", 99))]], 1, 0, 0, 0, 0, 0, (("vernac/vernacexpr.mli", 117, 3776, 3776), ("vernac/vernacexpr.mli", 120, 3858, 3859), 0), 0, 0, 0, Tag1 ("Vernacexpr", 97)), 1, 0); Tag1 (("export_with_cats", 1518), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((("export_flag", 1516)), 0, (0)), 100000000, 0, -498); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("import_categories", 1517)), 0, (0)), 100000000, 0, -500)], (0)), 100000000, 0, -499)]), 100000000, 0, -497)), 0, 0, 0, 0, (("vernac/vernacexpr.mli", 122, 3861, 3861), ("vernac/vernacexpr.mli", 122, 3861, 3923), 0), 0, 0, 0, Tag1 ("Vernacexpr", 100)), 1, 0); Tag1 (("infix_flag", 1519), (0, 0, 0, 1, ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -496)), 0, 0, 0, 0, (("vernac/vernacexpr.mli", 124, 3925, 3925), ("vernac/vernacexpr.mli", 124, 3925, 3951), 0), 0, 1, 0, Tag1 ("Vernacexpr", 101)), 1, 0); Tag1 (("one_import_filter_name", 1520), (0, 0, 0, 1, ((Tag2 ([(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -494); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -495)]), 100000000, 0, -493)), 0, 0, 0, 0, (("vernac/vernacexpr.mli", 126, 4004, 4004), ("vernac/vernacexpr.mli", 126, 4004, 4047), 0), 0, 0, 0, Tag1 ("Vernacexpr", 102)), 1, 0); Tag1 (("import_filter_expr", 1521), (0, 0, Tag1 ([(("ImportAll", 650), (0), 0, (("vernac/vernacexpr.mli", 128, 4108, 4110), ("vernac/vernacexpr.mli", 128, 4108, 4121), 0), 0, Tag1 ("Vernacexpr", 104)); (("ImportNames", 651), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("one_import_filter_name", 1520)), 0, (0)), 100000000, 0, -492)], (0)), 100000000, 0, -491)]), 0, (("vernac/vernacexpr.mli", 129, 4122, 4124), ("vernac/vernacexpr.mli", 129, 4122, 4168), 0), 0, Tag1 ("Vernacexpr", 105))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacexpr.mli", 127, 4082, 4082), ("vernac/vernacexpr.mli", 129, 4122, 4168), 0), 0, 0, 0, Tag1 ("Vernacexpr", 103)), 1, 0); Tag1 (("locality_flag", 1522), (0, 0, 0, 1, ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -490)), 0, 0, 0, 0, (("vernac/vernacexpr.mli", 131, 4170, 4170), ("vernac/vernacexpr.mli", 131, 4170, 4196), 0), 0, 1, 0, Tag1 ("Vernacexpr", 106)), 1, 0); Tag1 (("option_setting", 1523), (0, 0, Tag1 ([(("OptionUnset", 654), (0), 0, (("vernac/vernacexpr.mli", 134, 4239, 4241), ("vernac/vernacexpr.mli", 134, 4239, 4254), 0), 0, Tag1 ("Vernacexpr", 108)); (("OptionSetTrue", 655), (0), 0, (("vernac/vernacexpr.mli", 135, 4255, 4257), ("vernac/vernacexpr.mli", 135, 4255, 4272), 0), 0, Tag1 ("Vernacexpr", 109)); (("OptionSetInt", 656), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -488)]), 0, (("vernac/vernacexpr.mli", 136, 4273, 4275), ("vernac/vernacexpr.mli", 136, 4273, 4296), 0), 0, Tag1 ("Vernacexpr", 110)); (("OptionSetString", 657), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -489)]), 0, (("vernac/vernacexpr.mli", 137, 4297, 4299), ("vernac/vernacexpr.mli", 137, 4297, 4326), 0), 0, Tag1 ("Vernacexpr", 111))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacexpr.mli", 133, 4217, 4217), ("vernac/vernacexpr.mli", 137, 4297, 4326), 0), 0, 0, 0, Tag1 ("Vernacexpr", 107)), 1, 0); Tag1 (("definition_expr", 1524), (0, 0, Tag1 ([(("ProveBody", 659), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "local_binder_expr"), 0, (0)), 100000000, 0, -479)], (0)), 100000000, 0, -478); (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -480)]), 0, (("vernac/vernacexpr.mli", 142, 4424, 4426), ("vernac/vernacexpr.mli", 142, 4424, 4477), 0), 0, Tag1 ("Vernacexpr", 113)); (("DefineBody", 660), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "local_binder_expr"), 0, (0)), 100000000, 0, -482)], (0)), 100000000, 0, -481); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Genredexpr")), "raw_red_expr"), 0, (0)), 100000000, 0, -484)], (0)), 100000000, 0, -483); (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -485); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -487)], (0)), 100000000, 0, -486)]), 0, (("vernac/vernacexpr.mli", 143, 4478, 4480), ("vernac/vernacexpr.mli", 144, 4566, 4592), 0), 0, Tag1 ("Vernacexpr", 114))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacexpr.mli", 141, 4401, 4401), ("vernac/vernacexpr.mli", 144, 4566, 4592), 0), 0, 0, 0, Tag1 ("Vernacexpr", 112)), 1, 0); Tag1 (("notation_format", 1525), (0, 0, Tag1 ([(("TextFormat", 672), ([(Tag3 (Tag1 ((Tag2 ("Names")), "lstring"), 0, (0)), 100000000, 0, -477)]), 0, (("vernac/vernacexpr.mli", 147, 4617, 4619), ("vernac/vernacexpr.mli", 147, 4617, 4642), 0), 0, Tag1 ("Vernacexpr", 116))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacexpr.mli", 146, 4594, 4594), ("vernac/vernacexpr.mli", 147, 4617, 4642), 0), 0, 0, 1, Tag1 ("Vernacexpr", 115)), 1, 0); Tag1 (("syntax_modifier", 1526), (0, 0, Tag1 ([(("SetItemLevel", 674), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -462)], (0)), 100000000, 0, -461); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Notation_term")), "notation_binder_kind"), 0, (0)), 100000000, 0, -464)], (0)), 100000000, 0, -463); (Tag3 (Tag1 ((Tag2 ("Extend")), "production_level"), 0, (0)), 100000000, 0, -465)]), 0, (("vernac/vernacexpr.mli", 150, 4667, 4669), ("vernac/vernacexpr.mli", 150, 4667, 4768), 0), 0, Tag1 ("Vernacexpr", 118)); (("SetItemScope", 699), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -467)], (0)), 100000000, 0, -466); (Tag3 ((("scope_name", 1502)), 0, (0)), 100000000, 0, -468)]), 0, (("vernac/vernacexpr.mli", 151, 4769, 4771), ("vernac/vernacexpr.mli", 151, 4769, 4813), 0), 0, Tag1 ("Vernacexpr", 119)); (("SetLevel", 700), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -469)]), 0, (("vernac/vernacexpr.mli", 152, 4814, 4816), ("vernac/vernacexpr.mli", 152, 4814, 4833), 0), 0, Tag1 ("Vernacexpr", 120)); (("SetCustomEntry", 701), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -470); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -472)], (0)), 100000000, 0, -471)]), 0, (("vernac/vernacexpr.mli", 153, 4834, 4836), ("vernac/vernacexpr.mli", 153, 4834, 4875), 0), 0, Tag1 ("Vernacexpr", 121)); (("SetAssoc", 702), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Gramlib")), "Gramext"), "g_assoc"), 0, (0)), 100000000, 0, -473)]), 0, (("vernac/vernacexpr.mli", 154, 4876, 4878), ("vernac/vernacexpr.mli", 154, 4876, 4915), 0), 0, Tag1 ("Vernacexpr", 122)); (("SetEntryType", 711), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -474); (Tag3 (Tag1 ((Tag2 ("Extend")), "simple_constr_prod_entry_key"), 0, (0)), 100000000, 0, -475)]), 0, (("vernac/vernacexpr.mli", 155, 4916, 4918), ("vernac/vernacexpr.mli", 155, 4916, 4980), 0), 0, Tag1 ("Vernacexpr", 123)); (("SetOnlyParsing", 712), (0), 0, (("vernac/vernacexpr.mli", 156, 4981, 4983), ("vernac/vernacexpr.mli", 156, 4981, 4999), 0), 0, Tag1 ("Vernacexpr", 124)); (("SetOnlyPrinting", 713), (0), 0, (("vernac/vernacexpr.mli", 157, 5000, 5002), ("vernac/vernacexpr.mli", 157, 5000, 5019), 0), 0, Tag1 ("Vernacexpr", 125)); (("SetFormat", 714), ([(Tag3 ((("notation_format", 1525)), 0, (0)), 100000000, 0, -476)]), 0, (("vernac/vernacexpr.mli", 158, 5020, 5022), ("vernac/vernacexpr.mli", 158, 5020, 5052), 0), 0, Tag1 ("Vernacexpr", 126))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacexpr.mli", 149, 4644, 4644), ("vernac/vernacexpr.mli", 158, 5020, 5052), 0), 0, 0, 0, Tag1 ("Vernacexpr", 117)), 1, 0); Tag1 (("notation_enable_modifier", 1527), (0, 0, Tag1 ([(("EnableNotationEntry", 719), ([(Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "notation_entry"), 0, (0)), 100000000, 0, -459)], (0)), 100000000, 0, -458)]), 0, (("vernac/vernacexpr.mli", 161, 5086, 5088), ("vernac/vernacexpr.mli", 161, 5086, 5134), 0), 0, Tag1 ("Vernacexpr", 128)); (("EnableNotationOnly", 720), ([(Tag3 (Tag1 ((Tag2 ("Notationextern")), "notation_use"), 0, (0)), 100000000, 0, -460)]), 0, (("vernac/vernacexpr.mli", 162, 5135, 5137), ("vernac/vernacexpr.mli", 162, 5135, 5188), 0), 0, Tag1 ("Vernacexpr", 129)); (("EnableNotationAll", 745), (0), 0, (("vernac/vernacexpr.mli", 163, 5189, 5191), ("vernac/vernacexpr.mli", 163, 5189, 5210), 0), 0, Tag1 ("Vernacexpr", 130))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacexpr.mli", 160, 5054, 5054), ("vernac/vernacexpr.mli", 163, 5189, 5210), 0), 0, 0, 0, Tag1 ("Vernacexpr", 127)), 1, 0); Tag1 (("notation_declaration", 1528), (0, 0, [[(("ntn_decl_string", 747), 0, (Tag3 (Tag1 ((Tag2 ("Names")), "lstring"), 0, (0)), 100000000, 0, -451), (("vernac/vernacexpr.mli", 166, 5240, 5244), ("vernac/vernacexpr.mli", 167, 5270, 5273), 0), 0, Tag1 ("Vernacexpr", 132)); (("ntn_decl_interp", 748), 0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -452), (("vernac/vernacexpr.mli", 167, 5270, 5274), ("vernac/vernacexpr.mli", 168, 5304, 5307), 0), 0, Tag1 ("Vernacexpr", 133)); (("ntn_decl_scope", 749), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("scope_name", 1502)), 0, (0)), 100000000, 0, -454)], (0)), 100000000, 0, -453), (("vernac/vernacexpr.mli", 168, 5304, 5308), ("vernac/vernacexpr.mli", 169, 5343, 5346), 0), 0, Tag1 ("Vernacexpr", 134)); (("ntn_decl_modifiers", 750), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((("syntax_modifier", 1526)), 0, (0)), 100000000, 0, -457)], (0)), 100000000, 0, -456)], (0)), 100000000, 0, -455), (("vernac/vernacexpr.mli", 169, 5343, 5347), ("vernac/vernacexpr.mli", 169, 5343, 5395), 0), 0, Tag1 ("Vernacexpr", 135))]], 1, 0, 0, 0, 0, 0, (("vernac/vernacexpr.mli", 165, 5212, 5212), ("vernac/vernacexpr.mli", 170, 5396, 5399), 0), 0, 0, 0, Tag1 ("Vernacexpr", 131)), 1, 0); Tag1 (("fix_expr_gen", 1529), ([((("a")), 100000000, 0, -443)], 1, [[(("fname", 752), 0, (Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -440), (("vernac/vernacexpr.mli", 173, 5424, 5428), ("vernac/vernacexpr.mli", 174, 5443, 5446), 0), 0, Tag1 ("Vernacexpr", 137)); (("univs", 753), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "universe_decl_expr"), 0, (0)), 100000000, 0, -442)], (0)), 100000000, 0, -441), (("vernac/vernacexpr.mli", 174, 5443, 5447), ("vernac/vernacexpr.mli", 175, 5481, 5484), 0), 0, Tag1 ("Vernacexpr", 138)); (("rec_order", 754), 0, ((("a")), 100000000, 0, -443), (("vernac/vernacexpr.mli", 175, 5481, 5485), ("vernac/vernacexpr.mli", 176, 5500, 5503), 0), 0, Tag1 ("Vernacexpr", 139)); (("binders", 755), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "local_binder_expr"), 0, (0)), 100000000, 0, -445)], (0)), 100000000, 0, -444), (("vernac/vernacexpr.mli", 176, 5500, 5504), ("vernac/vernacexpr.mli", 177, 5537, 5540), 0), 0, Tag1 ("Vernacexpr", 140)); (("rtype", 756), 0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -446), (("vernac/vernacexpr.mli", 177, 5537, 5541), ("vernac/vernacexpr.mli", 178, 5561, 5564), 0), 0, Tag1 ("Vernacexpr", 141)); (("body_def", 757), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -448)], (0)), 100000000, 0, -447), (("vernac/vernacexpr.mli", 178, 5561, 5565), ("vernac/vernacexpr.mli", 179, 5595, 5598), 0), 0, Tag1 ("Vernacexpr", 142)); (("notations", 758), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("notation_declaration", 1528)), 0, (0)), 100000000, 0, -450)], (0)), 100000000, 0, -449), (("vernac/vernacexpr.mli", 179, 5595, 5599), ("vernac/vernacexpr.mli", 179, 5595, 5636), 0), 0, Tag1 ("Vernacexpr", 143))]], 1, 0, [25], [0], 0, 0, (("vernac/vernacexpr.mli", 172, 5401, 5401), ("vernac/vernacexpr.mli", 180, 5637, 5640), 0), 0, 0, 0, Tag1 ("Vernacexpr", 136)), 1, 0); Tag1 (("fixpoint_expr", 1530), (0, 0, 0, 1, ((Tag3 ((("fix_expr_gen", 1529)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "recursion_order_expr"), 0, (0)), 100000000, 0, -439)], (0)), 100000000, 0, -438)], (0)), 100000000, 0, -437)), 0, 0, 0, 0, (("vernac/vernacexpr.mli", 182, 5642, 5642), ("vernac/vernacexpr.mli", 182, 5642, 5703), 0), 0, 0, 0, Tag1 ("Vernacexpr", 144)), 1, 0); Tag1 (("cofixpoint_expr", 1531), (0, 0, 0, 1, ((Tag3 ((("fix_expr_gen", 1529)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -436)], (0)), 100000000, 0, -435)), 0, 0, 0, 0, (("vernac/vernacexpr.mli", 183, 5704, 5704), ("vernac/vernacexpr.mli", 183, 5704, 5744), 0), 0, 0, 0, Tag1 ("Vernacexpr", 145)), 1, 0); Tag1 (("local_decl_expr", 1532), (0, 0, Tag1 ([(("AssumExpr", 891), ([(Tag3 (Tag1 ((Tag2 ("Names")), "lname"), 0, (0)), 100000000, 0, -425); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "local_binder_expr"), 0, (0)), 100000000, 0, -427)], (0)), 100000000, 0, -426); (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -428)]), 0, (("vernac/vernacexpr.mli", 186, 5769, 5771), ("vernac/vernacexpr.mli", 186, 5769, 5830), 0), 0, Tag1 ("Vernacexpr", 147)); (("DefExpr", 892), ([(Tag3 (Tag1 ((Tag2 ("Names")), "lname"), 0, (0)), 100000000, 0, -429); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "local_binder_expr"), 0, (0)), 100000000, 0, -431)], (0)), 100000000, 0, -430); (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -432); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -434)], (0)), 100000000, 0, -433)]), 0, (("vernac/vernacexpr.mli", 187, 5831, 5833), ("vernac/vernacexpr.mli", 187, 5831, 5911), 0), 0, Tag1 ("Vernacexpr", 148))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacexpr.mli", 185, 5746, 5746), ("vernac/vernacexpr.mli", 187, 5831, 5911), 0), 0, 0, 0, Tag1 ("Vernacexpr", 146)), 1, 0); Tag1 (("inductive_kind", 1533), (0, 0, Tag1 ([(("Inductive_kw", 894), (0), 0, (("vernac/vernacexpr.mli", 189, 5913, 5935), ("vernac/vernacexpr.mli", 189, 5913, 5947), 0), 0, Tag1 ("Vernacexpr", 150)); (("CoInductive", 895), (0), 0, (("vernac/vernacexpr.mli", 189, 5913, 5948), ("vernac/vernacexpr.mli", 189, 5913, 5961), 0), 0, Tag1 ("Vernacexpr", 151)); (("Variant", 896), (0), 0, (("vernac/vernacexpr.mli", 189, 5913, 5962), ("vernac/vernacexpr.mli", 189, 5913, 5971), 0), 0, Tag1 ("Vernacexpr", 152)); (("Record", 897), (0), 0, (("vernac/vernacexpr.mli", 189, 5913, 5972), ("vernac/vernacexpr.mli", 189, 5913, 5980), 0), 0, Tag1 ("Vernacexpr", 153)); (("Structure", 898), (0), 0, (("vernac/vernacexpr.mli", 189, 5913, 5981), ("vernac/vernacexpr.mli", 189, 5913, 5992), 0), 0, Tag1 ("Vernacexpr", 154)); (("Class", 899), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -424)]), 0, (("vernac/vernacexpr.mli", 189, 5913, 5993), ("vernac/vernacexpr.mli", 189, 5913, 6008), 0), 0, Tag1 ("Vernacexpr", 155))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacexpr.mli", 189, 5913, 5913), ("vernac/vernacexpr.mli", 189, 5913, 6008), 0), 0, 0, 0, Tag1 ("Vernacexpr", 149)), 1, 0); Tag1 (("simple_binder", 1534), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -422)], (0)), 100000000, 0, -421); (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -423)]), 100000000, 0, -420)), 0, 0, 0, 0, (("vernac/vernacexpr.mli", 190, 6054, 6054), ("vernac/vernacexpr.mli", 190, 6054, 6101), 0), 0, 0, 0, Tag1 ("Vernacexpr", 156)), 1, 0); Tag1 (("class_binder", 1535), (0, 0, 0, 1, ((Tag2 ([(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -417); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -419)], (0)), 100000000, 0, -418)]), 100000000, 0, -416)), 0, 0, 0, 0, (("vernac/vernacexpr.mli", 191, 6102, 6102), ("vernac/vernacexpr.mli", 191, 6102, 6147), 0), 0, 0, 0, Tag1 ("Vernacexpr", 157)), 1, 0); Tag1 (("with_coercion", 1536), ([((("a")), 100000000, 0, -415)], 1, 0, 1, ((Tag2 ([(Tag3 ((("coercion_flag", 1514)), 0, (0)), 100000000, 0, -414); ((("a")), 100000000, 0, -415)]), 100000000, 0, -413)), [25], [0], 0, 0, (("vernac/vernacexpr.mli", 192, 6148, 6148), ("vernac/vernacexpr.mli", 192, 6148, 6190), 0), 0, 0, 0, Tag1 ("Vernacexpr", 158)), 1, 0); Tag1 (("with_coercion_instance", 1537), ([((("a")), 100000000, 0, -412)], 1, 0, 1, ((Tag2 ([(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Attributes")), "vernac_flags"), 0, (0)), 100000000, 0, -409); (Tag3 ((("coercion_flag", 1514)), 0, (0)), 100000000, 0, -410); (Tag3 ((("instance_flag", 1515)), 0, (0)), 100000000, 0, -411)]), 100000000, 0, -408); ((("a")), 100000000, 0, -412)]), 100000000, 0, -407)), [25], [0], 0, 0, (("vernac/vernacexpr.mli", 193, 6191, 6191), ("vernac/vernacexpr.mli", 193, 6191, 6286), 0), 0, 0, 0, Tag1 ("Vernacexpr", 159)), 1, 0); Tag1 (("record_field_attr", 1538), (0, 0, [[(("rf_coercion", 948), 0, (Tag3 ((("coercion_flag", 1514)), 0, (0)), 100000000, 0, -397), (("vernac/vernacexpr.mli", 196, 6361, 6363), ("vernac/vernacexpr.mli", 196, 6361, 6390), 0), 0, Tag1 ("Vernacexpr", 161)); (("rf_reversible", 949), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -399)], (0)), 100000000, 0, -398), (("vernac/vernacexpr.mli", 197, 6436, 6438), ("vernac/vernacexpr.mli", 197, 6436, 6465), 0), 0, Tag1 ("Vernacexpr", 162)); (("rf_instance", 950), 0, (Tag3 ((("instance_flag", 1515)), 0, (0)), 100000000, 0, -400), (("vernac/vernacexpr.mli", 198, 6508, 6510), ("vernac/vernacexpr.mli", 198, 6508, 6537), 0), 0, Tag1 ("Vernacexpr", 163)); (("rf_priority", 951), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -402)], (0)), 100000000, 0, -401), (("vernac/vernacexpr.mli", 199, 6574, 6576), ("vernac/vernacexpr.mli", 199, 6574, 6600), 0), 0, Tag1 ("Vernacexpr", 164)); (("rf_locality", 997), 0, (Tag3 (Tag1 ((Tag2 ("Goptions")), "option_locality"), 0, (0)), 100000000, 0, -403), (("vernac/vernacexpr.mli", 200, 6645, 6647), ("vernac/vernacexpr.mli", 200, 6645, 6685), 0), 0, Tag1 ("Vernacexpr", 165)); (("rf_notation", 998), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("notation_declaration", 1528)), 0, (0)), 100000000, 0, -405)], (0)), 100000000, 0, -404), (("vernac/vernacexpr.mli", 201, 6726, 6728), ("vernac/vernacexpr.mli", 201, 6726, 6767), 0), 0, Tag1 ("Vernacexpr", 166)); (("rf_canonical", 999), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -406), (("vernac/vernacexpr.mli", 202, 6768, 6770), ("vernac/vernacexpr.mli", 202, 6768, 6789), 0), 0, Tag1 ("Vernacexpr", 167))]], 1, 0, 0, 0, 0, 0, (("vernac/vernacexpr.mli", 195, 6334, 6334), ("vernac/vernacexpr.mli", 203, 6854, 6857), 0), 0, 0, 0, Tag1 ("Vernacexpr", 160)), 1, 0); Tag1 (("record_field_attr_unparsed", 1539), (0, 0, [[(("rfu_attrs", 1001), 0, (Tag3 (Tag1 ((Tag2 ("Attributes")), "vernac_flags"), 0, (0)), 100000000, 0, -390), (("vernac/vernacexpr.mli", 206, 6935, 6937), ("vernac/vernacexpr.mli", 206, 6935, 6972), 0), 0, Tag1 ("Vernacexpr", 169)); (("rfu_coercion", 1002), 0, (Tag3 ((("coercion_flag", 1514)), 0, (0)), 100000000, 0, -391), (("vernac/vernacexpr.mli", 207, 6973, 6975), ("vernac/vernacexpr.mli", 207, 6973, 7003), 0), 0, Tag1 ("Vernacexpr", 170)); (("rfu_instance", 1003), 0, (Tag3 ((("instance_flag", 1515)), 0, (0)), 100000000, 0, -392), (("vernac/vernacexpr.mli", 208, 7004, 7006), ("vernac/vernacexpr.mli", 208, 7004, 7034), 0), 0, Tag1 ("Vernacexpr", 171)); (("rfu_priority", 1004), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -394)], (0)), 100000000, 0, -393), (("vernac/vernacexpr.mli", 209, 7035, 7037), ("vernac/vernacexpr.mli", 209, 7035, 7062), 0), 0, Tag1 ("Vernacexpr", 172)); (("rfu_notation", 1005), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("notation_declaration", 1528)), 0, (0)), 100000000, 0, -396)], (0)), 100000000, 0, -395), (("vernac/vernacexpr.mli", 210, 7063, 7065), ("vernac/vernacexpr.mli", 210, 7063, 7105), 0), 0, Tag1 ("Vernacexpr", 173))]], 1, 0, 0, 0, 0, 0, (("vernac/vernacexpr.mli", 205, 6899, 6899), ("vernac/vernacexpr.mli", 211, 7106, 7109), 0), 0, 0, 0, Tag1 ("Vernacexpr", 168)), 1, 0); Tag1 (("constructor_expr", 1540), (0, 0, 0, 1, ((Tag3 ((("with_coercion_instance", 1537)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -388); (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -389)]), 100000000, 0, -387)], (0)), 100000000, 0, -386)), 0, 0, 0, 0, (("vernac/vernacexpr.mli", 212, 7110, 7110), ("vernac/vernacexpr.mli", 212, 7110, 7179), 0), 0, 0, 0, Tag1 ("Vernacexpr", 174)), 1, 0); Tag1 (("constructor_list_or_record_decl_expr", 1541), (0, 0, Tag1 ([(("Constructors", 1008), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("constructor_expr", 1540)), 0, (0)), 100000000, 0, -377)], (0)), 100000000, 0, -376)]), 0, (("vernac/vernacexpr.mli", 214, 7224, 7226), ("vernac/vernacexpr.mli", 214, 7224, 7265), 0), 0, Tag1 ("Vernacexpr", 176)); (("RecordDecl", 1009), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -379)], (0)), 100000000, 0, -378); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("local_decl_expr", 1532)), 0, (0)), 100000000, 0, -382); (Tag3 ((("record_field_attr_unparsed", 1539)), 0, (0)), 100000000, 0, -383)]), 100000000, 0, -381)], (0)), 100000000, 0, -380); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -385)], (0)), 100000000, 0, -384)]), 0, (("vernac/vernacexpr.mli", 215, 7266, 7268), ("vernac/vernacexpr.mli", 215, 7266, 7367), 0), 0, Tag1 ("Vernacexpr", 177))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacexpr.mli", 213, 7180, 7180), ("vernac/vernacexpr.mli", 215, 7266, 7367), 0), 0, 0, 0, Tag1 ("Vernacexpr", 175)), 1, 0); Tag1 (("inductive_params_expr", 1542), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "local_binder_expr"), 0, (0)), 100000000, 0, -372)], (0)), 100000000, 0, -371); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "local_binder_expr"), 0, (0)), 100000000, 0, -375)], (0)), 100000000, 0, -374)], (0)), 100000000, 0, -373)]), 100000000, 0, -370)), 0, 0, 0, 0, (("vernac/vernacexpr.mli", 216, 7368, 7368), ("vernac/vernacexpr.mli", 216, 7368, 7451), 0), 0, 0, 0, Tag1 ("Vernacexpr", 178)), 1, 0); Tag1 (("inductive_expr", 1543), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((("with_coercion", 1536)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "cumul_ident_decl"), 0, (0)), 100000000, 0, -365)], (0)), 100000000, 0, -364); (Tag3 ((("inductive_params_expr", 1542)), 0, (0)), 100000000, 0, -366); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -368)], (0)), 100000000, 0, -367); (Tag3 ((("constructor_list_or_record_decl_expr", 1541)), 0, (0)), 100000000, 0, -369)]), 100000000, 0, -363)), 0, 0, 0, 0, (("vernac/vernacexpr.mli", 219, 7510, 7510), ("vernac/vernacexpr.mli", 222, 7612, 7652), 0), 0, 0, 0, Tag1 ("Vernacexpr", 179)), 1, 0); Tag1 (("one_inductive_expr", 1544), (0, 0, 0, 1, ((Tag2 ([(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -357); (Tag3 ((("inductive_params_expr", 1542)), 0, (0)), 100000000, 0, -358); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -360)], (0)), 100000000, 0, -359); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("constructor_expr", 1540)), 0, (0)), 100000000, 0, -362)], (0)), 100000000, 0, -361)]), 100000000, 0, -356)), 0, 0, 0, 0, (("vernac/vernacexpr.mli", 224, 7654, 7654), ("vernac/vernacexpr.mli", 225, 7680, 7757), 0), 0, 0, 0, Tag1 ("Vernacexpr", 180)), 1, 0); Tag1 (("typeclass_constraint", 1545), (0, 0, 0, 1, ((Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "name_decl"), 0, (0)), 100000000, 0, -353); (Tag3 (Tag1 ((Tag2 ("Glob_term")), "binding_kind"), 0, (0)), 100000000, 0, -354); (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -355)]), 100000000, 0, -352)), 0, 0, 0, 0, (("vernac/vernacexpr.mli", 227, 7759, 7759), ("vernac/vernacexpr.mli", 227, 7759, 7835), 0), 0, 0, 0, Tag1 ("Vernacexpr", 181)), 1, 0); Tag1 (("typeclass_context", 1546), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("typeclass_constraint", 1545)), 0, (0)), 100000000, 0, -351)], (0)), 100000000, 0, -350)), 0, 0, 0, 0, (("vernac/vernacexpr.mli", 228, 7836, 7836), ("vernac/vernacexpr.mli", 228, 7836, 7885), 0), 0, 0, 0, Tag1 ("Vernacexpr", 182)), 2, 0); Tag1 (("proof_expr", 1547), (0, 0, 0, 1, ((Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "ident_decl"), 0, (0)), 100000000, 0, -345); (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "local_binder_expr"), 0, (0)), 100000000, 0, -348)], (0)), 100000000, 0, -347); (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -349)]), 100000000, 0, -346)]), 100000000, 0, -344)), 0, 0, 0, 0, (("vernac/vernacexpr.mli", 230, 7887, 7887), ("vernac/vernacexpr.mli", 231, 7905, 7958), 0), 0, 0, 0, Tag1 ("Vernacexpr", 184)), 1, 0); Tag1 (("opacity_flag", 1548), (0, 0, Tag1 ([(("Opaque", 1059), (0), 0, (("vernac/vernacexpr.mli", 233, 7960, 7980), ("vernac/vernacexpr.mli", 233, 7960, 7986), 0), 0, Tag1 ("Vernacexpr", 186)); (("Transparent", 1060), (0), 0, (("vernac/vernacexpr.mli", 233, 7960, 7987), ("vernac/vernacexpr.mli", 233, 7960, 8000), 0), 0, Tag1 ("Vernacexpr", 187))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacexpr.mli", 233, 7960, 7960), ("vernac/vernacexpr.mli", 233, 7960, 8000), 0), 0, 1, 0, Tag1 ("Vernacexpr", 185)), 1, 0); Tag1 (("proof_end", 1549), (0, 0, Tag1 ([(("Admitted", 1062), (0), 0, (("vernac/vernacexpr.mli", 236, 8019, 8021), ("vernac/vernacexpr.mli", 236, 8019, 8031), 0), 0, Tag1 ("Vernacexpr", 189)); (("Proved", 1063), ([(Tag3 ((("opacity_flag", 1548)), 0, (0)), 100000000, 0, -341); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -343)], (0)), 100000000, 0, -342)]), 0, (("vernac/vernacexpr.mli", 238, 8103, 8105), ("vernac/vernacexpr.mli", 238, 8103, 8145), 0), 0, Tag1 ("Vernacexpr", 190))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacexpr.mli", 235, 8002, 8002), ("vernac/vernacexpr.mli", 238, 8103, 8145), 0), 0, 0, 0, Tag1 ("Vernacexpr", 188)), 1, 0); Tag1 (("scheme_type", 1550), (0, 0, Tag1 ([(("SchemeInduction", 1065), (0), 0, (("vernac/vernacexpr.mli", 241, 8166, 8168), ("vernac/vernacexpr.mli", 241, 8166, 8185), 0), 0, Tag1 ("Vernacexpr", 192)); (("SchemeMinimality", 1066), (0), 0, (("vernac/vernacexpr.mli", 242, 8186, 8188), ("vernac/vernacexpr.mli", 242, 8186, 8206), 0), 0, Tag1 ("Vernacexpr", 193)); (("SchemeElimination", 1067), (0), 0, (("vernac/vernacexpr.mli", 243, 8207, 8209), ("vernac/vernacexpr.mli", 243, 8207, 8228), 0), 0, Tag1 ("Vernacexpr", 194)); (("SchemeCase", 1068), (0), 0, (("vernac/vernacexpr.mli", 244, 8229, 8231), ("vernac/vernacexpr.mli", 244, 8229, 8243), 0), 0, Tag1 ("Vernacexpr", 195))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacexpr.mli", 240, 8147, 8147), ("vernac/vernacexpr.mli", 244, 8229, 8243), 0), 0, 1, 0, Tag1 ("Vernacexpr", 191)), 1, 0); Tag1 (("equality_scheme_type", 1551), (0, 0, Tag1 ([(("SchemeBooleanEquality", 1070), (0), 0, (("vernac/vernacexpr.mli", 247, 8273, 8275), ("vernac/vernacexpr.mli", 247, 8273, 8298), 0), 0, Tag1 ("Vernacexpr", 197)); (("SchemeEquality", 1071), (0), 0, (("vernac/vernacexpr.mli", 248, 8299, 8301), ("vernac/vernacexpr.mli", 248, 8299, 8317), 0), 0, Tag1 ("Vernacexpr", 198))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacexpr.mli", 246, 8245, 8245), ("vernac/vernacexpr.mli", 248, 8299, 8317), 0), 0, 1, 0, Tag1 ("Vernacexpr", 196)), 1, 0); Tag1 (("scheme", 1552), (0, 0, [[(("sch_type", 1073), 0, (Tag3 ((("scheme_type", 1550)), 0, (0)), 100000000, 0, -337), (("vernac/vernacexpr.mli", 252, 8376, 8378), ("vernac/vernacexpr.mli", 252, 8376, 8402), 0), 0, Tag1 ("Vernacexpr", 200)); (("sch_qualid", 1074), 0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "or_by_notation"), [(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -339)], (0)), 100000000, 0, -338), (("vernac/vernacexpr.mli", 253, 8403, 8405), ("vernac/vernacexpr.mli", 253, 8403, 8461), 0), 0, Tag1 ("Vernacexpr", 201)); (("sch_sort", 1107), 0, (Tag3 (Tag1 ((Tag2 ("Sorts")), "family"), 0, (0)), 100000000, 0, -340), (("vernac/vernacexpr.mli", 254, 8462, 8464), ("vernac/vernacexpr.mli", 254, 8462, 8489), 0), 0, Tag1 ("Vernacexpr", 202))]], 1, 0, 0, 0, 0, 0, (("vernac/vernacexpr.mli", 251, 8360, 8360), ("vernac/vernacexpr.mli", 255, 8490, 8491), 0), 0, 0, 0, Tag1 ("Vernacexpr", 199)), 1, 0); Tag1 (("section_subset_expr", 1553), (0, 0, Tag1 ([(("SsEmpty", 1109), (0), 0, (("vernac/vernacexpr.mli", 258, 8520, 8522), ("vernac/vernacexpr.mli", 258, 8520, 8531), 0), 0, Tag1 ("Vernacexpr", 204)); (("SsType", 1110), (0), 0, (("vernac/vernacexpr.mli", 259, 8532, 8534), ("vernac/vernacexpr.mli", 259, 8532, 8542), 0), 0, Tag1 ("Vernacexpr", 205)); (("SsSingl", 1111), ([(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -330)]), 0, (("vernac/vernacexpr.mli", 260, 8543, 8545), ("vernac/vernacexpr.mli", 260, 8543, 8564), 0), 0, Tag1 ("Vernacexpr", 206)); (("SsCompl", 1112), ([(Tag3 ((("section_subset_expr", 1553)), 0, (0)), 100000000, 0, -331)]), 0, (("vernac/vernacexpr.mli", 261, 8565, 8567), ("vernac/vernacexpr.mli", 261, 8565, 8599), 0), 0, Tag1 ("Vernacexpr", 207)); (("SsUnion", 1113), ([(Tag3 ((("section_subset_expr", 1553)), 0, (0)), 100000000, 0, -332); (Tag3 ((("section_subset_expr", 1553)), 0, (0)), 100000000, 0, -333)]), 0, (("vernac/vernacexpr.mli", 262, 8600, 8602), ("vernac/vernacexpr.mli", 262, 8600, 8656), 0), 0, Tag1 ("Vernacexpr", 208)); (("SsSubstr", 1114), ([(Tag3 ((("section_subset_expr", 1553)), 0, (0)), 100000000, 0, -334); (Tag3 ((("section_subset_expr", 1553)), 0, (0)), 100000000, 0, -335)]), 0, (("vernac/vernacexpr.mli", 263, 8657, 8659), ("vernac/vernacexpr.mli", 263, 8657, 8714), 0), 0, Tag1 ("Vernacexpr", 209)); (("SsFwdClose", 1115), ([(Tag3 ((("section_subset_expr", 1553)), 0, (0)), 100000000, 0, -336)]), 0, (("vernac/vernacexpr.mli", 264, 8715, 8717), ("vernac/vernacexpr.mli", 264, 8715, 8752), 0), 0, Tag1 ("Vernacexpr", 210))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacexpr.mli", 257, 8493, 8493), ("vernac/vernacexpr.mli", 264, 8715, 8752), 0), 0, 0, 0, Tag1 ("Vernacexpr", 203)), 1, 0); Tag1 (("register_kind", 1554), (0, 0, Tag1 ([(("RegisterInline", 1117), (0), 0, (("vernac/vernacexpr.mli", 296, 10343, 10345), ("vernac/vernacexpr.mli", 296, 10343, 10361), 0), 0, Tag1 ("Vernacexpr", 212)); (("RegisterCoqlib", 1118), ([(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -329)]), 0, (("vernac/vernacexpr.mli", 297, 10362, 10364), ("vernac/vernacexpr.mli", 297, 10362, 10390), 0), 0, Tag1 ("Vernacexpr", 213))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacexpr.mli", 295, 10322, 10322), ("vernac/vernacexpr.mli", 297, 10362, 10390), 0), 0, 0, 0, Tag1 ("Vernacexpr", 211)), 1, 0); Tag1 (("module_ast_inl", 1555), (0, 0, 0, 1, ((Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "module_ast"), 0, (0)), 100000000, 0, -327); (Tag3 (Tag1 ((Tag2 ("Declaremods")), "inline"), 0, (0)), 100000000, 0, -328)]), 100000000, 0, -326)), 0, 0, 0, 0, (("vernac/vernacexpr.mli", 301, 10438, 10438), ("vernac/vernacexpr.mli", 301, 10438, 10491), 0), 0, 0, 0, Tag1 ("Vernacexpr", 214)), 1, 0); Tag1 (("module_binder", 1556), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("export_with_cats", 1518)), 0, (0)), 100000000, 0, -322)], (0)), 100000000, 0, -321); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -324)], (0)), 100000000, 0, -323); (Tag3 ((("module_ast_inl", 1555)), 0, (0)), 100000000, 0, -325)]), 100000000, 0, -320)), 0, 0, 0, 0, (("vernac/vernacexpr.mli", 302, 10492, 10492), ("vernac/vernacexpr.mli", 302, 10492, 10567), 0), 0, 0, 0, Tag1 ("Vernacexpr", 215)), 1, 0); Tag1 (("vernac_one_argument_status", 1557), (0, 0, [[(("name", 1145), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -314), (("vernac/vernacexpr.mli", 307, 10652, 10654), ("vernac/vernacexpr.mli", 307, 10652, 10668), 0), 0, Tag1 ("Vernacexpr", 217)); (("recarg_like", 1146), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -315), (("vernac/vernacexpr.mli", 308, 10669, 10671), ("vernac/vernacexpr.mli", 308, 10669, 10690), 0), 0, Tag1 ("Vernacexpr", 218)); (("notation_scope", 1147), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -318)], (0)), 100000000, 0, -317)], (0)), 100000000, 0, -316), (("vernac/vernacexpr.mli", 309, 10691, 10693), ("vernac/vernacexpr.mli", 309, 10691, 10729), 0), 0, Tag1 ("Vernacexpr", 219)); (("implicit_status", 1148), 0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "binding_kind"), 0, (0)), 100000000, 0, -319), (("vernac/vernacexpr.mli", 310, 10730, 10732), ("vernac/vernacexpr.mli", 310, 10730, 10773), 0), 0, Tag1 ("Vernacexpr", 220))]], 1, 0, 0, 0, 0, 0, (("vernac/vernacexpr.mli", 306, 10616, 10616), ("vernac/vernacexpr.mli", 311, 10774, 10775), 0), 0, 0, 0, Tag1 ("Vernacexpr", 216)), 1, 0); Tag1 (("vernac_argument_status", 1558), (0, 0, Tag1 ([(("VolatileArg", 1150), (0), 0, (("vernac/vernacexpr.mli", 314, 10807, 10809), ("vernac/vernacexpr.mli", 314, 10807, 10822), 0), 0, Tag1 ("Vernacexpr", 222)); (("BidiArg", 1151), (0), 0, (("vernac/vernacexpr.mli", 314, 10807, 10823), ("vernac/vernacexpr.mli", 314, 10807, 10832), 0), 0, Tag1 ("Vernacexpr", 223)); (("RealArg", 1152), ([(Tag3 ((("vernac_one_argument_status", 1557)), 0, (0)), 100000000, 0, -313)]), 0, (("vernac/vernacexpr.mli", 315, 10833, 10835), ("vernac/vernacexpr.mli", 315, 10833, 10874), 0), 0, Tag1 ("Vernacexpr", 224))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacexpr.mli", 313, 10777, 10777), ("vernac/vernacexpr.mli", 315, 10833, 10874), 0), 0, 0, 0, Tag1 ("Vernacexpr", 221)), 1, 0); Tag1 (("arguments_modifier", 1559), (0, 0, 0, 1, ((Tag8 (([("Assert", (0)); ("ClearBidiHint", (0)); ("ClearImplicits", (0)); ("ClearScopes", (0)); ("DefaultImplicits", (0)); ("ExtraScopes", (0)); ("ReductionDontExposeCase", (0)); ("ReductionNeverUnfold", (0)); ("Rename", (0))], (0, 100000000, 0, -312), 1, 0, 0)), 100000000, 0, -311)), 0, 0, 0, 0, (("vernac/vernacexpr.mli", 317, 10876, 10876), ("vernac/vernacexpr.mli", 326, 11065, 11078), 0), 0, 1, 0, Tag1 ("Vernacexpr", 225)), 1, 0); Tag1 (("extend_name", 1560), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -309); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -310)]), 100000000, 0, -308)), 0, 0, 0, 0, (("vernac/vernacexpr.mli", 328, 11080, 11080), ("vernac/vernacexpr.mli", 334, 11370, 11375), 0), 0, 0, 0, Tag1 ("Vernacexpr", 226)), 1, 0); Tag1 (("discharge", 1561), (0, 0, Tag1 ([(("DoDischarge", 1156), (0), 0, (("vernac/vernacexpr.mli", 336, 11377, 11394), ("vernac/vernacexpr.mli", 336, 11377, 11405), 0), 0, Tag1 ("Vernacexpr", 228)); (("NoDischarge", 1157), (0), 0, (("vernac/vernacexpr.mli", 336, 11377, 11406), ("vernac/vernacexpr.mli", 336, 11377, 11419), 0), 0, Tag1 ("Vernacexpr", 229))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacexpr.mli", 336, 11377, 11377), ("vernac/vernacexpr.mli", 336, 11377, 11419), 0), 0, 1, 0, Tag1 ("Vernacexpr", 227)), 1, 0); Tag1 (("hint_info_expr", 1562), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Typeclasses")), "hint_info_gen"), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_pattern_expr"), 0, (0)), 100000000, 0, -307)], (0)), 100000000, 0, -306)), 0, 0, 0, 0, (("vernac/vernacexpr.mli", 338, 11421, 11421), ("vernac/vernacexpr.mli", 338, 11421, 11499), 0), 0, 0, 0, Tag1 ("Vernacexpr", 230)), 1, 0); Tag1 (("reference_or_constr", 1563), (0, 0, Tag1 ([(("HintsReference", 1195), ([(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -304)]), 0, (("vernac/vernacexpr.mli", 341, 11528, 11530), ("vernac/vernacexpr.mli", 341, 11528, 11565), 0), 0, Tag1 ("Vernacexpr", 232)); (("HintsConstr", 1196), ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -305)]), 0, (("vernac/vernacexpr.mli", 342, 11566, 11568), ("vernac/vernacexpr.mli", 342, 11566, 11607), 0), 0, Tag1 ("Vernacexpr", 233))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacexpr.mli", 340, 11501, 11501), ("vernac/vernacexpr.mli", 342, 11566, 11607), 0), 0, 0, 0, Tag1 ("Vernacexpr", 231)), 1, 0); Tag1 (("hints_expr", 1564), (0, 0, Tag1 ([(("HintsResolve", 1198), ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("hint_info_expr", 1562)), 0, (0)), 100000000, 0, -280); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -281); (Tag3 ((("reference_or_constr", 1563)), 0, (0)), 100000000, 0, -282)]), 100000000, 0, -279)], (0)), 100000000, 0, -278)]), 0, (("vernac/vernacexpr.mli", 345, 11627, 11629), ("vernac/vernacexpr.mli", 345, 11627, 11697), 0), 0, Tag1 ("Vernacexpr", 235)); (("HintsResolveIFF", 1199), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -283); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -285)], (0)), 100000000, 0, -284); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -287)], (0)), 100000000, 0, -286)]), 0, (("vernac/vernacexpr.mli", 346, 11698, 11700), ("vernac/vernacexpr.mli", 346, 11698, 11761), 0), 0, Tag1 ("Vernacexpr", 236)); (("HintsImmediate", 1200), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("reference_or_constr", 1563)), 0, (0)), 100000000, 0, -289)], (0)), 100000000, 0, -288)]), 0, (("vernac/vernacexpr.mli", 347, 11762, 11764), ("vernac/vernacexpr.mli", 347, 11762, 11808), 0), 0, Tag1 ("Vernacexpr", 237)); (("HintsUnfold", 1201), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -291)], (0)), 100000000, 0, -290)]), 0, (("vernac/vernacexpr.mli", 348, 11809, 11811), ("vernac/vernacexpr.mli", 348, 11809, 11848), 0), 0, Tag1 ("Vernacexpr", 238)); (("HintsTransparency", 1202), ([(Tag3 (Tag1 ((Tag2 ("Hints")), "hints_transparency_target"), [(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -293)], (0)), 100000000, 0, -292); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -294)]), 0, (("vernac/vernacexpr.mli", 349, 11849, 11851), ("vernac/vernacexpr.mli", 349, 11849, 11928), 0), 0, Tag1 ("Vernacexpr", 239)); (("HintsMode", 1261), ([(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -295); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Hints")), "hint_mode"), 0, (0)), 100000000, 0, -297)], (0)), 100000000, 0, -296)]), 0, (("vernac/vernacexpr.mli", 350, 11929, 11931), ("vernac/vernacexpr.mli", 350, 11929, 11984), 0), 0, Tag1 ("Vernacexpr", 240)); (("HintsConstructors", 1262), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -299)], (0)), 100000000, 0, -298)]), 0, (("vernac/vernacexpr.mli", 351, 11985, 11987), ("vernac/vernacexpr.mli", 351, 11985, 12030), 0), 0, Tag1 ("Vernacexpr", 241)); (("HintsExtern", 1263), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -300); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -302)], (0)), 100000000, 0, -301); (Tag3 (Tag1 ((Tag2 ("Genarg")), "raw_generic_argument"), 0, (0)), 100000000, 0, -303)]), 0, (("vernac/vernacexpr.mli", 352, 12031, 12033), ("vernac/vernacexpr.mli", 352, 12031, 12115), 0), 0, Tag1 ("Vernacexpr", 242))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacexpr.mli", 344, 11609, 11609), ("vernac/vernacexpr.mli", 352, 12031, 12115), 0), 0, 0, 0, Tag1 ("Vernacexpr", 234)), 1, 0); Tag1 (("synterp_vernac_expr", 1565), (0, 0, Tag1 ([(("VernacLoad", 1302), ([(Tag3 ((("verbose_flag", 1513)), 0, (0)), 100000000, 0, -213); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -214)]), 0, (("vernac/vernacexpr.mli", 357, 12259, 12261), ("vernac/vernacexpr.mli", 357, 12259, 12298), 0), 0, Tag1 ("Vernacexpr", 244)); (("VernacReservedNotation", 1303), ([(Tag3 ((("infix_flag", 1519)), 0, (0)), 100000000, 0, -215); (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Names")), "lstring"), 0, (0)), 100000000, 0, -217); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((("syntax_modifier", 1526)), 0, (0)), 100000000, 0, -220)], (0)), 100000000, 0, -219)], (0)), 100000000, 0, -218)]), 100000000, 0, -216)]), 0, (("vernac/vernacexpr.mli", 358, 12299, 12301), ("vernac/vernacexpr.mli", 358, 12299, 12381), 0), 0, Tag1 ("Vernacexpr", 245)); (("VernacNotation", 1304), ([(Tag3 ((("infix_flag", 1519)), 0, (0)), 100000000, 0, -221); (Tag3 ((("notation_declaration", 1528)), 0, (0)), 100000000, 0, -222)]), 0, (("vernac/vernacexpr.mli", 359, 12382, 12384), ("vernac/vernacexpr.mli", 360, 12404, 12443), 0), 0, Tag1 ("Vernacexpr", 246)); (("VernacDeclareCustomEntry", 1305), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -223)]), 0, (("vernac/vernacexpr.mli", 361, 12444, 12446), ("vernac/vernacexpr.mli", 361, 12444, 12482), 0), 0, Tag1 ("Vernacexpr", 247)); (("VernacBeginSection", 1306), ([(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -224)]), 0, (("vernac/vernacexpr.mli", 362, 12483, 12485), ("vernac/vernacexpr.mli", 362, 12483, 12515), 0), 0, Tag1 ("Vernacexpr", 248)); (("VernacEndSegment", 1307), ([(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -225)]), 0, (("vernac/vernacexpr.mli", 363, 12516, 12518), ("vernac/vernacexpr.mli", 363, 12516, 12546), 0), 0, Tag1 ("Vernacexpr", 249)); (("VernacRequire", 1308), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -227)], (0)), 100000000, 0, -226); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("export_with_cats", 1518)), 0, (0)), 100000000, 0, -229)], (0)), 100000000, 0, -228); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -232); (Tag3 ((("import_filter_expr", 1521)), 0, (0)), 100000000, 0, -233)]), 100000000, 0, -231)], (0)), 100000000, 0, -230)]), 0, (("vernac/vernacexpr.mli", 364, 12547, 12549), ("vernac/vernacexpr.mli", 365, 12568, 12650), 0), 0, Tag1 ("Vernacexpr", 250)); (("VernacImport", 1309), ([(Tag3 ((("export_with_cats", 1518)), 0, (0)), 100000000, 0, -234); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -237); (Tag3 ((("import_filter_expr", 1521)), 0, (0)), 100000000, 0, -238)]), 100000000, 0, -236)], (0)), 100000000, 0, -235)]), 0, (("vernac/vernacexpr.mli", 366, 12651, 12653), ("vernac/vernacexpr.mli", 366, 12651, 12724), 0), 0, Tag1 ("Vernacexpr", 251)); (("VernacDeclareModule", 1310), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("export_with_cats", 1518)), 0, (0)), 100000000, 0, -240)], (0)), 100000000, 0, -239); (Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -241); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("module_binder", 1556)), 0, (0)), 100000000, 0, -243)], (0)), 100000000, 0, -242); (Tag3 ((("module_ast_inl", 1555)), 0, (0)), 100000000, 0, -244)]), 0, (("vernac/vernacexpr.mli", 368, 12758, 12760), ("vernac/vernacexpr.mli", 369, 12820, 12861), 0), 0, Tag1 ("Vernacexpr", 252)); (("VernacDefineModule", 1311), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("export_with_cats", 1518)), 0, (0)), 100000000, 0, -246)], (0)), 100000000, 0, -245); (Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -247); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("module_binder", 1556)), 0, (0)), 100000000, 0, -249)], (0)), 100000000, 0, -248); (Tag3 (Tag1 ((Tag2 ("Declaremods")), "module_signature"), [(Tag3 ((("module_ast_inl", 1555)), 0, (0)), 100000000, 0, -251)], (0)), 100000000, 0, -250); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("module_ast_inl", 1555)), 0, (0)), 100000000, 0, -253)], (0)), 100000000, 0, -252)]), 0, (("vernac/vernacexpr.mli", 370, 12862, 12864), ("vernac/vernacexpr.mli", 371, 12944, 13015), 0), 0, Tag1 ("Vernacexpr", 253)); (("VernacDeclareModuleType", 1312), ([(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -254); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("module_binder", 1556)), 0, (0)), 100000000, 0, -256)], (0)), 100000000, 0, -255); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("module_ast_inl", 1555)), 0, (0)), 100000000, 0, -258)], (0)), 100000000, 0, -257); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("module_ast_inl", 1555)), 0, (0)), 100000000, 0, -260)], (0)), 100000000, 0, -259)]), 0, (("vernac/vernacexpr.mli", 372, 13016, 13018), ("vernac/vernacexpr.mli", 373, 13056, 13124), 0), 0, Tag1 ("Vernacexpr", 254)); (("VernacInclude", 1313), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("module_ast_inl", 1555)), 0, (0)), 100000000, 0, -262)], (0)), 100000000, 0, -261)]), 0, (("vernac/vernacexpr.mli", 374, 13125, 13127), ("vernac/vernacexpr.mli", 374, 13125, 13165), 0), 0, Tag1 ("Vernacexpr", 255)); (("VernacDeclareMLModule", 1314), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -264)], (0)), 100000000, 0, -263)]), 0, (("vernac/vernacexpr.mli", 377, 13213, 13215), ("vernac/vernacexpr.mli", 377, 13213, 13253), 0), 0, Tag1 ("Vernacexpr", 256)); (("VernacChdir", 1315), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -266)], (0)), 100000000, 0, -265)]), 0, (("vernac/vernacexpr.mli", 378, 13254, 13256), ("vernac/vernacexpr.mli", 378, 13254, 13286), 0), 0, Tag1 ("Vernacexpr", 257)); (("VernacExtraDependency", 1316), ([(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -267); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -268); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -270)], (0)), 100000000, 0, -269)]), 0, (("vernac/vernacexpr.mli", 379, 13287, 13289), ("vernac/vernacexpr.mli", 379, 13287, 13345), 0), 0, Tag1 ("Vernacexpr", 258)); (("VernacSetOption", 1317), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -271); (Tag3 (Tag1 ((Tag2 ("Goptions")), "option_name"), 0, (0)), 100000000, 0, -272); (Tag3 ((("option_setting", 1523)), 0, (0)), 100000000, 0, -273)]), 0, (("vernac/vernacexpr.mli", 381, 13347, 13349), ("vernac/vernacexpr.mli", 381, 13347, 13437), 0), 0, Tag1 ("Vernacexpr", 259)); (("VernacProofMode", 1318), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -274)]), 0, (("vernac/vernacexpr.mli", 382, 13438, 13440), ("vernac/vernacexpr.mli", 382, 13438, 13467), 0), 0, Tag1 ("Vernacexpr", 260)); (("VernacExtend", 1319), ([(Tag3 ((("extend_name", 1560)), 0, (0)), 100000000, 0, -275); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Genarg")), "raw_generic_argument"), 0, (0)), 100000000, 0, -277)], (0)), 100000000, 0, -276)]), 0, (("vernac/vernacexpr.mli", 385, 13491, 13493), ("vernac/vernacexpr.mli", 385, 13491, 13557), 0), 0, Tag1 ("Vernacexpr", 261))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacexpr.mli", 356, 12232, 12232), ("vernac/vernacexpr.mli", 385, 13491, 13557), 0), 0, 0, 0, Tag1 ("Vernacexpr", 243)), 1, 0); Tag1 (("synpure_vernac_expr", 1566), (0, 0, Tag1 ([(("VernacOpenCloseScope", 1321), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -19); (Tag3 ((("scope_name", 1502)), 0, (0)), 100000000, 0, -20)]), 0, (("vernac/vernacexpr.mli", 393, 13798, 13800), ("vernac/vernacexpr.mli", 393, 13798, 13843), 0), 0, Tag1 ("Vernacexpr", 263)); (("VernacDeclareScope", 1322), ([(Tag3 ((("scope_name", 1502)), 0, (0)), 100000000, 0, -21)]), 0, (("vernac/vernacexpr.mli", 394, 13844, 13846), ("vernac/vernacexpr.mli", 394, 13844, 13880), 0), 0, Tag1 ("Vernacexpr", 264)); (("VernacDelimiters", 1323), ([(Tag3 ((("scope_name", 1502)), 0, (0)), 100000000, 0, -22); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -24)], (0)), 100000000, 0, -23)]), 0, (("vernac/vernacexpr.mli", 395, 13881, 13883), ("vernac/vernacexpr.mli", 395, 13881, 13931), 0), 0, Tag1 ("Vernacexpr", 265)); (("VernacBindScope", 1324), ([(Tag3 ((("scope_name", 1502)), 0, (0)), 100000000, 0, -25); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("coercion_class", 1500)), 0, (0)), 100000000, 0, -27)], (0)), 100000000, 0, -26)]), 0, (("vernac/vernacexpr.mli", 396, 13932, 13934), ("vernac/vernacexpr.mli", 396, 13932, 13987), 0), 0, Tag1 ("Vernacexpr", 266)); (("VernacEnableNotation", 1325), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -28); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Util")), "union"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -31); (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -34)], (0)), 100000000, 0, -33); (Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -35)]), 100000000, 0, -32)], (0)), 100000000, 0, -30)], (0)), 100000000, 0, -29); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -37)], (0)), 100000000, 0, -36); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("notation_enable_modifier", 1527)), 0, (0)), 100000000, 0, -39)], (0)), 100000000, 0, -38); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "notation_with_optional_scope"), 0, (0)), 100000000, 0, -41)], (0)), 100000000, 0, -40)]), 0, (("vernac/vernacexpr.mli", 397, 13988, 13990), ("vernac/vernacexpr.mli", 397, 13988, 14160), 0), 0, Tag1 ("Vernacexpr", 267)); (("VernacDefinition", 1373), ([(Tag2 ([(Tag3 ((("discharge", 1561)), 0, (0)), 100000000, 0, -43); (Tag3 (Tag1 ((Tag2 ("Decls")), "definition_object_kind"), 0, (0)), 100000000, 0, -44)]), 100000000, 0, -42); (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "name_decl"), 0, (0)), 100000000, 0, -45); (Tag3 ((("definition_expr", 1524)), 0, (0)), 100000000, 0, -46)]), 0, (("vernac/vernacexpr.mli", 400, 14178, 14180), ("vernac/vernacexpr.mli", 400, 14178, 14274), 0), 0, Tag1 ("Vernacexpr", 268)); (("VernacStartTheoremProof", 1374), ([(Tag3 (Tag1 ((Tag2 ("Decls")), "theorem_kind"), 0, (0)), 100000000, 0, -47); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("proof_expr", 1547)), 0, (0)), 100000000, 0, -49)], (0)), 100000000, 0, -48)]), 0, (("vernac/vernacexpr.mli", 401, 14275, 14277), ("vernac/vernacexpr.mli", 401, 14275, 14342), 0), 0, Tag1 ("Vernacexpr", 269)); (("VernacEndProof", 1375), ([(Tag3 ((("proof_end", 1549)), 0, (0)), 100000000, 0, -50)]), 0, (("vernac/vernacexpr.mli", 402, 14343, 14345), ("vernac/vernacexpr.mli", 402, 14343, 14374), 0), 0, Tag1 ("Vernacexpr", 270)); (("VernacExactProof", 1376), ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -51)]), 0, (("vernac/vernacexpr.mli", 403, 14375, 14377), ("vernac/vernacexpr.mli", 403, 14375, 14410), 0), 0, Tag1 ("Vernacexpr", 271)); (("VernacAssumption", 1377), ([(Tag2 ([(Tag3 ((("discharge", 1561)), 0, (0)), 100000000, 0, -53); (Tag3 (Tag1 ((Tag2 ("Decls")), "assumption_object_kind"), 0, (0)), 100000000, 0, -54)]), 100000000, 0, -52); (Tag3 (Tag1 ((Tag2 ("Declaremods")), "inline"), 0, (0)), 100000000, 0, -55); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("with_coercion", 1536)), [(Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "ident_decl"), 0, (0)), 100000000, 0, -60)], (0)), 100000000, 0, -59); (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -61)]), 100000000, 0, -58)], (0)), 100000000, 0, -57)], (0)), 100000000, 0, -56)]), 0, (("vernac/vernacexpr.mli", 404, 14411, 14413), ("vernac/vernacexpr.mli", 405, 14480, 14557), 0), 0, Tag1 ("Vernacexpr", 272)); (("VernacInductive", 1378), ([(Tag3 ((("inductive_kind", 1533)), 0, (0)), 100000000, 0, -62); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("inductive_expr", 1543)), 0, (0)), 100000000, 0, -65); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("notation_declaration", 1528)), 0, (0)), 100000000, 0, -67)], (0)), 100000000, 0, -66)]), 100000000, 0, -64)], (0)), 100000000, 0, -63)]), 0, (("vernac/vernacexpr.mli", 406, 14558, 14560), ("vernac/vernacexpr.mli", 406, 14558, 14647), 0), 0, Tag1 ("Vernacexpr", 273)); (("VernacFixpoint", 1379), ([(Tag3 ((("discharge", 1561)), 0, (0)), 100000000, 0, -68); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("fixpoint_expr", 1530)), 0, (0)), 100000000, 0, -70)], (0)), 100000000, 0, -69)]), 0, (("vernac/vernacexpr.mli", 407, 14648, 14650), ("vernac/vernacexpr.mli", 407, 14648, 14700), 0), 0, Tag1 ("Vernacexpr", 274)); (("VernacCoFixpoint", 1380), ([(Tag3 ((("discharge", 1561)), 0, (0)), 100000000, 0, -71); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("cofixpoint_expr", 1531)), 0, (0)), 100000000, 0, -73)], (0)), 100000000, 0, -72)]), 0, (("vernac/vernacexpr.mli", 408, 14701, 14703), ("vernac/vernacexpr.mli", 408, 14701, 14757), 0), 0, Tag1 ("Vernacexpr", 275)); (("VernacScheme", 1381), ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -77)], (0)), 100000000, 0, -76); (Tag3 ((("scheme", 1552)), 0, (0)), 100000000, 0, -78)]), 100000000, 0, -75)], (0)), 100000000, 0, -74)]), 0, (("vernac/vernacexpr.mli", 409, 14758, 14760), ("vernac/vernacexpr.mli", 409, 14758, 14807), 0), 0, Tag1 ("Vernacexpr", 276)); (("VernacSchemeEquality", 1382), ([(Tag3 ((("equality_scheme_type", 1551)), 0, (0)), 100000000, 0, -79); (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "or_by_notation"), [(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -81)], (0)), 100000000, 0, -80)]), 0, (("vernac/vernacexpr.mli", 410, 14808, 14810), ("vernac/vernacexpr.mli", 410, 14808, 14900), 0), 0, Tag1 ("Vernacexpr", 277)); (("VernacCombinedScheme", 1383), ([(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -82); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -84)], (0)), 100000000, 0, -83)]), 0, (("vernac/vernacexpr.mli", 411, 14901, 14903), ("vernac/vernacexpr.mli", 411, 14901, 14949), 0), 0, Tag1 ("Vernacexpr", 278)); (("VernacUniverse", 1384), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -86)], (0)), 100000000, 0, -85)]), 0, (("vernac/vernacexpr.mli", 412, 14950, 14952), ("vernac/vernacexpr.mli", 412, 14950, 14983), 0), 0, Tag1 ("Vernacexpr", 279)); (("VernacConstraint", 1385), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "univ_constraint_expr"), 0, (0)), 100000000, 0, -88)], (0)), 100000000, 0, -87)]), 0, (("vernac/vernacexpr.mli", 413, 14984, 14986), ("vernac/vernacexpr.mli", 413, 14984, 15033), 0), 0, Tag1 ("Vernacexpr", 280)); (("VernacCanonical", 1386), ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "or_by_notation"), [(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -90)], (0)), 100000000, 0, -89)]), 0, (("vernac/vernacexpr.mli", 416, 15062, 15064), ("vernac/vernacexpr.mli", 416, 15062, 15106), 0), 0, Tag1 ("Vernacexpr", 281)); (("VernacCoercion", 1387), ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "or_by_notation"), [(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -92)], (0)), 100000000, 0, -91); (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("coercion_class", 1500)), 0, (0)), 100000000, 0, -95); (Tag3 ((("coercion_class", 1500)), 0, (0)), 100000000, 0, -96)]), 100000000, 0, -94)], (0)), 100000000, 0, -93)]), 0, (("vernac/vernacexpr.mli", 417, 15107, 15109), ("vernac/vernacexpr.mli", 418, 15153, 15199), 0), 0, Tag1 ("Vernacexpr", 282)); (("VernacIdentityCoercion", 1388), ([(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -97); (Tag3 ((("coercion_class", 1500)), 0, (0)), 100000000, 0, -98); (Tag3 ((("coercion_class", 1500)), 0, (0)), 100000000, 0, -99)]), 0, (("vernac/vernacexpr.mli", 419, 15200, 15202), ("vernac/vernacexpr.mli", 419, 15200, 15270), 0), 0, Tag1 ("Vernacexpr", 283)); (("VernacNameSectionHypSet", 1389), ([(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -100); (Tag3 ((("section_subset_expr", 1553)), 0, (0)), 100000000, 0, -101)]), 0, (("vernac/vernacexpr.mli", 420, 15271, 15273), ("vernac/vernacexpr.mli", 420, 15271, 15330), 0), 0, Tag1 ("Vernacexpr", 284)); (("VernacInstance", 1390), ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "name_decl"), 0, (0)), 100000000, 0, -102); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "local_binder_expr"), 0, (0)), 100000000, 0, -104)], (0)), 100000000, 0, -103); (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -105); (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -108); (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -109)]), 100000000, 0, -107)], (0)), 100000000, 0, -106); (Tag3 ((("hint_info_expr", 1562)), 0, (0)), 100000000, 0, -110)]), 0, (("vernac/vernacexpr.mli", 423, 15353, 15355), ("vernac/vernacexpr.mli", 428, 15553, 15573), 0), 0, Tag1 ("Vernacexpr", 285)); (("VernacDeclareInstance", 1391), ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "ident_decl"), 0, (0)), 100000000, 0, -111); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "local_binder_expr"), 0, (0)), 100000000, 0, -113)], (0)), 100000000, 0, -112); (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -114); (Tag3 ((("hint_info_expr", 1562)), 0, (0)), 100000000, 0, -115)]), 0, (("vernac/vernacexpr.mli", 430, 15575, 15577), ("vernac/vernacexpr.mli", 434, 15710, 15730), 0), 0, Tag1 ("Vernacexpr", 286)); (("VernacContext", 1392), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "local_binder_expr"), 0, (0)), 100000000, 0, -117)], (0)), 100000000, 0, -116)]), 0, (("vernac/vernacexpr.mli", 436, 15732, 15734), ("vernac/vernacexpr.mli", 436, 15732, 15775), 0), 0, Tag1 ("Vernacexpr", 287)); (("VernacExistingInstance", 1393), ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -120); (Tag3 ((("hint_info_expr", 1562)), 0, (0)), 100000000, 0, -121)]), 100000000, 0, -119)], (0)), 100000000, 0, -118)]), 0, (("vernac/vernacexpr.mli", 438, 15777, 15779), ("vernac/vernacexpr.mli", 439, 15807, 15841), 0), 0, Tag1 ("Vernacexpr", 288)); (("VernacExistingClass", 1394), ([(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -122)]), 0, (("vernac/vernacexpr.mli", 441, 15890, 15892), ("vernac/vernacexpr.mli", 441, 15890, 15923), 0), 0, Tag1 ("Vernacexpr", 289)); (("VernacResetName", 1395), ([(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -123)]), 0, (("vernac/vernacexpr.mli", 444, 15978, 15980), ("vernac/vernacexpr.mli", 444, 15978, 16007), 0), 0, Tag1 ("Vernacexpr", 290)); (("VernacResetInitial", 1396), (0), 0, (("vernac/vernacexpr.mli", 445, 16008, 16010), ("vernac/vernacexpr.mli", 445, 16008, 16030), 0), 0, Tag1 ("Vernacexpr", 291)); (("VernacBack", 1397), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -124)]), 0, (("vernac/vernacexpr.mli", 446, 16031, 16033), ("vernac/vernacexpr.mli", 446, 16031, 16052), 0), 0, Tag1 ("Vernacexpr", 292)); (("VernacCreateHintDb", 1398), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -125); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -126)]), 0, (("vernac/vernacexpr.mli", 449, 16071, 16073), ("vernac/vernacexpr.mli", 449, 16071, 16110), 0), 0, Tag1 ("Vernacexpr", 293)); (("VernacRemoveHints", 1399), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -128)], (0)), 100000000, 0, -127); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -130)], (0)), 100000000, 0, -129)]), 0, (("vernac/vernacexpr.mli", 450, 16111, 16113), ("vernac/vernacexpr.mli", 450, 16111, 16161), 0), 0, Tag1 ("Vernacexpr", 294)); (("VernacHints", 1400), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -132)], (0)), 100000000, 0, -131); (Tag3 ((("hints_expr", 1564)), 0, (0)), 100000000, 0, -133)]), 0, (("vernac/vernacexpr.mli", 451, 16162, 16164), ("vernac/vernacexpr.mli", 451, 16162, 16205), 0), 0, Tag1 ("Vernacexpr", 295)); (("VernacSyntacticDefinition", 1401), ([(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -134); (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -137)], (0)), 100000000, 0, -136); (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -138)]), 100000000, 0, -135); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((("syntax_modifier", 1526)), 0, (0)), 100000000, 0, -141)], (0)), 100000000, 0, -140)], (0)), 100000000, 0, -139)]), 0, (("vernac/vernacexpr.mli", 452, 16206, 16208), ("vernac/vernacexpr.mli", 453, 16239, 16309), 0), 0, Tag1 ("Vernacexpr", 296)); (("VernacArguments", 1402), ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "or_by_notation"), [(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -143)], (0)), 100000000, 0, -142); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("vernac_argument_status", 1558)), 0, (0)), 100000000, 0, -145)], (0)), 100000000, 0, -144); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -149); (Tag3 (Tag1 ((Tag2 ("Glob_term")), "binding_kind"), 0, (0)), 100000000, 0, -150)]), 100000000, 0, -148)], (0)), 100000000, 0, -147)], (0)), 100000000, 0, -146); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("arguments_modifier", 1559)), 0, (0)), 100000000, 0, -152)], (0)), 100000000, 0, -151)]), 0, (("vernac/vernacexpr.mli", 454, 16310, 16312), ("vernac/vernacexpr.mli", 458, 16518, 16547), 0), 0, Tag1 ("Vernacexpr", 297)); (("VernacReserve", 1403), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("simple_binder", 1534)), 0, (0)), 100000000, 0, -154)], (0)), 100000000, 0, -153)]), 0, (("vernac/vernacexpr.mli", 459, 16548, 16550), ("vernac/vernacexpr.mli", 459, 16548, 16587), 0), 0, Tag1 ("Vernacexpr", 298)); (("VernacGeneralizable", 1404), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -157)], (0)), 100000000, 0, -156)], (0)), 100000000, 0, -155)]), 0, (("vernac/vernacexpr.mli", 460, 16588, 16590), ("vernac/vernacexpr.mli", 460, 16588, 16635), 0), 0, Tag1 ("Vernacexpr", 299)); (("VernacSetOpacity", 1405), ([(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Conv_oracle")), "level"), 0, (0)), 100000000, 0, -159); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "or_by_notation"), [(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -162)], (0)), 100000000, 0, -161)], (0)), 100000000, 0, -160)]), 100000000, 0, -158)]), 0, (("vernac/vernacexpr.mli", 461, 16636, 16638), ("vernac/vernacexpr.mli", 461, 16636, 16708), 0), 0, Tag1 ("Vernacexpr", 300)); (("VernacSetStrategy", 1417), ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Conv_oracle")), "level"), 0, (0)), 100000000, 0, -165); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "or_by_notation"), [(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -168)], (0)), 100000000, 0, -167)], (0)), 100000000, 0, -166)]), 100000000, 0, -164)], (0)), 100000000, 0, -163)]), 0, (("vernac/vernacexpr.mli", 462, 16709, 16711), ("vernac/vernacexpr.mli", 463, 16734, 16793), 0), 0, Tag1 ("Vernacexpr", 301)); (("VernacMemOption", 1418), ([(Tag3 (Tag1 ((Tag2 ("Goptions")), "option_name"), 0, (0)), 100000000, 0, -169); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Goptions")), "table_value"), 0, (0)), 100000000, 0, -171)], (0)), 100000000, 0, -170)]), 0, (("vernac/vernacexpr.mli", 464, 16794, 16796), ("vernac/vernacexpr.mli", 464, 16794, 16865), 0), 0, Tag1 ("Vernacexpr", 302)); (("VernacPrintOption", 1419), ([(Tag3 (Tag1 ((Tag2 ("Goptions")), "option_name"), 0, (0)), 100000000, 0, -172)]), 0, (("vernac/vernacexpr.mli", 465, 16866, 16868), ("vernac/vernacexpr.mli", 465, 16866, 16911), 0), 0, Tag1 ("Vernacexpr", 303)); (("VernacCheckMayEval", 1420), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Genredexpr")), "raw_red_expr"), 0, (0)), 100000000, 0, -174)], (0)), 100000000, 0, -173); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Goal_select")), "t"), 0, (0)), 100000000, 0, -176)], (0)), 100000000, 0, -175); (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -177)]), 0, (("vernac/vernacexpr.mli", 466, 16912, 16914), ("vernac/vernacexpr.mli", 466, 16912, 17005), 0), 0, Tag1 ("Vernacexpr", 304)); (("VernacGlobalCheck", 1421), ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -178)]), 0, (("vernac/vernacexpr.mli", 467, 17006, 17008), ("vernac/vernacexpr.mli", 467, 17006, 17042), 0), 0, Tag1 ("Vernacexpr", 305)); (("VernacDeclareReduction", 1422), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -179); (Tag3 (Tag1 ((Tag2 ("Genredexpr")), "raw_red_expr"), 0, (0)), 100000000, 0, -180)]), 0, (("vernac/vernacexpr.mli", 468, 17043, 17045), ("vernac/vernacexpr.mli", 468, 17043, 17105), 0), 0, Tag1 ("Vernacexpr", 306)); (("VernacPrint", 1423), ([(Tag3 ((("printable", 1504)), 0, (0)), 100000000, 0, -181)]), 0, (("vernac/vernacexpr.mli", 469, 17106, 17108), ("vernac/vernacexpr.mli", 469, 17106, 17134), 0), 0, Tag1 ("Vernacexpr", 307)); (("VernacSearch", 1424), ([(Tag3 ((("searchable", 1508)), 0, (0)), 100000000, 0, -182); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Goal_select")), "t"), 0, (0)), 100000000, 0, -184)], (0)), 100000000, 0, -183); (Tag3 ((("search_restriction", 1512)), 0, (0)), 100000000, 0, -185)]), 0, (("vernac/vernacexpr.mli", 470, 17135, 17137), ("vernac/vernacexpr.mli", 470, 17135, 17209), 0), 0, Tag1 ("Vernacexpr", 308)); (("VernacLocate", 1425), ([(Tag3 ((("locatable", 1509)), 0, (0)), 100000000, 0, -186)]), 0, (("vernac/vernacexpr.mli", 471, 17210, 17212), ("vernac/vernacexpr.mli", 471, 17210, 17239), 0), 0, Tag1 ("Vernacexpr", 309)); (("VernacRegister", 1426), ([(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -187); (Tag3 ((("register_kind", 1554)), 0, (0)), 100000000, 0, -188)]), 0, (("vernac/vernacexpr.mli", 472, 17240, 17242), ("vernac/vernacexpr.mli", 472, 17240, 17284), 0), 0, Tag1 ("Vernacexpr", 310)); (("VernacPrimitive", 1427), ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "ident_decl"), 0, (0)), 100000000, 0, -189); (Tag3 (Tag1 ((Tag2 ("CPrimitives")), "op_or_type"), 0, (0)), 100000000, 0, -190); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -192)], (0)), 100000000, 0, -191)]), 0, (("vernac/vernacexpr.mli", 473, 17285, 17287), ("vernac/vernacexpr.mli", 473, 17285, 17364), 0), 0, Tag1 ("Vernacexpr", 311)); (("VernacComments", 1456), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("comment", 1511)), 0, (0)), 100000000, 0, -194)], (0)), 100000000, 0, -193)]), 0, (("vernac/vernacexpr.mli", 474, 17365, 17367), ("vernac/vernacexpr.mli", 474, 17365, 17399), 0), 0, Tag1 ("Vernacexpr", 312)); (("VernacAbort", 1457), (0), 0, (("vernac/vernacexpr.mli", 477, 17426, 17428), ("vernac/vernacexpr.mli", 477, 17426, 17441), 0), 0, Tag1 ("Vernacexpr", 313)); (("VernacAbortAll", 1458), (0), 0, (("vernac/vernacexpr.mli", 478, 17442, 17444), ("vernac/vernacexpr.mli", 478, 17442, 17460), 0), 0, Tag1 ("Vernacexpr", 314)); (("VernacRestart", 1459), (0), 0, (("vernac/vernacexpr.mli", 479, 17461, 17463), ("vernac/vernacexpr.mli", 479, 17461, 17478), 0), 0, Tag1 ("Vernacexpr", 315)); (("VernacUndo", 1460), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -195)]), 0, (("vernac/vernacexpr.mli", 480, 17479, 17481), ("vernac/vernacexpr.mli", 480, 17479, 17500), 0), 0, Tag1 ("Vernacexpr", 316)); (("VernacUndoTo", 1461), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -196)]), 0, (("vernac/vernacexpr.mli", 481, 17501, 17503), ("vernac/vernacexpr.mli", 481, 17501, 17524), 0), 0, Tag1 ("Vernacexpr", 317)); (("VernacFocus", 1462), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -198)], (0)), 100000000, 0, -197)]), 0, (("vernac/vernacexpr.mli", 482, 17525, 17527), ("vernac/vernacexpr.mli", 482, 17525, 17554), 0), 0, Tag1 ("Vernacexpr", 318)); (("VernacUnfocus", 1463), (0), 0, (("vernac/vernacexpr.mli", 483, 17555, 17557), ("vernac/vernacexpr.mli", 483, 17555, 17572), 0), 0, Tag1 ("Vernacexpr", 319)); (("VernacUnfocused", 1464), (0), 0, (("vernac/vernacexpr.mli", 484, 17573, 17575), ("vernac/vernacexpr.mli", 484, 17573, 17592), 0), 0, Tag1 ("Vernacexpr", 320)); (("VernacBullet", 1465), ([(Tag3 (Tag1 ((Tag2 ("Proof_bullet")), "t"), 0, (0)), 100000000, 0, -199)]), 0, (("vernac/vernacexpr.mli", 485, 17593, 17595), ("vernac/vernacexpr.mli", 485, 17593, 17627), 0), 0, Tag1 ("Vernacexpr", 321)); (("VernacSubproof", 1471), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Goal_select")), "t"), 0, (0)), 100000000, 0, -201)], (0)), 100000000, 0, -200)]), 0, (("vernac/vernacexpr.mli", 486, 17628, 17630), ("vernac/vernacexpr.mli", 486, 17628, 17670), 0), 0, Tag1 ("Vernacexpr", 322)); (("VernacEndSubproof", 1472), (0), 0, (("vernac/vernacexpr.mli", 487, 17671, 17673), ("vernac/vernacexpr.mli", 487, 17671, 17692), 0), 0, Tag1 ("Vernacexpr", 323)); (("VernacShow", 1473), ([(Tag3 ((("showable", 1510)), 0, (0)), 100000000, 0, -202)]), 0, (("vernac/vernacexpr.mli", 488, 17693, 17695), ("vernac/vernacexpr.mli", 488, 17693, 17719), 0), 0, Tag1 ("Vernacexpr", 324)); (("VernacCheckGuard", 1474), (0), 0, (("vernac/vernacexpr.mli", 489, 17720, 17722), ("vernac/vernacexpr.mli", 489, 17720, 17740), 0), 0, Tag1 ("Vernacexpr", 325)); (("VernacValidateProof", 1475), (0), 0, (("vernac/vernacexpr.mli", 490, 17741, 17743), ("vernac/vernacexpr.mli", 490, 17741, 17764), 0), 0, Tag1 ("Vernacexpr", 326)); (("VernacProof", 1476), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Genarg")), "raw_generic_argument"), 0, (0)), 100000000, 0, -204)], (0)), 100000000, 0, -203); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("section_subset_expr", 1553)), 0, (0)), 100000000, 0, -206)], (0)), 100000000, 0, -205)]), 0, (("vernac/vernacexpr.mli", 491, 17765, 17767), ("vernac/vernacexpr.mli", 491, 17765, 17847), 0), 0, Tag1 ("Vernacexpr", 327)); (("VernacAddOption", 1477), ([(Tag3 (Tag1 ((Tag2 ("Goptions")), "option_name"), 0, (0)), 100000000, 0, -207); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Goptions")), "table_value"), 0, (0)), 100000000, 0, -209)], (0)), 100000000, 0, -208)]), 0, (("vernac/vernacexpr.mli", 493, 17849, 17851), ("vernac/vernacexpr.mli", 493, 17849, 17920), 0), 0, Tag1 ("Vernacexpr", 328)); (("VernacRemoveOption", 1478), ([(Tag3 (Tag1 ((Tag2 ("Goptions")), "option_name"), 0, (0)), 100000000, 0, -210); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Goptions")), "table_value"), 0, (0)), 100000000, 0, -212)], (0)), 100000000, 0, -211)]), 0, (("vernac/vernacexpr.mli", 494, 17921, 17923), ("vernac/vernacexpr.mli", 494, 17921, 17995), 0), 0, Tag1 ("Vernacexpr", 329))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacexpr.mli", 390, 13748, 13748), ("vernac/vernacexpr.mli", 494, 17921, 17995), 0), 0, 0, 0, Tag1 ("Vernacexpr", 262)), 0, 0); Tag1 (("vernac_expr_gen", 1567), ([((("a")), 100000000, 0, -17)], 1, Tag1 ([(("VernacSynterp", 1485), ([((("a")), 100000000, 0, -17)]), 0, (("vernac/vernacexpr.mli", 500, 18250, 18252), ("vernac/vernacexpr.mli", 500, 18250, 18273), 0), 0, Tag1 ("Vernacexpr", 331)); (("VernacSynPure", 1486), ([(Tag3 ((("synpure_vernac_expr", 1566)), 0, (0)), 100000000, 0, -18)]), 0, (("vernac/vernacexpr.mli", 501, 18274, 18276), ("vernac/vernacexpr.mli", 501, 18274, 18314), 0), 0, Tag1 ("Vernacexpr", 332))], 0), 1, 0, [25], [0], 0, 0, (("vernac/vernacexpr.mli", 499, 18224, 18224), ("vernac/vernacexpr.mli", 501, 18274, 18314), 0), 0, 0, 0, Tag1 ("Vernacexpr", 330)), 1, 0); Tag1 (("vernac_expr", 1568), (0, 0, 0, 1, ((Tag3 ((("vernac_expr_gen", 1567)), [(Tag3 ((("synterp_vernac_expr", 1565)), 0, (0)), 100000000, 0, -16)], (0)), 100000000, 0, -15)), 0, 0, 0, 0, (("vernac/vernacexpr.mli", 503, 18316, 18316), ("vernac/vernacexpr.mli", 503, 18316, 18370), 0), 0, 0, 0, Tag1 ("Vernacexpr", 333)), 1, 0); Tag1 (("control_flag", 1569), (0, 0, Tag1 ([(("ControlTime", 1489), (0), 0, (("vernac/vernacexpr.mli", 506, 18392, 18394), ("vernac/vernacexpr.mli", 506, 18392, 18407), 0), 0, Tag1 ("Vernacexpr", 335)); (("ControlRedirect", 1490), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -13)]), 0, (("vernac/vernacexpr.mli", 507, 18408, 18410), ("vernac/vernacexpr.mli", 507, 18408, 18437), 0), 0, Tag1 ("Vernacexpr", 336)); (("ControlTimeout", 1491), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -14)]), 0, (("vernac/vernacexpr.mli", 508, 18438, 18440), ("vernac/vernacexpr.mli", 508, 18438, 18463), 0), 0, Tag1 ("Vernacexpr", 337)); (("ControlFail", 1492), (0), 0, (("vernac/vernacexpr.mli", 509, 18464, 18466), ("vernac/vernacexpr.mli", 509, 18464, 18479), 0), 0, Tag1 ("Vernacexpr", 338)); (("ControlSucceed", 1493), (0), 0, (("vernac/vernacexpr.mli", 510, 18480, 18482), ("vernac/vernacexpr.mli", 510, 18480, 18498), 0), 0, Tag1 ("Vernacexpr", 339))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacexpr.mli", 505, 18372, 18372), ("vernac/vernacexpr.mli", 510, 18480, 18498), 0), 0, 0, 0, Tag1 ("Vernacexpr", 334)), 1, 0); Tag1 (("vernac_control_gen_r", 1570), ([((("a")), 100000000, 0, -9); ((("b")), 100000000, 0, -12)], 2, [[(("control", 1496), 0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -9)], (0)), 100000000, 0, -8), (("vernac/vernacexpr.mli", 513, 18537, 18541), ("vernac/vernacexpr.mli", 514, 18559, 18562), 0), 0, Tag1 ("Vernacexpr", 342)); (("attrs", 1497), 0, (Tag3 (Tag1 ((Tag2 ("Attributes")), "vernac_flags"), 0, (0)), 100000000, 0, -10), (("vernac/vernacexpr.mli", 514, 18559, 18563), ("vernac/vernacexpr.mli", 515, 18595, 18598), 0), 0, Tag1 ("Vernacexpr", 343)); (("expr", 1498), 0, (Tag3 ((("vernac_expr_gen", 1567)), [((("b")), 100000000, 0, -12)], (0)), 100000000, 0, -11), (("vernac/vernacexpr.mli", 515, 18595, 18599), ("vernac/vernacexpr.mli", 515, 18595, 18624), 0), 0, Tag1 ("Vernacexpr", 344))]], 1, 0, [25; 25], [0; 0], 0, 0, (("vernac/vernacexpr.mli", 512, 18500, 18500), ("vernac/vernacexpr.mli", 516, 18625, 18628), 0), 0, 0, 0, Tag1 ("Vernacexpr", 340)), 1, 0); Tag1 (("vernac_control_gen", 1571), ([((("a")), 100000000, 0, -7)], 1, 0, 1, ((Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((("vernac_control_gen_r", 1570)), [(Tag3 ((("control_flag", 1569)), 0, (0)), 100000000, 0, -6); ((("a")), 100000000, 0, -7)], (0)), 100000000, 0, -5)], (0)), 100000000, 0, -4)), [31], [0], 0, 0, (("vernac/vernacexpr.mli", 517, 18629, 18629), ("vernac/vernacexpr.mli", 517, 18629, 18703), 0), 0, 0, 0, Tag1 ("Vernacexpr", 341)), 2, 0); Tag1 (("vernac_control", 1572), (0, 0, 0, 1, ((Tag3 ((("vernac_control_gen", 1571)), [(Tag3 ((("synterp_vernac_expr", 1565)), 0, (0)), 100000000, 0, -3)], (0)), 100000000, 0, -2)), 0, 0, 0, 0, (("vernac/vernacexpr.mli", 519, 18705, 18705), ("vernac/vernacexpr.mli", 519, 18705, 18765), 0), 0, 0, 0, Tag1 ("Vernacexpr", 345)), 1, 0)], "Vernacexpr", [("Vernacexpr", ("Lu|g\028\024j\193\000\234\175\209&\211]\137")); ("Z", ("\253\196\2168\027\199O\134\220\218\031'\1484\233o")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Unix", (":B72R\011\005Sj\189)\011\239PH\254")); ("UnivSubst", ("\190qu\031mc\130\181\003G]\132\"\219m)")); ("UnivProblem", ("6'\161\018\181\001.\253\000\141a6\171\1727\155")); ("UnivNames", ("%\151_\209%+JM$n\001\232\194n\178N")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Unification", ("\017\027\157=\255\1914L\020\213h\154.\219\005\170")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UState", ("SD\203\215|\136\n\251\239\208\148\215C\n\167\005")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("Typeclasses", ("KO\1297x\192\210\231\001\1824l\135\192\160|")); ("Type_errors", ("7\157\162-\214M\206\196\228\191\005v\134\177\144\134")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Tactypes", ("\143E\135*\195\151\144H\151M\011($\017\159\203")); ("Tacred", ("\133d\143\1310z\030\237\232\002\001\025\147\140\215:")); ("Summary", ("\148G\135\226\024L3\246\021\028U\146\164`\253\250")); ("Store", ("/dT\252\145\179pq\216{\181\206\190K+U")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Random", ("\020\005Xq\171\026\218\152X\135\254\023\133zK\200")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Section", ("\245\207\b\021\142v=\155#w\246}\"4b\006")); ("Safe_typing", (")\250?\164\145\132\241\127\186\152h+\145\"\237l")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Reductionops", ("\179\023P\218\146Uh\014IS\196C\031q~#")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Proofview_monad", ("\218\196\189S\147\216\129\221\231\224v\228O\024*\239")); ("Proofview", ("\245\140U\027\236\199\199&\242\156\199YG\250tA")); ("Proof_bullet", ("\249\179=\253g\211\149\212\t\217_0\179\197k\179")); ("Proof", ("\249\030\200g\248\164o&\tS\132\rTl\1736")); ("Primred", ("\158G\192\182\224\196\144*\174y_E\165\012\137C")); ("Pretype_errors", ("\155\229\201\176\163\234\203C\127\227\141\174j\199\200H")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Pattern", ("\195C\140Wb=\022\222\208\227^K\003\020\215X")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("NumTok", ("vd\023^\251\244B\166\145'\156\196-0\027\169")); ("Notationextern", ("\000\022b5`t\134]\192f4\131\187\192\152\160")); ("Notation_term", ("5\002\017\217b\193nc>\239\239\237\244\031\173?")); ("Notation", ("\243\219),\220\160v\230\t$\246\188\252\172\152\147")); ("Nativevalues", ("8:\007\025e\226c,\001\171\146#l\210\171\152")); ("Nativelib", ("V\239\205Y1\147E:,\176\196Hy\1483|")); ("Nativecode", ("\190\185\255\006m\012\210\163\138Rz\247\15283\183")); ("Nametab", ("1\018\163\254\225\2178\025DI\0271Q\198\134\140")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Namegen", ("\187\222\224T\255\020\1808-\212*\164\131\177\157x")); ("Monad", ("\244\171T\157\194p\187\160\149\195{\132\222\020\253\148")); ("Modintern", ("F\222V\246R\143{\n\240\004;;;\011\026\223")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Ltac_pretype", ("\224\"\167\018i:U\172>\188\128$\r\252\020T")); ("Logic_monad", ("\130\157\160Q\163vQ\137\184\2242\209\128\024\220i")); ("Locus", ("_\002\003W\246\181\225\242Uf\139\226\176\174\192I")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Libobject", ("\132}t\226hl\213L\210\172\167pc\012~\129")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Lib", ("8\018\021\210\020\136$\149\164=\007\002\218\026RX")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hook", ("\183\194\223\003\155\169',\187\240a;E\b\1396")); ("Hints", ("\007\130]H\\t(\131\000}\205\137H\148\250\166")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Gramlib__Stream", ("\248\\H\205_76\253\136\146\200\031\165\021=t")); ("Gramlib__Gramext", ("B\171oA\172\212\187>\175\233Q\145\"\176TM")); ("Gramlib", ("\154\143\210e\021i\246\176\224\194\220\217\007\145\139A")); ("Goptions", ("i>Rt=\183g\153\190\144\235u\248\247*e")); ("Goal_select", ("\235$\175\023t\178\194.Ivlz\005\211\173\n")); ("Globnames", ("W\004\172T\214\181H\220\232\160LSW\006\130\226")); ("Glob_term", ("\165=a\227\160\153.\021_$\232\209T\236\153O")); ("Genredexpr", ("rz\204\143\007`VgI\195P\168sO\198\012")); ("Genlambda", ("\170}\024\241\141\222\136S\169\219\2212i\134KI")); ("Geninterp", ("2S\151\191\189\159\004\188;\224d\199|U\004\028")); ("Genarg", ("\1434\015\001\152\196\005s\156\136\195\185\247\b3\t")); ("Ftactic", ("K\172\205\128\241\162\160\201\202\1561o\180L\206:")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Extend", ("\179&!W\163V\006\245\018\168\021\001\224s\168\234")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evd", ("\211\205p\193\216\129r\006\239oN\142ar\196\175")); ("Evarsolve", ("\000&\228\016}j\199\t\229\173\127\024\219\199\184\178")); ("Evar_kinds", ("\023L\186\132\218}\254\221\185\198\220\200h\003{\021")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Entries", ("\172\201\198\221Ap\027_{\174\141C\021\";p")); ("EConstr", ("\201aW\156\157;N\004\201V\208\006L\166\211)")); ("Dyn", ("\131z`\205v\2306\007x\027&K.?;\169")); ("Deprecation", ("\226:\146\245\190;\1929\254@\247a\218\244\134\189")); ("Decls", ("\140C{$\142?\215\153\180\186h;\153\139\187\129")); ("Declaremods", ("\019d|\168<\144\239o\017\222\248K^\157\198\179")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("DAst", ("\224/\200)\007\184ni\134\b\139\204\241\005w\212")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conversion", ("\158\150&\195M\tv\127|\029\158RRK\211A")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constrexpr", ("p'r\245\184chL\183\249\"\213]\1741\237")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("Coercionops", ("\238\240\220\191\201\bMazv\159\227\236?\147>")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CWarnings", ("\132\220\150\227\215\239t\217\132\220'JX\188\246c")); ("CUnix", ("\140Zl\153\167\011J\015\005|th\247OTu")); ("CString", ("\243~4C\023~\169\148x\206\165\207\195\177Q\184")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CDebug", ("^4\210p7\239!3\138\138\213?\239`\250\157")); ("CClosure", ("\167\b\022\241V-\r\253\b\002\000j]\223%\142")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("Attributes", ("\2145\146P\224\163B1\135\232\204SD\129^\141")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [1; (0)])
type vernac_control = synterp_vernac_expr vernac_control_gen
